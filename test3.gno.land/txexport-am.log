{"msg":[{"@type":"/vm.m_call","caller":"g1zj8kzdgtte4e7z6p4qsu7hkkdx0mz029tt8fhl","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1517","1","1","g1zj8kzdgtte4e7z6p4qsu7hkkdx0mz029tt8fhl"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2VDpku69weuJ67L27UeHQKnVyUkumlrhZRf2LlBXyjv"},"signature":"lqu8Aom++OcXsSsNXocB2EqP7k0NqUjGz9NY0bROpHRKhBHPMamPpvPBGlW/IyujwctkPncoHrfEe2gEluc9cg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15xgw0xf4k2zvyzz53nrpt8n5f29s4fwx88yjy9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"3JCaKSeuIQYjDXZX7TbWvJp0uR59Z0N9sa7whVnl0cF13/AJwjOg1sxgnn9LDSEg85l59UgwjpkP0YSr8fDRbg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15xgw0xf4k2zvyzz53nrpt8n5f29s4fwx88yjy9","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","preventthiszz",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgjAWDu/JGXSzHSuublD97LXXPTRq/5d9JyWVG4DC0hJ"},"signature":"V7NFYIW1329b6YZijYQb4lMdixjVWU1f4r3yySpZHRIPQSQXzHEWUF1AZDpclJOj9AYKi8ejAZaZds9cbHraZw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15xgw0xf4k2zvyzz53nrpt8n5f29s4fwx88yjy9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["preventthiszz"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgjAWDu/JGXSzHSuublD97LXXPTRq/5d9JyWVG4DC0hJ"},"signature":"v/sUHHv3y+/IsDCfmk08klOFm4G0btkwnDNyZuOcB1Mrudd/8LIjYldgbkjBjRARaPuekuq9gP99e2ZmzsikiQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15xgw0xf4k2zvyzz53nrpt8n5f29s4fwx88yjy9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1518","preventthiszz","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgjAWDu/JGXSzHSuublD97LXXPTRq/5d9JyWVG4DC0hJ"},"signature":"mdpT/+NqzFgpF19y7c3Aqb6Qf23S/VNAAIVZZc/W7MMhK6rUIJ/IvckWFleH0uuBahBuwETuZjq9pjABCrDaDw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15xgw0xf4k2zvyzz53nrpt8n5f29s4fwx88yjy9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1518","1","1","g15xgw0xf4k2zvyzz53nrpt8n5f29s4fwx88yjy9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgjAWDu/JGXSzHSuublD97LXXPTRq/5d9JyWVG4DC0hJ"},"signature":"iKyBeA2M9fO4+JHXEsx5oHgn30sGnEleMgV+4aulZ20PnUPON6qCEiYZM7f1aE87FaNMgdFzXc9fqSv5i0UeQA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1cka6vnntj52x2hnfw4cplgw80ja0g9xnwkle4x","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"hHnZLAs/sZ4vfDC9/o3fUC05ZoXp5cFq1e1BwbNfKQF4MLywdr8khmLZhclE33zmagvYSuzRcqNj/Ad0X931Qg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cka6vnntj52x2hnfw4cplgw80ja0g9xnwkle4x","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","awaretouristx2",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A17NJonOJbna8X4f9HQKp8a1Ho3rIgxMNSPKwNG9hyur"},"signature":"QndbzZqeKkR5USdcWtZ2pJKtOrrtKfKLttOthYq4xls9n7NjKVZCvPftlTKtkEDRa7yxgSVE/QCnZOwMICe1OQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cka6vnntj52x2hnfw4cplgw80ja0g9xnwkle4x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["awaretouristx2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A17NJonOJbna8X4f9HQKp8a1Ho3rIgxMNSPKwNG9hyur"},"signature":"SW+d1r3x81APVKJUeuncQc5owjilPZwYbFiv9qzyXHIDavcC/+G8xIjFHFBV2bN0bZBZjUmSrdnPjmrPk5Armg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cka6vnntj52x2hnfw4cplgw80ja0g9xnwkle4x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1519","awaretouristx2","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A17NJonOJbna8X4f9HQKp8a1Ho3rIgxMNSPKwNG9hyur"},"signature":"7103bIBeko5WqhGD+T2WV7jWFmCZQrYYA+/3j9+HNdNhby+GuwTKT4Nda69hVPuWe62hyal3SXIZpyWMuRTlzQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cka6vnntj52x2hnfw4cplgw80ja0g9xnwkle4x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1519","1","1","g1cka6vnntj52x2hnfw4cplgw80ja0g9xnwkle4x"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A17NJonOJbna8X4f9HQKp8a1Ho3rIgxMNSPKwNG9hyur"},"signature":"PmDf0PCOKN7sj/ngizOx+zZKv8pjw1V78aMHij/GGG8rjyTXhSxItCspQvWICsyiKvPB3QKL1BDw/4N6OtX4CA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1v06lee4cendn6sn3lts48uxf8hruu9dl53mard","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"zgIevWEXPhpwh9XRjaaygR55a9ARSNSgKkuEP+fxhl4Wvj6zfZuPgiH6AWstRLR94EvPF6uww2iNHuuJMAXjvg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v06lee4cendn6sn3lts48uxf8hruu9dl53mard","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","increasedegreesn",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ar1xG+/NXKrf7uv/kqCu2Bss/JS1bZKm+AAFKIKbK3ZB"},"signature":"k0XjIm0xqpxrKXyn30UVHTfItPBYgokYb+UTJbHZy4tR/W+pBCL1CqzNXxg95E7bkhLWsmhXxGo/glSwGf1iUw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v06lee4cendn6sn3lts48uxf8hruu9dl53mard","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["increasedegreesn"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ar1xG+/NXKrf7uv/kqCu2Bss/JS1bZKm+AAFKIKbK3ZB"},"signature":"Aqi6l93UPQwdHZ/wrYzm4J453aKkR6PjiVKHHGqdrdI+YyffuYbK/x8vlu8vWGbgbjBNVv9fylv7x1w1snuRQw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v06lee4cendn6sn3lts48uxf8hruu9dl53mard","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1520","increasedegreesn","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ar1xG+/NXKrf7uv/kqCu2Bss/JS1bZKm+AAFKIKbK3ZB"},"signature":"wBHEo6IqKNa7oALmM+mtqQM/a5HotCbgxvSwZUIoI2ZwZoSNEkv+UcaLjub2q3QaPSiRXV+LE1/Ry0iewdCAEg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v06lee4cendn6sn3lts48uxf8hruu9dl53mard","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1520","1","1","g1v06lee4cendn6sn3lts48uxf8hruu9dl53mard"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ar1xG+/NXKrf7uv/kqCu2Bss/JS1bZKm+AAFKIKbK3ZB"},"signature":"v7gS85sjtjk/PU6o0k0nEmuoODsFi+bAo+zPpNY1DnVqGyaPoq58vQmi8LqevUpnlOHKrlaRvGb0ikl86GQWtw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vqc5pltwl0p5wl82drkgs0l4pzwdgjvv50djv9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"3zzMfN0wqDlwKRAJQLzNZqQhu7MhqP+c8vWNP4PBCqJuu74fMPC6LSYsQhGElt8WDakztx7rb3TsreXqyfXTaQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vqc5pltwl0p5wl82drkgs0l4pzwdgjvv50djv9","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","vanmulel8",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxrJOGha74XSA3vHDjMRjuriCoAJjB7SMV+fTyBartrE"},"signature":"+GQFvH6lo+F9M6pgiaN1JTFlaWQpUj9Goo7aWYolPIo5wPMILxoFB8/SdGwFtbvuKNKBRjHil88wpv/MZtQUaw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vqc5pltwl0p5wl82drkgs0l4pzwdgjvv50djv9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["vanmulel8"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxrJOGha74XSA3vHDjMRjuriCoAJjB7SMV+fTyBartrE"},"signature":"KhRs9XTky76OofN0WdxUhRs7LaB9Fda15dlxJuLulkZN4a689xapm/3SNc7cw+nZ/6+TAhIv3rFstn8Gt6d1tA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vqc5pltwl0p5wl82drkgs0l4pzwdgjvv50djv9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1521","vanmulel8","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxrJOGha74XSA3vHDjMRjuriCoAJjB7SMV+fTyBartrE"},"signature":"I+879pAOCJbxdGWIT4yM+b355kkRtp4c+xPi5Z1BtDtz7PeVTPXSBRtjNVIyj/R+jMD46Q/P8M/tZuGQStlTOw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vqc5pltwl0p5wl82drkgs0l4pzwdgjvv50djv9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1521","1","1","g1vqc5pltwl0p5wl82drkgs0l4pzwdgjvv50djv9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxrJOGha74XSA3vHDjMRjuriCoAJjB7SMV+fTyBartrE"},"signature":"pb6+sLU6A5lDgY8IrSSh1bRewmzXuumeiCJV/AlaHtRykrN6PT8CMewSpA9FqQrF8otS0anm3m4q84rwGKh+iQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ya40pnzacpq5e2su345zfr2s8q83sm0zgf3daw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"xlQCJgiHm+qJtAR9iiR5jKnKlyCiw1pUxHUibjszWH0SGAOIvLjMce6jyxlJdozZzYWEa6UZqQwznFUfbDXShw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ya40pnzacpq5e2su345zfr2s8q83sm0zgf3daw","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","dolphinmedia2s",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuyvEt40ryXLksPI9WrlGYcarwIqt3jhqlUwISz3W5oC"},"signature":"sEaU8mQMY1N33cbcEGYXVBTJhQkNQqWTAVlbgWLGrvs0U8kfJ++PaNlC+myNo4fWPbGpS/FDusyBfzfv7dnlrg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ya40pnzacpq5e2su345zfr2s8q83sm0zgf3daw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["dolphinmedia2s"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuyvEt40ryXLksPI9WrlGYcarwIqt3jhqlUwISz3W5oC"},"signature":"+pxAXRcQl6SC2RKMfVqzVHfZqBbWcpAuX0NGQ3ymJTh+tGgRB1lH+kqLxEgf24crlTdRhFf72t17giikTgPPYw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ya40pnzacpq5e2su345zfr2s8q83sm0zgf3daw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1522","dolphinmedia2s","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuyvEt40ryXLksPI9WrlGYcarwIqt3jhqlUwISz3W5oC"},"signature":"4SYCXRIqjnJfr/oyuZr5lMb/8faMWt3ncf/wRQZ83iBxUEQGATnojYxY+yVwmR/wgG+D+7NW5hzryjQsTy4laA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ya40pnzacpq5e2su345zfr2s8q83sm0zgf3daw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1522","1","1","g1ya40pnzacpq5e2su345zfr2s8q83sm0zgf3daw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuyvEt40ryXLksPI9WrlGYcarwIqt3jhqlUwISz3W5oC"},"signature":"0ho0GnpPylfsjg46jH+B5Lu82DZAaYR2HhDkCsTOWgFG/fu/zBzAc+Boz3TCAOu03YF8w5mP4uf/jQ/QdneAbQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lxlhpch8wsukc94lf8pc3lw9lyzypsruju8vre","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"pZPTH3FSLbQF3EznJKKA6Nat4BYxzJeoKZnfitutRJ10fNg6RrZvBHuriaFA61bGkVHKaU1G16CpW7flsZJsew=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lxlhpch8wsukc94lf8pc3lw9lyzypsruju8vre","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","installunfairkc",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1mLEZhMvEZ/wOov0R8jzmASt1jO9EW7n/QvxC1pSMow"},"signature":"BBEeT+h/KqRMds4gj3PyD6g3GmCCTQCqeNW2M1M1MhJgcMfpbXkdLyIY03Csp+NtbFjmo1D8CxriumInhDL1Sw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lxlhpch8wsukc94lf8pc3lw9lyzypsruju8vre","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["installunfairkc"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1mLEZhMvEZ/wOov0R8jzmASt1jO9EW7n/QvxC1pSMow"},"signature":"L0SL++lVUYzrea7F19THMF8RDXnyXuZVWUlq2XUg9+B9Bz3moPSWZK3DW6wwlDZOj6dE3eKbGH7x8I2CVwO2TQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lxlhpch8wsukc94lf8pc3lw9lyzypsruju8vre","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1523","installunfairkc","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1mLEZhMvEZ/wOov0R8jzmASt1jO9EW7n/QvxC1pSMow"},"signature":"aHtba/lzIUMMkwz+tdfwv1KSM8VEVRHhIjapbFCymYl/jQYQ3yJHAeZy+o61EobpyxUUAVLzVQmCkh7Bk8Gc1A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lxlhpch8wsukc94lf8pc3lw9lyzypsruju8vre","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1523","1","1","g1lxlhpch8wsukc94lf8pc3lw9lyzypsruju8vre"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1mLEZhMvEZ/wOov0R8jzmASt1jO9EW7n/QvxC1pSMow"},"signature":"tVub06JcpG6yynk7fDg3+D6M+wCyAr6DrFobGkimqVlD908+Ewod3Bq/i4UJt1BvdUgDtT475I8tGW8+71yKuA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1e0kutjx8y6w0u4hsgrlrgf9sf4esu9r7y8g8h7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"fUewS51NrHPPHv5dq4D1RWfQEwBpAsICIMuXkbpyn41wEYd/TNgRa5O7VAqyFWR8cVGxbXzHuXrv7WrSgpU+lw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e0kutjx8y6w0u4hsgrlrgf9sf4esu9r7y8g8h7","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","skifile4h",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApErujtwRp9Hm5lm1GYI2fwo6HVIlGTs2rqW18353OeW"},"signature":"yBt4URXFpDngJVVZZIv51/73EmPsoizulb/3b63L7BJC5MicUn7fcTkFMa1BZuTJaXugxUoaC8nITFBskwyy8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e0kutjx8y6w0u4hsgrlrgf9sf4esu9r7y8g8h7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["skifile4h"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApErujtwRp9Hm5lm1GYI2fwo6HVIlGTs2rqW18353OeW"},"signature":"XVRnsSCZDKmRsrJx9yUT9fVI5Z6s907wG4pyhnS6MpxuAAZOkkUhbflgN5CLvIuHxVpDUK1e1du9jxp2z9tf+w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e0kutjx8y6w0u4hsgrlrgf9sf4esu9r7y8g8h7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1524","skifile4h","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApErujtwRp9Hm5lm1GYI2fwo6HVIlGTs2rqW18353OeW"},"signature":"V1+MOcKz1toQGaOTPeEYX/Smij7RPWLQfTzl0VOrIBUl2HUSqRukkoCluZAH+YMyQdB2YF+o8aRKWnk/SjNMJA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e0kutjx8y6w0u4hsgrlrgf9sf4esu9r7y8g8h7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1524","1","1","g1e0kutjx8y6w0u4hsgrlrgf9sf4esu9r7y8g8h7"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApErujtwRp9Hm5lm1GYI2fwo6HVIlGTs2rqW18353OeW"},"signature":"0Uurm5wfQ7Q4AGDuO96PuvBuzzlKrsLb9ErXem2BedxykDLovygdXcORAItY4i3p5iBeX5V6Fc3V9J7F0GNn+Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1s54gt2e53pzpa5rx9kglws0d02lk56qeheh2sf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"gDoTauFxBVdIRubT9SgMqS1p3Y/yOcB6Ik+nWuoA/CVQYl3L4lLcIgn2E/BrsY4oVXABXkggd+n8SfuwzEqBqw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s54gt2e53pzpa5rx9kglws0d02lk56qeheh2sf","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","luxuryarmor5r",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al3UTyRtr4UGavGshMM36Cq9FRuQe27UmJ70qUji8HZk"},"signature":"82TF8ndQ3HlaFSwpzI2DHThMDqwCZw13LOv2BFIvpysSPoAHA1cLWIfKQDsFMFbvdrT7aewjaDPszwEk1drOuw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s54gt2e53pzpa5rx9kglws0d02lk56qeheh2sf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["luxuryarmor5r"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al3UTyRtr4UGavGshMM36Cq9FRuQe27UmJ70qUji8HZk"},"signature":"AfBZuvLyd0S6haxHJaLUBCZaSMZXiI/yFjUmin2rsGxX2KaDNsaKp4J6ld9/g0lUXrLZcC+ZvwcAnx5ncJo3EA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s54gt2e53pzpa5rx9kglws0d02lk56qeheh2sf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1525","luxuryarmor5r","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al3UTyRtr4UGavGshMM36Cq9FRuQe27UmJ70qUji8HZk"},"signature":"uAWCVN2x8PrQHY+ywcHs2IDFcqnoK2CVTIxarxwtyqEVVSANnvWJcXvJG/oW13G1FmPyjWCjDL/2lKiTkBCzUg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s54gt2e53pzpa5rx9kglws0d02lk56qeheh2sf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1525","1","1","g1s54gt2e53pzpa5rx9kglws0d02lk56qeheh2sf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al3UTyRtr4UGavGshMM36Cq9FRuQe27UmJ70qUji8HZk"},"signature":"FOrUl9QhKYj+gkmE9Y067kP82NkNDSCMsfufc3Or//o0DeCrynukDHuqo1BhQrbgfXSj9qTOJovSR3GN/j254w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1kdra9ctrumt7a08snc86hcv8tms4j5kyhl2jm7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Ijo8dRHb6GQtrS0JIlh+9arVgaa3rWxpJzIIADOEbD5m2sOVbuw6b6BxxdF9eia93isnlzBZ4cmTLLjoTi27RA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kdra9ctrumt7a08snc86hcv8tms4j5kyhl2jm7","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","smallankle08",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7Ms2uR+0axhTvAGpxOJs7CErA/I3Z+bopRGXilWRDGu"},"signature":"s38nN/DtT1xLXM3KiQI15+B/AD/mUVHqNkhrFOW+VGE0VdumTwaE2uwsX5jfBURJPPADU+23NUI/G6DGR5puiA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kdra9ctrumt7a08snc86hcv8tms4j5kyhl2jm7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["smallankle08"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7Ms2uR+0axhTvAGpxOJs7CErA/I3Z+bopRGXilWRDGu"},"signature":"wtd5sc4bcfkpE8cS42Lt0IBrz7lWuu5A03fUZLTXTncSk1AxTOa7LWKtciKPceQFb4EvtBTORHYUFttRQNhWKg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kdra9ctrumt7a08snc86hcv8tms4j5kyhl2jm7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1526","smallankle08","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7Ms2uR+0axhTvAGpxOJs7CErA/I3Z+bopRGXilWRDGu"},"signature":"DcCdWGeTt5lFMvzzMfdXeddf3BMf4dp11qtRCPTfVG5a/vfiaUZqV1CPrpbAArMs4LR/RMstG5y6K4zEhyToBg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kdra9ctrumt7a08snc86hcv8tms4j5kyhl2jm7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1526","1","1","g1kdra9ctrumt7a08snc86hcv8tms4j5kyhl2jm7"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7Ms2uR+0axhTvAGpxOJs7CErA/I3Z+bopRGXilWRDGu"},"signature":"ZQ8RyOjnMfBfdgADVdG+2JUM6kJQlI6Ssje8/dTmhn0rTykUyiLcGQgoJjmZl4fi43M37b0dLqXf9cabR9TYKw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vxq2x9khwaqtdmy0r8uwl8lltvlzm7uwv52kan","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"tsYHk1v3UdHqy7ygZTI/i1cgm7ElN2JZNYGk3hDj7U1RzpJbE8fF5/GZi62hu/iDO5V+E5KzcoFA3SpMFs5V1g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vxq2x9khwaqtdmy0r8uwl8lltvlzm7uwv52kan","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","jumpprovidemy",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/f/rjQNKekiA0kWZAo7U/oSaQziLmgOjIZP78c154QU"},"signature":"gso8YyxnAJ9h07znu4AWapAbL6hgA7drpgqdBq1EUoENnWjk5Bm8ep1aMrAMXXC+EKI9JgmObUJYsLQJ0ssWow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vxq2x9khwaqtdmy0r8uwl8lltvlzm7uwv52kan","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["jumpprovidemy"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/f/rjQNKekiA0kWZAo7U/oSaQziLmgOjIZP78c154QU"},"signature":"xY4AhVDEu0GhbSwC1o39VVMntkqZr7quzP0PVTn690QO3LTT8Gb0IE0kp2j4pfQEwy4DBmEs9KRZ+SDO2bhOtg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vxq2x9khwaqtdmy0r8uwl8lltvlzm7uwv52kan","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1527","jumpprovidemy","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/f/rjQNKekiA0kWZAo7U/oSaQziLmgOjIZP78c154QU"},"signature":"l9x0A2+w9TmG0gp7VvtAvZ0ojdJxMS0W7+ZorWLYFygNVxPO39UcSbflQxmayNvGzIfdru3HM0FWEiZ0N7iO1A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vxq2x9khwaqtdmy0r8uwl8lltvlzm7uwv52kan","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1527","1","1","g1vxq2x9khwaqtdmy0r8uwl8lltvlzm7uwv52kan"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/f/rjQNKekiA0kWZAo7U/oSaQziLmgOjIZP78c154QU"},"signature":"QivkVh9dHU4PC7hFVBv9kb5dBXVCXFXyEJ7CgWQOffFXNV1MRIZOIeO9xkLHPKsx+QrW2fYb9B8rRUWU2mCIyw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1zzjylxlce33m7q0n7hu2cas8fwnt7uyj73a29n","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"/Ht7NDKX1F5zbyMVoNWwS6VO09JCiRrx6YcN7RnclAtcmUgw8ayDjlFRrdvUqYTe6b2F/JUbjBvHcR9JzWkxDA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zzjylxlce33m7q0n7hu2cas8fwnt7uyj73a29n","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","isolatebrokenq0",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwjUfYtWD1VNYPfiW7jMtwB3szK2ABtA5nOlJoUT3pTS"},"signature":"+fl8Ch+S1XM0DTGJJ6pp+mKnpfVdDzWbyOxRSrJWEklAFyd8bubEd1AophCNwBv484gi2qPpn5XQxQ+J8Lxd2g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zzjylxlce33m7q0n7hu2cas8fwnt7uyj73a29n","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["isolatebrokenq0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwjUfYtWD1VNYPfiW7jMtwB3szK2ABtA5nOlJoUT3pTS"},"signature":"W+mtqzicstOQOYLvOC3y4puYVISYZ3mXKS2dlBDom2Fh4Yhfw09pQa+DAp2PSchnDPKcxvvj8GtZnTBx5epY4g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zzjylxlce33m7q0n7hu2cas8fwnt7uyj73a29n","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1528","isolatebrokenq0","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwjUfYtWD1VNYPfiW7jMtwB3szK2ABtA5nOlJoUT3pTS"},"signature":"faUVIORgeUZAx80uqeWsaGux89vXjYCgFDQPqMXfBeAqVjB0NMcWZayiQU3c/tPjAyPZaekwoAhGOclUHk7SAQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zzjylxlce33m7q0n7hu2cas8fwnt7uyj73a29n","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1528","1","1","g1zzjylxlce33m7q0n7hu2cas8fwnt7uyj73a29n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwjUfYtWD1VNYPfiW7jMtwB3szK2ABtA5nOlJoUT3pTS"},"signature":"D9TC2RDjjQQ6IcCH0lpErwsohKw0EQM3CdrH8XmDMb8RyjokaMTRy2gbm3aDkBcjnQvY/zZr8+6F1gUx8SM1gQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1kdj3g5q6r7gx6cpexk0849eldkh2ws3w5h5dh8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"sxdkGdhg5u15KwICLjH2ljgYmNGJD3GCey2PBCwmDDBYCG8oJeTHxI6+R4/G4/XuGBPraUQSk87RGhZIkDTjFg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kdj3g5q6r7gx6cpexk0849eldkh2ws3w5h5dh8","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","reduceunfairx6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1NrVUbY8aggAYtJKW0GZMgLxsFNUhszevsZ37x2N9T9"},"signature":"0snZKr8nxYaB5kh1htW+IsKscnVG2TT/IA8NkpkJmeRKEg3g/Oe2NVLeBNcm6jdotAYBcPlvK2NcJV/0sDAxTQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kdj3g5q6r7gx6cpexk0849eldkh2ws3w5h5dh8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["reduceunfairx6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1NrVUbY8aggAYtJKW0GZMgLxsFNUhszevsZ37x2N9T9"},"signature":"N5GYycvP/n/WEetORfTacaSl8MDz0YDbce8AujMqHKQACqapPvlXy517JN/duNwDeuYAVukB14AV/PxUPAgQjw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kdj3g5q6r7gx6cpexk0849eldkh2ws3w5h5dh8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1529","reduceunfairx6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1NrVUbY8aggAYtJKW0GZMgLxsFNUhszevsZ37x2N9T9"},"signature":"Mie1WZnGMCZhnCGUaElvAbZgGxV9uvSp7ubELCAAZ11S/xSaO7CxIB+NT4Hflyhdew3sjJeFOjZRF5CfE6lsmQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ytdu33fn0pawu5p6z0eg4xkcnc6xwakhmautzg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"MTT69jPKLPxp3KSZlUX0uxKGf59vj1+hJCvvsBUtr1wT6UcDE7eoKDIB6ogSkoaErA5769SeZYiCkhNnmuYhxw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kdj3g5q6r7gx6cpexk0849eldkh2ws3w5h5dh8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1529","1","1","g1kdj3g5q6r7gx6cpexk0849eldkh2ws3w5h5dh8"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1NrVUbY8aggAYtJKW0GZMgLxsFNUhszevsZ37x2N9T9"},"signature":"xPjBvF0GH4kT3gCX0iMHKETI7drhrcwwEti5lVN7MBIarnRijtY4bCZtTs9lKtfHWVHVBT7X42Ah9IeefbxpoA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ytdu33fn0pawu5p6z0eg4xkcnc6xwakhmautzg","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","gladgorilla5p",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyKNHDIcfnXYZ/9Q//DJ2GCLtcbiUbNOxXr5BeqON1Fl"},"signature":"9QbqcY0hB5fTjopc88NA+YII9FtqOE8Q+z24hVJzU4sfMzVKf/f2G0MQatVXbv8sILML9DgpSV2yTDvLcQuYUw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ytdu33fn0pawu5p6z0eg4xkcnc6xwakhmautzg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["gladgorilla5p"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyKNHDIcfnXYZ/9Q//DJ2GCLtcbiUbNOxXr5BeqON1Fl"},"signature":"pxwDyu1vHUx0rIWn/ueeOKgXWMVGpRuCPXvLbYU5Pm5KIKK8M0bdoxvlmAYfhRTPUXwXNHI9aERCHZHmafteRA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ytdu33fn0pawu5p6z0eg4xkcnc6xwakhmautzg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1530","gladgorilla5p","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyKNHDIcfnXYZ/9Q//DJ2GCLtcbiUbNOxXr5BeqON1Fl"},"signature":"8JIXDHKDFcM6+Z8ph5WEIb0krCrI5Ay5RptsJHDIcqALJ1fpY9X5R4TWWwRKQU5Mp8owzVuq41PI0I9MxZWfDQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ytdu33fn0pawu5p6z0eg4xkcnc6xwakhmautzg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1530","1","1","g1ytdu33fn0pawu5p6z0eg4xkcnc6xwakhmautzg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyKNHDIcfnXYZ/9Q//DJ2GCLtcbiUbNOxXr5BeqON1Fl"},"signature":"a31SiBvRIJKDcEkqrWCzLTtuzwl3WvqXFpqYWY5CuNljrW+zbeq95vhs7m6g8P43D7e3EyeYCv6+yBb6sAej+Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1x2l62hpsks6k8lpt3vja3y46ck86wp03uxjkuq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"I/vR13e8b4On0Gkimvgmq1hBpG6+N9vZGQF4tIBIfQlw2LtCVw1Yvhbh7lwN7yVcaODu510unVd9zEftoFziDw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2l62hpsks6k8lpt3vja3y46ck86wp03uxjkuq","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","categoryglobelp",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6yF8TpQHBFkpSHyuW0IvYOnZBMov5JwqKcSLjr1kp9n"},"signature":"n8L2jKzM5mcs7a43wmZgkR84p5SO6FwOAd33ynyry50Sq+Zk3sVKvisXZPrrGdyyGD0EpvF7J7ARNsT2du+JTQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2l62hpsks6k8lpt3vja3y46ck86wp03uxjkuq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["categoryglobelp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6yF8TpQHBFkpSHyuW0IvYOnZBMov5JwqKcSLjr1kp9n"},"signature":"FjbbfEf0Qns30qDXMwAv8DRfX+11cBYj/0IhEmgd1K5tbN2BmYbrJON+CFNl9ohGgNUQAwi8ms3fmpum6kJ5wQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2l62hpsks6k8lpt3vja3y46ck86wp03uxjkuq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1531","categoryglobelp","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6yF8TpQHBFkpSHyuW0IvYOnZBMov5JwqKcSLjr1kp9n"},"signature":"mKiZr9j7uFS2sHCs6fst9ZF3nHZcDsHQBmIDYG4S9xMtkoj1ydq9ZZO1phfW/yzOy8N2c4RADYPbcrrokirOjA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2l62hpsks6k8lpt3vja3y46ck86wp03uxjkuq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1531","1","1","g1x2l62hpsks6k8lpt3vja3y46ck86wp03uxjkuq"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6yF8TpQHBFkpSHyuW0IvYOnZBMov5JwqKcSLjr1kp9n"},"signature":"13rvRgqDrxT4Jz0THdrz0YtRtqIQRhdUX1Jz0X4o3P9fAGtCjyRMuRJ8z+rJrgCvZdtY0dS7SvR1rmR2inZBHA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g153jzd4rx8f4nypghr3vmqmcra0llxxjpp7ehhc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"FaAJw5mOYRNRwufWR9zbDdHXRKfuN80mGI3e38gr4xMkpLVXKmYMnB0OmYBu1TILHN7KGsJ5A8zh0z6dLxCZuw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g153jzd4rx8f4nypghr3vmqmcra0llxxjpp7ehhc","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","amonggorillapg",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkEGvnRacNutSiGd9fZgPXg4SIHpSW3Z5UhVJQ8SmUvN"},"signature":"qXmd4Y0p8UuLR0dNFTYcP1AGjGOc2Q9O+a4BXAx60SVn/oXyEZ43478z2ss/EQ/xM7opOUQWVdQf4Sf9WNPB9Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g153jzd4rx8f4nypghr3vmqmcra0llxxjpp7ehhc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["amonggorillapg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkEGvnRacNutSiGd9fZgPXg4SIHpSW3Z5UhVJQ8SmUvN"},"signature":"HWGw3iTHBqQhO1ote8wPZdF45kscPo9uVxU89mEG3/I7T/ISo7drWNF7Pn4ag1Dk6CLcrlLA71Qd4LhxTKJzIg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g153jzd4rx8f4nypghr3vmqmcra0llxxjpp7ehhc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1532","amonggorillapg","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkEGvnRacNutSiGd9fZgPXg4SIHpSW3Z5UhVJQ8SmUvN"},"signature":"MMNunP2vTJ/FW0YWxrkWM7tGrlZ+aWbSeNaqUgxtTbxoeLEbx40Ldod+6wrBjL1XlzWdcV3BbvuKX8EdxjwPGA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g153jzd4rx8f4nypghr3vmqmcra0llxxjpp7ehhc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1532","1","1","g153jzd4rx8f4nypghr3vmqmcra0llxxjpp7ehhc"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkEGvnRacNutSiGd9fZgPXg4SIHpSW3Z5UhVJQ8SmUvN"},"signature":"RFUvFZZWupSO/YPNMqRMdmO4AAhRsDy86pzkRc5g0WMCMXIIt5aT2CIjHF5hUULs5jaa/r5V7i52wJcpdv5oyQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17pef0fuzhujy9ktfampytxqeh5vuw3zvemsytr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kgowVI2+3e8R7SbBe1NQ6ohPVsBgw/RgEsQOGGH9pg94GGfsgfqfQ0Zrn025EHT7YVZET3KQ9ydbgu4xVplc+g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17pef0fuzhujy9ktfampytxqeh5vuw3zvemsytr","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","travelanxietyy9",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3OMymgrCfDTyLOZS66TnSypwY8twMGAM2VF95ok5BLH"},"signature":"0/63g+PdmSfCyyEoPIuKiQawM12muBuYGOScuGfct/tvgcm9UfNucryZ60DKzUzWgLijkJo69xSTzGYHgCrU6g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17pef0fuzhujy9ktfampytxqeh5vuw3zvemsytr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["travelanxietyy9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3OMymgrCfDTyLOZS66TnSypwY8twMGAM2VF95ok5BLH"},"signature":"xD2epSHms2Smjptj9zKNkUOE/+/tHpDXqtV5gwLjN6l/sjyZQfqrIvNsxa/GjnLv6ZGGZ4zCLPa0Bnr1a6gwmQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17pef0fuzhujy9ktfampytxqeh5vuw3zvemsytr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1533","travelanxietyy9","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3OMymgrCfDTyLOZS66TnSypwY8twMGAM2VF95ok5BLH"},"signature":"V10ywk7mU1xYQqmePCgtZCEhaTCa+hocqdysj7xs0tJ83bjyChHKvjNFoT/YSeX0Ppi+3weFGKAjStd0UJ9xdg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17pef0fuzhujy9ktfampytxqeh5vuw3zvemsytr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1533","1","1","g17pef0fuzhujy9ktfampytxqeh5vuw3zvemsytr"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3OMymgrCfDTyLOZS66TnSypwY8twMGAM2VF95ok5BLH"},"signature":"zuYtUfC9pcK+HJ+YT8DCqsirZJLbOutSFCgjVngs6J9dg4eXKAjG7jUAe7c5vwYXRVS8jKfCU8VHxIkw3zRnLA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18r9vex8flwt8h522a4gz5wd24xv4g4c8sd9gaw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"TjQ9U1qWXEZIJEneUG7uwxdiUr6HCUYbZ0odrBqRbZsLwpww4VS1MjzJdAKE1t/9HZA3AhMGfk+b3qWxYFyltA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18r9vex8flwt8h522a4gz5wd24xv4g4c8sd9gaw","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","braveweird52",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmqsDPj3g5Q7i3h69DcIg7dIta+htXWCFoZWWRMxFE/t"},"signature":"7SLESzXHVNyzFXWTbVdV+OvwD026Vpf49C/bJCIZZmo3Dvp++wWo3Pv7ygZH/O8wlHLQcDxKYCnRY7FbSBHvxQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18r9vex8flwt8h522a4gz5wd24xv4g4c8sd9gaw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["braveweird52"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmqsDPj3g5Q7i3h69DcIg7dIta+htXWCFoZWWRMxFE/t"},"signature":"CD4TMSwTQs5gz/dLWqWioW3++bNUlk9VZEMt5l2dzgFpypVd3QtchGhKp0nuUcvmiXXONgXM4wd3k4P5L9Z+Yw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18r9vex8flwt8h522a4gz5wd24xv4g4c8sd9gaw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1534","braveweird52","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmqsDPj3g5Q7i3h69DcIg7dIta+htXWCFoZWWRMxFE/t"},"signature":"kliXEu1tfU5BSav2nY6hGwU6IXT7oQ/Wez15nxbna9glNE1Ubtoae5DYtpaU27ZGX37ouUT3YWOgyyK/ouF7iQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18r9vex8flwt8h522a4gz5wd24xv4g4c8sd9gaw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1534","1","1","g18r9vex8flwt8h522a4gz5wd24xv4g4c8sd9gaw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmqsDPj3g5Q7i3h69DcIg7dIta+htXWCFoZWWRMxFE/t"},"signature":"V8bY7iEtLfK11GfOcqaz9i1hUl+37SoVpQJthckh13kLuy3FId2bnKmWIKxycmS2lPKcchILzqfWTgjBPZxGOA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19hhwqt5aulfpnkpu0s755zp9jq3e0sfw5utdmg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"wXh8eGBU8JvAmMmv0sbsBKB8BvDs/+vcm1GdIP0Y/OhPFzT280QqDOvxis4q+N0pRC7w1h082OGidWgBKBv5zA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19hhwqt5aulfpnkpu0s755zp9jq3e0sfw5utdmg","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","drillbestkp",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjT7StZKOi9XlY8/2UuXkG00RKV1cShIgJga4sWnuaEC"},"signature":"eO8aY7nelOGOGLmtjgyTNUoD3PpcRMnKrkJdITZxNTYVk5giYv2+cvgQQ7gxKtng71UXmsPrGISHHBAYzUWuEA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19hhwqt5aulfpnkpu0s755zp9jq3e0sfw5utdmg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["drillbestkp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjT7StZKOi9XlY8/2UuXkG00RKV1cShIgJga4sWnuaEC"},"signature":"QLm3tjoVceISoGsmBiCHHKVtD+bhXFcDE+MomOQA1X0fhfPMq/6bddqSXXJPm6l1oMYdV6jUNi4lFw7DyR/rWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19hhwqt5aulfpnkpu0s755zp9jq3e0sfw5utdmg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1535","drillbestkp","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjT7StZKOi9XlY8/2UuXkG00RKV1cShIgJga4sWnuaEC"},"signature":"uXAL2jz0rZ0IYm11ccDCrKVm5ikFM2jxMuKRgJIqXiAI+nEGITRHlq6Y3L1bh9KDBf22gF/Jpqe4QSRj93UUtA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19hhwqt5aulfpnkpu0s755zp9jq3e0sfw5utdmg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1535","1","1","g19hhwqt5aulfpnkpu0s755zp9jq3e0sfw5utdmg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjT7StZKOi9XlY8/2UuXkG00RKV1cShIgJga4sWnuaEC"},"signature":"Nw7KSTOeTrs4Ct7tiYHoQyjcSBYi8lanYu7EhK9OsKV/x2ZWF96vMHRYxHMPmtVr3ReT8HE7qhh1oqaET8Vt3Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g10au7az93z69tu9t0qntelkd4hck0cqtxw97tuy","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"E9jk2xI2rhOk/8qRMdklbTqxW/tuzFP8Ca6mk+0BK3IGBF4tg9hEWhltmLCiLOHRhSM0mDna6/kwWESOU5I6Rw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10au7az93z69tu9t0qntelkd4hck0cqtxw97tuy","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","incomerenew9t",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoYM7SnSDQtHKgtvqdvM2qC6Z3mrsiFg7d+kYmJbvn1n"},"signature":"nQOa3spyr8v9k4nR9eC8Keo6rHVRpUt0zsbu5N9vha1xhrj4BpTPgy549+GQ+7YGFQvsAWiNXcrumJOKZucQmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10au7az93z69tu9t0qntelkd4hck0cqtxw97tuy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["incomerenew9t"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoYM7SnSDQtHKgtvqdvM2qC6Z3mrsiFg7d+kYmJbvn1n"},"signature":"NqYu/SUbmaZ0stqorw983Cgg1LLnb1aSzUXTQmeyTghb5huLIvNvTq2jDo1p25X8z0yhgmKNmKocnmUA2MtMoQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10au7az93z69tu9t0qntelkd4hck0cqtxw97tuy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1536","incomerenew9t","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoYM7SnSDQtHKgtvqdvM2qC6Z3mrsiFg7d+kYmJbvn1n"},"signature":"k9e18auFetk/YcJUWBrqJQCWoTNK2dNccl5kxVrE/vRvDKtzRT1LBLU3AQUaNuooeS68jO813O4EIODbU6KazQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10au7az93z69tu9t0qntelkd4hck0cqtxw97tuy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1536","1","1","g10au7az93z69tu9t0qntelkd4hck0cqtxw97tuy"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoYM7SnSDQtHKgtvqdvM2qC6Z3mrsiFg7d+kYmJbvn1n"},"signature":"fnS8reiZkcaouylkanQZE0KVYgnLG6w4WLuk8L+0JCsZrwFFkjbTpq9c8tYknfy8DGS6hBj7yDZU1L9hgcD/Gw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1nxsdqd4g5za4pc4lqgpm6ageml97wklezazcjv","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"5DCjcXMFOKK6aAgyvxKNEuSMyRBun5sF6Ens7h3rOgU/Q7E8y+52Npc5CzUzX5RzEKSjB1jq5g4LQHkh6ZPA5w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nxsdqd4g5za4pc4lqgpm6ageml97wklezazcjv","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","platecheese4p",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuRUkLD3OELmxr+cK1qX1/kZddeQVzEiTXIY52HSSjkH"},"signature":"GSDPMu2YYU/13J64ItJMiLJTuDo2hGHjRW2DaBKThMAhesCIjUvP5E1hSPk8CPeKEYbkIqKpTEwRQ9NAgn64oA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nxsdqd4g5za4pc4lqgpm6ageml97wklezazcjv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["platecheese4p"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuRUkLD3OELmxr+cK1qX1/kZddeQVzEiTXIY52HSSjkH"},"signature":"E3Z2MVmdo0Ck+wrUEPD5ANY9+2pMHLpG+os2kASzzEoVT9JStzvufHNuGhSo4HDXoiPnDdNAVo4BK6Yv62s32Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nxsdqd4g5za4pc4lqgpm6ageml97wklezazcjv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1537","platecheese4p","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuRUkLD3OELmxr+cK1qX1/kZddeQVzEiTXIY52HSSjkH"},"signature":"gZ9XVox3ePxU0UFzcW094Bu7UuzNLFSHJR02Y8gYuUJFXe474ZovIe0XL4fu85xgsg5RswDAzBmqPAVb1GuaPw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nxsdqd4g5za4pc4lqgpm6ageml97wklezazcjv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1537","1","1","g1nxsdqd4g5za4pc4lqgpm6ageml97wklezazcjv"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuRUkLD3OELmxr+cK1qX1/kZddeQVzEiTXIY52HSSjkH"},"signature":"VZBAxwvpa8JNkLWRip8JfQ/kSl5qJX4bAQ1+5ltVvdkLdXGfplCKkBtl15Im4Bhtj/4lqmrl6RmsBMq8og2lBQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1nxwm8ctefxmymp38laqlfvn70d4e5ks6hc7jlt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"T3m9QzMREe4kjJRyVwPgSA7YK6iPOG0zahBvOxBwUvVkM93i0cl0P9GRD6aHY7Uofjl2Sr6beLVkkWAw4Xt9SQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nxwm8ctefxmymp38laqlfvn70d4e5ks6hc7jlt","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","gridapprovep3",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7Eg41Q6Cm6kA7tAhXqdh4fC5Nbc1idqAZ3K7QfwKFKy"},"signature":"xc7iU8DVWaS9IGyn1WVfkOtwWrVn4168znnvF15KsGZQz0XYVS2DPRAKZKwTGPNMRKu9drpBgiyWQJxJQtr/tA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nxwm8ctefxmymp38laqlfvn70d4e5ks6hc7jlt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["gridapprovep3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7Eg41Q6Cm6kA7tAhXqdh4fC5Nbc1idqAZ3K7QfwKFKy"},"signature":"ddwsc7XjdgEsi2vlRpqsULV718Xtm5c77U/7a4WbnCVGqt9g+eDJZWbOrQxEDr2X5wUD6QXXfeIYhpaTlwNjWg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nxwm8ctefxmymp38laqlfvn70d4e5ks6hc7jlt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1538","gridapprovep3","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7Eg41Q6Cm6kA7tAhXqdh4fC5Nbc1idqAZ3K7QfwKFKy"},"signature":"cEnXMqdL+paRi3cNaevR7m0Da5brPNbBNFj7QUeCdUANquqsYWt3DC7Z13BH+mJtdy08q/YEVKy6ddKdipYgxQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nxwm8ctefxmymp38laqlfvn70d4e5ks6hc7jlt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1538","1","1","g1nxwm8ctefxmymp38laqlfvn70d4e5ks6hc7jlt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7Eg41Q6Cm6kA7tAhXqdh4fC5Nbc1idqAZ3K7QfwKFKy"},"signature":"Uja/yvmogTd3LQw86PIlruvRxFoaaAgZJfQuL58CeXJx4fiSXDSdluZpCkjBBlA5vHwbj+ZHec2Nq9tnXrFbjg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rtkf0ey0sfhlsnnz2tz5lwjcp6lc9g5c7t8lgy","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"WDewCsW1fLUv6kbr1HfSLzUiu7jcUum5Ym15+0VjREVTN6o5vuzMOa2wV524p1hsDbQwNPj2yVjzmG/zSd6oUw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rtkf0ey0sfhlsnnz2tz5lwjcp6lc9g5c7t8lgy","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mixedinspirenn",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Awy24J5+9liwjV3N7OI4JGDp4bOAmTOeNwvdyQVIbRLf"},"signature":"eag9uxn3fR3jABvTPGGu8TSe+2FxqBB06Y6JqHkme/9GPYQ9IXuYS0kIoYibWVcFBJI7vA4OQgDnEqYj73+jeA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rtkf0ey0sfhlsnnz2tz5lwjcp6lc9g5c7t8lgy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["mixedinspirenn"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Awy24J5+9liwjV3N7OI4JGDp4bOAmTOeNwvdyQVIbRLf"},"signature":"DTXH7AeEd1oB3aLArAk+OodhZBJBEu9tLxFgqmSdHvlKVU+GIOnpQnIf766uKO2LwSg7BCqUN+6jgiECxtCN9Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rtkf0ey0sfhlsnnz2tz5lwjcp6lc9g5c7t8lgy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1539","mixedinspirenn","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Awy24J5+9liwjV3N7OI4JGDp4bOAmTOeNwvdyQVIbRLf"},"signature":"PQ4dqLkK9mvd9hPveZNzhxoMYlsAwM3xqcO0aSUcCA0Mm0c9DTqdfOzFMLI6vzYd2qujuv5H4mqwIau2g8ZE1g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rtkf0ey0sfhlsnnz2tz5lwjcp6lc9g5c7t8lgy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1539","1","1","g1rtkf0ey0sfhlsnnz2tz5lwjcp6lc9g5c7t8lgy"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Awy24J5+9liwjV3N7OI4JGDp4bOAmTOeNwvdyQVIbRLf"},"signature":"+KQW6lQrO/lI2HkKdZ0ZTnGfiN5PFFdXO/p16eo3wZArJUztEWSUMvpageYiPcQxjA4Qcs/BFafZ0eUywV9Q0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ygqrhpckk4mh2jx2ekt4t8a2stcdvdh8eaufjp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"iM7WMRKv6oziWD3Dip6YU++SiY0OMNyNMCFNg87GQ1I3ysmWtXreVdnovE9Epl/3zJ5bTJVvPM2DptVNLuT1Fg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ygqrhpckk4mh2jx2ekt4t8a2stcdvdh8eaufjp","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","tailenhanceh2",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxYEmwdqTAwJG7fDzZBcfxvlon85yS/zP3KIytttZfVm"},"signature":"rdymOnPC57n6/tp+yFpUE0J3ldjcJwGIhMviFQUEDKAK9bCkPZGpHIhVgbTEMAKuPcEXNURT1M46ba3RMp4kIA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ygqrhpckk4mh2jx2ekt4t8a2stcdvdh8eaufjp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["tailenhanceh2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxYEmwdqTAwJG7fDzZBcfxvlon85yS/zP3KIytttZfVm"},"signature":"7DwBuWvr645Mh5XuJ1k3CkJypfR+9LF5M2gboZ7eJCNsm3IMUchdOX16yyLfOnvd9vwE+E8w+q9Wh0rBm//T9Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1t6d3k0gzqq53tpw6l3wjgps4jnr8tf86ez9flf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"+3B4PTBWDdYQZJPiz2wx1ARaNEuHMF6L3Kc6sYCic8p1LJP62fjtAKQf8ex1irwrvKVOWTSz/wv5Sw4FOULe5A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t6d3k0gzqq53tpw6l3wjgps4jnr8tf86ez9flf","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","elevatorelevatorpw",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtYLB/cmO5HfCAFo0f3Sz9jZPF+VJ0rKU4ZpS2CXGPZX"},"signature":"JbzAM8Lmtpo3YY+QrhN4yOdkgMLlQzlwHxlQ6puWhuIHSoCAIod4i33Qc9+F2A9gcJht+SLy5wSaNKnjSQmgYg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ygqrhpckk4mh2jx2ekt4t8a2stcdvdh8eaufjp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1540","tailenhanceh2","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxYEmwdqTAwJG7fDzZBcfxvlon85yS/zP3KIytttZfVm"},"signature":"Vx2cVyHuc3Siq5vCTULLR3WkbNLqJ4IPwI3xU4HC5XowQo7KbIy2KkjV85WyUDsgcyXomrpxSEkDnB5dTU7RKA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ygqrhpckk4mh2jx2ekt4t8a2stcdvdh8eaufjp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1540","1","1","g1ygqrhpckk4mh2jx2ekt4t8a2stcdvdh8eaufjp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxYEmwdqTAwJG7fDzZBcfxvlon85yS/zP3KIytttZfVm"},"signature":"8RRzHtLgP6qFgQ8HB77x7HyEHh3O6XIJY8OBAKolYdMttmbloR3wOX8gF9QXxxVP5WY7+K9XVJatwXZ9zDoIHQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t6d3k0gzqq53tpw6l3wjgps4jnr8tf86ez9flf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["elevatorelevatorpw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtYLB/cmO5HfCAFo0f3Sz9jZPF+VJ0rKU4ZpS2CXGPZX"},"signature":"wpRds2qB7HMxmZ5W7PSDNhMJVE+U0Ipjedk71kTYqoVDFSU7e71Zl4CtmZ4iY9DXW7cxHj89j/PPBmGXkzM9BA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t6d3k0gzqq53tpw6l3wjgps4jnr8tf86ez9flf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1541","elevatorelevatorpw","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtYLB/cmO5HfCAFo0f3Sz9jZPF+VJ0rKU4ZpS2CXGPZX"},"signature":"HcBmpu/kFcOlOC7Ve4qoXx1fra1uS6MVjd15tuDO1skyTIW8Dk/08XZez8tHYgpSVwR5lPN77Me6kzCl6jcm3Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t6d3k0gzqq53tpw6l3wjgps4jnr8tf86ez9flf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1541","1","1","g1t6d3k0gzqq53tpw6l3wjgps4jnr8tf86ez9flf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtYLB/cmO5HfCAFo0f3Sz9jZPF+VJ0rKU4ZpS2CXGPZX"},"signature":"6a3pOsKywvNEjoaJl08a8TAOms+/Wd2GVF/zENIV7zRtC+ZRdL3LOW5e5rvbPdjD/vHNwzgzfuRuqWmg7aEPEA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1t6k0rhf583yf9xjpvwtvefsftkxuhvpahhm78c","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"wgDZbR+L6HkAhAdKYFGFFZyNwXrMZeynEVqa6ZOWZpRT5KkqQw1kZYwcDo1NmFXD4mSn7kfxDUjhpDTWw5IcTw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t6k0rhf583yf9xjpvwtvefsftkxuhvpahhm78c","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","hybridcatalogxj",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqFQguB7r9Ttzl7W6p+eoEijJWcZs5373elMoO4mxFIQ"},"signature":"PU481a+Q5TD8vIYb6kTZH7U4JFFO3I23g9cBzPhloos+7IR+tib+gMvOMcsX3oXdKY1KRl2nj7qHvJRseVp1tg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t6k0rhf583yf9xjpvwtvefsftkxuhvpahhm78c","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["hybridcatalogxj"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqFQguB7r9Ttzl7W6p+eoEijJWcZs5373elMoO4mxFIQ"},"signature":"k0sLR1zMo4nHDNSR21u3W7PxinDl1qyJIbPUO17z1ZB1yilPse3Vx+4G35uArr4w196UnBI+A0dh8OqERh5kvw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t6k0rhf583yf9xjpvwtvefsftkxuhvpahhm78c","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1542","hybridcatalogxj","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqFQguB7r9Ttzl7W6p+eoEijJWcZs5373elMoO4mxFIQ"},"signature":"kyGvbklCYkwOb2/XbiYpgOq12tnV/DJnJaPnXWeVe44yXTID+ilxlbvt2FBZHk6sziLDQK1Etr9WZap+FfX3Xg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t6k0rhf583yf9xjpvwtvefsftkxuhvpahhm78c","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1542","1","1","g1t6k0rhf583yf9xjpvwtvefsftkxuhvpahhm78c"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqFQguB7r9Ttzl7W6p+eoEijJWcZs5373elMoO4mxFIQ"},"signature":"t1CYvNKZq2nFZagISIV2R7gdgi5knudP7pDVQ/uBmuQ3yCfW/qyzftcq3v/WXuEYw+dYKTPCVjYC5MU7ZCTJkQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g103at4s65vcusat98ucl7q8r08h9cy7yj4lfsne","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kUA91Nko3TnZOR0ND06qMaGwl5lyV+XgS2Flf7V+YjUxP1gLGgyxDRgLJlBNK/2IgdRKm4jIgwW8Mq/L3W335Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g103at4s65vcusat98ucl7q8r08h9cy7yj4lfsne","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","beautyarenat9",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkD9Wk1AKTTd7NkRNGFNy8xCavXLpQ4L56ichEeYlsdY"},"signature":"NyDzAE0mJ/wCKTG7LwEDg4lovao41zFnIdJLhspmAnwwUb2Q6GpQ+ZYTAQqBEUjINEUaNf990IMr/iyryR2pTw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g103at4s65vcusat98ucl7q8r08h9cy7yj4lfsne","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["beautyarenat9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkD9Wk1AKTTd7NkRNGFNy8xCavXLpQ4L56ichEeYlsdY"},"signature":"9HL4pDXOqEr8tzQZ/ODndfy/qUXLpnR9K/uogLPhPooXFp+yGojk6xkip7GABs1sHAtl6YIwmlryhcJFg28KVQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g103at4s65vcusat98ucl7q8r08h9cy7yj4lfsne","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1543","beautyarenat9","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkD9Wk1AKTTd7NkRNGFNy8xCavXLpQ4L56ichEeYlsdY"},"signature":"YEGcFlbS4GXWL1lW/GrCrKhu2XXeJtEzoHus7/ecynsqWpHI5gd5W01MB9H+IFGesNUMhI6K9uMr/68xkg/HYw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g103at4s65vcusat98ucl7q8r08h9cy7yj4lfsne","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1543","1","1","g103at4s65vcusat98ucl7q8r08h9cy7yj4lfsne"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkD9Wk1AKTTd7NkRNGFNy8xCavXLpQ4L56ichEeYlsdY"},"signature":"lVnxzneTz5LN5TQ8YscP9u/Cl2Af95WOwemfjg1ClXkAclPuCU5tikQFNyY9982+6JzbFkVYbMI8bxziXWgBLw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jkw963grzdfm0uw6fwruqtw9qy3xgf3wngh4jq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"2PGhtVVyZZA0YlhyQO5awxkQWMs2Ewgli/SDrDDKOEEAi2xJNztn28u62EmLZ8lW8H0qUnfxMa6nR7MK4uMmpA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jkw963grzdfm0uw6fwruqtw9qy3xgf3wngh4jq","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","hugebananam0",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+CjU1YFy4RbbAQeMpBiUFztu3Eyeszpuh4zBBTUpzD+"},"signature":"K4RGIItml67jdcUhei5Eavux27AifAKVTnHS71fIE/955ElnuRusUbhDghGGspcjs3Hff81Q5R3YuPEBx4eurQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jkw963grzdfm0uw6fwruqtw9qy3xgf3wngh4jq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["hugebananam0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+CjU1YFy4RbbAQeMpBiUFztu3Eyeszpuh4zBBTUpzD+"},"signature":"VaPZoDv7/3J6f+1CSHTfLxbCiNMmKC/07Rdxr4N2aFJyhdhi6u8nVTuX/ySYVCEdT0I7eHRZLQ+dHMHk2McPIg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jkw963grzdfm0uw6fwruqtw9qy3xgf3wngh4jq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1544","hugebananam0","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+CjU1YFy4RbbAQeMpBiUFztu3Eyeszpuh4zBBTUpzD+"},"signature":"Yre9JOJjtDuMUHp18/rEbVX43/oq5ybwFIVgn3keSYcKRZYicNM88qN0nAzCXO4rNWUMCJTK4wzfwPa6jD4Ohg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jkw963grzdfm0uw6fwruqtw9qy3xgf3wngh4jq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1544","1","1","g1jkw963grzdfm0uw6fwruqtw9qy3xgf3wngh4jq"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+CjU1YFy4RbbAQeMpBiUFztu3Eyeszpuh4zBBTUpzD+"},"signature":"BIaXHs7CeR9WUeOWhvzuNGgnxUizF+lp8RO2pnJ7kNELIBtFaeQ+g0jXvRkcwfPPSQolc4dY54DhFoqE2QWWeQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hyr57qpsn5n6j4hfhu4e6uqreruusw2ca5gvz0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"J6+QmBVSqq4BM2bT53rNtSFMYTCxilwiJrj5iF417RV0tG9FWcIgu9yaMMlfmIvxHfnssT3x/IkS+htG11ASYw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hyr57qpsn5n6j4hfhu4e6uqreruusw2ca5gvz0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","depositsound4h",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AltyIPt1Pb5KWHfr4rcg8VSvyMw4XTqMcH4W7uuVl1k3"},"signature":"ZeJ8k3pNKjTwdYJQeALgeadyfwU5yZlWikoqf/V4S6AVeSiPTzujpLzA2fUeW3jOmnhhDfZiq/LjH7q36dBwVg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hyr57qpsn5n6j4hfhu4e6uqreruusw2ca5gvz0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["depositsound4h"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AltyIPt1Pb5KWHfr4rcg8VSvyMw4XTqMcH4W7uuVl1k3"},"signature":"cQy/Fz7ZX3tJwUtzu2yg/dkSwZAyA+Apxa3UYcvhKndQCjOGsHtm5gt0kvAiUdpBkvw4yN7PYHA7g8E0KHDlgw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hyr57qpsn5n6j4hfhu4e6uqreruusw2ca5gvz0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1545","depositsound4h","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AltyIPt1Pb5KWHfr4rcg8VSvyMw4XTqMcH4W7uuVl1k3"},"signature":"KdJen+9pa4EiRuNY6aLLSlqrCCakUMvuve1X9+xu7215gXmuUKefeg9Rlf4HSKNuGrgBqpV1UXFT7V00++q6Wg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hyr57qpsn5n6j4hfhu4e6uqreruusw2ca5gvz0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1545","1","1","g1hyr57qpsn5n6j4hfhu4e6uqreruusw2ca5gvz0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AltyIPt1Pb5KWHfr4rcg8VSvyMw4XTqMcH4W7uuVl1k3"},"signature":"eoDTbKlNCyBl/L0hQ6QqzkndbTrpmOAOh7oj7F597m5izLd75CceEOv2rmNr15UvzQ+sFtXwEuEhNB4uD3BPmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16xcgc0nwse09zzs90wtysjev6dspw6nvsghtc9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"g55ctFYrCzi8WTfMuQY++L+XXC+xq07uGna6gAMx1sAnU4zl18swsKMXl9tMvwRBt7Mr5UrMeDzBc7Ru7rTCCg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16xcgc0nwse09zzs90wtysjev6dspw6nvsghtc9","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","healthmotionzs",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+KxRtuNuSKUD/EqakbNlgU994madYHNTvpFB9EaTSsB"},"signature":"lyfjpIub4cK3DoX+J8X6oeJvJatsWBczG7LNYFsJk/RJEbVFbJzfK1J1VpymDAGoKdmy9UpNEHTHxsrKb9bKXw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16xcgc0nwse09zzs90wtysjev6dspw6nvsghtc9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["healthmotionzs"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+KxRtuNuSKUD/EqakbNlgU994madYHNTvpFB9EaTSsB"},"signature":"6JkVvKtMXxaRgmCTC4yadZxvYr3gfjTqjoe6/2kErARz8Ew+PowX4liagL0Iy88FzBEHypnQR9KrbWlmSFicig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16xcgc0nwse09zzs90wtysjev6dspw6nvsghtc9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1546","healthmotionzs","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+KxRtuNuSKUD/EqakbNlgU994madYHNTvpFB9EaTSsB"},"signature":"qfGTHkNsWi46uIdo9CClAUU5U+2WIUlRAu76Cauk4QR9RyRUOPFImdsEMmbrEhD5pfXLo9SPmLbTRfrtyAxhOg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16xcgc0nwse09zzs90wtysjev6dspw6nvsghtc9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1546","1","1","g16xcgc0nwse09zzs90wtysjev6dspw6nvsghtc9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+KxRtuNuSKUD/EqakbNlgU994madYHNTvpFB9EaTSsB"},"signature":"KooVf3VCLIJ4TeDV7aC11KVouydiDPh+1u7qvhFXVpkmwVN60sxJlgqPkkqa/7ClpmcVI3MgCwir0lAP4H3/pA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1g3tzjvtjlvara8xz5m85fnznhg6jpkgmlxsqcg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"tS4Rse5RQ1pNCK3VISBK8Q/QJtFdYZD4E+yT0feVlDB1fdWOItC56Vo2wQcIslH5vR7F0RIOwQ0G4vkQ2s0ilg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g3tzjvtjlvara8xz5m85fnznhg6jpkgmlxsqcg","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","designmelody8x",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Auj9nvPjJqKxKwo5aODKk8iM/GaS1lKCm7iuS786IADA"},"signature":"Z6n6px8Rb/ifzvoybc/QZMx0b9Ot2I68L6qvEMz10QcMCjKmjfoMqeleYVB4zpnhYR9LWCVKLQeovtt8JXX4Fw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g3tzjvtjlvara8xz5m85fnznhg6jpkgmlxsqcg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["designmelody8x"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Auj9nvPjJqKxKwo5aODKk8iM/GaS1lKCm7iuS786IADA"},"signature":"/Qw1fu9ZeBSzxIItdFoEuxb5vNapFxfbwg4HfQEo3GoNEUGXD7n3WrPjnVHIWBJfHIPKqm6T8UZH9+JwIIL1PQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g3tzjvtjlvara8xz5m85fnznhg6jpkgmlxsqcg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1547","designmelody8x","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Auj9nvPjJqKxKwo5aODKk8iM/GaS1lKCm7iuS786IADA"},"signature":"ky2KQiFtdbelFssXqG0/MWy1I6pzkeePu8Y69YqSOlUteaa2pyETN3iy2ptqerKyrEPcybi5vBSOBGKZBHPQWg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g3tzjvtjlvara8xz5m85fnznhg6jpkgmlxsqcg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1547","1","1","g1g3tzjvtjlvara8xz5m85fnznhg6jpkgmlxsqcg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Auj9nvPjJqKxKwo5aODKk8iM/GaS1lKCm7iuS786IADA"},"signature":"YhrmGsmMK+fC4r5ysyaHkvGT9cY5VSBVQM7KJGK1n703kzcGGRIT+AUzmCyxWGWQBnmKkcv8N93n6j+uQsOH0g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1nf3hcvpcephdttqt3xa7clp07zpay6dehhgceh","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"0wfMCfIVcKrSL5bdpNz/SnE/TYJzRZICXM3QY+E40NVEOBruTgF0vpFdzaIjc3i2i999y5i9wnkXb1Tvl/5n7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nf3hcvpcephdttqt3xa7clp07zpay6dehhgceh","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","despairhiredt",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoHS6xm+LQoFhgkq6EKo7ux2zX87b6hmBc6SmT/ZS/+q"},"signature":"GZcJqWhKWQ570CsBa+OH0xeZWnS4CsCUKrCR01ftMyovb36Jq5yN5dzlxyxLlcJr5J0uEY3jKXrOys4zheuA4Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nf3hcvpcephdttqt3xa7clp07zpay6dehhgceh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["despairhiredt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoHS6xm+LQoFhgkq6EKo7ux2zX87b6hmBc6SmT/ZS/+q"},"signature":"Tc1etFTHy7sD6pqrXZWAReYYei+WHgnbwbnNNY/AAmM2Zf3mbBxkfMgRRcoNx1QpP49Am+ZYKVJAt4M2+RgEEw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nf3hcvpcephdttqt3xa7clp07zpay6dehhgceh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1548","despairhiredt","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoHS6xm+LQoFhgkq6EKo7ux2zX87b6hmBc6SmT/ZS/+q"},"signature":"9P+UuH+W6vewJyndiFFGF8Z331hR7pw3B5Dk4KVgw9go+eXT6+0/Hcd6AYZGzn4VMZox7BP/de7IYPzsUHivcw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nf3hcvpcephdttqt3xa7clp07zpay6dehhgceh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1548","1","1","g1nf3hcvpcephdttqt3xa7clp07zpay6dehhgceh"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoHS6xm+LQoFhgkq6EKo7ux2zX87b6hmBc6SmT/ZS/+q"},"signature":"qKez+mtauQ8BCtOIc+Pm+xmD2ARXhWP7szKwH1kTVxo742qZjqpnPuwIM3pr4AzJ/RtzA9V6D+jSoCu94Kj/xA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vlrp6kfx8mlsg9w29g2dclt0dxxx59e7tgrpmt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"3ZeSVoI5P0kNRBuuiWfDmzDqcDVbtIqHF5KR7CZDDyFdbLJyWrFnYevoD2DPH0XV8oKBzODSQV30fgnDGNj8iQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vlrp6kfx8mlsg9w29g2dclt0dxxx59e7tgrpmt","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","layerarmed9w",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtZh5Nntrk9Bj3OP0FKAofcFvnmGytnpUChFRvVRi21r"},"signature":"sBlQxldrMkoF8wPB+wo0B6qxXnHFLWJkuypBjI/iJmEcdgVk+g8uvzq4xdIEmKnCvL+jmcFaHvo6FHOQ8+lYYg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vlrp6kfx8mlsg9w29g2dclt0dxxx59e7tgrpmt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["layerarmed9w"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtZh5Nntrk9Bj3OP0FKAofcFvnmGytnpUChFRvVRi21r"},"signature":"8YvP3OPeu+M6HUPL/GLpjV/hm6/tQNP4uo2M8Pr7RJ9uHhIrXD+tWjFCmFt9o99ChASK1HilHB/nSijBH8TfBw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vlrp6kfx8mlsg9w29g2dclt0dxxx59e7tgrpmt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1549","layerarmed9w","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtZh5Nntrk9Bj3OP0FKAofcFvnmGytnpUChFRvVRi21r"},"signature":"zZdqg86aFQ6jIj/fRKGgj3CdNgIoQN6369WECzJwJzAzlQvh2CTCDFcWiPQmU7T62nl3JM4teFE2WvrihTrJfQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vlrp6kfx8mlsg9w29g2dclt0dxxx59e7tgrpmt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1549","1","1","g1vlrp6kfx8mlsg9w29g2dclt0dxxx59e7tgrpmt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtZh5Nntrk9Bj3OP0FKAofcFvnmGytnpUChFRvVRi21r"},"signature":"hETi+JtDKqvK7RDtwosYcIu/n836OgXZ1C/SOw2o96ZDSDuYsXVdb6lclENhdeGtN9gGwe1FtLQRbZCI7Sa/3g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15yzscr0kmqmyflt97wk24r64nutrr6d8hq35qt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"OdUrHCmVltrWgd69gSgglkNSZgacvG+WBD15GQPZj/VGbmqXlEIp4Z7ZHzYiBzGK/SVSMmbDSj94jCNhs4+LCg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15yzscr0kmqmyflt97wk24r64nutrr6d8hq35qt","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","frozenketchuplt",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/re5nBpB+Yr4VskslcRumGMdOf1LUp78Fr9bz88xTrx"},"signature":"Xhny8p6w4hcF9ipZoJ6L1dzezXwcB7aVwTcSmuJIR+AIVOv9JSBs97/CmaW+qp5+QL9r5Tq5+r5jLL3e9dH7Cg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15yzscr0kmqmyflt97wk24r64nutrr6d8hq35qt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["frozenketchuplt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/re5nBpB+Yr4VskslcRumGMdOf1LUp78Fr9bz88xTrx"},"signature":"a7E/HSTiLS+vETcESKqAYsN1sg2MTD6ipr38GTpX9gp92i7iTptr5YGYLigTE2DwEcbNMw96e1CjFgB/E7LZ7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15yzscr0kmqmyflt97wk24r64nutrr6d8hq35qt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1550","frozenketchuplt","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/re5nBpB+Yr4VskslcRumGMdOf1LUp78Fr9bz88xTrx"},"signature":"0ZAgHev1l0XVOHSYrYdXcnfHI16oFjcWRg3kerUENj0VeCGYaOEEK+1QGhBYk35QTgOYOF0Oo1Z0MN8A6md2/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15yzscr0kmqmyflt97wk24r64nutrr6d8hq35qt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1550","1","1","g15yzscr0kmqmyflt97wk24r64nutrr6d8hq35qt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/re5nBpB+Yr4VskslcRumGMdOf1LUp78Fr9bz88xTrx"},"signature":"v7ENlP1nJysRa241Vx8ymb+go6qnqKf9NRxQaTt4WAwKTmBPIRbiNRe1zRbtUu/hPXO1ezMedHpigTA0uFPvlQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jfnmnwr30346pcl38wafgh9c08zsftn5l3w7jn","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kG47pU9PXbgMf8aBXKy4Zvto4Rgz9t2dfK/Til0gt8UMjVmUe16f+yuF+EtURZzwqeekSSH8CGsjOcdOMNmcLQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jfnmnwr30346pcl38wafgh9c08zsftn5l3w7jn","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","detectslush6p",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AznMmFEjdc+5+oObmOQuzNGndVJ51LlkoAOeBEwobF7K"},"signature":"JaGhAj1EiLbNT5JV1izYi2WD+MZUNQS84KB7QZOrfqg0iL5PGx16BS0rfV6bubQ3H0ZYvqvWzNNFZEQNA6yo9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16ttjt8pvdtt8v49uqhsewfvz5zm83utpxhv2u3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"gLss6I0p5B+JpawImaOXafN5WomOy7U+JKxHJm9KrBUZmp4MIXCvu7+hGRjVyrYt2wjJvVyWZ1+OfkqTPIMTkQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16ttjt8pvdtt8v49uqhsewfvz5zm83utpxhv2u3","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","elementattend49",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiBPEFukzVq1LUGDuI6B1E9Zoroh0B2ZzzBAedGeI7rW"},"signature":"XGgBU/ic9c8WrhIwEns0TyKJroBy3JZZJRGiJ7EYbcxkz2vX3f0/lI4dLXtC6aX5PDijYUS+FTkSOjiql86dZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jfnmnwr30346pcl38wafgh9c08zsftn5l3w7jn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["detectslush6p"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AznMmFEjdc+5+oObmOQuzNGndVJ51LlkoAOeBEwobF7K"},"signature":"HZFXThFAzGzR1s080Gbb/wmkUvWXnVC8rk9JHugHEmp8tfp3HbIXG1EFpz8zzdJAzrCXqzXt5nN8ZJ6JSxTKBw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16ttjt8pvdtt8v49uqhsewfvz5zm83utpxhv2u3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["elementattend49"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiBPEFukzVq1LUGDuI6B1E9Zoroh0B2ZzzBAedGeI7rW"},"signature":"T8Pi0Fmzp1//eTszqh1K9x5AOxIwUsp1vnmzj9FDc+YVxyMUkqmKPJaAuFktquSpR2NWHFLZtcY6qhnHer4jnw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jfnmnwr30346pcl38wafgh9c08zsftn5l3w7jn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1551","detectslush6p","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AznMmFEjdc+5+oObmOQuzNGndVJ51LlkoAOeBEwobF7K"},"signature":"9tGHsDKq3+GetgkfDPY5qTztDJyuO7uhqaHPiDP0oU0vGJb1YNPom4WmRwdLFBu/FekYfF4etksPY5b8GwXycA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jfnmnwr30346pcl38wafgh9c08zsftn5l3w7jn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1551","1","1","g1jfnmnwr30346pcl38wafgh9c08zsftn5l3w7jn"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AznMmFEjdc+5+oObmOQuzNGndVJ51LlkoAOeBEwobF7K"},"signature":"MiPu2yFougKROVOZouq8Iav48iizR1o74x6E5PSofLpzhAwr2Z6q1Zp+/gLzKUnuXGDvOVxmcIWHm+43pfTZTQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16ttjt8pvdtt8v49uqhsewfvz5zm83utpxhv2u3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1552","elementattend49","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiBPEFukzVq1LUGDuI6B1E9Zoroh0B2ZzzBAedGeI7rW"},"signature":"LrfNQGscCvzaEcYeResWiQmlOS51YajvVk7nTDSTHPA+sTuJJg7si9A78YhdOyPq6cetykV6HM4yJ3ARIEkYqQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16ttjt8pvdtt8v49uqhsewfvz5zm83utpxhv2u3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1552","1","1","g16ttjt8pvdtt8v49uqhsewfvz5zm83utpxhv2u3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiBPEFukzVq1LUGDuI6B1E9Zoroh0B2ZzzBAedGeI7rW"},"signature":"H2g0+J+URdM+ow9ojCy0+o7mBqSaRi7a/A7AdIeberlBcYS7xi0ZE3lJZUx3efQ4igs57QYBx71YFznvldW3ew=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fn5gvmmqx663r05u995y74427jv5sjeev05fww","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"J0afVeJDQxBkhoI+pGA3yQn1TKy0LomxtWo7veQfZ8YkKaRnKtpURHbPbcDUtexaQ+nbH/n3CAVR1HACGLlvzA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fn5gvmmqx663r05u995y74427jv5sjeev05fww","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","grocerywait05",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvyK8sdKxBRNOQ0pJGsZS+yNyQ8Sh9lS+nOLTHyrALZe"},"signature":"P/aO1883g7mQiKvM1Qs3DxoeznLIXXWJjjANzxvtuvFK3ZExVqDLFmpKWEDsiHVv1DdzZM4PFYlUEsEDnm6B5Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fn5gvmmqx663r05u995y74427jv5sjeev05fww","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["grocerywait05"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvyK8sdKxBRNOQ0pJGsZS+yNyQ8Sh9lS+nOLTHyrALZe"},"signature":"i32Q7nrWHjhENMLuyTqsOOJjN+9ur1eLzEyk1FjeVNIu6lHpNvJg2PxxtGpLOVuFSmdlxf5GcGVIHEYiimw2IA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fn5gvmmqx663r05u995y74427jv5sjeev05fww","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1553","grocerywait05","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvyK8sdKxBRNOQ0pJGsZS+yNyQ8Sh9lS+nOLTHyrALZe"},"signature":"olxyBkTm0MW9EaQoA5fqIM+M2JUhNSjG7Fd/N1v8sfo/fYdtlEfzH4oCaIMQGzTsBy2MD1TC9Ug56l71WXf6hA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fn5gvmmqx663r05u995y74427jv5sjeev05fww","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1553","1","1","g1fn5gvmmqx663r05u995y74427jv5sjeev05fww"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvyK8sdKxBRNOQ0pJGsZS+yNyQ8Sh9lS+nOLTHyrALZe"},"signature":"wJd7iUO2704X/foMkhgR23tdBh+rAr0l5xH6PD68Ecg2fU2WK/Flx62jOLhH5YOBMHXtqiE6gAFxGTrlRMlDSA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1kvk5puysmhg5xzswqfyf3f38vjgmk2qtdum789","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"lO7nwgtQjotuHAfofDakh4R+cqtt5giQzjOvhSp92jBmcShADPgRacwz/QBr8eQNettlxkyz7/T3VWM1nT4HNQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kvk5puysmhg5xzswqfyf3f38vjgmk2qtdum789","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","spysoldierzs",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1QtqLykf6B+mMD46uAAQSedgggDe0Xz+WtA4iWTL07A"},"signature":"Z1TpCpZJSS/P4P9D9U1j1ajOSvNP9/qB+kmn8rMHD0hNoqmEDmcWLuiU85LsPX2Vmr8ryrCNqqnr6iwIyM3zsA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kvk5puysmhg5xzswqfyf3f38vjgmk2qtdum789","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["spysoldierzs"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1QtqLykf6B+mMD46uAAQSedgggDe0Xz+WtA4iWTL07A"},"signature":"04uzgyn2QGInJUZtVmmo2er7gYquMEKyXKsQWuuUeb8q4Si+XNZThAXjPR8Theb5wjKoklkypJkFPLgx180E2g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kvk5puysmhg5xzswqfyf3f38vjgmk2qtdum789","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1554","spysoldierzs","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1QtqLykf6B+mMD46uAAQSedgggDe0Xz+WtA4iWTL07A"},"signature":"7Zkcz23vvKSUSNMJhkwecnK6oftevlEfn4smwyytLRVGybi+kgxnFjosO5usFENBBtfsgZjG0bNkEcxan3OdTw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kvk5puysmhg5xzswqfyf3f38vjgmk2qtdum789","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1554","1","1","g1kvk5puysmhg5xzswqfyf3f38vjgmk2qtdum789"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1QtqLykf6B+mMD46uAAQSedgggDe0Xz+WtA4iWTL07A"},"signature":"Arn9Mu36xFb9FhrYC28yY4TCWgkL2pHiFYsUATmsh480eIZV9fpMKlIumz4/2T4MldsjisLYaroglsVMwemfZA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1wtrzr4mrackev5a9emvym2cvfctprvvxtntpzq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"aLlI8KUA7cT8Jgtvx6lJQGCq2VR8NtmnQj0jd4VXZdg7LBlwAXOo3T1UnQ1RGCMA6mlOtSu0pF2j1/RCSWxn6Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wtrzr4mrackev5a9emvym2cvfctprvvxtntpzq","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","vanishsquirrelev",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag1t2U63NgbNBKmfzVbpiTcY3TsyXpgLq/zoBqtrUZmZ"},"signature":"USUVKvg7P4gsXrVQFRFaKZ7NbjmL+dd5xw4me4Ja2P0bdE5z1orcyjy7IaXpVaDIKblZwh3HYHB05UCJ7dliCQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wtrzr4mrackev5a9emvym2cvfctprvvxtntpzq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["vanishsquirrelev"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag1t2U63NgbNBKmfzVbpiTcY3TsyXpgLq/zoBqtrUZmZ"},"signature":"z54hYomxIpWsdkmaIsExbmlL/agjK/nZT2Tx01yuoEV3yK2RWSxNeTrgYiTdme5lGrGsR0xTELFXz9+vi9qp7w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wtrzr4mrackev5a9emvym2cvfctprvvxtntpzq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1555","vanishsquirrelev","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag1t2U63NgbNBKmfzVbpiTcY3TsyXpgLq/zoBqtrUZmZ"},"signature":"keHC83/5/CVdpJEGfM58CUbJXpWnln41izCGbcctsst8Kzz6IKtvsEKqSf15dT9DrZ+X8qZyY2zLAJl1ggnZ0g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wtrzr4mrackev5a9emvym2cvfctprvvxtntpzq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1555","1","1","g1wtrzr4mrackev5a9emvym2cvfctprvvxtntpzq"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag1t2U63NgbNBKmfzVbpiTcY3TsyXpgLq/zoBqtrUZmZ"},"signature":"Gr29+TeQz0FnkzSrWtWXxPKyAL/z4Tpw9ci7fIKm13Jaf1qMI5Hso7h+/gwqtcQzCH2+ngpvBM+XHQAdBDD/hg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17dcjwap8ncqwvgxxdt6jf30ss3mqnmvukefczg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"XmOLGqD8yTC6qI8jQoEyEqnaImy6i4MZKTQoCLvJ8u9wlheaOYvabVVX9S2o35UyvrIy0eiYnESrnLhyUbVgnQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17dcjwap8ncqwvgxxdt6jf30ss3mqnmvukefczg","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","glorydwarfgx",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnnxyN0n/+WvzfZpIauRG8koR7iAk5APeo+8wV2hnuyP"},"signature":"Zj7KfUnefLEeHNkzMlIBkHSmojcaznVY2TNooAEZD/koMd6tK7bGCCqbzGEGrnPZC3bTd3U7oU5O1W9QXdg5ow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17dcjwap8ncqwvgxxdt6jf30ss3mqnmvukefczg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["glorydwarfgx"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnnxyN0n/+WvzfZpIauRG8koR7iAk5APeo+8wV2hnuyP"},"signature":"ZWh1cawODhTdMrbTiiassCGS3VY4WTSQu8L+iTasTXB3z3gLcGNS4JLIxTA6RU1w9a+CIxZmMHQEw1OtpVxqOg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17dcjwap8ncqwvgxxdt6jf30ss3mqnmvukefczg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1556","glorydwarfgx","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnnxyN0n/+WvzfZpIauRG8koR7iAk5APeo+8wV2hnuyP"},"signature":"ud3+hXvzupurObQzAYJqP/18SML4y/MiHRKxBYEnnzglIu2U7E1aHJKzsDrHM2NgcVrZO9eXbNByQZx/30jkNg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17dcjwap8ncqwvgxxdt6jf30ss3mqnmvukefczg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1556","1","1","g17dcjwap8ncqwvgxxdt6jf30ss3mqnmvukefczg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnnxyN0n/+WvzfZpIauRG8koR7iAk5APeo+8wV2hnuyP"},"signature":"fNMB7HDV0XeWzJOu2t8MV6a7rgT2L2OhaFAtcYtZHYImbrx/lq4FgguLnfSoeP93jarY6FreIm+Py9V07BiRbA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1j5wyjly5s8n7qtdh8xjv7lsykxnh8rs6z45wdr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"F7gSoN/fJsX5tArcyGsWC6P0cpc/RkRY/2OTYQAUKp0U5XUvQ4SZ3R/IoKnxQvVC4mhij51oLYD07H6Wmwc5Kw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j5wyjly5s8n7qtdh8xjv7lsykxnh8rs6z45wdr","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","proudefforttd",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmQN8SXQOqXNG4LCOpj/Jv/eKE/im6HMwzBGVZNH0YhN"},"signature":"Rawt79RiuqD2PX8lyBoo02kIlmAe5UhQ5e2nehW5xOgm8fEa2+GbqPXVwIeqv3ZKg9OA4Uvt5dsAvlzfz08l0w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j5wyjly5s8n7qtdh8xjv7lsykxnh8rs6z45wdr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["proudefforttd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmQN8SXQOqXNG4LCOpj/Jv/eKE/im6HMwzBGVZNH0YhN"},"signature":"bSbfW/d7QWS/PdO8m6dLnMHBf43clt083v01+GmaENhpfw4PgzCydBx4vi1CquFJ/DR2ObC5AmH00WxbsyH1aQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j5wyjly5s8n7qtdh8xjv7lsykxnh8rs6z45wdr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1557","proudefforttd","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmQN8SXQOqXNG4LCOpj/Jv/eKE/im6HMwzBGVZNH0YhN"},"signature":"WzT0tDXETmgqT6Whcb9BaPjTl1cwV0uqlGCzCQw0OKQcf8yQM++g55b21zmg29DYhtenOj99gHrm8RUjZwMEig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j5wyjly5s8n7qtdh8xjv7lsykxnh8rs6z45wdr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1557","1","1","g1j5wyjly5s8n7qtdh8xjv7lsykxnh8rs6z45wdr"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmQN8SXQOqXNG4LCOpj/Jv/eKE/im6HMwzBGVZNH0YhN"},"signature":"MImLxxgQ1YrO2ouv0fQ0iwmixqB92Kimoco2QjBMvCgvk99jTYoZSpZh3BjLeOffbTHyHiwXLN9ArzU3tl69EQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19rxe9x2m6mmute6yql5q8zqyd386m6hpua6ta2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"aTdeOjioKtAx3l8lUErlo7OrGwLfWduWl5WYfrP6yosN3FT0SFCmhxeSmLD4Il0KKOpRTT+E4ScPaXral9AvdQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19rxe9x2m6mmute6yql5q8zqyd386m6hpua6ta2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","victoryriote6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8tkEIXFB6vCU4eyDbiqcDVRywy1D3Umdd57D6EUtKKA"},"signature":"6ARPHhSTPB67fUUxtapZpuSmJz4PiTbya6VNRvJbK8k4wuwjoPdRWiGqZ8KdWdXVntHdaDi7evrIv/lNUACJmQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19rxe9x2m6mmute6yql5q8zqyd386m6hpua6ta2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["victoryriote6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8tkEIXFB6vCU4eyDbiqcDVRywy1D3Umdd57D6EUtKKA"},"signature":"JEAUu0R6BqS4YY2g+vkLZeqjb0ZG/p6g92QVgdEtW8A47+AkYJqOVDyKadSQElpBBqjwBmnWVVaT7wdu7+dZmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19rxe9x2m6mmute6yql5q8zqyd386m6hpua6ta2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1558","victoryriote6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8tkEIXFB6vCU4eyDbiqcDVRywy1D3Umdd57D6EUtKKA"},"signature":"irgdk2lFGqZ9WCQa46l+twFi081RkEqoibzs5sCb1PZE33cwUVSbqrXLbGnVt7YqPC+SqlUFT12FBPtB7oRi2A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19rxe9x2m6mmute6yql5q8zqyd386m6hpua6ta2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1558","1","1","g19rxe9x2m6mmute6yql5q8zqyd386m6hpua6ta2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8tkEIXFB6vCU4eyDbiqcDVRywy1D3Umdd57D6EUtKKA"},"signature":"u8nUfuLrx8BOHMsPO6qSnQn957zH1LSZT6j5sWucEIo780YxNx8v/qI7wI4nnhgqhH26xIvxCy2K+PAn8jie+w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1kdjdzts3a043s4t2wx5wfu0j4lhj7xml4r8pe0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"AlZuoe/eIleHA3kJeqz74JueqiRhpfJIA30i3H8vh0Yws9VKOaX3Pke/MG524GDG7SvzdEa4YOMutT2Zq7t41w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kdjdzts3a043s4t2wx5wfu0j4lhj7xml4r8pe0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","correctfalse3s",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5anPgcTwCwbsNrKcELPmDFuwCTZEih0mJFPlZHdbWoV"},"signature":"CRjzhDYdniVoo5rTzKXaHZnbcyY8qrA8ybBtVNuAf9E4KmQivJRdaRbrVo7QNnp/8dvFaZQuXL8+1ti1UFsYoA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kdjdzts3a043s4t2wx5wfu0j4lhj7xml4r8pe0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["correctfalse3s"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5anPgcTwCwbsNrKcELPmDFuwCTZEih0mJFPlZHdbWoV"},"signature":"cUfGYh9RWstBlr3Vr2igLlTXxsIMR3E6hQonqYNVQ2snXg2toEIL0ymv/kDxYZnJA8sOYSA9S7zM4J7EXcDkRg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kdjdzts3a043s4t2wx5wfu0j4lhj7xml4r8pe0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1559","correctfalse3s","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5anPgcTwCwbsNrKcELPmDFuwCTZEih0mJFPlZHdbWoV"},"signature":"P4l8fbqKEvz2odtzt0Bs3bd3pW1qSfUjv/gJBRTSaZYghM+JeBX+MD0tpXLAcCr1doKQrFQgoeX2zPZ1tPQ/DQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kdjdzts3a043s4t2wx5wfu0j4lhj7xml4r8pe0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1559","1","1","g1kdjdzts3a043s4t2wx5wfu0j4lhj7xml4r8pe0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5anPgcTwCwbsNrKcELPmDFuwCTZEih0mJFPlZHdbWoV"},"signature":"LZabpDBbzctv2B2a51GXGdylXQWEzpgpnTGNYPDrJdMNRAH5LU+YrzU72GzSVXnZOT4Bz4cM5gx+TGqiMzkT6g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1j0adg5wsa2q4qwf87xqtn83rmhsperz6nfza7l","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"wem8qWm1VgfcGsewcklX7p0hOY2R5D+tzbCq2L3Tg5ZzSfvD1VOm5gJZKEyvJKHcSL0E5xThBxwHDE1rqM912g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j0adg5wsa2q4qwf87xqtn83rmhsperz6nfza7l","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","helpslowwf",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AytqcAJe0ojMz20PYoeKGgOVD2t0BEpu+8PiZd03IxHv"},"signature":"KXOI/gI7GrexfhHMo9EQpgkNrrCwHBVvQtVgxM+UJxkPCKxx2LGp0h34ECjKEun+kOFnFi8yHPyH4deSihDkIw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j0adg5wsa2q4qwf87xqtn83rmhsperz6nfza7l","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["helpslowwf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AytqcAJe0ojMz20PYoeKGgOVD2t0BEpu+8PiZd03IxHv"},"signature":"ql+69ZwmaxTC5CXll26i3pPDTLMDDWoGkwuwrHlToUYfeXIOHc31nL5YF/BGBKC/KgqLzr9lWyKbkCEDRnKjoQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j0adg5wsa2q4qwf87xqtn83rmhsperz6nfza7l","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1560","helpslowwf","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AytqcAJe0ojMz20PYoeKGgOVD2t0BEpu+8PiZd03IxHv"},"signature":"UM4TmgC0xz08FZLY7t3XbGP8szAS9Fv7FaFfhl36PXQ0V3mYxSopvWNWybuw6uI8mzxWPyCJkeAl6FG/eHmriA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j0adg5wsa2q4qwf87xqtn83rmhsperz6nfza7l","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1560","1","1","g1j0adg5wsa2q4qwf87xqtn83rmhsperz6nfza7l"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AytqcAJe0ojMz20PYoeKGgOVD2t0BEpu+8PiZd03IxHv"},"signature":"jxJuvZWe8zkb39HwYrqA0pkoX08WUubfTUyXBfAxrlA09bzZSnzRqnpQ/VMJEZU5EnBsI4tAk+1eFl27nCfNJw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1sj8feyevsm8685e8fef9us9nukvwaq9egjcxmz","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ZA+ngGxq9fGyeb5dPpf+GsRN5PfwYDDCYU4qmOw+XJxn5NXAPdCd1qwxkAnLl2RMAZafRL/rz48zoWa/8LyVug=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sj8feyevsm8685e8fef9us9nukvwaq9egjcxmz","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","voyagegarment5e",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap8od9P4l6+sl4YfmAO6HTu9BLTvl8XaUJXswwP+9aqw"},"signature":"Qg7+3BUa1Yev2qX90d9QaOWMgEztVZI+/mRsFo94xJ0+uiK17Lm7j93tTjBSLed9Qv++PpHE4pKrCW3xhesC4Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sj8feyevsm8685e8fef9us9nukvwaq9egjcxmz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["voyagegarment5e"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap8od9P4l6+sl4YfmAO6HTu9BLTvl8XaUJXswwP+9aqw"},"signature":"dBKCB2OUyCCiOrK7TCTDYRsbdZReryeiUbTBCLlBqztZeGswjRa+vcjjjZDAHF16vz/omuKBuOAZcfB4Fp3B1A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sj8feyevsm8685e8fef9us9nukvwaq9egjcxmz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1561","voyagegarment5e","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap8od9P4l6+sl4YfmAO6HTu9BLTvl8XaUJXswwP+9aqw"},"signature":"NzzeWm9NH9yYcW+xNc7cUHRdgvboH7jxRY696CDeeUA9T653LyMmQGO8V/23bwqlsBYFD0PvM1U09sjSHmfc9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sj8feyevsm8685e8fef9us9nukvwaq9egjcxmz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1561","1","1","g1sj8feyevsm8685e8fef9us9nukvwaq9egjcxmz"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap8od9P4l6+sl4YfmAO6HTu9BLTvl8XaUJXswwP+9aqw"},"signature":"0na1WPhpXoVtdMvMi70E7MQ7zY244oO88ih8cyPuzz1duE6GyDWqO03gw4NbAvJFZbIRdK2WLZppI7gKaxB6WQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1yls3lsu9hny32xa0yakk0w0dtttp2h0p654v70","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"J592k3RtMPHbiJzxlf8eNnaqolKHyyKJbTM5KKUHA+AhPLgnYd383vWPNLgnPUppZWvs6qzSAGrmWrKJuR4vEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1yg6stsy766md5u8jea70qtwc98lxgj6pyekg24","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"iexoyHt6fYgedCcW/Ku6XHl/cBSyG6693QLZpENP1wdpc5T7/Y2Bbgr55HNXj67+59ex1PX2uo838dBgOiOIIQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yls3lsu9hny32xa0yakk0w0dtttp2h0p654v70","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","letterfosterxa",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4PIrdOQnqG+Fg0VnR9I8m+FAu/tWoEgnIN1fLM4EBdz"},"signature":"K/nVcmmZjF4UEnMiY5SFDVqvKWLEoWqaWEpM67TU7Mpha0QuabM+ladGLdtvAtqDnMiap4+9OZqyrt3nXi27TA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yg6stsy766md5u8jea70qtwc98lxgj6pyekg24","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","savepactd5",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av57SIz+1m8cjlJQs9KrkFJKFfiBQjzB7y3utqFBcsJe"},"signature":"Rz5S0rtYoat1KRyxOhwcmlpjZPAvz9dpxMggrZ8LRwZ+YZWz0Dfx//xzQAJJATNVoLSZiPfne1ZSEsAwjnS3Fw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yls3lsu9hny32xa0yakk0w0dtttp2h0p654v70","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["letterfosterxa"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4PIrdOQnqG+Fg0VnR9I8m+FAu/tWoEgnIN1fLM4EBdz"},"signature":"nrGFyw4YLRodPk1e53j70u05kfGHRXbK/qf0sP7z4k9a++zO1otziFnrai+6DQ0w7y4nLUEEF/NGTbFieYvKRQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yg6stsy766md5u8jea70qtwc98lxgj6pyekg24","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["savepactd5"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av57SIz+1m8cjlJQs9KrkFJKFfiBQjzB7y3utqFBcsJe"},"signature":"4BQC7FTSeOctL+i9HtbDwTaSWWyIHChwrP1zlZOhe4gwl8JzJ/EeV+W/CuYUoPjkuhtN4Rd2qCIYrof0DJ4bMA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yls3lsu9hny32xa0yakk0w0dtttp2h0p654v70","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1562","letterfosterxa","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4PIrdOQnqG+Fg0VnR9I8m+FAu/tWoEgnIN1fLM4EBdz"},"signature":"qorngaxFgLwRr/T7zhL7kbK6KbiQtgATHhljQF9nHXQXuRHxFL4UuUn/iyWfc15n9ZZNRdAGhxhHBlF/I2BR2A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yg6stsy766md5u8jea70qtwc98lxgj6pyekg24","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1563","savepactd5","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av57SIz+1m8cjlJQs9KrkFJKFfiBQjzB7y3utqFBcsJe"},"signature":"/OTyIw3lFe44xs3OPGkVXgiUG1LdEkc3qd0l6bO+yuh3HXBpCI9FiZx8wxlgHr8+2e33zaacsAfoPBsfJHtKZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yls3lsu9hny32xa0yakk0w0dtttp2h0p654v70","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1562","1","1","g1yls3lsu9hny32xa0yakk0w0dtttp2h0p654v70"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4PIrdOQnqG+Fg0VnR9I8m+FAu/tWoEgnIN1fLM4EBdz"},"signature":"z85OHD6CXql2vZTvKbvLGGfr2mP3x4rnLUlCgUyOjwJFHWohr0sAwiv4b94wsokBzuwhY9Knrc0ms+7XR4/QLA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yg6stsy766md5u8jea70qtwc98lxgj6pyekg24","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1563","1","1","g1yg6stsy766md5u8jea70qtwc98lxgj6pyekg24"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av57SIz+1m8cjlJQs9KrkFJKFfiBQjzB7y3utqFBcsJe"},"signature":"ldrJNhqU7VM+lNEUw90DsAivq+SUYC9rQ1Sh9Q5tLOQ5PTxJGK5eZk49AcoRDcL3Xl2F6uO1M+hDAA1VP8GA7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1kcf53vlrxp6wagf774ntkx9xw3syujfzukmccc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"1Tf5+Lejlmir3LmsSTWP5yu8CKlCGEv1OrdUeJXSLL8jdCoYis3AXdYw3XlwgXzzHIw5kvMmXVzNBylY/iapYQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kcf53vlrxp6wagf774ntkx9xw3syujfzukmccc","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","ladysirengf",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8S5ufDK3s1DIoFyhfs/p0kuGIKLEmsvioFO4wBT+Bsp"},"signature":"hDE0TyybsoMb++/q8enOAaz+ifvAd8UOO1lnICa9Miph34A4KB8XQ74MZ1oScms9u1xOSHEQE35YBqpLl7KzZw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kcf53vlrxp6wagf774ntkx9xw3syujfzukmccc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["ladysirengf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8S5ufDK3s1DIoFyhfs/p0kuGIKLEmsvioFO4wBT+Bsp"},"signature":"ZL+aoR3WFci+nYnm7/5xTqXR1/A7RCRYdNj4r/9edfdO1dgcRYX6YSuxZtuM0H90eXXpu2/78sRr54btllYy3A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kcf53vlrxp6wagf774ntkx9xw3syujfzukmccc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1564","ladysirengf","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8S5ufDK3s1DIoFyhfs/p0kuGIKLEmsvioFO4wBT+Bsp"},"signature":"gr2WAlxQHokGv1aR0p9RjHNG1zsz5sf0XvwAgUkaZ9Zj2EtcoJ4GBl4FY+zsusPsy9229GjdhKQTSkcgsfvYOg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kcf53vlrxp6wagf774ntkx9xw3syujfzukmccc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1564","1","1","g1kcf53vlrxp6wagf774ntkx9xw3syujfzukmccc"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8S5ufDK3s1DIoFyhfs/p0kuGIKLEmsvioFO4wBT+Bsp"},"signature":"fz8X+t9gY5C1Zr1UAcugW7UGDZmgjwVQSXVanI4Y+6ZLqjFw7nrfGBdpDkAnEnbFqQQ7w1YLBzynZYyWSTN8fQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fs96actyjt3yjy5lyz5tht90ng3e4ft5v0ajsr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"4ILV9irYd1dPVRAbef8yIGSiPvqvTeIWxLGymvwKzXxNDP0M4VQpHHKJGkJ0qz7WtZ2x7KsxCc31kK3h9WX1Rg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fs96actyjt3yjy5lyz5tht90ng3e4ft5v0ajsr","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","onlyhirey5",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiZXvgCKePKWfXXa7XGVCkO5d9+uiUGE1V8nEWQWMbW4"},"signature":"M29aZX1YxPDJADoU/lTbjmh8UhuWpPNyQZ2z0R0RgXR2P3vJMP0NmAjNcSFLr31Xiii8kQs6kC+jqxrL7+HlXw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fs96actyjt3yjy5lyz5tht90ng3e4ft5v0ajsr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["onlyhirey5"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiZXvgCKePKWfXXa7XGVCkO5d9+uiUGE1V8nEWQWMbW4"},"signature":"x4Kmj0qd5iNQgibsUaTsy7Ih9SGEkQ/MxcEB8qCbLmtxESJWbY9umUvev6iGsq4ZIZtQ4RilBWcCaBFsPi0PIw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fs96actyjt3yjy5lyz5tht90ng3e4ft5v0ajsr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1565","onlyhirey5","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiZXvgCKePKWfXXa7XGVCkO5d9+uiUGE1V8nEWQWMbW4"},"signature":"bKfYih0/XfXunGLFzL+6RfgKTuCSAPxaLOZPIv2EsetF0KFmu3r3/Wh28Dra6zrTCXyw60AvB1PYde4koAMHIw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fs96actyjt3yjy5lyz5tht90ng3e4ft5v0ajsr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1565","1","1","g1fs96actyjt3yjy5lyz5tht90ng3e4ft5v0ajsr"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiZXvgCKePKWfXXa7XGVCkO5d9+uiUGE1V8nEWQWMbW4"},"signature":"x0BIv+CxdeeD/vRiGSnhzVLeuKRl6fF/3MSA23yhLPENZ/lOLhKLqxuz0rc0/ooO5d9b2ZeT4DJK9rzzUO2Nig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1mr0fpyf76rdk0wakrvj4q6gnt6p06uu3686uyp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"AmWID/a6OrmHoQkvE2J1HChSti1tVNqwd7PbzAu/o7wvjVDCZL+AIXkuaYC9knwRKy78v6QLxH3BLMOoiZT5cQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mr0fpyf76rdk0wakrvj4q6gnt6p06uu3686uyp","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","auntsketchk0",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzMtEvwJhWNPqpabK/bM+e5KJz34VvxJ3FCqBpybxxQs"},"signature":"xWdxFCoYR0JPdQsdgKLGv4Vg8LgmWAaX5TWYztM9UNQ12fgl7TmDg3eHa68xRCa7578PQ9SGyOJ9bjTwHWQJUw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mr0fpyf76rdk0wakrvj4q6gnt6p06uu3686uyp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["auntsketchk0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzMtEvwJhWNPqpabK/bM+e5KJz34VvxJ3FCqBpybxxQs"},"signature":"JL1ZD/RqoEP50aOsnEiHYsBiTnUYrBKL8HlI82ADz0R+AcE3Qnnb6lafvpKhEMhNafd6Pk+lIJNLuPk/7wELUQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mr0fpyf76rdk0wakrvj4q6gnt6p06uu3686uyp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1566","auntsketchk0","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzMtEvwJhWNPqpabK/bM+e5KJz34VvxJ3FCqBpybxxQs"},"signature":"+3tnhfWDEhlDGoHml9yXh3ZkZIEwBvWAZyuA82xkt6gpKT92KeMrf0mQStIVSVW6FQRDbMuRvvkWy0PV9YZckQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mr0fpyf76rdk0wakrvj4q6gnt6p06uu3686uyp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1566","1","1","g1mr0fpyf76rdk0wakrvj4q6gnt6p06uu3686uyp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzMtEvwJhWNPqpabK/bM+e5KJz34VvxJ3FCqBpybxxQs"},"signature":"MKgCRje+zCJsWx887C642RSbKu1t5ihK9Ps4GMIqwpUdVdVbxdU0ANxHFATQ+dvMw8/9vZVR+w0tv1MW26HghQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1k0j6gc9assjq3kfs2c49wy0erwes8ypk835229","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"WmIFRTdOPEmkqrLbjxKQisuzAIMkVT0AlsPwwKfQtogh2ZpiYDFcLXdfPC9dKYN/nnijhW0clb56uoQEm8vaLA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k0j6gc9assjq3kfs2c49wy0erwes8ypk835229","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","funnysolvekf",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmAsnrgLxcvKY2QI1MjhoDeUIUUDiHwADqUcifqrqlTQ"},"signature":"57r528aWj5E0F4BbSvZKc0RSZjEhgQkp0a3vDk427QAXEPRAHU+zyz8VW89XfkX0t9ljvS3Sn63So3YQeukykA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k0j6gc9assjq3kfs2c49wy0erwes8ypk835229","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["funnysolvekf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmAsnrgLxcvKY2QI1MjhoDeUIUUDiHwADqUcifqrqlTQ"},"signature":"kkouzQdv98D2BUNDqe3AeITWhJ8UMWWRVzoo1WSzywIYhXke+c7E0w6QurdPm3NjtAiuqBEZiVT51r+ke2t1jA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k0j6gc9assjq3kfs2c49wy0erwes8ypk835229","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1567","funnysolvekf","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmAsnrgLxcvKY2QI1MjhoDeUIUUDiHwADqUcifqrqlTQ"},"signature":"eMfmIO0SjWrMwq+MkfHpfFU5vBiaVVUbtoD9DkxioKIOeAamVW2pYlPQLY5E+HqTLsxp62D5O6XLSsefDHsMRw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k0j6gc9assjq3kfs2c49wy0erwes8ypk835229","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1567","1","1","g1k0j6gc9assjq3kfs2c49wy0erwes8ypk835229"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmAsnrgLxcvKY2QI1MjhoDeUIUUDiHwADqUcifqrqlTQ"},"signature":"J6Y6l/owMWNkZWMcaiF1Q7RBq9cA8swGy6XBXUqD29labWPzranR1NtjSLILX0w+HUq7pXFCcu6yrGLrZTL34Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1m27g4zjz42w9hthm2hg5t4t5vrkyqfe4qz8jlp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Zx1aRxFWBeSRYXBgcGJkEj5qtH7p1U29k4GLcrFikYw87v+YtG+mt0LazmWxCJqYx+Gk6JHC2Ru38Md90fuUNg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m27g4zjz42w9hthm2hg5t4t5vrkyqfe4qz8jlp","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","ostrichdadth",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AohhxQ/fZkgKN2i5cZL6x2lEmc9GxSJEuD5K4SLdKlxk"},"signature":"zaSFtqJhStFl21rJJ6MSkNdL68/SMGOB+ONuCSZHd1gQGnbNm2de+aNGFy3d0cWJTdZh0EIbiFYyIBiHu+1ZJg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m27g4zjz42w9hthm2hg5t4t5vrkyqfe4qz8jlp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["ostrichdadth"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AohhxQ/fZkgKN2i5cZL6x2lEmc9GxSJEuD5K4SLdKlxk"},"signature":"b8svaGNIzafFOcF8zvcY/pl5bDbMUBTCp+292yBDDVlUapttonnDyMMp23T8iG+lzFJZkHyaRZhZ88WBbH6Kxw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m27g4zjz42w9hthm2hg5t4t5vrkyqfe4qz8jlp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1568","ostrichdadth","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AohhxQ/fZkgKN2i5cZL6x2lEmc9GxSJEuD5K4SLdKlxk"},"signature":"N3eA4IvPzwpgK9hWVEog0FT3PfVjh09wwMZMybqN3+0xyITZFhdL48/f1wIWKN7JG4gLBQdwAQpQq1qahZgivw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m27g4zjz42w9hthm2hg5t4t5vrkyqfe4qz8jlp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1568","1","1","g1m27g4zjz42w9hthm2hg5t4t5vrkyqfe4qz8jlp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AohhxQ/fZkgKN2i5cZL6x2lEmc9GxSJEuD5K4SLdKlxk"},"signature":"rQ3Qz0ewY2CEUGRS40LQnxf06kIdFNGiitMXD7EOArJsji51PhM8UB/a7DQLvFAUZz87BcyOuEd53Oyeq/0C6A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xq0757z7g4dsg282l3jdpfhkutxx6sa065apdr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"QElFX82t2T4nApTQua8HDwFWWz38OFvjXM7CgyvYyO0HdLn1eIQsCH8ozTanshuo5g5sHLONmZCvKGSe9GpWvg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xq0757z7g4dsg282l3jdpfhkutxx6sa065apdr","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","newscat28",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArgHA6HYtwlybHVmp2OYmDvb+mnSNJ7eQB6pCwDpxkIv"},"signature":"DjZVUuyMxZBy0p37bKzhZ968XDyPtgoURlx6xaGV1no6vNwOBSEEpyeePseYVg/4lU2V0Y6bYf+b8gJ4UkJ0Mg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xq0757z7g4dsg282l3jdpfhkutxx6sa065apdr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["newscat28"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArgHA6HYtwlybHVmp2OYmDvb+mnSNJ7eQB6pCwDpxkIv"},"signature":"fr0irestwemVIrKX+7EOgSkguGjY/d51gQa/YdmPGKYTFo6FgRkTKAVwPkwT7KGf+vD3qPqxoaL/Bp2adnreUA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xq0757z7g4dsg282l3jdpfhkutxx6sa065apdr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1569","newscat28","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArgHA6HYtwlybHVmp2OYmDvb+mnSNJ7eQB6pCwDpxkIv"},"signature":"SxkeDh3KYd/CLaopR155sS4cdwdZoLoN0Kj66YlCWMx/Ep3dzN+A4XlnfMl574h/INT3HbJnQ+y19fVA60i4EQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xq0757z7g4dsg282l3jdpfhkutxx6sa065apdr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1569","1","1","g1xq0757z7g4dsg282l3jdpfhkutxx6sa065apdr"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArgHA6HYtwlybHVmp2OYmDvb+mnSNJ7eQB6pCwDpxkIv"},"signature":"pB2BuuhDlB3rTj6csd/o3lHR3azYTxRMLN7YAOrU0HZtHBv7B/8Ux6kdU8GxdYiYWZI2AxWmPyD3/h12IUSV4g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1a22x6h3vc260z4nfhrwtgz0xxre0ln2lkqr43j","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"pypJwogx/hF8lmbVB7YYTSWmMqXbDBQs/+9Itsv8HvAQuxmThJJeiohTBktDUwXV+mXGCShoTtzobt8ykqIzSg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a22x6h3vc260z4nfhrwtgz0xxre0ln2lkqr43j","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","turkeyweasel0z",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1WhAb52pFhC6xD3X8moFNRBvf3knkcHwQ0thA/wlKJL"},"signature":"EDcv0hc5TRH6RPU1eFSAa6J9esGr7/jRbpNcnGU1oaALSerOaNtIiWrmXzoKKzMHg+Ygmd1svXEb1BWv71tGWQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a22x6h3vc260z4nfhrwtgz0xxre0ln2lkqr43j","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["turkeyweasel0z"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1WhAb52pFhC6xD3X8moFNRBvf3knkcHwQ0thA/wlKJL"},"signature":"TUeiNPquMQ9g7hpbLDAYDqr209fNRs7LZv0E+IVKkv0YpGzmEolWY7ITewqWPs4PxJCXy09c+d+s0/3zeT8IRw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a22x6h3vc260z4nfhrwtgz0xxre0ln2lkqr43j","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1570","turkeyweasel0z","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1WhAb52pFhC6xD3X8moFNRBvf3knkcHwQ0thA/wlKJL"},"signature":"GkRSWrKOtRK1wHVUSSraAcCTnhtqk3FVRMVtsPlq+nUDMPkN36Ntzjzwxt+e54xSItzxa/AMvC3/xEBcGiY/gg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a22x6h3vc260z4nfhrwtgz0xxre0ln2lkqr43j","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1570","1","1","g1a22x6h3vc260z4nfhrwtgz0xxre0ln2lkqr43j"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1WhAb52pFhC6xD3X8moFNRBvf3knkcHwQ0thA/wlKJL"},"signature":"BmcYGjhFoFyAdnOYWJsxiciv0hK8nm+Wxykc3lOLj+0UX3rgAqifyVDQ4dH19BxXwNEUTz1ekWk//v6vCC8H+g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1q28ffjpc0j962792v7mpckuhll5rj2gp35dyy6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"50haKtACdTcEOOe7ylMmTLFgpgUAaGy6MMzMWc8msfQ82bxbKin3ZLSyFOOOXLuys/EfgvB9cNxTJIs6NICIbg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q28ffjpc0j962792v7mpckuhll5rj2gp35dyy6","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","signreturn79",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4kOY7qyndbvr2dhNp2OrjBmW7kEJwZqt9TqktdMa9FG"},"signature":"mA7AOwKz4P3AANt+X9DyhJFwGHioiG18iF8+54N0cywNRB+OdjDTYtaLhjCGkFFKluiLgGYKTMk0vrZz4n3Kaw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q28ffjpc0j962792v7mpckuhll5rj2gp35dyy6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["signreturn79"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4kOY7qyndbvr2dhNp2OrjBmW7kEJwZqt9TqktdMa9FG"},"signature":"1efZ5IvVbELQz7YMFjWSX0Qb/TEZdBgguAQIaRiNMCZrA7ZSiqrZqjZsq+qbDCoiqMkK0VihQvqhcFGS93qM5g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q28ffjpc0j962792v7mpckuhll5rj2gp35dyy6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1571","signreturn79","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4kOY7qyndbvr2dhNp2OrjBmW7kEJwZqt9TqktdMa9FG"},"signature":"tuzgCglgFGBw9/Joq20VvSYZz7bTq83x3rLJF32ti218TzamhURhQi3kYqJE819C7x8ic1BS2Z1whqw8lxUaKg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q28ffjpc0j962792v7mpckuhll5rj2gp35dyy6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1571","1","1","g1q28ffjpc0j962792v7mpckuhll5rj2gp35dyy6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4kOY7qyndbvr2dhNp2OrjBmW7kEJwZqt9TqktdMa9FG"},"signature":"iYFmi03JaJT9wgxuABOOduwRxp6sN+lOLHSX01j16jwxy1Etc7PSYVks/Nuf3bwmmVtwCTSiTdWIiTlUcdHUdQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1c6042k8w9wsh9r093s0ukxxhuu96lu2jmys3v8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"WhJKqiGrol15oh+YoqOBDNluwhk54fHKiDmBvOuL/1Vt8+mCuGzRIkgTA0Hs3zTDXHKYg2gi+9CRnDoE3V0BHA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c6042k8w9wsh9r093s0ukxxhuu96lu2jmys3v8","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","carpetlibertyr0",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3GPt5pBtw7fr/P/SE8HQ9ogz4MpogvAFVIrkLVI0/gD"},"signature":"CIdSBRWdD+AaNrP/AbBJmAijbXS1rbMH3hEtrxU3R8IYWOhIs6UXHQvXsqtrd3AbHzUcueCVgK3HhDn89aS7cQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c6042k8w9wsh9r093s0ukxxhuu96lu2jmys3v8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["carpetlibertyr0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3GPt5pBtw7fr/P/SE8HQ9ogz4MpogvAFVIrkLVI0/gD"},"signature":"KEHDjHCY8VVfwaCEGCsRJRplQQp2exfUOh/nqYdCXAhb34oZ8KAzI9Wzxjoxx6xgO/J/tpcMRVZDagVs4CtI8w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c6042k8w9wsh9r093s0ukxxhuu96lu2jmys3v8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1572","carpetlibertyr0","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3GPt5pBtw7fr/P/SE8HQ9ogz4MpogvAFVIrkLVI0/gD"},"signature":"txtH9FvejGii3X16NjDHdpEpNFFxt5vJ/8rizm5TWgg5JHY+ww1JHdo2HeAG8XcDgWOlL3o5D10YN+xQWt6+8g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c6042k8w9wsh9r093s0ukxxhuu96lu2jmys3v8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1572","1","1","g1c6042k8w9wsh9r093s0ukxxhuu96lu2jmys3v8"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3GPt5pBtw7fr/P/SE8HQ9ogz4MpogvAFVIrkLVI0/gD"},"signature":"RfjSis/BcSSYuYM1MqL1TCQm+0IcmsOlyVw+q2MStO0gexn0702srSSLkpBQ3niDoRAxaJQsxQtUreSRaJ6kAQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1608qdvjzazrew0vzadpvfshz53qysfg8hve2p2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"IXs+pS3ovGZxFR5AaHbbYN7xqXs98qkHOb7mgw+2ic4VIhZTnYEnsEF1uLr6+YMGSFyljwkZl7saTC3X4C8R8g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1608qdvjzazrew0vzadpvfshz53qysfg8hve2p2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","notablemention0v",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5fYJW4Vz2Z2W3Ig1P0CmSLa0Wp8YfEDT4yYt5eY6PP+"},"signature":"PdpbGN2J5g18QgMGPA15x1rYdXu4LR16kP3m93YJ4/9vkY/pFgfOJMmBk7rLuShDIhm28QpLAbMdlroozVGhuQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1608qdvjzazrew0vzadpvfshz53qysfg8hve2p2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["notablemention0v"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5fYJW4Vz2Z2W3Ig1P0CmSLa0Wp8YfEDT4yYt5eY6PP+"},"signature":"bpFj8oDiI9/tmc+zJD1Ds9RBxF0T3iMAeKRvEaQk2DVAHhcywsAyokqHZYNn/ZD7OoqgEfsjAkQElIbSPQsUjA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16g3spwn89s2t9h6fv70gdmn7qmsvr45gmvvtg2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"EdkeZoTT+iLSmkcp2CECFAfrP+CTcCQTQlYvR/17Wep1Y3eraN2SxdANYPUHeeVA7p4ZK34QNgrhz+6o+0ykgA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16g3spwn89s2t9h6fv70gdmn7qmsvr45gmvvtg2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","imageprisont9",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A13U1d5DLw6pxrsSXIdrYNywjrMwlHeIawaHlVLe6lS9"},"signature":"/U+VBPZV4nQIbuCevvLOB2z8xJ/OeDvt0j6ZXcVaUzBfSzWd6jWdiG2xemeK3l+NFDCqE4vBre1gXJOilE8Yrg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1608qdvjzazrew0vzadpvfshz53qysfg8hve2p2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1573","notablemention0v","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5fYJW4Vz2Z2W3Ig1P0CmSLa0Wp8YfEDT4yYt5eY6PP+"},"signature":"kvatIMO93yjq8Je7dILdk/fs2lmFzfruOV2+omfU8qVrphr4iaqqw4tEJfh3EDNtUXmhqFlfshG7PuFIMDS9uw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1608qdvjzazrew0vzadpvfshz53qysfg8hve2p2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1573","1","1","g1608qdvjzazrew0vzadpvfshz53qysfg8hve2p2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5fYJW4Vz2Z2W3Ig1P0CmSLa0Wp8YfEDT4yYt5eY6PP+"},"signature":"dwY92598S08MIeEZQbwIKih14nVUbeXGZMw2Dkja+pwmfwkifWGIzjL39k6tIKbpUaRBPdXj41Li9EtJVpovxQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16g3spwn89s2t9h6fv70gdmn7qmsvr45gmvvtg2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["imageprisont9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A13U1d5DLw6pxrsSXIdrYNywjrMwlHeIawaHlVLe6lS9"},"signature":"UsyYZ3qwZScPRT6BbnZLea+afCvVAyghqya6LE3Z9RUcIiqNzdNdJDZIfCl2ooDSrcVcR0RBUo2d2HHyrvm60A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16g3spwn89s2t9h6fv70gdmn7qmsvr45gmvvtg2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1574","imageprisont9","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A13U1d5DLw6pxrsSXIdrYNywjrMwlHeIawaHlVLe6lS9"},"signature":"AwTGBH/eyBXm67cwXBCV8NxlawgMN6kKJam1968uDth7bcPjNy9TVvPZzgGURnb2Y9c+Yb6n7e4OiJEJEGXY3Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16g3spwn89s2t9h6fv70gdmn7qmsvr45gmvvtg2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1574","1","1","g16g3spwn89s2t9h6fv70gdmn7qmsvr45gmvvtg2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A13U1d5DLw6pxrsSXIdrYNywjrMwlHeIawaHlVLe6lS9"},"signature":"5bll9Dlg2PvUPQ7HhJv2boA6tQOrYjNIpN2dmrG25bIbipPN1anP+ZCjDMETf2U0jTkz3dVhjmGV63ClFWrDZg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19udl7e0nj2674aptjfw5kz30uxu80ejk85sck0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"gHvnbN+vkxooJvr0nQ55igXDQEFFSlt4DZKGPeGkG0BQRgLTsRJIa4KXE4FhDzXaSmhzzX2dMFCQ6qH6tZNjgA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19udl7e0nj2674aptjfw5kz30uxu80ejk85sck0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","denyautoap",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApZbM8fmS7BU3f5qOcMZZP1igA2IltC0CeN8glu24B2C"},"signature":"ZA0u6Ijan+q/ohEsiiao0BJ+/0l3mBfppbJUz5c6jy1Dggce8i8HNXP2jZUiU2+xx+M3e6kR0+fButyuoX0OJQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19udl7e0nj2674aptjfw5kz30uxu80ejk85sck0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["denyautoap"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApZbM8fmS7BU3f5qOcMZZP1igA2IltC0CeN8glu24B2C"},"signature":"00PG9Oa0Z9u0UHsj9c+r9koRx+QsM/ouBvW71EpxprU0SBdwXXMCr4YUyUZ+9nsCkwFRuFW1vm65qnQ5ZMkv3g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19udl7e0nj2674aptjfw5kz30uxu80ejk85sck0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1575","denyautoap","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApZbM8fmS7BU3f5qOcMZZP1igA2IltC0CeN8glu24B2C"},"signature":"NAGxFH3AOuHbIFLLL3U1fwi489aXrgPgOCu7f0Y/aX9szT8eZkmGs6cRRmDbfS1tGR+NY/Mmuk8ieg5OeBg91w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19udl7e0nj2674aptjfw5kz30uxu80ejk85sck0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1575","1","1","g19udl7e0nj2674aptjfw5kz30uxu80ejk85sck0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApZbM8fmS7BU3f5qOcMZZP1igA2IltC0CeN8glu24B2C"},"signature":"lWD/7/VIQoSM9FxEl082as9IAAarXKn/6pw7qUPJHNlpsh7uaUcjcbZ66vLACpIJkkAV3AwL5o7dEBVm918ERg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1qs79hg7q2afe365ut0yaruz8zrh08l4hueztv0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"164jYuH5aIxPM1bfXelamI0BCxzdbkFXyDS1tZpvmRYX5BYh4jOnuchdjAnYbmaxzAb/WQ+f8KlBOtzQrBIH7w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qs79hg7q2afe365ut0yaruz8zrh08l4hueztv0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","cementenjoy65",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnBf60V+YIL456evGZNGCYvPPqO7ouY3+fn2a1gz/anj"},"signature":"myZHltWiD62Ppcqb9M3XohsR+xvTVPb8cAvsu731LUN92+c6UC9ZFK6AgzOM0rNXrYqrvZVrCGTiXD7yBCVF1A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qs79hg7q2afe365ut0yaruz8zrh08l4hueztv0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["cementenjoy65"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnBf60V+YIL456evGZNGCYvPPqO7ouY3+fn2a1gz/anj"},"signature":"H4DwTVkVGv0VHbFxe/Klg3tTzg36FUfOcr8gNgKBdm1eFV3NRLB1Caqn5kwOKEbhsrmk2XGFHfjx6ECoIJaCNw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qs79hg7q2afe365ut0yaruz8zrh08l4hueztv0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1576","cementenjoy65","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnBf60V+YIL456evGZNGCYvPPqO7ouY3+fn2a1gz/anj"},"signature":"mKfCSUXqp7WNyycKj8wUbFtavJ2x94glmSuSN/WA/Dt+e9fyJoqV6d0/xrkbO55j7A1FDwYaDzE32E3axkuw1A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qs79hg7q2afe365ut0yaruz8zrh08l4hueztv0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1576","1","1","g1qs79hg7q2afe365ut0yaruz8zrh08l4hueztv0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnBf60V+YIL456evGZNGCYvPPqO7ouY3+fn2a1gz/anj"},"signature":"PfEXR7yqu1/cp5bhBLBaCTpnkg74ToKiye0JW/ce+9soIuAcu5+71s36L204w20YQDvb2pphHLakcK/ReqHHQg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ac526y47tr33446y6dcgw8rfd89ca9vhe3gghl","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"gKEhC8NZpabrsOGdLKJHE48aIQEDJYReDrPVoI2v/ZYRXzvNeuY4WmqxGirMgRIwqo0SCQtjuDNZ9fnK/jimvg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ac526y47tr33446y6dcgw8rfd89ca9vhe3gghl","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","scorpioncoconut34",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhFq3+zfiPLyN+u/wojNbR1NAm2UAXZfX/xmsXoeb9Qg"},"signature":"lLY38FLMy59xdjFWYAWoha5l12PunmqJ/yeAUd8Z6I1LYoWZYlqhAtza3M2/p+CyEHHSqNntarDIj4Iz2lBhsA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ac526y47tr33446y6dcgw8rfd89ca9vhe3gghl","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["scorpioncoconut34"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhFq3+zfiPLyN+u/wojNbR1NAm2UAXZfX/xmsXoeb9Qg"},"signature":"zjNZgR4Mdn40HNenMPiJfPve0kEq8y8cpbmGeXVGnppC4IlXHc+WoyWY6PiNDToK72lkNHzTO/Kx1fKa02DPbw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ac526y47tr33446y6dcgw8rfd89ca9vhe3gghl","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1577","scorpioncoconut34","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhFq3+zfiPLyN+u/wojNbR1NAm2UAXZfX/xmsXoeb9Qg"},"signature":"srfDLveJQSPVtic2u2fetn1wwpLQHwFmMG0ruCP7ftFkib2NwsZxJnt0kvIIbDGXPGqgG4tXJr8PfijCck8DhQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ac526y47tr33446y6dcgw8rfd89ca9vhe3gghl","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1577","1","1","g1ac526y47tr33446y6dcgw8rfd89ca9vhe3gghl"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhFq3+zfiPLyN+u/wojNbR1NAm2UAXZfX/xmsXoeb9Qg"},"signature":"mf1OixW9xSPGSbt3FGCK/uU0YEI4kD4qruCDH2akgDcwCsXJGnUYV4ILfT2wfyo/3kIohs1RT9bBfKO03uVT1g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ef7lwzhwz98dprya2uuqr2z3v0etn8urayzrde","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Xj7wuTjtFJMjkHKzWTQFzXVqzb/IGOywOnsdvc9Hlwp3gjlRmu6GGQ6S42kMjxu5MSudJGmJHjpMkDfU9fanqg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ef7lwzhwz98dprya2uuqr2z3v0etn8urayzrde","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","wayhammerry",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah9EKhz+xyBrawtO7c3PO3I3B2XY8XnuKQ3Q1/gyBWW9"},"signature":"ztnqs+r39GX0bYYHcq/gXvTSlnpRpYW3qr354aF2+VkI9wVNYoBXulLpYxaK7xrw2f1DWV79FepJxr+ftEib3A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ef7lwzhwz98dprya2uuqr2z3v0etn8urayzrde","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["wayhammerry"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah9EKhz+xyBrawtO7c3PO3I3B2XY8XnuKQ3Q1/gyBWW9"},"signature":"+9bUb1T98hb1mDAPV2To5y+X9bWcfymTdVYL8848jiVpQvPMzKSPOea/ldHgNd8D5I5OYRT88F2ZjQb9/37BPQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ef7lwzhwz98dprya2uuqr2z3v0etn8urayzrde","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1578","wayhammerry","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah9EKhz+xyBrawtO7c3PO3I3B2XY8XnuKQ3Q1/gyBWW9"},"signature":"4ZuGsjTdcEdet4OVj6S02KTWgino7yLkP+u+3/EnpUpJKCmQo1rdOLnkxNJhXU4J+RseG813l6gEgxYWkq5uCQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ef7lwzhwz98dprya2uuqr2z3v0etn8urayzrde","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1578","1","1","g1ef7lwzhwz98dprya2uuqr2z3v0etn8urayzrde"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah9EKhz+xyBrawtO7c3PO3I3B2XY8XnuKQ3Q1/gyBWW9"},"signature":"HqCOOWKrvhdD0mIP5gY9LJU+gUffJ973wzL6Pm3lcrUAWNfNRMTPHP2oJ6wxC3Bkpj6MJTfHhWd+W0nKJsqOUg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14m8mzalp7x7ydx90tla2an94xe2svtn005atd9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"NFPKoZVubnxsKKXe2kRNY2pU46lKOdDk9kct9CjI8LpoOiXk+oFyGhffj9uVI9dkyqYVxmuoe57ojsevEa+Q7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14m8mzalp7x7ydx90tla2an94xe2svtn005atd9","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","domainidentifyx9",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/ZvVcTgrYBhg+wQfm79fAfkcg0NQQRw7HZXTWSTonC7"},"signature":"tNdoV/GwtNfgQk4x/JdrVqthb+g+M2amznp9jZ6dHcsE8CdNZxlv7T0SNXXOGC2N2xmOJcnxgf8RN6cB/HWCLg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14m8mzalp7x7ydx90tla2an94xe2svtn005atd9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["domainidentifyx9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/ZvVcTgrYBhg+wQfm79fAfkcg0NQQRw7HZXTWSTonC7"},"signature":"MJ7PqHA2O2WvYBOxVCTPCiYazbnwhh3feGFhyjbWnMoA0KN3j+gKqx0liwXcnhmpu19dTAqLaXETdE132c5iqA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14m8mzalp7x7ydx90tla2an94xe2svtn005atd9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1579","domainidentifyx9","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/ZvVcTgrYBhg+wQfm79fAfkcg0NQQRw7HZXTWSTonC7"},"signature":"hkLpGiB7jzNB+Ge3lDyqwUdwdP6GRn4dc4viz6IQqxN6W2eU3wMLAZE3EMBEtqUFNHBNQeltwdTuvt4mL0+EVA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14m8mzalp7x7ydx90tla2an94xe2svtn005atd9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1579","1","1","g14m8mzalp7x7ydx90tla2an94xe2svtn005atd9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/ZvVcTgrYBhg+wQfm79fAfkcg0NQQRw7HZXTWSTonC7"},"signature":"qfubTrqqOSHW1hPFNTm3WvTeVJU/+SUfD9NUL9I5WuVTZpmaJOoHUNeYuczpj1cWCA6GzilcwPVOcvi6T7DJqw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rw73gtvzcudk6zcu5c7922jw3a97hxpf9ylzwv","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"h/KjzaNOOCx6PfKBLlFR6VfI5mpLl+rOumT+n+slRdpS75ARGSs3cDDnGEchXHfNRzvSGuaVmTWwIQYsvBkGuA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rw73gtvzcudk6zcu5c7922jw3a97hxpf9ylzwv","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","islandspikezc",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5fD65azyy5buzVqlMu/FiUFy7Aaki3ukcaFCY21tNwx"},"signature":"OFmdyD3qm7cX99TThdDoqopV9ojV+d2U5KXccPTxR4ANGLrhlTqCcoSuFdnFXVYhgLwhrH/Nupoc5d8cgodAyg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rw73gtvzcudk6zcu5c7922jw3a97hxpf9ylzwv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["islandspikezc"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5fD65azyy5buzVqlMu/FiUFy7Aaki3ukcaFCY21tNwx"},"signature":"KsmD+FFZTvPnJ/o9OLFMv/8kCupzG1cfj3k7rZd2zL1qF/Q9THvIX3UywsuGOt3g8CDnDMzKg5U7PlhFHB2Nrw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rw73gtvzcudk6zcu5c7922jw3a97hxpf9ylzwv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1580","islandspikezc","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5fD65azyy5buzVqlMu/FiUFy7Aaki3ukcaFCY21tNwx"},"signature":"+yOh39Glzh5yA8DLNkFC+5nRzVD35lHx0JKOIRXKpnM0V5QjbiPKGkW4vLj2iR1D52FnW+xaP6KPMDNRmBSiGQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rw73gtvzcudk6zcu5c7922jw3a97hxpf9ylzwv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1580","1","1","g1rw73gtvzcudk6zcu5c7922jw3a97hxpf9ylzwv"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5fD65azyy5buzVqlMu/FiUFy7Aaki3ukcaFCY21tNwx"},"signature":"O5o5mFK6yDI9O+8rIre34q3wJGkKpkO9mGS+PRJ+hj5AhWlPY1bfK8oJPd0CKEMoXIT+vaztf9VXieIIM5H8yw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12rusv2y70dnl7xngqsp3hx8e7jp64nners4e5k","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"HOZJjfq5DNUelwzResBsLWhOaqE9bfkEk/DeffVGJHctl2PsJ5CHxUa+XtnRlhz7dU+50rlKvuC89Xw5W5tHDA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12rusv2y70dnl7xngqsp3hx8e7jp64nners4e5k","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","cropelevatorl7",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Agf2KWKhlKn6HvkU1tAOMtUtNyi7L+sNfR168tar+HH2"},"signature":"aZWkfH/ny+eWaCrDtF1PVtcRtKqPzf4DiAP1BydPX4A3/XoLXxl04IYN7I1gg1pUU7j2hWMlvOj8+8gPbUCLmQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12rusv2y70dnl7xngqsp3hx8e7jp64nners4e5k","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["cropelevatorl7"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Agf2KWKhlKn6HvkU1tAOMtUtNyi7L+sNfR168tar+HH2"},"signature":"pqgqjj/icOsyaW4Hry0fcZzSy1dRLtHpvpsIaop6Vn5nzyHH/UCyGAaa0mKt+mVqygbqAQP5uxVsAD/CsVDpkA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12rusv2y70dnl7xngqsp3hx8e7jp64nners4e5k","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1581","cropelevatorl7","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Agf2KWKhlKn6HvkU1tAOMtUtNyi7L+sNfR168tar+HH2"},"signature":"k3mGO4hLQ8CrFSUBqzibS13aiIZEoQy4DIZa3DVPk65rzGvTZe1heDeUdf9YZqMjU3eU1d24W0FIkrZznLOuGg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12rusv2y70dnl7xngqsp3hx8e7jp64nners4e5k","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1581","1","1","g12rusv2y70dnl7xngqsp3hx8e7jp64nners4e5k"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Agf2KWKhlKn6HvkU1tAOMtUtNyi7L+sNfR168tar+HH2"},"signature":"9gi66uzcZwml1PdMCKD60sZQezOxw068hrwGqXuieRJwcdNs9QW+pqLPp87csZL8hACchUvUDcwL1bKwBvFJBA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ekantahjkj6ngt48p3322spenwewf0ludnc8mk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"BFarGua7RZaPDmsbL9XXSBqhdXXM/LmMftHxQpbDhG1bXSuDT1otXsQ1+u8bLTegwRQY/WsqVovJqd1KZu4QwA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ekantahjkj6ngt48p3322spenwewf0ludnc8mk","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","twinindoort4",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2M1M+DHFPP+oi6E8rgn2GjVOHKkb/QniRuzZLHjwHAl"},"signature":"u/Tlp5AD0VtpTKjU92FSxlQp6oUOftCiTLZhKnNe9oNwBIeNMZtHWlWs4Tr8Ed/bF5Z1FCfMXOMqSGT/YRAocQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ekantahjkj6ngt48p3322spenwewf0ludnc8mk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["twinindoort4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2M1M+DHFPP+oi6E8rgn2GjVOHKkb/QniRuzZLHjwHAl"},"signature":"D+08HTQS1bV4V+g/yAa6JW/yZA8+Pygg2t3pr2riy8hV+6liC0TRZP1ac99Wa4ihY7oXt4APT+3Ym7ZgNav9fA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ekantahjkj6ngt48p3322spenwewf0ludnc8mk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1582","twinindoort4","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2M1M+DHFPP+oi6E8rgn2GjVOHKkb/QniRuzZLHjwHAl"},"signature":"QWt4bhXlZ4Pq+XC+ktrHpIuP/bvxYcVuSu9YDA+FFtoBKVIrCQvHBsJUT3p6CfV2y9EG0Bl+T4JHnn6iECBhTA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ekantahjkj6ngt48p3322spenwewf0ludnc8mk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1582","1","1","g1ekantahjkj6ngt48p3322spenwewf0ludnc8mk"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2M1M+DHFPP+oi6E8rgn2GjVOHKkb/QniRuzZLHjwHAl"},"signature":"LVG31f01Vz735dMVnGrV2ujWBh8s5m2pOU65BmrVdSFQxz82q1ne47f8b6iBUEg1x22sjVJ5QbUi6fq5WoC8lg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1g50twd0rqhdgqsdj6q0p3040q3aun2ln3ttmsz","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"54ytEXp+52yBQ/0OWWZo2eEchSeTj3krANtMULqaUvprhBY8CqUlhFC9WEIiMeDyTCnSo52gma6yLrNErpIJhg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g50twd0rqhdgqsdj6q0p3040q3aun2ln3ttmsz","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","extendechosd",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ajzcn9PqWntZFUAQSS+DJiWCuckF2B2s5kQTFIR5I4xf"},"signature":"0ouJ6Qn9F7kZgaYyvK4a8Rz0oo2RvKibV8vV7dZosDBYu6nhp87TxMnnwba0Mx1osDceaSLDO7S2+vLbOb29ng=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g50twd0rqhdgqsdj6q0p3040q3aun2ln3ttmsz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["extendechosd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ajzcn9PqWntZFUAQSS+DJiWCuckF2B2s5kQTFIR5I4xf"},"signature":"xUdiIxfa+CYbs8kpuSmvzYHVS1+czaSfWC07CvsN9Ac4Zi5isL1P5fDSniKLl3BRjl6qEAkv/RyIAGD/pk0a7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g50twd0rqhdgqsdj6q0p3040q3aun2ln3ttmsz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1583","extendechosd","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ajzcn9PqWntZFUAQSS+DJiWCuckF2B2s5kQTFIR5I4xf"},"signature":"5FBP/2UDrF54H4mn9qk5IbKKXSTI0H/OLdNpuRFhIOBS3XoEA2iL6k7gKwNN1eu6Q26wPJtmYY/FaFLCn4BlcA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g50twd0rqhdgqsdj6q0p3040q3aun2ln3ttmsz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1583","1","1","g1g50twd0rqhdgqsdj6q0p3040q3aun2ln3ttmsz"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ajzcn9PqWntZFUAQSS+DJiWCuckF2B2s5kQTFIR5I4xf"},"signature":"PUyLQJv5Taftzj5/QbJAxtPwWcWMFQzkHSY3FYR3VrluhaObGef8G0pnLUiKBjqBzsn3io9FqTkxPXUjLh9NvA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fjt89lut6al5h2ejaaugu3p8pxu9znz2rgd7ce","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"UsMFGzPdDtXslYJopZ8nXxlvURc3Cvum4520IaDHbLopuFP9XA80YMnHp8hYchYY5I7e4p/IErHXClmS+kow1w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fjt89lut6al5h2ejaaugu3p8pxu9znz2rgd7ce","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","silentguilt2e",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1e0NrTAPAUfyL6SRWxdiT54hp9qOHtHMpZfg4ZICmY1"},"signature":"MXahOnZXWnfXII7945XwwQRSjn6N/kdQTs3G++HvHqIrNFyFUQPnYQF7figI6mIaCz5TUqT7lWi72UcIp3+AWw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fjt89lut6al5h2ejaaugu3p8pxu9znz2rgd7ce","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["silentguilt2e"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1e0NrTAPAUfyL6SRWxdiT54hp9qOHtHMpZfg4ZICmY1"},"signature":"iHyZzPGVOmYMiMAZ/BMO8/JXcrkJyGxDQTXvtpPhbp867m/l23XuwHkk4YWWuC587WIpoiTTrJGEcLCUgr9ASg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fjt89lut6al5h2ejaaugu3p8pxu9znz2rgd7ce","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1584","silentguilt2e","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1e0NrTAPAUfyL6SRWxdiT54hp9qOHtHMpZfg4ZICmY1"},"signature":"fNfyVQLshUWJx7U3iv7U7zYiMalwzpDumyO6q/pqXgMQeJFRjFGXOrmJRc9Qo3ymQeYZ9K/EnfekxwJxq3hPOg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ka4yxgwtjgfy2kj6lycm5mll6ak3a7jc7lch5u","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Rb+g9Rk4xrr3T7ie8gyNdlbXwJnjY5p1t+FNu0HW9ugNFS+OhJA/2osq24J1FwbCJZErZ9xMhubpDgwdxvnIEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fjt89lut6al5h2ejaaugu3p8pxu9znz2rgd7ce","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1584","1","1","g1fjt89lut6al5h2ejaaugu3p8pxu9znz2rgd7ce"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1e0NrTAPAUfyL6SRWxdiT54hp9qOHtHMpZfg4ZICmY1"},"signature":"D5/OFhavq0i7vp3X5tGdsIfAneST6a3fTiSGrInniI0jar3IIpZ/+DBfs65TM1PrWj/HYArgNpfolfM5DLAz7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ka4yxgwtjgfy2kj6lycm5mll6ak3a7jc7lch5u","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","parklocky2",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax0Yp2A/2SprJK1dDscfERsQntQaG/nEXfC7x7Ow6uDx"},"signature":"PFhBFilNWNSWqLX2DZx693j+2eJYcYGqki7iLQPjUkIq80KkPwqSteEQ7u2W1+XNWYADn3RKV8I1VVGEUxOobA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ka4yxgwtjgfy2kj6lycm5mll6ak3a7jc7lch5u","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["parklocky2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax0Yp2A/2SprJK1dDscfERsQntQaG/nEXfC7x7Ow6uDx"},"signature":"CBIXd7xx4R4/3kKSL5T5Falv49dsE/Wm9Jm5U0t3H2AFZPmWsUQkCAxrhug/K3SnW9gcqX0EqqSZzxQwwhSZmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ka4yxgwtjgfy2kj6lycm5mll6ak3a7jc7lch5u","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1585","parklocky2","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax0Yp2A/2SprJK1dDscfERsQntQaG/nEXfC7x7Ow6uDx"},"signature":"tBP+gXQGer+IgZX5PvkyhvzXfSLbPYHD3WpNiyv+s3sxcNi8avvJ0hZdUPCaBc2jNZPM7ownmcGOA/Tr6k0HpA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ka4yxgwtjgfy2kj6lycm5mll6ak3a7jc7lch5u","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1585","1","1","g1ka4yxgwtjgfy2kj6lycm5mll6ak3a7jc7lch5u"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax0Yp2A/2SprJK1dDscfERsQntQaG/nEXfC7x7Ow6uDx"},"signature":"6zS289xAnSwpUjlsJSpAIVwAhBnUAkQgIiSqQGBe6MJ8Ywksa4okXTU9IgZ1L606UzCzqjKNzNs5gl1j/e2v8A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1d44970fcp38jztpwzwetp5n86g47g2aaudf0v2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"zzgA6zGRfa715C0Cnbr8OXd/lGumxTkJXLPJi3sP8ZJ0a63eDzYCa5EkYpOhDnKRjnIzH8SV/305S8kzLZxhRA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1d44970fcp38jztpwzwetp5n86g47g2aaudf0v2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","beltpulptp",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmgfRiwNakF9V81uIPDxWBSQiTJEHnbz7j9o73AW+MaZ"},"signature":"PwILRtv6TNYoXUu5Firu6tCwR2wUrY5vgTBPSHSih1dXEV44tCOHQJ9Qv8aaZGJTCrXQKzLDYlIEQSmy+eJpgg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1d44970fcp38jztpwzwetp5n86g47g2aaudf0v2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["beltpulptp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmgfRiwNakF9V81uIPDxWBSQiTJEHnbz7j9o73AW+MaZ"},"signature":"7P6RquX7La/cwnQkCOREvmyjm0b/irxeFQfLiR6UMUQuDkYIssRhdZfNi+dvfyvpO3ozP9XXtYJO1vTZwQHncA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1d44970fcp38jztpwzwetp5n86g47g2aaudf0v2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1586","beltpulptp","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmgfRiwNakF9V81uIPDxWBSQiTJEHnbz7j9o73AW+MaZ"},"signature":"t2Lb4ZbBEKHxmfc3gi6d/X2EBxOiukCyRLcYggSUrAgQUXg38OZn8FKIqF4jEjYb08rk+3tRa+PIWFXo+OM3/w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1d44970fcp38jztpwzwetp5n86g47g2aaudf0v2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1586","1","1","g1d44970fcp38jztpwzwetp5n86g47g2aaudf0v2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmgfRiwNakF9V81uIPDxWBSQiTJEHnbz7j9o73AW+MaZ"},"signature":"F6oVXtT8PW1s8vLfC7Z4Pm853sefj5hraJkyMhOZUbNQfdF1VfK29C9pL5KJz4se6UbZ/Q90NaKtX/vRQx4mGQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1r3he9hvxkdth8gjw9kxnhj857qwmdwntumjvje","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"dHDiWinEseTOMXgKAOkGNO6qcFXXaBgPexmCti6ZlRt5V+BLYQLa5nE2Qj2lqST14dlH3HRWJGJsxwDM4F1UMg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1r3he9hvxkdth8gjw9kxnhj857qwmdwntumjvje","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","crimediscovergj",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4sDms81Wt958D5kXwkp8IYvOki31MXUPBDgm+EX23kI"},"signature":"3rUs6UMenfIb+vAAbukr8xek5+zO9grPvY5Yz9lSyMJrhGkQZH9RBXg6Zi3WrWbwAb1V4KsYFB1/Jz1mLGenyw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1r3he9hvxkdth8gjw9kxnhj857qwmdwntumjvje","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["crimediscovergj"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4sDms81Wt958D5kXwkp8IYvOki31MXUPBDgm+EX23kI"},"signature":"w1LSkISEk1ihOY25SR89OnpUwHzTMwouObmbF42cnIBo2bMf1aPW7LXWHo84FYDlCH/2dDnzc+yX/WABCP7fsQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1r3he9hvxkdth8gjw9kxnhj857qwmdwntumjvje","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1587","crimediscovergj","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4sDms81Wt958D5kXwkp8IYvOki31MXUPBDgm+EX23kI"},"signature":"TGiIqq2Qd7dHoVNcjGQSoHa+f4j8lwR55s/IMqcJYess1gYyeBrS5xywDuRrFggKLz2yxyB2bDcEpWnQj2kytQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1r3he9hvxkdth8gjw9kxnhj857qwmdwntumjvje","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1587","1","1","g1r3he9hvxkdth8gjw9kxnhj857qwmdwntumjvje"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4sDms81Wt958D5kXwkp8IYvOki31MXUPBDgm+EX23kI"},"signature":"M2m7TLbk3SNsjSbQ9Rd/jF0u/0BqXLP8tldCaCB7yQdhBzpvKbaWjbDgZLggvidm2I2TPnJA9DZbcWKqqfgq2g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1tlrasgmvvfxrgfuf87cugq3aqvzvdqv3sjuqgl","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"NS75N+6jOqroAlVq7wepbR+62A4JIeKylp4Rcwa1B/5xvAx339JWVGupL+rPSxungU9Ket63tbuhjdwL48+QMA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tlrasgmvvfxrgfuf87cugq3aqvzvdqv3sjuqgl","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","linkminorrg",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Anhu1pczlBqxgQUG5D3rPaRLr1CRJxE2FIriLtOF8WR2"},"signature":"dPH8oNiFiWmNFizEyI73OFDxEKwYZtJTT584w5vAA+s/8Y+cHlQqPgQrSdroTvPv3GRa6i6yiTeBob8gupDh2A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tlrasgmvvfxrgfuf87cugq3aqvzvdqv3sjuqgl","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["linkminorrg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Anhu1pczlBqxgQUG5D3rPaRLr1CRJxE2FIriLtOF8WR2"},"signature":"mISghwv8bKkcesVGPu0EVaErfaj0QxPWLwwyFnBQIrB1tmUz4gUBqMTSTF9QSkPCk/xUL51+zo5JO/9dCEGZiA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tlrasgmvvfxrgfuf87cugq3aqvzvdqv3sjuqgl","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1588","linkminorrg","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Anhu1pczlBqxgQUG5D3rPaRLr1CRJxE2FIriLtOF8WR2"},"signature":"9j6J8lS0sHUSMMUhZ9PTtlzDwsqq51fWzmRyMZmNpB0u0OxCtt3FibL6fhK3+GtEDrIsi8ktgbrNqxkOhnrtKg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tlrasgmvvfxrgfuf87cugq3aqvzvdqv3sjuqgl","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1588","1","1","g1tlrasgmvvfxrgfuf87cugq3aqvzvdqv3sjuqgl"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Anhu1pczlBqxgQUG5D3rPaRLr1CRJxE2FIriLtOF8WR2"},"signature":"UxLxxZ3AF+moTXxID39QRrMhbqlWsQ+0HfFY+pwZ7dh2UKsy2fgeG/b0gMwkwx/yo6aNV3Dw9Uijk6pdfwmfFA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g196kxky6cs6my295s7p487ncavkcrks7nvtg79t","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"n+ENxoYr7n42BLbxCIJsreWT3PfNvSkHrBHYMqW+h4Bc/d1KT0TJYfImzamh7MTtTJ9jOuzhRNdplvrWYIe7FQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g196kxky6cs6my295s7p487ncavkcrks7nvtg79t","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","loungefrost95",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzMQTRihE84kB8Q3VtNHkdC4ljaW207xZ6Y+84az0iG4"},"signature":"gykhgGNDwG4nAJJL8qI1y74bV42rgZVOwg2Vhot1OUk8EGcZ6mgIA2a6c/yMVdWoFoECOhthURtD5b6uORbr2w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g196kxky6cs6my295s7p487ncavkcrks7nvtg79t","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["loungefrost95"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzMQTRihE84kB8Q3VtNHkdC4ljaW207xZ6Y+84az0iG4"},"signature":"sxjDu+5OzRxRd4kSKBh562qFfrsdWdQE1t6ZESrtrndAPsrxkWuUA2x3WGRE9aGIJE80ObPO2GTad45/rQYTag=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g196kxky6cs6my295s7p487ncavkcrks7nvtg79t","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1589","loungefrost95","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzMQTRihE84kB8Q3VtNHkdC4ljaW207xZ6Y+84az0iG4"},"signature":"a1xHh4Fa784CX2982mlVN8D9R67NkuzDMwByieEJ8XA91f+sJrm1T7p5j2wdc2xC91GKM8Q7BfTTipzvm24QXw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g196kxky6cs6my295s7p487ncavkcrks7nvtg79t","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1589","1","1","g196kxky6cs6my295s7p487ncavkcrks7nvtg79t"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzMQTRihE84kB8Q3VtNHkdC4ljaW207xZ6Y+84az0iG4"},"signature":"xwj9VR/CWPnZdk5w2IhQJ3dzlZ/j22Sjnm/dq4TS9ko2Q80eUpQ8WXFr2ZyGsp0vzw+hp647/5GtRvPji4VTcw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g10hekmqnle0yndzkm9zjtzz3xfwu3d2nn56l564","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"H8EGfjLkicviV1cY5L/g4zgeJyXF2CSiBwITM4NwOk9GbQ5CJBG15f//Ab6QyNRWSZvVYxqaP0JQrelx6RqZKg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10hekmqnle0yndzkm9zjtzz3xfwu3d2nn56l564","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","volcanoreunionzk",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvM4y+VPMl//yfOym6HUwE/iT31NvB1jb05X+IaKVd0j"},"signature":"JofFdKg08COq2McR+At3ScUOQOW3YZYna5laJM/bAEpkPSZaOIDtAz+iBMvllb+9IBvG31k+ukNPJTEoV6E7VA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10hekmqnle0yndzkm9zjtzz3xfwu3d2nn56l564","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["volcanoreunionzk"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvM4y+VPMl//yfOym6HUwE/iT31NvB1jb05X+IaKVd0j"},"signature":"ylHs58Ia4kEHx5z2AvJX9nQy4VOXQvYXCTZDOjsm2LwBCHqGxMY2eMWiTT+3W+V1/C64mHIhKNBmklKUBHFY6A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10hekmqnle0yndzkm9zjtzz3xfwu3d2nn56l564","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1590","volcanoreunionzk","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvM4y+VPMl//yfOym6HUwE/iT31NvB1jb05X+IaKVd0j"},"signature":"gcvQH3CVm3UAtLBaZm4MZENFuzkLJ2AXs0gBz5lAB1h8WqsYovRrcvZ4Y/sBFCthRHo+fC/21u1Zi34S7vz3rQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10hekmqnle0yndzkm9zjtzz3xfwu3d2nn56l564","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1590","1","1","g10hekmqnle0yndzkm9zjtzz3xfwu3d2nn56l564"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvM4y+VPMl//yfOym6HUwE/iT31NvB1jb05X+IaKVd0j"},"signature":"wHW6jtZMshK0w5R91l5ZBIbaWilcU968in/auJdWFMICIHa7rDrIuUOqfIEnOw+EbgP2TxI0EOL8X7Oer2OjMQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1enntqqql8ew5sfxkz20je4zn6syjdxvpx7fct6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"VSxAuaLG/Bhk+vgtfO8orrHp26nV7uC55KnlmcalHqFOw6CcpkmYS/UWjQcifUXRR40tco/iKWiNI1CXbeaiLA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1enntqqql8ew5sfxkz20je4zn6syjdxvpx7fct6","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","tracksoulfx",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ak+rT/Omada4rMs4fKEWWNt0+NBRSiPw+GEWGc2/3jp6"},"signature":"NpqvlF9Lt/FI7lqTqlNb8b2jmKZamrB7HMqPw98/YXtRdQfpUk5gaXI+CPG2gmp+8uCx0nHcqjCsb9B9rBEfFw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1enntqqql8ew5sfxkz20je4zn6syjdxvpx7fct6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["tracksoulfx"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ak+rT/Omada4rMs4fKEWWNt0+NBRSiPw+GEWGc2/3jp6"},"signature":"nZV5zNT57s9Vek8I94/BgGpZumZrMBGNoDvs+gMDJOExK6zBH6vCn6mJJgM95lp7J9AeZwJJXqlgeKva5cg8dw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1enntqqql8ew5sfxkz20je4zn6syjdxvpx7fct6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1591","tracksoulfx","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ak+rT/Omada4rMs4fKEWWNt0+NBRSiPw+GEWGc2/3jp6"},"signature":"mDiljSG5Q5pO6uILOusWY2qbisSK5UIEzKUvUhc0AwxuA0NbwdH9PCpolbdc3DEgzDONROR1JZhMRRte0kucPg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1enntqqql8ew5sfxkz20je4zn6syjdxvpx7fct6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1591","1","1","g1enntqqql8ew5sfxkz20je4zn6syjdxvpx7fct6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ak+rT/Omada4rMs4fKEWWNt0+NBRSiPw+GEWGc2/3jp6"},"signature":"wiGerwbon9e8nEitoFPVz9zMF4bF64C780i/+cTzJG4RG+ziMChDbUsF4nTgUDYOAg52ZZpX3CujgKHwjZjrmQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17yghlhtqnhmxjalgcuep5f39chek2gaangnwhx","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"1dJY7n5n9y0fLPmOieHxxl4k+WUKQA8YRiw79UbJx7tn/ydJgmvMl8Qv3+TwP4TgmdyV+b54w9cr6G46rpb+mQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17yghlhtqnhmxjalgcuep5f39chek2gaangnwhx","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","tuberetreatxj",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkIFfggSQp/26ZuJQUWNFl8DMV06vAvtx1t36zA+bMzy"},"signature":"pfQb79n0bPyERazL17Fa/zEF0pJHHM+io6jFW/44r1BX5Z6di+NYgJHy+lf8TnV1t6tHodyShMVcAxZm+7mSRw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17yghlhtqnhmxjalgcuep5f39chek2gaangnwhx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["tuberetreatxj"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkIFfggSQp/26ZuJQUWNFl8DMV06vAvtx1t36zA+bMzy"},"signature":"bKkJLsekA9gaYJKYZb4+909Ag19JlgWEj4j2aeb3jP51kofYjlQAxWJAy5zptuYHo6hTMqtevxKpqDLGuVng9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17yghlhtqnhmxjalgcuep5f39chek2gaangnwhx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1592","tuberetreatxj","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkIFfggSQp/26ZuJQUWNFl8DMV06vAvtx1t36zA+bMzy"},"signature":"F2aeOWSvsrdIAkiP5vVmtdNeNf0MD0mW+faqeK0BEhNRSD6aOLz/E+BkFfXZ4qspwua0zuvVWYvwrxEegkaA4A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17yghlhtqnhmxjalgcuep5f39chek2gaangnwhx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1592","1","1","g17yghlhtqnhmxjalgcuep5f39chek2gaangnwhx"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkIFfggSQp/26ZuJQUWNFl8DMV06vAvtx1t36zA+bMzy"},"signature":"RCwwbwtmJP3368z3yCF0dcjTC8xH4hq+3D1lJFzFCrtH6T58AWWEAU2IT08/kPypdhKr54pORuK/GzPIcgTBiw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1u4g0ls4wqucyrj9qzg27wpehazycpu53gmrtnz","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"o+C1DoCjVZ+fIuSGMEvlrlcpvaVxCwdIPC2OTVyWzrpdDwaYUwQKTEgZ/CooP8ZrqyJ7qRBWpVD+52ZUal9xiQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u4g0ls4wqucyrj9qzg27wpehazycpu53gmrtnz","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","roadfaintj9",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aw52KQ1y4ea5sL1DZuH5D+/sRKnqouZVh1k9dEoY+3aS"},"signature":"eSZaSzoR5Uh9uvdKSHIqZJgVsUVsgXExEaPrLkMf1wktMFebAwi8ch8zQQnaAY5xJysgLcK3ssahTFbNpp7jsA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u4g0ls4wqucyrj9qzg27wpehazycpu53gmrtnz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["roadfaintj9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aw52KQ1y4ea5sL1DZuH5D+/sRKnqouZVh1k9dEoY+3aS"},"signature":"tiCdu6sY10v0vC0amIpwxk+hEutNku7M8BS3FZ26uo1VZFauj910rIok7B30fVoai/XS5YEF4N2MbmOFBKi6FQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u4g0ls4wqucyrj9qzg27wpehazycpu53gmrtnz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1593","roadfaintj9","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aw52KQ1y4ea5sL1DZuH5D+/sRKnqouZVh1k9dEoY+3aS"},"signature":"FtKgB6JNROnS46mvdcF9ma66k5eYq/3F1UfAmt5keXRJlZU40VA4le6h9wct11MDRb0wGcsqYFsfxQmvBGiXcA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u4g0ls4wqucyrj9qzg27wpehazycpu53gmrtnz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1593","1","1","g1u4g0ls4wqucyrj9qzg27wpehazycpu53gmrtnz"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aw52KQ1y4ea5sL1DZuH5D+/sRKnqouZVh1k9dEoY+3aS"},"signature":"oi8D9J83LGa62fJeqWbNAUVGFtFlQN9Zni4DQRvwKSFPgdgKnZteedTTioGoKYmFR47jzNA4RFJQgu9weKd/uQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1e3mu25nmdpd6a4zn3xtautalw9j609sxg877ck","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"m/cTmE51tpt23MbaobJ2fw+gKZezwHRPhIYGVhJnXfpKzEag40+nae31Sgt1mDW9CWEA7cNC5y/qa/Ul0LEGQg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e3mu25nmdpd6a4zn3xtautalw9j609sxg877ck","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","fuelfloor4z",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An07rFNV9qT7v8Lgd86UjL1DPWvsX5RR5JboBU9Qe5eC"},"signature":"DNm+XJKGWJMAHODvxHfa/MEFvxGttQkfqr8PQV+RJAxspXoSM0ZDYhz6TniHffPxLUBPz3KeTuukX7CGBjiSLw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e3mu25nmdpd6a4zn3xtautalw9j609sxg877ck","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["fuelfloor4z"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An07rFNV9qT7v8Lgd86UjL1DPWvsX5RR5JboBU9Qe5eC"},"signature":"xKT++8SQ3ZfUL/hgyRHU/ds0ZHPAQdPzv/3KHM9DCWAAcFBrsADuKvmZnkVZR5ENY5oS+KDulRXL+Uia310jDg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e3mu25nmdpd6a4zn3xtautalw9j609sxg877ck","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1594","fuelfloor4z","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An07rFNV9qT7v8Lgd86UjL1DPWvsX5RR5JboBU9Qe5eC"},"signature":"w4LAdZtCOHcyX3xvnF1vm8qP6SghkyCq0USxqfpYfBtj7x0lv3Z3UVfHpy/4D8J8+qQkeFia7AWnzWvzzoMGHw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e3mu25nmdpd6a4zn3xtautalw9j609sxg877ck","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1594","1","1","g1e3mu25nmdpd6a4zn3xtautalw9j609sxg877ck"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An07rFNV9qT7v8Lgd86UjL1DPWvsX5RR5JboBU9Qe5eC"},"signature":"AHRzlmF/wJbjTIv5LhWHR/L0KAAzZIKdhTDBF0RBOE5DUAKVXUNJDRD+Z3GSlKJjX+mp9YsGCbdN76rcg1ly2w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1na75zmrw3nx8dl7mk0p7hntnj96kmn3mn9dht5","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"f7X4rCmOgyXPTPI8W7yTkCYgczDLijndrPiBDO1RKyZlZDee1YsKxxfRyjgWMxQKgGVxIsAfqqsjcZ5VxtP/tw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1na75zmrw3nx8dl7mk0p7hntnj96kmn3mn9dht5","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","spenddecreasel7",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsevkcrjwNa/5TJLNHcGw1Cp5e3On4yOunkOE02dLVWE"},"signature":"gyUWhBiAfzF/mrSYmV8utJJEgLRaMafjCswdE6LETxxg9MHfVYde9/HabybP9KFTFdZXVTPi8BGy5EL8jetd8w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1na75zmrw3nx8dl7mk0p7hntnj96kmn3mn9dht5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["spenddecreasel7"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsevkcrjwNa/5TJLNHcGw1Cp5e3On4yOunkOE02dLVWE"},"signature":"d63Xeg02NSsokZdhQBVWvXkFgmPWnrnzZ73PlB0CQnwtx1k0MsHc+CZoKcnWUOXiq5L9boanWPljOouz0GEThA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1na75zmrw3nx8dl7mk0p7hntnj96kmn3mn9dht5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1595","spenddecreasel7","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsevkcrjwNa/5TJLNHcGw1Cp5e3On4yOunkOE02dLVWE"},"signature":"PW1Hb+wQrMecpWir3u7hNxd/zinhfkEGSyZ+UF8JbqoWdGIXbT9jYHJfxBumFD0/hpaOVZBHJ8ECn4jhgoVb2Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1na75zmrw3nx8dl7mk0p7hntnj96kmn3mn9dht5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1595","1","1","g1na75zmrw3nx8dl7mk0p7hntnj96kmn3mn9dht5"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsevkcrjwNa/5TJLNHcGw1Cp5e3On4yOunkOE02dLVWE"},"signature":"BHr3+giqTIHt/uGrMOb59HPOMdMj7hvQh8q+YwuqWzANihCT7q+2794Se8UlkifrIDNS+uxLvcrQ+LiRapWZWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g169x8przs2nadvnnuz8p05200swptpcune4x7ar","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"so5kJ2vTYeRczOM2tDECUzkFZYkEImHs3MScVL+yaudo70DT+/uWbInZxWvEwg/gvNePHGUXq2AWvQ3tq/IGDQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g169x8przs2nadvnnuz8p05200swptpcune4x7ar","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","outermixdv",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApP7tpn384AFcdBp2WnLtEgQ/3TLNCvRDqhEROvBrNzB"},"signature":"MhOlDyeckf02q/YX9k5ec+SLsBaAFGQ+USgmH1FPyn92sA0w3EeJRd2udZNNpkmR5WJty51bss2zcBwbtDUDUQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g169x8przs2nadvnnuz8p05200swptpcune4x7ar","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["outermixdv"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApP7tpn384AFcdBp2WnLtEgQ/3TLNCvRDqhEROvBrNzB"},"signature":"mWjK7b7aOvGHuxQxH7hB2JQ7wIJnVCbvMyJTXR0+uE43oRjzX2JWCcdtr5GOk2ixfxWubUFb+3EJWXmTpnDVJA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g169x8przs2nadvnnuz8p05200swptpcune4x7ar","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1596","outermixdv","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApP7tpn384AFcdBp2WnLtEgQ/3TLNCvRDqhEROvBrNzB"},"signature":"OldmPIhUQKnsT6LAuX6fFCZK2E0t/3Op693SvVD71mBXJJg+j/5fpAiYxCgOV5ZSU4YLvpP9m8jza0UbC7xSmQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g169x8przs2nadvnnuz8p05200swptpcune4x7ar","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1596","1","1","g169x8przs2nadvnnuz8p05200swptpcune4x7ar"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApP7tpn384AFcdBp2WnLtEgQ/3TLNCvRDqhEROvBrNzB"},"signature":"P9JUxKt6Sicq51YDTJ49bZF4DNjDMVtka4ItxBl6vJBMBaE7G3i0FDBnlX1BFZDgZ8eKsmWa3TGmyJ4uI9IidQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12m7sqeymezkegflwxmmc24lvsme8faya2pq4cp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"yiM5Xm37dm9m9kra7um7+iuqBe8RbdYmCDuDm0FKkWREdL+DxE8rqoLzfJxehkxYf7AARuF6A0vlF1NsPAyoLQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12m7sqeymezkegflwxmmc24lvsme8faya2pq4cp","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","amusedvintagefl",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmgqPKxT7JKTWnlTl3Q+5U1H8g1eMS5FhjZ6ft/2wJ5Q"},"signature":"nVCWsdrQpBOqivlA1jHzZ++oM9Q9JOpB2xUD639XtK8WOr/TNeYYO8O9mPVY5PRInSgTnGTKDGsrEUFGAquSQw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12m7sqeymezkegflwxmmc24lvsme8faya2pq4cp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["amusedvintagefl"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmgqPKxT7JKTWnlTl3Q+5U1H8g1eMS5FhjZ6ft/2wJ5Q"},"signature":"Slk9uxB9mXpIMaQBzEqatWil45NIG37leMl7NjkFggIsx44pX5ED5v7EIdba8yfJMmXVslscWcs4wFiKDREzMg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12m7sqeymezkegflwxmmc24lvsme8faya2pq4cp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1597","amusedvintagefl","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmgqPKxT7JKTWnlTl3Q+5U1H8g1eMS5FhjZ6ft/2wJ5Q"},"signature":"wiRaIW9wqQHM/JY3kR6ouGg9HdvzOjU1gy0uWhdWyzh9Ixe6TfcFD4SBdGbeu0byzDdNfVgwfp/lfloS0IXYnQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12m7sqeymezkegflwxmmc24lvsme8faya2pq4cp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1597","1","1","g12m7sqeymezkegflwxmmc24lvsme8faya2pq4cp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmgqPKxT7JKTWnlTl3Q+5U1H8g1eMS5FhjZ6ft/2wJ5Q"},"signature":"PfksrCxEfSZkPxeC92lkjviyHqVarpGNJNawbfhYxk1GPta/4/u1HCimuIuxGtVPgqCuUjQD2dpn68x9aVsByQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1na20eq4nju0uum9spwfcpesnqacjdl2esy8lrz","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"u4t9pDSkxpB8CJQWokpODVsYyxi+525d0f4Koq0Ms30fSq5+YhlcEzup6s1y5z4YFLK59NkXkO+Vd7hfUxpzrA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1na20eq4nju0uum9spwfcpesnqacjdl2esy8lrz","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","needdovem9",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8oJU4fqRZWyC/F16lJL5q4yCQjgC8/CnkMxaV43yaLM"},"signature":"1TIX3NzofEvVvdmhxuiLUnlT/NVpkcBA5tzO5qr/NRIhPyjncdHjFDnigxYqzBnpZSMNeEzGJR5kPB3WFFnvgg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1na20eq4nju0uum9spwfcpesnqacjdl2esy8lrz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["needdovem9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8oJU4fqRZWyC/F16lJL5q4yCQjgC8/CnkMxaV43yaLM"},"signature":"DTXvnaMcu/sj8p0vCIIjUMYxi8GbuEMKVlg69Z+So2IIRatrNaAtdnoxHb7aCOwJBH3WrhwT/BRFS8VHIguTWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1na20eq4nju0uum9spwfcpesnqacjdl2esy8lrz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1598","needdovem9","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8oJU4fqRZWyC/F16lJL5q4yCQjgC8/CnkMxaV43yaLM"},"signature":"Nu0W6j/BclisCHSGJ2RIgeP2w4dD4/nnEEvlfn2BILhKEuXAQTsF3ca+KZn9j96TVwBHyJP9o3jhdsKf0D4TDw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1na20eq4nju0uum9spwfcpesnqacjdl2esy8lrz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1598","1","1","g1na20eq4nju0uum9spwfcpesnqacjdl2esy8lrz"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8oJU4fqRZWyC/F16lJL5q4yCQjgC8/CnkMxaV43yaLM"},"signature":"NPDlcnyG8wRSrIGr+mGNjzBX8QFgNhszwGkZAfBsAnhecm7z9GCqQO0bMTOE90qUeYK9fpyCyQICvm9Z4bsVQQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1d7x4huwrrktw7a4ae4le5hjs398amlugz2hhf6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"fP9v8H4HICB7B1YMLZHijEqQufOLr2WQV6pLgrkpjP5KYAf3+HdVVtDQm2yeaeXUq43dGlgiyN3jRaPhgDNFmQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1d7x4huwrrktw7a4ae4le5hjs398amlugz2hhf6","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","todayartworkw7",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqbYqNxffx8Sb1mJIJy31x03OtjCb4IvsIyid6cyJcX+"},"signature":"UaRibVIySrSQuDmUTkh9QV2l39wX8dB3sIue1Kk3vno0X0ZLVwNSZWE9BL3bBmn80gZXvxf0+JHt/2fBHv1cqw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1d7x4huwrrktw7a4ae4le5hjs398amlugz2hhf6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["todayartworkw7"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqbYqNxffx8Sb1mJIJy31x03OtjCb4IvsIyid6cyJcX+"},"signature":"PMHtTJY87UpaX0U+Lga/WENGg+k366M/t6yqT67iGqcfwqzlo3z5ASF8474F/SH5o2nQFq1iZiUMUYv5bqDp9A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1d7x4huwrrktw7a4ae4le5hjs398amlugz2hhf6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1599","todayartworkw7","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqbYqNxffx8Sb1mJIJy31x03OtjCb4IvsIyid6cyJcX+"},"signature":"b6RAddnzqDUa29WkAHzjxWdlWC16au6oiaFyy58+ZtlStUNYganKuq/+BXsriXTqJhU9lRfiY+nIeCxdj0Erag=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1q6rkkgnmaav60np6hlc33sdte4xec8tgk2fhct","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"9+Bwz4rzIk7FeY9WijBufDVAjC+6LlXGjwkgug8hQKcN3s8MYDmL3PQXqSl8c2KHeMLPTfUpnOI7fJX+dzAAXQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1d7x4huwrrktw7a4ae4le5hjs398amlugz2hhf6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1599","1","1","g1d7x4huwrrktw7a4ae4le5hjs398amlugz2hhf6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqbYqNxffx8Sb1mJIJy31x03OtjCb4IvsIyid6cyJcX+"},"signature":"RxKrDanOP9ILnhELqcR8+3UIhov9N9/U6GY7lWp/ndweR5FJB4kDRKNyEI7OVrMhXJNrOlMz/fEl0vZRlHvs0Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q6rkkgnmaav60np6hlc33sdte4xec8tgk2fhct","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","wheatchucklenp",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoL0br19WqQrE6VC+5rLyxLGrMWOxMjNzUrmUXeoPT5k"},"signature":"4xMG3rO77hajw9NWiihJ0JgWALExA+NfpQIwoObrR1Z6NnXtzHgWGYM2NyYBoHs4Rdh4yQpEcQLtEbNLC1jKWg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q6rkkgnmaav60np6hlc33sdte4xec8tgk2fhct","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["wheatchucklenp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoL0br19WqQrE6VC+5rLyxLGrMWOxMjNzUrmUXeoPT5k"},"signature":"pZitypeFrukqLGUM3UFsXYX98FUX44GFDCI9zP6uCP8+PIXzMr5/0q/GIiRPjjOGLot6w8n+5Ab4s16CLMHAAg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q6rkkgnmaav60np6hlc33sdte4xec8tgk2fhct","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1600","wheatchucklenp","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoL0br19WqQrE6VC+5rLyxLGrMWOxMjNzUrmUXeoPT5k"},"signature":"Nb90frAtRo02n2HvJ0oYDlmv31GD9VDdjgYsV1sc9GkzWEnni4E9tjH23p3o0bg+6Bv/UXVl3L9b4p6sMhd9Sw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q6rkkgnmaav60np6hlc33sdte4xec8tgk2fhct","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1600","1","1","g1q6rkkgnmaav60np6hlc33sdte4xec8tgk2fhct"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoL0br19WqQrE6VC+5rLyxLGrMWOxMjNzUrmUXeoPT5k"},"signature":"YZ6FewZ9jqjVScdjYC11tEmhxoypujkUOAPwh1PJJPEJr4gpcDOaDvmaDjRzXyrbM0MiBCyEELU0aeOTG2FIrg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14n3qkleaqhtyagvnswujyxv8rjtjcp2qedls4c","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"5mBlxfuhqQy51xl20Af1BL6zJ7m8ZGsFg6fYjyiCHIFlcWCK+t3i3aT3XX06AK5fB9wHsVi4zqn7aeuEQKxd5g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14n3qkleaqhtyagvnswujyxv8rjtjcp2qedls4c","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","punchpupilgv",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4l+W8WdgRy+kpWJWbHZj+gxAbCI8I7LOiTFZAQT0d+5"},"signature":"jWL3tyhp3lJYHunfpZhQGQN7Rte1iEjYC3Egj4jHAuB50h8ElAW+5bhnmTQTLT3d89lwBCbKJtPjva1AW0XkUg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14n3qkleaqhtyagvnswujyxv8rjtjcp2qedls4c","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["punchpupilgv"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4l+W8WdgRy+kpWJWbHZj+gxAbCI8I7LOiTFZAQT0d+5"},"signature":"ShOAzKna1Z/ZMbm4wkPDoDdWZi82jVXkqIzxoMyn7HIwc8oOVFyK7x2V+pWkUA2KdTiwQfhMtYJs8wS+gvPLjQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14n3qkleaqhtyagvnswujyxv8rjtjcp2qedls4c","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1601","punchpupilgv","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4l+W8WdgRy+kpWJWbHZj+gxAbCI8I7LOiTFZAQT0d+5"},"signature":"Vz7KekLmp0SKH+uDlz+BGwnONybHFBuQEgyDg0pxvMchqs3Bw2VhS9PaE84fM5IgRjoRnTSjzZJRnoG0vuzRQw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14n3qkleaqhtyagvnswujyxv8rjtjcp2qedls4c","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1601","1","1","g14n3qkleaqhtyagvnswujyxv8rjtjcp2qedls4c"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4l+W8WdgRy+kpWJWbHZj+gxAbCI8I7LOiTFZAQT0d+5"},"signature":"pxtL9ceDhHwVFcIsHnlf8OkTZV5ccRTTkzdeP2ZB+awt1hjImcQazINAJbwQwCWctP6fPHC5wqBdxagpGGYvOA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1eftqwze6023f7tkleadaj4nzqkz99j6ac5afkt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"krvkxFPiB2FzIAbbyZY8UzKA7Ws86sXzucrBvrUHz8ZwDJ5Ka2qq4XAIiwwntacnfBnLlI8NV7imJknWkbB2xA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1eftqwze6023f7tkleadaj4nzqkz99j6ac5afkt","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","cousinsametk",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A50rkjSoVC0j5LtUxBmbu0SbDLWMSX3NbeqhnNy3mk9Y"},"signature":"8zgn02fsjWs6ZE7CqMkMgnMTw3RDe/TAQyjA0gMJCeMDDSCl0JeOhZFoq8vLUykiX0smmWe9/Iy8aGgt1exW2w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1eftqwze6023f7tkleadaj4nzqkz99j6ac5afkt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["cousinsametk"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A50rkjSoVC0j5LtUxBmbu0SbDLWMSX3NbeqhnNy3mk9Y"},"signature":"15AeqEu5yLMclAW7IegvRAxGW1Bgk7DdG/iMBvUFVo1X/4/GfyBKsbWL59XXDJ90uBGrtFW+P+/7nlEXZPRsaA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1eftqwze6023f7tkleadaj4nzqkz99j6ac5afkt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1602","cousinsametk","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A50rkjSoVC0j5LtUxBmbu0SbDLWMSX3NbeqhnNy3mk9Y"},"signature":"/G+CG8X0TF0+HMCfq13uvG0m5lYmA8NLnlcmmjPa4rRXYLOGP24Yc0FaxzxNo/GTENivKhAJFOsnX9q/1cBYLw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1eftqwze6023f7tkleadaj4nzqkz99j6ac5afkt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1602","1","1","g1eftqwze6023f7tkleadaj4nzqkz99j6ac5afkt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A50rkjSoVC0j5LtUxBmbu0SbDLWMSX3NbeqhnNy3mk9Y"},"signature":"vK9VqFKCg3ZEXklKOWlLfcBdTdie9s7b+bHEUjZPxO4GB6NWCD3AKAlDQnRYnYzIuMcbLlC31ZkHV0UdAfROeA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1j6u7hdcdkdnf20k3uvh4933cfx59y98utl9n9g","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"/HgmkzsWNrSfA/KfCwuAGdEDfxcr3AeFfRWcHNFTeDd+mb+l/DGAScgdE5XZi2RztU8rj3hQ0MZrjxTEb5wwKw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j6u7hdcdkdnf20k3uvh4933cfx59y98utl9n9g","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","pointgloryf2",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4FUL9q95wfVHBUfcTUI4mRLO++C7kvba+7YjaS227ZE"},"signature":"QEWQY34MGnKJtS6uRHF0X4eZFPcfxADb09Wkq74pkMpgsRdZL+mlPN2joKxJFy/TNojwJHhk1nGaZ+A5fCh4Jg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j6u7hdcdkdnf20k3uvh4933cfx59y98utl9n9g","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["pointgloryf2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4FUL9q95wfVHBUfcTUI4mRLO++C7kvba+7YjaS227ZE"},"signature":"j5QcDHuES9BlDBZjrT/Cy+5E9rReRPtov+Sul7zk8jQhuqeccqPl8rpVo3MuVEmun+KL6na0Sm7dS21qSpatoQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j6u7hdcdkdnf20k3uvh4933cfx59y98utl9n9g","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1603","pointgloryf2","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4FUL9q95wfVHBUfcTUI4mRLO++C7kvba+7YjaS227ZE"},"signature":"s5spGN1dEDx2y8Rs2qM4ag8rEM3EztEJUXvYTDEnxrNiqSbgRQvuZ5fEUGUCu79hI9FkkB/HDZ/rxid9RL3E7Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j6u7hdcdkdnf20k3uvh4933cfx59y98utl9n9g","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1603","1","1","g1j6u7hdcdkdnf20k3uvh4933cfx59y98utl9n9g"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4FUL9q95wfVHBUfcTUI4mRLO++C7kvba+7YjaS227ZE"},"signature":"Gh5c69MvwOhel+Th/OluY28qnzUOljtJDAiFq4LHpRwue0nvfqsIEIloMq0iTqy1+f/Vxjrh55xz7s7cIDTtiA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1w4y6mareurf4whdq37d708gmm4dmfhklnj07h7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"YzcA4PlsujMHxHayFMUD7rB+JGiaLOy2eiEQivs7ricWi83+8Gxw0AbrkuPpe0aIg522/aO2FY+vGxJWYRkXpg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1w4y6mareurf4whdq37d708gmm4dmfhklnj07h7","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","awkwardsiblinghd",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AouoxLHFE2wnjuLpUjF4iCTY24iMG+S4xfTkg+Ysl72+"},"signature":"pLbwkW2/k9dersYH+YIrhpnzhtf85QYowRPdL6uwfGZKrM7ajJ0X9NXgMIhRuqGIT7yjJyW6vxor5wua5r2Luw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1w4y6mareurf4whdq37d708gmm4dmfhklnj07h7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["awkwardsiblinghd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AouoxLHFE2wnjuLpUjF4iCTY24iMG+S4xfTkg+Ysl72+"},"signature":"Zqr/z9BOPX5vobC4x/NT0DxKHOdorVkqIP5AQV0508BzW+c8B6/6K7f5nMH3UXJs8Pm9nDERrglCV777ifYumA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1w4y6mareurf4whdq37d708gmm4dmfhklnj07h7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1604","awkwardsiblinghd","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AouoxLHFE2wnjuLpUjF4iCTY24iMG+S4xfTkg+Ysl72+"},"signature":"7OCqJBYJkv+iUpGTNozl8RlZ5wytme/MT7kD2MDsW0RDQkjfGYq9ON3SMH91jVyAjCPYO5V+0DIr3fDGlmu2bg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1w4y6mareurf4whdq37d708gmm4dmfhklnj07h7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1604","1","1","g1w4y6mareurf4whdq37d708gmm4dmfhklnj07h7"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AouoxLHFE2wnjuLpUjF4iCTY24iMG+S4xfTkg+Ysl72+"},"signature":"wekvmrmdb5dkdNsX5UjUjgtiql73gPwYxsuQKo46uyESFl2zzViSFPpEWzuXcSOh8TSlBTa5Y12Rd0ipEHAkIA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1q33p649u8ruqmyrth2wlmy2p3qwd5s8lv98zrd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"L6BUSqum2s6l++Xn1x7kR7ZkAKrO/aA+Lgqozn/53u5O0AQ9KzHawQPxLCcGMMMkiuW30KP3WuX4MX/LndhDSQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q33p649u8ruqmyrth2wlmy2p3qwd5s8lv98zrd","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","learnmanualyr",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AweTy8SRwIlmztqOO/v3kajiQLlbS23E7wqQWy1ASDfx"},"signature":"m75TosLiOgD0W6AbPGCSPdcA/FgSM0G998PqhccRQ7hnvjb9PcmchnMdm5q1LaTdYEIcn3a/HQM3UHjWIto3HQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q33p649u8ruqmyrth2wlmy2p3qwd5s8lv98zrd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["learnmanualyr"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AweTy8SRwIlmztqOO/v3kajiQLlbS23E7wqQWy1ASDfx"},"signature":"KsIx9RPrJMd2xg1y/nk3qP+BLMgbIJ7inJ0og2H0lYhBBygbiK0BuOWA3j+/jo76hT4/8AAVfNz0mc+gM3GZdg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q33p649u8ruqmyrth2wlmy2p3qwd5s8lv98zrd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1605","learnmanualyr","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AweTy8SRwIlmztqOO/v3kajiQLlbS23E7wqQWy1ASDfx"},"signature":"n0eJlO1I/ia+87vuto6QNY0zaxR7LlpHFt+Z/sTajwtSVrFsE+76lAkKiCGM4P4eXymqudjkdoliei7IJ0YJjQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q33p649u8ruqmyrth2wlmy2p3qwd5s8lv98zrd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1605","1","1","g1q33p649u8ruqmyrth2wlmy2p3qwd5s8lv98zrd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AweTy8SRwIlmztqOO/v3kajiQLlbS23E7wqQWy1ASDfx"},"signature":"CsZnXyO3pC8sXfgq0W/r+MoQulSpiYXdP9RKzkeNnDhCCjbgc7ql1p1P/EkzaDkVCbZ2/D4fkCbjpAlQXBy+pA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1pn4yxghaams3h330jf89uxhjcgca7rk7vz3l0g","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"1piD2BLlehV2QXclkrIfVLXE0PHH8JrylO4fNH1obWluYpIKmvAjYhMJ6+3ymOU/T526tPQA7FYVW4wM0LMjmA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pn4yxghaams3h330jf89uxhjcgca7rk7vz3l0g","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","fallhazard33",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzptpFR1Ie9zR3OmXEnlJQwAYZEMcpXhgOj4NMIhEHgB"},"signature":"pRVmaVNTaNr490S9WkHVQ+ERuMvqTJrIRJPNBRpgQqksoBmWjVHHeiEqk/OBcPBktK/Y91X9UOrWO1wkvl01ig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pn4yxghaams3h330jf89uxhjcgca7rk7vz3l0g","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["fallhazard33"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzptpFR1Ie9zR3OmXEnlJQwAYZEMcpXhgOj4NMIhEHgB"},"signature":"2oa8VYYfX7thlD7lrMcc99Js9fOxNBiweHmvqx6H/OhDhf+FItEtPW/n6yQrFG4P/+1rOTmKUO2Ay/fthUUpoA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pn4yxghaams3h330jf89uxhjcgca7rk7vz3l0g","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1606","fallhazard33","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzptpFR1Ie9zR3OmXEnlJQwAYZEMcpXhgOj4NMIhEHgB"},"signature":"4GCa4QkCNiJUF38qlhGr57S4XR3uvnhWnAxRNEOiaPcREiDX/I0THLGH30c8N98R/0HEDgUOhhngIJZe230nTw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pn4yxghaams3h330jf89uxhjcgca7rk7vz3l0g","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1606","1","1","g1pn4yxghaams3h330jf89uxhjcgca7rk7vz3l0g"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzptpFR1Ie9zR3OmXEnlJQwAYZEMcpXhgOj4NMIhEHgB"},"signature":"P0ECq3aiUZKRUsZ7c3ZK3jyjcVVd6QBYkMLN9GHwr5BvfcyeGPBSZ2RD9E4uc4btl2mzNbuDeh9JBCut3Ku3jw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jly4z5y5mur5z044u532hj75gxg9qjpx3vgdsw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"UJN2oAjszafniwErZoqOZ8ueJFCJmsFUGD9o5EFaefloubBRNBcIVKaY5m/C3A9+StDSZ8oHNORzh1Hb7ccOiw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jly4z5y5mur5z044u532hj75gxg9qjpx3vgdsw","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","detecteconomy5z",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7ABA2fjRiZ0wm6PL6nrn0DVArEtNsgTxa5+BRL33GVl"},"signature":"/HFqFOoRY/fS065g28759K6+m/qRiffnqfgD6r9CrwNSxD2ZX3+UNnP1XenS57hYQCBnaOJQoRckrvjYs7jSYw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jly4z5y5mur5z044u532hj75gxg9qjpx3vgdsw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["detecteconomy5z"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7ABA2fjRiZ0wm6PL6nrn0DVArEtNsgTxa5+BRL33GVl"},"signature":"usCPnPhShgy/Sk/kdk1luc04V4U2HBCdpgPEw16aaoRi8lPzgWXx27rwjT5fBUaa1uPB/WfxD3vsaZDdBPFl3g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jly4z5y5mur5z044u532hj75gxg9qjpx3vgdsw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1607","detecteconomy5z","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7ABA2fjRiZ0wm6PL6nrn0DVArEtNsgTxa5+BRL33GVl"},"signature":"iqCgLI6ZdtYaEPChUdEwAZU2oPFJcIYwOFYFZiENbSdNjJULvfr8UY1PghHam6VBM8CrKXzq8+/MBLLiYmf2tA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jly4z5y5mur5z044u532hj75gxg9qjpx3vgdsw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1607","1","1","g1jly4z5y5mur5z044u532hj75gxg9qjpx3vgdsw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7ABA2fjRiZ0wm6PL6nrn0DVArEtNsgTxa5+BRL33GVl"},"signature":"zHnNo5326qAYTy/HCo2cTRn2Dc3Np3wIi+GFJclSHbceRzEr0NT7q372cDlG+Ame3eeeAs83weCugyyHYwtqEg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ycrhnsfp55xps5u8kcfe9ahv46sl5ydfafd43c","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"645a4SsYYR0yHaeGRmH5H9YF8sPifKeCa7z6pgeCGL9e7FLN7EuKr8fOqSs+TPwyHLHxUWJfFVDMT+GU+sxsUg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ycrhnsfp55xps5u8kcfe9ahv46sl5ydfafd43c","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","voidfabric5u",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjeDWSerDI8txd6Wfn8L1Za4JUwsYh3xfHSIQ+42wILl"},"signature":"M3C0r9ebp1QWTzlxsUnoQjvUhaDUcMvzcZ2+CjkZcI1HoY5iRQcTgBUSJWhzR+Ge1aW+PfDG9hiiy1AfRa/vwQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ycrhnsfp55xps5u8kcfe9ahv46sl5ydfafd43c","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["voidfabric5u"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjeDWSerDI8txd6Wfn8L1Za4JUwsYh3xfHSIQ+42wILl"},"signature":"ANuywzvn5DsHjZleSavtxZSduHZQiOWbxFtSDd/M9Skyv0D70zaOrK5+9B1xkJfXme+JuLm0YtKcYAHyEDfMRg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ycrhnsfp55xps5u8kcfe9ahv46sl5ydfafd43c","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1608","voidfabric5u","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjeDWSerDI8txd6Wfn8L1Za4JUwsYh3xfHSIQ+42wILl"},"signature":"eSlJ/IVXukKdPzFL5Go2YlJnLBLxlZMsWJrkzj34x8JxrQYe8hnAwv/HTimfECw/TZ4w4IBLtScGVICsQYxgWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ycrhnsfp55xps5u8kcfe9ahv46sl5ydfafd43c","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1608","1","1","g1ycrhnsfp55xps5u8kcfe9ahv46sl5ydfafd43c"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjeDWSerDI8txd6Wfn8L1Za4JUwsYh3xfHSIQ+42wILl"},"signature":"AuQ9DQMY7tER5X6OTMFCcr5AePbcTWTtZz/k0vO/3FlmnCyGv0rSD7XYXn6ENLOMhMIoq5qB48osnQz687XTRw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fjxp676307jpktzzm5yf2egppdnkh58n0jjc43","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"xSjMOido0jeeNFY6eObn737azQqOoXGGe9m3EhjnNe4AgbZjwEQ6039ujY8kmgwW/0mI33DHGwqdCjJwQRLvwA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fjxp676307jpktzzm5yf2egppdnkh58n0jjc43","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","brassdenialtz",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgWJFPrY1zRSnyaYG57Ah4kV+5SqFMSohJomtpwbW2Gh"},"signature":"h1oorxI3mpGwznwjm5O1OGvcUJuHpgTngGlVjTMmEtdT7r+gPQFZMqg+806eg0fQHyt+ItnZkDLan5VrmL68DA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fjxp676307jpktzzm5yf2egppdnkh58n0jjc43","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["brassdenialtz"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgWJFPrY1zRSnyaYG57Ah4kV+5SqFMSohJomtpwbW2Gh"},"signature":"t3UpGsJx84XSaUP1OGcmnh6AyCY1aBccFopksSZxiWJbtkHpZuyGqoYZHhF9hhL0b77jHLlDXk8oCY/1qI/jmw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fjxp676307jpktzzm5yf2egppdnkh58n0jjc43","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1609","brassdenialtz","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgWJFPrY1zRSnyaYG57Ah4kV+5SqFMSohJomtpwbW2Gh"},"signature":"GQGn+XuqziMtMzn2IbKdj0+WMPUQY6Rz+O7XxbB8kllxlh+5mx5vpq5n67MIbrXns27V/yd9MSb/HfQDCoRF0Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fjxp676307jpktzzm5yf2egppdnkh58n0jjc43","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1609","1","1","g1fjxp676307jpktzzm5yf2egppdnkh58n0jjc43"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgWJFPrY1zRSnyaYG57Ah4kV+5SqFMSohJomtpwbW2Gh"},"signature":"pkKu8Css/4msHnuF0b1Dws3C/+Ab2IzzOlyUmBqE7hkZ+FmS/piHj+5g9Jui+yNKEpeCQeUijZ1Rf9JevMjvkQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1kt46p727gp53t5g9psmw79mprazrdtz4gflf8y","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"LzU/Kr0CgIvMWzNT1a2q7V1PplbHJmtDY01VOrCQRRE9vXfycp4NJVaXpLGfMckK2Eoog7D5IpTwiZCO8SfFqQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kt46p727gp53t5g9psmw79mprazrdtz4gflf8y","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","croppicnic3t",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Awoy7UTr04PShk7+nL33O3c7cSEnXf3ic4z3j6JADNmp"},"signature":"1dWfexjnBFal7/Uh5L5Y5GvGBB6O9Ql1mzpMjoAMJcJirIdIt0Pt9m9X7G7beFlLJGktyP6zrgRFgxVtXeMu7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15fvynw9v990yq4vu77napaz5q32qwyrkt32fhd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"hmkSbmnqaF/PJ0V8DBI5U5FWYP9F3PNMlW9JKJSp9RYP22oWnwDpy53Chv6eZIeW84nw79sn5DBqcpGOIag4kw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kt46p727gp53t5g9psmw79mprazrdtz4gflf8y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["croppicnic3t"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Awoy7UTr04PShk7+nL33O3c7cSEnXf3ic4z3j6JADNmp"},"signature":"pTHQHnhN6Ga9MEJEiqzvlqC3a9NVZ1+/hMPbpKAl4iU4tN+a4KqGzVGMenleiYkoiRrosb8vrD5WFSIosFKv7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15fvynw9v990yq4vu77napaz5q32qwyrkt32fhd","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","garbagemargin4v",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtOA2CLRkdchy3mHGWSgRwN+DfUTKbYDtb9JDG2QkNf2"},"signature":"VWm21C4V61H349mnsuQl58KZwp9B+o4HqgWQslu+YiZiEntCzpoRgmQk0BakYfU11pY+6hsbBXKFhm0YD9ri0w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kt46p727gp53t5g9psmw79mprazrdtz4gflf8y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1610","croppicnic3t","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Awoy7UTr04PShk7+nL33O3c7cSEnXf3ic4z3j6JADNmp"},"signature":"7e03coiK+UMOWuDnIvRd+f6qclYrCfzd0SPNtOxXmqhfV/ZLnDEPL/Ke4ldmbin3vqfk3apJbRvqkXnqRkmWiA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15fvynw9v990yq4vu77napaz5q32qwyrkt32fhd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["garbagemargin4v"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtOA2CLRkdchy3mHGWSgRwN+DfUTKbYDtb9JDG2QkNf2"},"signature":"npQ42yZTit7T6Dm8nSjzVHbGYKrCQ9H0+kMzsb4Q/HsXhNZbKEWxK79yadxj1LBXBrBHF1hKbOp1ID7W33PT0Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kt46p727gp53t5g9psmw79mprazrdtz4gflf8y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1610","1","1","g1kt46p727gp53t5g9psmw79mprazrdtz4gflf8y"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Awoy7UTr04PShk7+nL33O3c7cSEnXf3ic4z3j6JADNmp"},"signature":"ughm/KbxwO5TxY3Vu8S6o5bTJfMPF3bRjM547ck2xRwpwpc2O9W3gDkHdn3XlycYU7xOjVu4MSNPCaG6UtSQlA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15fvynw9v990yq4vu77napaz5q32qwyrkt32fhd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1611","garbagemargin4v","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtOA2CLRkdchy3mHGWSgRwN+DfUTKbYDtb9JDG2QkNf2"},"signature":"EQklZB5vbQc+9+IhaaBPMyrS+QNixOOj/v9lWnoODjo3RHYgjihvgO/blpUlOCYJQUZM9lxQjy29JVHbons40w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15fvynw9v990yq4vu77napaz5q32qwyrkt32fhd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1611","1","1","g15fvynw9v990yq4vu77napaz5q32qwyrkt32fhd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtOA2CLRkdchy3mHGWSgRwN+DfUTKbYDtb9JDG2QkNf2"},"signature":"TCFwKYy3riC4cR7oSpsFE2ee1qFEcbyAVpc7cR9YiTUFodmO0uTlrraRPcpPTQ8QiKSizR/gvPKyk3/8eSFOdA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1j692y7pxeln3zt7xxcug9lcttgezh2v74kv7q7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"K13Nv0t/KL10d2yGoX0OCMwlWF5gXHYne8FdwDH53T84ZHVGkVG8URkq5F43+P2zEaYCVHOIjhIqbDqhTnF08g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j692y7pxeln3zt7xxcug9lcttgezh2v74kv7q7","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","actualcherryt7",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmsQFNHE7r5vGm3HfLlKJti5Jr1nbKb2e6RyR2aXat9T"},"signature":"cwYhcyQCs0ReieO+xgudC4b0uFJAZsQGLoNFuaXjLh15sYGrM726/tKtZIvFg4m21qSUVEaFQON2noJufzbq4Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j692y7pxeln3zt7xxcug9lcttgezh2v74kv7q7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["actualcherryt7"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmsQFNHE7r5vGm3HfLlKJti5Jr1nbKb2e6RyR2aXat9T"},"signature":"pft3URXB7zqoE7gTjjBj014HxYcLBLsheU2EwdxhUndITgaF9/xvnjfaRhtxL8DwBgddUmUZiTYHbIjZvK1Owg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j692y7pxeln3zt7xxcug9lcttgezh2v74kv7q7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1612","actualcherryt7","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmsQFNHE7r5vGm3HfLlKJti5Jr1nbKb2e6RyR2aXat9T"},"signature":"SfiJZJP8lYHlzPbqDXG/50lDFgGqHZ8NrPyHN4NpYJdpmYMklPjvvSx1Gdzpr3yr5+5S2x2RuAq8Xewi761aeA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j692y7pxeln3zt7xxcug9lcttgezh2v74kv7q7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1612","1","1","g1j692y7pxeln3zt7xxcug9lcttgezh2v74kv7q7"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmsQFNHE7r5vGm3HfLlKJti5Jr1nbKb2e6RyR2aXat9T"},"signature":"rA18mCZt+CoXbdoQ+uLyauUp2hUWVTSNKEmGSvRFgjAXCMHTU9u07CzTOv3Fb5oq7OyahCp4bgvopVQALdbt7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1nzm4ce8yt7mq5n055elj2hfus4c09vlap933g9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"MayNEAcRDAA6GvYgB8ccSQ6XxKMdIdgOTjtOYT7ktF9CJl/zbJNSWNh7IBptqG6XNW5xWM26/61MzsttXzzvoA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nzm4ce8yt7mq5n055elj2hfus4c09vlap933g9","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","rhythmvalleyn0",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqjLcTpmmica6QKS0bkc8yE+Y8CkSSyT8RNQF1TcvQGA"},"signature":"N6BUtNIh2GnQepGseYbr+TkooeR/nsWD0Mn4R0VI1zUvL1Y2n7+ahv3euq7clmuR9uY8lrsa4VnU4k65XrxjqA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nzm4ce8yt7mq5n055elj2hfus4c09vlap933g9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["rhythmvalleyn0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqjLcTpmmica6QKS0bkc8yE+Y8CkSSyT8RNQF1TcvQGA"},"signature":"XFb4VCBkTcB8amYDRiy1bM3+HAd3ciw8knTPHeOarf5OnGWK5CREygrt27mx/jN7ZrAMKTJkXKVLPjbIpQCElw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nzm4ce8yt7mq5n055elj2hfus4c09vlap933g9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1613","rhythmvalleyn0","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqjLcTpmmica6QKS0bkc8yE+Y8CkSSyT8RNQF1TcvQGA"},"signature":"YkFHH7kjoBELMfIs0Gqcqd8QtwPoVsR2aTGc3ZDoAPwTIxGmRunNCIKB1j1w+0SKGjDb4l2mzvu6F9F8QOaFQg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nzm4ce8yt7mq5n055elj2hfus4c09vlap933g9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1613","1","1","g1nzm4ce8yt7mq5n055elj2hfus4c09vlap933g9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqjLcTpmmica6QKS0bkc8yE+Y8CkSSyT8RNQF1TcvQGA"},"signature":"GBkFHdMD6sOOyhAeXZxb03ZuLfEyYUFWtgv5id55bn8xHas6L/2XQUgVUjSX98Kw6YnBjBVNqXwuV+QNqtSDfw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1daanux4sp2erwx7mylv664m4qezxx9lcrn25j2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"IsuLdk/5KX9XIxJQJrBP3zVxnke5aOKtRj4rK5iW9AITcg4cJaXD0n1Rmvvc23WZhzuJpbN6T/jD9UQ39SaUKw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1daanux4sp2erwx7mylv664m4qezxx9lcrn25j2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","kittenvoterw",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApJ9uFll7pZy5RzhTh61VztnEVLeif3G3EEIHtyeDYgb"},"signature":"jXEg2Auja65yQDPJHsKcQUZqetogMWog6GsmUNFkDGp/8ngKAuCjDK5G490ppBxXD+IqLwwSLI2ILd3a/QRrnw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1daanux4sp2erwx7mylv664m4qezxx9lcrn25j2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["kittenvoterw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApJ9uFll7pZy5RzhTh61VztnEVLeif3G3EEIHtyeDYgb"},"signature":"1fqjYvmucTsf1isc0YYcWCAq4naWteBIVk4hBLMV8ddx7r767LRy+mm3f814jo+Eo4doUu9U7SRFG8BBnkWauw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1daanux4sp2erwx7mylv664m4qezxx9lcrn25j2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1614","kittenvoterw","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApJ9uFll7pZy5RzhTh61VztnEVLeif3G3EEIHtyeDYgb"},"signature":"HzfaykOzBh4yDAEr11lfvFTvGc7pJos9BWo8UutDrW4aun/23cjjfjxKByYtVbTbEUKFVB2KYmZBc9wXfGgWjA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1daanux4sp2erwx7mylv664m4qezxx9lcrn25j2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1614","1","1","g1daanux4sp2erwx7mylv664m4qezxx9lcrn25j2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApJ9uFll7pZy5RzhTh61VztnEVLeif3G3EEIHtyeDYgb"},"signature":"G2i/ixiyZU+Ax/jhEdxW5DuECHgEGXrfgsPKEl5+NP5ea1QKPfrfGVmmWfqgURl+uAK5KHauTNXF9CeXk6PwdQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1zvsyavfm4rcsqufpnye20kqwnd38tunryve44v","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"MBqxN36dIbZZMXU9AyL2DnR7jRWY2JvNlE5NAmePbEE9KLpvwGSqPBHHsv/g+R1UajrXpiFhmQTVXRmrCtQUsw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zvsyavfm4rcsqufpnye20kqwnd38tunryve44v","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","responsebriskuf",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aro7rLZZE5jp2HGGVsAhqm/Z1rvcheTi7jOXJsMDaBQX"},"signature":"RueGCFK0hV/1LHUje27zFSZmLOOrveM6gVZrcO54/l43vDf98bCLPjW9gdnRxsNvp4yTww3lyJMK83rx1NK7Ow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zvsyavfm4rcsqufpnye20kqwnd38tunryve44v","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["responsebriskuf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aro7rLZZE5jp2HGGVsAhqm/Z1rvcheTi7jOXJsMDaBQX"},"signature":"vYnRU2yybCJFX88sxdz0x1cVM+p9Q1yStij5N4M6P20PXn5mvCmGut+Ih2i2e33vntccepI4tqAhVHt/n2FVLg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zvsyavfm4rcsqufpnye20kqwnd38tunryve44v","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1615","responsebriskuf","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aro7rLZZE5jp2HGGVsAhqm/Z1rvcheTi7jOXJsMDaBQX"},"signature":"Y8+qJJjsP/ymRo2WQLT05VjVB8G/4W0ozaF91WKvHep3sBvTvBFNMYDylnsLBdn65Wzb9tJEN3COrX4Ih4USQQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zvsyavfm4rcsqufpnye20kqwnd38tunryve44v","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1615","1","1","g1zvsyavfm4rcsqufpnye20kqwnd38tunryve44v"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aro7rLZZE5jp2HGGVsAhqm/Z1rvcheTi7jOXJsMDaBQX"},"signature":"Bjxg3Hw86MzINVjqBtZY6C0IW0Bos7i/IP+BwdxGBmdkVNETANMWDKAgjoccDxY9dJ//bdqQOee/3WPx7s5GIA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g150rtxn683w4h9euq940gawzfuzfa4ad5rs7pc7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"TcTwX1s4OFCzvm2wShmjVgZOuUahmIF00CnJ34oIblok/+7vOO8ynszY9gRxmDHVhGhNP2xR9mhLiwY9whpjGw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g150rtxn683w4h9euq940gawzfuzfa4ad5rs7pc7","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","cheappubliceu",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4qMWROfa+/WWH45lU+G/RyfEuWpDGMQegsWme3fV4ha"},"signature":"iGQdCeUPhZkyTHVplBAJDGQQIlgUNYrW/ReHu+5hthAwWj4ALXiuD5ZH1kNjUi5O1A+lGqlmFJybxdZwSyt/UQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g150rtxn683w4h9euq940gawzfuzfa4ad5rs7pc7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["cheappubliceu"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4qMWROfa+/WWH45lU+G/RyfEuWpDGMQegsWme3fV4ha"},"signature":"0vYrx1K1qX4HMRz0hbwXhHBATfI9QAHHm/4pHboEfLQbHwr1FS7GVpEJrZtPj0/jWLVxuXSXmBPsnXAgIFjOVQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g150rtxn683w4h9euq940gawzfuzfa4ad5rs7pc7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1616","cheappubliceu","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4qMWROfa+/WWH45lU+G/RyfEuWpDGMQegsWme3fV4ha"},"signature":"FMysz1eep7YcJmSsiFO7O/UezDIDnNIuh/p4ClF36ahOAQm4mSLpNxwG3KLMfs451mGIFDOlLhoxvf1LS5eJyw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g150rtxn683w4h9euq940gawzfuzfa4ad5rs7pc7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1616","1","1","g150rtxn683w4h9euq940gawzfuzfa4ad5rs7pc7"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4qMWROfa+/WWH45lU+G/RyfEuWpDGMQegsWme3fV4ha"},"signature":"Tnsjhn5gNJXHi9HRwNhZkQl9Pv8n4B51yPxYcu+AfltLsIK/fcyAnKl0BXe/jBv0BlVbh2onT+zGvwzUme8t4Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14kz0mz58v4uepl7eav98gc52hp9dlvh40df784","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"MISLHwkcVLZHgvUNuPPseZxbARmz3+UBkQo1kobFmSUeQNZ/G5mi2BnUCt9kZix3BiNsDBkjBbnxDVgwy6vZ4Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14kz0mz58v4uepl7eav98gc52hp9dlvh40df784","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","repairdonatel7",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyvdZA6tlEis+ubwd76FKdkwzUU3JDpnDZRAtc931DC8"},"signature":"MhDJRj0VbvoGZBTlHJyCHoam4gENX7URnpvqp4nCy4tK6nt+0sn5acmAFPclhzNIbZcp4uTyH7LsPFmqbiI4yQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14kz0mz58v4uepl7eav98gc52hp9dlvh40df784","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["repairdonatel7"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyvdZA6tlEis+ubwd76FKdkwzUU3JDpnDZRAtc931DC8"},"signature":"wxvCIKZT+zfDMUAUGuJhYRGqQjs/NR1L6pDXsktTJgAh45Xy5nt7kvT/dIRWbFwMovI3421z1FXEv2vnTiGuBw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14kz0mz58v4uepl7eav98gc52hp9dlvh40df784","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1617","repairdonatel7","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyvdZA6tlEis+ubwd76FKdkwzUU3JDpnDZRAtc931DC8"},"signature":"mFk9S7xPKnInaHfXyGgGOkgy+Mffc2NuAftXsbTWNQFommR7cnlvv6T8UzoR9afOibgEwTGamiVVyR06dQ4bwg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14kz0mz58v4uepl7eav98gc52hp9dlvh40df784","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1617","1","1","g14kz0mz58v4uepl7eav98gc52hp9dlvh40df784"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyvdZA6tlEis+ubwd76FKdkwzUU3JDpnDZRAtc931DC8"},"signature":"dd8nAfp8G0XKkXTBlCdZEcZu1Qa5G4U3+vK+DOKOvodUIPfGsJaCZk+pVlbjGy51KLDZ/Jk2XsNhP+eg1pRE8w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1n0fwc00wpjvc6mr5rg9qq5a5kd4cvv0gk38cyy","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"7lUH7+nFgDYToVIMJVImQu5zvWDQWcFPkNnd96BzPHcnTTbnXnC+fO0mFYWRPiXY9M3MskGwN0ppRz8W5U7q8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n0fwc00wpjvc6mr5rg9qq5a5kd4cvv0gk38cyy","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","buyerwashc6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhM8RYcRCPPWQlJwwX7ViLROlBgJDgQntI9NktJg5DWI"},"signature":"Rqdox+Y/S+DcI6VSvAt3VwrQm77ytOXVvoPDWy4fEMtE1libxII/gJ3HkdPkU/I+vy/RwjRs96h7pkC2hgqUbw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n0fwc00wpjvc6mr5rg9qq5a5kd4cvv0gk38cyy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["buyerwashc6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhM8RYcRCPPWQlJwwX7ViLROlBgJDgQntI9NktJg5DWI"},"signature":"Kt1VMiJfTW3BJPolTRciDe5KReJXcqcDXfU4xST2uGppJG3NBZaNzw3SmUvOLxuJUYV+G+a5w+EGhteqt/avMw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n0fwc00wpjvc6mr5rg9qq5a5kd4cvv0gk38cyy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1618","buyerwashc6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhM8RYcRCPPWQlJwwX7ViLROlBgJDgQntI9NktJg5DWI"},"signature":"eJCF0V+owg8gmQLEq3LFbzrFdZ43lJU8eEFW24sEdlErYCaIqdoKh6CttTNotR+NsAb8A8tSR9ZMb6ODgOyo4Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n0fwc00wpjvc6mr5rg9qq5a5kd4cvv0gk38cyy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1618","1","1","g1n0fwc00wpjvc6mr5rg9qq5a5kd4cvv0gk38cyy"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhM8RYcRCPPWQlJwwX7ViLROlBgJDgQntI9NktJg5DWI"},"signature":"eOqxFfQ3JyiZUAkwZ03/LQsc1l6nXt2QX/XjR172JKcVdN1SVxgasRcD85X3KlA6dX+LbteOsXH8Z24WSTfQmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12fsq7pav7qr2k3r2rch9z0fh8t64ess8khxhvs","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"oso/cJtuNvrorNmC9pZqu7OsDStqk4eXIppPhDGM+gcGgAB3PKgZTkpFk+6OLKBj/xVzpdkMckCxIvl2ST9Fkw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12fsq7pav7qr2k3r2rch9z0fh8t64ess8khxhvs","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","indicateadapt3r",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/2QFJ8AN+E9mAsl7q5WCPi6pGcuysmy90QliT7BSLWD"},"signature":"FDo7qeEw5XQz40MvTdRQ8EtN1PtJlOGlsh7q3MFEEDJB36+R3oozB0LI23QHuZifJHYCoiiWg2/N1a6dgoTUmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12fsq7pav7qr2k3r2rch9z0fh8t64ess8khxhvs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["indicateadapt3r"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/2QFJ8AN+E9mAsl7q5WCPi6pGcuysmy90QliT7BSLWD"},"signature":"Dx/GJ/Lb4pY0i1xclGCXMyrehyR6LOaOezlliQt4kElSabXqQS0YaNQif34R48YR+Fw9QTbPKLG2Y65e43hY0w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12fsq7pav7qr2k3r2rch9z0fh8t64ess8khxhvs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1619","indicateadapt3r","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/2QFJ8AN+E9mAsl7q5WCPi6pGcuysmy90QliT7BSLWD"},"signature":"sW9VKNGiuTeNl6r7xQ5gw/gSjnNiPBdpSmoLPJhnrUsLHGW93kJo6s9DhrYjQtlUnZ8AYphLSBSlM8bMcnNaDw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12fsq7pav7qr2k3r2rch9z0fh8t64ess8khxhvs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1619","1","1","g12fsq7pav7qr2k3r2rch9z0fh8t64ess8khxhvs"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/2QFJ8AN+E9mAsl7q5WCPi6pGcuysmy90QliT7BSLWD"},"signature":"yYReBhfzRerwlFS1GUlQ1HWeoifYiFTcSXhr7Mytf5c8jbOv9PK0PT7VjIIS0yVqu6aHGtTx/Fidk+Gv1S0Q2w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15pur6t0tw63mwerullkwdgnm74t7ytud0z6dmq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"cFqvjpjWPh/CRBtbrZz1bae09EHVK90dXstvKp8x13obagvarBRi9ZAgaaLU6OxKbZyZ+WIVhnWRZMfXu5bdEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15pur6t0tw63mwerullkwdgnm74t7ytud0z6dmq","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","patrolfroster",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzIhOkdKv2xggAzvZu0wnEFURTlbwi1lb33uLvtO/fG2"},"signature":"ih8AAcwv3XTN7qrKXr40NntIX1dNGCh+bf/SGP/tJc0S1C9Zwn51RoB7AbCOOlBjWsicZm91rV1cbvBBH7pSXA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15pur6t0tw63mwerullkwdgnm74t7ytud0z6dmq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["patrolfroster"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzIhOkdKv2xggAzvZu0wnEFURTlbwi1lb33uLvtO/fG2"},"signature":"Ui29ZG1pdSXtkUbkIVm7LWs4SnxZ3adl1EheDDwMwQM1R/Sn3cxLRDq3JSVbhTSF4AGQhjbzGhrtEj0VS6OAvg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15pur6t0tw63mwerullkwdgnm74t7ytud0z6dmq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1620","patrolfroster","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzIhOkdKv2xggAzvZu0wnEFURTlbwi1lb33uLvtO/fG2"},"signature":"XrqBRznUOKMPVT3ceT4PD0CCWEjjs5uRtPxBDpn/F254wL+CxvNQOrIUouLZ1PU5o9rXWVL3dYYpq3jLQijIeQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15pur6t0tw63mwerullkwdgnm74t7ytud0z6dmq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1620","1","1","g15pur6t0tw63mwerullkwdgnm74t7ytud0z6dmq"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzIhOkdKv2xggAzvZu0wnEFURTlbwi1lb33uLvtO/fG2"},"signature":"7aIbSuRm/Bx2/jUdRkpIXJWcJXrqNb0iX8nutf8H0582/LPAbBzsiKdXv+2l4bpdYPwPLh05+LTEbEYJZQhiyw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jy32t7ed4kd26jgxwrna5w7ray3a8rn4slrrhr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Kwf/TWqEfqXP9p+6Zkrx4/CF13ll6VAXdm+o9WIm3yIqz3i2+5QfSKsV7UV4DeWFR5/uW01sLACYZI2xLTK5RA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fy4hfhw8w6jt627d9yqvaxy9fmfkq3045hxltd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"skyygvEElnR0mC4E8Lc5xIKjZp5zlCDw4+bxOVss0YUeZ/Mv5qD5Gzv6AN4S+nxUoOhS7lonUZqXUuId/UIiPw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jy32t7ed4kd26jgxwrna5w7ray3a8rn4slrrhr","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","bracketcelery26",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5QdyuhmNMOKJogz/GJaUXYw2n5jWXkRHhPjdU7gYffU"},"signature":"rbX9uY1R6CWcwK+w6BDne+PIs2vmiNPq00Liolq6Ha5fCK0wSfaSdINV5mw7+mUWPl7AubMiGq9YL8uSTcHLUQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fy4hfhw8w6jt627d9yqvaxy9fmfkq3045hxltd","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","rotatecannon27",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aw0SJlzuXL26HSlBZofBI967nsmfWYD80PwUJQfHxrWS"},"signature":"jbq9TStw1+ViKGjtV+RCEsZjz/UfT9+Uit5uNbWUZZ0CQ+/umIeiadseiKL1OHExHCoUkPuCbs3DFazDuY0jhA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jy32t7ed4kd26jgxwrna5w7ray3a8rn4slrrhr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["bracketcelery26"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5QdyuhmNMOKJogz/GJaUXYw2n5jWXkRHhPjdU7gYffU"},"signature":"YLUl0jk6+V7v5zhulHAGiGoBAGj+W1mspDbHkxCCSOJslSE9Wmm1xq/EDZhnaRjSUJE6Mq5vwYgpUf/j+JjqVQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fy4hfhw8w6jt627d9yqvaxy9fmfkq3045hxltd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["rotatecannon27"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aw0SJlzuXL26HSlBZofBI967nsmfWYD80PwUJQfHxrWS"},"signature":"FSF1/Wp63+dx62s9vdXOgXR6AjqDn0j0MmVp+KRauGIysY3X9X8IG7egaTRCN7fgjlCYGcKMdbv7Wyy++QUWOA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jy32t7ed4kd26jgxwrna5w7ray3a8rn4slrrhr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1621","bracketcelery26","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5QdyuhmNMOKJogz/GJaUXYw2n5jWXkRHhPjdU7gYffU"},"signature":"A0qwnEXnC753xhqqYz1fSIVsUoU7Ejc4nPOpWdRzKdkUkga5dzMwobfEzbOhy50GyDBSiTcHdcdXCmpl0IGf2w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fy4hfhw8w6jt627d9yqvaxy9fmfkq3045hxltd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1622","rotatecannon27","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aw0SJlzuXL26HSlBZofBI967nsmfWYD80PwUJQfHxrWS"},"signature":"4UrmDUjzta37biAOa4ipgMuXBKF1KbLBt/vi0ZcCn5QUG6fNx+FakH632hqKpbB5y2eW7IwfPoIzmRV+AvskTg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jy32t7ed4kd26jgxwrna5w7ray3a8rn4slrrhr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1621","1","1","g1jy32t7ed4kd26jgxwrna5w7ray3a8rn4slrrhr"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5QdyuhmNMOKJogz/GJaUXYw2n5jWXkRHhPjdU7gYffU"},"signature":"SWG11lRHQnlfJ0Z9tRmDgBS6qKhe4IDFQzfWFD8vckEMGWJ5Yon1/M1+21qssIbTSOeGm7rF8WmZMNUuv0KUFg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fy4hfhw8w6jt627d9yqvaxy9fmfkq3045hxltd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1622","1","1","g1fy4hfhw8w6jt627d9yqvaxy9fmfkq3045hxltd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aw0SJlzuXL26HSlBZofBI967nsmfWYD80PwUJQfHxrWS"},"signature":"GDbf3LzRuBdZYtd76vzVZYNiw6GEG5C+dDFEqrvxnuoN4BqYbqrIUuNmErkvoi0lj7WQAZEGRTnz6NOqd/bTcA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rxv2kkqp9ff83wajdprmhmwecgg2zernld982w","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"qwGsxPU/5/bWACGKdwcD04uCwZfDjoKKBL3tfSIS358ScuduU4bm+QuCSuqcYzS9Am0Ow5JcMcFoIcKYJB4vDg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rxv2kkqp9ff83wajdprmhmwecgg2zernld982w","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","webvolcanowa",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A22SP05+6qvVAJ9jc3CSrtcFDmIUNjUtWSwdfH6HUy1U"},"signature":"SOZWa/EnOOUdyxoMyrbE6XxrSQwwy4hOs8in3AQCqERemUAMhWFQDDizUm2CvjmNdSj2pb3Xpxht0TFO+GNURg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rxv2kkqp9ff83wajdprmhmwecgg2zernld982w","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["webvolcanowa"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A22SP05+6qvVAJ9jc3CSrtcFDmIUNjUtWSwdfH6HUy1U"},"signature":"gtpKj4k1ndlAQ4sqzr5urwOBiV5wVQUkZiD9qvPHoXJP2zkyyNrUV5FaLu6J77uLniTK4eZZkuUk9/6aobYkDg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rxv2kkqp9ff83wajdprmhmwecgg2zernld982w","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1623","webvolcanowa","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A22SP05+6qvVAJ9jc3CSrtcFDmIUNjUtWSwdfH6HUy1U"},"signature":"Ackx+CmnRwoBOFCqODj60aQ7odRq5tT9OUO17xbDvhRjXaxisgdDwYsHEyj201c0fV/DVLi1r3lQnnuj+fwmDw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rxv2kkqp9ff83wajdprmhmwecgg2zernld982w","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1623","1","1","g1rxv2kkqp9ff83wajdprmhmwecgg2zernld982w"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A22SP05+6qvVAJ9jc3CSrtcFDmIUNjUtWSwdfH6HUy1U"},"signature":"5RW70idPDwCdscVe41i9R0WnviYoDqdvuDKwQNLrxukvQt5IxY0xjajM0sgZ2EEb/vvFV0jcDW32EIkYTnuu6g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g13mcg950363xdtek8te62z87vde93vrsy49frqa","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"LoBAA0QjjWQ8xsz4BE/pPK5L6LFiVqtnyWmd4nyQtw4wLzyQVG0kzv6CUeHAu4ZCW4I6MWRSF5dzfeDbMZTWlw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13mcg950363xdtek8te62z87vde93vrsy49frqa","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","junioranswerek",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjUpobXRNZGKGN3rOvFDR9K3I/2r9Zfpznr9Kx65zPM4"},"signature":"K71zgNlAZip6uiICzwpR7XqfPHmbrSfT4OOPJDpoWjoSGUkr1xgSHyKNAtiafY9StmiYJ97JCEsNI8HaMyRebQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13mcg950363xdtek8te62z87vde93vrsy49frqa","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["junioranswerek"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjUpobXRNZGKGN3rOvFDR9K3I/2r9Zfpznr9Kx65zPM4"},"signature":"YSnqcTDDZsVu1iA1YgKTcaWaOFJ3zcaXGTzaQBXE9tV0mdJ0k2ffm3g1s7cM4iNg4jatrKai6lwTsW9sesXdoA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13mcg950363xdtek8te62z87vde93vrsy49frqa","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1624","junioranswerek","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjUpobXRNZGKGN3rOvFDR9K3I/2r9Zfpznr9Kx65zPM4"},"signature":"08+19iNNuniQQCv0pkENWR6RXG/DQstbIqjFpefAgJ46OuEE6mmkIwDZjulNU6bWupRRDeHRwvJYd408YbgGKg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13mcg950363xdtek8te62z87vde93vrsy49frqa","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1624","1","1","g13mcg950363xdtek8te62z87vde93vrsy49frqa"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjUpobXRNZGKGN3rOvFDR9K3I/2r9Zfpznr9Kx65zPM4"},"signature":"hM7UuIjOCxPC8nTt+kOyrpHz6EeX3z6vmBIz252nlchh9LdL+X2HaJSVl/P0mMxYDESf1OK6t1Zmm5ilrNo4ug=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18ez3v3c7ghtdrdny6e0pzx04hc0f0na9rkrn7e","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ZO8KF6AdBXxkozKSlnH1MP62WzB3zPLzQS2XzI9EOGQ0jBSINBwMvu2StqetGLwj5rn92jsmzvZpoC/O/nNAnQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18ez3v3c7ghtdrdny6e0pzx04hc0f0na9rkrn7e","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","flyannualdr",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A91iGdUdljqs9BPVDNRc9A9Z2I7j2rfuv5NcnA6xEa/3"},"signature":"9geQS852zi/odgXoXBtSGm6R7mEl7GKEBWn0xhuJu7hSUl2ySKTussIzc0rot8hllM3I9PZ1VMEsWZ+oU2Lmzw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18ez3v3c7ghtdrdny6e0pzx04hc0f0na9rkrn7e","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["flyannualdr"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A91iGdUdljqs9BPVDNRc9A9Z2I7j2rfuv5NcnA6xEa/3"},"signature":"4nJL9wHZKZAU7io1+4PomF7SUPU732YLGAlEHUNaQbQj8Sf8L/rng3gr4NEqvmIXLSPlpbjPKkHvMUKGt0u5HA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18ez3v3c7ghtdrdny6e0pzx04hc0f0na9rkrn7e","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1625","flyannualdr","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A91iGdUdljqs9BPVDNRc9A9Z2I7j2rfuv5NcnA6xEa/3"},"signature":"TboOrCxFpNP0Vqv1+c0SivaA9srlcr6exscuk8hPC3dHGJRCJN4KFVZ3LzDQYeHWnb09ylDO8yT/aTVOnYBKPw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18ez3v3c7ghtdrdny6e0pzx04hc0f0na9rkrn7e","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1625","1","1","g18ez3v3c7ghtdrdny6e0pzx04hc0f0na9rkrn7e"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A91iGdUdljqs9BPVDNRc9A9Z2I7j2rfuv5NcnA6xEa/3"},"signature":"WAzc0LJluWEYC7KSEegL0S610OZsqKVkGrOHJQCfhFBWJasStqFaqXv95WaOd3o2Q8dwXue4KE/uXoE47QsAew=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1uvv6h8jcmn06km6kfynhusvycwzhv7vvh03guj","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"sU2U9VdBhJpX6vPve/XZ68b6aPZJDaw/FK+ISRmBzPFPiJX2YaakT+FlS6GiClad88GVI388R2/JVBJp/0Vnsw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uvv6h8jcmn06km6kfynhusvycwzhv7vvh03guj","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","followbrandm6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5dXZEwLyMM0/s4yx46nv29gKAU49ZDNidR0xRGMfZgK"},"signature":"9D0vDMGdNlo81XtkLhTpJ5LFDX19fiFHgS1VCy2LatILdKavmrDxIbcg4kTrdbPhd+eBnqknDPD6jrwnaWDYBQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uvv6h8jcmn06km6kfynhusvycwzhv7vvh03guj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["followbrandm6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5dXZEwLyMM0/s4yx46nv29gKAU49ZDNidR0xRGMfZgK"},"signature":"PQEKKku37Gp9mXb9KPRhXUHZYjU19Y2qVWuAARffv7tlwtDhxVzvBXnQE2EKs36VDi0rJK9m7X3yrsM4VpphsQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uvv6h8jcmn06km6kfynhusvycwzhv7vvh03guj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1626","followbrandm6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5dXZEwLyMM0/s4yx46nv29gKAU49ZDNidR0xRGMfZgK"},"signature":"o7WujA+gl/4utNPcs8wvyHULHhckiFIV7yMG1CCgp/UJbVnzzSAtQNLs7N9cBrYVRZa8HgyBVTkhGqghLH24cw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uvv6h8jcmn06km6kfynhusvycwzhv7vvh03guj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1626","1","1","g1uvv6h8jcmn06km6kfynhusvycwzhv7vvh03guj"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5dXZEwLyMM0/s4yx46nv29gKAU49ZDNidR0xRGMfZgK"},"signature":"I8jAB3JvMPEBtuzb6pw5c0TALpr0IIwWr1OB3Z2X2MBoV8Yn5EiQMaMU5SfnbHfuRkjd4KrWX0dDDSwQ+LHfYg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ssl8wc3g0nj4slkz4mv0rcev6rppwrasnt8kp7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"dPtGcTgIObTgYSvBHm4GRrqOuKCBHZWlKJ99CE74yE5UXc+qWExeVVFxhd+8xXItJP/2/FgGcvf2zQTl8ZOSXg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ssl8wc3g0nj4slkz4mv0rcev6rppwrasnt8kp7","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","voyagelittlelk",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtcpFizxWBfgKK8+uS8n6oWFnu+A/RrQNDkfYkwaaqfj"},"signature":"ijki6sCGIF2bK8GQLecmBAblg5rEjlKvDyDC6k04bCw9W6VDOIbEEPUwnhgN4X/dtowwZIsFkyiC2i7UQsI6bg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ssl8wc3g0nj4slkz4mv0rcev6rppwrasnt8kp7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["voyagelittlelk"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtcpFizxWBfgKK8+uS8n6oWFnu+A/RrQNDkfYkwaaqfj"},"signature":"/liYE1jdP5HCKujRI3X4uNr5OH9rk5ZzCbZRvjrhmQwRJ63Y9ZRyygaLdtSkFUSnnPJcxw3cXrFayRGj2trwCA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ssl8wc3g0nj4slkz4mv0rcev6rppwrasnt8kp7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1627","voyagelittlelk","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtcpFizxWBfgKK8+uS8n6oWFnu+A/RrQNDkfYkwaaqfj"},"signature":"WrA+TNwVliA/u6IvAJd2wGc3VhzeZJ/MZDidThmoIiB3YqkZ4QMGKDfpdXDJJ8gyRkAc8JxcXZX+mZgFbJtLrQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ssl8wc3g0nj4slkz4mv0rcev6rppwrasnt8kp7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1627","1","1","g1ssl8wc3g0nj4slkz4mv0rcev6rppwrasnt8kp7"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtcpFizxWBfgKK8+uS8n6oWFnu+A/RrQNDkfYkwaaqfj"},"signature":"MEUWtV7QcQ7sWWDSRA8wzk6OLkx47M5i+ZADhepaMxZHb9RzCVhwHKxuqUmJZZJkuzymfLcYjJaBLBn/0beO0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1h9lp3tgkd4srjz8f00g79ld5q656lxlcrsusfg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"iMdGwwgxAYXP+dPEChiENGtsqGCyIeJM3MJ6Evl61X4jIVNbAl2KtFTYT4JLN2/GqsNMO+bidxySX5slATpFJg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1h9lp3tgkd4srjz8f00g79ld5q656lxlcrsusfg","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","bracketsavez8",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ao8Qg6xpK9ftlwEwkDlqpPDCK8ry09trR1wCw6VGNJDX"},"signature":"sYP5OE4WMkBa1Z7vLNVxzq+i98ZepuUk5c8/KJ3lyu9GrFE4YGYV3DZhJCMfO6HJI6cpVyEWsYD/MV+BMbNWIg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1h9lp3tgkd4srjz8f00g79ld5q656lxlcrsusfg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["bracketsavez8"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ao8Qg6xpK9ftlwEwkDlqpPDCK8ry09trR1wCw6VGNJDX"},"signature":"2nfTwNr5SdZYqkKsDfr3IyvC+S0I8pInvFE5xaRWoVBSI7mXM2PkETOpDjewJmGxeCAheXlFK4sWu2Gr1fHeRA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1h9lp3tgkd4srjz8f00g79ld5q656lxlcrsusfg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1628","bracketsavez8","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ao8Qg6xpK9ftlwEwkDlqpPDCK8ry09trR1wCw6VGNJDX"},"signature":"3sJ79lpf9dlIwMohB+s37cx2gP9z1iPBm4AaWzdeufNvaPkS9HLfS6Ugy7th+tG+x0ifiDR51kFHlbDGnj5nSA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1h9lp3tgkd4srjz8f00g79ld5q656lxlcrsusfg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1628","1","1","g1h9lp3tgkd4srjz8f00g79ld5q656lxlcrsusfg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ao8Qg6xpK9ftlwEwkDlqpPDCK8ry09trR1wCw6VGNJDX"},"signature":"SKGIK5DgTkh8NGghCzP1cqDsMCxJA9JUgO99xhuLRnpyt7/+6DuItmvvj93IMpqJoWXBoxMD24Fn/n4AA+vtqQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jzl2myrquhdcwptnyg9yx7vkduv60ndthx86ks","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"f0eB9ORvRkyVfyLRgcMXve0N6b+nzIgdClvg1Jmoo2ZepKeZt6x5LyP2mLB4AcbFJK/+edzvi1bosgsapkZVbQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jzl2myrquhdcwptnyg9yx7vkduv60ndthx86ks","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","policepolecw",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiCMZRupU1ero1Osz+IC2lQKHS208dqF+L4tH3PuGJ8T"},"signature":"ZxPqQdoYapiUlLo9B7IE3OwUd0EYtPnxcldshzKTbA12b2FS9scxwn8/EOrqZmWN3jU5KGK3fpxqhR0RusL+vg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jzl2myrquhdcwptnyg9yx7vkduv60ndthx86ks","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["policepolecw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiCMZRupU1ero1Osz+IC2lQKHS208dqF+L4tH3PuGJ8T"},"signature":"y+2BUJHk5KNzAmfTqI91iubiOWvfAv/1eJMUPAlYvwp/UZ0TOdWHJuWqDzzgAbjXbXdQ2Tfz5ZPJV7l1EviDZw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jzl2myrquhdcwptnyg9yx7vkduv60ndthx86ks","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1629","policepolecw","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiCMZRupU1ero1Osz+IC2lQKHS208dqF+L4tH3PuGJ8T"},"signature":"thbz+urK22Gwt3rF7ya5a5PIBPqIlnMoUEKG7q22X5sQVSRBVFoH1Cyh85snuuBEFdcIp+ZJQqn9aaGXVvWBjQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jzl2myrquhdcwptnyg9yx7vkduv60ndthx86ks","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1629","1","1","g1jzl2myrquhdcwptnyg9yx7vkduv60ndthx86ks"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiCMZRupU1ero1Osz+IC2lQKHS208dqF+L4tH3PuGJ8T"},"signature":"UQ1qe870czw00iF2YZJY9cbt3vfxFhR3wpVZv2jFg8ciiKSwipt4hxczT0q3YSYOqWzKwQE66pP+NW74UGviFQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g159fuexamvwmkn6nldlhhg4y97npdrsya8t5fmj","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"4BwePsDv7R0AvX2AizfrDA6h2BKlvoop4uxhMSiB1rd8FvyWtaINEWHxos8Px7K1neNhLAWBCvDtQi9K3JGNqA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g159fuexamvwmkn6nldlhhg4y97npdrsya8t5fmj","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","dampfigure6n",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjI8BiQCDSyRIcrMTR0IIi5Qne+gn+FBCKk4jarzGxBz"},"signature":"ouF8pr0o8UyNzUdiRbNK6SzBJ55qyAsjMF0Iqoc02BpYZ3IdBZN1CxSgBMo5lXO8jO3wai/VlDuRpZyYAmSmuA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g159fuexamvwmkn6nldlhhg4y97npdrsya8t5fmj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["dampfigure6n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjI8BiQCDSyRIcrMTR0IIi5Qne+gn+FBCKk4jarzGxBz"},"signature":"fZo7ODrTU6spFFCLIC+B9baAHy4oa8j6lzUH+nYpQ+l7T3qKBI9o52M96X6hqmRF7qz9QSkc4Lqfo1hGlRhLjA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g159fuexamvwmkn6nldlhhg4y97npdrsya8t5fmj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1630","dampfigure6n","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjI8BiQCDSyRIcrMTR0IIi5Qne+gn+FBCKk4jarzGxBz"},"signature":"n6frgwW4ug7/d9pfWHa/ieWwSOsK9BtLRD/sHdswyVI/nknuuURQrAQUwAuJoYXimm7GBjROuB58UuYbQpjpXQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g159fuexamvwmkn6nldlhhg4y97npdrsya8t5fmj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1630","1","1","g159fuexamvwmkn6nldlhhg4y97npdrsya8t5fmj"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjI8BiQCDSyRIcrMTR0IIi5Qne+gn+FBCKk4jarzGxBz"},"signature":"dlMN0fSJMWK9fCa1r6jFlrcUg92fbOiOEglAkO0YXbkJG3M4M/FW+JCgD9AsFXx8bM9wyBYNvbHXnlEtTLtd2Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1a5u3gkqv93srl9pv90py5w7dkp57xs00e77xsj","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Ad+ZYnjSjnbfhEzDtGIrLMgAbccvc33ghxzftzhBLf0Qjt4kFfxEBnJI/unrEzcP0KJnxCMcrQieczby7Azfmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a5u3gkqv93srl9pv90py5w7dkp57xs00e77xsj","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","virtualkidney9p",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AidrToU2doydcwvvX5QmT2/8Yzn/OSPCLmT1K641aESV"},"signature":"rx/TE2Zb7SrBmwCHA4PuIkFEXTYZxibTQA1JGXFnBAFoCWt2tJLtj65SyQN2jE5CkYzkSwl1+QCntKMbOM9tXw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a5u3gkqv93srl9pv90py5w7dkp57xs00e77xsj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["virtualkidney9p"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AidrToU2doydcwvvX5QmT2/8Yzn/OSPCLmT1K641aESV"},"signature":"nZBVD90qzzeAorc1pViEISDL6dA51VPSqkaIBTHXNydNdhjumoJG/w+jFyQJ67DBWwzPg59FUATyuGN0+Ct6VA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a5u3gkqv93srl9pv90py5w7dkp57xs00e77xsj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1631","virtualkidney9p","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AidrToU2doydcwvvX5QmT2/8Yzn/OSPCLmT1K641aESV"},"signature":"U6tp1o3KVwqYtKcAaI4UeQw86nFqntYPS0Ml4yKSwh8P2+0ztLOZXaGXLxCz9W3lr3yquGIN/ttFXD77etSg3Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a5u3gkqv93srl9pv90py5w7dkp57xs00e77xsj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1631","1","1","g1a5u3gkqv93srl9pv90py5w7dkp57xs00e77xsj"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AidrToU2doydcwvvX5QmT2/8Yzn/OSPCLmT1K641aESV"},"signature":"cgJTBY6gBoWsjVLi6CyzsONnCX5Q6HEktA3xkcOl5NtXZJNLyQrxmXY+EtBhrsn27ktALVHswwTrWi2mkrkP8A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14wpea2236r7dklwgn30egmfsarke4nn7gfr66q","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"NqMi1KBgp4h4OsvBZ07kbjrY3RornOjXFmcdUihwi44ci0SUreD7rjZovZBil/h42VR+Tkz01EOujTHjArfeIQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14wpea2236r7dklwgn30egmfsarke4nn7gfr66q","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","vibrantitemlw",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgW2pwiCA9bL8V+Mm1zXeJ44Ma/3Oh0bEVraInfde8cL"},"signature":"ElhQusmN02VttO1Yz5z0sQnTLy8BvsqobPFdL3yTEpoUAAkiqyzUyRFwn70JFBYpAQYZlUJUEMkzO/i4GyqG5w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1f3smlgk0sf048u2urrfeg4qfz2at6mpcutzrdm","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"hvfhlARDUkFeo3WAeC6EFg7XqaLRVwuz3VkicrncteIvZrAi0DXccUnWswggPy8WTtZEGGZOkwN/FOpir7m+LA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1f3smlgk0sf048u2urrfeg4qfz2at6mpcutzrdm","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","emptyjazz48",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoAkLwS0G2VYvP7tc4kmi7699Ka5JDbRNOqa0SkHrn09"},"signature":"c4cK0u+reKraDseU359Q310QB2xzcA53vu1m2w7iSFhu+d0Chen9rhr0T165bQ3M/R1K3Iwyg9DOAIctHmHPAg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14wpea2236r7dklwgn30egmfsarke4nn7gfr66q","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["vibrantitemlw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgW2pwiCA9bL8V+Mm1zXeJ44Ma/3Oh0bEVraInfde8cL"},"signature":"iavYg0aHLfooMt7IP/7cjv+I2o2mq48gbYzTA2VWPz5gr33VaWAoIZmAItRVWIRE8NseLUALykgjLMoVwfGIfQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1f3smlgk0sf048u2urrfeg4qfz2at6mpcutzrdm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["emptyjazz48"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoAkLwS0G2VYvP7tc4kmi7699Ka5JDbRNOqa0SkHrn09"},"signature":"N4G3SguhjtBQr3eQMemuKa2CAVVHphsYQ7Q/64IFMWZ4h+aTh8meWVSQsD/5r0GNC67oKV4mntP3690Bi0ijjA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14wpea2236r7dklwgn30egmfsarke4nn7gfr66q","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1632","vibrantitemlw","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgW2pwiCA9bL8V+Mm1zXeJ44Ma/3Oh0bEVraInfde8cL"},"signature":"ck3skAIC8tYTpZDGm1pbt4B4sAAGUL/5CA1SCjuumf16B0eYxvKdGv19TscRr71+1ryibTWLmp+Av9PUBWeAlA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14wpea2236r7dklwgn30egmfsarke4nn7gfr66q","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1632","1","1","g14wpea2236r7dklwgn30egmfsarke4nn7gfr66q"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgW2pwiCA9bL8V+Mm1zXeJ44Ma/3Oh0bEVraInfde8cL"},"signature":"UhJLWO2ixwbR81I4TVjr8S30g/WRp4YyxEixP6GV2bkCnUaDFVqP9Uz6acVEa9Yfm7SI0SXmI2u7xd8hvpqHcQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1f3smlgk0sf048u2urrfeg4qfz2at6mpcutzrdm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1633","emptyjazz48","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoAkLwS0G2VYvP7tc4kmi7699Ka5JDbRNOqa0SkHrn09"},"signature":"J1A1+CGdwffcxqDZyX7uOAxk7yXJYVgPJbSkfnAtdi065QAZn6+DJ1r2LtUHcdW/twwdfn44dWMULFhlgZnUMA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1f3smlgk0sf048u2urrfeg4qfz2at6mpcutzrdm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1633","1","1","g1f3smlgk0sf048u2urrfeg4qfz2at6mpcutzrdm"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoAkLwS0G2VYvP7tc4kmi7699Ka5JDbRNOqa0SkHrn09"},"signature":"vT/HyNOxap69i33013sSTEJFeXk+30XPIkXPWhrW+e1+yd4cTny6qusmgRvXMCP13prHVHgKTcdUgyXEdGg2yQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1g472wr4hs5qfpfyd6tt3sswwalfxewylnhr5sa","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"K70H21HoaOAGcr0SCA7kKa1WkWn3svi7mvuTzcwzNn8mVLf7Ab5V5rduZPAdrg+MxtOcGbYljOF986Ceu4lpYw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g472wr4hs5qfpfyd6tt3sswwalfxewylnhr5sa","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","estatesurveyfy",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj3Z3fZDKI3Tv4qAA2SNuUzqAlURo464z5ZT8q0KbRGz"},"signature":"S3AAhU8nzy2BtBOAvs2HGi3ip9Q/ke4gEdkpbUYqUpQyKnQTdg4XUxRLKIPTqysC9+bqkDJuU9arsEB/ytaddA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g472wr4hs5qfpfyd6tt3sswwalfxewylnhr5sa","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["estatesurveyfy"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj3Z3fZDKI3Tv4qAA2SNuUzqAlURo464z5ZT8q0KbRGz"},"signature":"lFkH9QY9EP5N3IblOHirsoz9WDv4MeW3EaPU6QIjNGlnQbcxHrLbddaO79Js8H1urQefaX8YXY7cv9s+zKzWrw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g472wr4hs5qfpfyd6tt3sswwalfxewylnhr5sa","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1634","estatesurveyfy","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj3Z3fZDKI3Tv4qAA2SNuUzqAlURo464z5ZT8q0KbRGz"},"signature":"wgJa5ITmX7FIr1bMKFTh/iRCgc0/41hueM12OWbC/g9N0jFvsztmi53DCKU8rxOoczrHBbOnL0R7rHto7nMR7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g472wr4hs5qfpfyd6tt3sswwalfxewylnhr5sa","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1634","1","1","g1g472wr4hs5qfpfyd6tt3sswwalfxewylnhr5sa"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj3Z3fZDKI3Tv4qAA2SNuUzqAlURo464z5ZT8q0KbRGz"},"signature":"I03gDls09cCRgDwM2D1WXPrzW/SWWf9PRjXI07Rq5HFoTpbWyg/LsonRLAifMHIzNRnaPCD8p+h5oNdHvHnY+g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15kdfageau7n0hvt8cd55shxhgsc5p0w7fx59dr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"bgDDGLYyGzjSweb7xSdBObhML7OsnNzzDDfHfLXpnnJ/06osBchEQfq3e0iCP8unKmHBKYhhBIhVdW/veD0k9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15kdfageau7n0hvt8cd55shxhgsc5p0w7fx59dr","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","publicauctionvt",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah83459hbLCu3dY9CsmFR2inMTZJfgW6twtjfp/FaFS9"},"signature":"h+Q4kPo/PEWatOBpo2S+tOR/ObfJpdgI2pe1KJ27dygbH/LjWFfBViwBzMGpB5BbTpYSjc8D3vTEkNbycBK71g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15kdfageau7n0hvt8cd55shxhgsc5p0w7fx59dr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["publicauctionvt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah83459hbLCu3dY9CsmFR2inMTZJfgW6twtjfp/FaFS9"},"signature":"J6lXTAAynY4EDpLkj2DSXDulwe8i83LqzYDLuDwGAxRrOTlXAQJdK6TofN+8BRX7eIZrem8shgxbvcxu1d5YSw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15kdfageau7n0hvt8cd55shxhgsc5p0w7fx59dr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1635","publicauctionvt","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah83459hbLCu3dY9CsmFR2inMTZJfgW6twtjfp/FaFS9"},"signature":"oUFOLfTEfgSs7I3kHqTmp5LCs39xMu97hxdccqxFZ7Jw3RbSZJvzNsJRSzcymyh9im1To0dbMv3mQYJqnGQBiw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15kdfageau7n0hvt8cd55shxhgsc5p0w7fx59dr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1635","1","1","g15kdfageau7n0hvt8cd55shxhgsc5p0w7fx59dr"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah83459hbLCu3dY9CsmFR2inMTZJfgW6twtjfp/FaFS9"},"signature":"EB7Cur2e9dWvhIlsNIW5p6eesXS2UwDGJDqUcR40p/d6lN8tS0mUmae9sfGZyPOljpRg9Gqwg7VvoNM1phJChg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g197j57fx6fs5rxneh6u697qsradkfm8t7xpmua7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"2TRNEwczRhThgN9Oz8XMOFs3aIpDH0fb9fjC26sw3F8PRM2TPNeqffAhlah7ymtowIblSnbtjxSgA1MgqN4dDA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g197j57fx6fs5rxneh6u697qsradkfm8t7xpmua7","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","rulesoulrx",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AreG/zwXXzlCu/qUQNNZYYge1Tu1YZsHkQ+auPFynOHB"},"signature":"tmebNJS+yLqlbRVbW7iatik3ryN6jIkfegJmfaEAOGVk/i4eRF8ScOP5vaagqImS49u9PYZFXW4uoEfD1gKXfQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g197j57fx6fs5rxneh6u697qsradkfm8t7xpmua7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["rulesoulrx"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AreG/zwXXzlCu/qUQNNZYYge1Tu1YZsHkQ+auPFynOHB"},"signature":"ZUa9sKMUyWTG9Bu1PwJ3lQKDKjLJIU33E5rSkACXqndyYGjVZlSopilDrQDIbPnigNsaQi83KoscpAyh9W7PSA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g197j57fx6fs5rxneh6u697qsradkfm8t7xpmua7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1636","rulesoulrx","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AreG/zwXXzlCu/qUQNNZYYge1Tu1YZsHkQ+auPFynOHB"},"signature":"A5cUWRaWIqJFRnf9bbTZSvufMy6YsFBaShIEp/428GMtY/bWnHhHWFBy1MaetRtMWYiwndWj8zgRZGAz1+9V3A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g197j57fx6fs5rxneh6u697qsradkfm8t7xpmua7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1636","1","1","g197j57fx6fs5rxneh6u697qsradkfm8t7xpmua7"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AreG/zwXXzlCu/qUQNNZYYge1Tu1YZsHkQ+auPFynOHB"},"signature":"5qXFV6boyP2fmD7/0GRP87f5L0pSDtLZL9X0yTzGrDs0jbb/zCPTexbSdLEGucEPOnWdbt3m1PVgM/EnLyZQyQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14czup2ufhurd04pp9awf0jk5jmjff5vm8pyy9y","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"rTwb4nNoSpcNP0Y7AmNEyT60QfXrwpi8RI2F1Kg/3J1viwMimONVFbhligr0y5ILShT7mvQi6lWqFqtJIh6/sg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14czup2ufhurd04pp9awf0jk5jmjff5vm8pyy9y","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mediaverify4p",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2E1stOs9a/jOTXBYU61zTkRuaPwTSPd5/F19V226r0s"},"signature":"oisLESpZag5lw8SMQmPrierng9O9eZbDZwD3diO4UO5aC/dTRKZZeTORkrsw4FX6VxzGpRs44XzteuFQSF4ZPA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14czup2ufhurd04pp9awf0jk5jmjff5vm8pyy9y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["mediaverify4p"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2E1stOs9a/jOTXBYU61zTkRuaPwTSPd5/F19V226r0s"},"signature":"ChoUSiHyQtDxK/p/Z1MmBVqm99Scs6nErE4kLLiQ9DkxQJ4KyKqZdaFH69mGPs6DcwRCYKQNIVAX4Hy8Vr5Sug=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14czup2ufhurd04pp9awf0jk5jmjff5vm8pyy9y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1637","mediaverify4p","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2E1stOs9a/jOTXBYU61zTkRuaPwTSPd5/F19V226r0s"},"signature":"4SkrzENQAkEIO5Nw7MBWdH9Ac5VixeVcL68cPI1y+TE+9JFU7Jf11IDtKdLARO+m3ka0vqsfRQuBry/EryzIqg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14czup2ufhurd04pp9awf0jk5jmjff5vm8pyy9y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1637","1","1","g14czup2ufhurd04pp9awf0jk5jmjff5vm8pyy9y"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2E1stOs9a/jOTXBYU61zTkRuaPwTSPd5/F19V226r0s"},"signature":"M5uzZEh9EBVVWkPEbLelxVssBZIqH37JFwQSmybUMlE9M0PRWJ2CIa0lchwiVnQ6pweBDlyXew4ZwGNni6+igA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1seupq0gdtn3dhlstkx5qlepgx5mf4e70lt7cpm","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"4l2XzG32aFP3HgnEX4bS5wg4tGq1J2gzE0KDwHOVMQtEK7/IZd0We3SGKj0DXGYRM86QtMj6+fKGUq8ZvCFNPw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1seupq0gdtn3dhlstkx5qlepgx5mf4e70lt7cpm","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","auntgivels",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsTSOhq/KNvCOJtvlr9garFKsOkqikiM1UCqVUuFmazz"},"signature":"Q8DGSrYElbEXojGLFgAbAYBP0oGypcR6o1M0jc2SoGt6gSw9SK/0SIv8jaHCxrezm/pt5KxIPk9si3IbF80xeQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1seupq0gdtn3dhlstkx5qlepgx5mf4e70lt7cpm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["auntgivels"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsTSOhq/KNvCOJtvlr9garFKsOkqikiM1UCqVUuFmazz"},"signature":"KTkcwiB3ArMAuOZUp//paiXasELqEPI1nrxiAJao1SoZvAvdfhI7WF0Nk19JnxOXHaO+HuBaQnyggoS3ARC2ug=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1seupq0gdtn3dhlstkx5qlepgx5mf4e70lt7cpm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1638","auntgivels","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsTSOhq/KNvCOJtvlr9garFKsOkqikiM1UCqVUuFmazz"},"signature":"LtivLdPqrQaK6iACv/nu8zs+suvFcehLIngLpaLjcigInYRDQV7cnc7ODstPJ6xvqL3EYp8VBZE8zr3y42UK0g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1seupq0gdtn3dhlstkx5qlepgx5mf4e70lt7cpm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1638","1","1","g1seupq0gdtn3dhlstkx5qlepgx5mf4e70lt7cpm"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsTSOhq/KNvCOJtvlr9garFKsOkqikiM1UCqVUuFmazz"},"signature":"XCCuxnk5RKZLlTYlcZsGZ80F9tcfhw6DL9PPIUKPKI5JlC993LJhKCp/u/UL8XTg7DryBEcckWwIFgi4HXW08g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1544yngslat766f66y2e2p79nwxjhkypsqkmnac","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"SsqMYPCMaNECduncqMwVYSL7CNV32b51+AsXWiyNKSdhavTCYrg1qLQQ3wvU3T+72Omhwr2E8pvGnillHcXAxg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1544yngslat766f66y2e2p79nwxjhkypsqkmnac","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","sortemotionf6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8bfa1GQlms1G+jzRrkVbSio3ftqEbbu76AqW5cVKFOy"},"signature":"aj93Sg1wBXXTLV4Io9vYulgPsNzCBrONwtWJ3CQuMfkbb4++9rEYecZfRrAzPn+B7MiM08eThjldfEJ5m/+Lig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1544yngslat766f66y2e2p79nwxjhkypsqkmnac","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["sortemotionf6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8bfa1GQlms1G+jzRrkVbSio3ftqEbbu76AqW5cVKFOy"},"signature":"wDXWgc9lLrk7u4C7Hd0MKZwfIYp+PJ8ZMawzW61/0PR/EzBNKEnFFcQEOW64VXjDJAiJ3VAdnNtMQYBqSBzokg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1544yngslat766f66y2e2p79nwxjhkypsqkmnac","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1639","sortemotionf6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8bfa1GQlms1G+jzRrkVbSio3ftqEbbu76AqW5cVKFOy"},"signature":"2hHFmN8WMiswa53MB0EQ79xOLd70wfn0CG9u6895JYUrsue9nkP9pGOktRz8tSks6YvrL7ZfpZz97f8RWwEn6A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1544yngslat766f66y2e2p79nwxjhkypsqkmnac","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1639","1","1","g1544yngslat766f66y2e2p79nwxjhkypsqkmnac"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8bfa1GQlms1G+jzRrkVbSio3ftqEbbu76AqW5cVKFOy"},"signature":"ETV8XzVWW0ckDLumoEUGwBy31DuH29dr2DNYNXOly0xuUl5mbhLdCprb/Zt1HskSzQJluMdxC95jB7BdwoHMaQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g124506deuw9e9cjxhmtmsy9cxu340zdjlxvapzk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Ch4y9dP5GPKTK1ohCjAJnzvdS7VZgZflwN0d+KBDc+hfFCR8NRTFdRvc/mkv/J1WsDpuwscgVEGaHbVJdRfvDw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g124506deuw9e9cjxhmtmsy9cxu340zdjlxvapzk","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","twomaple9c",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjUwtVJqVTcpNovp4RWjeyi9gMlTL7wjQ/vVaViEFFzv"},"signature":"lRh0Nk+3URPTjxVmIG/e3XjSuPTahBbsERhoAk/kva1QKkrXXfp/BqILGRGHqNYbKZ6/aSLAe+Oht8mvVr7sCg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g124506deuw9e9cjxhmtmsy9cxu340zdjlxvapzk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["twomaple9c"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjUwtVJqVTcpNovp4RWjeyi9gMlTL7wjQ/vVaViEFFzv"},"signature":"q5qrg/Avx35Q5CQ82GixHor3uuGszqCR5LxnZUIb4g4FJEsgwr29hm9jVTfLEH5RwDivDKyND8FjAE1kJF/QXg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g124506deuw9e9cjxhmtmsy9cxu340zdjlxvapzk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1640","twomaple9c","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjUwtVJqVTcpNovp4RWjeyi9gMlTL7wjQ/vVaViEFFzv"},"signature":"4T5aEO1aZYYkhYjpRgFv86mLQg52m2iqjylkqp/gsTdFYqOwoufCjX+m5u9r8l2qk+57McXR2E458hut7jCW5w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g124506deuw9e9cjxhmtmsy9cxu340zdjlxvapzk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1640","1","1","g124506deuw9e9cjxhmtmsy9cxu340zdjlxvapzk"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjUwtVJqVTcpNovp4RWjeyi9gMlTL7wjQ/vVaViEFFzv"},"signature":"HACG0vPght5lGYBO9PfxwuDw2BP5rw9GGPXAIUFXibIGvjqJrBSy64KXNYa68J4i74lVzhxFHXNFAqsD3h9Wug=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14u06lk4su6zjpeyutl8pamxel2e7aq8fncngvt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"dBga5/86nWcrgeYScY3OJwPlD+DC7+bP8efxsVm1KRFX4mn+nngEcCEm1fourSZ7yZUMBFeaMthldVi0vNSaww=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14u06lk4su6zjpeyutl8pamxel2e7aq8fncngvt","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","tornadodomainey",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av34Ta9PBlFhxO96lxv9/waxcsp52RC1JAqLarwNzyXZ"},"signature":"gbDydqLFABgQiq2d7J+b4mj5oXh9pzskNXeAAgNRtiVWhqlwnlBR4ET435AFVvEn28mU4qVVhCo6Po13SCFIJQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14u06lk4su6zjpeyutl8pamxel2e7aq8fncngvt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["tornadodomainey"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av34Ta9PBlFhxO96lxv9/waxcsp52RC1JAqLarwNzyXZ"},"signature":"s2/oFLUFMBH3hxTMaJWG1y73+Elutq6c9hfCRlz1vV5kiezPAjWJA2PTiBQLkXWTT9H8QndvHQPMEovRfRXW2Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14u06lk4su6zjpeyutl8pamxel2e7aq8fncngvt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1641","tornadodomainey","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av34Ta9PBlFhxO96lxv9/waxcsp52RC1JAqLarwNzyXZ"},"signature":"QzdBE2eWmS2xUYCvcBzZEtgFrvzbwSLldsdbX1wj/JgjgltlqHaeZDyr4iM1UYRUgORyGIFHgcmppXKb1KP8HQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14u06lk4su6zjpeyutl8pamxel2e7aq8fncngvt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1641","1","1","g14u06lk4su6zjpeyutl8pamxel2e7aq8fncngvt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av34Ta9PBlFhxO96lxv9/waxcsp52RC1JAqLarwNzyXZ"},"signature":"Wf5s36kg9Hbrc42S20fVkro6FkBnhQluucAlzPn5+PgKr1P+k9hx7qL6JmrSrouKr25XZ7lR3PkehHcdXUYFAA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1advcvjw4zeau0nu3ktppgpcfhkppq6estvca7q","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"tDluve6hmoZrHJF5DVownaItSwIRWTVExDjCDv8KRvoclV8Vf+KEXw43BZX8VgsvpLDPweS5aGTp8aOKSSbALw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1advcvjw4zeau0nu3ktppgpcfhkppq6estvca7q","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","brandarrestnu",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1MW/JMgWfaO188Pva7IGfOUVqkhMWJn2dhHmLd2dSeV"},"signature":"rbnP+jiqIxhE2YELlVp8OvQZDyMNKc/AZf52hN7gzohS25jsglOfa8MKzMN3lGnzL/vXWIhA/SAJpmWSypH9XQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1advcvjw4zeau0nu3ktppgpcfhkppq6estvca7q","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["brandarrestnu"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1MW/JMgWfaO188Pva7IGfOUVqkhMWJn2dhHmLd2dSeV"},"signature":"WN7lYOoyoII9Vgvf5okkQzcuaHzu4HFXaTW1H6e6tE9xQzg1fcWucWocITG4Lo2K5p34intjUyA35EXTUYxdSw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1advcvjw4zeau0nu3ktppgpcfhkppq6estvca7q","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1642","brandarrestnu","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1MW/JMgWfaO188Pva7IGfOUVqkhMWJn2dhHmLd2dSeV"},"signature":"iiz3zSRlE6NtU6y+Dik2MuMOaHxCSv7VGZtTO4bvaoxWG0rtG+aCVe4KTuNh2+SxQfs27xMupqtGvLdcjKvMrg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1advcvjw4zeau0nu3ktppgpcfhkppq6estvca7q","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1642","1","1","g1advcvjw4zeau0nu3ktppgpcfhkppq6estvca7q"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1MW/JMgWfaO188Pva7IGfOUVqkhMWJn2dhHmLd2dSeV"},"signature":"SkNHRDo/uo5F5B8Kc9IriIU19rGLx7EjXX6QzOVu2DsLePxZwNW0rbgiP2KeN9ZvE8WqYET+ObEwc6lDQ1c69w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1qmcqhcm2tq3gx877cdt5hl806zvtkg2r45wuk2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"BftL3iGDFdzjAPtpUQlchkwCHO3iVh8Xz7NtA51Ozt5hGAiA08gNLS1VwodYxZ+5HnOlCP0mKYjwx/BOdEUEQA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qmcqhcm2tq3gx877cdt5hl806zvtkg2r45wuk2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","togethersystem87",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah5QAOAbJwIXHOuOmUq8dypfhJeN/etJ3vBNN1uskINl"},"signature":"FvmOkSXikb/sHeUei+8/wRR8g+Q5k5TLpJ6yV/mdqERCMFWsDWlsFxCA856jzIpiQc41UFoZC1pPClgV2efJuA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qmcqhcm2tq3gx877cdt5hl806zvtkg2r45wuk2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["togethersystem87"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah5QAOAbJwIXHOuOmUq8dypfhJeN/etJ3vBNN1uskINl"},"signature":"+AnVE61mO6Z48L0yQ2fBe9IobXwEnFkvjtRQYRXPaSttLlLf0ax+RCYbqEDiM4+DwPnqNHSTBxyltTgnWC7qpQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1r6v0lt5aqmf7mfvsxx0aa0acr47jaxegx68jgq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"E6Kkvr2pky5Odas2WIWfmQuhOF6gygAejdVjXUGlX2koR5bbrha4+yS3SHjxJ4TE48/xOgW1orHIXv6DJ6/FTw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qmcqhcm2tq3gx877cdt5hl806zvtkg2r45wuk2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1643","togethersystem87","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah5QAOAbJwIXHOuOmUq8dypfhJeN/etJ3vBNN1uskINl"},"signature":"d/pAeMnqdl9IYrX8Dk9YSDmqHutl9JMq+ghWV2pvc3I/eJZgqRETs/iJqmI3wjDvBYE+TT7nxSQ0FUzS6FEfAg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1r6v0lt5aqmf7mfvsxx0aa0acr47jaxegx68jgq","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","enrollverify7m",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alk9Ama28QSCirQMGrouFDr4lmLKOqALktBxSycAdNld"},"signature":"eLbqnt/JhBaui5hRoBc6Zh8RCGQoCpK9axINhnPJ7MdBuBCDgipxMOFbeoEFlFUJo/UuKkCz2zCFJR7spF+vAg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qmcqhcm2tq3gx877cdt5hl806zvtkg2r45wuk2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1643","1","1","g1qmcqhcm2tq3gx877cdt5hl806zvtkg2r45wuk2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah5QAOAbJwIXHOuOmUq8dypfhJeN/etJ3vBNN1uskINl"},"signature":"/fgJtBSEPWKlz5hH9zUanK0+icRGuZV81QlMfE7s4wYkgdzAsjW3LFTGBLGeYjKqSLOvOLfgWZjw4/nCmRj1ng=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1r6v0lt5aqmf7mfvsxx0aa0acr47jaxegx68jgq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["enrollverify7m"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alk9Ama28QSCirQMGrouFDr4lmLKOqALktBxSycAdNld"},"signature":"cGAgyTfIKOhOB/1iTL/WlDZMUerJVdG/N5q+U5Lu2Bg/+FRBcwagA7Wr02ZtqrNObAH1jCEVSbEX+YgjyWN0IQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1r6v0lt5aqmf7mfvsxx0aa0acr47jaxegx68jgq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1644","enrollverify7m","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alk9Ama28QSCirQMGrouFDr4lmLKOqALktBxSycAdNld"},"signature":"qSICYvWPI+dKKsxzME4bBK5hrXp+sp206XHloGFOZfVb37rTebj0HDtVgGSbupQRzLLwOpncDPIt1VH2/tN7LA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1r6v0lt5aqmf7mfvsxx0aa0acr47jaxegx68jgq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1644","1","1","g1r6v0lt5aqmf7mfvsxx0aa0acr47jaxegx68jgq"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alk9Ama28QSCirQMGrouFDr4lmLKOqALktBxSycAdNld"},"signature":"zQuCjyd15BEL7Q+Zj1jyYt8BcC7uoIq2xxo5Zl1G6/A9N7/ktR+lgjFCix/cO+xmEyqx1rbGjPHduEsRgsQrxA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1mhuz47rsghutatf6tfyryfzf0n0sc9yd49mgua","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"KmPrF7gdVcItP7z2TpzLlSqHXK7snLY9bzc6oENTJYxVuo3IogdCOkY7qYu4EdGp1stVHoF4NdqM28FtT50SQQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mhuz47rsghutatf6tfyryfzf0n0sc9yd49mgua","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","nationbirdtf",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag56isFtEKhuDzfdN0/tTcRAHDdfDakMafmOqKfhukyQ"},"signature":"/uQzjaYFt/yYj8gFb6aqQaVCq/JZLPCOMPOGaJ0ILKckd6KNHdm1zCJos/hfR04GLHvFYGkUNFV/TtjnIhUXGQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mhuz47rsghutatf6tfyryfzf0n0sc9yd49mgua","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["nationbirdtf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag56isFtEKhuDzfdN0/tTcRAHDdfDakMafmOqKfhukyQ"},"signature":"4asEyeiYLnFLUtxdL25nPKGNQpvGVCtrTijhXW47421pDVQr3HtdZ+OFsFcUOWwP6NhXGjXwspzeyX0ZPhlqDQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mhuz47rsghutatf6tfyryfzf0n0sc9yd49mgua","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1645","nationbirdtf","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag56isFtEKhuDzfdN0/tTcRAHDdfDakMafmOqKfhukyQ"},"signature":"k1GPpeQ6xB3f5MDEE2yk/G+97uumcxaZDzKNQ4UZuDJSQp/1cUwfrJNaWxizZxcVLdT1XVmT3vFyWX7ZRCk1gQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mhuz47rsghutatf6tfyryfzf0n0sc9yd49mgua","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1645","1","1","g1mhuz47rsghutatf6tfyryfzf0n0sc9yd49mgua"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag56isFtEKhuDzfdN0/tTcRAHDdfDakMafmOqKfhukyQ"},"signature":"oslbzg+FR3OdNKMHn5xULFFEKj/06Pl9iPezyK57VkJQQBUBOf40tlCutfOSfjOT64sBVJ/4FlW6PJ8AUeqTHQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1c9yul08mwmt9y839kxgprz7peevnqdf7h6hv3h","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"lQ4neJcXVwNctZhZZvZT2YYBeIf64ai6I2QpYlkrFCk585urHt/t01gKjqCKNBIsufLni0Cg1g2uJrlC/6gXVQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c9yul08mwmt9y839kxgprz7peevnqdf7h6hv3h","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mediaregret83",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlQ8cVNglYOYiK1PuYCVfoL66RV6ztp/6WGZ+gGa6lSG"},"signature":"ReQKrHKf6L4p2XCyGzsXZgf0fr7zF1M6eDzPe2+walEnYEsz7+408O7AzH00823GfaTMqROnQUp+92yAItTYZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c9yul08mwmt9y839kxgprz7peevnqdf7h6hv3h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["mediaregret83"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlQ8cVNglYOYiK1PuYCVfoL66RV6ztp/6WGZ+gGa6lSG"},"signature":"BrnP4GeAeYamciWggrvglaPiW+7iuRN/eylNE744qzAVsVackGKHY/YRWiOjk3euxtI9nwUu1kC25iw/X8ZRxw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c9yul08mwmt9y839kxgprz7peevnqdf7h6hv3h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1646","mediaregret83","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlQ8cVNglYOYiK1PuYCVfoL66RV6ztp/6WGZ+gGa6lSG"},"signature":"IsBb3oBTN6dgajh9TC+vtkiDMSWBpzajf/56jTlW6sVNxwqVKYZ7SruoZ+3AzuEhCrJ/8flpvT9nff333Dz7QA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c9yul08mwmt9y839kxgprz7peevnqdf7h6hv3h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1646","1","1","g1c9yul08mwmt9y839kxgprz7peevnqdf7h6hv3h"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlQ8cVNglYOYiK1PuYCVfoL66RV6ztp/6WGZ+gGa6lSG"},"signature":"Y/jzKbCI3YixJvLpSLbMfvqIv6ILjNUX00/Mae9RLD9YwUNjKqkuPWVaA+tJZPAUWbh31YA/YziwrsqN3KecEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12r6k7fvdkpy4f2g4xqcsnqp5ekvpahkfwy5vgg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Byj1tAP+Vr16VThYnqZH+VpbyJEF8RRsk1nCvKbKOdYzjwCoF9MiOCRdEtbTkKAcMbsHny8zndhxpC6NC9qlNw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12r6k7fvdkpy4f2g4xqcsnqp5ekvpahkfwy5vgg","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","sockcup4f",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgRp3s4cLPdXZ2gpoSY5cZivZ9y6CT7V36FtiD/5LoC6"},"signature":"xoQi2bUUx+wdG7D6tMGV4vuoxTYwoIfnaAC3a5IKGsV5GYfCNiM3JTZwM1P6S04hKwXpV9Gt/fv7QXfeM0w9iQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12r6k7fvdkpy4f2g4xqcsnqp5ekvpahkfwy5vgg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["sockcup4f"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgRp3s4cLPdXZ2gpoSY5cZivZ9y6CT7V36FtiD/5LoC6"},"signature":"P6cz/hZuPzKKl1xvcmv2BMoSO1ak3APExHqPkz6rRIhIOBrlY/lbVasQgE0eKQyNDRxQTj29PLfmIvM12BeTGQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12r6k7fvdkpy4f2g4xqcsnqp5ekvpahkfwy5vgg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1647","sockcup4f","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgRp3s4cLPdXZ2gpoSY5cZivZ9y6CT7V36FtiD/5LoC6"},"signature":"gpmv+RGcnfdBbOmGtCjjKQpw5D+5EhP7tmEiiSa9Pb5Hh3rfku4fMdqFN87do71OJ6+0kkvB2VcTFBeJcu0qMg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12r6k7fvdkpy4f2g4xqcsnqp5ekvpahkfwy5vgg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1647","1","1","g12r6k7fvdkpy4f2g4xqcsnqp5ekvpahkfwy5vgg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgRp3s4cLPdXZ2gpoSY5cZivZ9y6CT7V36FtiD/5LoC6"},"signature":"aLpU856JKIqsbLaYcX7JnlNiMO/Zih2eAVs34QLMnJACWCU0678eruItKO+CB3SajaRXPEB5LC70HIRO6VSXXg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gel86khl7xjmd334larnhk6e3q2xc26mcev85e","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"8R1BiKaSqz3l2Td7zO7veZzX3d/gtCwTXdb75TZi72BDCi7N89BEU8Gd0mRB6Xr/XlgWXU56t9YztZ/PV+Jnbw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gel86khl7xjmd334larnhk6e3q2xc26mcev85e","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","stemsister33",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoIliBRFxeptC2CD1I0tVJdYOl4qewY0BOqnyBtQvttd"},"signature":"BHIYHDSgTy/rsPkHPDiSHlnV0Z/kfQ5WFWPIUosW29cnvEnAb/m583G/8goDNV5iO+DVRnVtVM2ptVE5/jMgZA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gel86khl7xjmd334larnhk6e3q2xc26mcev85e","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["stemsister33"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoIliBRFxeptC2CD1I0tVJdYOl4qewY0BOqnyBtQvttd"},"signature":"sN6vHt01K3imYp6a6dYjoizN6bCY5UzHzzpNUWWMXloBxoFEuVa60B/1eI7A0ap+mea6G+ni9NKWGnLUjBNA/Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gel86khl7xjmd334larnhk6e3q2xc26mcev85e","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1648","stemsister33","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoIliBRFxeptC2CD1I0tVJdYOl4qewY0BOqnyBtQvttd"},"signature":"D1D69SLgbeTetVpuNKX6uSuyagWvboFisdMRCJrLSO9hLqY0lLR7PJwVi1el16jSanpNfxYKsI3shM7ZRQl1gA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gel86khl7xjmd334larnhk6e3q2xc26mcev85e","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1648","1","1","g1gel86khl7xjmd334larnhk6e3q2xc26mcev85e"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoIliBRFxeptC2CD1I0tVJdYOl4qewY0BOqnyBtQvttd"},"signature":"K2xq3yV0bSE9ziVQqFWdSI50CyN2s/TgN1+6HIXA30hJoKhURy1w7zyeUPYaDPjSH+rU68E9tGC2nclMdsGEAA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1melfan7un5q60ycjl6nadf2f7e540qrsekgvsw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"HA/U9fTkRQik4PjtGAKi43VUp2ytOWh3NwPW/XXAmxNd+VndNbeRUhJWjuiMAXaR2C/NXWvFJNToyDKYHyRk5A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1melfan7un5q60ycjl6nadf2f7e540qrsekgvsw","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","poemhugeyc",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+6gy4SmhmwvfRiCGGXaSLYoupRV6maDChHDDBDAcMxR"},"signature":"N5T2zIghn5t9pQD4GSb1UJJZO8W4dcEppECFpN8uSBciGYC/kO0ZPE85OpMoLBH72sK1wLH6BB//x6ZVRucG8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1melfan7un5q60ycjl6nadf2f7e540qrsekgvsw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["poemhugeyc"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+6gy4SmhmwvfRiCGGXaSLYoupRV6maDChHDDBDAcMxR"},"signature":"R59CLZEJckqVf6DIR97qBr/iEA7EoJ/+n/97uHK4Uu0Nxq/TVj2/zGLRV/Lj60iuZASSgmWybYjKumo1ejMllg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1melfan7un5q60ycjl6nadf2f7e540qrsekgvsw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1649","poemhugeyc","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+6gy4SmhmwvfRiCGGXaSLYoupRV6maDChHDDBDAcMxR"},"signature":"FVe+yF8Bo4xOIKygGV1xwmd+m5PgAPPoV7+shI0t2f0Kzst8TccJricBhE0WLirIqqhAURujRzEX0qqCfkAOpQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1melfan7un5q60ycjl6nadf2f7e540qrsekgvsw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1649","1","1","g1melfan7un5q60ycjl6nadf2f7e540qrsekgvsw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+6gy4SmhmwvfRiCGGXaSLYoupRV6maDChHDDBDAcMxR"},"signature":"C+nExxilundSbRxlRRB93G+6svGnTiFNCJJWqTvjZ9oIlumEznwAqKTJx7Qfs4IoBcxDmTDXtPBKcYaZRDgv5w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ndvnvxg27jrycgwa9xr3mnwjdwarrne62x3h9p","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"nvvddaq0Kr2QJZBsQZ9ETJJLztTNUc0pev8m47z0d11MutRDf7ZnZ8yVIjRE8O5u8r5hyaXpL/dwRs1omKDKAw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ndvnvxg27jrycgwa9xr3mnwjdwarrne62x3h9p","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","opposechangegw",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A22oC3Emt6zSdjnSY+15tM+MXhWH8XRDnyOo2lsNYDs2"},"signature":"NGMDqX3QO5XJb8sUnSUZPJa1gGKWo+iCT6bEkHfhPeQjtiVlZBIyS/yCsjY+k2qtfaHPL1jFMfWZM6+smJEFrQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ndvnvxg27jrycgwa9xr3mnwjdwarrne62x3h9p","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["opposechangegw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A22oC3Emt6zSdjnSY+15tM+MXhWH8XRDnyOo2lsNYDs2"},"signature":"6/mb1WfuRJV4J62bQnAscqWILht16hKishTrgztgygMw96L6JRQuL2sofBo4fyRNpz/JYqydQp4SJjzqVS0KNQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ndvnvxg27jrycgwa9xr3mnwjdwarrne62x3h9p","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1650","opposechangegw","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A22oC3Emt6zSdjnSY+15tM+MXhWH8XRDnyOo2lsNYDs2"},"signature":"W5YY74RCkcDLq9E75lxrR4SJQKi0lb469h7rsYfycIdAmSWyAAUuzQMePBP9wAowoaVjwJFnhbkGxVHbsFegpw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ndvnvxg27jrycgwa9xr3mnwjdwarrne62x3h9p","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1650","1","1","g1ndvnvxg27jrycgwa9xr3mnwjdwarrne62x3h9p"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A22oC3Emt6zSdjnSY+15tM+MXhWH8XRDnyOo2lsNYDs2"},"signature":"U59pVcqv9TA0DcsNYPLIjUuL0BWsAQz5sQjnFxMGWdpfmoPPA8pRJAB/ctheMnDgvssGW5efOFQvBy3cyLub3Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1sapr90hr0072fh26509k7vu8e8lp6wrsupt7jt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"wRGQm/9Hgm4789ML1BOPu442+U4ZE8i96a+slUrRS4la47OSL3XSXKQ/W1m5rScw+MvHSz8/jDpFbo1OD7BP6Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sapr90hr0072fh26509k7vu8e8lp6wrsupt7jt","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","playexclude2f",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5SOesOsf0VahOtbv4oXUSnUcX4N5/9Pr6IaxnMNN4jf"},"signature":"GmPcNt7O7XnlVLk4f6Kj4YUUvEmKsflm8ar2v1nu7lk6APdq8da9gWRdkQ8l8ZsmxGYKuZZ/CTYTOq/uBH3blg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sapr90hr0072fh26509k7vu8e8lp6wrsupt7jt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["playexclude2f"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5SOesOsf0VahOtbv4oXUSnUcX4N5/9Pr6IaxnMNN4jf"},"signature":"1I3ErOdDR3RnjWpz0xQzZF0M+tfWEJV4fk1AY19L6YZaTxpwKC7klNwK+NUHi8c3Lfq1J+wgLyiID0qSVjIvww=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sapr90hr0072fh26509k7vu8e8lp6wrsupt7jt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1651","playexclude2f","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5SOesOsf0VahOtbv4oXUSnUcX4N5/9Pr6IaxnMNN4jf"},"signature":"65dvIonr3ecMYO3QoO9yRjQZco9Y2etyoRyoBVIV04NNscMui7wmWBWJV+1FzMs0jl9HYyjluyOLFNlaXhmqkQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sapr90hr0072fh26509k7vu8e8lp6wrsupt7jt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1651","1","1","g1sapr90hr0072fh26509k7vu8e8lp6wrsupt7jt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5SOesOsf0VahOtbv4oXUSnUcX4N5/9Pr6IaxnMNN4jf"},"signature":"3sUDgFTTOgIZ0IuXH28YWVk41KsUETcN1y251Rt0yVI4J6xc0Ov5cg02d0W8KeoZIKxTmDguOB4HAXt8M4GLFg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g164ejpqr43txwp86jj89v2u6hnhg5y2qfdykcw8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"JBDuDbAQvwhJy0TcarGmCzN+8Icl7FISgZhq/4ry349f3s6bBa0MgVYrEqRsX7JgtMr32mncIKHK36BLGCARrg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g164ejpqr43txwp86jj89v2u6hnhg5y2qfdykcw8","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","unclenorth86",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2qKXaN3A/c6Piloco1viSSPuLaKyhr81XIClGqM1szr"},"signature":"dBFtT0ZBSWdfeQCUzMXtTlDBEQwEduRsYeH4mpzk6E9F7uqw3svgQrUh2DKq2wLJ2UkIYKHiee0Ee7vBiVDbgg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g164ejpqr43txwp86jj89v2u6hnhg5y2qfdykcw8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["unclenorth86"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2qKXaN3A/c6Piloco1viSSPuLaKyhr81XIClGqM1szr"},"signature":"o6fPC43UjYlY7Lqmxs9UZM4syfAss80rcvrEUEUdg00sbbRmFCOFgHLdJHUgo37yJtf+zYUHhNMySoJvtsLebQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g164ejpqr43txwp86jj89v2u6hnhg5y2qfdykcw8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1652","unclenorth86","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2qKXaN3A/c6Piloco1viSSPuLaKyhr81XIClGqM1szr"},"signature":"gXu37kVXR2Prkqc0s6sL6w/7X1i0ixS0wjG1sZxodYt5Rwu/NdeetOWM52Ww/9mwWOZXe/gvnvI9pDDqWfOvgg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g164ejpqr43txwp86jj89v2u6hnhg5y2qfdykcw8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1652","1","1","g164ejpqr43txwp86jj89v2u6hnhg5y2qfdykcw8"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2qKXaN3A/c6Piloco1viSSPuLaKyhr81XIClGqM1szr"},"signature":"GDFvyiuwxGTFIc3DTUexPw9kdYVbHm5GNXKZcsIzmN4hr3LryePpkUTaLrGaT43vFVBersrCh8wEumAd6xOIBw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1g54nytuxczzng4nt2sz84arm4uhhfz3dfrvey0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"zolHdqdJQ/SDMRVhVmbHBCR2BhrtBildP4nsMX2A4JFXALu1/UiZrcFkBI0KWyAgvN5Y0dffGmTpchVWMWJ6TA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g54nytuxczzng4nt2sz84arm4uhhfz3dfrvey0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","coastlike4n",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsCbAaB42rzoilkFELdYI3MDs3jYtVdt6HFjjPMRV08e"},"signature":"dzDUzlAYpifJGUM6S8TBMaCC5pUFspa1LljNmMB9Ft0uyXiIXvBBfeR9XCxSH71k6qHZJtTFUBc2gCCNKK+P0w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g54nytuxczzng4nt2sz84arm4uhhfz3dfrvey0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["coastlike4n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsCbAaB42rzoilkFELdYI3MDs3jYtVdt6HFjjPMRV08e"},"signature":"Turoru+JKyi76L/eTkL9Jhe6p/ygR6zT2g6wydgzx7YSFc1GUpzy1LYw7MEfeOZ7lrlFW+HDfm9M2xWIPGjhpQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g54nytuxczzng4nt2sz84arm4uhhfz3dfrvey0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1653","coastlike4n","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsCbAaB42rzoilkFELdYI3MDs3jYtVdt6HFjjPMRV08e"},"signature":"jTIO9WCbnyqx2RotE+8eCHEWqBBpRkpM+Wn4DjXkVJhBfqv1C2TizNJCZMlQ8+qBwF+EP4qJxNUHUi/meYQX0g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g54nytuxczzng4nt2sz84arm4uhhfz3dfrvey0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1653","1","1","g1g54nytuxczzng4nt2sz84arm4uhhfz3dfrvey0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsCbAaB42rzoilkFELdYI3MDs3jYtVdt6HFjjPMRV08e"},"signature":"HPGqARQc0yr2u2R/N9ZTsvRIyyIeceJPZQSwa5tgz09O2fXzr8Fstk3qT9pq4ifkfjUuOlDAtJnkF8qD2mlp5w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17x60n0kl8emkz44drll8vz0drhyhrc9alpuec4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"XOm/LdRxdlx/TaUJsH4K0pvJqwWibpaOMsNWwW4TywZaH3ZRXEs+wdO6mCxjunVRQfveckF+WA9Y1iTHfbQoRw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17x60n0kl8emkz44drll8vz0drhyhrc9alpuec4","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","plungealways44",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3zoD154q34eGzDt67bTKkIpNKwmCE50xXg+hR2Q4C/9"},"signature":"P0QSKHWAQFRWIwwJIXRB0VhMq46GzjuIqLxUGmLyfiIj/QhFnQgxY/tr9a7M40MrTstp5pjnJWBeldebyspcvw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17x60n0kl8emkz44drll8vz0drhyhrc9alpuec4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["plungealways44"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3zoD154q34eGzDt67bTKkIpNKwmCE50xXg+hR2Q4C/9"},"signature":"bJVXgur4CZ28bUFUwUwtoEskBjL6owv830yvK76jgvFMrfcSLW/zCtU7dOv2GLikXTeLX9sxmLXWxNRnX7sJiw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17x60n0kl8emkz44drll8vz0drhyhrc9alpuec4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1654","plungealways44","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3zoD154q34eGzDt67bTKkIpNKwmCE50xXg+hR2Q4C/9"},"signature":"n4UCS53pHIHqp7ZPVSKq7IcJObzlzUAfKSvlVuXMIMkY7iyIA7rnOIPY944MNkWOq53p4fdpojzFH3gE/BhpWQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17x60n0kl8emkz44drll8vz0drhyhrc9alpuec4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1654","1","1","g17x60n0kl8emkz44drll8vz0drhyhrc9alpuec4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3zoD154q34eGzDt67bTKkIpNKwmCE50xXg+hR2Q4C/9"},"signature":"DpO+uMrVXGF1EaOU80FtgImzsWAiUCByJORUSjocKKNfq6Heq+9sBHe49cZwICxfN1cwgW+wK9uLCR51tGODxg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1a4gde3mzgj9wysa7ml4pzmcp39hrk2apn99yhc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"8gqnZTIXsAxDm89Wuaz7dJp6cCna++VuJx9nPkLI6h1W9cOmHRgeiBYimuJc/bMQySJDUJHf73rYG1rjMjYASA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a4gde3mzgj9wysa7ml4pzmcp39hrk2apn99yhc","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","becauseescapewy",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxGs0oQJBTbTNWtcl4ImT4ZAr7KPxMF/M28avwpl7ike"},"signature":"9TlZBVBWLXfzKM+AeEJixzBtIAVvOTnM4vvUsK9/OxElVryq+vBVFXZBCEugvO3aFyDcMoYuSpxeAC+m38gdAQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a4gde3mzgj9wysa7ml4pzmcp39hrk2apn99yhc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["becauseescapewy"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxGs0oQJBTbTNWtcl4ImT4ZAr7KPxMF/M28avwpl7ike"},"signature":"ZgxYO3bOW2NCB+/py8zFGOxVkQjFDslVYmnRn4mRqpxMwjWhWIMMJXZOFX4lOVH9y9AsnUP8AclDVk56rTEdSA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a4gde3mzgj9wysa7ml4pzmcp39hrk2apn99yhc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1655","becauseescapewy","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxGs0oQJBTbTNWtcl4ImT4ZAr7KPxMF/M28avwpl7ike"},"signature":"S/tZpKaT87EzwesUvFz9mIgJfXU0xM1wFOpjrs0LnI0QeBOxCnOf2FgIOkgRjl2NyP/8iN9HYE473X2d2xx0HA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a4gde3mzgj9wysa7ml4pzmcp39hrk2apn99yhc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1655","1","1","g1a4gde3mzgj9wysa7ml4pzmcp39hrk2apn99yhc"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxGs0oQJBTbTNWtcl4ImT4ZAr7KPxMF/M28avwpl7ike"},"signature":"xeThw8jntDTxbL/EsYmFXSgyKrnIrbFLaHELR2HZ8uleBzgS44OlaXupXYi/RuS6YOGNQESF5biKm2Qyk5LDpQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1p8dgar2tjd90cntmt74w83fvu0dxyvna5dj5t6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"QA1YHPdsyyDlyO6x7GKMm5e2zzbWcDz9ztInFC5NQfwbG4xAv6o4YUhx4X1Yg3TWLSOOQQLxh9cqWsRluMwm0Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p8dgar2tjd90cntmt74w83fvu0dxyvna5dj5t6","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","memorybeefnt",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqC2kHW/7n5OnUp/CvRpzyyHffT7A7XtD3+g/+IYf802"},"signature":"bCr1N0wlnPjstYVyCgdepy7CNezBusalcbJeLv0SHQ9rlTHW7i8hXhjP3LKeKxvHvQZd92ulkHrHLPXnVIvWNA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p8dgar2tjd90cntmt74w83fvu0dxyvna5dj5t6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["memorybeefnt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqC2kHW/7n5OnUp/CvRpzyyHffT7A7XtD3+g/+IYf802"},"signature":"nV0puV4fWidHzZuCpyaN2HbVIbKfQo2NU6pLZzGVgHEj0ez3UCi4AbXaRPIbPQ7nHkzBsTckre8ChJqbefTfCQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p8dgar2tjd90cntmt74w83fvu0dxyvna5dj5t6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1656","memorybeefnt","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqC2kHW/7n5OnUp/CvRpzyyHffT7A7XtD3+g/+IYf802"},"signature":"6bx0V4iASYmgF91AAy8q7pQXSBr2ltFO38AUoreZTAohyeiw8zksEc3b6Xp/gSqJibPjSNO+YaHAbMYeTbuCFQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p8dgar2tjd90cntmt74w83fvu0dxyvna5dj5t6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1656","1","1","g1p8dgar2tjd90cntmt74w83fvu0dxyvna5dj5t6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqC2kHW/7n5OnUp/CvRpzyyHffT7A7XtD3+g/+IYf802"},"signature":"1yFPELdKR5PORTQw8AfPOLLzGVedJ3SZz7Ocf/+8OvEvYSN6wGFyUQVdQ9HQl5hRJ+gx+UcScGxjr4mp5ZNfIQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g13p84ywmn3rydllu8zhs5snt3vuqucc85la7hdc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"DZqDShCAnh2/1b3UreuJBAX5NhbMtKMXMjZ+UQLBuoc1L6Eoe3XSJ44qwusi9d1PCa8HIYpzQXpdkV0ZAhrgvA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13p84ywmn3rydllu8zhs5snt3vuqucc85la7hdc","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","dunevelvetlu",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/L/1FzYy5rpL6R0b5i05aunZx3OJzZeED/SdnSW68eC"},"signature":"/CLex/jYmiMZtRz9nPM/NrXwKl/IlJKAAk9Bm0hD8yksJvS/j1JMgdH01TaEhfe5HC7ADoYQEypOkoNtKaWXYw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13p84ywmn3rydllu8zhs5snt3vuqucc85la7hdc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["dunevelvetlu"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/L/1FzYy5rpL6R0b5i05aunZx3OJzZeED/SdnSW68eC"},"signature":"Rf+Vt7H3PntVOiAukBI4y1uH7Skymyqw/1rF2tt7wZ4FnLzCa1tj72DoAMqFBFZPnSN/LiYpRWy5nDwdoPMoFw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13p84ywmn3rydllu8zhs5snt3vuqucc85la7hdc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1657","dunevelvetlu","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/L/1FzYy5rpL6R0b5i05aunZx3OJzZeED/SdnSW68eC"},"signature":"tATCjeVVX4YTznVS9NOUfEy9gyJoRV42mS0uIdgDFIwDjeZ7eJQY+J8jRdDM8jxadsxG5jBw4tO6jySdES8haQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13p84ywmn3rydllu8zhs5snt3vuqucc85la7hdc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1657","1","1","g13p84ywmn3rydllu8zhs5snt3vuqucc85la7hdc"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/L/1FzYy5rpL6R0b5i05aunZx3OJzZeED/SdnSW68eC"},"signature":"EXeaNQY8dSSsv51rSRS6WwMXYOLhQPc+/WviI6o8SqpVswpFPUJ4dvSJUxyVVvE/ZFgZug6WFMSkbzEsB4BQEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hu9lepzx7fr3m8wscgw6e8fklnzz7xn35mm77j","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"3lGMUAA/1UNSjCzHLezT+/TiF4Iw3ckfpGqXPIzLfN15RE8xWXKHy5yJFFHWWixS6WsSfYTqSMMRS/hTEkLwgA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hu9lepzx7fr3m8wscgw6e8fklnzz7xn35mm77j","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","puritybronze3m",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoH1LRYmni9QE38dS1KBXYUZXiWcvI5Mq1EwMl1K+fRn"},"signature":"OB2Fv2Xvcjk5OgpN8YgMEQXfrqdRqiq72iZVV4hcgAQNvK7AuQyJw4kH5NXV1TQwBZS1Zu6NhLXZuEKnOl/8DA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hu9lepzx7fr3m8wscgw6e8fklnzz7xn35mm77j","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["puritybronze3m"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoH1LRYmni9QE38dS1KBXYUZXiWcvI5Mq1EwMl1K+fRn"},"signature":"pCmdBLZvGBRHZVi45dfC5CHb3lhn5qLGbMLA3eVYgpN5EqN0WolGZW3slCsNqhRX0X/DkRyd2EGBdirINlicNg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hu9lepzx7fr3m8wscgw6e8fklnzz7xn35mm77j","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1658","puritybronze3m","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoH1LRYmni9QE38dS1KBXYUZXiWcvI5Mq1EwMl1K+fRn"},"signature":"uZx6EiCnlSBm254yjRB+zal8VF8CV59BfXaxHOZe7p9mKEkmGv4uTh7mUmZTnMlfnxQED/9pRaGow4tSFeS1Kw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hu9lepzx7fr3m8wscgw6e8fklnzz7xn35mm77j","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1658","1","1","g1hu9lepzx7fr3m8wscgw6e8fklnzz7xn35mm77j"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoH1LRYmni9QE38dS1KBXYUZXiWcvI5Mq1EwMl1K+fRn"},"signature":"mWNSfBHXHMNHIZGh6hxQv8ksrgN1Xny/dUqrpkjRZflxuYkZBg1a2TQsW3lH8lMAR+Ev8rx9VkPD3ZfqUQD+UA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1trunhetpmqsgyh6j7xjsnjw3kdpjhxwepqz2m5","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"4H4voHC7yGp7goSW0Oa9WXb/7vCIMqsjOiPC8xok73dK5PoaYy7m1ZG+6CO8rl9/gmLY4FxvLunb0pIrNdYP8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1trunhetpmqsgyh6j7xjsnjw3kdpjhxwepqz2m5","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","hugeupdateh6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmdR6aanDocH9xMBX8PEg/50dH/+IhNb2mTHomLOcCkq"},"signature":"frGdhORmxcyIFEXbCxRkTz3iiUIeZ6gg88Scjvn04OchOVjRykuouAuQzmkOwjFpkQVke4rCvSs/mKYtEbfq5g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1trunhetpmqsgyh6j7xjsnjw3kdpjhxwepqz2m5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["hugeupdateh6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmdR6aanDocH9xMBX8PEg/50dH/+IhNb2mTHomLOcCkq"},"signature":"jYdBkoD/XCEUCXyIITA7gTFyZn7bKFz+rsfY7XryuLBANNDMq0DL+UNJ6JchzwWxQ+Bbg5mVikJb3WZ6O4e+EA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1trunhetpmqsgyh6j7xjsnjw3kdpjhxwepqz2m5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1659","hugeupdateh6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmdR6aanDocH9xMBX8PEg/50dH/+IhNb2mTHomLOcCkq"},"signature":"/XBQZHc1SxNVM2OlW78zbOGyOFvBSfhpOl+g2ApMuW4/zgw8v9dL087yeEnsoV8alUzCV5WTDkF1VIVj5+aQSg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1trunhetpmqsgyh6j7xjsnjw3kdpjhxwepqz2m5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1659","1","1","g1trunhetpmqsgyh6j7xjsnjw3kdpjhxwepqz2m5"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmdR6aanDocH9xMBX8PEg/50dH/+IhNb2mTHomLOcCkq"},"signature":"kCqkw6n8d0cEhJ4qORCmktqKGDGhE3Z8vSnFBO3RdZM6zgxbGXl8tpxnWuK71qquMTCTOnsO4XOgkUsI5qYPiA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1k4qk6tt0d4ku3kmp7vwylukgmdgzg3ae7jtavu","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"9BoDGXdRkN8E8LAho/cy9VzAD8eIQk1AcrmcFds0uyxLLzj1+UHvsFxlc4DNjpmzwgGklr7kf6ne2gjYLIvhrQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k4qk6tt0d4ku3kmp7vwylukgmdgzg3ae7jtavu","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","weekendhistorykm",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A214Dtbb6UowprF4NMKD7RAWbF4czAWmruDcypKVLSy3"},"signature":"t/Qm0+7xcpeLO/kiwLMjP8nWXhUx7tVKX8pIXStxe4A88JEfHNwvC8SA8ectS255IqujvQC6gbHtiPMvApBGsw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k4qk6tt0d4ku3kmp7vwylukgmdgzg3ae7jtavu","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["weekendhistorykm"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A214Dtbb6UowprF4NMKD7RAWbF4czAWmruDcypKVLSy3"},"signature":"deEphhdHjY7O9/rW/rmsFF/4heT29sF0sNSe85/uBWl+4IiEiZ1QYJsvB3kVE4edkx+ETFq72FbP+0Vk/YfPtg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k4qk6tt0d4ku3kmp7vwylukgmdgzg3ae7jtavu","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1660","weekendhistorykm","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A214Dtbb6UowprF4NMKD7RAWbF4czAWmruDcypKVLSy3"},"signature":"dOpPW7L8a4CljjT2cuvB2pjASXAcpyBCnP79ULWfUjQiv1j64mB+F5rtmw+5WeDfQVj8R27mc7k1Z/WEwSDq1Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k4qk6tt0d4ku3kmp7vwylukgmdgzg3ae7jtavu","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1660","1","1","g1k4qk6tt0d4ku3kmp7vwylukgmdgzg3ae7jtavu"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A214Dtbb6UowprF4NMKD7RAWbF4czAWmruDcypKVLSy3"},"signature":"ZH+fnSRmGK1pKY/aMVwBTYhiNN5UPL34BAfkErMxeOsfYne1ak6ii7kwWctPMBwJ5+QhP4bPlNK6W2K2R4moMQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lxjxpjkesq2a6neqdxyh8q62d798s204vwew0a","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"IL+EAvEYZyEqJZ/HBn5+4EYvu6yW0bmOXglRGk/QQDgv5Yu123o9/E6dSIrM42338An/XWrdk1Cef1xph9tbwQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lxjxpjkesq2a6neqdxyh8q62d798s204vwew0a","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","papertiredne",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+YYjX6oKJqhzB4pxsn7AwXwR9ehHjK2HSRsXLmwIcI+"},"signature":"gL4RVKsOB85EOkwonDr4Rfma4RtFTmrp8+MI4prqVNgFnFwFEOvOVFgwI/LQbC/pcRn+MyAMjc8a3GcHK9SNHA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lxjxpjkesq2a6neqdxyh8q62d798s204vwew0a","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["papertiredne"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+YYjX6oKJqhzB4pxsn7AwXwR9ehHjK2HSRsXLmwIcI+"},"signature":"WOou0xXvLjbxPUij2Ax7CX1seeRAuyvG0vrhmmoMGI44vXjP2bjqtYZ6Vdgl0/EMbBaxCc5yZGGUFWHmAO4IyA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lxjxpjkesq2a6neqdxyh8q62d798s204vwew0a","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1661","papertiredne","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+YYjX6oKJqhzB4pxsn7AwXwR9ehHjK2HSRsXLmwIcI+"},"signature":"wwrqViMhHaRpvGF2oqiDFMKkNT8wR4W0H5Xe4iPLD7ctuXYzeH+KswDvPU8OItGs21WlD4ETDBfKbhz+4OQxyg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lxjxpjkesq2a6neqdxyh8q62d798s204vwew0a","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1661","1","1","g1lxjxpjkesq2a6neqdxyh8q62d798s204vwew0a"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+YYjX6oKJqhzB4pxsn7AwXwR9ehHjK2HSRsXLmwIcI+"},"signature":"yWvmWAoLmevoqykUAnzXeN/RxDFKVU7EQwtLCQw3qjcBg2saDrjshbv9i+jl8sOblTOhcMGTRTzxbze3CDRuWQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1drqnehsu2zqz5nmr03srgf7lt4fglgcu2he7k2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"DVKTZNJqRw/KlXaryDHbcKql0VvaS2gQpeEEAH5B7NF8PtWT+56He6VVXnq0r96oxzleoy9Q9n97B5HdYgW/OA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1drqnehsu2zqz5nmr03srgf7lt4fglgcu2he7k2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","husbandpassz5",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiW+2B1Nh4OqeFIzS0I1hQtuvYZK9xhAOaSzoinAECnj"},"signature":"d07Wk2oE6rgD/iL2IFsiehN+80TXoax1/e92C4shFXtP/L6mc45SmU7xsGJ6FJ+OMCmJOXusepnqXOM9iNWxNg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1drqnehsu2zqz5nmr03srgf7lt4fglgcu2he7k2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["husbandpassz5"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiW+2B1Nh4OqeFIzS0I1hQtuvYZK9xhAOaSzoinAECnj"},"signature":"Ze9Yax2XysaAMTfTQMr/jGeZcGZm4r7S/mgiuS35FDAcDjlMZAf5mW3bUxBWzVyD+MOqe8zG/3CeEv2Iph6J+g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1drqnehsu2zqz5nmr03srgf7lt4fglgcu2he7k2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1662","husbandpassz5","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiW+2B1Nh4OqeFIzS0I1hQtuvYZK9xhAOaSzoinAECnj"},"signature":"vYUkgP88WG5AuHRxqPIAcjKp1uQstqcKi8F2JjgZX+QGo94QCEPr5bMgo2kZ7sjEuzcF9ARjaaAlM5sgRDEZMQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1drqnehsu2zqz5nmr03srgf7lt4fglgcu2he7k2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1662","1","1","g1drqnehsu2zqz5nmr03srgf7lt4fglgcu2he7k2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiW+2B1Nh4OqeFIzS0I1hQtuvYZK9xhAOaSzoinAECnj"},"signature":"xIEs8ID7Z6ayvFATOp4Pll9cDNBkQ6rzSyPk5BFsO81lZB9z47y39STGaxOJGYlTdn2NsBM095sSF0LKC37gxw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xd3t3c93zm979um9vanqeclmdnktzlxs96ppdc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ew+PRJN00w0B0NcJZjceUFePyzRCrYzOHr0GPWo3SkoYtcHCTLMXoIDA60BNJ0Qj+AH5g1B6+7Zlv7dU5ezanA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xd3t3c93zm979um9vanqeclmdnktzlxs96ppdc","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","modelelderum",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5QiaZ07rqK6MZkOlwMZY8PZHPV4DWH1Voz+uH50WSyj"},"signature":"nONhvbL9VFBcozOAiNLhMxEyU2uU48yZ9Amw9XN1Bzl/EFb/ejwDtbuUUWlAtRdFjLNAaLIKnYmLN1RApRFP5g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xd3t3c93zm979um9vanqeclmdnktzlxs96ppdc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["modelelderum"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5QiaZ07rqK6MZkOlwMZY8PZHPV4DWH1Voz+uH50WSyj"},"signature":"UaFb7OliHMVUHRn+TTRHd/zYVostvjdlnA0j1BcT5xZmxgVendkQpps9hvdfU80sYk3NG6wgbAHFrjKVK4FPwA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xd3t3c93zm979um9vanqeclmdnktzlxs96ppdc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1663","modelelderum","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5QiaZ07rqK6MZkOlwMZY8PZHPV4DWH1Voz+uH50WSyj"},"signature":"QBCUV7oSzUMNwPz8oVIjoFeVJGg7eCgYjAm+uEqo5HldyuL0XXgmS6zLsuWAjcYywXHLC0hnBWy5XoEBA8XcCQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xd3t3c93zm979um9vanqeclmdnktzlxs96ppdc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1663","1","1","g1xd3t3c93zm979um9vanqeclmdnktzlxs96ppdc"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5QiaZ07rqK6MZkOlwMZY8PZHPV4DWH1Voz+uH50WSyj"},"signature":"nraEfdGWeVYWugF8Zk4pL5WYE2TU1dg0lzLWLhI2NCM/SNbnlTciR4vAEQ3DPs72v1GlHdriLP3VyFjRgWMuFw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12wmptvwyntnej7vexaxxkpdw7r3kyxukr98y6x","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"CHmiHn0mZdaEk/iangZBDJDLZjyOvwOYsQIx1T69kbB4VN2qSWg8oPVqw+oDkSwUFEE10/wTigoik/FG/4qBlg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12wmptvwyntnej7vexaxxkpdw7r3kyxukr98y6x","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","truckensure7v",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aw3ssV+88xvSGuXwjBJGmKtdbYsQRpoDmM0Pw5+PuJLl"},"signature":"CdSdmyafBSF27/cHBuMAQTYzaqjjkqu4uA+PeQbBOlYsUARyLhd3ncCnT3h0pSZ6CfNG98UvJ4PwBYIpzM7FGg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12wmptvwyntnej7vexaxxkpdw7r3kyxukr98y6x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["truckensure7v"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aw3ssV+88xvSGuXwjBJGmKtdbYsQRpoDmM0Pw5+PuJLl"},"signature":"AtXR5EGlU7VKHn1MboXQ8hxV6qSPI7JjUgOk7nagFT11UA6VrclZflVirZWnvhGflahgW3T7Ov8Gl12xfRjJ7Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12wmptvwyntnej7vexaxxkpdw7r3kyxukr98y6x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1664","truckensure7v","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aw3ssV+88xvSGuXwjBJGmKtdbYsQRpoDmM0Pw5+PuJLl"},"signature":"1tsl1t+vJgh1kMnKbAONlmWiVwefL7uxdM/vOKfRHtc+IbAijy0NnAImczPRQcTYAIRe7tQrxRPrRaZvE7vRuw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12wmptvwyntnej7vexaxxkpdw7r3kyxukr98y6x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1664","1","1","g12wmptvwyntnej7vexaxxkpdw7r3kyxukr98y6x"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aw3ssV+88xvSGuXwjBJGmKtdbYsQRpoDmM0Pw5+PuJLl"},"signature":"BYR/SBnyZl8aEGEka2VRCUAN+U75QYpAJREtC3cfFYxLvvCNBa2JIo7Pi/KdNkkZeIuUmSKDTLUb8dPlm+XqUw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g185yp6v6jnfa8zj9qfhnpchpr68lqnl2t7gu7kg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"hDTkgWcxx/dugLsGuS/YPW2K+bom7E0faqhwOjWJYSsjSHDPh785pLxzUcobX2FvDuiql+adl6vHzTt4vH0fiA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g185yp6v6jnfa8zj9qfhnpchpr68lqnl2t7gu7kg","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","waitswordj9",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+dMBcfXGUXmGq7Y4UloP0+5+OyUNIGd3n6BQkewpI3N"},"signature":"/FYJ+8upsUvc9FCg/luZXsJfYUWOXGff7BtXpFnONXwYHDC/nSRAYwTUerB1e5bJsvzte5A8f/LkcxF/VhsgKQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g185yp6v6jnfa8zj9qfhnpchpr68lqnl2t7gu7kg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["waitswordj9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+dMBcfXGUXmGq7Y4UloP0+5+OyUNIGd3n6BQkewpI3N"},"signature":"BOU72yTgaEmddSgIooo4dz2EwT5yAuTTeOh8mL2vSSFKA+PrMNRVsDMV9HqBSPBYdqLxCi4RwLOXQJqhHIZYaA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g185yp6v6jnfa8zj9qfhnpchpr68lqnl2t7gu7kg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1665","waitswordj9","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+dMBcfXGUXmGq7Y4UloP0+5+OyUNIGd3n6BQkewpI3N"},"signature":"gvHDKjaeC7bVhj5TPRtQP+/3NvtwJOhO97auLiq7asAuEAdk1T7c5MbRT2sacMgjOuQmymuAximBmJqG9eJwaA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g185yp6v6jnfa8zj9qfhnpchpr68lqnl2t7gu7kg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1665","1","1","g185yp6v6jnfa8zj9qfhnpchpr68lqnl2t7gu7kg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+dMBcfXGUXmGq7Y4UloP0+5+OyUNIGd3n6BQkewpI3N"},"signature":"jRl3n8uZa59hVlj/n6HtTchDQFvXFjxLY2zTYoBfJQ5HfD0xn6Apbne2JrFzcoPY8X29VMAGI9dutZJ40ICqEg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14pqgwl6t3ez5s3g2srm5p2u3f6xe6rlc6mws2v","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"y9BsrYq18JO9XmSFh/tbAUmN5xVgdLX9s238xoCQevdJ8aBUzu78jFJRPdNtXmjhkBmcryx70Xd0ogh9sfh4pQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14pqgwl6t3ez5s3g2srm5p2u3f6xe6rlc6mws2v","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mercygrain5s",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9I79PJkNAI3fdxZb1R1LVY7uvn+PLPjGukY891FY4y8"},"signature":"2nTI2lKR81ukUUx0jYJ12J3b8PFsL8FDnH70SzkheN1AmbTV8M/ZYOcJqjxMeUVc/efcpIRHKA4Zo0hpKGCvKA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14pqgwl6t3ez5s3g2srm5p2u3f6xe6rlc6mws2v","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["mercygrain5s"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9I79PJkNAI3fdxZb1R1LVY7uvn+PLPjGukY891FY4y8"},"signature":"+ZSM5P/00LxGIHo8snHDxvxfjN7EWKOQiq2rBX+Bm9Z3FF6/QfXDQBaMF2ZvvdGPYLE65OsGGPxaJFRtsfEbRQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14pqgwl6t3ez5s3g2srm5p2u3f6xe6rlc6mws2v","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1666","mercygrain5s","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9I79PJkNAI3fdxZb1R1LVY7uvn+PLPjGukY891FY4y8"},"signature":"9XVkDt+H7yMdTe47qNIHywLYUX7xc3kXu57C+g+SiX8AZY9twtqb+38Mfx81NPsPNg/F0ifeW8M0YtzmZF8a5w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14pqgwl6t3ez5s3g2srm5p2u3f6xe6rlc6mws2v","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1666","1","1","g14pqgwl6t3ez5s3g2srm5p2u3f6xe6rlc6mws2v"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9I79PJkNAI3fdxZb1R1LVY7uvn+PLPjGukY891FY4y8"},"signature":"BRYI2+CeMzrmihReKsTmDwfY4Qg96OV+EGNSI4pEH0xOgISMo8eV4R2DUHxXI6GO9BN8AYr/ve4v0KW/M6yb8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g143n40shtt429sp38njppdvu36h3ygrkh9s7m7r","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"7W2R+DqNrAZm++TsMVKDE5yEJr3ICloLZBfJo6RyKJIn6Vqj7y4V6q5Td5k0P8AEZEUXjc91mgE/RthBfSthxA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g143n40shtt429sp38njppdvu36h3ygrkh9s7m7r","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","eaglethrivep3",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTPbvS4a5wz8N2s/GyJ7ejDJnpiD9FCQf8iTxObq8gZ"},"signature":"nTZ1e561BRamdDsMngGpIpmQMKnp2KyLe6fQr0A+ieM7KkknqWoK9TC7BY1pR6H5Esud+GmVVKeceRfz9a4DbQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g143n40shtt429sp38njppdvu36h3ygrkh9s7m7r","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["eaglethrivep3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTPbvS4a5wz8N2s/GyJ7ejDJnpiD9FCQf8iTxObq8gZ"},"signature":"g1Eg9LYzGCg48/UKwmC2tnmkFbzMqzI2qCfkSLHb85oi1VQYPpuj0Kde4U1wStzGD7VYohQ/uSf96j8JMdL/tA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g143n40shtt429sp38njppdvu36h3ygrkh9s7m7r","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1667","eaglethrivep3","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTPbvS4a5wz8N2s/GyJ7ejDJnpiD9FCQf8iTxObq8gZ"},"signature":"Bd8zU0ObXkrgFxz3Pag7kJ3XVUPj1h/YXItHRgLapDQ7nM6rfqZmsnrDjFVZybSYa1Rfxat8Bdwgkum0r4sGCA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g143n40shtt429sp38njppdvu36h3ygrkh9s7m7r","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1667","1","1","g143n40shtt429sp38njppdvu36h3ygrkh9s7m7r"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTPbvS4a5wz8N2s/GyJ7ejDJnpiD9FCQf8iTxObq8gZ"},"signature":"dPGA3ys1i2cAocWu6l2BEIIsp3ooqa84xsa/HRE63n8VYlzKtsJJR872gdIJ5sV1L+9+LkEPgBrekjQYv8rDLQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1sf5ktunzg4j8jqa49m9fsd44htlqsaaxhesu5f","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"icRViRDIG58y/RgEfMeNVY/Ga5F/CQk1lW0l6VdX0fMevxqjltQeGKsbFXEwaLVoSK3K60Z2X0Uav1XchpqTQg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sf5ktunzg4j8jqa49m9fsd44htlqsaaxhesu5f","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","asthmaabsurdqa",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax8HdHXP+VTq0pEdSLZkeFu6lUv1C5vZ7al0E5v0v7+R"},"signature":"TzM1FIU7rq8fqLW5S8b24JLlHVC3JZHs2y2rEKB5VWZ+u0B5m5V6MdHl4axPbyrPke8lq9KyUli8cWjkIEFHMQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sf5ktunzg4j8jqa49m9fsd44htlqsaaxhesu5f","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["asthmaabsurdqa"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax8HdHXP+VTq0pEdSLZkeFu6lUv1C5vZ7al0E5v0v7+R"},"signature":"7sdbJGECgW018ZiTQ3QXDwSinLugiGQIIqkbrW29emUqkeSbucvFHC0ho+wsEHZh8HvSLQ5peTVQSsqNlL2jSQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sf5ktunzg4j8jqa49m9fsd44htlqsaaxhesu5f","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1668","asthmaabsurdqa","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax8HdHXP+VTq0pEdSLZkeFu6lUv1C5vZ7al0E5v0v7+R"},"signature":"QDJ3cc8xT7B+8PnBqFiFeW6sL+C8nbNqgZfQwrBHZacfWdTEUTsaGpI94DWpQCci6Gh38YRKW5sXT/G8tQc3Uw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sf5ktunzg4j8jqa49m9fsd44htlqsaaxhesu5f","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1668","1","1","g1sf5ktunzg4j8jqa49m9fsd44htlqsaaxhesu5f"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax8HdHXP+VTq0pEdSLZkeFu6lUv1C5vZ7al0E5v0v7+R"},"signature":"Am0shj8ycL+cbbMMpfeyD2pMC8votwgqF6YQhAih8n93y9BTCGw8oqjxnjzYRaIB5hGXPJaIrt96+q3eZooqrw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19ms4903unkqjnqjz0cag37ljqgl97xstc7ev2p","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"AAMlTlc147iKLB3bNtYj0pgUjTYovZzQbRGOUHKKtWlyGLiGxd++K7bmL146KqFNdGgitEYxfUTz+B82b0hlAA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19ms4903unkqjnqjz0cag37ljqgl97xstc7ev2p","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","indoorelegantjn",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au9zj+0UhzDv9bL65zeS46RecI0r5j8EYK17l0xPLAZG"},"signature":"omwYGxaUMfmYtPNDPh6vHtrUPgmBSwth1MG4Bs4VdNJYPwQ36S4qknWkzvx0+LcQU+vnzvIy9PrpAhB8I4ZIBw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19ms4903unkqjnqjz0cag37ljqgl97xstc7ev2p","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["indoorelegantjn"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au9zj+0UhzDv9bL65zeS46RecI0r5j8EYK17l0xPLAZG"},"signature":"6Z0AzHSY+bw8u70nqz4PCacOj8mSu1WheeWlIfsrIJdirLkPdzwbR4FANMMv2UjVgr2PaxG8Z7fYX6uvWhprrQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1wxp05at40cq7gkcz0rjqm5uhmlljh2zfqqn4l8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"RAz5x3QZRnf7ph+zDA+gtvvD1zbvc7FeEYl+62NsVrp6Iud9JlUWD6aEPBXwzNabMOMZe1RS78Ri85Uiyq/8wQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19ms4903unkqjnqjz0cag37ljqgl97xstc7ev2p","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1669","indoorelegantjn","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au9zj+0UhzDv9bL65zeS46RecI0r5j8EYK17l0xPLAZG"},"signature":"nmgr6FxYpnFa4cfd49OPpOiQHStnA4Sw6+9GFVj2dWhR8FexTghyHhRcuyge2pD21Yb8mBzHQDlYvR/N5Ndepw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wxp05at40cq7gkcz0rjqm5uhmlljh2zfqqn4l8","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","routeorderkc",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhIFjXtGypnZLlrohisIwQsMt3iUTzAm6IDOO7b1BCXq"},"signature":"HuDkPOSnW/LzYwL8n3BvCDZg6m2lOqNHHgfivHNKLkpjqvmM1Etk65/pCCKAfyAelX79CfiDtEKY+tg59+v6CA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19ms4903unkqjnqjz0cag37ljqgl97xstc7ev2p","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1669","1","1","g19ms4903unkqjnqjz0cag37ljqgl97xstc7ev2p"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au9zj+0UhzDv9bL65zeS46RecI0r5j8EYK17l0xPLAZG"},"signature":"xMkboJVCbCRXyFU3T0kDiEyZxOjU/ncz1uXupvktO952FumbGMqmptUN0IHpexlzbW3JxGUZxtnA9AT9C3uQVA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wxp05at40cq7gkcz0rjqm5uhmlljh2zfqqn4l8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["routeorderkc"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhIFjXtGypnZLlrohisIwQsMt3iUTzAm6IDOO7b1BCXq"},"signature":"kwwof1rZFzTUhSorxh4F/KpdRwhOtZCgbp+QuhNo6vh3tuGZVvhkhHXtHEpyMTQhp1EDHqv+8Ggd+umrP1RDqg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wxp05at40cq7gkcz0rjqm5uhmlljh2zfqqn4l8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1670","routeorderkc","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhIFjXtGypnZLlrohisIwQsMt3iUTzAm6IDOO7b1BCXq"},"signature":"O1s2jPnIl1zq+eQlMIy58C2U0f19v4rC0LICC6s9h082Oy6OluNkvRcv0eo+BepGXXHgCAUaNlD9HkBq5Yg98w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wxp05at40cq7gkcz0rjqm5uhmlljh2zfqqn4l8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1670","1","1","g1wxp05at40cq7gkcz0rjqm5uhmlljh2zfqqn4l8"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhIFjXtGypnZLlrohisIwQsMt3iUTzAm6IDOO7b1BCXq"},"signature":"g49+vIjo8TnVBcBAQCXy4cj/cYaKDPe0It1qZew19MAknKsaEN1ZUmAPJrYm43w6r2vu5vHBiLIXt3tEPftVSg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g187svwlc6u4kw3d65u9mg8lz0qlgfvxaemd5cwt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"j+VXv0Hn6n5vhofhsCnPYW5/JTWMIETkjdk7d6N2j6p0FW9eKj1fbF31S/j5RYkNMHJWRpYDFYEsOlfxqdwcuA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g187svwlc6u4kw3d65u9mg8lz0qlgfvxaemd5cwt","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","vaporsprayd6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ahqj+Ehx8aAqJ1+8wgldV7+wYUBMBjLk6l3rabvPEJUm"},"signature":"FJZCEqr8sKpiPzXSu8IfC9+2oTzS/bYZ8SIoZtR9dChqHjZQw/N4SvYiYzSgRcj9IFQQjAtHqE1an+t7LTcmcQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g187svwlc6u4kw3d65u9mg8lz0qlgfvxaemd5cwt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["vaporsprayd6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ahqj+Ehx8aAqJ1+8wgldV7+wYUBMBjLk6l3rabvPEJUm"},"signature":"52C4cCsJvN9qdCoKxGMFobJjy828uBzDDlwaVcBZ0BVqfWOjcKJvHM9eV/NHSTYO0O2YG+HpLdJ5ljv5uCZtlQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g187svwlc6u4kw3d65u9mg8lz0qlgfvxaemd5cwt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1671","vaporsprayd6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ahqj+Ehx8aAqJ1+8wgldV7+wYUBMBjLk6l3rabvPEJUm"},"signature":"rD7DhuabAbvNady8NjjKcew03UkjTCuy3nXw1A36H6t20RBom5afVF9WW+TTQnT769fYzeb5dJXoM/Ck2bHp0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g187svwlc6u4kw3d65u9mg8lz0qlgfvxaemd5cwt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1671","1","1","g187svwlc6u4kw3d65u9mg8lz0qlgfvxaemd5cwt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ahqj+Ehx8aAqJ1+8wgldV7+wYUBMBjLk6l3rabvPEJUm"},"signature":"I0PHc9SHT8FAg6mIVT9ATINo11r6Jk6MVVlPwSjqVlxc3ZF5YOvcOvSTsDWbxbR+DL8eIeXQ/g/PC5BgglZZ3A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1emqpcavkq7n77fexphv6x48kvuxp97lpcezn3q","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"+Ro1CEVIUjLTpuQAscUpRRBSr3suQ7lUDfaiIJL5yMx+eroGC2bPFFrevGwxV3LAK7zUE5Zdu3NjHs+UqaotGQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1emqpcavkq7n77fexphv6x48kvuxp97lpcezn3q","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","pelicaneggfe",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aka5IfsxqJuasWOEa4gYh7J7rPoiSjUCZnXs4feuP0aT"},"signature":"B2CZR0rS5kIqvYa7LEiabgADLF/YsThCidTJKEdUCHYViSc8Vu6+u4QHK7OhoglCv/7vGiZqynSu+fWDYzVeKg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1emqpcavkq7n77fexphv6x48kvuxp97lpcezn3q","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["pelicaneggfe"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aka5IfsxqJuasWOEa4gYh7J7rPoiSjUCZnXs4feuP0aT"},"signature":"B6oIT8LEeeiboOPLwnpip6VfrTSmEBrA5ZLfAxY603xkXxrtJkFMFHHw6xSbjcADZeJe58/mT1YXkQGUdVV2VQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1emqpcavkq7n77fexphv6x48kvuxp97lpcezn3q","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1672","pelicaneggfe","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aka5IfsxqJuasWOEa4gYh7J7rPoiSjUCZnXs4feuP0aT"},"signature":"ksfMuX5nChPIhz2Yj6tMQmM4JT+/CfrjNtA8QV81OedirWj9HoQb8NLWuS3YtlFe74mnEt3vTnW52DKU4ZVDLA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1emqpcavkq7n77fexphv6x48kvuxp97lpcezn3q","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1672","1","1","g1emqpcavkq7n77fexphv6x48kvuxp97lpcezn3q"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aka5IfsxqJuasWOEa4gYh7J7rPoiSjUCZnXs4feuP0aT"},"signature":"q2M0TbKM5Qr8zvPYZTG4lRuuzdOL+YT/Yp5PGJk42ZRkrteFxG+twByDERvsu7ESwjn/G1ln4IWway89+UTgZg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1c4w32d5yphmzqahcvlyw2ahpy3un3alf9n0xt5","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"jy8mBkzY41SiB8pmNeBOTzIqRFHAV/dYhKVzM/VsMLscoftTGOMA6Es0Tk2NaaIeZU6PxdS8j4kM5tSezclLOw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4w32d5yphmzqahcvlyw2ahpy3un3alf9n0xt5","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","humordecoratezq",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtSbuAj7QN4olwZ5fnDQ6cVcD1aaOTBzQvubAo6f0vp/"},"signature":"VHesGqJGMcKis9RG5NT1nCWzWQzo5zO5r4nEKdUd9Fo1+qQtnii63dnNNf+n0wTs2y9ipu8C6nSGgvzbvqbs5A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4w32d5yphmzqahcvlyw2ahpy3un3alf9n0xt5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["humordecoratezq"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtSbuAj7QN4olwZ5fnDQ6cVcD1aaOTBzQvubAo6f0vp/"},"signature":"W/emLG33hvcm+MsnjkV+04W822MbRDl32AuwoRqw0+BJzElUzno2gzympmRo1MKDSG7recQAROju3jCeB/QMpQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4w32d5yphmzqahcvlyw2ahpy3un3alf9n0xt5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1673","humordecoratezq","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtSbuAj7QN4olwZ5fnDQ6cVcD1aaOTBzQvubAo6f0vp/"},"signature":"/OUPEmG18n+7C8sO1bsbL04t5rSTK4EYYYeqIkkavEFh8gQUPTUOz9KCbzl/79pzZRKPUq1Yz+Zfmfls+aky/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4w32d5yphmzqahcvlyw2ahpy3un3alf9n0xt5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1673","1","1","g1c4w32d5yphmzqahcvlyw2ahpy3un3alf9n0xt5"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtSbuAj7QN4olwZ5fnDQ6cVcD1aaOTBzQvubAo6f0vp/"},"signature":"AFPPWMFcb0NMDeLKvagx9csHIu2vKP95tazajjwHhPF2ux2+eIj1g9Y9pYt+6GB3m04lqDhi0q6V17FjO8nB0Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1s8wj2wwvsc6tkzsjwfrzgn0m4g0ce4qyw38gtj","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"BB0iorgRNdFjNKSwOPIuvRZRvnst0YAr6vV3KRiz/N8LJ7QHut+iK+UB7FFtV91Y2LYG3bUW9MwuOlZrRU2ETQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s8wj2wwvsc6tkzsjwfrzgn0m4g0ce4qyw38gtj","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","flipjustzs",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7wLinE2cYyz6okL4P9QiFXwZd8s4K+s+7PULA7xZ+me"},"signature":"DtFuuDEbYl2M19DNKCZcMaFrmrLfQKWGqyhKOF88++x1XjQ7yTlo9oflaabij3+6I6VXG4GyEd0h2CuGPmaTdA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s8wj2wwvsc6tkzsjwfrzgn0m4g0ce4qyw38gtj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["flipjustzs"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7wLinE2cYyz6okL4P9QiFXwZd8s4K+s+7PULA7xZ+me"},"signature":"P9xhszMxTWLI7PqZCoyJyJgGIQkF7E0BKL7OxKTSQ+MQJ6djVgFHMVGeik20EEPZXuOgLh+i3DyBZ6oK5lyGhQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s8wj2wwvsc6tkzsjwfrzgn0m4g0ce4qyw38gtj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1674","flipjustzs","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7wLinE2cYyz6okL4P9QiFXwZd8s4K+s+7PULA7xZ+me"},"signature":"KEGzA2sVkpWCvmKYogr9MAjEVzXNEnloCP1vb5MvocRaRNNM9OTh4mKMvXkmGtGVr3Zvzv4rqMeTrkct2O80gw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s8wj2wwvsc6tkzsjwfrzgn0m4g0ce4qyw38gtj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1674","1","1","g1s8wj2wwvsc6tkzsjwfrzgn0m4g0ce4qyw38gtj"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7wLinE2cYyz6okL4P9QiFXwZd8s4K+s+7PULA7xZ+me"},"signature":"oCY/X3Rktsq01aRHKl2Z1wLhZnJlroJpxVsnfuDV611EdkwEPpM72i8T/udRVgF2yaPB3PAwLruuexpkQAiiDQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1tty6yln3guda6j7f8vtlh58fwgp72mm7vjxjq3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"+dMK8uyt4CcVjGWK06I4rb8pbfBAJPl/MDhb9g8/vXofvkQO+MshpDqScnKN0knYwVWypSAS/erHdRhqmEPlhA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tty6yln3guda6j7f8vtlh58fwgp72mm7vjxjq3","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","tissuesurej7",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzlP3X1igBKXUT3F2SvfNh11UFWNnNR+o+ersQ8Eo36c"},"signature":"5j582zIdCNQMpkC69zBnJa6jLespDjokhidS3xyaubEektg0Pi4z29A90JzAlVb6cXVNBOPITldqwJWOTbMl/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tty6yln3guda6j7f8vtlh58fwgp72mm7vjxjq3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["tissuesurej7"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzlP3X1igBKXUT3F2SvfNh11UFWNnNR+o+ersQ8Eo36c"},"signature":"wpeMG1olH5FN+BAGFEfoBlKVfUDf/uCo/MOGnCBTtDQRgifNfgC/3o2UXKBaZTanmsdxPa35l59/odKdenyCGA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tty6yln3guda6j7f8vtlh58fwgp72mm7vjxjq3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1675","tissuesurej7","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzlP3X1igBKXUT3F2SvfNh11UFWNnNR+o+ersQ8Eo36c"},"signature":"n/xvmihkZvVKDyxeR86U/QPGBEslEJeY9Nq5Akg/cy5y/RYnd8PsKEK5GD6XA9tyLIzASujxpmvR63DpIuP7oQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tty6yln3guda6j7f8vtlh58fwgp72mm7vjxjq3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1675","1","1","g1tty6yln3guda6j7f8vtlh58fwgp72mm7vjxjq3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzlP3X1igBKXUT3F2SvfNh11UFWNnNR+o+ersQ8Eo36c"},"signature":"NEXfEomVLKZsRxzE4itqhrXXNpe6aiKjPgD4vqJcDH8wI0D1Hxe1WRmyoTBBuDutORLXlccaUdSSEUixh6GJ7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1mjuzx50nu6pa0fpn9pre7h4qhhc5ftamjr97dz","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kpJikQwX/uhpA/FP9bPDrkYsU7FnFI8HDn9wS7VA4B1BhkK2MXFlXgrbs24PE/4AEnoOiT97IPke59obnkmviA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mjuzx50nu6pa0fpn9pre7h4qhhc5ftamjr97dz","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","goddessweirdfp",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArwA1s9vrM0m+/FwkSX4/kdajaAlaTPsKMUQnJlmOh0J"},"signature":"te0p2bnpSYPZnxYTapiqOSI+9rNhZ7gBKB1k2xIOJzQ4BIfwy8UOtSvUuwrb4fbrcMMbbnpdU/7KIkn3maOW0Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mjuzx50nu6pa0fpn9pre7h4qhhc5ftamjr97dz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["goddessweirdfp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArwA1s9vrM0m+/FwkSX4/kdajaAlaTPsKMUQnJlmOh0J"},"signature":"LBb24PH2mxwrm0ngKjC1bLHdXih0s3a/EWIQmOH54kZPy1wMeize46xzHnnNI++YI1vvVyjn/seeb4/+257gBw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mjuzx50nu6pa0fpn9pre7h4qhhc5ftamjr97dz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1676","goddessweirdfp","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArwA1s9vrM0m+/FwkSX4/kdajaAlaTPsKMUQnJlmOh0J"},"signature":"zlBMcHv9pBcOjYl5pA4ETYZz8hWx1wVQFOBtGTHQEZo6R8ddTfMNcUbTb6IdePqTgZX41jyBa/yRStuQpXAGsg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mjuzx50nu6pa0fpn9pre7h4qhhc5ftamjr97dz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1676","1","1","g1mjuzx50nu6pa0fpn9pre7h4qhhc5ftamjr97dz"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArwA1s9vrM0m+/FwkSX4/kdajaAlaTPsKMUQnJlmOh0J"},"signature":"bL2VApOEpbatxHmEpdpi3K0ZF9tu6u3ladAhiYSFoN4OP2VlDg+KPBV+cqCTlvdrE9WDlM0M6GG/9c5E6FEOxA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1uwgr3kdnzmlt6ryq3antvhdmeqjtatuyk4vapq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"xh/bOa0AHWG0Um1zdLBtZdUBsL+T2n3XlFCFWtHpT5NpeXAY2mp/E2gMea/aL2xVeAAaUAVexcI5d9uTJRiiqQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uwgr3kdnzmlt6ryq3antvhdmeqjtatuyk4vapq","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","merryhelpt6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuwWT0CTm9WyE2lhb69JbPU9wZgZ56zVReK0okjVeC1+"},"signature":"OsgBub+9cTQZ2f09CVEUCsM3oQ5//Y1+Ay8xYQSxSWAy4/hg182Y+XHEeYF7Svs5P8fpf8T9zQ41tgxua8uPxg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uwgr3kdnzmlt6ryq3antvhdmeqjtatuyk4vapq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["merryhelpt6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuwWT0CTm9WyE2lhb69JbPU9wZgZ56zVReK0okjVeC1+"},"signature":"4upXc9FgkJiS2oE0nhTlJaf4OlsEtvttsp1zUib9n0tN3G4AENjE+ysBvx7Q3mgKkvTMv6UCHUBiOSRJGV31WA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uwgr3kdnzmlt6ryq3antvhdmeqjtatuyk4vapq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1677","merryhelpt6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuwWT0CTm9WyE2lhb69JbPU9wZgZ56zVReK0okjVeC1+"},"signature":"VBtaoK1PyQhIsGvlh3g1pWq6/Rz7s3ejz5wS4y551FUpegyKHSw9kY1TOEaOQFFJzG0nrdTCCHzIFzJ2Goov8w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uwgr3kdnzmlt6ryq3antvhdmeqjtatuyk4vapq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1677","1","1","g1uwgr3kdnzmlt6ryq3antvhdmeqjtatuyk4vapq"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuwWT0CTm9WyE2lhb69JbPU9wZgZ56zVReK0okjVeC1+"},"signature":"X530uNyf6EJ8tjtHDRG3bZFiAgbk4BfKyrDGJK3AM6Br/geaLoIZi4RiE7AdB3eyiVzBfRXkl0IXRZVa3bjKiA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1wwz2f75al35h70yc6djqyc46aedemq8hsmq353","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"tcKjQaiREQ86e4n5QYGJoTmhEGGPaA26fk0NcDDoIGBjVjNeJQa1xvjsfLthVVUBiYdkMx0Y3Lsp+h7Exwc54w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wwz2f75al35h70yc6djqyc46aedemq8hsmq353","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","swiftradio0y",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8houTyBuDYRL8gyAbWcyAxVochKm9q3pAm9n2+XWtil"},"signature":"2g8raqP3Ywjrwla6vVXG5aoX9tUgzTgtrpK/A1EDJNl/jT2CU+QlTV/ao5kujdg+07hsrBIF3DLRo4K1Kr6ZKw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wwz2f75al35h70yc6djqyc46aedemq8hsmq353","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["swiftradio0y"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8houTyBuDYRL8gyAbWcyAxVochKm9q3pAm9n2+XWtil"},"signature":"407lQbN7flAb4Ug0Om89FYAJgBSzt25zl7y82oLLSAUeB36b1UXNEJueRIWCipZkX/TwqtYQ9WwI1NGT9ciqFw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wwz2f75al35h70yc6djqyc46aedemq8hsmq353","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1678","swiftradio0y","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8houTyBuDYRL8gyAbWcyAxVochKm9q3pAm9n2+XWtil"},"signature":"KfmHPpEB6YEO7+TO63mUITg46Hv4cnTuskiuYOdOqhoqRKi6ex2ACfimtFqDm3PfPuz6iqxqzOIaa/2NTOZC6A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wwz2f75al35h70yc6djqyc46aedemq8hsmq353","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1678","1","1","g1wwz2f75al35h70yc6djqyc46aedemq8hsmq353"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8houTyBuDYRL8gyAbWcyAxVochKm9q3pAm9n2+XWtil"},"signature":"TBxsdaYcMdsl0CuZdRWM8U6NLzLI98tZZBgQXBTnD31OPxmPR/E/LL0F4icWt4VvCaNV4Xui9Y+28LnZLIKZ3Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g130fjyq7slqvxz7fcn3un5stsduzfyaq47t83mk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"G3V/AEOgptqRhcGNr2UK3rjyuMY+vsXEd5HL/ZTlVFc+RfZ0k0G9rHIVan97OdRae0L0nUYfnJYnklsmZZadbA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g130fjyq7slqvxz7fcn3un5stsduzfyaq47t83mk","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","kittenhold7f",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At7oV8PzBDnYhfwDii5cJ7zt4Xl+6yJxYu1XYFWOzThw"},"signature":"lapYsOltpN3bp3O+L0QpTJNgnXb9UEGnATW5L9wf6CwPqGCYxNgSBk9Pe24NJT+mhF7yPlDRTivvPH1OhuJJ3A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g130fjyq7slqvxz7fcn3un5stsduzfyaq47t83mk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["kittenhold7f"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At7oV8PzBDnYhfwDii5cJ7zt4Xl+6yJxYu1XYFWOzThw"},"signature":"EtQz/mbtMF7E8EbwbBkJqe30WgrUc9rm7QuW0MWg9qYQ/OOq5Gp1vBYC/A5Yk0+w40eWKThPAyr9X6VdrvouWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g130fjyq7slqvxz7fcn3un5stsduzfyaq47t83mk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1679","kittenhold7f","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At7oV8PzBDnYhfwDii5cJ7zt4Xl+6yJxYu1XYFWOzThw"},"signature":"Zd77LVbTY1RvFTtufiY+EZoivlC3wQY8f2E3V6xKSkEk6eoKyqGkcyhsfx4etOsdqc/b5dsbBuPqgnC4Ni/o4A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g130fjyq7slqvxz7fcn3un5stsduzfyaq47t83mk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1679","1","1","g130fjyq7slqvxz7fcn3un5stsduzfyaq47t83mk"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At7oV8PzBDnYhfwDii5cJ7zt4Xl+6yJxYu1XYFWOzThw"},"signature":"ck/O/kt1tGNdnkQYdZKPz4KjqfVP4+C4kqeB/FqNsqNCkYMJHYmrkoDZiQZHBk14kIcrdA+gKeP13S2/35f9XA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12z506j9vmpnne0rc0zn38p0v5ksfct00dh06p4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"890hByYf/DO0mX7Z19fc9+lEYf7TuvByZTdqLuXjVnYBhfg9dBIV90M3QTLpyZKv5DzxVA8pMO03wTpp5QofaA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12z506j9vmpnne0rc0zn38p0v5ksfct00dh06p4","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","foilsectionne",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwKcQMD+3R/NYFTKKuyqCP2S2yiYvdSowGkLneA/4Y0w"},"signature":"uya0QUAc6RMVhKnrdCIthxijaShbfKL8tzGBWLXmaIgV5QNMtpDGhO3Qnz+fu3VyklkAt9kc9R5tjyrT1UhKkg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g132gk56xqv3my3ltqz8mcmd5zwgq7g6v9rptvp3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Rtoz/3/MrC9PSelUTkx1w7SvSe1HZKgw0v1oeXgf2S5dIeos6+zd8piIc+SLe3yOKQtB3EsgId7ipEHoU0npTg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12z506j9vmpnne0rc0zn38p0v5ksfct00dh06p4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["foilsectionne"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwKcQMD+3R/NYFTKKuyqCP2S2yiYvdSowGkLneA/4Y0w"},"signature":"KQysWTM8v28h7HNTMZheNyMktcpC6GovZdwu/TFaafgJTH8O155Xt8yuUCUn27ZmN1zBO98F8Ux0Me/hQFj/5Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g132gk56xqv3my3ltqz8mcmd5zwgq7g6v9rptvp3","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mutualvotelt",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoG3uYE7mCjAYrPaw9x2AuQRHGUuWxbX+uUGUuQP8YJo"},"signature":"F4R3x+eFI/ntrONX5oJNe0sMcjF2UJrA7fTksa0zQd4P6osoGV+fF3kZI4nF+22TulvPsM/nRZI9Irif0mX5FA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12z506j9vmpnne0rc0zn38p0v5ksfct00dh06p4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1680","foilsectionne","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwKcQMD+3R/NYFTKKuyqCP2S2yiYvdSowGkLneA/4Y0w"},"signature":"GhS9Zgr9bVhj5GHM/H/fRBN9ky1kdo7Dp6cUxEGPoPwAqP5Haj1O6QjosCi0Hb8Ln3BwqYmRPrKQR4cRraJSoA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g132gk56xqv3my3ltqz8mcmd5zwgq7g6v9rptvp3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["mutualvotelt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoG3uYE7mCjAYrPaw9x2AuQRHGUuWxbX+uUGUuQP8YJo"},"signature":"Za3TMVqqNZHrP3QEzwHTSmTSkZVXaPq2bWDvucdGrP4FhhoE5tdvIQfsh1t0eV6JnY+KYoITNcC/UCqYl6MrEA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12z506j9vmpnne0rc0zn38p0v5ksfct00dh06p4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1680","1","1","g12z506j9vmpnne0rc0zn38p0v5ksfct00dh06p4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwKcQMD+3R/NYFTKKuyqCP2S2yiYvdSowGkLneA/4Y0w"},"signature":"Tl9dE4iuk+iROuN9QlswFpmywk5DumcWzkaP1B/BuWAkze6nRKS8eHjqYKHC+SCRQFHbPiUgUe3opDk7lbn5Rw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g132gk56xqv3my3ltqz8mcmd5zwgq7g6v9rptvp3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1681","mutualvotelt","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoG3uYE7mCjAYrPaw9x2AuQRHGUuWxbX+uUGUuQP8YJo"},"signature":"M1lbEjrYGGyutemM1PXKhZ3WuJtAD12knDV/ncnN4wleeR0hdBI+0z+cYG3hvzdKbhDQT5EbZpQdBKZcP9DmSg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g132gk56xqv3my3ltqz8mcmd5zwgq7g6v9rptvp3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1681","1","1","g132gk56xqv3my3ltqz8mcmd5zwgq7g6v9rptvp3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoG3uYE7mCjAYrPaw9x2AuQRHGUuWxbX+uUGUuQP8YJo"},"signature":"KxsforV2n73bOqRq6xFr+vkOnGEqUTUauLmTTGixymd+szCWjGOELl96FkTj+wSzLEMkIm0VsS5QEuWyZLNtXQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1wmd3ce3mgzjf80vcpwelhvxdlv3j2qs9qur7eh","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"gXRcrd/qJUBxIhJN+PEyzGfFOk/yQYBAUbRtSNUJAOga4N5YJCLwfB4kHXFnXKoSEXcRBrEhRN1kGiDavH9O+g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wmd3ce3mgzjf80vcpwelhvxdlv3j2qs9qur7eh","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","admitpriority0v",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjULncGezqfE61i4m/gMpSzbbJkcA0iLRAxG1EjdndSL"},"signature":"3APsIXh9qG68Yv3FuUHWqcBswBXePDNc+eEws18MvZsrQM7kxviAVktxFNGnb6iM1WbIq52vaemeTWRstSf1rg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wmd3ce3mgzjf80vcpwelhvxdlv3j2qs9qur7eh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["admitpriority0v"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjULncGezqfE61i4m/gMpSzbbJkcA0iLRAxG1EjdndSL"},"signature":"gKylcFb4x9LWTd1dixdcg6RGvE3Bn0+ULBJCO39aKKFlJiTmK76n9TE/KZye/1cpAeg93k7IXLSkNqSBlm7G2A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wmd3ce3mgzjf80vcpwelhvxdlv3j2qs9qur7eh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1682","admitpriority0v","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjULncGezqfE61i4m/gMpSzbbJkcA0iLRAxG1EjdndSL"},"signature":"gWmO5afgfcFCmUl3u4hV7e+Rr+mthPvrBhks5fvRD+1rc/SHmzewu3UJOR9IepsVXZ85IJFD2wETWLk52GkGcw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wmd3ce3mgzjf80vcpwelhvxdlv3j2qs9qur7eh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1682","1","1","g1wmd3ce3mgzjf80vcpwelhvxdlv3j2qs9qur7eh"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjULncGezqfE61i4m/gMpSzbbJkcA0iLRAxG1EjdndSL"},"signature":"NCN0F8gqcIYEvGtTVbieRmv6L8D2uoDiBBj29N97XDowcIxvdsopKMaPGfcIzTWu5Rmf/GVmZ3+7GT7Umhewgg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g199mjp2d7pjpckwzd200aneac968rqaz6x3gxzy","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"20u+Ge/X82P1CFairJkUr/aEugW8Qtgn47PI4CEC7OIEAOkZvYr9nRWC0SkJbN9vSjEL/GJHo4V56mZqWOPIfg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g199mjp2d7pjpckwzd200aneac968rqaz6x3gxzy","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","venturemysterywz",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoNnDvWdyrgaDnd4oxmPpvrLMFXSuNShKiMVmCG3tenC"},"signature":"oTi/5fn9wADioV8Bo8jrl2G19HvgdUf8w92g6eqiP4YlrtPql6Z++De1SH+SLG8NUd3a3zYiseQl4ts2ss61Yg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g199mjp2d7pjpckwzd200aneac968rqaz6x3gxzy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["venturemysterywz"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoNnDvWdyrgaDnd4oxmPpvrLMFXSuNShKiMVmCG3tenC"},"signature":"BlKCzyy4HxTlLYDfAC2CW2kRoFWkVNSBOLTHj/FXxkcIGbV6WTdYSzEXltSwlr99A/aiQ95FDeIv6qBaszHiNQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g199mjp2d7pjpckwzd200aneac968rqaz6x3gxzy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1683","venturemysterywz","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoNnDvWdyrgaDnd4oxmPpvrLMFXSuNShKiMVmCG3tenC"},"signature":"l67QQrrru57Q9Hu3+3hQqZOJp9bANFllJszGL3XTwFdWR9CaU7Y0p9hWgL9WnJQ8QYY5ArpGL+2B4wCCCs3FzQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g199mjp2d7pjpckwzd200aneac968rqaz6x3gxzy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1683","1","1","g199mjp2d7pjpckwzd200aneac968rqaz6x3gxzy"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoNnDvWdyrgaDnd4oxmPpvrLMFXSuNShKiMVmCG3tenC"},"signature":"e7ODCgywKEiPcJYxZyA+i6eTTCOat6Nq2/dz5pvJt5xKSZInzu9nVSpzrnsd9lnQXczLxGma3+saSOHQSBgpRA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18677ltrdrhqr029ffmpnnr75mk2wkmte702jgn","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"KXw9JZtPA4DYtaD446Thn8mq4oVUg7TsZloKb2MpFQVG4UATFhuUXiNttU1F/HylxGc5BIx2LZQ294GoTWEetw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18677ltrdrhqr029ffmpnnr75mk2wkmte702jgn","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","investsnowr0",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Am4yksQPLTmMkh0YRwx9UJuPhS/o3+djK17t2noX8Ul1"},"signature":"fDEhGKSsTzLgArqTKJUfE0/UukNPgmnv/wivIDpjsWQ+WrNbM6r+CtzIunlNzHSwa1EjhF4rIVOFUldfJulKww=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18677ltrdrhqr029ffmpnnr75mk2wkmte702jgn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["investsnowr0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Am4yksQPLTmMkh0YRwx9UJuPhS/o3+djK17t2noX8Ul1"},"signature":"ALAe/V7U3MIFtKxIz/kG/zoDLmlt4b92K+07rkeTwrhcJXi7ENHj12UVvv8RgCtDjLWCQzmJuRtY1fHI4UvAyw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18677ltrdrhqr029ffmpnnr75mk2wkmte702jgn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1684","investsnowr0","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Am4yksQPLTmMkh0YRwx9UJuPhS/o3+djK17t2noX8Ul1"},"signature":"0eHfYEkgsK25Y5KrjyWkgK71GQiKK+9SbPOZJh9uheldkg+p9dpmRL6nMGs/HDSfWR/wMXvSqAucQGOpR/Q+eQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18677ltrdrhqr029ffmpnnr75mk2wkmte702jgn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1684","1","1","g18677ltrdrhqr029ffmpnnr75mk2wkmte702jgn"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Am4yksQPLTmMkh0YRwx9UJuPhS/o3+djK17t2noX8Ul1"},"signature":"HEZT37q0Yyh0NdYzkUR97cVgme/ReMLWMjuZ4Wyv4cpJWrrIkm0CJClQ0sKldUmuy36k5lQYQqBAi8Q7QdYBUw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1dquytd4lymf0yspk5mt30pjar0hg52lu987m26","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"94v1q57xY80P4FWqg5vSxp7tcg3eJRfh0oVWTyU1dtoAs7Oa21A6ONhPRVWMQ/CSu6y+3/ls3S0aKbRHz0uHqQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dquytd4lymf0yspk5mt30pjar0hg52lu987m26","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","assistcurvesp",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmYY6Gqkd4kDdkYXcrS462Pfdfdzu5GD0qVG6JNo8UMW"},"signature":"v0gm4LpeVP8Tgzf4vv8EJ+M+iPMXiazST+IPngNVIQlgHhGrotKrPVkTuKJpIlkg/UArGLNAu94c5/pAZzNvBw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dquytd4lymf0yspk5mt30pjar0hg52lu987m26","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["assistcurvesp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmYY6Gqkd4kDdkYXcrS462Pfdfdzu5GD0qVG6JNo8UMW"},"signature":"d4cxKXse1pnoEMA/14N03bRCbNi9rDM3hjtv/9qJYERdJ0ZHHAsBi2zKSx9h1EQvyLnNpIZCiLJBXW13ypH0YA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dquytd4lymf0yspk5mt30pjar0hg52lu987m26","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1685","assistcurvesp","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmYY6Gqkd4kDdkYXcrS462Pfdfdzu5GD0qVG6JNo8UMW"},"signature":"ONXmExwHsbdDshARniKSzrk0T8J9a9+Y+O/u/XID/r9BQ3zV+Iu0Cg7rgSycaVbiuLFjlDN1cxWzoep79piDwA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dquytd4lymf0yspk5mt30pjar0hg52lu987m26","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1685","1","1","g1dquytd4lymf0yspk5mt30pjar0hg52lu987m26"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmYY6Gqkd4kDdkYXcrS462Pfdfdzu5GD0qVG6JNo8UMW"},"signature":"1n7f663YR7oyUWIRVT2/38e68v8ZY4R3aSXAGcG+26FkAeMTO8go1XRnnBZdq1mmGQ+y/qTx1QtlR8jsi4SQtQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1e8e690rspc97mtz6z6en4tznjy7e3sanvl0atv","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"oQZMchfY1i08UTZ0hZ9yRQlJH82glrDPb9dkxSPOUcV9haz2EJkyByvWj3EZxncNL1m/JaWtg00YOXVBDS2NjA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e8e690rspc97mtz6z6en4tznjy7e3sanvl0atv","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","undofashiontz",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7QDwkRxCTINqgVg/MZIOXqxzD9bXdYZXT8nWMCmOC6h"},"signature":"gXZ7TjFPBefE/47ej/gzoKxZfzkon5VZwrB0jH9IZmUwRIHMh1z0uxBodRKPVtPJG94TqrPf04Yk+nCsrOyjWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e8e690rspc97mtz6z6en4tznjy7e3sanvl0atv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["undofashiontz"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7QDwkRxCTINqgVg/MZIOXqxzD9bXdYZXT8nWMCmOC6h"},"signature":"DeisrM1KrJOQKM8e3wQ1uUL0jNOm+WmlEkJgGmDuSDBNuHl23857Ti/alBY4O9HfO8ryHZRubk+xQGBhVAcLcA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e8e690rspc97mtz6z6en4tznjy7e3sanvl0atv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1686","undofashiontz","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7QDwkRxCTINqgVg/MZIOXqxzD9bXdYZXT8nWMCmOC6h"},"signature":"5eyY0zT23tIbUkZrfFODOB6hDL+gQWmlp0oOGiM9gSUsL9NMUTI3qoMNrS3T3+XTb4LRZVNgn79G5GAgfkKkCQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e8e690rspc97mtz6z6en4tznjy7e3sanvl0atv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1686","1","1","g1e8e690rspc97mtz6z6en4tznjy7e3sanvl0atv"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7QDwkRxCTINqgVg/MZIOXqxzD9bXdYZXT8nWMCmOC6h"},"signature":"MVsjty76CxScOcIRJ+tDCLCVqXd5xHDieMj1znqSQIdpqnVHVlKFfkLklDdkt2IsuOw4RgxEZjDnOTcop06Y8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1nttua33f3naqmxf5lahgjd054r6ksdzy8dm855","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"JBCxFcFRMfFx8xpU/hHSzOQhv2LLgzVRnn0cNiDRN507kV9cMGGk4VDytfCr9wqGrzEta9mCt6eDE9M/9hFe/w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nttua33f3naqmxf5lahgjd054r6ksdzy8dm855","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","suggestdonorxf",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6aWtvGZjeqR5wy7+Zb6iSqUV+iriwJ0OCIX5/7RMYdC"},"signature":"VLf9cLsIhdJd0IAH31oOqcOYaxWmzQTBl4FBteP0Rzxhz0Ux7sNJzqjBgWQA9vwvBj/SwggaULIP4b02eUDyCg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nttua33f3naqmxf5lahgjd054r6ksdzy8dm855","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["suggestdonorxf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6aWtvGZjeqR5wy7+Zb6iSqUV+iriwJ0OCIX5/7RMYdC"},"signature":"v82v80P6ovPZlyzdwOwQw3V4UuvJLJr7ZrxglgonK5Qrh5JLyBZxVHxd6cpLuE4RFI2Sbe08iW56Iq0kznw0xA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nttua33f3naqmxf5lahgjd054r6ksdzy8dm855","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1687","suggestdonorxf","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6aWtvGZjeqR5wy7+Zb6iSqUV+iriwJ0OCIX5/7RMYdC"},"signature":"+NR253KgtIZH9wOBWLLNXs6n27WBfQuHIe4I7zMecWoJHfn2ByJlASvHVoGVy4VK8vgnv1Xp+dU3O6HW/8HSsg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nttua33f3naqmxf5lahgjd054r6ksdzy8dm855","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1687","1","1","g1nttua33f3naqmxf5lahgjd054r6ksdzy8dm855"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6aWtvGZjeqR5wy7+Zb6iSqUV+iriwJ0OCIX5/7RMYdC"},"signature":"jsdeQhUUwyHNE3AEXjhTD/DN3ATjLhIt89wKnKhzA9t5a8SOFqjfvn7kGGxIxp0vLhjAzy1g31cwc3SDNoc3pQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g170kzgqfz057gsa0du8aps4pz0uwhr7n7x67u7e","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"0py9SBX362nw299IXWiLfdCk1FR9eH6UYlwvAUSimkQJnE0++G1n9hyQjLXaZQ3e3uFHFuhoRGMYLQEaWf1lIw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g170kzgqfz057gsa0du8aps4pz0uwhr7n7x67u7e","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","lunchcapitalgs",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqKYCH6RLFZaUhcD2z2sYR9yePLY0JFbYDaBDBHOYzHT"},"signature":"w8akwVB5QpSLjoqIepC1+h9QV5IRBmv2X9uv+5yZgBZa/+iS+LmD3I9z/NRK7elJbdRfICcJxoPypf2xojunlw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g170kzgqfz057gsa0du8aps4pz0uwhr7n7x67u7e","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["lunchcapitalgs"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqKYCH6RLFZaUhcD2z2sYR9yePLY0JFbYDaBDBHOYzHT"},"signature":"vKBugfFY+xlEbmz5dMVD+SCXGfVggVNQZEsL7ZvEox9veFk9d+ec4hT7+QrW8TJQabkoKdsMHL+eJSyDbQVYuw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g170kzgqfz057gsa0du8aps4pz0uwhr7n7x67u7e","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1688","lunchcapitalgs","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqKYCH6RLFZaUhcD2z2sYR9yePLY0JFbYDaBDBHOYzHT"},"signature":"CbpgK2SdONkx0h3tXLPXv/PXWKho5Cdjvk98bdD4Z24Y+SLR1PVU/qTVXodAOdhBYh3KvPvQt+Hd+xmx3CRNtg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g170kzgqfz057gsa0du8aps4pz0uwhr7n7x67u7e","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1688","1","1","g170kzgqfz057gsa0du8aps4pz0uwhr7n7x67u7e"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqKYCH6RLFZaUhcD2z2sYR9yePLY0JFbYDaBDBHOYzHT"},"signature":"EfztP7ET85nUHhyJUw4B5mOna/exA7WKELmKXUe5QDJjnlOtMgAWtVM3dPkNYpMnoouujvlx/5gMO24Ks9ortw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1nhnyreczzm79tcjgncfhhtgrkypl9jx2kd6ea2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"8F66yTjDKlOOui4iGdtXnaqtGfWdxMRGZmklsT57H29rWiLR3AGipPRDD5M0OG2DGQM267jhv1YsYj4lNzqzwQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nhnyreczzm79tcjgncfhhtgrkypl9jx2kd6ea2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","apartglidecj",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aldd8p89R8aJ9C7oOVlFIAYY47B6mfsKxOOasA80Hc87"},"signature":"e6vo3i8MezKC/P4lPIIDeOWBSXHeES72bMrSiU5YCiRgDJrZ+SiCf6KrpPWjxqZ/+XIP/8BQj4cNJW+TF6w9VQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nhnyreczzm79tcjgncfhhtgrkypl9jx2kd6ea2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["apartglidecj"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aldd8p89R8aJ9C7oOVlFIAYY47B6mfsKxOOasA80Hc87"},"signature":"mdhKqbAG6BPCIiW93TVKfW8Ina4xOCioS2mhldrZOTdFxJFUPFIuqPewD/GaiAGZwhBKJ4ELzUTKR9GTft7hkw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nhnyreczzm79tcjgncfhhtgrkypl9jx2kd6ea2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1689","apartglidecj","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aldd8p89R8aJ9C7oOVlFIAYY47B6mfsKxOOasA80Hc87"},"signature":"Klj+ATH2NxivqyiUwduOuf5kDa3Q0CNdZPINtS3WvmhlvCaDEEWDhyYvKMK4q1LEZRX7GhiTL8T/Mk0yF4ZV0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nhnyreczzm79tcjgncfhhtgrkypl9jx2kd6ea2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1689","1","1","g1nhnyreczzm79tcjgncfhhtgrkypl9jx2kd6ea2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aldd8p89R8aJ9C7oOVlFIAYY47B6mfsKxOOasA80Hc87"},"signature":"WQSisxHzq+uGnJvPyngVG+WqelOwfi39qhTunXlS7QtYQpVmV+9QirgP6H14uPL1OMtk+x4iLbqtpdNn9pc26A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fpjppmad6da7fssn9q2f7m84t7ekl4adf4z0gm","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"6xhOnTDCcWAJaFrxPV6FqfK7LZM6TZkcOckHAI0zEPgqNKNoMRPq+096HJ5Kf5g/a3FaKLDgn6LlJamcjOxqiA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fpjppmad6da7fssn9q2f7m84t7ekl4adf4z0gm","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","questionpupilss",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxcRP4jccjyd2yR1HF5V5e/ojLDvZNpH3T6lCO7mH4Lb"},"signature":"G8KXs7mGbDamDZBKFJrk6pAFfv0WRjqieJ7m/e8KZ38E7qfPbWR/C0BVhi3SKMZPIugt01W6UMFe8lqDFdSeTw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fpjppmad6da7fssn9q2f7m84t7ekl4adf4z0gm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["questionpupilss"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxcRP4jccjyd2yR1HF5V5e/ojLDvZNpH3T6lCO7mH4Lb"},"signature":"HDwrCyN8Rj9S3oXbEquDk/1H/XPtr5GryxIAJhQ796M3jS4LjEOskA32RL7Mta+oZualYB+DylszJzAVdCX04g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fpjppmad6da7fssn9q2f7m84t7ekl4adf4z0gm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1690","questionpupilss","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxcRP4jccjyd2yR1HF5V5e/ojLDvZNpH3T6lCO7mH4Lb"},"signature":"9UTWGpT7lAXUQtH8yvbHiqesBasVwD4XzzRHy3HggEM5BdKawqp+Yf1k59M0dYl3tx0ava0b8ywaMm1J57DLbg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fpjppmad6da7fssn9q2f7m84t7ekl4adf4z0gm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1690","1","1","g1fpjppmad6da7fssn9q2f7m84t7ekl4adf4z0gm"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxcRP4jccjyd2yR1HF5V5e/ojLDvZNpH3T6lCO7mH4Lb"},"signature":"xNcMhsmz802eUDsekTbpY4puWFEAPHxZBLOqUYCm6ptF4acL9jNYRpn2qr8GX2qcn59KRdHHZkdJo0346J9mkQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1c3y3m274hxmngfgmf0ex6mfj5m40m4e7yuvdam","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"MJHTg21hDycvnowFniUwff1vdRY3UT8oNXZJOTaJedAc+yZsHjaNQXucVpS5/55TAfQQpt5lWmS4ztGbTqkRfg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ddc2pnwvyg3lqe5x363t0s6gntwz3clh9gvsx4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"IlKquFMbSdlcqmQ7mfemwLNOItRkzV1BZrgeE2ZjlQJnvgGq0JqL1Kx7yrjWL/TzIiE+5uNEvEfVYk/n2sLFgg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c3y3m274hxmngfgmf0ex6mfj5m40m4e7yuvdam","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","variouselephantfg",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyYqa4dNMQik5Xv2lOjzvgoYxdArdWDgEh54hjwtvzBK"},"signature":"H6GR0/dYyEG6DyRlwQxCER3RmM8ECDqO8M77YBZBasdPMG6EpjASTpgIval7ZhEabS9MF/SrOHjjRmSCzQ9DcQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ddc2pnwvyg3lqe5x363t0s6gntwz3clh9gvsx4","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","dicegiantlq",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1gX6ZERyDdlEXgP8qzpyQydipUA/mT19NPtaHd8nFyT"},"signature":"MEQmIcHLoQeckMXiSS3Dx5Pt4YLMJm+YDCPqz17rsGIPbI0HSXaKRtDUNmcdoe7pbhuOTcF/CbfocJFx46n3nQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c3y3m274hxmngfgmf0ex6mfj5m40m4e7yuvdam","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["variouselephantfg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyYqa4dNMQik5Xv2lOjzvgoYxdArdWDgEh54hjwtvzBK"},"signature":"XvjvNId7Q+rj6Jk3fqmTBSm/4FDAGOM8ZEYFA5rIFx1YjiqyGYcTJ0XctKd2JNE4TN3hV/eFAXjWZGNLg61lfw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ddc2pnwvyg3lqe5x363t0s6gntwz3clh9gvsx4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["dicegiantlq"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1gX6ZERyDdlEXgP8qzpyQydipUA/mT19NPtaHd8nFyT"},"signature":"Aox5WCGGqhRCORAu/FoNF7McGrJk/KCDLKrIM2gwe0gdUtz1upxNaGMNQOs1AkfsmT61m5Xw7XFH8LR2YlXOJg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c3y3m274hxmngfgmf0ex6mfj5m40m4e7yuvdam","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1691","variouselephantfg","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyYqa4dNMQik5Xv2lOjzvgoYxdArdWDgEh54hjwtvzBK"},"signature":"KF7VG0XdaLtpBIIJgumj4BF3er1OwZFhHrreOfYAPB0OwtMA5YorLUbI5/sLUsWra2mnrLaMzVrWAGN/XaJCSw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ddc2pnwvyg3lqe5x363t0s6gntwz3clh9gvsx4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1692","dicegiantlq","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1gX6ZERyDdlEXgP8qzpyQydipUA/mT19NPtaHd8nFyT"},"signature":"gGoRf4uqCwiZGrxGweFX8EOmWWe8heOik5LicTwFjrIGkgToC1zaGjzX2NF7I6nTqKqNlEeVDUF/X4dmzAngCg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c3y3m274hxmngfgmf0ex6mfj5m40m4e7yuvdam","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1691","1","1","g1c3y3m274hxmngfgmf0ex6mfj5m40m4e7yuvdam"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyYqa4dNMQik5Xv2lOjzvgoYxdArdWDgEh54hjwtvzBK"},"signature":"1K7LJYD18DpmZrWbZ+mJHhoQAImGB2UgQLNTlKmCH0Vc088YHuYbkorE0YmfA6xyGAFmaBUDTPQli7abz+VddQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ddc2pnwvyg3lqe5x363t0s6gntwz3clh9gvsx4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1692","1","1","g1ddc2pnwvyg3lqe5x363t0s6gntwz3clh9gvsx4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1gX6ZERyDdlEXgP8qzpyQydipUA/mT19NPtaHd8nFyT"},"signature":"gaZHBrPC8cRgAjUBXcdYCoG/Yip6CtvRkVfeMM3ELGx+Gfs75DD+9k3MXRaivW5Jl84e3yzndzhvQpBgJx12bw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jk5e640me8xnxa0ar4u2rt5qkf975zdjt6k59r","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"3Mor931Ims1HQ0Q9LShI+4lSipCRPRBDZr9vhh4rCxd+HlUc94OlZ5k2tUEsyOfy9AwWr063PguuLQIYrY8/QQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jk5e640me8xnxa0ar4u2rt5qkf975zdjt6k59r","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","festivalmatha0",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2fznWLUxOZ7kmtB2GAnTsM5Jc7/Dy63IG0kKHDYwpK0"},"signature":"ElUAeoKP/N7ZoXhjN2Fl88nA7Koo4wEAxQqad9NqlrwwSG+vaG+qx+PG6qqG1JZZ1PWzARCt7mcYTa1D29srcQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jk5e640me8xnxa0ar4u2rt5qkf975zdjt6k59r","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["festivalmatha0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2fznWLUxOZ7kmtB2GAnTsM5Jc7/Dy63IG0kKHDYwpK0"},"signature":"vpqb1lzBmZkR7+kwPp88uq2NkBY4/juLfz3MkDFr9v5+KstMiPOzYrRCku8kKDhe1amaqYcj/kJruoRRhLHsQw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jk5e640me8xnxa0ar4u2rt5qkf975zdjt6k59r","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1693","festivalmatha0","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2fznWLUxOZ7kmtB2GAnTsM5Jc7/Dy63IG0kKHDYwpK0"},"signature":"j8Vec2n6A+zFgLvfLBt9RS/q13ScSOjz9C8hRZhmqPIE2FLSwbbl5e027hsPkSsBDjuKA7WlovD4CyK3AJ4MLA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jk5e640me8xnxa0ar4u2rt5qkf975zdjt6k59r","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1693","1","1","g1jk5e640me8xnxa0ar4u2rt5qkf975zdjt6k59r"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2fznWLUxOZ7kmtB2GAnTsM5Jc7/Dy63IG0kKHDYwpK0"},"signature":"nudvDGoyr5oap9T/CbeCGWP02IUgz/waP/VhxA8AiQtsRvSej+RfYRendueIyGeG8oZXw0xHQ2fZa4V+TKrp5A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17vekh8jwgaantr0syd4vgtvkeake28mm6tju34","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"nEMlUmhuo0xsoOL3o9wJZw08GGn8DgioMHw+yjAjAzlf6itHjmWkN0NDlWRCBwCF48fsvyTakMjaFvlgNbX2fg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17vekh8jwgaantr0syd4vgtvkeake28mm6tju34","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","needaskr0",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0LgY+WqBXin0O1M7d6JZRNChau0XS6wcv//C36z24go"},"signature":"+K25MxOOG/Q/tvNTHHAeruVVo25lzAetii8tTFFcGmUN6qH7AnTccwhlQl11gDDj42YKhKfZe1upZ9Hniv4ptA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17vekh8jwgaantr0syd4vgtvkeake28mm6tju34","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["needaskr0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0LgY+WqBXin0O1M7d6JZRNChau0XS6wcv//C36z24go"},"signature":"UHvrHVOWlmGQ9iSLYgCXg1DbJ8gk1l6rmSgb/zhTmGEwmb3fOf6jtqWfHY+5yf2LidAq+kXKL/nv0OyWWJGFIQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17vekh8jwgaantr0syd4vgtvkeake28mm6tju34","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1694","needaskr0","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0LgY+WqBXin0O1M7d6JZRNChau0XS6wcv//C36z24go"},"signature":"ts0YSMHNAunUSdwJ0G4xf2CVKdGwVME+Si7jY5cOt712zGnIBCs14Ey4F/7aGUtD/Jteqc+l+g99Uvz5wAJtFg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17vekh8jwgaantr0syd4vgtvkeake28mm6tju34","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1694","1","1","g17vekh8jwgaantr0syd4vgtvkeake28mm6tju34"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0LgY+WqBXin0O1M7d6JZRNChau0XS6wcv//C36z24go"},"signature":"KofK3GSJXIN7NPDcCWxWugtWZcqZnQ1qIeUCka/nNUsFJ4XtCKeS+EGAF3HGpnyq+zWYo5LECA6xczmJzgSn4A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rxp2t8h62axg9kczsyex39ln72z8jwpw66nqms","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"mUDVwdaE1vrKA+LqN1nRZg/L3sVbGocnDE0phlfDSC0Be/ksIJiznsKpAdfiRAZ7Tet53hg8Pw4vlb6qdkvj3g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rxp2t8h62axg9kczsyex39ln72z8jwpw66nqms","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","privatefeatureg9",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyBjHmEvEP6eXFpo53DQJ5D7mbvuU9QeiWnr84XMhiv7"},"signature":"2J4gp/5oa8CA+mSTwkbjMPO2g9NRa8zFIA+Db5IiT39MPdfMSBei1Yk78R4gS8bdKSGdiEYi0GaloHT6b5UqCw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rxp2t8h62axg9kczsyex39ln72z8jwpw66nqms","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["privatefeatureg9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyBjHmEvEP6eXFpo53DQJ5D7mbvuU9QeiWnr84XMhiv7"},"signature":"HBPtw7SPDTLdwsuIRtvhXq+Y47n5WHxMMUAzosBtpNMEpeht+c90qX9SNOrsj30FhxzfcAB4zpu0Id12WvF5DA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rxp2t8h62axg9kczsyex39ln72z8jwpw66nqms","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1695","privatefeatureg9","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyBjHmEvEP6eXFpo53DQJ5D7mbvuU9QeiWnr84XMhiv7"},"signature":"jWEs96PBDoQj7rFj3QvIC1Tcr1FXx076tyQgW1yxL0UEeYUQpfmRGNXP8ZpfDF1ConAGFVBM53d9+dVwIquH5g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rxp2t8h62axg9kczsyex39ln72z8jwpw66nqms","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1695","1","1","g1rxp2t8h62axg9kczsyex39ln72z8jwpw66nqms"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyBjHmEvEP6eXFpo53DQJ5D7mbvuU9QeiWnr84XMhiv7"},"signature":"x0xQHRi06zkX/i+Keh43+oQCpyyO8e69cOnFRU73xaItwS/Cj7rK8rinllUK7+UI92yY2i8QW/HYxoaLFhRMLA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hp37p3n07ql4qr5j0jzw2sldkc4z7jspnnv5xd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"GKatesAyjTwUBEx921fVREok8tacnsvC/u5YTZcOoQt6bjaQOSiSXelsL9srDeaHL6VmJFIDYZ/6y4zpANNY5g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hp37p3n07ql4qr5j0jzw2sldkc4z7jspnnv5xd","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","kitpeanutr5",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApE7CoafIZpFWoUUjxE9QLVz5OXE2wtMFYcNriiC1KJQ"},"signature":"h2LntVQHK57MkqFvL31QI1mVtIxd+50IHzDZDb3gbHAZkwO4aNNrewLnwpGoaKcjuGlep7RQYAZ+EtOLK0S6cw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hp37p3n07ql4qr5j0jzw2sldkc4z7jspnnv5xd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["kitpeanutr5"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApE7CoafIZpFWoUUjxE9QLVz5OXE2wtMFYcNriiC1KJQ"},"signature":"ja9WkglRDHa2Wivsl8c2zDuEdxgB3wvl4FQwvDFIRIwPh0MelRGUarqn8+xmwpg6vhoiy27LEtR/wbBBOLdlcQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hp37p3n07ql4qr5j0jzw2sldkc4z7jspnnv5xd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1696","kitpeanutr5","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApE7CoafIZpFWoUUjxE9QLVz5OXE2wtMFYcNriiC1KJQ"},"signature":"wIjT+LpH0o2kW17nwXTtk2rwU3amAyR7p1VLLCQC529UbZYhZM09rwcNFvkiHaXJbt0/w8fjltR67PSfTKbEEA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hp37p3n07ql4qr5j0jzw2sldkc4z7jspnnv5xd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1696","1","1","g1hp37p3n07ql4qr5j0jzw2sldkc4z7jspnnv5xd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApE7CoafIZpFWoUUjxE9QLVz5OXE2wtMFYcNriiC1KJQ"},"signature":"U66GqbkXIfEbeEBf53cZWAH5h507umiq+Bmg45Qf/1VOSii9dZZuFJNoY0d9K34CP7NykgcU1eBQ6XlBp4b9XA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1npx98eje98dv3n3v9c5rzavs73k2v08auglmd6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"SLIFyPYEPKiXpH8ewTx4aQ5dpcoZXQpwEpdZri47QuUthPLbAxi3lLH/wUFrows6Izr/1e+jPPZlSKf+GxZclw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1npx98eje98dv3n3v9c5rzavs73k2v08auglmd6","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","valveislandn3",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2E7h0poM0lz+Sjnk8FCHnC6P3FbMFQAA9vHdY2qGeHv"},"signature":"RMhVJCH1rH6K1dVlByoE8Ug8pIzN6sj7oY1aFISWdYdjrxwjbatG1ItCZAhp6OfDcSyzHg2/n8UBnjXeGoXBag=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1npx98eje98dv3n3v9c5rzavs73k2v08auglmd6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["valveislandn3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2E7h0poM0lz+Sjnk8FCHnC6P3FbMFQAA9vHdY2qGeHv"},"signature":"s42D+SXWJoh4hvLWBTHDW/ERRIQs5rKe9CVc6VKIr0kbNnSDVsHclZDpVzyPtjykV2C2roLk9LAoczFose1XQg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1npx98eje98dv3n3v9c5rzavs73k2v08auglmd6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1697","valveislandn3","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2E7h0poM0lz+Sjnk8FCHnC6P3FbMFQAA9vHdY2qGeHv"},"signature":"xvhrZR3BjmIc6fY8UKy7CP3hPVNoGcIt7tJDj3mbKdAjq2sbf4HPUfdPLxCU34qSLeh0N4Nc+DEtRnlzDgiHIw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1npx98eje98dv3n3v9c5rzavs73k2v08auglmd6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1697","1","1","g1npx98eje98dv3n3v9c5rzavs73k2v08auglmd6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2E7h0poM0lz+Sjnk8FCHnC6P3FbMFQAA9vHdY2qGeHv"},"signature":"YT/v1pcPcWbQaX48sv5vu5ZGkiWCVHAuOsdvBlp9u4V2yZRPTsI0MQCn+IxY8Fd+46X8MhhAGd8gaSoO41nuUA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1scuc7fglaut4jak4wza2uw49vjqs0j0uut9ghs","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"egLyJsXNeoauDBAirLenDrArolJUAhskgnd5mrBzZBJCfS39ODekG+tRzdqjm1tgQ4dMl6Emh23Woqvk5pt3OQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1scuc7fglaut4jak4wza2uw49vjqs0j0uut9ghs","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","juniorpanicak",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At+EXw09Jv6p7T9054ZiSEhZtbBnkElu7fbQW+Em6ymq"},"signature":"BNcqfsGfAFC04KrBIUE4/ZnBS4c12FdJdrN1E31205lB+T9UWWhaOii9hULvGsYleL7RQC5puECoPpDcnq8IGQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1scuc7fglaut4jak4wza2uw49vjqs0j0uut9ghs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["juniorpanicak"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At+EXw09Jv6p7T9054ZiSEhZtbBnkElu7fbQW+Em6ymq"},"signature":"RIFwTuo12RmaMXxAFXn8tIve/ZiSWgGpvAyXE4OMmeERPwMGsTzc6//JO8XmI/MHHRV2Cat9qZw6DKI7tmC5yQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1scuc7fglaut4jak4wza2uw49vjqs0j0uut9ghs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1698","juniorpanicak","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At+EXw09Jv6p7T9054ZiSEhZtbBnkElu7fbQW+Em6ymq"},"signature":"i3N3RXwYhIEf2JlZtBWXYI2S7D69x+VO4YTRNDkFviw2msH09bfVyVWlxRxOelycwVDtrzopsx4GvbwHNpL9rg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1scuc7fglaut4jak4wza2uw49vjqs0j0uut9ghs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1698","1","1","g1scuc7fglaut4jak4wza2uw49vjqs0j0uut9ghs"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At+EXw09Jv6p7T9054ZiSEhZtbBnkElu7fbQW+Em6ymq"},"signature":"we00gJAvjkqPCnac9wnVG6w1TzDVh4sHurRf9ZmKmQ4ihWqf9cLJqvR4Nx7Q7XaPaGJ4REV5LqF2zDadYa/10w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19kv4qqtvnh77tly9gjp8yylt0l8lx0sravsx9k","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"p9Og2JdDKY7CKJpq4srblmQ7pdP4bMgMw58mBLJj+llUQBXXDCb8AhNFhfU9sSooWO+9XZz8vcH/T7VATfXutw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19kv4qqtvnh77tly9gjp8yylt0l8lx0sravsx9k","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","illegalonce7t",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwYF2TnkeNo4UpiUlH0ITUEoqvhGK8z2683bo2a7vXUW"},"signature":"T3Mk0q3R433LKJZaVeNm6MsgSImf8OGfnHqApH8A8K46LSwUWz8bsVVRdsTXIaqEpMi1VKrAMZL2K4XKMYbQWw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19kv4qqtvnh77tly9gjp8yylt0l8lx0sravsx9k","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["illegalonce7t"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwYF2TnkeNo4UpiUlH0ITUEoqvhGK8z2683bo2a7vXUW"},"signature":"LkkLqbunb1FtZ6J5osmjJKX0adnbBYVpfvu+/+BDlG1K88HW9weAdRHiKRS33CdrGFH3zbLXB6FQO/MrtXuHJw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19kv4qqtvnh77tly9gjp8yylt0l8lx0sravsx9k","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1699","illegalonce7t","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwYF2TnkeNo4UpiUlH0ITUEoqvhGK8z2683bo2a7vXUW"},"signature":"ZobUS98xmEgkU0UYWKoD9UoDMkvu5ywKhbyA9m8LwNYPMOx3hQLfikGzPC1jzPWbJRC60hd5fSESVI9Bh0jMTA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19kv4qqtvnh77tly9gjp8yylt0l8lx0sravsx9k","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1699","1","1","g19kv4qqtvnh77tly9gjp8yylt0l8lx0sravsx9k"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwYF2TnkeNo4UpiUlH0ITUEoqvhGK8z2683bo2a7vXUW"},"signature":"q0vR4s3IgDg0Odu7p5vie2qIrx0qE59P/9DjdwZZOLx0s9/0Afasq2hvoOyxczhj2SNAMsuw7iSzzDj3jT1N6A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1key67aqx5dmzlm2lr206aef8a0k4xgv3r9hwaj","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Bdcd8WUFfdR7H5btw/6fX7/0VUjROiJX/xabfn7FtzRUZCTdz4iaIvuqmVNTHk8VrguA0dmLx+Nquo29lg1w7Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1key67aqx5dmzlm2lr206aef8a0k4xgv3r9hwaj","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","oilalienm2",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au+6HlJk9JiV0jYn+8E45vIuwSFSStqa4n2IfZK6jjiB"},"signature":"AOZcxH1oCA3QafEn8tADRP5JPySGd7QJO18yLkABotII+FaEGPepaxQQAudi1y9S4k692RlMMA/x1UkuUqYQCA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1key67aqx5dmzlm2lr206aef8a0k4xgv3r9hwaj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["oilalienm2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au+6HlJk9JiV0jYn+8E45vIuwSFSStqa4n2IfZK6jjiB"},"signature":"dlsCRJXOuDpnQ5PymWhuxpqWiDW3L7b8C9r048ynGU8swqkwq6tpiciyY4+zdZH+eQ6aCMd9PmIgZTam9HY5lw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1key67aqx5dmzlm2lr206aef8a0k4xgv3r9hwaj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1700","oilalienm2","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au+6HlJk9JiV0jYn+8E45vIuwSFSStqa4n2IfZK6jjiB"},"signature":"PEBrMFyoSqu5NEPOAW6nKLM988egon3NEMkt3nRxwNRvcIeW0eILqQbhd5OWRuK9S3UFy4uQA5uWU1VNGi7soQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1key67aqx5dmzlm2lr206aef8a0k4xgv3r9hwaj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1700","1","1","g1key67aqx5dmzlm2lr206aef8a0k4xgv3r9hwaj"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au+6HlJk9JiV0jYn+8E45vIuwSFSStqa4n2IfZK6jjiB"},"signature":"J6muwKmzYLD/lfKkqjVRfiOqfwyOGUJtqKIGIXk9HQc3TmQET5bjVl6HeZpi9mYZnZRwOXFadU1B7x+IEkZ1Ig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1zlufzumxtwxnsfczaqhdpt2xed0udreu0nhczs","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ZYAHRp8B6d8UoIsSRFqbU8tnXO4BHPgTOa94/jPCLV0Xn54a+HJM3LYPIGW8/XDWYJ4uuSkPO+xSgirKBNB6Uw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zlufzumxtwxnsfczaqhdpt2xed0udreu0nhczs","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","wisdomhalffc",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au2vcH++GdsF01KBEkMzvL/6JUsFuMHFRGOGaGg1z2Tz"},"signature":"dVYigT3i3Yr1Qn3wOwg4qMNgQYVzgBF9wYuA/cruQbsOuG0+IwNLGIXEnSONEaYoIWV2Otwquc2wHX1xRzMPsQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zlufzumxtwxnsfczaqhdpt2xed0udreu0nhczs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["wisdomhalffc"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au2vcH++GdsF01KBEkMzvL/6JUsFuMHFRGOGaGg1z2Tz"},"signature":"ThXBQsrvDhsgG0hsboddoO1WcAnnhkOhyIHl2i3BDZh/sDhUZnHRDJxqmX/EEPFTzYp9VMEntFB/v90qFt6f6w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zlufzumxtwxnsfczaqhdpt2xed0udreu0nhczs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1701","wisdomhalffc","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au2vcH++GdsF01KBEkMzvL/6JUsFuMHFRGOGaGg1z2Tz"},"signature":"dtF20nOwljtDIhHy5fr+g9fyg7ys/7Ikz9VnFTFevtdZUiqr39f1kNP84QbZZ5fUDtVJ7Ubyk+V3AZb+y8fBxQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zlufzumxtwxnsfczaqhdpt2xed0udreu0nhczs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1701","1","1","g1zlufzumxtwxnsfczaqhdpt2xed0udreu0nhczs"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au2vcH++GdsF01KBEkMzvL/6JUsFuMHFRGOGaGg1z2Tz"},"signature":"LtjzSSuV6utsNM6ZEXf4QZO9smVoisI3cpR+i8mCLsZGd8/UUlZsPawzK1WefiZueyC5CIDT5LoFoerP4wpr9A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xvjc0c0ahht7w3uerll9eg5gqv9wsahk58q6kh","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"e/c2VmFTK6iKCC/xvPSeisOQoFaEA1UuLBi0a7Pf+jFIg9YVACRtr/uGyu6DjzjBgGmbUDzam8LAJOxPU8CvZw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"hello","Path":"gno.land/r/demo/hello","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"rQMxi+TeAXOE7zcJxp3S90AxTPzBeYL67HDoXQLi6cNlMH+n17cWrY6vqJsZLvHOQFNkYTxhyseIkq5tSFAg4Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"2WQXvhmVZqR1+l/16CSDBxOQupQOXTZj6aCbYtXcnOQ37nn3xVGdpdUbgkK7pbigMea138pPm+onsYkfZv1MuA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1t4du52tfdfcnsrhlkfxhulr3r2a8a965zs07tx","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoWl1n0gPDWHmsIdghOux9H5dKTvm5LHh/7c9EXMTS0y"},"signature":"jF3ZAamqC9d+zrD6iu7X+wU3GnNYSM/MZHv/x9Pwp9dju5frxI53PB8S5hQ0GWPb+/sI01F+btM6P6pckifWJQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"2000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"8Yls2z+u06junqmmQik2U5OLXtM7j+W71QQW3+7qxS1czh4wxJSelpZEeMVwm9ny2bt+vMNlQSGdRBkyf5l/Xw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1t4du52tfdfcnsrhlkfxhulr3r2a8a965zs07tx","2"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"TJEQDbjjDhpVcAdM1hneD1nirrju16mF7JpVZraCB4gXggSral0jqmasI+FGAd1WFhRF/2Ue1xclYonL0Iwm8Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"3000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"aM1Xyeypr/9hjdA4xSamRUfqTn+vZOFOWWH6BK38229ituA9twRSDdpSm6zL+k5K1OEKDMrMjjqlVzQyZLUtzA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"DAVqhFe7mq181D9vl6p4xa6FBAGnXn05ldZHki8qYwN9Vwe04a3N46Lqd2zPD2imaLtIgrZJ0rDWxGMcM/ZMng=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"TKmW0b0t79VeHFT7MLvOb3UB52JoDr0lXIsIYXnQhHpnEVM76L+JKRMj9Zz5zZtF8QmMBiNjS5KxwMfAaVIp6Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"RYpXC7ZGPjHIueT0jcbGGfX2ej5C9ftlaAW7Wlem7E0dUXx/vopKhCeUK24TpOHV+6FCFl8xu0p0MVZNtobn7Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"o7DR2G+uRdeRj25ZIFGL6/TmazR+NI4HCsYYhAUaWexYhrpKiVzpkIc8tLevHViXWIStOMnhMpBnvn/J0vR/yg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"2000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"Sxp7NixKcNAAxycFbtL4b8CB/db66ozZK28rxKHJYcA6RxbI5HB5Gs666QZSexyHJF3wpCjzKhUfIv2R1Gr2bA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"2000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"lqPSU8OQkDN1gSyHFha85s1vSadveGZGSaLEnCGnL/luKldG4mC1XvVaAlC8Vb529yio44TD4tOTssnrgQBvYw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"2000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"fbJoeP4n0Apiw4AkBtbRQaNDhSLjTBPe//RzNj3aKYp4YMA8D40ZeftqfGoctsFa6NCrgNcuuVj29Ndc+5/wyg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"Kg53HUNgCxStwxmNqtXQZrYmlR6e7EENckw5ycm4SnAOjlWqmyOXZN9TV248vbEGIau6RGsZ9wQ4Er3EuF4h+w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"ub7UCD8FvQyowEUqSghG6k//PeAPyNNIC9mRcOIGRPUOMiUIWkLxGux1UTaK9BM3LXha0RXSjRvHIv4JRxPzsg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1t4du52tfdfcnsrhlkfxhulr3r2a8a965zs07tx","amount":"10000000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"VEKmlfpmPzYdbAkLn+IlOkvld5p62hd++6EuMcXGpLdo4JLzFtu5LX3Afh/DDCI9g65aaHkFI6BIbmA0/0dXgw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"SQbeJ+UVxSXWD6G+ORQOnkhixa7sX8Tj3ba7BqTQRfEvpGWcUNgyPjwOM9rZPJIprSPvwCyphI82Skrdvs5zJg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"62099989ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArADVPfUBrZVmlqmZWPWucRTe9gkJ9wJFyTszJoU5Ebi"},"signature":"lwmN/4mdhzPI+ApDhDv2SIAjqhJFUrY93OUPU7zxmNlP5VsrBYU/Mg9NPeVU5lwV96GqmcHSWxG+3MU2RB0Xqw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hszy9yk8nq0jgs8tcrhj39j0r6llv0z82s30yf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"uLoGGZD9jbujZk4NvQ86bYCyjNf44WnWiIRHPsatMZ9xU6545REiPRL7NFtZBOTWXntejQ6/Vbq7Crw0QgpyyQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14uur3grrs2rd3gaykgckz06jsp4je7x3tl7f3r","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"mqjisbhDvW8+B30FFgBQGIn8gXMjiBa+7gRulcVV8pUuqcS4096MF6Fk06Rh9L7hoIp0RwVvsofP7a/jmtIpZw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1sde8f0lzs9ff45z9nkt08k2cn6ps2yqe6hmpd9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"qkugNoebBbBmHEWdJWKCTDxkiUucznpjeIvQqk9cvnUdE87VY2lDSdwg6nVOr0OTPCRsK+xvRCaAOD2+EHzYnQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hc0ttt2zyyea84mw7cu5z6jdjvlj726jry95hw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"u60fDUjkMt/mDsKo8mQUT7sE9o07lShQHQImoi5BijddlOpMPavRmdb7/rHnRm7r77VafATI4RIsO8GTXZT60w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fnakf9vrd6uqn8qdmp88yam4p0ngy572answ9f","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","1500"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3cWVULHSHC1mwK8o1vfJHKfNMvLEvKU/sHPQoFWRoey"},"signature":"SBHicbgwRZ7CBWI+tFzvSHzxSMH3k59EDkq3j9j3QA4YzYbXqq27QE1B5mSJafudgB8JZDfNVC/LtegqVqeUqQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1t4du52tfdfcnsrhlkfxhulr3r2a8a965zs07tx","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"EgN2AWk9DhKrGk5SySDXnNFsVqDyQL0GX4E8PgPwlJRlQ/Gq9/a8MGpZO7UxNzI9JDs1r1Xs0CP4O6LQB+eMdA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1kxa74mz8hul5tge3rvyep6epzhkf99x29zac7g","to_address":"g1fzjcyrhv7rtrpwhsd0mhl9n7ahxm0v34p9w5kn","amount":"2000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/rLJAbJ6FDKQm3GA5RLimerzN2dJSqFzOpUECkD7J3O"},"signature":"4wSbHsd9HYsn04l0SYhTebwlUkDejy7mgZP5/RGuPSApWcSfL5j2iMkA011Ybgr7xYxR9kQmq9oPUTfkX3/m6Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fzjcyrhv7rtrpwhsd0mhl9n7ahxm0v34p9w5kn","to_address":"g1kxa74mz8hul5tge3rvyep6epzhkf99x29zac7g","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7BGCHnC+0EaBkHciQ6D+fFVnlumBrn4QABY4FhxNlab"},"signature":"g1DZSdfIvaJkDlz4S8wvOfCREcA2RmzYf0XnKDtwZ7xJcbab7uZhsgwAbYCGiGYePCkzW7PIBEmzQ2krVjBopw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1kxa74mz8hul5tge3rvyep6epzhkf99x29zac7g","to_address":"g1fzjcyrhv7rtrpwhsd0mhl9n7ahxm0v34p9w5kn","amount":"98000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/rLJAbJ6FDKQm3GA5RLimerzN2dJSqFzOpUECkD7J3O"},"signature":"KU7SNvWu9ybnP/Fp8pWtyTphxVu39wK7+v+XgzwCF3gN7xlYOlNj8Fh/e8kFRMY81xryinTXQ6nij94GI/5ulQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ckn395mpttp0vupgtratyufdaakgh8jgkmr3ym","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["test_board"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aszr4WZZtoqvpWfpKQFXAT8Bx/fH234W2oIq4eQnTnbI"},"signature":"wck9L/nrzSmYaIcLzDw2gY8jwf2cJQ4jZqiXedJjg2c2LyGib/3a8Ry4qGDCc1qRIpbsqJxgJAgH1rVLfsKJjA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ckn395mpttp0vupgtratyufdaakgh8jgkmr3ym","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["test_board"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aszr4WZZtoqvpWfpKQFXAT8Bx/fH234W2oIq4eQnTnbI"},"signature":"qY4HLqP5AWsXnlh/lTAjqUo2kYPmaJ7jVOLnEr1NOl1dguExrprjBitPjkqa8EQOeotoqSZN+BO+DlpU13l0QQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ckn395mpttp0vupgtratyufdaakgh8jgkmr3ym","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["test_board"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aszr4WZZtoqvpWfpKQFXAT8Bx/fH234W2oIq4eQnTnbI"},"signature":"ZKyk6YzX+RFGm/DVJgOr46lRyLk0BhNt9h0JrCf1umV71yQM9obgHqR0Ba4d+Gl9/ymZK8xdLmryY1bfcCP/iw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ckn395mpttp0vupgtratyufdaakgh8jgkmr3ym","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["thisismybtest"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aszr4WZZtoqvpWfpKQFXAT8Bx/fH234W2oIq4eQnTnbI"},"signature":"GNMrYIpQ8zzxDGSCH8cGHFdodtXkx7xxh9jcUNk1LhwhFcnaFntzE+fNIioXe8AixPlhuvUwcH2XsL3XewRVPQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"NOlbBM9tGAqvQQ4CWWvMsLygK+4JWDUMG+ebal1yqtcTGUCkPvhni11k+NZrI1lJCkgEYk4/dCbvbNUdw8zIYg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1rz93546e2sx8g0dap0t66gx70sqk5r2d33jtfu","to_address":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","amount":"30000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzaGtCsAUkJ/y8wtbXQk89FobK6T2i5bTDsw44zoe9ZB"},"signature":"J8SmY6Ug1QvmeROlcWz93h3Ri20Rnh78gaf0Jqh68Rd2O2KgTRON4v5b/mxAIxSO7j01u6/Z5oSA+S24phdoVQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"gnodao","Path":"gno.land/r/demo/gnodao_v01","Files":[{"Name":"gnodao.gno","Body":"package gnodao\n\nimport (\n\t\"fmt\"\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype VoteOption uint32\n\nconst (\n\tYES          VoteOption = 0 // Indicates approval of the proposal in its current form.\n\tNO           VoteOption = 1 // Indicates disapproval of the proposal in its current form.\n\tNO_WITH_VETO VoteOption = 2 // Indicates stronger opposition to the proposal than simply voting No. Not available for SuperMajority-typed proposals as a simple No of 1/3 out of total votes would result in the same outcome.\n\tABSTAIN      VoteOption = 3 // Indicates that the voter is impartial to the outcome of the proposal. Although Abstain votes are counted towards the quorum, they're excluded when calculating the ratio of other voting options above.\n)\n\n// GNODAO VOTE\ntype Vote struct {\n\taddress   std.Address // address of the voter\n\ttimestamp uint64      // block timestamp of the vote\n\toption    VoteOption  // vote option\n}\n\ntype DAO struct {\n\tid               uint64\n\turi              string       // DAO homepage link\n\tmetadata         string       // DAO metadata reference link\n\tfunds            uint64       // DAO managing funds\n\tdepositHistory   []string     // deposit history - reserved for later use\n\tspendHistory     []string     // spend history - reserved for later use\n\tpermissions      []string     // permissions managed on DAO - reserved for later use\n\tpermMap          *avl.MutTree // permission map - reserved for later use\n\tvotingPowers     *avl.MutTree\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalStatus uint32\n\nconst (\n\tNIL           ProposalStatus = 0\n\tVOTING_PERIOD ProposalStatus = 1\n\tPASSED        ProposalStatus = 2\n\tREJECTED      ProposalStatus = 3\n\tFAILED        ProposalStatus = 4\n)\n\nfunc (s ProposalStatus) String() string {\n\tswitch s {\n\tcase NIL:\n\t\treturn \"Nil\"\n\tcase VOTING_PERIOD:\n\t\treturn \"VotingPeriod\"\n\tcase PASSED:\n\t\treturn \"Passed\"\n\tcase REJECTED:\n\t\treturn \"Rejected\"\n\tcase FAILED:\n\t\treturn \"Failed\"\n\t}\n\treturn \"\"\n}\n\ntype VotingPower struct {\n\taddress string\n\tpower   uint64\n}\n\ntype Proposal struct {\n\tdaoId        uint64         // dao id of the proposal\n\tid           uint64         // unique id assigned for each proposal\n\ttitle        string         // proposal title\n\tsummary      string         // proposal summary\n\tspendAmount  uint64         // amount of tokens to spend as part the proposal\n\tspender      std.Address    // address to receive spending tokens\n\tvpUpdates    []VotingPower  // updates on voting power - optional\n\tnewMetadata  string         // new metadata for the DAO - optional\n\tnewURI       string         // new URI for the DAO - optional\n\tsubmitTime   uint64         // proposal submission time\n\tvoteEndTime  uint64         // vote end time for the proposal\n\tstatus       ProposalStatus // StatusNil | StatusVotingPeriod | StatusPassed | StatusRejected | StatusFailed\n\tvotes        *avl.MutTree   // votes on the proposal\n\tvotingPowers []uint64       // voting power sum per voting option\n}\n\n// GNODAO STATE\nvar daos []DAO\nvar proposals [][]Proposal\n\nfunc getDAOVotingPower(daoId uint64, address string) uint64 {\n\tif len(daos) \u003c= int(daoId) {\n\t\treturn 0\n\t}\n\tres, ok := daos[daoId].votingPowers.Get(address)\n\tif ok {\n\t\treturn res.(uint64)\n\t}\n\treturn 0\n}\n\nfunc IsDAOMember(daoId uint64, address std.Address) bool {\n\treturn getDAOVotingPower(daoId, address.String()) \u003e 0\n}\n\nfunc getVote(daoId, proposalId uint64, address std.Address) (Vote, bool) {\n\tif int(daoId) \u003e= len(daos) {\n\t\treturn Vote{}, false\n\t}\n\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\treturn Vote{}, false\n\t}\n\n\tvote, ok := proposals[daoId][proposalId].votes.Get(address.String())\n\tif ok {\n\t\treturn vote.(Vote), true\n\t}\n\treturn Vote{}, false\n}\n\n// GNODAO FUNCTIONS\nfunc CreateDAO(\n\turi string,\n\tmetadata string,\n\tvotingPowers []VotingPower,\n\tvotingPeriod uint64,\n\tvoteQuorum uint64,\n\tthreshold uint64,\n\tvetoThreshold uint64,\n) {\n\tdaoId := uint64(len(daos))\n\tdaos = append(daos, DAO{\n\t\tid:               daoId,\n\t\turi:              uri,\n\t\tmetadata:         metadata,\n\t\tfunds:            0,\n\t\tdepositHistory:   []string{},\n\t\tspendHistory:     []string{},\n\t\tpermissions:      []string{},\n\t\tpermMap:          avl.NewMutTree(),\n\t\tvotingPowers:     avl.NewMutTree(),\n\t\ttotalVotingPower: 0,\n\t\tvotingPeriod:     votingPeriod,\n\t\tvoteQuorum:       voteQuorum,\n\t\tthreshold:        threshold,\n\t\tvetoThreshold:    vetoThreshold,\n\t})\n\n\ttotalVotingPower := uint64(0)\n\tfor _, vp := range votingPowers {\n\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\ttotalVotingPower += vp.power\n\t}\n\tdaos[daoId].totalVotingPower = totalVotingPower\n\tproposals = append(proposals, []Proposal{})\n\t// TODO: emit events\n}\n\nfunc CreateProposal(\n\tdaoId uint64,\n\ttitle, summary string,\n\tspendAmount uint64, spender std.Address,\n\tvpUpdates []VotingPower,\n\tnewMetadata string,\n\tnewURI string,\n) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a dao member\")\n\t}\n\n\tproposals[daoId] = append(proposals[daoId], Proposal{\n\t\tdaoId:        daoId,\n\t\tid:           uint64(len(proposals[daoId])),\n\t\ttitle:        title,\n\t\tsummary:      summary,\n\t\tspendAmount:  spendAmount,\n\t\tspender:      spender,\n\t\tvpUpdates:    vpUpdates,\n\t\tnewMetadata:  newMetadata,\n\t\tnewURI:       newURI,\n\t\tsubmitTime:   uint64(time.Now().Unix()),\n\t\tvoteEndTime:  uint64(time.Now().Unix()) + daos[daoId].votingPeriod,\n\t\tstatus:       VOTING_PERIOD,\n\t\tvotes:        avl.NewMutTree(),\n\t\tvotingPowers: []uint64{0, 0, 0, 0}, // initiate as zero for 4 vote types\n\t})\n}\n\nfunc VoteProposal(daoId, proposalId uint64, option VoteOption) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// if invalid proposal, panic\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\n\t// if vote end time is reached panic\n\tif time.Now().Unix() \u003e int64(proposals[daoId][proposalId].voteEndTime) {\n\t\tpanic(\"vote end time reached\")\n\t}\n\n\t// Original vote cancel\n\tcallerVotingPower := getDAOVotingPower(daoId, caller.String())\n\tvote, ok := getVote(daoId, proposalId, caller)\n\tif ok {\n\t\tif proposals[daoId][proposalId].votingPowers[int(vote.option)] \u003e callerVotingPower {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] -= callerVotingPower\n\t\t} else {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] = 0\n\t\t}\n\t}\n\n\t// Create a vote\n\tproposals[daoId][proposalId].votes.Set(caller.String(), Vote{\n\t\taddress:   caller,\n\t\ttimestamp: uint64(time.Now().Unix()),\n\t\toption:    option,\n\t})\n\n\t// Voting power by option update for new vote\n\tproposals[daoId][proposalId].votingPowers[int(option)] += callerVotingPower\n}\n\n// TODO: handle voting power change during voting period for other proposal\n// TODO: experiment with gas limit\nfunc TallyAndExecute(daoId, proposalId uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// validation for proposalId\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\tdao := daos[daoId]\n\tproposal := proposals[daoId][proposalId]\n\tvotingPowers := proposal.votingPowers\n\n\tif time.Now().Unix() \u003c int64(proposal.voteEndTime) {\n\t\tpanic(\"proposal is in voting period\")\n\t}\n\n\t// reference logic for tally - https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/keeper/tally.go\n\ttotalVotes := votingPowers[YES] + votingPowers[NO] + votingPowers[NO_WITH_VETO] + votingPowers[ABSTAIN]\n\tif totalVotes \u003c dao.totalVotingPower*dao.voteQuorum/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If no one votes (everyone abstains), proposal rejected\n\tif totalVotes == votingPowers[ABSTAIN] {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/3 of voters veto, proposal rejected\n\tvetoThreshold := dao.vetoThreshold\n\tif votingPowers[NO_WITH_VETO] \u003e totalVotes*vetoThreshold/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote Yes, proposal passes\n\tthreshold := dao.threshold\n\tif votingPowers[YES] \u003e (totalVotes-votingPowers[ABSTAIN])*threshold/100 {\n\t\tproposals[daoId][proposalId].status = PASSED\n\n\t\t// TODO: spend coins when spendAmount is positive \u0026 spender is a valid address\n\t\tif proposal.spendAmount \u003e 0 {\n\t\t\tif daos[daoId].funds \u003e= proposal.spendAmount {\n\t\t\t\tdaos[daoId].funds -= proposal.spendAmount\n\t\t\t} else {\n\t\t\t\tproposals[daoId][proposalId].status = FAILED\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tif proposal.newMetadata != \"\" {\n\t\t\tdaos[daoId].metadata = proposal.newMetadata\n\t\t}\n\n\t\tif proposal.newURI != \"\" {\n\t\t\tdaos[daoId].uri = proposal.newURI\n\t\t}\n\n\t\tfor _, vp := range proposal.vpUpdates {\n\t\t\tdaos[daoId].totalVotingPower -= getDAOVotingPower(daoId, vp.address)\n\t\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\t\tdaos[daoId].totalVotingPower += vp.power\n\t\t}\n\n\t\t// TODO: contract does not own account that can hold coins - this is one of limitations\n\t\t// TODO: Adena Wallet from OnBloc - investigate on how they manage coins (swap - custody?)\n\t\t// Manual sending for funds (Address \u003c-\u003e Address) - Miloš Živković\n\t\t// https://github.com/gnolang/gno/blob/e392ab51bc05a5efbceaa8dbe395bac2e01ad808/tm2/pkg/crypto/keys/client/send.go#L109-L119\n\t\treturn\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote No, proposal rejected\n\tproposals[daoId][proposalId].status = REJECTED\n}\n\nfunc DepositDAO(daoId uint64, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// TODO: send coins from caller to DAO\n\t// TODO: verify received amount\n\t// daos[daoId].depositHistory = append(daos[daoId].depositHistory, Deposit{\n\t// \taddress: caller,\n\t// \tamount:  amount,\n\t// })\n}\n\nfunc GetDAO(daoId uint64) DAO {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\treturn daos[daoId]\n}\n\nfunc GetDAOs(startAfter, limit uint64) []DAO {\n\tmax := uint64(len(daos))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn daos[startAfter:max]\n}\n\nfunc GetProposal(daoId, proposalId uint64) Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\treturn proposals[daoId][proposalId]\n}\n\nfunc GetProposals(daoId, startAfter, limit uint64) []Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tmax := uint64(len(proposals[daoId]))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn proposals[daoId][startAfter:max]\n}\n\nfunc Render(path string) string {\n\treturn \"\"\n}\n"},{"Name":"gnodao_test.gno","Body":"package gnodao\n\nimport (\n\t\"fmt\"\n\t\"std\"\n\t\"testing\"\n\t\"time\"\n)\n\nvar caller std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnabcde\"\nvar caller1 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\"\nvar caller2 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\"\nvar daoMembers = []std.Address{\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnccccc\",\n}\nvar votingPowers = []VotingPower{\n\t{\n\t\taddress: daoMembers[0].String(),\n\t\tpower:   1,\n\t},\n\t{\n\t\taddress: daoMembers[1].String(),\n\t\tpower:   2,\n\t},\n\t{\n\t\taddress: daoMembers[2].String(),\n\t\tpower:   3,\n\t},\n}\n\nfunc assertPanic(t *testing.T, f func()) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t}\n\t}()\n\tf()\n}\n\nfunc TestIsDAOMember(t *testing.T) {\n\tdaos = []DAO{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\n\t// TODO: what package is ideal to use for checks?\n\tif IsDAOMember(0, caller) != false {\n\t\tt.Errorf(\"Should not be false\")\n\t}\n\tif IsDAOMember(0, caller1) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n\tif IsDAOMember(0, caller2) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n}\n\nfunc TestCreateDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\tif len(daos) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tif len(proposals) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tdao := daos[0]\n\tif dao.id != 0 {\n\t\tt.Errorf(\"first DAO id should be 0\")\n\t}\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"dao uri not set properly\")\n\t}\n\tif dao.metadata != \"https://metadata.gnodao1.org\" {\n\t\tt.Errorf(\"dao metadata not set properly\")\n\t}\n\tif dao.funds != 0 {\n\t\tt.Errorf(\"dao funds not set properly\")\n\t}\n\tif len(dao.depositHistory) != 0 {\n\t\tt.Errorf(\"dao deposit history not set properly\")\n\t}\n\tif len(dao.spendHistory) != 0 {\n\t\tt.Errorf(\"dao spend history not set properly\")\n\t}\n\tif len(dao.permissions) != 0 {\n\t\tt.Errorf(\"dao permissions not set properly\")\n\t}\n\tif dao.permMap == nil {\n\t\tt.Errorf(\"dao permission map not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 0 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller1.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller2.String()) != 2 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif dao.totalVotingPower != 6 {\n\t\tt.Errorf(\"totalVotingPower not set properly\")\n\t}\n\tif dao.votingPeriod != 86400*2 {\n\t\tt.Errorf(\"votingPeriod not set properly\")\n\t}\n\tif dao.voteQuorum != 30 {\n\t\tt.Errorf(\"voteQuorum not set properly\")\n\t}\n\tif dao.threshold != 10 {\n\t\tt.Errorf(\"threshold not set properly\")\n\t}\n\tif dao.vetoThreshold != 10 {\n\t\tt.Errorf(\"vetoThreshold not set properly\")\n\t}\n}\n\nfunc TestCreateProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\t})\n\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tproposal := proposals[0][0]\n\tif proposal.daoId != 0 {\n\t\tt.Errorf(\"proposal daoId should be 0\")\n\t}\n\tif proposal.id != 0 {\n\t\tt.Errorf(\"proposal id should be 0\")\n\t}\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"proposal title not set properly\")\n\t}\n\tif proposal.summary != \"Proposal to bootstrap DAO fund.\" {\n\t\tt.Errorf(\"proposal summary not set properly\")\n\t}\n\tif proposal.spendAmount != 0 {\n\t\tt.Errorf(\"proposal spendAmount not set properly\")\n\t}\n\tif proposal.spender != caller {\n\t\tt.Errorf(\"proposal spender not set properly\")\n\t}\n\tif len(proposal.vpUpdates) != 0 {\n\t\tt.Errorf(\"proposal vpUpdates not set properly\")\n\t}\n\tif proposal.newMetadata != \"\" {\n\t\tt.Errorf(\"proposal newMetadata not set properly\")\n\t}\n\tif proposal.newURI != \"\" {\n\t\tt.Errorf(\"proposal newURI not set properly\")\n\t}\n\tif proposal.submitTime != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"proposal submitTime not set properly\")\n\t}\n\tif proposal.voteEndTime != uint64(time.Now().Unix())+daos[0].votingPeriod {\n\t\tt.Errorf(\"proposal voteEndTime not set properly\")\n\t}\n\tif proposal.status != VOTING_PERIOD {\n\t\tt.Errorf(\"proposal status not set properly\")\n\t}\n\tif proposal.votes == nil {\n\t\tt.Errorf(\"proposal votes not set properly\")\n\t}\n\tif len(proposal.votingPowers) != 4 {\n\t\tt.Errorf(\"proposal votingPowers not set properly\")\n\t}\n}\n\nfunc TestVoteProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(1, 0, YES)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(0, 1, YES)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tVoteProposal(0, 0, YES)\n\t})\n\n\t// vote and check result is set properly\n\tstd.TestSetOrigCaller(caller1)\n\tVoteProposal(0, 0, YES)\n\tvote, found := getVote(0, 0, caller1)\n\tif !found {\n\t\tt.Errorf(\"proposal vote not set\")\n\t}\n\tif vote.address != caller1 {\n\t\tt.Errorf(\"vote address not set properly\")\n\t}\n\tif vote.timestamp != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"vote timestamp not set properly\")\n\t}\n\tif vote.option != YES {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 1 {\n\t\tt.Errorf(\"votePowers by vote option not set properly\")\n\t}\n\n\t// vote again with different option and check result\n\tVoteProposal(0, 0, NO)\n\tvote, found = getVote(0, 0, caller1)\n\tif vote.option != NO {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 0 {\n\t\tt.Errorf(\"votePowers for YES not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(NO)] != 1 {\n\t\tt.Errorf(\"votePowers for NO not set properly\")\n\t}\n\n\t// test vote end time already reached\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\t\tVoteProposal(0, 0, YES)\n\t})\n}\n\nfunc TestTallyAndExecute(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{\n\t\t{\n\t\t\taddress: caller.String(),\n\t\t\tpower:   1,\n\t\t},\n\t}, \"newMetadata.com\", \"newURI.com\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(1, 0)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 1)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tTallyAndExecute(0, 0)\n\t})\n\tassertPanic(t, func() { // vote end time not pass\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 0)\n\t})\n\n\t// vote end time to be reached\n\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\n\t// quorum not reached\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for vote quorum\")\n\t}\n\n\t// everyone abstains\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for all abstains\")\n\t}\n\n\t// more than 1/3 vote with NO_WITH_VETO\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower / 2\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = daos[0].totalVotingPower / 2\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for NO_WITH_VETO\")\n\t}\n\n\t// all YES vote\n\tproposals[0][0].votingPowers[ABSTAIN] = 0\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = 0\n\tproposals[0][0].votingPowers[YES] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != PASSED {\n\t\tt.Errorf(\"proposal should be PASSED\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif daos[0].metadata != \"newMetadata.com\" {\n\t\tt.Errorf(\"metadata not set properly\")\n\t}\n\tif daos[0].uri != \"newURI.com\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestDepositDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when not a dao member\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tDepositDAO(0, 100)\n\t})\n\n\t// not panics\n\tstd.TestSetOrigCaller(caller1)\n\tDepositDAO(0, 100)\n}\n\nfunc TestGetDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tGetDAO(100)\n\t})\n\n\t// success when valid dao id\n\tdao := GetDAO(0)\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestGetDAOs(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tgotDaos := GetDAOs(0, 10)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tCreateDAO(\"https://gnodao2.org\", \"https://metadata.gnodao2.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tgotDaos = GetDAOs(0, 0)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 10)\n\tif len(gotDaos) != 2 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 1)\n\tif len(gotDaos) != 1 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n}\n\nfunc TestGetProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tGetProposal(1, 0)\n\t})\n\n\t// panic when invalid proposal id\n\tassertPanic(t, func() {\n\t\tGetProposal(0, 1)\n\t})\n\n\t// success when valid dao id and proposal id\n\tproposal := GetProposal(0, 0)\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"title not set properly\")\n\t}\n}\n\nfunc TestGetProposals(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tassertPanic(t, func() { // invalid dao id\n\t\tGetProposals(0, 0, 10)\n\t})\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"proposal #1\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\tCreateProposal(0, \"proposal #2\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\tgotProposals := GetProposals(0, 0, 0)\n\tif len(gotProposals) != 0 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 10)\n\tif len(gotProposals) != 2 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 1)\n\tif len(gotProposals) != 1 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n}\n\nfunc TestRender(t *testing.T) {\n\tif Render(\"\") != \"\" {\n\t\tt.Errorf(\"Render function should empty\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"Yiw39HGBllVL6GsXJUYTuJt3yZO2yLZ83lRV0qSXFDprGRaGnmNkyu0e0kPozXTT9dRqjU+OF9QGwzhR9MfTng=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"gnodao","Path":"gno.land/r/demo/gnodao_v01","Files":[{"Name":"gnodao.gno","Body":"package gnodao\n\nimport (\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype VoteOption uint32\n\nconst (\n\tYES          VoteOption = 0 // Indicates approval of the proposal in its current form.\n\tNO           VoteOption = 1 // Indicates disapproval of the proposal in its current form.\n\tNO_WITH_VETO VoteOption = 2 // Indicates stronger opposition to the proposal than simply voting No. Not available for SuperMajority-typed proposals as a simple No of 1/3 out of total votes would result in the same outcome.\n\tABSTAIN      VoteOption = 3 // Indicates that the voter is impartial to the outcome of the proposal. Although Abstain votes are counted towards the quorum, they're excluded when calculating the ratio of other voting options above.\n)\n\n// GNODAO VOTE\ntype Vote struct {\n\taddress   std.Address // address of the voter\n\ttimestamp uint64      // block timestamp of the vote\n\toption    VoteOption  // vote option\n}\n\ntype DAO struct {\n\tid               uint64\n\turi              string       // DAO homepage link\n\tmetadata         string       // DAO metadata reference link\n\tfunds            uint64       // DAO managing funds\n\tdepositHistory   []string     // deposit history - reserved for later use\n\tspendHistory     []string     // spend history - reserved for later use\n\tpermissions      []string     // permissions managed on DAO - reserved for later use\n\tpermMap          *avl.MutTree // permission map - reserved for later use\n\tvotingPowers     *avl.MutTree\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalStatus uint32\n\nconst (\n\tNIL           ProposalStatus = 0\n\tVOTING_PERIOD ProposalStatus = 1\n\tPASSED        ProposalStatus = 2\n\tREJECTED      ProposalStatus = 3\n\tFAILED        ProposalStatus = 4\n)\n\nfunc (s ProposalStatus) String() string {\n\tswitch s {\n\tcase NIL:\n\t\treturn \"Nil\"\n\tcase VOTING_PERIOD:\n\t\treturn \"VotingPeriod\"\n\tcase PASSED:\n\t\treturn \"Passed\"\n\tcase REJECTED:\n\t\treturn \"Rejected\"\n\tcase FAILED:\n\t\treturn \"Failed\"\n\t}\n\treturn \"\"\n}\n\ntype VotingPower struct {\n\taddress string\n\tpower   uint64\n}\n\ntype Proposal struct {\n\tdaoId        uint64         // dao id of the proposal\n\tid           uint64         // unique id assigned for each proposal\n\ttitle        string         // proposal title\n\tsummary      string         // proposal summary\n\tspendAmount  uint64         // amount of tokens to spend as part the proposal\n\tspender      std.Address    // address to receive spending tokens\n\tvpUpdates    []VotingPower  // updates on voting power - optional\n\tnewMetadata  string         // new metadata for the DAO - optional\n\tnewURI       string         // new URI for the DAO - optional\n\tsubmitTime   uint64         // proposal submission time\n\tvoteEndTime  uint64         // vote end time for the proposal\n\tstatus       ProposalStatus // StatusNil | StatusVotingPeriod | StatusPassed | StatusRejected | StatusFailed\n\tvotes        *avl.MutTree   // votes on the proposal\n\tvotingPowers []uint64       // voting power sum per voting option\n}\n\n// GNODAO STATE\nvar daos []DAO\nvar proposals [][]Proposal\n\nfunc getDAOVotingPower(daoId uint64, address string) uint64 {\n\tif len(daos) \u003c= int(daoId) {\n\t\treturn 0\n\t}\n\tres, ok := daos[daoId].votingPowers.Get(address)\n\tif ok {\n\t\treturn res.(uint64)\n\t}\n\treturn 0\n}\n\nfunc IsDAOMember(daoId uint64, address std.Address) bool {\n\treturn getDAOVotingPower(daoId, address.String()) \u003e 0\n}\n\nfunc getVote(daoId, proposalId uint64, address std.Address) (Vote, bool) {\n\tif int(daoId) \u003e= len(daos) {\n\t\treturn Vote{}, false\n\t}\n\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\treturn Vote{}, false\n\t}\n\n\tvote, ok := proposals[daoId][proposalId].votes.Get(address.String())\n\tif ok {\n\t\treturn vote.(Vote), true\n\t}\n\treturn Vote{}, false\n}\n\n// GNODAO FUNCTIONS\nfunc CreateDAO(\n\turi string,\n\tmetadata string,\n\tvotingPowers []VotingPower,\n\tvotingPeriod uint64,\n\tvoteQuorum uint64,\n\tthreshold uint64,\n\tvetoThreshold uint64,\n) {\n\tdaoId := uint64(len(daos))\n\tdaos = append(daos, DAO{\n\t\tid:               daoId,\n\t\turi:              uri,\n\t\tmetadata:         metadata,\n\t\tfunds:            0,\n\t\tdepositHistory:   []string{},\n\t\tspendHistory:     []string{},\n\t\tpermissions:      []string{},\n\t\tpermMap:          avl.NewMutTree(),\n\t\tvotingPowers:     avl.NewMutTree(),\n\t\ttotalVotingPower: 0,\n\t\tvotingPeriod:     votingPeriod,\n\t\tvoteQuorum:       voteQuorum,\n\t\tthreshold:        threshold,\n\t\tvetoThreshold:    vetoThreshold,\n\t})\n\n\ttotalVotingPower := uint64(0)\n\tfor _, vp := range votingPowers {\n\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\ttotalVotingPower += vp.power\n\t}\n\tdaos[daoId].totalVotingPower = totalVotingPower\n\tproposals = append(proposals, []Proposal{})\n\t// TODO: emit events\n}\n\nfunc CreateProposal(\n\tdaoId uint64,\n\ttitle, summary string,\n\tspendAmount uint64, spender std.Address,\n\tvpUpdates []VotingPower,\n\tnewMetadata string,\n\tnewURI string,\n) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a dao member\")\n\t}\n\n\tproposals[daoId] = append(proposals[daoId], Proposal{\n\t\tdaoId:        daoId,\n\t\tid:           uint64(len(proposals[daoId])),\n\t\ttitle:        title,\n\t\tsummary:      summary,\n\t\tspendAmount:  spendAmount,\n\t\tspender:      spender,\n\t\tvpUpdates:    vpUpdates,\n\t\tnewMetadata:  newMetadata,\n\t\tnewURI:       newURI,\n\t\tsubmitTime:   uint64(time.Now().Unix()),\n\t\tvoteEndTime:  uint64(time.Now().Unix()) + daos[daoId].votingPeriod,\n\t\tstatus:       VOTING_PERIOD,\n\t\tvotes:        avl.NewMutTree(),\n\t\tvotingPowers: []uint64{0, 0, 0, 0}, // initiate as zero for 4 vote types\n\t})\n}\n\nfunc VoteProposal(daoId, proposalId uint64, option VoteOption) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// if invalid proposal, panic\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\n\t// if vote end time is reached panic\n\tif time.Now().Unix() \u003e int64(proposals[daoId][proposalId].voteEndTime) {\n\t\tpanic(\"vote end time reached\")\n\t}\n\n\t// Original vote cancel\n\tcallerVotingPower := getDAOVotingPower(daoId, caller.String())\n\tvote, ok := getVote(daoId, proposalId, caller)\n\tif ok {\n\t\tif proposals[daoId][proposalId].votingPowers[int(vote.option)] \u003e callerVotingPower {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] -= callerVotingPower\n\t\t} else {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] = 0\n\t\t}\n\t}\n\n\t// Create a vote\n\tproposals[daoId][proposalId].votes.Set(caller.String(), Vote{\n\t\taddress:   caller,\n\t\ttimestamp: uint64(time.Now().Unix()),\n\t\toption:    option,\n\t})\n\n\t// Voting power by option update for new vote\n\tproposals[daoId][proposalId].votingPowers[int(option)] += callerVotingPower\n}\n\n// TODO: handle voting power change during voting period for other proposal\n// TODO: experiment with gas limit\nfunc TallyAndExecute(daoId, proposalId uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// validation for proposalId\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\tdao := daos[daoId]\n\tproposal := proposals[daoId][proposalId]\n\tvotingPowers := proposal.votingPowers\n\n\tif time.Now().Unix() \u003c int64(proposal.voteEndTime) {\n\t\tpanic(\"proposal is in voting period\")\n\t}\n\n\t// reference logic for tally - https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/keeper/tally.go\n\ttotalVotes := votingPowers[YES] + votingPowers[NO] + votingPowers[NO_WITH_VETO] + votingPowers[ABSTAIN]\n\tif totalVotes \u003c dao.totalVotingPower*dao.voteQuorum/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If no one votes (everyone abstains), proposal rejected\n\tif totalVotes == votingPowers[ABSTAIN] {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/3 of voters veto, proposal rejected\n\tvetoThreshold := dao.vetoThreshold\n\tif votingPowers[NO_WITH_VETO] \u003e totalVotes*vetoThreshold/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote Yes, proposal passes\n\tthreshold := dao.threshold\n\tif votingPowers[YES] \u003e (totalVotes-votingPowers[ABSTAIN])*threshold/100 {\n\t\tproposals[daoId][proposalId].status = PASSED\n\n\t\t// TODO: spend coins when spendAmount is positive \u0026 spender is a valid address\n\t\tif proposal.spendAmount \u003e 0 {\n\t\t\tif daos[daoId].funds \u003e= proposal.spendAmount {\n\t\t\t\tdaos[daoId].funds -= proposal.spendAmount\n\t\t\t} else {\n\t\t\t\tproposals[daoId][proposalId].status = FAILED\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tif proposal.newMetadata != \"\" {\n\t\t\tdaos[daoId].metadata = proposal.newMetadata\n\t\t}\n\n\t\tif proposal.newURI != \"\" {\n\t\t\tdaos[daoId].uri = proposal.newURI\n\t\t}\n\n\t\tfor _, vp := range proposal.vpUpdates {\n\t\t\tdaos[daoId].totalVotingPower -= getDAOVotingPower(daoId, vp.address)\n\t\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\t\tdaos[daoId].totalVotingPower += vp.power\n\t\t}\n\n\t\t// TODO: contract does not own account that can hold coins - this is one of limitations\n\t\t// TODO: Adena Wallet from OnBloc - investigate on how they manage coins (swap - custody?)\n\t\t// Manual sending for funds (Address \u003c-\u003e Address) - Miloš Živković\n\t\t// https://github.com/gnolang/gno/blob/e392ab51bc05a5efbceaa8dbe395bac2e01ad808/tm2/pkg/crypto/keys/client/send.go#L109-L119\n\t\treturn\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote No, proposal rejected\n\tproposals[daoId][proposalId].status = REJECTED\n}\n\nfunc DepositDAO(daoId uint64, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// TODO: send coins from caller to DAO\n\t// TODO: verify received amount\n\t// daos[daoId].depositHistory = append(daos[daoId].depositHistory, Deposit{\n\t// \taddress: caller,\n\t// \tamount:  amount,\n\t// })\n}\n\nfunc GetDAO(daoId uint64) DAO {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\treturn daos[daoId]\n}\n\nfunc GetDAOs(startAfter, limit uint64) []DAO {\n\tmax := uint64(len(daos))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn daos[startAfter:max]\n}\n\nfunc GetProposal(daoId, proposalId uint64) Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\treturn proposals[daoId][proposalId]\n}\n\nfunc GetProposals(daoId, startAfter, limit uint64) []Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tmax := uint64(len(proposals[daoId]))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn proposals[daoId][startAfter:max]\n}\n\nfunc Render(path string) string {\n\treturn \"\"\n}\n"},{"Name":"gnodao_test.gno","Body":"package gnodao\n\nimport (\n\t\"fmt\"\n\t\"std\"\n\t\"testing\"\n\t\"time\"\n)\n\nvar caller std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnabcde\"\nvar caller1 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\"\nvar caller2 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\"\nvar daoMembers = []std.Address{\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnccccc\",\n}\nvar votingPowers = []VotingPower{\n\t{\n\t\taddress: daoMembers[0].String(),\n\t\tpower:   1,\n\t},\n\t{\n\t\taddress: daoMembers[1].String(),\n\t\tpower:   2,\n\t},\n\t{\n\t\taddress: daoMembers[2].String(),\n\t\tpower:   3,\n\t},\n}\n\nfunc assertPanic(t *testing.T, f func()) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t}\n\t}()\n\tf()\n}\n\nfunc TestIsDAOMember(t *testing.T) {\n\tdaos = []DAO{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\n\t// TODO: what package is ideal to use for checks?\n\tif IsDAOMember(0, caller) != false {\n\t\tt.Errorf(\"Should not be false\")\n\t}\n\tif IsDAOMember(0, caller1) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n\tif IsDAOMember(0, caller2) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n}\n\nfunc TestCreateDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\tif len(daos) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tif len(proposals) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tdao := daos[0]\n\tif dao.id != 0 {\n\t\tt.Errorf(\"first DAO id should be 0\")\n\t}\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"dao uri not set properly\")\n\t}\n\tif dao.metadata != \"https://metadata.gnodao1.org\" {\n\t\tt.Errorf(\"dao metadata not set properly\")\n\t}\n\tif dao.funds != 0 {\n\t\tt.Errorf(\"dao funds not set properly\")\n\t}\n\tif len(dao.depositHistory) != 0 {\n\t\tt.Errorf(\"dao deposit history not set properly\")\n\t}\n\tif len(dao.spendHistory) != 0 {\n\t\tt.Errorf(\"dao spend history not set properly\")\n\t}\n\tif len(dao.permissions) != 0 {\n\t\tt.Errorf(\"dao permissions not set properly\")\n\t}\n\tif dao.permMap == nil {\n\t\tt.Errorf(\"dao permission map not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 0 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller1.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller2.String()) != 2 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif dao.totalVotingPower != 6 {\n\t\tt.Errorf(\"totalVotingPower not set properly\")\n\t}\n\tif dao.votingPeriod != 86400*2 {\n\t\tt.Errorf(\"votingPeriod not set properly\")\n\t}\n\tif dao.voteQuorum != 30 {\n\t\tt.Errorf(\"voteQuorum not set properly\")\n\t}\n\tif dao.threshold != 10 {\n\t\tt.Errorf(\"threshold not set properly\")\n\t}\n\tif dao.vetoThreshold != 10 {\n\t\tt.Errorf(\"vetoThreshold not set properly\")\n\t}\n}\n\nfunc TestCreateProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\t})\n\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tproposal := proposals[0][0]\n\tif proposal.daoId != 0 {\n\t\tt.Errorf(\"proposal daoId should be 0\")\n\t}\n\tif proposal.id != 0 {\n\t\tt.Errorf(\"proposal id should be 0\")\n\t}\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"proposal title not set properly\")\n\t}\n\tif proposal.summary != \"Proposal to bootstrap DAO fund.\" {\n\t\tt.Errorf(\"proposal summary not set properly\")\n\t}\n\tif proposal.spendAmount != 0 {\n\t\tt.Errorf(\"proposal spendAmount not set properly\")\n\t}\n\tif proposal.spender != caller {\n\t\tt.Errorf(\"proposal spender not set properly\")\n\t}\n\tif len(proposal.vpUpdates) != 0 {\n\t\tt.Errorf(\"proposal vpUpdates not set properly\")\n\t}\n\tif proposal.newMetadata != \"\" {\n\t\tt.Errorf(\"proposal newMetadata not set properly\")\n\t}\n\tif proposal.newURI != \"\" {\n\t\tt.Errorf(\"proposal newURI not set properly\")\n\t}\n\tif proposal.submitTime != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"proposal submitTime not set properly\")\n\t}\n\tif proposal.voteEndTime != uint64(time.Now().Unix())+daos[0].votingPeriod {\n\t\tt.Errorf(\"proposal voteEndTime not set properly\")\n\t}\n\tif proposal.status != VOTING_PERIOD {\n\t\tt.Errorf(\"proposal status not set properly\")\n\t}\n\tif proposal.votes == nil {\n\t\tt.Errorf(\"proposal votes not set properly\")\n\t}\n\tif len(proposal.votingPowers) != 4 {\n\t\tt.Errorf(\"proposal votingPowers not set properly\")\n\t}\n}\n\nfunc TestVoteProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(1, 0, YES)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(0, 1, YES)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tVoteProposal(0, 0, YES)\n\t})\n\n\t// vote and check result is set properly\n\tstd.TestSetOrigCaller(caller1)\n\tVoteProposal(0, 0, YES)\n\tvote, found := getVote(0, 0, caller1)\n\tif !found {\n\t\tt.Errorf(\"proposal vote not set\")\n\t}\n\tif vote.address != caller1 {\n\t\tt.Errorf(\"vote address not set properly\")\n\t}\n\tif vote.timestamp != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"vote timestamp not set properly\")\n\t}\n\tif vote.option != YES {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 1 {\n\t\tt.Errorf(\"votePowers by vote option not set properly\")\n\t}\n\n\t// vote again with different option and check result\n\tVoteProposal(0, 0, NO)\n\tvote, found = getVote(0, 0, caller1)\n\tif vote.option != NO {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 0 {\n\t\tt.Errorf(\"votePowers for YES not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(NO)] != 1 {\n\t\tt.Errorf(\"votePowers for NO not set properly\")\n\t}\n\n\t// test vote end time already reached\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\t\tVoteProposal(0, 0, YES)\n\t})\n}\n\nfunc TestTallyAndExecute(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{\n\t\t{\n\t\t\taddress: caller.String(),\n\t\t\tpower:   1,\n\t\t},\n\t}, \"newMetadata.com\", \"newURI.com\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(1, 0)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 1)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tTallyAndExecute(0, 0)\n\t})\n\tassertPanic(t, func() { // vote end time not pass\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 0)\n\t})\n\n\t// vote end time to be reached\n\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\n\t// quorum not reached\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for vote quorum\")\n\t}\n\n\t// everyone abstains\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for all abstains\")\n\t}\n\n\t// more than 1/3 vote with NO_WITH_VETO\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower / 2\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = daos[0].totalVotingPower / 2\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for NO_WITH_VETO\")\n\t}\n\n\t// all YES vote\n\tproposals[0][0].votingPowers[ABSTAIN] = 0\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = 0\n\tproposals[0][0].votingPowers[YES] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != PASSED {\n\t\tt.Errorf(\"proposal should be PASSED\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif daos[0].metadata != \"newMetadata.com\" {\n\t\tt.Errorf(\"metadata not set properly\")\n\t}\n\tif daos[0].uri != \"newURI.com\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestDepositDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when not a dao member\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tDepositDAO(0, 100)\n\t})\n\n\t// not panics\n\tstd.TestSetOrigCaller(caller1)\n\tDepositDAO(0, 100)\n}\n\nfunc TestGetDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tGetDAO(100)\n\t})\n\n\t// success when valid dao id\n\tdao := GetDAO(0)\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestGetDAOs(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tgotDaos := GetDAOs(0, 10)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tCreateDAO(\"https://gnodao2.org\", \"https://metadata.gnodao2.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tgotDaos = GetDAOs(0, 0)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 10)\n\tif len(gotDaos) != 2 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 1)\n\tif len(gotDaos) != 1 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n}\n\nfunc TestGetProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tGetProposal(1, 0)\n\t})\n\n\t// panic when invalid proposal id\n\tassertPanic(t, func() {\n\t\tGetProposal(0, 1)\n\t})\n\n\t// success when valid dao id and proposal id\n\tproposal := GetProposal(0, 0)\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"title not set properly\")\n\t}\n}\n\nfunc TestGetProposals(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tassertPanic(t, func() { // invalid dao id\n\t\tGetProposals(0, 0, 10)\n\t})\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"proposal #1\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\tCreateProposal(0, \"proposal #2\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\tgotProposals := GetProposals(0, 0, 0)\n\tif len(gotProposals) != 0 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 10)\n\tif len(gotProposals) != 2 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 1)\n\tif len(gotProposals) != 1 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n}\n\nfunc TestRender(t *testing.T) {\n\tif Render(\"\") != \"\" {\n\t\tt.Errorf(\"Render function should empty\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"aCiP0umLORzUfT4lOQ9p+7gKXPVNlXJbQoWxFMX+6eE1WEM9TESmysSyA4DJxwmTQwJEcYyOeIuCPu2+bTXPTQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1l7nmtmzptycmt36lrju4ypum2yr5zx244c52r3","to_address":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","amount":"100000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A98IFyM+yKsk0qIx5E0oc4bZxYWQ9WnMDU1kiclZmnpK"},"signature":"RIkKEu0p3Q9sC1VZlzs3GhaukcyGxFWTk+Y14Qnvrs9rkZEtk6e1PkR9rwnbKXe0UB/XlEYwh+vds4a7jRa4UQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModAddPost","args":["funding-program","Announcing the Gno.land Funding and Grants Program","\nIf you’re interested in building in Gno.land and using the Gnolang (Gno) language to make a meaningful contribution, we’ve launched the Gno.land Funding and Grants Program to support you on your journey. If you’re a developer, tinkerer, researcher, or educator and you’re excited by the idea of creating innovative dApps, tooling, infrastructure, products, or smart contract libraries on Gno.land, now you can apply for funding.\n\n**About the Gnoland Funding and Grants Program**\n\nWe’re building Gno.land to endure with timeless code that will serve as a reference point for many years to come. Secured by a novel consensus mechanism, Proof of Contribution, Gno.land rewards contributors fairly, addressing one of the blockchain industry’s biggest problems. The developers that are most active on the platform with the highest quality contributions will secure the most rewards. We already have a growing community of Gnomes innovating and building on Gno.land and we’re looking to add more contributors to extend the usability of the platform and its smart contract library.\n\nOur grants program will encourage further participation by allocating financial awards and contributions to individuals and teams who want to build dApps, core infrastructure, products, or features on Gno.land, incentivizing more like-minded Gnomes to test the Proof of Contribution mechanism and push the chain to new limits. The grant amount and duration will depend on the scope and ambition of the project as well as the work involved.\n\n**Types of Contributors**\n\nThe Gno.land Funding and Grants program is divided into four different categories – tinkerer, builder, researcher, and educator – to ensure that we cater to a diverse range of people and working preferences. Here’s how we define these categories:\n\n- Tinkerer: You want to experiment and invent\n    - Build dApps, improve features, and find and develop new ideas\n- Builder: You have an idea and are ready to build it\n    - Build dApps, infrastructure, tooling, products, or port your existing apps to Gno\n- Researcher: You want to discover and analyze\n    - Deep dive into topics linked to the Gno.land universe\n\n**What We Are Looking For**\n\nTo qualify for a Gno.land grant, we’re looking for motivated and passionate people who can contribute by developing dApps, core infrastructure, useful and innovative products, or features that improve the usability of the Gno.land chain, specifically:\n\n- Decentralized Applications (dApps)\n    - What types of dApps do you want to see on Gno.land? Show us.\n    - Build, test, and launch a suite of Gno.land dApps for the community, focusing on diverse use cases and industries such as DeFi, gaming, supply chain management, and social media. Ensure that these apps cater to both individual users and businesses\n    - These dApps should integrate seamlessly with existing Gno.land infrastructure, encourage user interaction, and promote the adoption of Gno.land services\n- Infrastructure, DevX, Quality\n    - Develop comprehensive GitHub and AWS integration for Gno.land, including streamlined deployment processes, continuous integration and delivery pipelines, and monitoring tools\n    - Create Helm charts for easy deployment and management of Gno clusters, enabling users to quickly set up and scale their Gno infrastructure\n    - Design and implement an event system for Gno.land contracts, allowing for real-time monitoring, analysis, and auditing of contract-related events\n    - Enhance Gno.land security by conducting regular vulnerability assessments, penetration testing, and implementing best practices for secure smart contract development\n- Products\n    - Develop advanced project management software tailored to the needs of Gno.land developers and teams, with features such as task tracking, collaboration tools, and integrated Gno.land services\n    - Create comprehensive documentation, including guides, tutorials, and API references, to help users understand and utilize Gno.land's features and services more effectively\n    - Design a censorship-resistant smart contract system, enabling secure and transparent transactions and interactions on the Gno.land platform, free from external interference\n- Interoperability \u0026 Integration\n    - Implement cross-chain compatibility and interoperability, allowing Gno.land to connect and interact with other blockchain networks, expanding its potential user base and increasing its overall reach\n    - Develop a powerful integrated development environment (IDE) specifically for Gno.land developers, with features like code completion, debugging tools, and seamless integration with Gno.land services\n    - Design and launch a user-friendly wallet for Gno tokens, featuring a secure and intuitive interface, support for multiple devices, and easy integration with Gno.land dApps\n\nThe above guidelines are by no means exhaustive and are intended to spark your imagination and give examples of the types of contributions we’re looking for in Gno.land. We’re open-minded and willing to assess all grant proposals, so if you have an idea that’s not on the list or a suggestion that you think will benefit our vibrant community, let us know. If your submission doesn’t qualify for a grant, we’ll do our best to provide you with open and honest feedback and points for improvement, as well as identify any opportunities to get involved in our ongoing incentivized Game of Realms competition.\n\n**Meet Our First Grantees - Onbloc**\n\n**Onbloc**\n\nOnbloc is a blockchain software company building core infrastructure for Gno.land and\n\nhelping other dApp developers onboard to the Gno.land ecosystem seamlessly. The team has developed the Gno.land Developer Portal, which provides comprehensive introductory docs for developers, the Adena web3 wallet for Gno.land, and the Gnoscan block explorer. As Gno.land’s most active contributor, Onbloc is leading many community-driven initiatives and we’re excited to extend a grant to this passionate South Korea-based development team to continue their incredible work developing the wallet further, iterating the Gnoscan block explorer, and building Gno.land’s first DEX, Gnoswap.\n\nIn addition to this, we want to encourage Onbloc to continue their amazing work with the community, contributing to meetings, replying to comments on our social platforms, writing code base, organizing local events and meet-ups in South Korea, and creating products that expand the Gno.land ecosystem.\n\n*“Onbloc is thrilled to be a part of the Gno.land Grants Program. As one of the earliest contributors, our endeavors have involved releasing technical guides and research reports, developing infrastructure tools for dApps, creating DeFi smart contracts, and more. We are excited to leverage this grant to further enhance the quality of our products and strengthen our workforce. The grant will enable us to cover some of the existing expenses and hire additional developers to focus on smart contracts and the core side of GnoVM. We expect these endeavors to push the Gno.land blockchain to new limits and accelerate the achievement of the milestones on our roadmap. With the support from the Gnoland team, we are confident in our ability to make significant strides and further contributions to foster the growth of the Gnoland ecosystem.”*\n\n*Dongwon Shin, CEO, Onbloc*\n\n**Teritori**\n\nTeritori is a super-dApp project allowing individuals and organizations to interact, organize, and communicate in a radically resilient and decentralized way. Based on an interoperable vision, the application is built on a multi-chain experience approach, gradually integrating Gnolang as the fundamental technical brick of the system. Currently in Beta ([available here](https://app.teritori.com/)), the app is making modular tools and dApps available to users, with a single gamified user experience. Teritori's philosophy is to offer users and developers a place that belongs to them, their territory, with an emphasis on interoperability, modularity, and customization.\n\nUsers can interact with a social network, NFT marketplace, DAO launcher, service marketplace, games, etc., and integrate a plethora of dApps thanks to the dApp store, where Teritori will promote all Gno.land dApps to encourage the growth of the ecosystem. Using the Gno.land grant, Teritori will continue this amazing work and develop a moderation DAO to provide content moderation to Gno.land in a healthy and decentralized way, a challenge that faces the entire web3 industry. By 2024, the UX of Teritori v1 will be based on decentralized messaging without blockchain, allowing users to converse in a \"natural\" way while adding modules and web3 features. Creating and managing a GnoDAO could be as easy as managing a WhatsApp group.\n\n*“At Teritori, we want to make decentralized organizations accessible to all and experiment with new governance models for humans, social groups, businesses, and diverse organizations. Gno.land enables us to build this vision in a modular, future-proof, and censorship-resistant way. Thanks to the Grants Program, we'll be able to accelerate our development, continue to contribute proactively and build user experiences that enable as many people as possible to discover the Gnol.and ecosystem. We're starting work developing a DAO launcher, with different standard templates for DAOs, in particular, DAOs enabling moderation within news feeds, forums, or social networks. This will rapidly open many doors, such as those of conflict resolution DAOs, on-service marketplaces, or project management software. Gnol.and is a playground where anything is possible! We'll be documenting [our journey here](https://github.com/gnolang/hackerspace/issues/7#issuecomment-1588197187), and sharing our progress as we stay connected to the needs of the community.”*\n\n*Zooma, Core Lead, Teritori*\n\n**Zack**\n\nZack is the first tinkerer-in-residence at Gno.land. With a deep-rooted passion for innovation, he embraced Go early on in 2013 and ever since, has been harnessing its power to craft peer-to-peer programs and develop web2 applications. While Gno.land marks Zack's initial foray into web3 development and blockchain dApps, the Gnolang language allowed him to effortlessly apply his Golang expertise. This has enabled him to flourish within an ecosystem that revolves around decentralized systems, seamlessly transitioning his skill set to create unique decentralized solutions.\n\n*“I have always been curious about web3 and blockchain technologies but have not developed expertise in smart contract languages and struggled to keep up with the fast-changing ecosystem around blockchain technologies. As an avid Go programmer, Gno and Gno.land created the opportunity for me to develop decentralized applications on blockchains by providing a framework and ecosystem that is consistent with Golang in terms of syntax, sustainability, and stability. The additional web3 features in Gno and Gno.land provide huge potential for interesting applications that I hope to unlock to move beyond web2 and harness blockchain technology for novel use cases. The grant provided for tinkerer-in-residence was the key to giving me the resources to move through this ecosystem as I try to think outside the box for what web3 can be and what blockchain can do for a web2 developer like myself.”*\n\n*Zack Scholl, tinkerer-in-residence*\n\n**How You Can Apply**\n\nActions speak louder than words. Until Gno.land is completely on-chain, the best place to start is by contributing to PRs and issues on the Gno.land repos or participating in the Game of Realms competition. If you want to apply for a grant, you’ll need to fork the Gno.land Ecosystem Fund repo and outline your proposal in your project name’s file. Once we receive your application, our team will review it and get in touch if we believe that you fit the criteria. [See GitHub for full instructions](https://github.com/gnolang/ecosystem-fund-grants). Stay tuned, we’ll be hosting a Funding and Grants Program Q\u0026A in the next few weeks!\n","gnoland,funding,grants"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"KeVsKSOKcTPAiXRXE8kaCT/5Cbj3BvxY0SfHzKLXrXpcaZ2VovCiHAhKhqMRGST6+tygzVRbZKUiiSt/gsWp3Q=="}],"memo":"from gnoblog-cli"}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/gnodao_v01","func":"CreateDAO","args":["https://gnodao1.org"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"hK+3ZqBgdt5GSL/QgS4hd74mRXyoovu/jqIDGtEXMLx0WlmmvOnH1yLzLE5FEa1tn8nGcs1gS1Y7EfBv9lDGNg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/gnodao_v01","func":"CreateDAO","args":["https://gnodao1.org","https://metadata.gnodao1.org","[{\"address\":\"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt\",\"power\": 1}]","40","30","10","10"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"4hGcpaBKtNipGwvEjZ1M7m0+7/t6Ez7oWfOQZ6Ym9pE0NaNdLDGq8V84tgg/v29aQ87GmOIztGWNEouu1ZSiYQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/gnodao_v01","func":"CreateDAO","args":["https://gnodao1.org","https://metadata.gnodao1.org","[{\"address\":\"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt\",\"power\": 1}]","40","30","10","10"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"+Q2VA2eYndt7iDEvkrCug1oAha7pwk/tcNujoK+YLUxZelESTC3Oe+hxyQ9CagXKl2Btu8IqobS/oE1EvDOQ7Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/gnodao_v01","func":"CreateDAO","args":["https://gnodao1.org","https://metadata.gnodao1.org","[{\"address\":\"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt\",\"power\": 1}]","40","30","10","10"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"T24C8fculDybMZDbFboQlAqwyrmKZj0kfEUycipCrrNsnfIOpiwMoSbHCniHiKWoIxAOBiK1q/XHBomNmUAKzA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"gnodao","Path":"gno.land/r/demo/gnodao_v02","Files":[{"Name":"gnodao.gno","Body":"package gnodao\n\nimport (\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype VoteOption uint32\n\nconst (\n\tYES          VoteOption = 0 // Indicates approval of the proposal in its current form.\n\tNO           VoteOption = 1 // Indicates disapproval of the proposal in its current form.\n\tNO_WITH_VETO VoteOption = 2 // Indicates stronger opposition to the proposal than simply voting No. Not available for SuperMajority-typed proposals as a simple No of 1/3 out of total votes would result in the same outcome.\n\tABSTAIN      VoteOption = 3 // Indicates that the voter is impartial to the outcome of the proposal. Although Abstain votes are counted towards the quorum, they're excluded when calculating the ratio of other voting options above.\n)\n\n// GNODAO VOTE\ntype Vote struct {\n\taddress   std.Address // address of the voter\n\ttimestamp uint64      // block timestamp of the vote\n\toption    VoteOption  // vote option\n}\n\ntype DAO struct {\n\tid               uint64\n\turi              string       // DAO homepage link\n\tmetadata         string       // DAO metadata reference link\n\tfunds            uint64       // DAO managing funds\n\tdepositHistory   []string     // deposit history - reserved for later use\n\tspendHistory     []string     // spend history - reserved for later use\n\tpermissions      []string     // permissions managed on DAO - reserved for later use\n\tpermMap          *avl.MutTree // permission map - reserved for later use\n\tvotingPowers     *avl.MutTree\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalStatus uint32\n\nconst (\n\tNIL           ProposalStatus = 0\n\tVOTING_PERIOD ProposalStatus = 1\n\tPASSED        ProposalStatus = 2\n\tREJECTED      ProposalStatus = 3\n\tFAILED        ProposalStatus = 4\n)\n\nfunc (s ProposalStatus) String() string {\n\tswitch s {\n\tcase NIL:\n\t\treturn \"Nil\"\n\tcase VOTING_PERIOD:\n\t\treturn \"VotingPeriod\"\n\tcase PASSED:\n\t\treturn \"Passed\"\n\tcase REJECTED:\n\t\treturn \"Rejected\"\n\tcase FAILED:\n\t\treturn \"Failed\"\n\t}\n\treturn \"\"\n}\n\ntype VotingPower struct {\n\taddress string\n\tpower   uint64\n}\n\ntype Proposal struct {\n\tdaoId        uint64         // dao id of the proposal\n\tid           uint64         // unique id assigned for each proposal\n\ttitle        string         // proposal title\n\tsummary      string         // proposal summary\n\tspendAmount  uint64         // amount of tokens to spend as part the proposal\n\tspender      std.Address    // address to receive spending tokens\n\tvpUpdates    []VotingPower  // updates on voting power - optional\n\tnewMetadata  string         // new metadata for the DAO - optional\n\tnewURI       string         // new URI for the DAO - optional\n\tsubmitTime   uint64         // proposal submission time\n\tvoteEndTime  uint64         // vote end time for the proposal\n\tstatus       ProposalStatus // StatusNil | StatusVotingPeriod | StatusPassed | StatusRejected | StatusFailed\n\tvotes        *avl.MutTree   // votes on the proposal\n\tvotingPowers []uint64       // voting power sum per voting option\n}\n\n// GNODAO STATE\nvar daos []DAO\nvar proposals [][]Proposal\n\nfunc getDAOVotingPower(daoId uint64, address string) uint64 {\n\tif len(daos) \u003c= int(daoId) {\n\t\treturn 0\n\t}\n\tres, ok := daos[daoId].votingPowers.Get(address)\n\tif ok {\n\t\treturn res.(uint64)\n\t}\n\treturn 0\n}\n\nfunc IsDAOMember(daoId uint64, address std.Address) bool {\n\treturn getDAOVotingPower(daoId, address.String()) \u003e 0\n}\n\nfunc getVote(daoId, proposalId uint64, address std.Address) (Vote, bool) {\n\tif int(daoId) \u003e= len(daos) {\n\t\treturn Vote{}, false\n\t}\n\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\treturn Vote{}, false\n\t}\n\n\tvote, ok := proposals[daoId][proposalId].votes.Get(address.String())\n\tif ok {\n\t\treturn vote.(Vote), true\n\t}\n\treturn Vote{}, false\n}\n\nfunc parseVotingPowers(daoMembers, votingPowers string) []VotingPower {\n\tparsedVPs := []VotingPower{}\n\tif len(daoMembers) == 0 {\n\t\treturn parsedVPs\n\t}\n\tmemberAddrs := strings.Split(daoMembers, \",\")\n\tmemberPowers := strings.Split(votingPowers, \",\")\n\tif len(memberAddrs) != len(memberPowers) {\n\t\tpanic(\"mismatch between members and voting powers count\")\n\t}\n\tfor i, memberAddr := range memberAddrs {\n\t\tpower, err := strconv.Atoi(memberPowers[i])\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tparsedVPs = append(parsedVPs, VotingPower{\n\t\t\taddress: memberAddr,\n\t\t\tpower:   uint64(power),\n\t\t})\n\t}\n\treturn parsedVPs\n}\n\n// GNODAO FUNCTIONS\nfunc CreateDAO(\n\turi string,\n\tmetadata string,\n\tdaoMembers string,\n\tvotingPowers string,\n\tvotingPeriod uint64,\n\tvoteQuorum uint64,\n\tthreshold uint64,\n\tvetoThreshold uint64,\n) {\n\tdaoId := uint64(len(daos))\n\tdaos = append(daos, DAO{\n\t\tid:               daoId,\n\t\turi:              uri,\n\t\tmetadata:         metadata,\n\t\tfunds:            0,\n\t\tdepositHistory:   []string{},\n\t\tspendHistory:     []string{},\n\t\tpermissions:      []string{},\n\t\tpermMap:          avl.NewMutTree(),\n\t\tvotingPowers:     avl.NewMutTree(),\n\t\ttotalVotingPower: 0,\n\t\tvotingPeriod:     votingPeriod,\n\t\tvoteQuorum:       voteQuorum,\n\t\tthreshold:        threshold,\n\t\tvetoThreshold:    vetoThreshold,\n\t})\n\n\tparsedVPs := parseVotingPowers(daoMembers, votingPowers)\n\ttotalVotingPower := uint64(0)\n\tfor _, vp := range parsedVPs {\n\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\ttotalVotingPower += vp.power\n\t}\n\tdaos[daoId].totalVotingPower = totalVotingPower\n\tproposals = append(proposals, []Proposal{})\n\t// TODO: emit events\n}\n\nfunc CreateProposal(\n\tdaoId uint64,\n\ttitle, summary string,\n\tspendAmount uint64, spender std.Address,\n\tdaoMembers string,\n\tvpUpdates string,\n\tnewMetadata string,\n\tnewURI string,\n) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a dao member\")\n\t}\n\n\tparsedVPUpdates := parseVotingPowers(daoMembers, vpUpdates)\n\tproposals[daoId] = append(proposals[daoId], Proposal{\n\t\tdaoId:        daoId,\n\t\tid:           uint64(len(proposals[daoId])),\n\t\ttitle:        title,\n\t\tsummary:      summary,\n\t\tspendAmount:  spendAmount,\n\t\tspender:      spender,\n\t\tvpUpdates:    parsedVPUpdates,\n\t\tnewMetadata:  newMetadata,\n\t\tnewURI:       newURI,\n\t\tsubmitTime:   uint64(time.Now().Unix()),\n\t\tvoteEndTime:  uint64(time.Now().Unix()) + daos[daoId].votingPeriod,\n\t\tstatus:       VOTING_PERIOD,\n\t\tvotes:        avl.NewMutTree(),\n\t\tvotingPowers: []uint64{0, 0, 0, 0}, // initiate as zero for 4 vote types\n\t})\n}\n\nfunc VoteProposal(daoId, proposalId uint64, option VoteOption) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// if invalid proposal, panic\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\n\t// if vote end time is reached panic\n\tif time.Now().Unix() \u003e int64(proposals[daoId][proposalId].voteEndTime) {\n\t\tpanic(\"vote end time reached\")\n\t}\n\n\t// Original vote cancel\n\tcallerVotingPower := getDAOVotingPower(daoId, caller.String())\n\tvote, ok := getVote(daoId, proposalId, caller)\n\tif ok {\n\t\tif proposals[daoId][proposalId].votingPowers[int(vote.option)] \u003e callerVotingPower {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] -= callerVotingPower\n\t\t} else {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] = 0\n\t\t}\n\t}\n\n\t// Create a vote\n\tproposals[daoId][proposalId].votes.Set(caller.String(), Vote{\n\t\taddress:   caller,\n\t\ttimestamp: uint64(time.Now().Unix()),\n\t\toption:    option,\n\t})\n\n\t// Voting power by option update for new vote\n\tproposals[daoId][proposalId].votingPowers[int(option)] += callerVotingPower\n}\n\n// TODO: handle voting power change during voting period for other proposal\n// TODO: experiment with gas limit\nfunc TallyAndExecute(daoId, proposalId uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// validation for proposalId\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\tdao := daos[daoId]\n\tproposal := proposals[daoId][proposalId]\n\tvotingPowers := proposal.votingPowers\n\n\tif time.Now().Unix() \u003c int64(proposal.voteEndTime) {\n\t\tpanic(\"proposal is in voting period\")\n\t}\n\n\t// reference logic for tally - https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/keeper/tally.go\n\ttotalVotes := votingPowers[YES] + votingPowers[NO] + votingPowers[NO_WITH_VETO] + votingPowers[ABSTAIN]\n\tif totalVotes \u003c dao.totalVotingPower*dao.voteQuorum/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If no one votes (everyone abstains), proposal rejected\n\tif totalVotes == votingPowers[ABSTAIN] {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/3 of voters veto, proposal rejected\n\tvetoThreshold := dao.vetoThreshold\n\tif votingPowers[NO_WITH_VETO] \u003e totalVotes*vetoThreshold/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote Yes, proposal passes\n\tthreshold := dao.threshold\n\tif votingPowers[YES] \u003e (totalVotes-votingPowers[ABSTAIN])*threshold/100 {\n\t\tproposals[daoId][proposalId].status = PASSED\n\n\t\t// TODO: spend coins when spendAmount is positive \u0026 spender is a valid address\n\t\tif proposal.spendAmount \u003e 0 {\n\t\t\tif daos[daoId].funds \u003e= proposal.spendAmount {\n\t\t\t\tdaos[daoId].funds -= proposal.spendAmount\n\t\t\t} else {\n\t\t\t\tproposals[daoId][proposalId].status = FAILED\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tif proposal.newMetadata != \"\" {\n\t\t\tdaos[daoId].metadata = proposal.newMetadata\n\t\t}\n\n\t\tif proposal.newURI != \"\" {\n\t\t\tdaos[daoId].uri = proposal.newURI\n\t\t}\n\n\t\tfor _, vp := range proposal.vpUpdates {\n\t\t\tdaos[daoId].totalVotingPower -= getDAOVotingPower(daoId, vp.address)\n\t\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\t\tdaos[daoId].totalVotingPower += vp.power\n\t\t}\n\n\t\t// TODO: contract does not own account that can hold coins - this is one of limitations\n\t\t// TODO: Adena Wallet from OnBloc - investigate on how they manage coins (swap - custody?)\n\t\t// Manual sending for funds (Address \u003c-\u003e Address) - Miloš Živković\n\t\t// https://github.com/gnolang/gno/blob/e392ab51bc05a5efbceaa8dbe395bac2e01ad808/tm2/pkg/crypto/keys/client/send.go#L109-L119\n\t\treturn\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote No, proposal rejected\n\tproposals[daoId][proposalId].status = REJECTED\n}\n\nfunc DepositDAO(daoId uint64, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// TODO: send coins from caller to DAO\n\t// TODO: verify received amount\n\t// daos[daoId].depositHistory = append(daos[daoId].depositHistory, Deposit{\n\t// \taddress: caller,\n\t// \tamount:  amount,\n\t// })\n}\n\nfunc GetDAO(daoId uint64) DAO {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\treturn daos[daoId]\n}\n\nfunc GetDAOs(startAfter, limit uint64) []DAO {\n\tmax := uint64(len(daos))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn daos[startAfter:max]\n}\n\nfunc GetProposal(daoId, proposalId uint64) Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\treturn proposals[daoId][proposalId]\n}\n\nfunc GetProposals(daoId, startAfter, limit uint64) []Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tmax := uint64(len(proposals[daoId]))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn proposals[daoId][startAfter:max]\n}\n\nfunc Render(path string) string {\n\treturn \"\"\n}\n"},{"Name":"gnodao_test.gno","Body":"package gnodao\n\nimport (\n\t\"fmt\"\n\t\"std\"\n\t\"testing\"\n\t\"time\"\n)\n\nvar caller std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnabcde\"\nvar caller1 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\"\nvar caller2 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\"\nvar daoMembers = []std.Address{\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnccccc\",\n}\nvar votingPowers = []VotingPower{\n\t{\n\t\taddress: daoMembers[0].String(),\n\t\tpower:   1,\n\t},\n\t{\n\t\taddress: daoMembers[1].String(),\n\t\tpower:   2,\n\t},\n\t{\n\t\taddress: daoMembers[2].String(),\n\t\tpower:   3,\n\t},\n}\n\nfunc assertPanic(t *testing.T, f func()) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t}\n\t}()\n\tf()\n}\n\nfunc TestIsDAOMember(t *testing.T) {\n\tdaos = []DAO{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\n\t// TODO: what package is ideal to use for checks?\n\tif IsDAOMember(0, caller) != false {\n\t\tt.Errorf(\"Should not be false\")\n\t}\n\tif IsDAOMember(0, caller1) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n\tif IsDAOMember(0, caller2) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n}\n\nfunc TestCreateDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\tif len(daos) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tif len(proposals) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tdao := daos[0]\n\tif dao.id != 0 {\n\t\tt.Errorf(\"first DAO id should be 0\")\n\t}\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"dao uri not set properly\")\n\t}\n\tif dao.metadata != \"https://metadata.gnodao1.org\" {\n\t\tt.Errorf(\"dao metadata not set properly\")\n\t}\n\tif dao.funds != 0 {\n\t\tt.Errorf(\"dao funds not set properly\")\n\t}\n\tif len(dao.depositHistory) != 0 {\n\t\tt.Errorf(\"dao deposit history not set properly\")\n\t}\n\tif len(dao.spendHistory) != 0 {\n\t\tt.Errorf(\"dao spend history not set properly\")\n\t}\n\tif len(dao.permissions) != 0 {\n\t\tt.Errorf(\"dao permissions not set properly\")\n\t}\n\tif dao.permMap == nil {\n\t\tt.Errorf(\"dao permission map not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 0 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller1.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller2.String()) != 2 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif dao.totalVotingPower != 6 {\n\t\tt.Errorf(\"totalVotingPower not set properly\")\n\t}\n\tif dao.votingPeriod != 86400*2 {\n\t\tt.Errorf(\"votingPeriod not set properly\")\n\t}\n\tif dao.voteQuorum != 30 {\n\t\tt.Errorf(\"voteQuorum not set properly\")\n\t}\n\tif dao.threshold != 10 {\n\t\tt.Errorf(\"threshold not set properly\")\n\t}\n\tif dao.vetoThreshold != 10 {\n\t\tt.Errorf(\"vetoThreshold not set properly\")\n\t}\n}\n\nfunc TestCreateProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\t})\n\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tproposal := proposals[0][0]\n\tif proposal.daoId != 0 {\n\t\tt.Errorf(\"proposal daoId should be 0\")\n\t}\n\tif proposal.id != 0 {\n\t\tt.Errorf(\"proposal id should be 0\")\n\t}\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"proposal title not set properly\")\n\t}\n\tif proposal.summary != \"Proposal to bootstrap DAO fund.\" {\n\t\tt.Errorf(\"proposal summary not set properly\")\n\t}\n\tif proposal.spendAmount != 0 {\n\t\tt.Errorf(\"proposal spendAmount not set properly\")\n\t}\n\tif proposal.spender != caller {\n\t\tt.Errorf(\"proposal spender not set properly\")\n\t}\n\tif len(proposal.vpUpdates) != 0 {\n\t\tt.Errorf(\"proposal vpUpdates not set properly\")\n\t}\n\tif proposal.newMetadata != \"\" {\n\t\tt.Errorf(\"proposal newMetadata not set properly\")\n\t}\n\tif proposal.newURI != \"\" {\n\t\tt.Errorf(\"proposal newURI not set properly\")\n\t}\n\tif proposal.submitTime != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"proposal submitTime not set properly\")\n\t}\n\tif proposal.voteEndTime != uint64(time.Now().Unix())+daos[0].votingPeriod {\n\t\tt.Errorf(\"proposal voteEndTime not set properly\")\n\t}\n\tif proposal.status != VOTING_PERIOD {\n\t\tt.Errorf(\"proposal status not set properly\")\n\t}\n\tif proposal.votes == nil {\n\t\tt.Errorf(\"proposal votes not set properly\")\n\t}\n\tif len(proposal.votingPowers) != 4 {\n\t\tt.Errorf(\"proposal votingPowers not set properly\")\n\t}\n}\n\nfunc TestVoteProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(1, 0, YES)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(0, 1, YES)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tVoteProposal(0, 0, YES)\n\t})\n\n\t// vote and check result is set properly\n\tstd.TestSetOrigCaller(caller1)\n\tVoteProposal(0, 0, YES)\n\tvote, found := getVote(0, 0, caller1)\n\tif !found {\n\t\tt.Errorf(\"proposal vote not set\")\n\t}\n\tif vote.address != caller1 {\n\t\tt.Errorf(\"vote address not set properly\")\n\t}\n\tif vote.timestamp != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"vote timestamp not set properly\")\n\t}\n\tif vote.option != YES {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 1 {\n\t\tt.Errorf(\"votePowers by vote option not set properly\")\n\t}\n\n\t// vote again with different option and check result\n\tVoteProposal(0, 0, NO)\n\tvote, found = getVote(0, 0, caller1)\n\tif vote.option != NO {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 0 {\n\t\tt.Errorf(\"votePowers for YES not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(NO)] != 1 {\n\t\tt.Errorf(\"votePowers for NO not set properly\")\n\t}\n\n\t// test vote end time already reached\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\t\tVoteProposal(0, 0, YES)\n\t})\n}\n\nfunc TestTallyAndExecute(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{\n\t\t{\n\t\t\taddress: caller.String(),\n\t\t\tpower:   1,\n\t\t},\n\t}, \"newMetadata.com\", \"newURI.com\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(1, 0)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 1)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tTallyAndExecute(0, 0)\n\t})\n\tassertPanic(t, func() { // vote end time not pass\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 0)\n\t})\n\n\t// vote end time to be reached\n\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\n\t// quorum not reached\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for vote quorum\")\n\t}\n\n\t// everyone abstains\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for all abstains\")\n\t}\n\n\t// more than 1/3 vote with NO_WITH_VETO\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower / 2\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = daos[0].totalVotingPower / 2\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for NO_WITH_VETO\")\n\t}\n\n\t// all YES vote\n\tproposals[0][0].votingPowers[ABSTAIN] = 0\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = 0\n\tproposals[0][0].votingPowers[YES] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != PASSED {\n\t\tt.Errorf(\"proposal should be PASSED\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif daos[0].metadata != \"newMetadata.com\" {\n\t\tt.Errorf(\"metadata not set properly\")\n\t}\n\tif daos[0].uri != \"newURI.com\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestDepositDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when not a dao member\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tDepositDAO(0, 100)\n\t})\n\n\t// not panics\n\tstd.TestSetOrigCaller(caller1)\n\tDepositDAO(0, 100)\n}\n\nfunc TestGetDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tGetDAO(100)\n\t})\n\n\t// success when valid dao id\n\tdao := GetDAO(0)\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestGetDAOs(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tgotDaos := GetDAOs(0, 10)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tCreateDAO(\"https://gnodao2.org\", \"https://metadata.gnodao2.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tgotDaos = GetDAOs(0, 0)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 10)\n\tif len(gotDaos) != 2 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 1)\n\tif len(gotDaos) != 1 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n}\n\nfunc TestGetProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tGetProposal(1, 0)\n\t})\n\n\t// panic when invalid proposal id\n\tassertPanic(t, func() {\n\t\tGetProposal(0, 1)\n\t})\n\n\t// success when valid dao id and proposal id\n\tproposal := GetProposal(0, 0)\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"title not set properly\")\n\t}\n}\n\nfunc TestGetProposals(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tassertPanic(t, func() { // invalid dao id\n\t\tGetProposals(0, 0, 10)\n\t})\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"proposal #1\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\tCreateProposal(0, \"proposal #2\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\tgotProposals := GetProposals(0, 0, 0)\n\tif len(gotProposals) != 0 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 10)\n\tif len(gotProposals) != 2 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 1)\n\tif len(gotProposals) != 1 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n}\n\nfunc TestRender(t *testing.T) {\n\tif Render(\"\") != \"\" {\n\t\tt.Errorf(\"Render function should empty\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"jYxfWfeNl/BxkcI8IVU8Uh8Azu+IeFeV6pa+pauUH2RIQvTdWEhEjDLPKGW8Xxmg24TW4QnHmzEvALOkoIjoxw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/gnodao_v02","func":"CreateDAO","args":["https://gnodao1.org","https://metadata.gnodao1.org","g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","1","40","30","10","10"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"iVib2R801xEvhcyl3nmS9jYuCDJOAbh8g/YA+2hV/WQ/+Lc7zW3LsXQ1Wv/aUdhJXX8dZxGTSp9aN706toezHQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"QwkwdXdzUvjz0M7kfdPkVli1C+KW1jxxUb5DFeTQzRpxsp7wwYHjl7OXuiZdxK9WwqXWoK9eb269XynWrw8FFA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"HUKVO914L+epuHzWnCMwYTbRhQADDOJCTJnbEC0ch7x70X7UfzBz8xvKkcENcb738cXDEYEPFSAMk289Xdx4SQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"LsdfmzhdcZyBa12mH8uKH4IDnxCcQeRQl2/08rk2bh5XuAMyPrNP4XdDfxktGZg78GrA2zJc+l42IqlDMaXEeg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"cLvJAQ8DHHIOpnwtr8f9dIJA0z4Ps/0nf8HSmG1G/MBccx1aptwpCIpU3B0r2xTXjyPjj1J+Ovfn0dDjbVfmlQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"xS4GJk6+JqfZek4fdj7QhFJFjXBzvQ/Xe9kRATGBpNRXXsIV8fVNyzuBL9Xhibsjl5UxLFyU6NvVmDuTUqw4Fw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"SmytunAvy5wI3nJFikEde2C7nZpsNSpKMd+Va+gut1gMIYSRcNN66PWstvDHtaKVIP55343fHgRGlFqfXnj2oA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"7IqQXE/Bq0IdENVPO7dAfA2yYfWNOyuY4UKLEzlwzNU8f2CIMEGAWmUKBOIVBWG4wtXm3/P6s9w2UEfR/jJhWw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","2"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"80BuahzJrCvhKOgv1FtGXCfdF8mqyZFYGRlpRhnBVjVQSQbK2zp/0lMO8IPo0T282na0OGiCynrZ41LZbR6vyw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"KGzFSLAI87GZQ63rhFUwhVb2dYc+KKfb4ZIFGZbvmA5H5frw4Tb/cfclYKgKmq08V6wk5kchuculxEAzyvVu2A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"kTmuMzcuH8mX9pTca95PfBuAhIhb3qo0miWEd/0xanYQs1uwYtWtQgbelS1tJZi1XTl70KiSAfvgGQETMsw8Pg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"10000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"O7vYNNrguhFaxiz4KiTbNTq18WCcQFPSnuB5PVODL/w/TSFq9k3NZcbjOs4KjGXIHkNDpmavqYqEueKUqWBzKQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"5000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"x72w3ze4aauraQ6AY5Pcq4jFezy4sqODpg6YIlOBxP07/bczljYX5RDXkT231B+LbvNodePI9+2Urc8JVYIQQg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","15"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"vTx/OBkJyLepdN1GA8e3uJ4TCDV4Wu5NCQ77+zzvVdFzJNFmfHnfH4JgSCDEXn5Wpnpfwa5zIJJQCJZnI9EpMw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"3000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"WCnQuDQLNHWhmoy6jJpRbvFePZFy/dXuIKrNmqD2BLBLqDX5oJ1kKFdb+wYMHcvrzz3Fs48Oa7eB80bTmRIxAg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","202"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"KzRBNqKLI0o3qUwl+u5MCxMKeDnu1gnqAbrZF6lFrf9R1EAbNn2WASQkeOrlq5uvXaH88mR1jAq4WaqkDdRaZw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"7000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"DYGyk6O/X7RIMuFfiTlWOBIBORifXH1gMnpNg6GfVY1FRAwGzX/wUdm8fFKpP1AR0wWsUE8LG3hpunlIhv7zsA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"16000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"zYXLlon1A3Rg9aI222kGMhWSD4m/TVJQ9vHWbGVFyuVANFrBOiQs/q3kTYZmpAPuFbMwhvoVU7Q6gCGFBMVbAw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"6900000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"DEowkWpeWeeG/+YfQDQ2TFzaK6h1028EqVB3Jo+5CQEdCRUqnzDdatVKdIFIIzK3SIyNqqC8+Q7j5X/m+L+asg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"hello","Path":"gno.land/r/demo/jinooosion","Files":[{"Name":"hellojinoosion.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Fpp8ne18N5/U6+IArEt0GaFUhKmaLjbDkqaEsGoy8w1vzaNlCROri9HvH/MXQVSBIcyoMDdLOvIIc2RnlR1d8w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","15"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"dEQyemfWJKsgcQDO8BBxReDBnMELPZz5i7K0xMXYFZRByNSmGOgbzzSdhI/vOtcMojnriSSFKd2qIuoJTvrIRw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"8000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"4AH+2yq3d2hnMk2vgztf3cmSm4CnU3BQVfHWcXRiXMQx/I7nLFcPQABdfA6YPUxP21Im7HKH3B5LYj/wkHt9GA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","71"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"5uUetLDO30MXYNDG0TEnxygtaKZzQw29uQVIWTXRXoJnUI0UeputNKiO+AXAq3GYrsB9NPWEMjCk65IOAVh2nA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"gggg","Path":"gno.land/r/demo/gggg","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"g7Eca3qVh78rmbrb2l2JZGQ91zmutsCZAmx+gP8bZS4i4espwbb6cujoA2lj4soMoHZy3gCwWMCItgGgqPKfQQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","15"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"eQ5O+EWiIfcZVZhzge15mn9e8qKugLHV6KRKzecB/ZUTdeiQ5SRgIJTuyifxUh1cASd1+WQjICaF3IYmf5vYBQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"2500000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"MB5oMEROemNz/ahcfOecHqxFe0UV7cmZozuo3ejfjoZ8fb8MJjdcTGAlyEkpckob1Pq+x1q8SBYFdLeyolgCAA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"g1ggg","Path":"gno.land/r/demo/ggg1g","Files":[{"Name":"hell41o.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"FQKr9SuKBvspdI9ak91TCc3QlyCsGShoABiW/kiXZHcP7q/MKyHWMZMXkiAFHIIYN0FWp8Y17RglGuDtNrET8Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g1ckddn039khwxzu4v5mc8n34vd9ksaks2l6c3kg","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"Mcm59D3pnDdBCelGWUI8ZX/SlJ3CxzFcrk4Pdp6nebhqoX0P8b+1F+WpTSuw2At2mMfBsY7JQ6XW+gvglvxvHw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ckddn039khwxzu4v5mc8n34vd9ksaks2l6c3kg","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"sufQWpSHqbf7qLrmaNnSIj0H0Nf6mcuLylHBznEFMwxYUBBO4dmjTwbqyPK4OO61ZMG596mK65FlVhKqmnqpbw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","41"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"2Dzs+PhneWdoCFO3QhIEjiWm6WjEjRn5+TQfmWTgDXUlxWqpUjXyuBQGxtnm5Ic5Xqum4jvLzHIOct+J+i918Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"6400000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"Htt6qHa7X4tuFuzHInDFN1BT4WsI4qtI490qLr02x+sVQ/EBg7Y2urZSDoWySBP4q/On9i1Bk8bb82WjJ32puQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1awfxe0zsn7wud8dhxu602mujwyx6nmsegzwcj8","7000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"1u16y6jT/RjQqstFjL7SmRWz7tTdq52E8AXkZM9WE5YyC8oQ645BI7M8yNeso4bwYnC559XB1sjBn00u+RsmbA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g10mvc8gy7pcz2th0rclm4h04qwhu6eu7m0fr4pt","10000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"XTspg8SGOB9TI1AZAJqdt3fYVOy0iYx0i3SCHoyUcm1Ew8+WQu/SwjmgT05TYWU+61TJZhJnt3Nqh8P1grlr2w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ckddn039khwxzu4v5mc8n34vd9ksaks2l6c3kg","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0kzkYEt8K5ZALtwx28ajSrJZ3f7mI5J91Lqeaf2Rqhw"},"signature":"sHwq7aRBig+sY0NpZI4u/QTKBEQBaynf8C/3H14e340s4nWmedWQQzl5Zk/f5SGBeSC+MrajKJpMWH9K8d7rOQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g17mcw908lp5y006avp4fjr082wrzryzqh2qgr8k","amount":"23000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"j/S9yOXTgSMn/yIrBxdq1Y+IFUDc3Cfc3rB4TJvP8WoVYOmoOdu0F6J6EcmLS2MkZEPHrxvoWie7KLFvWBQe0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","19"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"IzqtXmleMEKGsuRiwZQU/+vm37p7WgFmDBFcgGyyyQw+xcmfa6c3ZUkyIzlqkqXpDvOxjA+5EpO0Mo+H2AaS3A=="}],"memo":""}
