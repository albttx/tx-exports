{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g140pvdhzwxtg8yazp5zfqtmshqnt2mefs764yrw","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"KXOGvM3RGyexVZs9QvFaw1eTYLNFpPI5/9V+/sYuqDhUjIlsjVX6Vy5g2D9d5677KJ+PGm7JwpJFjc40TtIo9g=="}],"memo":""},"blockNum":"167371"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g140pvdhzwxtg8yazp5zfqtmshqnt2mefs764yrw","package":{"Name":"yep","Path":"gno.land/r/demo/yep","Files":[{"Name":"package.gno","Body":"package yep\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tyep  *grc20.AdminToken\n\tadmin std.Address = \"g140pvdhzwxtg8yazp5zfqtmshqnt2mefs764yrw\"\n)\n\nfunc init() {\n\tyep = grc20.NewAdminToken(\"yepToken\", \"yep\", 6)\n\tyep.Mint(admin, 21000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn yep.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := yep.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := yep.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tyep.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tyep.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tyep.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tyep.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tyep.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn yep.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := yep.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2Tx44JD/DHfToaZlggGB/pX5Cp2F7HLKhVHFMlQdx3"},"signature":"ELoa+OmqY7LxyhnHYPBhkoEefv2kk33/pH4xvsNPXVgK/6bVHY7EeMAkvssIq5HHEIX6p8UzvyTVbG9atSdE5A=="}],"memo":""},"blockNum":"167373"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1pkpt0uly6gj8z8wdamz9ymnn0xxcqcd6mxppnj","package":{"Name":"jgno","Path":"gno.land/r/demo/jgno","Files":[{"Name":"package.gno","Body":"package jgno\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tfoo  *grc20.AdminToken\n\tadmin std.Address = \"g1pkpt0uly6gj8z8wdamz9ymnn0xxcqcd6mxppnj\"\n)\n\nfunc init() {\n\tfoo = grc20.NewAdminToken(\"FooToken\", \"FOO\", 6)\n\tfoo.Mint(admin, 1000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn foo.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := foo.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := foo.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tfoo.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tfoo.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn foo.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := foo.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsRKpvjZdLr8SihPerl7kOFep8ExcIHszag+ztkMgPpz"},"signature":"gT2hyBR5uqT6Q3mXQEfFmAX8ekYH5FfXDJbGOwvgoqxh4wwDe6GlvNveGdNeQ7jwZ43SM/t+IDsnyKGG5FM8qg=="}],"memo":""},"blockNum":"167385"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1sl2gad9pwpxcux892m2spzersd8s6yw9jdt5p7","package":{"Name":"was","Path":"gno.land/r/test/was","Files":[{"Name":"package.gno","Body":"package WAS\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tWAS  *grc20.AdminToken\n\tadmin std.Address = \"g1sl2gad9pwpxcux892m2spzersd8s6yw9jdt5p7\"\n)\n\nfunc init() {\n\tWAS = grc20.NewAdminToken(\"WordAdventureSociety\", \"WAS\", 6)\n\tWAS.Mint(admin, 1000000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn WAS.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := WAS.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := WAS.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tWAS.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tWAS.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tWAS.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tWAS.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tWAS.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn WAS.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := WAS.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj33NJJmWyQqHJsg3vjYmFqmdFx+GPkRfq8WnEnL4Ytm"},"signature":"r+83RvMxg4gjNUm5Tbz0+2oKPN3+Ed/uj+7Ahj+vWTUdI15CJS4hEU1IFdRN7rGdFvhufcWwyXyw6GE3yGm/Mg=="}],"memo":""},"blockNum":"167397"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1sl2gad9pwpxcux892m2spzersd8s6yw9jdt5p7","package":{"Name":"was","Path":"gno.land/r/test/was","Files":[{"Name":"package.gno","Body":"package WAS\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tWAS  *grc20.AdminToken\n\tadmin std.Address = \"g1sl2gad9pwpxcux892m2spzersd8s6yw9jdt5p7\"\n)\n\nfunc init() {\n\tWAS = grc20.NewAdminToken(\"WordAdventureSociety\", \"WAS\", 6)\n\tWAS.Mint(admin, 1000000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn WAS.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := WAS.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := WAS.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tWAS.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tWAS.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tWAS.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tWAS.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tWAS.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn WAS.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := WAS.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj33NJJmWyQqHJsg3vjYmFqmdFx+GPkRfq8WnEnL4Ytm"},"signature":"mXKJg2RO+KqvGgZiMbVjOFQXmI+br4PCsX41UFg92EBIzi6lbvwF3G5mVS7eCiQwerLg0/K81JwkFIYVe6Ygbg=="}],"memo":""},"blockNum":"167399"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1sl2gad9pwpxcux892m2spzersd8s6yw9jdt5p7","package":{"Name":"was","Path":"gno.land/r/demo/was","Files":[{"Name":"package.gno","Body":"package WAS\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tWAS  *grc20.AdminToken\n\tadmin std.Address = \"g1sl2gad9pwpxcux892m2spzersd8s6yw9jdt5p7\"\n)\n\nfunc init() {\n\tWAS = grc20.NewAdminToken(\"WasToken\", \"WAS\", 6)\n\tWAS.Mint(admin, 1000000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn WAS.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := WAS.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := WAS.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tWAS.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tWAS.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tWAS.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tWAS.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tWAS.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn WAS.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := WAS.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj33NJJmWyQqHJsg3vjYmFqmdFx+GPkRfq8WnEnL4Ytm"},"signature":"1hD3+u8p2uoD8QxWh19Bb0LVsj3mE514mJ6BW+Fy35Ink7LXcRd+Sg7yylRaDfXRXwp1c69/oACHzAfqkYcnWA=="}],"memo":""},"blockNum":"167402"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1sl2gad9pwpxcux892m2spzersd8s6yw9jdt5p7","package":{"Name":"was","Path":"gno.land/r/demo/was","Files":[{"Name":"package.gno","Body":"package WEN\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tWEN  *grc20.AdminToken\n\tadmin std.Address = \"g1sl2gad9pwpxcux892m2spzersd8s6yw9jdt5p7\"\n)\n\nfunc init() {\n\tWEN = grc20.NewAdminToken(\"WENToken\", \"WEN\", 6)\n\tWEN.Mint(admin, 1000000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn WEN.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := WEN.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := WEN.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tWEN.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tWEN.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tWEN.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tWEN.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tWEN.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn WEN.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := WEN.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj33NJJmWyQqHJsg3vjYmFqmdFx+GPkRfq8WnEnL4Ytm"},"signature":"V+s9A3ncHhs9Rbl2mcWl1OQhG6ZgUreB/B2Pgx4CSsoEuAqzk053kCVZnFA25anGmR5YtkFNLKpQ3tROpU2jlA=="}],"memo":""},"blockNum":"167405"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1sl2gad9pwpxcux892m2spzersd8s6yw9jdt5p7","package":{"Name":"was","Path":"gno.land/r/demo/was","Files":[{"Name":"package.gno","Body":"package SURE\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tSURE  *grc20.AdminToken\n\tadmin std.Address = \"g1sl2gad9pwpxcux892m2spzersd8s6yw9jdt5p7\"\n)\n\nfunc init() {\n\tSURE = grc20.NewAdminToken(\"SUREToken\", \"SURE\", 6)\n\tSURE.Mint(admin, 10000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn SURE.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := SURE.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := SURE.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tSURE.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tSURE.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tSURE.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tSURE.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tSURE.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn SURE.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := SURE.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj33NJJmWyQqHJsg3vjYmFqmdFx+GPkRfq8WnEnL4Ytm"},"signature":"QbyM5RJEmEHtXSetNS3DJ6LtA00lDQ8nkNE/iLg4oJpNC+I18HbPkOH3TxujFn7O5O+Exz0DpsuRPZ/pSX9Knw=="}],"memo":""},"blockNum":"167407"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7","package":{"Name":"Alvadama","Path":"gno.land/p/Alva/Alvadama","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MpKejDKETQ1jMyN1S7wqOpCMy5vFpG3uuGKMsL0jUU"},"signature":"SK/gUDkCQnpUzkFRqxi/KAedWnK/8YAoROKlgAudgCJSp2bglQGMhU4UC11ag3RofbR8XOOVGAl7Kr1vYreKjQ=="}],"memo":""},"blockNum":"167491"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7","package":{"Name":"Alvadama","Path":"gno.land/p/Alva/Alvadama","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MpKejDKETQ1jMyN1S7wqOpCMy5vFpG3uuGKMsL0jUU"},"signature":"Tdze7K8scKzOGNStAvRlpgvg3MA3xtF888nypXYsg6wCaVS7ysiAdT0heShCkTJR8QUQiMB9jgqeDfIaT1rAsQ=="}],"memo":""},"blockNum":"167493"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7","package":{"Name":"Alvadama","Path":"gno.land/r/Alva/Alvadama","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MpKejDKETQ1jMyN1S7wqOpCMy5vFpG3uuGKMsL0jUU"},"signature":"M/FcCk/2Z6w6/IaowgZA6YtV+qMpAbhyy3fWfhS2H4JizAg/2LjA2tENvBVkSEk2WvVKf6FI9pTTrItWZaYmFw=="}],"memo":""},"blockNum":"167495"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7","package":{"Name":"Alvadama","Path":"gno.land/r/Alva/Alvadama","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MpKejDKETQ1jMyN1S7wqOpCMy5vFpG3uuGKMsL0jUU"},"signature":"fG6EDx+UUuvG4A6Pjv/iHlcZHzSqPqagRmPY943zheNgRVf+nJagYoIzi5kHSxiJE1EvrrPFiY6cxHYm+GxUYA=="}],"memo":""},"blockNum":"167497"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7","package":{"Name":"Ivan","Path":"gno.land/p/Ivan/Ivan","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MpKejDKETQ1jMyN1S7wqOpCMy5vFpG3uuGKMsL0jUU"},"signature":"eaoOwXjhZuYSVTgzRfS9CZ81lyBKOYvN6w8txeXdJEw0h+adaRLgXBRjvnJ1TDQO3X3vz2i0K0ieIpKG6xmvsQ=="}],"memo":""},"blockNum":"167500"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7","package":{"Name":"Path","Path":"gno.land/p/Path/Path","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MpKejDKETQ1jMyN1S7wqOpCMy5vFpG3uuGKMsL0jUU"},"signature":"VC6D6aqnSJDsjh2pWFyletQ+vx0wrfoosxe59QUD/vMcaxk4OGkZADk+KR66JilA8Q6DRt/eJLLrM4xtTFYKCA=="}],"memo":""},"blockNum":"167503"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7","package":{"Name":"moca","Path":"gno.land/p/vasi/moca","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MpKejDKETQ1jMyN1S7wqOpCMy5vFpG3uuGKMsL0jUU"},"signature":"G+/+K9VkcItKpz/P1AceYl3Ey7KN8P+9W09C67b0mQMz04REmgsCxaUjEn+dPKSdy2dAqfxfk6PU0xBuN253NQ=="}],"memo":""},"blockNum":"167506"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7","package":{"Name":"foo","Path":"gno.land/p/foo/foo","Files":[{"Name":"GRC20.gno","Body":"package foo\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tfoo  *grc20.AdminToken\r\n\tadmin std.Address = \"g1hqzeju0p0eup9rgxa0pxvyc0y7wnzjrdvppsy5\"\r\n)\r\n\r\nfunc init() {\r\n\tfoo = grc20.NewAdminToken(\"FooToken\", \"FOO\", 6)\r\n\tfoo.Mint(admin, 1000000000) // @administrator\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn foo.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := foo.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := foo.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tfoo.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tfoo.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tfoo.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tfoo.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tfoo.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn foo.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := foo.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MpKejDKETQ1jMyN1S7wqOpCMy5vFpG3uuGKMsL0jUU"},"signature":"A11NJy54Cp5gTt4KmM92TShJV9qvKWRm4DtKNXFs2jYhlh9Qgmhb3m5wRKBLlu7TVpEWZLhdDhzh4iL63FBTrQ=="}],"memo":""},"blockNum":"167526"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7","package":{"Name":"Alva","Path":"gno.land/p/Alvadama/Alva","Files":[{"Name":"package.gno","Body":"package Alva\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tAlva  *grc20.AdminToken\n\tadmin std.Address = \"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7\"\n)\n\nfunc init() {\n\tAlva = grc20.NewAdminToken(\"AlvaToken\", \"Alva\", 6)\n\tAlva.Mint(admin, 1000000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn Alva.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := Alva.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := Alva.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAlva.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAlva.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAlva.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tAlva.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tAlva.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn Alva.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := Alva.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MpKejDKETQ1jMyN1S7wqOpCMy5vFpG3uuGKMsL0jUU"},"signature":"Oplh68oEvFYzCOFgSpOFVl3/7jyawxyj2qmU/SEYUtM/apj59itzoLoud7bO9dHb9KF8nq5jlmgWcZEAlK/mFg=="}],"memo":""},"blockNum":"167537"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7","package":{"Name":"Alva","Path":"gno.land/p/Alvadama/Alva","Files":[{"Name":"package.gno","Body":"package Alva\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tAlva  *grc20.AdminToken\n\tadmin std.Address = \"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7\"\n)\n\nfunc init() {\n\tAlva = grc20.NewAdminToken(\"AlvaToken\", \"Alva\", 6)\n\tAlva.Mint(admin, 1000000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn Alva.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := Alva.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := Alva.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAlva.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAlva.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAlva.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tAlva.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tAlva.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn Alva.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := Alva.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MpKejDKETQ1jMyN1S7wqOpCMy5vFpG3uuGKMsL0jUU"},"signature":"jiycvGOo6ye8n+PCK73S4uKWv3khjiHRzCRFY4BGBogQkUrKU+Un7htxAV4b9Bx3pAb/FbLa/9XJgbRv/Xopqw=="}],"memo":""},"blockNum":"167541"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7","package":{"Name":"Alva","Path":"gno.land/p/Alva/Alva","Files":[{"Name":"package.gno","Body":"package Alva\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tAlva  *grc20.AdminToken\n\tadmin std.Address = \"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7\"\n)\n\nfunc init() {\n\tAlva = grc20.NewAdminToken(\"AlvaToken\", \"Alva\", 6)\n\tAlva.Mint(admin, 1000000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn Alva.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := Alva.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := Alva.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAlva.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAlva.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAlva.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tAlva.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tAlva.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn Alva.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := Alva.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MpKejDKETQ1jMyN1S7wqOpCMy5vFpG3uuGKMsL0jUU"},"signature":"7s5Gvizy0yKOX1VKrG6dqMwwHJp2PfHzBk24M0vLktwxQV30UGEMIO0vd1EBsQiiSQ0ltoTEzDZFkai+xcbdng=="}],"memo":""},"blockNum":"167543"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7","package":{"Name":"Alva","Path":"gno.land/p/Alva/Alva","Files":[{"Name":"package.gno","Body":"package Alva\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tAlva  *grc20.AdminToken\n\tadmin std.Address = \"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7\"\n)\n\nfunc init() {\n\tAlva = grc20.NewAdminToken(\"AlvaToken\", \"Alva\", 6)\n\tAlva.Mint(admin, 1000000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn Alva.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := Alva.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := Alva.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAlva.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAlva.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAlva.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tAlva.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tAlva.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn Alva.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := Alva.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MpKejDKETQ1jMyN1S7wqOpCMy5vFpG3uuGKMsL0jUU"},"signature":"nkIAt8JI+/g0yT987NSMRE7Lsxqw5WGAsWfb/mQ/Bb56c6D4cNTkwqMFha1L7r1WPLZxXKkXjTlqTGTK3wavVw=="}],"memo":""},"blockNum":"167551"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7","package":{"Name":"Alva","Path":"gno.land/p/AlvaToken/Alva","Files":[{"Name":"package.gno","Body":"package Alva\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tAlva  *grc20.AdminToken\n\tadmin std.Address = \"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7\"\n)\n\nfunc init() {\n\tAlva = grc20.NewAdminToken(\"AlvaToken\", \"Alva\", 6)\n\tAlva.Mint(admin, 1000000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn Alva.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := Alva.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := Alva.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAlva.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAlva.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAlva.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tAlva.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tAlva.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn Alva.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := Alva.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MpKejDKETQ1jMyN1S7wqOpCMy5vFpG3uuGKMsL0jUU"},"signature":"QhSkEKZzQ6NAxanXcgKJjALsM9kGlUNVEZqLl5iek7Uv7cGBYZzl1PSnpkOGJynfmcy0LCNnkxEvjhchPsSUUw=="}],"memo":""},"blockNum":"167563"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7","package":{"Name":"Alva","Path":"gno.land/p/AlvaToken/Alva","Files":[{"Name":"package.gno","Body":"package Alva\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tAlva  *grc20.AdminToken\n\tadmin std.Address = \"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7\"\n)\n\nfunc init() {\n\tAlva = grc20.NewAdminToken(\"AlvaToken\", \"Alva\", 6)\n\tAlva.Mint(admin, 1000000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn Alva.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := Alva.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := Alva.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAlva.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAlva.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAlva.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tAlva.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tAlva.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn Alva.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := Alva.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MpKejDKETQ1jMyN1S7wqOpCMy5vFpG3uuGKMsL0jUU"},"signature":"iDI3kCtiszJF7tZk20FmLUUWNlWdaESKUgHQ9Gf6x44St9SizR1HS0zOFo+Ib5ydelCtni8BrJbADqvMtiwwEw=="}],"memo":""},"blockNum":"167565"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7","package":{"Name":"Alva","Path":"gno.land/p/AlvaToken/Alva","Files":[{"Name":"package.gno","Body":"package Alva\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tAlva  *grc20.AdminToken\n\tadmin std.Address = \"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7\"\n)\n\nfunc init() {\n\tAlva = grc20.NewAdminToken(\"AlvaToken\", \"Alva\", 6)\n\tAlva.Mint(admin, 1000000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn Alva.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := Alva.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := Alva.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAlva.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAlva.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAlva.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tAlva.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tAlva.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn Alva.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := Alva.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MpKejDKETQ1jMyN1S7wqOpCMy5vFpG3uuGKMsL0jUU"},"signature":"jxVK1Kc+j32ttv5t4CZhQz66OVmnNm7QtnAKd3OhU281oUFqj6x/1PqRhRffeBQdbztv02cOe0IckmlNHLk5TA=="}],"memo":""},"blockNum":"167569"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7","package":{"Name":"AlvaToken","Path":"gno.land/p/Alva/AlvaToken","Files":[{"Name":"package.gno","Body":"package Alva\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tAlva  *grc20.AdminToken\n\tadmin std.Address = \"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7\"\n)\n\nfunc init() {\n\tAlva = grc20.NewAdminToken(\"AlvaToken\", \"Alva\", 6)\n\tAlva.Mint(admin, 1000000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn Alva.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := Alva.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := Alva.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAlva.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAlva.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAlva.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tAlva.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tAlva.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn Alva.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := Alva.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MpKejDKETQ1jMyN1S7wqOpCMy5vFpG3uuGKMsL0jUU"},"signature":"oir0YQyK7ipA0t7eiJbjhJnRw5Enw77ZCHpd96wfAmEgg5wSjyvR5/OESGdKAoFCkcjR8R02MgDrcxB+EVET5w=="}],"memo":""},"blockNum":"167571"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7","package":{"Name":"Alva","Path":"gno.land/p/Alva/Alva","Files":[{"Name":"package.gno","Body":"package Alva\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tAlva  *grc20.AdminToken\n\tadmin std.Address = \"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7\"\n)\n\nfunc init() {\n\tAlva = grc20.NewAdminToken(\"AlvaToken\", \"Alva\", 6)\n\tAlva.Mint(admin, 1000000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn Alva.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := Alva.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := Alva.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAlva.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAlva.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAlva.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tAlva.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tAlva.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn Alva.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := Alva.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MpKejDKETQ1jMyN1S7wqOpCMy5vFpG3uuGKMsL0jUU"},"signature":"4L0YpGyqvUVkHb8HVg72qqd/CMEDWlnFhX9u5uXEJ1JtRGI7UD01kNwTh63nEWRhE2Ll4qsYBIKfG4e67EwJ+A=="}],"memo":""},"blockNum":"167574"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7","package":{"Name":"Alva","Path":"gno.land/r/Alva/Alva","Files":[{"Name":"package.gno","Body":"package Alva\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tAlva  *grc20.AdminToken\n\tadmin std.Address = \"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7\"\n)\n\nfunc init() {\n\tAlva = grc20.NewAdminToken(\"AlvaToken\", \"Alva\", 6)\n\tAlva.Mint(admin, 1000000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn Alva.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := Alva.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := Alva.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAlva.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAlva.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAlva.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tAlva.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tAlva.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn Alva.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := Alva.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MpKejDKETQ1jMyN1S7wqOpCMy5vFpG3uuGKMsL0jUU"},"signature":"p19leopdilyqNgVHzjY6MXQ6HhI6slRlsT3EeqtKLrtJRnM2ini1cPwkgOV5OUieVxwzmpzeI3wE2Uhy60aCWQ=="}],"memo":""},"blockNum":"167576"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7","package":{"Name":"Uanata","Path":"gno.land/p/Uanata/Uanata","Files":[{"Name":"package.gno","Body":"package Uanata\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tUanata  *grc20.AdminToken\n\tadmin std.Address = \"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7\"\n)\n\nfunc init() {\n\tUanata = grc20.NewAdminToken(\"UanataToken\", \"Uanata\", 6)\n\tUanata.Mint(admin, 1000000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn Uanata.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := Uanata.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := Uanata.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tUanata.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tUanata.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tUanata.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tUanata.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tUanata.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn Uanata.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := Uanata.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MpKejDKETQ1jMyN1S7wqOpCMy5vFpG3uuGKMsL0jUU"},"signature":"bA6KV2xYDlArr3sTEZVW/p6Tkj//93wXPugfUukkWUFt0XAkwMd5fCL7lz/7AzSYZszzOV+lJIakgbzUXG3poQ=="}],"memo":""},"blockNum":"167582"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1uat668kmrgl8tht78hfryg62c2lg45m54zwtf8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"nCiK2tgWt73vcolx+yNOXhFvIBY5Lj/kV3FQRLuD+yBwXHTDpB268GbtZr6WXnF8lbtMGzkfiX3EKE5CFHosRw=="}],"memo":""},"blockNum":"167690"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1s97t7zlvx9nsza0dmjhq3sw5za9jf3uxv804mv","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"9wOmjATsX/RGc4Eny9adhSlKxGauDx5qgepNL8unr0oyNj2vx7TPvN7ZfFqrdzfxNnIkv0651f5iQqvhknK8FQ=="}],"memo":""},"blockNum":"167722"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1s97t7zlvx9nsza0dmjhq3sw5za9jf3uxv804mv","package":{"Name":"TEST","Path":"gno.land/p/TESTY/TEST","Files":[{"Name":"package.gno","Body":"package foo\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tfoo  *grc20.AdminToken\n\tadmin std.Address = \"g1hqzeju0p0eup9rgxa0pxvyc0y7wnzjrdvppsy5\"\n)\n\nfunc init() {\n\tfoo = grc20.NewAdminToken(\"FooToken\", \"FOO\", 6)\n\tfoo.Mint(admin, 1000000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn foo.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := foo.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := foo.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tfoo.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tfoo.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn foo.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := foo.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnxsrkEvI+lIshGO/b6EMaeTwzEugORJ6j4i1zPYbqhe"},"signature":"UH0OBSET6V8v3SEFU1TmuHDLs/zRJhdEVq9xQ5EasTsk7sWG7G137Tn0f6bFN7cx4SzfPpohiA39rRbqYci1kQ=="}],"memo":""},"blockNum":"167725"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1s97t7zlvx9nsza0dmjhq3sw5za9jf3uxv804mv","package":{"Name":"TEST","Path":"gno.land/p/TESTY/TEST","Files":[{"Name":"package.gno","Body":"package foo\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tfoo  *grc20.AdminToken\n\tadmin std.Address = \"g1hqzeju0p0eup9rgxa0pxvyc0y7wnzjrdvppsy5\"\n)\n\nfunc init() {\n\tfoo = grc20.NewAdminToken(\"FooToken\", \"FOO\", 6)\n\tfoo.Mint(admin, 1000000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn foo.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := foo.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := foo.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tfoo.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tfoo.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn foo.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := foo.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnxsrkEvI+lIshGO/b6EMaeTwzEugORJ6j4i1zPYbqhe"},"signature":"08CN95Y4MKgaj1ZepIlN57xNv9aKEH3VRKErysjSmXM1O58SVtz3w3mQqtWSTcINzHcfa4wtmsgZqUI1lAtsWA=="}],"memo":""},"blockNum":"167727"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1s97t7zlvx9nsza0dmjhq3sw5za9jf3uxv804mv","package":{"Name":"MEME","Path":"gno.land/p/TESTY/MEME","Files":[{"Name":"package.gno","Body":"package foo\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tfoo  *grc20.AdminToken\n\tadmin std.Address = \"g1s97t7zlvx9nsza0dmjhq3sw5za9jf3uxv804mv\"\n)\n\nfunc init() {\n\tfoo = grc20.NewAdminToken(\"GNOMEME\", \"FOO\", 6)\n\tfoo.Mint(admin, 1000000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn foo.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := foo.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := foo.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tfoo.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tfoo.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn foo.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := foo.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnxsrkEvI+lIshGO/b6EMaeTwzEugORJ6j4i1zPYbqhe"},"signature":"jCA5LvsQbtuzCbZpOCZ1zAZPCRvN2rVLFUmkTM3baEk0YEvPiT3tRFwnv/ceIXlPj/59BEdxzYavzyGv52CusA=="}],"memo":""},"blockNum":"167729"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1s97t7zlvx9nsza0dmjhq3sw5za9jf3uxv804mv","package":{"Name":"MEME","Path":"gno.land/p/TESTY/MEME","Files":[{"Name":"package.gno","Body":"package foo\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tfoo  *grc20.AdminToken\n\tadmin std.Address = \"g1s97t7zlvx9nsza0dmjhq3sw5za9jf3uxv804mv\"\n)\n\nfunc init() {\n\tfoo = grc20.NewAdminToken(\"GNOMEME\", \"FOO\", 6)\n\tfoo.Mint(admin, 1000000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn foo.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := foo.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := foo.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tfoo.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tfoo.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn foo.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := foo.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnxsrkEvI+lIshGO/b6EMaeTwzEugORJ6j4i1zPYbqhe"},"signature":"398ondZz6Q2JlqYlGU/vviIH8kraKcuoiNW6xRe0oqkoP1/1KzuSZER7+llynmkGtCEq6EaY4j6Ot1PJnySAUw=="}],"memo":""},"blockNum":"167732"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1s97t7zlvx9nsza0dmjhq3sw5za9jf3uxv804mv","package":{"Name":"MEME","Path":"gno.land/p/TESTY/MEME","Files":[{"Name":"package.gno","Body":"package meme\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tfoo  *grc20.AdminToken\n\tadmin std.Address = \"g1s97t7zlvx9nsza0dmjhq3sw5za9jf3uxv804mv\"\n)\n\nfunc init() {\n\tfoo = grc20.NewAdminToken(\"GNOMEME\", \"FOO\", 6)\n\tfoo.Mint(admin, 1000000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn foo.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := foo.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := foo.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tfoo.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tfoo.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn foo.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := foo.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnxsrkEvI+lIshGO/b6EMaeTwzEugORJ6j4i1zPYbqhe"},"signature":"0tdwbiDfqbnbbYljkI1ygXAm+LWtWD2F+nSrVbdX09Jr96IHnghFiqIgSnhJsVGEaQX+q/YJyNPW1LU8VeQ9Vg=="}],"memo":""},"blockNum":"167734"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1s97t7zlvx9nsza0dmjhq3sw5za9jf3uxv804mv","package":{"Name":"h","Path":"gno.land/p/t/h","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnxsrkEvI+lIshGO/b6EMaeTwzEugORJ6j4i1zPYbqhe"},"signature":"pCuG4w7BZlmBc0EIN6q86yLs8/fu6FTkv3+9OsK5PDhX2Sf+3ysnjgB2i7D8fS+ZoubTP21PbauB0q2RI16PbQ=="}],"memo":""},"blockNum":"167736"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1s97t7zlvx9nsza0dmjhq3sw5za9jf3uxv804mv","package":{"Name":"meme","Path":"gno.land/p/tdemo/meme","Files":[{"Name":"package.gno","Body":"package meme\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tmeme  *grc20.AdminToken\n\tadmin std.Address = \"g1s97t7zlvx9nsza0dmjhq3sw5za9jf3uxv804mv\"\n)\n\nfunc init() {\n\tmeme = grc20.NewAdminToken(\"gnomeme\", \"meme\", 6)\n\tmeme.Mint(admin, 1000000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn foo.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := foo.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := foo.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tfoo.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tfoo.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn foo.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := foo.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnxsrkEvI+lIshGO/b6EMaeTwzEugORJ6j4i1zPYbqhe"},"signature":"cU5M1ewpP+AdF+lRlwl3kyobd60KpXNc4gHX7bpIONovarGP5tKpNbvJf7+qeuoA4M+3BkzJt+deID70xurF6g=="}],"memo":""},"blockNum":"167741"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1s97t7zlvx9nsza0dmjhq3sw5za9jf3uxv804mv","package":{"Name":"foo","Path":"gno.land/p/demo/foo","Files":[{"Name":"package.gno","Body":"package foo\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tfoo  *grc20.AdminToken\n\tadmin std.Address = \"g1s97t7zlvx9nsza0dmjhq3sw5za9jf3uxv804mv\"\n)\n\nfunc init() {\n\tfoo = grc20.NewAdminToken(\"FooToken\", \"FOO\", 6)\n\tfoo.Mint(admin, 1000000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn foo.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := foo.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := foo.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tfoo.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tfoo.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn foo.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := foo.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnxsrkEvI+lIshGO/b6EMaeTwzEugORJ6j4i1zPYbqhe"},"signature":"5qDtfaupc8clSjmGUzb5OKCL0u0B9oiOjyXomKvMBrZB9s7cS6bQCPgJekussI/MdCvDypafUDBuvX4VXqBCnA=="}],"memo":""},"blockNum":"167746"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1s97t7zlvx9nsza0dmjhq3sw5za9jf3uxv804mv","package":{"Name":"foo","Path":"gno.land/p/demo/foo","Files":[{"Name":"package.gno","Body":"package foo\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tfoo  *grc20.AdminToken\n\tadmin std.Address = \"g1s97t7zlvx9nsza0dmjhq3sw5za9jf3uxv804mv\"\n)\n\nfunc init() {\n\tfoo = grc20.NewAdminToken(meme\", \"meme\", 6)\n\tfoo.Mint(admin, 1000000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn foo.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := foo.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := foo.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tfoo.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tfoo.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn foo.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := foo.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnxsrkEvI+lIshGO/b6EMaeTwzEugORJ6j4i1zPYbqhe"},"signature":"HkDccATWQBACbf1lFl8ThgWEUlnkYjjlay1T3ukHTbswdCrISiKweu+1qgPj0hUewWNaBuydnIuddpvBwpTOXg=="}],"memo":""},"blockNum":"167748"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1s97t7zlvx9nsza0dmjhq3sw5za9jf3uxv804mv","package":{"Name":"foo","Path":"gno.land/p/demo/foo","Files":[{"Name":"package.gno","Body":"package foo\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tfoo  *grc20.AdminToken\n\tadmin std.Address = \"g1s97t7zlvx9nsza0dmjhq3sw5za9jf3uxv804mv\"\n)\n\nfunc init() {\n\tfoo = grc20.NewAdminToken(\"gnomeme\", \"GMEME\", 6)\n\tfoo.Mint(admin, 1000000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn foo.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := foo.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := foo.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tfoo.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tfoo.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn foo.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := foo.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnxsrkEvI+lIshGO/b6EMaeTwzEugORJ6j4i1zPYbqhe"},"signature":"5YPLda6iFhnUqXtfcPk5Iy4mppflVlrg7NsMm9fVAXcgSaPYWwbaPubisPwQ/nroXEy+Hmc8C6h2mr4zWKYvAw=="}],"memo":""},"blockNum":"167750"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1s97t7zlvx9nsza0dmjhq3sw5za9jf3uxv804mv","package":{"Name":"foo","Path":"gno.land/p/demo/foo","Files":[{"Name":"package.gno","Body":"package foo\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tfoo  *grc20.AdminToken\n\tadmin std.Address = \"g1s97t7zlvx9nsza0dmjhq3sw5za9jf3uxv804mv\"\n)\n\nfunc init() {\n\tfoo = grc20.NewAdminToken(\"FooToken\", \"FOO\", 6)\n\tfoo.Mint(admin, 1000000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn foo.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := foo.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := foo.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tfoo.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tfoo.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn foo.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := foo.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnxsrkEvI+lIshGO/b6EMaeTwzEugORJ6j4i1zPYbqhe"},"signature":"AKWCsjsRJI6wXda0L5DUDUgyhgN/CJpW0bhCCAzNn9B1pVnN/kwlkGYVx6+fAHrPxg3DiCM77Y9qWRuAVFgnqQ=="}],"memo":""},"blockNum":"167752"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g12aeazyssz76as6qnhjgd5h5sufjrnm2xmqlsln","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"BGEtGH8i2uzkziFzGBfHM4j6S/fWAOc/I+qKKA2U7l4pvMbMoFptLEnlNumqji354JT7nIcPrpOGmkvT5wk+AQ=="}],"memo":""},"blockNum":"167982"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g12aeazyssz76as6qnhjgd5h5sufjrnm2xmqlsln","package":{"Name":"BTC","Path":"gno.land/r/demo/BTC","Files":[{"Name":"BTC.gno","Body":"package BTC\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tBTC  *grc20.AdminToken\r\n\tadmin std.Address = \"g12aeazyssz76as6qnhjgd5h5sufjrnm2xmqlsln\"\r\n)\r\n\r\nfunc init() {\r\n\tBTC = grc20.NewAdminToken(\"BTCToken\", \"BTC\", 8)\r\n\tBTC.Mint(admin, 2100*100000000) // @administrator\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn BTC.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := BTC.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := BTC.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tBTC.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tBTC.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tBTC.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tBTC.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tBTC.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn BTC.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := BTC.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1vhm4NdyI8m6U7csSBjiSGFom+R8ETJfqpEMCJtLdrV"},"signature":"jYWD6BMrHsoy2NJsHWaXqeEOLY+qUpfmH1k7x3G0QO5Lmcsj6qq04eU5bMGhaUJNns0BRIUfEHiBLfBBAKaY5g=="}],"memo":""},"blockNum":"167984"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g12aeazyssz76as6qnhjgd5h5sufjrnm2xmqlsln","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"VVb2bwqPDy5+iHOsEFxmpFhxeMSHU69ECRbjtHn0b0dCSaMReNQ3A8vlWCPqU1ewf5O844Rzldm0Jej7dJMcSA=="}],"memo":""},"blockNum":"167987"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g12aeazyssz76as6qnhjgd5h5sufjrnm2xmqlsln","package":{"Name":"BTC","Path":"gno.land/r/demo/BTC","Files":[{"Name":"BTC.gno","Body":"package BTC\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tBTC  *grc20.AdminToken\r\n\tadmin std.Address = \"g12aeazyssz76as6qnhjgd5h5sufjrnm2xmqlsln\"\r\n)\r\n\r\nfunc init() {\r\n\tBTC = grc20.NewAdminToken(\"BTCToken\", \"BTC\", 8)\r\n\tBTC.Mint(admin, 2100*100000000) // @administrator\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn BTC.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := BTC.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := BTC.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tBTC.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tBTC.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tBTC.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tBTC.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tBTC.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn BTC.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := BTC.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1vhm4NdyI8m6U7csSBjiSGFom+R8ETJfqpEMCJtLdrV"},"signature":"qW/GN2cKw/JRlEnN3FcSObl/vp2KR1EG7KPe1Ah0PfwGUcf33SFk6f5DkhYLd+6ikl735KNBRZYXrt80fnD0UQ=="}],"memo":""},"blockNum":"167989"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g12aeazyssz76as6qnhjgd5h5sufjrnm2xmqlsln","package":{"Name":"btc","Path":"gno.land/p/demo/btc","Files":[{"Name":"BTC.gno","Body":"package btc\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tBTC  *grc20.AdminToken\r\n\tadmin std.Address = \"g12aeazyssz76as6qnhjgd5h5sufjrnm2xmqlsln\"\r\n)\r\n\r\nfunc init() {\r\n\tBTC = grc20.NewAdminToken(\"BTCToken\", \"BTC\", 8)\r\n\tBTC.Mint(admin, 2100*100000000) // @administrator\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn BTC.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := BTC.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := BTC.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tBTC.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tBTC.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tBTC.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tBTC.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tBTC.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn BTC.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := BTC.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1vhm4NdyI8m6U7csSBjiSGFom+R8ETJfqpEMCJtLdrV"},"signature":"iUXhfKwpOGPH+vDbSDJ+++KUkjhO8kKPba/avjyzl5IAk4x2gqseSk3RYZkQYiRPY64k1CBH6uGhZHJRNq4BwA=="}],"memo":""},"blockNum":"167992"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g12aeazyssz76as6qnhjgd5h5sufjrnm2xmqlsln","package":{"Name":"btc","Path":"gno.land/r/demo/btc","Files":[{"Name":"btc.gno","Body":"package btc\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tBTC  *grc20.AdminToken\r\n\tadmin std.Address = \"g1hqzeju0p0eup9rgxa0pxvyc0y7wnzjrdvppsy5\"\r\n)\r\n\r\nfunc init() {\r\n\tBTC = grc20.NewAdminToken(\"BTCToken\", \"BTC\", 6)\r\n\tBTC.Mint(admin, 1000000000) // @administrator\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn BTC.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := BTC.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := BTC.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tBTC.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tBTC.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tBTC.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tBTC.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tBTC.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn BTC.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := BTC.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1vhm4NdyI8m6U7csSBjiSGFom+R8ETJfqpEMCJtLdrV"},"signature":"tznylDjzP1y4xK4k2bvqMZzRB23+JmfwbEoJTBUAQZddDgFHGeNRBhQrEo+XwVMt8e0jYZiDw4stEpBXCcsOwQ=="}],"memo":""},"blockNum":"168003"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g12aeazyssz76as6qnhjgd5h5sufjrnm2xmqlsln","package":{"Name":"btc2","Path":"gno.land/r/demo/btc2","Files":[{"Name":"btc.gno","Body":"package btc2\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tBTC  *grc20.AdminToken\r\n\tadmin std.Address = \"g12aeazyssz76as6qnhjgd5h5sufjrnm2xmqlsln\"\r\n)\r\n\r\nfunc init() {\r\n\tBTC = grc20.NewAdminToken(\"BTCToken\", \"BTC\", 8)\r\n\tBTC.Mint(admin, 2100 * 100000000) // @administrator\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn BTC.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := BTC.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := BTC.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tBTC.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tBTC.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tBTC.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tBTC.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tBTC.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn BTC.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := BTC.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1vhm4NdyI8m6U7csSBjiSGFom+R8ETJfqpEMCJtLdrV"},"signature":"KOzSpyQ1y7YSLkt4M2uiJJgPsSTlVTmWutg+JcxE3SpSXtk3N1ITRpq0fAH1vqXh9/VQwpXaYetx+lSPnhhlOg=="}],"memo":""},"blockNum":"168006"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1l9aypkr8xfvs82zeux486ddzec88ty69lue9de","package":{"Name":"testtesttest","Path":"gno.land/p/demo/testtesttest","Files":[{"Name":"package.gno","Body":"package hello\n\nimport (\n  \"gno.land/p/demo/ufmt\"\n)\n\nfunc main() string {\n  return ufmt.Sprintf(\"%s\", \"asdadasd\")\n}\n\nfunc Render(path string) string {\n  return main()\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8cOu+SP23y9viXAaK+QAChcbUHxn8txLdj5f3E7x520"},"signature":"MNbeMCuw/03NWcogLstOqxO9ilgSEiNjmj9Wsa8jNegsN6lyyC8f3PjtDcsNq8oTGMTJEqzffmdfR+fOebtyZA=="}],"memo":""},"blockNum":"168011"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1zakcnjtwj0rs9ejtr5c0gqlnus50xny8frar5n","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"v9puH/C4FVpviC5zbmt+f56K++vSJk+LOgwq/jPgTmM16zeO21DdJliLt03k3pIsdkwn44Lgrmazooe6aV7iTg=="}],"memo":""},"blockNum":"168163"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1zakcnjtwj0rs9ejtr5c0gqlnus50xny8frar5n","package":{"Name":"hyperborea","Path":"gno.land/r/demo/hyperborea","Files":[{"Name":"package.gno","Body":"package foo\n\nimport (\n  \"std\n  \"strings\n  \n  \"gno.land/p/demo/grc/grc20\n  \"gno.land/p/demo/ufmt\n  \"gno.land/r/demo/users\"\n)\n\nvar (\n  foo  *grc20.AdminToken\n  admin std.address = \"g1zakcnjtwj0rs9ejtr5c0gqlnus50xny8frar5n\"\n)\n\nfunc init() {\n  hyperborea = grc20.NewAdminToken(\"Hyperborea\",\"HYPERBOREA\", 6)\n  hyperborea.Mint(admin,8888888) // @administrator\n  }\n\n\t// method proxies as public functions.\n  //\n\n  // getters.\n\n  func TotalSupply() uint64 {\n    return hyperborea.TotalSupply/()\n    }\n\n    func BalanceOf(owner users.AddressOrName) uint64 {\n      balance, err := hyperborea.BalanceOf(owner.Resolve())\n\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Auv6Z8m6Fy81TGtcnOkGhX5naywcoRqxB8vWd0YVbT4e"},"signature":"SDSFEaFUwXPU/t85dm6jTL+mBZbcAiL89YqMmjgJfGVL+HrPUBkXpLwsYvXVEYXKdlD0OSma81GwL0T08ODXJg=="}],"memo":""},"blockNum":"168169"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1zakcnjtwj0rs9ejtr5c0gqlnus50xny8frar5n","package":{"Name":"hyperborea","Path":"gno.land/r/demo/hyperborea","Files":[{"Name":"package.gno","Body":"package foo\n\nimport (\n  \"std\n  \"strings\n  \n  \"gno.land/p/demo/grc/grc20\n  \"gno.land/p/demo/ufmt\n  \"gno.land/r/demo/users\"\n)\n\nvar (\n  foo  *grc20.AdminToken\n  admin std.address = \"g1zakcnjtwj0rs9ejtr5c0gqlnus50xny8frar5n\"\n)\n\nfunc init() {\n  hyperborea = grc20.NewAdminToken(\"Hyperborea\",\"HYPERBOREA\", 6)\n  hyperborea.Mint(admin,8888888) // @administrator\n  }\n\n\t// method proxies as public functions.\n  //\n\n  // getters.\n\n  func TotalSupply() uint64 {\n    return hyperborea.TotalSupply/()\n    }\n\n    func BalanceOf(owner users.AddressOrName) uint64 {\n      balance, err := hyperborea.BalanceOf(owner.Resolve())\n\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Auv6Z8m6Fy81TGtcnOkGhX5naywcoRqxB8vWd0YVbT4e"},"signature":"oM086I7FNBTW2GBR9P3td2MVdWQ6kJOLDeNn+D8BKAYtPmWVI7QxPqid7xOU54e1ijwa96D8+eiqU3D7UDdU+w=="}],"memo":""},"blockNum":"168171"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1zakcnjtwj0rs9ejtr5c0gqlnus50xny8frar5n","package":{"Name":"Hyperborea","Path":"gno.land/r/demo/Hyperborea","Files":[{"Name":"package.gno","Body":"package foo\n\nimport (\n  \"std\n  \"strings\n  \n  \"gno.land/p/demo/grc/grc20\n  \"gno.land/p/demo/ufmt\n  \"gno.land/r/demo/users\"\n)\n\nvar (\n  foo  *grc20.AdminToken\n  admin std.address = \"g1zakcnjtwj0rs9ejtr5c0gqlnus50xny8frar5n\"\n)\n\nfunc init() {\n  hyperborea = grc20.NewAdminToken(\"Hyperborea\",\"HYPERBOREA\", 6)\n  hyperborea.Mint(admin,8888888) // @administrator\n  }\n\n\t// method proxies as public functions.\n  //\n\n  // getters.\n\n  func TotalSupply() uint64 {\n    return hyperborea.TotalSupply/()\n    }\n\n    func BalanceOf(owner users.AddressOrName) uint64 {\n      balance, err := hyperborea.BalanceOf(owner.Resolve())\n\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Auv6Z8m6Fy81TGtcnOkGhX5naywcoRqxB8vWd0YVbT4e"},"signature":"fTaDRY90oJPqYjMknn15QneCGxTqYqSBZlE8SgX/zhVj43xnIBNd6kXkLTMvQVdQSgdvfTdszlGhTQ5gAaxK9w=="}],"memo":""},"blockNum":"168173"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1zakcnjtwj0rs9ejtr5c0gqlnus50xny8frar5n","package":{"Name":"hyperborea","Path":"gno.land/p/demo/hyperborea","Files":[{"Name":"package.gno","Body":"package foo\n\nimport (\n  \"std\n  \"strings\n  \n  \"gno.land/p/demo/grc/grc20\n  \"gno.land/p/demo/ufmt\n  \"gno.land/r/demo/users\"\n)\n\nvar (\n  foo  *grc20.AdminToken\n  admin std.address = \"g1zakcnjtwj0rs9ejtr5c0gqlnus50xny8frar5n\"\n)\n\nfunc init() {\n  hyperborea = grc20.NewAdminToken(\"Hyperborea\",\"HYPERBOREA\", 6)\n  hyperborea.Mint(admin,8888888) // @administrator\n  }\n\n\t// method proxies as public functions.\n  //\n\n  // getters.\n\n  func TotalSupply() uint64 {\n    return hyperborea.TotalSupply/()\n    }\n\n    func BalanceOf(owner users.AddressOrName) uint64 {\n      balance, err := hyperborea.BalanceOf(owner.Resolve())\n\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Auv6Z8m6Fy81TGtcnOkGhX5naywcoRqxB8vWd0YVbT4e"},"signature":"gsGn+hCyYgeOfE98jNOPknhiJ9bp8ouSlry0Rg1aby5pxXZajV/6/eTd71y5YdZvGU5WaoEbXLRxwed20g3MEg=="}],"memo":""},"blockNum":"168175"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1zakcnjtwj0rs9ejtr5c0gqlnus50xny8frar5n","package":{"Name":"hyperborea","Path":"gno.land/r/demo/hyperborea","Files":[{"Name":"package.gno","Body":"package foo\n\nimport (\n  \"std\n  \"strings\n  \n  \"gno.land/p/demo/grc/grc20\n  \"gno.land/p/demo/ufmt\n  \"gno.land/r/demo/users\"\n)\n\nvar (\n  foo  *grc20.AdminToken\n  admin std.address = \"g1zakcnjtwj0rs9ejtr5c0gqlnus50xny8frar5n\"\n)\n\nfunc init() {\n  hyperborea = grc20.NewAdminToken(\"Hyperborea\",\"HYPERBOREA\", 6)\n  hyperborea.Mint(admin,8888888) // @administrator\n  }\n\n\t// method proxies as public functions.\n  //\n\n  // getters.\n\n  func TotalSupply() uint64 {\n    return hyperborea.TotalSupply/()\n    }\n\n    func BalanceOf(owner users.AddressOrName) uint64 {\n      balance, err := hyperborea.BalanceOf(owner.Resolve())\n\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Auv6Z8m6Fy81TGtcnOkGhX5naywcoRqxB8vWd0YVbT4e"},"signature":"i97MZ9wGjcSgRgXGEVK+CCWJ3OgRgR/BBzeHIL+/t05l1rddZVWXwlrk7Cn/qy4j31d8VleBI1aKjhGL2gLWBQ=="}],"memo":""},"blockNum":"168178"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1zakcnjtwj0rs9ejtr5c0gqlnus50xny8frar5n","package":{"Name":"hyperborea","Path":"gno.land/r/demo/hyperborea","Files":[{"Name":"package.gno","Body":"package foo\n\nimport (\n  \"std\n  \"strings\n  \n  \"gno.land/p/demo/grc/grc20\n  \"gno.land/p/demo/ufmt\n  \"gno.land/r/demo/users\"\n)\n\nvar (\n  foo  *grc20.AdminToken\n  admin std.address = \"g1zakcnjtwj0rs9ejtr5c0gqlnus50xny8frar5n\"\n)\n\nfunc init() {\n  hyperborea = grc20.NewAdminToken(\"Hyperborea\",\"HYPERBOREA\", 6)\n  hyperborea.Mint(admin,8888888) // @administrator\n  }\n\n\t// method proxies as public functions.\n  //\n\n  // getters.\n\n  func TotalSupply() uint64 {\n    return hyperborea.TotalSupply/()\n    }\n\n    func BalanceOf(owner users.AddressOrName) uint64 {\n      balance, err := hyperborea.BalanceOf(owner.Resolve())\n\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Auv6Z8m6Fy81TGtcnOkGhX5naywcoRqxB8vWd0YVbT4e"},"signature":"bS5YrqFURu3Iv+GrbAbryBBaUwbm2a8QARgIk1r4Dbll4K2tTsrrSNBN75tNImUcmqbK9E4w0/LQCuX8QE3u2g=="}],"memo":""},"blockNum":"168204"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1zakcnjtwj0rs9ejtr5c0gqlnus50xny8frar5n","package":{"Name":"hyperborea","Path":"gno.land/r/demo/hyperborea","Files":[{"Name":"package.gno","Body":"package foo\n\nimport (\n  \"std\n  \"strings\n  \n  \"gno.land/p/demo/grc/grc20\n  \"gno.land/p/demo/ufmt\n  \"gno.land/r/demo/users\"\n)\n\nvar (\n  foo  *grc20.AdminToken\n  admin std.address = \"g1zakcnjtwj0rs9ejtr5c0gqlnus50xny8frar5n\"\n)\n\nfunc init() {\n  hyperborea = grc20.NewAdminToken(\"Hyperborea\",\"HYPERBOREA\", 6)\n  hyperborea.Mint(admin,8888888) // @administrator\n  }\n\n\t// method proxies as public functions.\n  //\n\n  // getters.\n\n  func TotalSupply() uint64 {\n    return hyperborea.TotalSupply/()\n    }\n\n    func BalanceOf(owner users.AddressOrName) uint64 {\n      balance, err := hyperborea.BalanceOf(owner.Resolve())\n\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Auv6Z8m6Fy81TGtcnOkGhX5naywcoRqxB8vWd0YVbT4e"},"signature":"lEONBnnjwyGne7UiPske15z37H+Vms6gZnNVd/yTNA1FI7B01b8jbbx8qf0nCjETjOVopHFjkdwfDLGdLcMLmw=="}],"memo":""},"blockNum":"168209"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1dvyds08axndvanwptq94qxydjtqltxz62hykat","to_address":"g17np07gtd7nj5rh4x582srdhd8247xa3s3us3y3","amount":"59999982ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1lMZ5ZunC57MwNgV7qKyNTtKJvDd/cMdzei2KdqAjAY"},"signature":"du9tRMEj1m2RX3Ol6ud+UEVoLqodBKKJ8UOJcg4sTTlf1Zw22jzkp69bOoWeCnVW4ZwVy+ZrT3Tz/8g8MHVsmw=="}],"memo":""},"blockNum":"168303"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1dvyds08axndvanwptq94qxydjtqltxz62hykat","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"C1hAZsvEPa8Kox+71BpYs+D5vX29UQJVsshbwD5ZVksgRpyKFvt0SM1T2L2bQfCSzI6iZtzXvuSpZVadfpG5Iw=="}],"memo":""},"blockNum":"168307"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1u3q3tx87jcuef08y5s3qlry2e2zpc24napc62q","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"6dZxHqAu+g6vTJfl3HZgZm6MfyT1Xgx210IoOhMlQlpYeL6dn/q6+71ckX66u9ER5bwlZU2/NZxE+nXWvoHiGw=="}],"memo":""},"blockNum":"168309"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g1s97t7zlvx9nsza0dmjhq3sw5za9jf3uxv804mv","amount":"500000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"u6SeLGuhy5QYX2ckuU72U+Ch9g780TRo83p1JgQohH5mVtXgQUiFPVB+6SMDJcnWSxLCaqARetxkjZxgPxg0aA=="}],"memo":""},"blockNum":"168344"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g1zakcnjtwj0rs9ejtr5c0gqlnus50xny8frar5n","amount":"500000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"04X4PlVDjg021YThZpXHN5W0klfhZcLGh+R9d4lM/cxgUywtn7daxwKHCEpHsCYWifdQDI8ni0no1gW9IxWouQ=="}],"memo":""},"blockNum":"168346"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g12aeazyssz76as6qnhjgd5h5sufjrnm2xmqlsln","amount":"500000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"adRc9B0Bglr1v3Xrt8uVehkV6Ma8tRTUyYxUJ5iKnjZ40RBEd9bV2jZ66LEnH4ClPq359POmKHSYTHPBQzlvyw=="}],"memo":""},"blockNum":"168348"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7","package":{"Name":"Bazilio","Path":"gno.land/p/Bazilio/Bazilio","Files":[{"Name":"package.gno","Body":"package Bazilio\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tBazilio  *grc20.AdminToken\n\tadmin std.Address = \"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7\"\n)\n\nfunc init() {\n\tBazilio = grc20.NewAdminToken(\"BazilioToken\", \"Bazilio\", 6)\n\tBazilio.Mint(admin, 1000000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn Bazilio.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := Bazilio.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := Bazilio.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tBazilio.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tBazilio.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tBazilio.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tBazilio.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tBazilio.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn Bazilio.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := Bazilio.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}p"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MpKejDKETQ1jMyN1S7wqOpCMy5vFpG3uuGKMsL0jUU"},"signature":"I/T0OR07CYJ/XT+yfnThcbBnxJ2VuUHy7wpRAppz3Fkyw5uODgFUUPOGvrol6NI8KaHaS4S724aiZquGs6X7EQ=="}],"memo":""},"blockNum":"168400"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7","package":{"Name":"Baz","Path":"gno.land/p/Bazilio/Baz","Files":[{"Name":"package.gno","Body":"package Bazilio\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tBazilio  *grc20.AdminToken\n\tadmin std.Address = \"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7\"\n)\n\nfunc init() {\n\tBazilio = grc20.NewAdminToken(\"BazilioToken\", \"Bazilio\", 6)\n\tBazilio.Mint(admin, 1000000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn Bazilio.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := Bazilio.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := Bazilio.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tBazilio.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tBazilio.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tBazilio.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tBazilio.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tBazilio.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn Bazilio.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := Bazilio.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}p"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MpKejDKETQ1jMyN1S7wqOpCMy5vFpG3uuGKMsL0jUU"},"signature":"7fhNPW6AgiSft33RuNNf1kQL8oscmN5Oarv5dX8RiqFwZV99FSrvMySdYNNxXQWOwYreFwua+cbiQ6q0n8JdVg=="}],"memo":""},"blockNum":"168402"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7","package":{"Name":"Baz","Path":"gno.land/p/Bazilio/Baz","Files":[{"Name":"package.gno","Body":"package Aleksey19\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tAleksey19  *grc20.AdminToken\n\tadmin std.Address = \"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7\"\n)\n\nfunc init() {\n\tAleksey19 = grc20.NewAdminToken(\"Aleksey19Token\", \"Aleksey19\", 6)\n\tAleksey19.Mint(admin, 1000000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn Aleksey19.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := Aleksey19.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := Aleksey19.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAleksey19.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAleksey19.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAleksey19.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tAleksey19.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tAleksey19.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn Aleksey19.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := Aleksey19.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}p"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MpKejDKETQ1jMyN1S7wqOpCMy5vFpG3uuGKMsL0jUU"},"signature":"P+kgsmB0YMbL+UC2jHmzalDdIQhUaUo2hVhmL9NXvhQN57YjblVPFMb/1n1wL9At2LKMOzRgNApJy4UfvCk/hg=="}],"memo":""},"blockNum":"168406"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7","package":{"Name":"Aleksey19","Path":"gno.land/p/Aleksey19/Aleksey19","Files":[{"Name":"package.gno","Body":"package Aleksey19\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tAleksey19  *grc20.AdminToken\n\tadmin std.Address = \"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7\"\n)\n\nfunc init() {\n\tAleksey19 = grc20.NewAdminToken(\"Aleksey19Token\", \"Aleksey19\", 6)\n\tAleksey19.Mint(admin, 1000000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn Aleksey19.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := Aleksey19.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := Aleksey19.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAleksey19.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAleksey19.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAleksey19.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tAleksey19.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tAleksey19.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn Aleksey19.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := Aleksey19.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}p"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MpKejDKETQ1jMyN1S7wqOpCMy5vFpG3uuGKMsL0jUU"},"signature":"b0s/RKF24Yd0FCu3mwmtRY67VzPsSAVvzXKBsLzpuwNIoh8nm2Rfd1wMYn0bgaNl2bx8F7ahiUIR8pKuhA2fZA=="}],"memo":""},"blockNum":"168408"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7","package":{"Name":"Aleksey19","Path":"gno.land/p/Aleksey19/Aleksey19","Files":[{"Name":"package.gno","Body":"package Aleksey19\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tAleksey19  *grc20.AdminToken\n\tadmin std.Address = \"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7\"\n)\n\nfunc init() {\n\tAleksey19 = grc20.NewAdminToken(\"Aleksey19Token\", \"Aleksey19\", 6)\n\tAleksey19.Mint(admin, 1000000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn Aleksey19.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := Aleksey19.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := Aleksey19.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAleksey19.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAleksey19.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAleksey19.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tAleksey19.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tAleksey19.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn Aleksey19.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := Aleksey19.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}p"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MpKejDKETQ1jMyN1S7wqOpCMy5vFpG3uuGKMsL0jUU"},"signature":"Asj56diYmXNVFwYaiLLENmu9vdt9HBxfHpDR5StF+JkkVvrtvwvaQSpRDsXET94kqgpsoWoGo1vDiSMqUTjYKw=="}],"memo":""},"blockNum":"168410"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7","package":{"Name":"Aleksey19","Path":"gno.land/p/Aleksey19Token/Aleksey19","Files":[{"Name":"package.gno","Body":"package Aleksey19\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tAleksey19  *grc20.AdminToken\n\tadmin std.Address = \"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7\"\n)\n\nfunc init() {\n\tAleksey19 = grc20.NewAdminToken(\"Aleksey19Token\", \"Aleksey19\", 6)\n\tAleksey19.Mint(admin, 1000000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn Aleksey19.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := Aleksey19.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := Aleksey19.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAleksey19.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAleksey19.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tAleksey19.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tAleksey19.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tAleksey19.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn Aleksey19.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := Aleksey19.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}p"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MpKejDKETQ1jMyN1S7wqOpCMy5vFpG3uuGKMsL0jUU"},"signature":"6Z/Fm/YUI9pKOoYWsuj/EOFsZALm4vWJ48Iixhx3u1QRnF2PZggmVEOHexhLwGe0P5Q1XYSwOPOchWQx0SgLng=="}],"memo":""},"blockNum":"168412"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7","package":{"Name":"Alva","Path":"gno.land/r/demo/Alva","Files":[{"Name":"GRC20.gno","Body":"package Alva\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tAlva  *grc20.AdminToken\r\n\tadmin std.Address = \"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7\"\r\n)\r\n\r\nfunc init() {\r\n\tAlva = grc20.NewAdminToken(\"AlvaToken\", \"Alva\", 6)\r\n\tAlva.Mint(admin, 1000000000) // @administrator\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn Alva.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := Alva.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := Alva.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tAlva.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tAlva.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tAlva.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tAlva.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tAlva.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn Alva.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := Alva.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MpKejDKETQ1jMyN1S7wqOpCMy5vFpG3uuGKMsL0jUU"},"signature":"F+MeVJDlV13Wezr2eVvwgmjYYxyq48rou3dBjzqCLpMHKxjA1Qu4RqMNW418vmuypzgZXYlQ6gM2jP1RbaI/HA=="}],"memo":""},"blockNum":"168418"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7","package":{"Name":"Alva","Path":"gno.land/r/demo/Alva","Files":[{"Name":"GRC20.gno","Body":"package Alva\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tAlva  *grc20.AdminToken\r\n\tadmin std.Address = \"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7\"\r\n)\r\n\r\nfunc init() {\r\n\tAlva = grc20.NewAdminToken(\"AlvaToken\", \"Alva\", 6)\r\n\tAlva.Mint(admin, 1000000000) // @administrator\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn Alva.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := Alva.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := Alva.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tAlva.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tAlva.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tAlva.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tAlva.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tAlva.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn Alva.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := Alva.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MpKejDKETQ1jMyN1S7wqOpCMy5vFpG3uuGKMsL0jUU"},"signature":"a+p8fkiiOBPrsf6WLQu7Vz4NQ/48cGU2NeJ3aWCp9jgp1fLK892rto4txumlJupUXkTHT2uK/1xN/YMxiPI/wg=="}],"memo":""},"blockNum":"168420"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7","package":{"Name":"Alva","Path":"gno.land/r/demo/Alva","Files":[{"Name":"GRC20.gno","Body":"package Alva\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tAlva  *grc20.AdminToken\r\n\tadmin std.Address = \"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7\"\r\n)\r\n\r\nfunc init() {\r\n\tAlva = grc20.NewAdminToken(\"AlvaToken\", \"Alva\", 6)\r\n\tAlva.Mint(admin, 1000000000) // @administrator\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn Alva.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := Alva.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := Alva.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tAlva.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tAlva.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tAlva.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tAlva.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tAlva.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn Alva.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := Alva.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MpKejDKETQ1jMyN1S7wqOpCMy5vFpG3uuGKMsL0jUU"},"signature":"DLUI7UNbQDYRyg9A6xITkoF4hIuC8i6s+fP1pC6clOIq+LnpdWfYfSBHknihd8n/aIpKABw6zlEjBjxuNnfT3w=="}],"memo":""},"blockNum":"168422"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7","package":{"Name":"alva","Path":"gno.land/p/demo/alva","Files":[{"Name":"GRC20.gno","Body":"package Alva\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tAlva  *grc20.AdminToken\r\n\tadmin std.Address = \"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7\"\r\n)\r\n\r\nfunc init() {\r\n\tAlva = grc20.NewAdminToken(\"AlvaToken\", \"Alva\", 6)\r\n\tAlva.Mint(admin, 1000000000) // @administrator\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn Alva.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := Alva.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := Alva.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tAlva.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tAlva.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tAlva.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tAlva.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tAlva.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn Alva.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := Alva.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MpKejDKETQ1jMyN1S7wqOpCMy5vFpG3uuGKMsL0jUU"},"signature":"ZLazhOf82vgM49787w5p2Uix6nNxTpTYv3BOmrVWaQlALC6KsT3hYCMRLaTQPCxOOuqm6UfbolmaDKx8r+pjHg=="}],"memo":""},"blockNum":"168424"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7","package":{"Name":"AlvaToken","Path":"gno.land/r/demo/AlvaToken","Files":[{"Name":"GRC20.gno","Body":"package Alva\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tAlva  *grc20.AdminToken\r\n\tadmin std.Address = \"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7\"\r\n)\r\n\r\nfunc init() {\r\n\tAlva = grc20.NewAdminToken(\"AlvaToken\", \"Alva\", 6)\r\n\tAlva.Mint(admin, 1000000000) // @administrator\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn Alva.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := Alva.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := Alva.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tAlva.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tAlva.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tAlva.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tAlva.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tAlva.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn Alva.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := Alva.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MpKejDKETQ1jMyN1S7wqOpCMy5vFpG3uuGKMsL0jUU"},"signature":"f86KCTou2UulR9o9iWEJE5QvtD2NGzG9FtCsO1Hmh+9wPBFZlgIxfB7sMDkVkIgOkJKdqcr4a7rMVH7w8CwyJA=="}],"memo":""},"blockNum":"168427"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7","package":{"Name":"alva","Path":"gno.land/r/demo/alva","Files":[{"Name":"GRC20.gno","Body":"package Alva\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tAlva  *grc20.AdminToken\r\n\tadmin std.Address = \"g1aau2yw2z7l5lxjsk4me8yzzp2wv0lrp04my7u7\"\r\n)\r\n\r\nfunc init() {\r\n\tAlva = grc20.NewAdminToken(\"AlvaToken\", \"Alva\", 6)\r\n\tAlva.Mint(admin, 1000000000) // @administrator\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn Alva.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := Alva.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := Alva.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tAlva.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tAlva.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tAlva.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tAlva.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tAlva.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn Alva.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := Alva.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5MpKejDKETQ1jMyN1S7wqOpCMy5vFpG3uuGKMsL0jUU"},"signature":"4/HHbgMkuk4cni2r9l5qzszI1EmOYF+Q9n0rMKU8iu4CM/Icnmt/RaqtLCEAvvLDnBcdoFkcEk9phUWQqRitmw=="}],"memo":""},"blockNum":"168430"}
