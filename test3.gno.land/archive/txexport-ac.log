{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ha0q9fhaklhjakfllrc2wl3jpzam9c687tjwpl","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"WyLMW2GBtSXvdQSW0RkpVe1po8S8ZTJWWK2KKpZi+2ocNPofnTI1RdRWUVAPOufF8OJ4BNIyttmpiyScVzERdw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18fplzf90mu0wrgaqknrv0m8kd4mlwj43566kdz","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"nzXudH3yVoWOddHrdhuprH1/wVw9jWW/0ttuV+kvtg9Wq1wLOL/ZKpw6D01orj24qcFZkgA0m22d5RWJs8Z/YA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1uj5munx9d5sa5e0dkt3k5479s3xwpznvhrw4jt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"3znmLQ/OZhNUNDLbM2RRtfLEK0UdS6tWSb6+/aYcefVi/Dsczwubg3IsWpCtdDuyCXObMZz6uSbb+M7JRruLnQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1de2f3rre0p93cyhruzkm6fray7lk3k933g8qad","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"BXCwmKRtQUi0KNN+FgZBTB+nD+lJ3GvnLNT5qZz+6GNxVm+5wrZPiPGDYJAmsRa0ai6/u/bq0heZvhz/uQScsg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1swwxjqvmphzza8q5eg3e782lr9sawxhls2k2d6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"cuFKJl+WzD1+DBOXDclLWcauuPADPQ0F4eY1xk2iLXoNsXOzl+WSskA/GsDg+ca1c9qXgtqJmISLUkk5Ziw+Bw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vevh7uy53ty4hd822s08cdhlnh87xwddfz6y45","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"1OuATHep/gUr71zfsxzi7chPMJgRqvQrhflXZLcMAO1EOo7vt+i0UNvvCK3JIeS7tWwiD9gZbOnBT39SoJBD8w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xnvsr20nr7c6r7ct54eadv27ngpmvz9qfzufg0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"PMOdWUXV5813YVDTJmM7weMCJ7C1QixtEoFwIpvYODUMnMptePhT5/yXb+KISE8zF4SVBrKLBanWcrg7WjyBaQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1tdhede63myq6mgr4p0ruxnn6dx3yf46dsgefj5","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"H2sndQgs0BPsCrCIIT6UJs9SHcYWOA+Nyiy9cSI38PlALtxJKYt8Rdus25I1dRPDBiCQF8G75A/v6Ec5ooWHxg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15p5u8ylelgjauql55zzjuhl4epu8c6tw3askz4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"UYjNf+kpTTJgoDFIS9J4G7bQV7S9b4l9oC7j0sJbxqwbZ/PZUfFrS1PeFWJvNDLdT7VAUNjPx0yvCQCHmRPx0w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1cu550wrcem8dtq5twusjgh49zke42w4fyn5zmf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"iPTJluTBqHfHkw98Rmc6HskQ2cDKXONp1NRHIZqQ5Kwy53R6iX5138JRjAmSov+4SSuE6Vk6FuIeeKJqra79qw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1cu550wrcem8dtq5twusjgh49zke42w4fyn5zmf","to_address":"g1azra3g249jcvw377myqydxqn462kjhee3parjd","amount":"309999999ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtyL5SERwApp52U46NEYERO6zKAizDg1QxHSguyAQrn9"},"signature":"ZXIsxSro9+PxmtlI2qi6ZhaOHtcDBJ1i9JKnvU2l0KV0XOwBYMtzYbIte1Z1qGysuAIYGBqNXxf1sajz0pj4fA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xucf4wgsjvvur6u3pdsnawn7q3trxfu06ywcjw","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","bmwmdrift",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyV/hJzp3piQPYvVyOWPFtJfPTNZQSpcndH4d8fFwilv"},"signature":"plUC3lR5302Ex1Jp9IobIxHxhjKVbu3N7AH233xiCyw1s6C8nJOg6B40EMPIbwAIi+x6jx1bYCAkgAWi2+4NPw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1k4mxea55x2u0lxundtscgplk5zr80a9l2azj5u","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ZwRwdRTY+qi/uIubz6omK6IeX7LKbn9etPECbTbMR0VAH/pWToZn/U+nKzvoegHRpKDlMFPlwkvTvpHxiyXOTg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k4mxea55x2u0lxundtscgplk5zr80a9l2azj5u","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","rezha777",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aumq8S8gp253c9UdscDDqBYIgUYwwjN8GloYTFNvrfVV"},"signature":"iD74T7eUmDFQ88qA7VWI7jYBhU8TzrO2VEJHoMfpu+wOsa8ZLba1PgIVI5XXPz8o4mJPJXHisUHeb6MIOEK6ww=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1870uchjredjjr8qj2nw5cuacgw0pxyr4jd2ntw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"IVnKSRnEsmARjyVbAF2+3SgPO5A7LSQdntSDCBIB5kIVAHgDEwBxjCX6FyjODZ8VSlUxcZeHyCZBih6cmtV+jw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vnqusra9fzldsefzhc8x6ezlfjch0ga2e3587t","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"C5/MfUJDdMKZ3xJ2Dq36Ulh3Q7rwWXVH88jq6R3usxcR9lizR6Dcu1l9pdbQ4gHu3qcfw/loHspssJK75dQpoA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1a5pehmk6ae9slr7wmmdrsharvrshxe3s9l9lkd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"zF75KosKcehJdAcXrFBECnWB1OuDNgIXRAepF8T5TGUOriJ6q15jXpwJgru+mSvKn1GO7er5mYs1e5JObJa/KA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1870uchjredjjr8qj2nw5cuacgw0pxyr4jd2ntw","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","xaxaxa777",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/a6wsn6nXLHCEoJC1xJdArobQN37sesZTUfUyhm/qyx"},"signature":"xwc1Q90Qqm1bEGuKQdAWGByIqQERUAAGR1WMkj+J2NVmAOSyzavO3B/urDX9T3gOEuyC/2sMmrjpC4ZtjtrhxA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vnqusra9fzldsefzhc8x6ezlfjch0ga2e3587t","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","rez",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtYteRkJAAsEbtzr3UcdOqytxKBfwyBb7I3GU3uEn9R9"},"signature":"MtSh8EQt9xYAsxIun9YRPQ7V7zMu8CZlqORD+hDid5dazfaPBvtUzitfOUrOrAPh+oIPSD9Jv2aSKN82fx3Ppg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vnqusra9fzldsefzhc8x6ezlfjch0ga2e3587t","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","rez777",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtYteRkJAAsEbtzr3UcdOqytxKBfwyBb7I3GU3uEn9R9"},"signature":"6Vb9xUjf4kXUlhiqKGKxfPN2u4bKwwfvfKi/Uv+h0RMbUNgt80OL51Yv51HcOPPHuKXlAGFs5vKugGONSzlP8g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a5pehmk6ae9slr7wmmdrsharvrshxe3s9l9lkd","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","maliy222",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9xhyGfNM5IFLeRZ3E/lboEl1GjSWHLBJqjncTvNLazL"},"signature":"2Nt6q7zHrBtWLScMxZOrl3dEVFqV7tJtbmKMa2XRV400f9my6RW5mG4PS47TMutUaydR8DZk4fNZAegenk94zQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1cu550wrcem8dtq5twusjgh49zke42w4fyn5zmf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"LitkIsFiLdISKdtHuh7JV6o42ganuSZME/g2C91yTIAyU0sKMYA3ajGaXQrfkDQy36lXIwa5m6gxEVAOCnB08g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1h2afhzwtp9jff09sxp7gzc4pm99pdm0r3nm0a2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"YybQVWlovP1dFtyiDDW2ry7n8WcQk5kk/RpRYjLM8PFpZ2nXf4SPfFqaoZ/ey3u0t/0kY1NxZCtYhLyaiyZeKA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1h2afhzwtp9jff09sxp7gzc4pm99pdm0r3nm0a2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","verdigo93",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoyUeQ03CzskX1bDV8A5454q3yHTQvTBZnW0I28X1qp2"},"signature":"jJLM+zdYuyQV3IkOv4hHdbIz476ANF4C6GvXsOHT1lIj1zZCnjllx1E2Ln2NESlmzqPkw+AKt4dQJcxlK+MKJA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1u2hjgqu8t9tmq9ahrn33tct5sk9a2wp7rl8dzu","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"wCJX/+B95IKniK2S+VlnoXaC/HfaIiHOQUuAdMga+0ZkghaGt+o3FIQCmiFOBG11FTK10EM9u5AopxqcQKoIew=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u2hjgqu8t9tmq9ahrn33tct5sk9a2wp7rl8dzu","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","UncleIgor",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhDDdHcH1/Em2pPgqwOE8xLEZXX80nGTggwzq9JMMU30"},"signature":"OgBvNos/LbO447J4p9OBSbrTYu/4PzjfHddSlxDBFllfcqY/oAUg5Uj+TDDbv6RuqqWNc9g8zmW5PrLLK2vPYg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u2hjgqu8t9tmq9ahrn33tct5sk9a2wp7rl8dzu","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","UncleIgor",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhDDdHcH1/Em2pPgqwOE8xLEZXX80nGTggwzq9JMMU30"},"signature":"5w2v5F5qsLPFHSL/1C41eOEO5Qqd5o/Pxm6Fbe/+3PhtGwhfyKKbiRPUtGGJf63O44DTJsltbtyfIV0Np/vExw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u2hjgqu8t9tmq9ahrn33tct5sk9a2wp7rl8dzu","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","UncleIgor",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhDDdHcH1/Em2pPgqwOE8xLEZXX80nGTggwzq9JMMU30"},"signature":"5qgtshF3LMWkuFYKUygW1cF7ohwJXyF8zFTq49A9OJFbd6gNwLOttH8wB2fGk+3bwyFyahhKinQTi0DVsLIdgQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lsmjc5xvhqz4u9mn48tfxjvwv7tq6zdccq6ekg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"HJsHTU4H2cFQcwAAz2Efi75jeFIDVe+mWFXwAH52eEVVOUup1k6JQI/D79nxr85TwUkhOqtiF5k5pitQfRtJIw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lsmjc5xvhqz4u9mn48tfxjvwv7tq6zdccq6ekg","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","Dikci",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0A88yqbE1Gd3XO/BCi11rS1CnxRfnL1dj7z5pdd/02d"},"signature":"jSDvoRXSY5+nfiC9q6cQ5e2wec62LjscF6mZTOPP8ytqzjC672Sj+kPC27JlTce/qnXVNqyAIJU2nkbvTGudIg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lsmjc5xvhqz4u9mn48tfxjvwv7tq6zdccq6ekg","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","Dikci",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0A88yqbE1Gd3XO/BCi11rS1CnxRfnL1dj7z5pdd/02d"},"signature":"66c1UW43zG/9a+qyF0ZszMOpBF/kJqNlmN/y8olUz1tvocfR0Re9Vel//9jE+hRMtWOwGHrNj/22g12vbKlu0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lsmjc5xvhqz4u9mn48tfxjvwv7tq6zdccq6ekg","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","dikci",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0A88yqbE1Gd3XO/BCi11rS1CnxRfnL1dj7z5pdd/02d"},"signature":"fscwZYa29lFbnrA4CUPwGj+QVZHnRqqi7Z6N9KZAEooUdb2KWfb0DXlejRmXDMa8BBX8kKKCIIoO3iJ6v7uqWQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lsmjc5xvhqz4u9mn48tfxjvwv7tq6zdccq6ekg","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","dikcii",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0A88yqbE1Gd3XO/BCi11rS1CnxRfnL1dj7z5pdd/02d"},"signature":"N22IwDD5E+SxS82/DXrxhV8gdD193Vk4eGoW9lU1lzRjzyk0psBGxtH0O/lndPXJsCnmjurPUpTCo4rcWg2dnA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1m5a4ytvc7ks5etpwx66a67u5sjfae79f9hdawn","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"lmYE4xSEYWwuMfPJBQbuuZ5ao/7+mtXmj873wviI2lUezyDfUchnX/taXRFwFPP0VUZMCGdP8iyyZ6B8l9+mkA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1uf8fs0dslz0k3ckyllje2kd450f4p4hlk6dgx2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"q41wvZr5CJxlLNsKnJFDQOMlSgzDo+sD5PwUiVX9ASYtvguFw35g0ZgmDGs9IvhtJ8dksE1m9L2J3bDwwIdb0w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uf8fs0dslz0k3ckyllje2kd450f4p4hlk6dgx2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","130994",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5rmOmKr/gXCQw1Twx9wgvEAJKU4bAzDvfL3sxlAGtwP"},"signature":"OHj4snjXnHgcvezjeqwSPtRz+RpQgKrccFoCdUGVskMW2fYTujlJDWtRX5q1nBpFzn4TfTsNOsDzyMlzPhg2fw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ctxwhnxzge94xadpstaw2s9ja95h7alezx5w9n","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"6fkz+FWHX+ptqoJlcCroUYxf4wlNVsM1ECukYaG7qZNtblUtQGkUVh+q24guQgDGseAxjes09+r2nYPwl8oh5A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ctxwhnxzge94xadpstaw2s9ja95h7alezx5w9n","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","Vadim1309",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AirVZFlpLIP9TDE/Wy+4j0QoXei2JDzikvwBxXvRNEpo"},"signature":"c1D76H+a/0XVGYioZ0fkB8MKy/e3fDBQI/Ztku+A9fdkpoCqNNVCp0s4lm9Nj66tJarpKS8+76bA8fxFll2xmA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18v47m3h68er3uefynlx5kc36d067ndlqxdcaen","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"oJ3NKHVdxzoGrNv5Sat+FUr1brGMDJu5xWiOy7FA930qaW8I0A2aGvvOUuDX4xoELQ4STfuE8ev2HwbUzyuitA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18v47m3h68er3uefynlx5kc36d067ndlqxdcaen","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","Relaxaa120964",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkUFLGw9qZpyJmvyp9MOpfKT2gSBoeEv6IsXSVMOqJWQ"},"signature":"DAIy6b/bDfTmfiYxfcpitudoIHDBAW3qCRNWM5ivZ35nPzwqSC20XwGhZ7ALRgmboDQmz+r2bJVjy7Rd3wLnJg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18v47m3h68er3uefynlx5kc36d067ndlqxdcaen","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","Relaxaa120964",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkUFLGw9qZpyJmvyp9MOpfKT2gSBoeEv6IsXSVMOqJWQ"},"signature":"+yv2V1UqB6eeFR75xrDTTxroQuJb99ksI3yTZ5ySQU1OHTf/QxU2bPx+/ZCeJRAap78syo3MQYGQ7koDrA7aUw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xscjn5yn4wz2azsgt5k7tv86nyqrq2uulxnyev","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Vwl/kdXWsh5KkIKUUv93yi4A8rM5UAREdozWCKaF8r9XxQ4DRNsq4Oeg2ZKWCZ+HWiJV/YuWziv2E2v4Lf8Jew=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xscjn5yn4wz2azsgt5k7tv86nyqrq2uulxnyev","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","Relaxa_Relax_Easy",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxW8QRtj70FQ3SD35yVWR3VCB2AWU93xm3OeaX3MX5pW"},"signature":"49SFPhk/MTUjxe4bxD7jx18QDcc0IHy2Kta/iiPG1nI9+vjHJB5lSjBbltVBy4VXhOVVgYXtFIbm4BaRCB2FEw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1zg7uzwrgxarjslr98c0d729cwxeds0ssewtyr3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"hQ9bvcJeNF19HLytcnRxmw0G5/K+nsVrlDBaA9BkDzA1de8QIczWSKiCAsUMamHdk2V2CYkn7sgXsTE/uZhgzA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zg7uzwrgxarjslr98c0d729cwxeds0ssewtyr3","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mazdacronos13",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9tHUFXatzSklr+H8Ml0FvGAu5IqLowJgCEBJPL3ztN3"},"signature":"38bnWNlqJm2RvAJNmQLVNpObi2kllJVZNk7KnOUOrqcWmS9Nf7yDxMZPLNpInGtfRupG9s3BBdb8rHc0TTOfJA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g1q3j7d85k8x4hxw8f0w7z66hnkh4em6l6c03t5r","amount":"10000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"KSTG91SgZ4db1v91jWV5XgxkaUnSoLjgaVXGizBSCJx6JVGPfmnNiYYzai0H4lBe+JHIbPzG9LvAjg1aik4HNw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g1q3j7d85k8x4hxw8f0w7z66hnkh4em6l6c03t5r","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"03+y5BaB2GmZ5GrumqnQqRdmaAlPzat9FImqOrWaXJwm+cwKtOP/n7K0tPR5EktQHMk8nHdFjI7otoKhKKCZjQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g1q3j7d85k8x4hxw8f0w7z66hnkh4em6l6c03t5r","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"neduZV+cBoTIinu0L4sd/6QEl2DQafPRhewt6H2n46U/lsvs06FYeIbVYUxaMh0ttYfBY0sIan/kJb+nr77Ybg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g1q3j7d85k8x4hxw8f0w7z66hnkh4em6l6c03t5r","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"mm8MUtofLZnLYDxb+Szi3f2Ga/8KNIaSoN3IH7Ab/6BWIim3RVzGlyVBu5+nfQsTn24qoA4PMoTrmp4GeicG0w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g1q3j7d85k8x4hxw8f0w7z66hnkh4em6l6c03t5r","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"93WCKGaDj5JiPVelT2UYqNAiMWgcgLWroNUSWIqC1wwygLocjZfrhIbWmT2Yyqq3czIjritDUquJ/bWH27jE8g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g1q3j7d85k8x4hxw8f0w7z66hnkh4em6l6c03t5r","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"+yyjAGf6ip5EztFra+xT6jMAXYPF3KltHFqdnW3cmsx2j3N8svXgsO0s3OYp1VbtxkpMeCzw+Xc4brizEFpgng=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1r839vzmmap5w36ftlwtjav6580v45kpv3uxswf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"h6g0zl7RxGfUX3RCn2z0ZnW9ilWcWihery3c7judkDZq60TnhPmnksGAUgbtyqwRRr2gyOsqSwHb/xNrdkh7GA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1quzwfj29nez5sx72wtkukdfn48rmpjlh0neems","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"HWyhn02XQR0v92DRoLBjUnb/PZEQEr/zXoNDkoEysiw+oZ9mAQBnu5ot7tDMVqg3zMv0gDJ35fKvOgGclXYRYQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1q928r848snhavjtqz3srzj064057zk4hqrj2rt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"mH1jEOSsejlgA+HM0e9tLwCEn25dX/CVAGkHPzOXkkt2/yLPnqMZxZq8zzqJo2QkW9hxW7r5LRPLieX2a8cMmw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17f4x2l9wjqaeu237lmuzcvlydaugap7e508r00","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"fFoS+Z0KHPeGDkgqyypynpejSzPGzFRhPeRrZt2JZEIajACnhg4deWg1VTX+bDnciYB5Yic60rVIw5h1R35vog=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19sfxrshz59e0eknj7tecnl2whjzrf05e48t5tc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"rXeYJmybPs0tuQYwiBPSlimjP5Yu+9B260anzi0h/Z9gRksH+GyiXQj3cQCItoRJWcwSyxdeYIhhe+80rdrd/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gpvjlmxrws3vx5lv7hjrrf9764ya3fsry54zp6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"KLXp6i2HTk+AKioJEKP0yWlv/n9Dt0xOicMsywSpAu8zjxWn9hfy25Y1a8hX2o7NOtGz9PwEsP5SCPxpUuC3Tw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gcxsr2gxynqvuhqrd03zs559zvzu6pp0dyxhqv","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"4/RzexpylL8wny02sy0TXs2s9qzoM8MzKRg/rveAYlhh7HGERUB0Mg03zvtQ2B82skH1Yec1lrn+vcoDvMsF/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12h4265zwv6tujt6uwxy2hq354xlvshlle2pamy","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"piQZeawtYXuYPrZsneZ5Be9Jy6OutNUK33Iw/rJsrZtjzC9lu2MI0FtLsZf4shA1yULQ/P6IUx6Y6hwADMvRzQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1qcg2tvu8x49j3r4gych9ykdrfh0r49z9fyv82e","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Yye3wCyzIv+y/OZXCYxOSFs4MZliy1AELn5BWuHsqV1H+ZVEggxlwJZlbFohAGCtbQNgqTjdwh2oblyfZfKp4g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1v8we4ac2wqpq8mzjdmlwp7cyahx89u2c3gfxxs","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"HpxwWp36Seqo1o3mPzJ201PuiTsfRKTAYU93h1IyuG9x5lBJ9E94vITxrjjo5x/fuZBtkLoJ0Z0sEIEESppM4Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12mssh674pcy9n240yzs2uacvt6vlj9c5az5kgd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"TGqw99lDsBdBIIKfrlQSZmnpndsUyiwogtUKmh0FZu0kLp5K7AqVVJ4k9l0fWYLUdMu1w/quNiD+55Yisqq9ig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g13zxlnxe8y6jv2nlqhafa7njfx62j9m84fn687n","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"8TF0gUTXez+VnRIyhrS+i8nqohGTQnSuKaRO33FZDrtt6JsTLPAfvwwJh4rh/Tey4gcREFXanye9xxxAAURERQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vz3f6vdg9rumju3qerp8zurtak3janx75sanea","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"hEuQKQ3WTD5JGfl38QxcggzR63jRKbDJ4+KvfFAEKeVZrhK7IG102gTdSEwgwaLxI2GjxuNaN2nDiJoblUkNWg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1wf9y38y0np59sv9rxrzy3udgf57mwdyw24xama","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Lc3d3gPsgpjq1dXlOjwZgLrHYrDwPaEsmc9UUhbmQAZ43jQAoEEia2a3yFDqJcyTf4drb0Tkkl+M0pVpuKVs6Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16ryjrvzat4qegtnv0h44p0jtq9n0unsm3wrxrf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Mq84OMqKNHve7ArWIHzvxqhV/de6wswbkEUuwtYZ5kReB0L6+GGCQ4HpQMLxM/HrfMh3pl1734mhaKORs/fk2A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xrk9fdf9ahl7fgfsvd24kuualfhzynp3scf52x","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"lhYTL/B5G667X6sSlpst5yhrIaIrZ/zvvcSp+lvOzF8NSexQJE2zrKLktLmi1HeqXfRLagXHA3TIonRf1Egnyw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xxvhftw53nerm307xxk364p69ege3kv2clr8x4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"88MW7Wr1CLDK11mibIjadTIZF1tL+NCQY+oX3s3VXyJj+Dz4Hz+BgNU3FjtrAknQn1EEweeSHZfxNPDd0OIxAg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1mh8uez0zdvc6s50r4uvqn6qdmp4zg5qse63hye","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"HD5k/ZEKmLJ/q9PHoK2l/cyFj9X7wxAxFI8yH69i+0pBXBkDj1deApW+K3Ji2Q6LFXnf3KNcork7Ue82gAze3w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lkrsuv6mvfsufydxpvhw33geu4acherkymg57c","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"+YETvavkXGizf9uwGB2sqMgovhhHRUinBUWgTmAaJDcpv1w+sMt2XEAyTFlvkmccFh2+VQ0TM/FE4kvRz57Ktg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jl59klhhnryzjm4zygguf2ct398l85vu30zehu","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"uQN8tYoaPTXEQZYQIVSpDooyKEVcoY437bL/cTgYFJs2CbkLlhNRHHlAxbsOCA7azwRJ0LtIv6USFLqzYxYNTw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g137hfeacg6fz3su67txrs5g9u4dy7hgukpe5zf4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"aB6QVKCHqdXDAmTyypsoUYo4ZMyzCTauXo93DvrpKhlN9KOFaxRsM5YiYQh3pVaStLlVshsAaebjdrgGBz9jyQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1y5nwn9njmf80q6hstm2q4vkk6v5jfs8494g5jy","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"apWk/DLwI0yUBvExZ35QiBg4ynNHZzRCvGtJUhTEzrUGrcUyAOQzAP0kyH8Rgjr9fKColdXFa869Idv4nbUO2Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1n0083kvgc7g7qxp9th3q5dlcj03daxcfv8w9nd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"QlMlwAX3GlV3VQrocMSibrAtS8NZm/dtbjcaH1ezKoZf+5yszP6PmPhB0G8KpwyfzS2Pd9m5jyahkOyhUcWreg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1cva4ypthmxtjyfz0dqchh6v6metgeywm4p47eh","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"B3QUYY0j2YpXbUCo1pJP6CHzA8OzUYek3RNrM91KAtErYllPBBIZONClpew2JjzSOGLBvJT1r0UBkj0WZGnmrw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1mt0qmlqpyr84t88yhptqjyn0g3ep7x9wvpkdfe","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"TatIOHkRzjJSgW8jYv79e2U/F8XM8QiUkDZZTbA/ascc92J1Ln2cyX2zilqDO6PnKy8t4/Ot82h7aWgXpoZ0mg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15gqhtaz9fxzn5hea27kg6pv6mpl295rt7nl55k","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"EA2Ed3SxDM53Z9ZfYY5DoRFWyc6AVkG+5jjcc3BKvlQUlWsun6E+ZeuJVLWmurPO0L3akVh9gAPTWlv1jihq1w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1qrdr0q6et223zgf450h259t3c4fem0mzse6ghl","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"77Q/T2wbp8AgDCrxv7ltQe8jB8uestunFiFIl5iEOY8NmMYnDCgRSuNcZYloHaSAs0j2Fq/gVCvBpHH43d4aOQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1e0ca8cgraz98fktj9cvdlpv49c3zx9yn4hvr4a","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"yTSPq0Tlic5hes0fCqsH9gKzKDqasOxKLWM0rwB4JxtcUgqffFGlQeyz9gLERFAVN9useaHKEbL/SXX2tlfT2g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1l4ys077jul566lfervj4jm7k6zzz7usscx5y8m","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Pc5wLj2k90a5Q4xn7p8JpSgMtVHGoljCfps6e+12Qj4e4STrf8M02bGbSqQoidusUCDNynBVO1+q6dgNSkLiEw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15n2pn9k7ahak9a43nzwz8dm9awrvz9sr0wa8cs","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"4nUeyhgeMDTmYD3smzalHs9M/MqOPZgONujxkE7YzK8KS34PbYyqwNMWbzA8ZIVem3yCwDM+RtUvi4/v7S95ig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1geer2zq8yxw0k9vczze4eqnldwplagxty9tehu","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"TdlOkwsHn7viQpQNh9cboFR6AMGFrCmCbVDpeAOLHRAv2RinpNwtgq/YFSOqM5txwm+DZs5SnQFAJD4hngFt9A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xngld38hfjdesmcdvrh2ggznkt4cf700f6x7se","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"cZdeO7hhermRmI2an1RC9Ec9Cxf3nydMdOr+AZb/EGV9bBIWSZJc0TCNZ7A6aY8VhUtYedc5KYwzBJuLFWwfOA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14wax8845eg7p300ze53ad39yau59wmwa9z7fs3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"uG0yyMkBbnnfB5ItvXKcyehdVyuvWjZ3mp+Aug8nqCt5CRVe+BrtEw8GsBmafnfL73haKeGUXh8r+RWSt6Yn7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lkyeuzst9ssvqjm305xnzq34adgyynx6v3d6jc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"jvVPakKquQrikeEJS31i2sfekt+9iUuYDFuHyrN0gY9ZdjfliYF56bSYXwquLZV+B3lr5ARXbX+zOfizITZ7ug=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vf49ddmmdg2nfllhy50jzwk5tw53fzdkydqnyn","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"DQ+3L314LtvafhD12qFXiDXAUXwVFtzpH0oaMOAfkGwHbmnYVIYbHck30xZAnUbDUdACyhPZ2Z0jLjwePbTMdw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16zrqxrv2c9yxrul2ar434mz3np26pgfxlqq5h9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"eo7Rs7wKTp1xGEjwMsG9bWxOfpL7ikCwHLY5hZ9WnLVivFtPUd15pGxwdf3PLl/YmWuy+K28KQoCq8SO3Kjf2A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gwzv0yxwzycstll5vw43nuerrw82cla0s29ty8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"r7UHSLIFP/kBeYka92ar1bdXKRy6Ufqo2G67K5D0Qqgm2+rpk6JiltL1Pm9t7D7Wk7SERhWmkHOK+bk7PPYaGQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1z0m4a9c3x5gush4a2hwvmecjsfl3ew6g2u6wlp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"TX6MZQcB2lXFVH96UKmjJe1ott/AimbXaJzLgqJoP14d96uvcCIHXYqoRA5JZsWJ3oYVMEUNcmwUn0t0Kt5ipQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1mnwy7vpg3kupq74cvmyykgyk22am6qva3aekg6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"jsC+50QwOTjk8KAwkK9xNbe2fhZn/AfVyABLR6dSFllT9tvykcXsNp+i8IFV2n012xpvv9OUH7rc3eNjVWoPjQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ukyx639dxztjujaevyqs559mt3udcthmhgs9r9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"m+o5LEPBhRvc2QCB/yIpbO2khFSEUJ63nuGjXzU4Hp8XOyVV27d3XrM9Ldbfa1XKGVWC83LMcAthxy/2r/sEVQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g180sgtm8vwpjmn6mkwmslswxhmjtnk9mnrlkqzn","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"PxEVPCyAzusTsZ7TI72dATXi7ro5Lgrxge+GukdQblsxws7rfLixcsXcOe1EUQ6KrOwwpmvN0u9WyMo8ksZeWQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vue0yhxpl47rqeg3cuz7rjryqu8punf5d5ntca","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"N+A1xem9UKWhJCNh/ivLC3TxHjOD3woMXxF/hdSM1vNw+jSrizU2Dcu0E/31i5ocpZDAVPkHpHmUXTTxqP9Zqw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1x4lmk89spmkgrm6rt5yecuc9ch4dqwsdr9cwcz","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"dmW7G/WMOe9daj9ylB7gEhl+4GKgFbhUnRQ4NsJZxG8S6N9XUH7v4QND7eo+gpVUFeUWRFrBYm2AVHCf4d5G5A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g10t450r6u8l6qp2q0gg33vxy8v8zuc3qmht63y7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"uDMqLs7NeGwHRT1bV95W6TTVROvEWSpcn1E0NalNySACzzUcueZy/n5Nm+Imf/aIS7ScxRp95j6f9kuHzfU64g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1078hz2qazw0sd85ft49wwq65fv8cven5d4ghvy","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"PQ4y6OcpLltyYwHd9J8+EjW1wdNyf+F5u9OjdXs9uYVkdIXjK0Z6RC2e8PGbUjc5DLPPNN9SC+H1iAfG6dziqg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1e3pwn5gfc6e5kwsgtmcjxtq3c85tsdwn522wqk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"NZAoLcq8GSmTBjgGrhyNJmYlV1Kg3IqMmT2kvOGCo/Y1DlNG18vBxc2ArpVh1yw7791hYz6VUy79dryYdtN2HQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1uc53nntyk4u6gl388uzgadrg2q8xlqhl0ftg7n","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"dIc4Wi5FK+K9OB+XcpYpwF3mVZaeCrV4qirC64YAo/dMXP2PNlgDH3z0HnhMkHPL6qgmd8xN5obSQbgqfhASZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g165vk33zlhf8xlzy6m2d44lwl6zd8dfk4shv0qx","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"+djfrQqi4gXmfsA+wVcuzSwKc5UeJ5qT/+BhaGUcHpQzrz5fPcfpCV9OxvaJ8/DWBdN11aMx55gMXpVwoRj5gA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1w2ltgsw6dhyamy33w26jdx5qjgpemu25kwa02h","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"F2lJD93zdeQzkY0ENSZaj/g79KDZ9J9mVCb7hN9VwtQLoECc5DuJWQTLMSPcLUnq0/o4WH8Cg3drlH8/8A968g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1483lv7q3twylgnpcfzp7fqtwmqq8gasfyws4v9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"mzJue75Ul1eGRkSoC1EcTccqG3i8dpIqSuVJsS3UxzZnkAjp2+SDFxxZzcpAmxuVfxvYS73Urdg8yZaTCBcu3w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1mknzkpr43l2mcn7v7j3eeyj0lp7k56mrcvv2xm","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"OQfu7OsJxrnNA/eR30ivZDsAz9yXSVYRSusV7k4ELAd0CDkXGH12eTjaipf+zEj3ibY0qiUQ86IlvVehvw+pEw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gh3hm5y5t8avt0n7f5ghs070j7q98pnq2thw0y","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kaCwrpctjp8UsR+heIkaIfB/jJgtJso77OrGNHdAx3xmHdmAiz2/rmAz9C+aX7jRBDGM/Wp1cb+9EOD2u1U9gA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ynyujaqsce8fza0ehnhn6hsj2hrp0fmk8etj8w","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"RocSOfgYCvJZO4Yzs0LAijrbsBA3wXEobviDftxntsFvQKICTZT/Tz4YvSJ6zg+oB7vBkt1LU/ST3LqeCnYCYw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12encjufkpeeseqkzva49dsujwzf6sdrr27gq5h","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"pkVM9S7PbcGB+VRX6pVih17MkecoHcxRxkX0iKhV4F1U0N4TxdmwZ+lIgzRmiqSIQQY+noR6l7VJizgYDTHRYw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g148d7uze958jrq8ewe6y7gx9gm0n3c7vekphp7s","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"wTFhMvF/QNpzIn1kXlfqLQTwxtFuSNhsuipLTESExqkeNNNshIJPAaqX54lWgolIpohOtvupnqx2PihrWMUX7w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17see93tatf3pw82xwgn3z3a7fkwftpd5lh8tfj","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"IXsoc2JFaAvFHPz/k/0YJbc0HsCKDVD7kibFsejMdtZcLga91cHUQIexIAztM1TvH/q9KldFp4lbMqqAVW+8bg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hxf2wlwhf374sw05cv2vya8alr7cad9qprn7hk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"TBFcPslP+okcumZ3rGY3jHozmrwOulQbLVn4f5Fh7IQyRd0pXFnexM/P/WWlXmPh6Inab41w3fa1+4YCXojTtg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1dl58mahfsaq8yurs9hg32s4gpcz7qxhvvlkqac","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"6L2hJbdlatunP2o4YWLmKzG1lshn5jxFnmHHn6THDLxy1pI5huTRR4l/7g+WDVvIxPvZukl63t7J9nyI9zIfPg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xmddemvv4s9mv2wjtwal2s8gn0y52ragg8hv6g","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"rAdpfF7xK69tFS0a9DocTQ8x4ptO3qL7g817iW1X8bodSkB1sw/SNm/HKgUb/wVLdiNyj1fC3WHJp/kRQAYePw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12lyvuu3audzvfsft9j77q4dtrvfdefmtpjljhp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"vHARJW+Os2C5siLBCKBHCb+rwBEPbaJumi3YkdSd98EiJPz8oOWHXFYw6We4udFmLUKVNM/nZxhNOtiaEtwJnQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vah2m2t7ham4kqs6kph96ctg4qv6lq5galqyea","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"iZXL4i1OF7RJYdjYjVD9XNhlcaBBlHFnOQwJiczpMwg6Oo77vmcy4utE7rkgT/W4dPfQ/+Xw3GdacjIryqNLfg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fvgwp7kx0z85jt4yecumetzanvdt3r0cshxpxk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"G0scjIeTOQcM9eGDANKFjD+zzmFXISWNfglUcVT46idW1W3SIbuzemEGJoU07pUKt8Aq7jD69xUXmU2HyKnmzA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ljwurf75qv404qjudnd4pva3qhqxguwx0wxj7l","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"hN3G72b5VjbeUfRNMs4YlPoGLSmzh2QgI8mUYaI78VULUFM4HA65amoyZ3TOSJpwUoTbG1Flu8Um5qVanAsdmA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g182pqkx3sgnz9mxt9yl9wgrz32as6wcftf2f025","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"qE19tbJudGRYqjyeLFMsl5Rl9XCqtH3GKlPFi2cE9T5MRfHCS2i3doIku7UjnS+Coq95OPB9y4krdrPVAmZ+wA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1avg73sae9wfgkc6t6ddqnl8edpa5g3lqd7az0d","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"bAKXRaaUuH6W8HMNo/n2l5DGu7HHNx/8oynhM1gFcQAIQp3rnF/3PEKmkiwbFMNuEaIzqn7qzJQhL23nUqIzgQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ndslz75pa0946u2utx9lkjmquxcsmwhc4mq60r","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"bv4tWD0qf7eG9nXJHn5CuRNTmbQrtlk6gUwIgkeXd6oAzvQHgO+7AKeS8aN/SCh2m1yai7LjLtN5sRr+1D5AKg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1stdjm7wq3ayqypp06l2q9v2dgapcr8xvrtnmxs","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"hVOnNb56PngFYOcaaQdZCpmTooQ4W8YkIfJbEwQtlj5XvpxYf8V86PUwr6obn0xVUVXDaA1X+SUsfmYSuQJi0Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1wc2gkr8c4y89e66sqqz8uhm4uwxmzadffz4h9v","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"5XPoSrnkTIk1pW7Tcp11Yg6D5/K+MIFB03ppV2xrr6JlCm07Lu21QNoSmKHuvmHSO2MtcFoWBtR8tbpU0lnFmA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1aj5fx58lnz6tk3kdehhzk4ujl3703n9mgcc2fm","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"wzYHMV+Es2Z7qGP2vtC7CFzBT8/LXHZJy4Mijdvm/CN3Z64bAvgwfKJukC9mLYKZer+3aoOy0JAI/lb3jFPExQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1nlc9kncy5yjslfmzayqc4smm2r9kacgcxw0jda","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"0bV4ajLODzfLBto89vGoDWkgiqUNXtJ01HqIVKqkC+kem/UocZB+2d5jGipyx6EgGMrOxEn/K6+bAY81jbiiXQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1unyep9wetm4saq0es0fllcvk4nj3mjjnn7984l","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"T7m06SxX6HAwHiyRz3jk8dU9gUrFUkGlFonnrMsSRakFDX/dlPUF86A3W4oA/KnxRvc6loicgp9T0UPcSx/lRw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17xk6hcpgzs2vqtepgfe2thwtfw52mq2txpq25d","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"9C8nwi+4AkO48+ijv+oNw1Wjq9sj5aUf0FUw6o1qgeN+l0Ur/nJRtkS1T0CpBbFMrHMYbuuzBQXw9gnywWzbqg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1zyf9u2xwtvxash9kpxmechfdx727d6kcdhfy39","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"wB8bpKqaiLJmLwMEVhTzpbzPRT/LJgRry9k9n4NJXzsqLBXkkEdnuwxsBh8FKw5rEPdYhMYpfHP9fXmwhHn3Lw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1m9ff0f9nn76mnp0yclcw7n0pkn48x5svv4tscg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"/EBXcJuystjjIkkle68kL/gMtt7nm5VLvz+LKlDNWFAY5MFTfquxJVKGdCKGFzt/ALk6QmVL+CiDr/VFGXciug=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1c2x9th8w435dfh22kh95srlkmc4qu5ys8y5f4z","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"odz8V0fqo+3norZqMKlK8KQB+VEG8DXcNHAIvA671J9bO90WgpD2TZ/yRgNlYxtdi28q4fDtAu4/ZVmd/YZ5Hg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1038k3u76m62eu87z68y2sr2gzaucj3j4tky4h0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Tp4pfnPtpI4v0vlTnvf9KREk7HEI7Yx/iuTt0FxGhMkR+WUGVD5JUP4fjEPxqt9IBqIlgoKsa3DU9KbupZsOXA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1pwrjgpzmejf5cqpc3hgy2n5r63gt6a9l4lw4wh","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"OoeX+Xq2whNwFoUexmnjJC0RX9l+humS3Q8LfVkUEZEygzHEJlyvSGYr+xs340IGdRmk8RIeEbdSrjTcXm5Rdg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12lgj23rk0lyy60ekrsaaclxt9kc4nxasuz6vgy","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"iazWWqG0SvnvrHg4nMSGiZHxDx1sOxVabelU2sdj5sg6TaPBLVq6NcsdmDrAY54uBRA7qBMi5fT2v3wMLmwoww=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"666000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"ILqsgexhSAqSqlX6NL5qc+JckcMne7tTIeFieg8m/YUivgkzqNm+e7dJsb+DAOQa0KIGV8v9vInBgN0whfapPw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vc4vqum2nwu2mr3dmqfs3459sjvp92qjf90j0n","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"20iRKi+unzCIIDY7J1M/aPWAu22FQaq627dMQP9RnWRqF/iQsofTXWbfHIia0/GVo9GvaycJg8G76IkOiFN+dQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g1q3j7d85k8x4hxw8f0w7z66hnkh4em6l6c03t5r","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"/9TIVRA1mMLRPRbg6Edj9hJYp283C5qmnQ1gEjgUHd8f0Fk6iWLdzVamfk8mmcDxMqxgoLl7CBkRj6ZOkdwcTA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g1q3j7d85k8x4hxw8f0w7z66hnkh4em6l6c03t5r","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"MuurpVcs8C8OXAzQa95yPtuxfbgzDQhsk2BHjJSfC0gcZ6Udi8C18SZP9HgLvbtklBNifskfEBnffx+GCp8Siw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g1ks4ev53j4al8uqhhlahvrfadmz3tlqdguqhxy3","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"jZ35V/C7Dmkb+rJpl9CKK6zhzQ1wzeA9AvCYXxoy2es8cbVwn1Z39fa4axdzMrXcRo+oVjwpnHsrcQLtbnNCzQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1y43x5w0gwur3xad2nktm9jj69vlqdx0md89djh","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"J0hV7nmdMs+TCBy+6pyTzBsZBvEl3hFoNy+zkDnTwKFjOqI0KQp1IuJvO7VMXxmRbUOOirQKB4xjHA4it4XGMw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g1ckddn039khwxzu4v5mc8n34vd9ksaks2l6c3kg","amount":"11000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"oh/4CSCrRGHIrmhj/TTaGia6cd4AFGO4REpl5KX06eBjtBulTHodJTDULHUbMRLlCDmH1kPNmbblEj6jcl7XoQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g1drg7fj2jmp6jtqhrvrcwy7ch23upn52y0q8ch6","amount":"10000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"hGDP4m4uVF71yOiH9Nyo6VctLkPQ2dxD6P1EwMVKxMwnL7U9xj5ZB8dJ/JDheUlKIGGQWG9hbhtoMLHOdc6WiQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fnakf9vrd6uqn8qdmp88yam4p0ngy572answ9f","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fnakf9vrd6uqn8qdmp88yam4p0ngy572answ9f","ugnot","10000000000"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3cWVULHSHC1mwK8o1vfJHKfNMvLEvKU/sHPQoFWRoey"},"signature":"rsqXl/xJOcB1mcc17o4l0EGthHv8hegnFpi+6i4QECFYKjNwCHnx81nSkyweWQzB1x4AUuXxmTHeIweSy3HLRw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fnakf9vrd6uqn8qdmp88yam4p0ngy572answ9f","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fnakf9vrd6uqn8qdmp88yam4p0ngy572answ9f","ugnot","10000000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3cWVULHSHC1mwK8o1vfJHKfNMvLEvKU/sHPQoFWRoey"},"signature":"5/pVG6jsuEKl1YQHyufp+EBhTuiK2lX87y3apM2CwAF3c3dsidM/em+ahI2nNLwxa86jWSnTcaAqo6kpnOQXnQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fnakf9vrd6uqn8qdmp88yam4p0ngy572answ9f","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fnakf9vrd6uqn8qdmp88yam4p0ngy572answ9f","ugnot","1000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3cWVULHSHC1mwK8o1vfJHKfNMvLEvKU/sHPQoFWRoey"},"signature":"ijV73invkMGwUVFl3BKZBroAZE9p6qBDjHZ2AMBETS5JxkFvF/Dkpv/ATdJiDbi/986nEpnXs9pbpHCyig8Fcw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g137qlty5d9e3zzquxfuqfdrhpdv3la3hcqw8v64","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"dP4RdLoVnz9otCHe1T7kjmlmo2X1WqVroQm42m6wZa9Lp/bYB0Zsj0A7/VaoCjFYux17R/PK2lRZ62OEefzTOQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g137qlty5d9e3zzquxfuqfdrhpdv3la3hcqw8v64","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","NOXU",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At05p7y6RT7T8zRCgpVogQPQxHmOKHG012tj+HXpTIYL"},"signature":"qBuIdbJoh4RzONZb31s8da0LAJE42OmIKfbElOqvuxIRtm1P8dmLrpF6ZDJCrQQpBW2NVglChpDquFNeBYCsmQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g137qlty5d9e3zzquxfuqfdrhpdv3la3hcqw8v64","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","NOXU",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At05p7y6RT7T8zRCgpVogQPQxHmOKHG012tj+HXpTIYL"},"signature":"V4pma13anftbdKP24pirDl2R6zqFfXreQav5Ls1IFj8imJwsfFJncCWN/95zoISOe1/4XyjCy0D0FycF1bjvYQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g137qlty5d9e3zzquxfuqfdrhpdv3la3hcqw8v64","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","noxuspace",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At05p7y6RT7T8zRCgpVogQPQxHmOKHG012tj+HXpTIYL"},"signature":"CbiBPtbzd0lTDrRfn0L0IYbQzuIqG4e9DPXvpjjxw8p0IPJ7UJDc5G7ipY8cQEg2dH0Fog6XYu3MES6HiE0pAA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"5000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"5000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"5000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"mM/1x5FFrbTuccSbVhG+kSHGbj3bRxHLpL8mYfZWLUBhoE5MdUVpCUBKc3/Ddte4Rp0ycZP8QVBKK15/k7dTkA=="}],"memo":"12313"}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"2000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"3000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"bkIq5L/CdYL1kV5iR4uVeEXS+jGJGVotKlxfggmIbBtI0NJK9jBlSlJWDWbASkngeDhol+YeSB7aLooBWATVvQ=="}],"memo":"12313"}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"2000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"3000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"gk7yi1RbWwATk69nKZvtcuuzkzfsCG7IizVKLQ4MYtIJEamhTMEOxppA2K6OXs4At0qA1lfNo3kiJjy2eDTM+Q=="}],"memo":"12313"}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"aueJT7Q9csRrLGM/PRDpWrtlY2zr1kQO4ca0N4oiRP11IvD9vcOax1gP/VjQsDL/x+J8KSRV/WOSjWBVV1iEGg=="}],"memo":"12313"}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"Tn2DGYzg25uPSzUMuZRq6P8VKCWjR5dJYc8bR+ZF4/Iz3IOIhPdusQp9lzlUllcJP9d0La/jhVW6mCnNG4x0hw=="}],"memo":"12313"}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fjsa8ulyem2v48jd7hp8l2x2h9s7leuzntxpz9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"mrwg+vyS1bXOnkzjBujwo15XmfQVVbRriKSRiZCd0UoryO2L1DERqWoI4o66ZpYCfuKT64YV4o9g9dCF0fjVlQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fjsa8ulyem2v48jd7hp8l2x2h9s7leuzntxpz9","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","goldzn",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmcRuSksvsLXm/Y8pUqp3AWpxEeLntICBTWQY9QegC9K"},"signature":"EmALwbi5UuO/1sNADsTWWWjN9F5pS7KZ1VBaZJuxGxFTvGWc7GA2BIcXTZOeKuqSeWEroO7pYQ9ZAqYWcfGEQw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19axfzqfqvfgem3c8vdfzqdq9fa4ypkeml7drq5","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"qZU6puPaQtoPCrQJcpA3DO1/1+M9TM//QJk9NuGe8iMPYzQ7v2O2rFdM6sAycBUl97YCd+yOqNcWN8dgLUcqMg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hfdpea8w0zfqk9qgy7sl7ftvrfszjg4wxjs0r0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"TQiaDWF8HSL6F6Unb4rB8H4SQZ/j1yAJIbNuqR21xDRXLFbJDtJRuUpbELKbvuVOvUC6mPO0G/az+269d+K5lA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1d0zx9pay4h6zlnzy563kr3kqctfh5rgeyymp65","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Y+nOUEe0xmFZja4fLiIPSgQcE+q7sq8pOTv9n4rr+RBf/v4NAb0xZBM83viMe+GcUPySFbVsh6i5Y78j7xNgvg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g10twuj3nsc8lmqxhazysm077al9hky0mgajg3ev","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"hEgfoea/YBSzRe39ah1PdthzbnNTxhk5j0eHPoV64RYYT7H7q5FxvQsDHcBkDwu5Gs+VzTQZYJ0/pM5U7TaVbg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g13jw7n90y53xw0vk6073ju3y58yl6c2s4ad4rph","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"zRB8tH6KNellbXJfs1aQgGo3hp9kxyar1tk8y+DZLP9tlfcH8ePmIq4jD3FYK5tLgf+38Q2rLt4xm2nmBhQZWw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19axfzqfqvfgem3c8vdfzqdq9fa4ypkeml7drq5","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","ihor77",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Air6M3g5UFCw8kW/NzTgHzu2Wg//yCmCgx6q5JbR8FbR"},"signature":"m3shePvR5q40sCqCVJZPk4Lj98PMJ/DbuFD6lUM5Cextv+nEgpka8fleQfQVcBQi5kJE8xAs26PvEUQ3RP/ldw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hfdpea8w0zfqk9qgy7sl7ftvrfszjg4wxjs0r0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","roman11",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Agce0lHgLCwTt+EMVBRQWiAimqZoUF/zHuHf3mtdfDgq"},"signature":"OQud0PHXXlxWYFapoKFlH3xB/Hmx2CObd74FIYUNCcw4Rr5GYOOtbXuuZU6J23RkzV1Y4Nsv2lgbyFFFfpj7Tg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1d0zx9pay4h6zlnzy563kr3kqctfh5rgeyymp65","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","vova555",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At+ls4QFnZ+nML1xNlQgmCXY6hVWOQqj77q6W0txlYyg"},"signature":"/EYjbEltfEjN9rbzlsG7MvB+EqsZ1AObGlCbG0ZxpP5Ac15J8wWKyDCRE6UyFPZHVfLj7pOmU3T66gMOTZ9r6g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10twuj3nsc8lmqxhazysm077al9hky0mgajg3ev","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","ihor777",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4Xc9CTi5GV1Eym+J3z03xQa0Oy6Ywh8nk3AOaxv8Vgr"},"signature":"jj4GZf0EmLJKwJIH5fxidayja+KN5F+2TmGSWCKDamJ6XSjY4680d1wZgz7kTDtUvY6KVqkybi5UN9aLHCMBvQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13jw7n90y53xw0vk6073ju3y58yl6c2s4ad4rph","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","roma2222",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkyXO12kpVs2FS8iiICYYGDNRjGhbCeeIE3OlGQ63nsR"},"signature":"66fU2+AcLokVMctCPkdjvFGNV6nUnK3kiB3Po+xN5aJh5Rt9H9Sj8c2R3qcMSXeCT3bUZt/mwJEU5rMhzrK0SA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1n67wrk4nlt4qapv2l36asf250jwggzgeh7m0lr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"+w15fR5k/siyRJgd3dEqPOAOeO3lh8GrXbtqJUIbkOVkZeHPeQXGrED02hscXTR1dKA8rhhmh9fkCsmc9rDdmw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1033pdf766zqqyuy3waj5jusccm3g2xtmtut9u2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"a5/r+qDPo4LoXZdZaA8efr2isroM/Gy+6Zk5BCrg+2dXIXkJlrKbaeo4TNCAd8I/R1kiRdrQ2LF8iL/k+Su8QQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1pz4xsaqu7khczha9ezxa6pyeuw4avmy9xk6xr8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"wg4iWxBoGH9iLenH4k8I5nW3VakFjsgaYCrSvtkAivg4kK6gnfTHgwWAxI+s06uRl9b+vN3Xjc9aqNQa/6dnGA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n67wrk4nlt4qapv2l36asf250jwggzgeh7m0lr","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","thxuh",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Am78xf2Zd3tctbh/+VJLLMvOsvUO+Ccw138BUMMzOcu8"},"signature":"li8o5l9EBeJk629Oyjd5OilxxqerDW25ixVzWx+Lv4NT5CNsI7niVqUqLWBzwqrzEN0yqHxMW0mR9X57JUOHQQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n67wrk4nlt4qapv2l36asf250jwggzgeh7m0lr","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","thxuh",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Am78xf2Zd3tctbh/+VJLLMvOsvUO+Ccw138BUMMzOcu8"},"signature":"l3jyksVJ1omKJsS6CIaPymB+Jun7xMyU8pIFAc+jpddIZM9a9c9FPSJxYaXMQi0lpGgRwyeEr+WbpB60MdICUg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n67wrk4nlt4qapv2l36asf250jwggzgeh7m0lr","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","thxuh1",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Am78xf2Zd3tctbh/+VJLLMvOsvUO+Ccw138BUMMzOcu8"},"signature":"HsVlM9o159fxvwGTq32ZNeGPwr3q+NTvZEKUN42PxJxRXqXc/k0jPdp5u9kQAsv5pCvjO/+zdPX6mvSIStsy8A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1033pdf766zqqyuy3waj5jusccm3g2xtmtut9u2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","whit3wing",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A51U8JWatF5Lwkmsy9oj4poEPzblCz+2yndowcCa6POU"},"signature":"sD/HAQ8Dcsg/OIVNa7YAJgfa0SZsSa2G9TeqGu6U7oNu7wlQIEBHO4/tje3f91a+nnggN8NjCixMmYO1AS72DA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pz4xsaqu7khczha9ezxa6pyeuw4avmy9xk6xr8","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","cryptx1",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1RWWquWNvEAzSGh4oqm8wqWsnCSg4Nvsnp4YHoZ0Wv9"},"signature":"/UGsRrdUFkuRIslNOl3cM43plPWQHmWUelzuqgEGCxlB4M88dauU0c01TlZpqTurXucYqT6YCkS2aVrCi/9BtQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16qjnuzujulnc5zey505d04rfmyzxt9g0akp7pw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"WPQNBd3CUEXMWsiGOZAw6H7xRVYQT2pVI0sO7pQE5SMI0U4km88jYFYi67HU79zmz1PZpP20U1jimVh5yWz1nw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1s0ga94r5a8vxaa9l79s8kg4up7l0mrksegr88a","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"H+YAFTMQ+10kcSqTc74GzFSSmVCbreBy7sLxuYJ/Tw1S+suk31IDm95Q+0vApW04cS2u20w2PsUN/ikrFZRf1g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s0ga94r5a8vxaa9l79s8kg4up7l0mrksegr88a","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","«ramzeesss»",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At+4G1HlDMXG2LxqathA5hZAW5SDag7zDhGO+s9A+h7z"},"signature":"nQqkTSLh6koBl/7dE+L5iHrDvRXcu+DLrRBjiSXPMd4+diadVMuiUqm97xgSf8QftE8uFrjaolgpR5scUBUUjw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s0ga94r5a8vxaa9l79s8kg4up7l0mrksegr88a","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","«ramzeesss1»",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At+4G1HlDMXG2LxqathA5hZAW5SDag7zDhGO+s9A+h7z"},"signature":"d4xR9y7y7qj9/kL5Cpq+PrmwQzcSyqY550FCcZL3TEtvBS2CVsJa26oFHDFEO0P1yUwHAPDI7gKwbexzqgxQ7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s0ga94r5a8vxaa9l79s8kg4up7l0mrksegr88a","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","«ramzeesss1»",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At+4G1HlDMXG2LxqathA5hZAW5SDag7zDhGO+s9A+h7z"},"signature":"kB/mBa4RyUSBTHJvSRwzdwebF6WvsoP1hG22rTpZCJZIDxj9up/cPTaX0GFK+qERq3J2rUbTrOg8iiWY3g7sMg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1qrk04n7deln6j22m6l6wveegmwdt0qrd4vphtq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"hPZE6X5IeIyzYnvTYtT3ig8/ZVEkmL7b8EANns6MEhJnn6NwsQ1vDRlO04aUHD455HsNpAgUotVn5C9ZsOydsA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qrk04n7deln6j22m6l6wveegmwdt0qrd4vphtq","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","IvanZ",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Akvfi9lbOM2GAwDnnV3NOCpeAqcfcrYhGR+QbSAa39q1"},"signature":"3K4ovERwMks4d7tcPiCtEaWGZTJs77CfmYgG1+hF4xpAz17HQ88oLXx64Y6xntRflGYZ5si6otACZnfSE9m1Tg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qrk04n7deln6j22m6l6wveegmwdt0qrd4vphtq","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","IvanZ81",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Akvfi9lbOM2GAwDnnV3NOCpeAqcfcrYhGR+QbSAa39q1"},"signature":"wRqsCkZqCkpzD0noBhIpdCKIe0ViWc6Na2ZlVTkWiNA0JsKF3oy09SU5fx7y2kDfSM0RJqV3EYIT48F5moT7IA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qrk04n7deln6j22m6l6wveegmwdt0qrd4vphtq","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","ivanz81",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Akvfi9lbOM2GAwDnnV3NOCpeAqcfcrYhGR+QbSAa39q1"},"signature":"DpBI/OxZtF2VO7fkSs4CxZ+ZCuOnpLVLMQuuMDotMKhy1/RstV2FsEXvYslTKgbDCkmUj2P3fH/xME5MmsA7NQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1up78jzj73lz65kdxfpsswacwg3y4z7mdc6wpfr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"AKLSb4b0CajwEHMlmTiQmUMt93wChjFffzI1Gcgb6Fcc7pRpNJj6Kbutgd3tscQ2uSSmpKt/3XAt2G3wUJbzEw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1sftyfzsrqrz2yu8gp3vt77sk80s99lqpmm67rn","to_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","amount":"10000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzqNeWaaM1zpmO4enoDN3TOvuCnbjnBTb1RubR7WZBtp"},"signature":"s8994hCBrb1L1SPn0PO4xvdhT+e5vJYedffommlIGiFqcGQNe139A1zfJvxxFqCiaiJPpbZtMApLfVCh7J1htA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fnakf9vrd6uqn8qdmp88yam4p0ngy572answ9f","to_address":"g1fnakf9vrd6uqn8qdmp88yam4p0ngy572answ9f","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3cWVULHSHC1mwK8o1vfJHKfNMvLEvKU/sHPQoFWRoey"},"signature":"IGPsEvBKd80mSbflKcE78IxNW2dpw8EQ8apefJ8zJ1Bad15/wRVSiiZ/dEySqP+IGRUNTjxfztlbCJXYZc9J4w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","amount":"123000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"PdLq6JyVg1TEQRLfnWF+pimT+Vodt2vjJI5HRTgI8blWx8EiruMc4JbW40urv3cunkL40Qq90m8Nbs9sp7Z8Dw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"807399819ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"LjbnyRPyTyzueYfs11JZQjtFcUHaaS87h0HzDUAMAp1run1+cE8hPfnxuIXvDaFbZz/v1AlVgEPBsKuc/YsEqA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jcrucj9m38rs6ckv99dekx996655vmgdyuqu4x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","oog-title","oog-body"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArC9NpU35Nm/vkDdOXVNRwqdZ1OxYOE3w6MtfDD741Et"},"signature":"mcbNus0VuAysRVc35laqaibwyjPOR7v9C+NRhy3dVoFc0hEQ17AZ86pxFD8iWVBXg43eUgLoH+/I5hkgPgUEJg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jcrucj9m38rs6ckv99dekx996655vmgdyuqu4x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["99999","oog-title","oog-body"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArC9NpU35Nm/vkDdOXVNRwqdZ1OxYOE3w6MtfDD741Et"},"signature":"Mzzw8gTz7x1P0sZ7h9J9mjTidBxb5jG/vjxmwpOHiloyTzPWL+CGRCUttVoWUU7oA03pMlNu0YkkQZg9a8h4yA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jcrucj9m38rs6ckv99dekx996655vmgdyuqu4x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArC9NpU35Nm/vkDdOXVNRwqdZ1OxYOE3w6MtfDD741Et"},"signature":"pZys7Gm0Hm5e4R2i/2/8BhsvhiocY8/1HFTnJyuHKt9BmK8y8VyOtyN4t+DDfqE8RJCyg+QlcgYqUXjVqE7FAw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1flk9z2qmkgqeyrl654r3639rzgz7xczdfwwqw7","to_address":"g1flk9z2qmkgqeyrl654r3639rzgz7xczdfwwqw7","amount":"1234567800ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0cN2jM5SaG0tbXUEYYhgUmFIGjdIxzlDeBxpetbIQsa"},"signature":"75Adnt8N3At67uBZYxLQt60UBvjrGnGsyJRmJmpAxcFK3nmfhzZNPk3vju1LhqgJMPE9S1TaqFgA9STYZAxEeQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18duaegrfjxlwttr5zpmwsmveglyy739cyufgdz","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ugd7iacl+XhWQutjuMLms6JLhOgOsXfK2ovLqyRzcPsWaYOqT1M3cSUroWckzTQbcrsGnHeIjMztYdRF1ddQ6Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rsucxnr4l2q7nzpwqw7gdeyd2uzjrurxxy83kk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"k9nkLidgVjZApYdCz+WhxnT0O5wWQOJAvgCkwVf/fMJKNYjMQiggvfku3zMxJkkrVv3tmn1H7yEOTIaXxQdD7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rsucxnr4l2q7nzpwqw7gdeyd2uzjrurxxy83kk","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","anton1",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlCtuTS4l7xPPi4uxMp6UD5J5cYsp/J/bgnbI00GoiLP"},"signature":"1J6ISmxpZRJyWo/T9xLgXiWRYmxmS4GHX25VwSwi3GFXxiMD1L062TrTHYuosr+5vcvHHFgY6n65EuopPJQZRg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xlp9vg9yv3uw85z0ruj9x6ypx6ljguxw86v45j","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"2B/ljq4PcNsF2PsRthnlQDgSTF3vA4HK0eaLzPVKjdU691FOvvjSV0SNtF+jEe0c6gp+q/p8vAHM7cpwwbjUww=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xlp9vg9yv3uw85z0ruj9x6ypx6ljguxw86v45j","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","antoxa",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuBrvbF6n/a1sibTwRrKbYQgG/bI1tmHU+k0OTpxPoBV"},"signature":"cfQ5NvIKnXe6QcnruVPMOalwRkZjB7zV8GQh8xi5/h53SCBpbIQxb3rHPbeW3U0fzwbxmjqU9gRZo98UhBXX3w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g194q8l4sg69vtk9yzmsd6f7c36pe3j5fd5s6c4z","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"3AMVC3NM2h6Q2gt4rVOsmetLWaXs6v74zCsnK2J+FtcZlmD5mFnkGToV88gn2WhznyIs71/27mC5pB/lM2sGFw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g194q8l4sg69vtk9yzmsd6f7c36pe3j5fd5s6c4z","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","Lol",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhmrqWQS6bGYCOabXZseM2g+0dFltlMLVZIdhbXGcOT/"},"signature":"JyKEjMXqdIbIpmY4Fzge7+tAXRnYrdpzR6VR4BTaR9hn9jlbK7GfmzorAZZoZAduKEjOlfnzU9mYCsVCwJ94wQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g194q8l4sg69vtk9yzmsd6f7c36pe3j5fd5s6c4z","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","Lolivier",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhmrqWQS6bGYCOabXZseM2g+0dFltlMLVZIdhbXGcOT/"},"signature":"SxNVcds5t2LkgJRFQDzGK9D3YEZqGs3kr7qisQwpFdAuz0I5XWWnTAkIdQKsuj9CIkkUwW+AWjtYlMI1oQQKFA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xcu0rkg4cmf4l0scypr50vy46ev3n2vs7df8wf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"dGnSACSftOncZUTRG6Y3kVIiv/6BPoqsJ531WBUt1SV+cfmz1gc6y2wvLM1bTYjSbXhnxVfFCJqFztDH+ChSog=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1xcu0rkg4cmf4l0scypr50vy46ev3n2vs7df8wf","to_address":"g1xcu0rkg4cmf4l0scypr50vy46ev3n2vs7df8wf","amount":"1000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsqV2qCHOuKcCYhFGnfOAMQWioOTzcggW0J2EVgKfKYp"},"signature":"UTAn+kH0TpfuBWAeEtoklyAOGVQLst5dK+lkM0VGmxYWp+vJsdOba1+B1tZKpnvDhQLLYqPiHip9Bl+de+E/tQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xcu0rkg4cmf4l0scypr50vy46ev3n2vs7df8wf","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","Dawido",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsqV2qCHOuKcCYhFGnfOAMQWioOTzcggW0J2EVgKfKYp"},"signature":"4ns4s7IWDwgFp41Xxrb1JPEwQGnn5Soq0+mLCY2QocwdLDM6D0aWy6QfESqVXB8BgMQrrsbSXk+FAdDwpjfEgA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15aajaf4a5l02zknynvq4f008kwzag8txv7u59w","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"AXqsph3lUjIRK0v0cwhEqr34pKu2KWjavgQjaBafFWN2tI+/VVV9MMnQlmkCSpa5LwJSBpdrSG9d50hPwGZTBA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15aajaf4a5l02zknynvq4f008kwzag8txv7u59w","to_address":"g15aajaf4a5l02zknynvq4f008kwzag8txv7u59w","amount":"2000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8fJ+PmGyhA7wlulnPAI1zmM2BBCWs9hVUZERMH4Zgsm"},"signature":"JJ1rp1YSuArgIpsEa7JGFGiClQalpgxYM2uP4o9jfTFIsWdp+HxbcDfr186RWqJAVqMtPgoczF6mTsTGF0xo8g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jcre8hjekh9yskuqzr32u59zhd8r4xtnj9a2sy","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"pYLjBufsMMml4Ms3hgC3VHFGy0X1gtZ7/HHuvc31V1EKCZ6yQXgB2TOl1I+73v/ehr2+OhQ2JM+rx56+fJ/VFQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ck2q0cya657wufjhsxl4xfajrl8wed2nv2t852","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"B+nY4xtz/v7f7pYRJjUjWn2ChD4gxDgkJcSttQBM8URXM3TJc84xe5yoHZ3V9AbHW7j/qRDiGdFXvnlT064o0w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1kar70rdez3wpmszk6ezxjlhcwzcey62yr2hdk3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"GtbIGNI1ZdXiGdRk84jbDM51DhpNDbEguJM6Ug2TdGNQbSVsG/A7mqlmSn9nEb5xzF6tVxxygzBBFJsYCHWZaQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1kar70rdez3wpmszk6ezxjlhcwzcey62yr2hdk3","to_address":"g1kar70rdez3wpmszk6ezxjlhcwzcey62yr2hdk3","amount":"1000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/8S2Vw6isPv9vH0PSRyLAcbYQPmfWKxleurn5ttN0yX"},"signature":"dz7lny9MVhdQlhBtYaGBvxA0pZi6uf+BqD1M9l1RYaEQZ83I9sNktKRR51MU/5iKt5sefuJFFC2yDBsCNhMPNg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kar70rdez3wpmszk6ezxjlhcwzcey62yr2hdk3","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","Szymczyszyn",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/8S2Vw6isPv9vH0PSRyLAcbYQPmfWKxleurn5ttN0yX"},"signature":"J1fRQ1+qFq6vN66yp8nIFaYpWZw+7Z4ibouCjzhnS0V1lUqJewb38AjWRF6MWiq27qofBVIDZ43UzvVsn9X1Dw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1kar70rdez3wpmszk6ezxjlhcwzcey62yr2hdk3","to_address":"g1kar70rdez3wpmszk6ezxjlhcwzcey62yr2hdk3","amount":"3000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/8S2Vw6isPv9vH0PSRyLAcbYQPmfWKxleurn5ttN0yX"},"signature":"CpWYB4C3bHEueyPWRralLQh0ri/Uyw+10rRPGNHXhD58aBbN1WSFvQIiJcAtHAsZS6y7hqf/6nlilLLH/L0anw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ck2q0cya657wufjhsxl4xfajrl8wed2nv2t852","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","sintez",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkFUpIfVrbNxHRne6QLam91Fgm7IcRTYnQUV1wQYmW2Y"},"signature":"lttuoBtjfP/ufXhkF3Z00Jca9c7fwo7b+OGrSzMCJyVJYIy8rK/kv53rY9F2Mtfk7b0QQQbk1LGmHsQS1QIjnA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"mXVuhDv9WI4AoTfloJYLyFs5ab6zYMYG6ZurxkUoqV5AmWvFiD/97iFg5J9G8ugFWY8A3WO8WTRRDgZV1c6J5g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"8YS6ZypWln4mnWMkYtSOjzlKq9KKTH58d8mqPB8/2Vsle/wllK5v+y1yIzdq9e1R3N5g5odi+vl6rT+EnEYEVw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArADVPfUBrZVmlqmZWPWucRTe9gkJ9wJFyTszJoU5Ebi"},"signature":"AgU0Fh3UtzvBfy5qggD67Y/w6XUGJxWJej5TSrOd00gSdmzkCIu+A85W+230ZQG93aYV3xn0UNvP9TbmiuOkxw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1flk9z2qmkgqeyrl654r3639rzgz7xczdfwwqw7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["gno"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0cN2jM5SaG0tbXUEYYhgUmFIGjdIxzlDeBxpetbIQsa"},"signature":"C2mcWu8kiIt+SxnpRHCIqImE3KmG6cZqO0exWo6lySYtgtuIgSXjbfwTGiESdQXLiPfuBuHo1mGBatkzlvU7Ww=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"DZ036+msypYNoymSxMBEebOuSbLK7VS1vnVz8qyJ9plpPsRef4+klLhH4ff3T6EPepy7FqlSTkoYqGDOapQdjw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1flk9z2qmkgqeyrl654r3639rzgz7xczdfwwqw7","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","the_one",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0cN2jM5SaG0tbXUEYYhgUmFIGjdIxzlDeBxpetbIQsa"},"signature":"OFroYCSzyAaYKar83D6ZBS6ENZCAi4h+s5WhaIKvm1NsJ5zigE8ZPuH1GFWLGdx5iBjrIi+CvuTMqdF5tb4I0Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1flk9z2qmkgqeyrl654r3639rzgz7xczdfwwqw7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["gno"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0cN2jM5SaG0tbXUEYYhgUmFIGjdIxzlDeBxpetbIQsa"},"signature":"yypzlKO4Q20DSihmtE2wJK2ggE2JHO3TVAwx/3u5w8BiBDSGU/VPxTfeGNl1QzT4Z+NU9oEBbNpHOgCnk+OR+Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1flk9z2qmkgqeyrl654r3639rzgz7xczdfwwqw7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["g-n-o-!\\@\\#"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0cN2jM5SaG0tbXUEYYhgUmFIGjdIxzlDeBxpetbIQsa"},"signature":"ReoThGSYu5rBpRloc3zc5WI9DNrsnIp+Tr1LOVLibFpqJbNTl5AIhaetQxXDnAJxmSd4Ro/MvUcL1x/CFEpyfA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1flk9z2qmkgqeyrl654r3639rzgz7xczdfwwqw7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["the_one_board"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0cN2jM5SaG0tbXUEYYhgUmFIGjdIxzlDeBxpetbIQsa"},"signature":"TxXVGkf0MqVObGBmrq4TSgeFXeUsQK+nXQAdBGBmex1TRlwwS2lB0wj0rhJRui+onCa7nYGWhZDdaQQoSXbzEA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1flk9z2qmkgqeyrl654r3639rzgz7xczdfwwqw7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["the_one_board"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0cN2jM5SaG0tbXUEYYhgUmFIGjdIxzlDeBxpetbIQsa"},"signature":"93w9yHRxo2j8iN06HxmZn1NigjdXYh3E+kVQ5h64vIJIY0gtEFVN9lLyU4yi92IbxNTXOOS2YOTQM3tlr9j8xQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1flk9z2qmkgqeyrl654r3639rzgz7xczdfwwqw7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["the_two_board"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0cN2jM5SaG0tbXUEYYhgUmFIGjdIxzlDeBxpetbIQsa"},"signature":"X/dEGElBljBaisAOh7HZTqDTL2XGoCG27ZBNFUVByJFtGLWr5tjExp9jolKHKbXviTK78LSVnjd0dLzhDSxLVA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1flk9z2qmkgqeyrl654r3639rzgz7xczdfwwqw7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["the_two_board"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0cN2jM5SaG0tbXUEYYhgUmFIGjdIxzlDeBxpetbIQsa"},"signature":"kM57kIjvn8qidCJ9W/TEvlh1bMbjBT3WCf+jG6xgVcUPpamXZRHd4WopcNWt9WWrfsOWfgH7mjJnsEoRfelvYw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1flk9z2qmkgqeyrl654r3639rzgz7xczdfwwqw7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["the_!\\@\\#$"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0cN2jM5SaG0tbXUEYYhgUmFIGjdIxzlDeBxpetbIQsa"},"signature":"xU7v1sVE3TlkkjT0JXPeTcugn1OSHlZUjHzC/fAVYb9ii3SEb05K3tlIL/eTJkUU1qwACBV5FIZSmPtFicxWFw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1flk9z2qmkgqeyrl654r3639rzgz7xczdfwwqw7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["the_!\\@\\#$"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0cN2jM5SaG0tbXUEYYhgUmFIGjdIxzlDeBxpetbIQsa"},"signature":"jBIu2jvwSmVa9pzEQtdc/NMMt4YVdI/lgO8xi5pLpMR2HyFeGUWzkpuULkJN3+qd6xIaV0vV4yC1fSITKFssqA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1flk9z2qmkgqeyrl654r3639rzgz7xczdfwwqw7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["the_two_board"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0cN2jM5SaG0tbXUEYYhgUmFIGjdIxzlDeBxpetbIQsa"},"signature":"A+6Ew4kOUdJqno0aahqTnlykWTHGJZVJsjv0FbdOAi8s6peP9017EoQQuPy6xsif0M9/FOt0RzsYzBjQiRIdcg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","to_address":"g1hxecqgcv4f0p7s7ap6t20vaeeuvqgvl9qtchr6","amount":"3000000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"p3ajoPtNgDQmvsrLIPlSY3Xp9NInZd0uLnvhz9HmCuYzpHm2LOcCgnSWyZk7PQ1TM/FuF/zxWrYs5JMIvrLWew=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hxecqgcv4f0p7s7ap6t20vaeeuvqgvl9qtchr6","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","man_in_black",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuJxl7LShR2+FGthhNED94mz+IowgGHOGEXtOnrBkqq5"},"signature":"teRuKpYQFYwI2vXVnY3MCa1UE8nykcQ8Mwm1Tkgb3XRcplp+n4HWvx4SCI4yDV6BsUmjpyYJrO7C/kZuox7Vow=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","to_address":"g1hxecqgcv4f0p7s7ap6t20vaeeuvqgvl9qtchr6","amount":"1000000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"KXJPWRm8grvAhOlxH2vRLcrudSH2NitIRZ41XyyGIJMQcahsyX3Lm081vQFK+7bYlQd3SZoIot/5qtdDqLVxNA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","to_address":"g1hxecqgcv4f0p7s7ap6t20vaeeuvqgvl9qtchr6","amount":"1500000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"YY/opahcyEJy4wFre1LP/QOdLi/xTKGOJOy+SIqKST0fxI9XZTrKmu8y4/j8sRv425Inrj72wT0+n7wkFt45aQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","to_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","amount":"2000000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"Hw5rQSxW29M3rkwSibq/vEsdZ8rhC/IzhFcOqNa15kA31SrtzgPJMaQN9jDb1F/ateluXsGBP1/qVUzXqfZ74w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","to_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","amount":"3000000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"Vf1Zj42vZ6+pjS1EoWRJXQZuSs1tpGfirLl1e28h6/JRq4z2jZIgzqLasIdSd/OCLUh6KODU6Wr6jGlyWWE/OA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16jvwrvs8fqzqnncgqa2pchexmns7e2x5pkk2nx","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"soI/sfbj5jV/q+eZWiB37X3v7C7ndNYEGbLJ7fRk/6hFQovWFUGhWL60BmlKTZXn94Id2Ub8VvvvF2IuLMTpfQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jg9qmnxuzuvzrp5vv2fe6wheludhvkp5e33nez","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"PWiiFKIsefnyi4UoLW2qRjVbD2cMZvTMW8l3eGGcFzk1c9aACNWA3/3+NrkdgnUD7MIZU/A5PgJlcUNvK2TZZg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1dtwfgd9tfrv28h0s88gj9a29zda3df8hakggsx","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"DCxPJ6GAPP4kgcVnRryVl9qkGQOcUuS6ZRY+i9mpHupcr13v8u5ktnF+ryctgcs5ehq20VbkuDTBqpYaUuq4SQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rc77lac6y3uhyg68c0lp42nvwvrw6atmtfpr2r","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"qKNb4htLvGl8Ncyc9uHypMIGuGQWLqKUyFvdhtng3BpOX+enV1va1Le20gHZB+32sAwY0rWI2mxbywShL41ENA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1a65gg32ervt8j3ve7lnftxjn7gwrm9dtgp4dwv","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"0WYUXFwS9cBePHx+Ou7Q0k8goUCKvM0iKzh3bkF9Z4w76VSHDD2EiamJffJB+vUF4lHOqbibh1gKPGgHZv9D7w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gst7egqde40h7pme0vzlewpxspgsc0zlgk7tfl","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"3Y4DuY6Ypyx/SQ37pSOeLrLULvKYcYXOWV4X+dJyEop9oYQ03T9K/A/8cAq7KaKo7OPp213P4ttoTLelJor7KQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ruw7x9uemk2afps0u3y8ef4v7dcrw70fy9tt5c","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"E5Jun2LR3u0Qsn/h0V1k3buu11t1jfCV5evxUXQR+5Ysl2QvIFY1uL0hM0TIQb1u6OMoyVUUnkvUCIheu2/WiA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ftljj3t2stxta677hclq5g7ryz9ceh55lw4kyd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Xr0gSVJ4S4arJD5dNqsqqGfzChbT2rXn0j9fnh/vxbQd2NRgMUaa5TU30oUv+7w3OLkw2r3ntZxImL7xTkCV2Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","to_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","amount":"123456789000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"F/7Ubn53/Aijl4u/lb/SHA05dCM9MLXrnU/x11bY624iFinfDvY6gGE6f+uQshlLVuGwUPw++gx1OpgJbXFqsA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xhlrk2sct85fanh26rtl4n9c0wtzjl5hn78nws","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"8ztPfGQ6jIMgc0Li8rGAnPibMjx1sO5Zyr9WqUE0WVcyW53K/CYOf5nBrb/wfUdGak50QeKF9Xh39pl4bLkbZA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rsz9gj0vnkm9rsnej0d7lma5ftrpeh0wf2dkw6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"3vIcnP3s6EFx1Lti1FuaPa6CZDvwUwCj9ri74lhiKP4ovTKeFB+NygrsaeBiDPAA0BCuRgmXr9VS99EAkFfi+g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lgjq5tcpkrn69sn05509wuzwg6dewlqlhl8eam","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"eJmHFgKnJ83svsb6LxWqMvYnkEhv+FFMdm7x5JAErxYH0PR/dMHLOqnXpUQ1QyA3iUIt0xQdGJKaprAn2YDoOg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12gfgg7yems9ettvcs6yyy029tsjwyuv0m7739q","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"xZUFjs5dQBhBQ+D0V7K4W7r70KouriwbTVZn3+UN4NEbLDstrH9g+cbkWaybiwosQKTrLbA5gCBcvWGIVZAVSg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1x5cpkw0uugu83pz9u2zrn5dtpayd3uhz205rn5","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"FGrkiktUpzSGQ76gRQKJxXZWYhVHmlvwrNgWK2f+9aMYFEQC8rzFYQDft8bNP1nHIwcmxKihsca4mV4/IQwT7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18e99p57vt6dmfn5dym3ypjtz5sfknjwxs5wh9v","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"PSKM+1fVKLgTqtiBlAp13d+/MkGi/BnE+vD95SlO2ipvVczjiDyoVMgzvOgm6uib5XyHiO0NboFSj1Yuk+GXjA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ptelk0nrnysvlvwjnnt7k4y8f6dxq0t0sqpl6t","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"tkl0K9UfqBqYSBJfdLT+9deryyPFEacUO9s/4mYHgWU7eUMWYC3lrVAShNA9d+h9VrqsB+J9odQhmz0bIblG6g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ngfqc98kp8aze5tapse9ka6jkftx4rvhp9ve95","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"u+1h/M14lD1pQTjyBllj/aLA6RgjKTxbugh1yJGN/ypBGkKPXYhjf9LuNV1oCtXdKPO5dABVONwf7Ul+wIhEkg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1wh8nupyser2wxtz607d8wwnlp72ej2rhlfz2dj","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"1cu2DfjnXuYfUHecxpY1i/OFr9NAQ2kQat3zaCkVQxMNjht8JIoXsU3L8ZV/W+9L4psRwuNr54BrLvkg90BaVA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hxkmw9qzh2zdqy0jpq382ne2nejxnan4zu700s","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"2lwTmTHbNh01t79SaFA/qJVSPIvOXWQhf+zJVHeric1ISS80JJ106La93dBX0v2V6kYRDta26xpRFcNd7e46MQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1mgxyj4p8693e3mch5haa9h2px8wfzdmwcrwl2n","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"bTWagTfYu07c6PSCiOhVKXmuj3j5VsR/tiU2sxkJmAo+QzhbdWLbcj1HtKiPsG/VHy4vN5WYSDRiWtvB1MTJAw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1klty9wsj3sz3jsmr7vyz0pz4xvrkcqkxrnqlak","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ZdVuoxH6ptybE0xgG0okZ82VLd/UlQO5eIIddVtW94NzslC9vuuBUbGGMy3oxMq5KfcZXhzLmNuDLnn1tnd+1g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lggxye5fzaydjzk4p4h497m9epqzvlu052j504","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"tmp73hhQdzpmidlJDqLlQ5vkKiff4zgoshstZ4RLxrtx7BSrt2l7TjSqBh2gR84KwkxTk0A4MstEjcMh2kEvow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1d9mxnu7dtaltxywua7cjayae5k6tmjlqpg3dzc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ozKNFsGDSh+5ot8E0mXgUJ1L2mGmndaKop6dBf2VzlAwVDNA14mhKAj4gfXplc1CuOgtu+ZqDyJ5ocMhvfPxRg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"Qc1MsvHooE4Bm7Xy/9TxusyD315JwuxVu9BNzmPBPG0p68xmyqBuErx6eVs9YDUomYs8oOBrU9qgUGsSbDqxIg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"2000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"3000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"hL8FUUdklu/7CTfEUbdLH0GTY0OFHYqAZdunLbwHtXxVXIR+rA8erW3IhTkk45sfNNX5aKNj1b8fqzzCo9bzNg=="}],"memo":"ledger account"}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"2000000ugnot"},{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"3000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"858Q1mGRxoEDQ0m+n00LB6+/u/qCnR0OHOnrVT0MrHx5wBIz+N+xw+TZ0d5XilHQzQmRkkL8ftAloQDC97zlXg=="}],"memo":"ledger account"}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"2000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"MwS1IFMDq7YoqZYhXFkmbwC3huSPPdLx8ffzicTTm/1WqfSlKMik/wpr7Oddv5xWGr1V34nAcPjbjdUz67AGIw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"11000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArADVPfUBrZVmlqmZWPWucRTe9gkJ9wJFyTszJoU5Ebi"},"signature":"FmPGwPV6ZqVvCUo0AjwzVidNZf0O9F5BkJ8Y8E1ELu0DrlyhlOcs60fzxGb20PSgeKwIGnUT0Uf8iK0iHAIbtg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"DTRBxjue+OTR/5P3o8hszSeW/2GmCstRV1I3BmS16bsrWJSb8+P1ohuVw5kahNLbajI2S1RhQPUK8RHKUsneXA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1a2yr30wgsqmn6pzcc989r057d3ptlap7n9pggr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"TrDm6dR8upYY1g5bf9e6XNn7vOY9Y1/+9VkxTJpHbJ88F+vvY1RA7gEEpnl4LDhLmfkXj2Z6aYdF3gbgPvK+tw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1a2yr30wgsqmn6pzcc989r057d3ptlap7n9pggr","to_address":"g1a2yr30wgsqmn6pzcc989r057d3ptlap7n9pggr","amount":"10000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2YVdF934SxiMcztOdXasv+St4CqIdRAZxKtk9sfAWZG"},"signature":"s1SUZh3z/CObsRFssdC77r5xNw6sD6CRmlnQAM0VU4Ae+YFyjbHgafhDBUGB9zY4AB/ym/vPYjqettRjluArxQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1hxecqgcv4f0p7s7ap6t20vaeeuvqgvl9qtchr6","to_address":"g1hxecqgcv4f0p7s7ap6t20vaeeuvqgvl9qtchr6","amount":"5297999999ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuJxl7LShR2+FGthhNED94mz+IowgGHOGEXtOnrBkqq5"},"signature":"ijKl15ZAI7H/j04rf+S4/LjW+V8LNctm62D0byoaGhwZmg43UOcJCmfM+189XSQyickaNdNrhpm+Vo7K6QSBiQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ckddn039khwxzu4v5mc8n34vd9ksaks2l6c3kg","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0kzkYEt8K5ZALtwx28ajSrJZ3f7mI5J91Lqeaf2Rqhw"},"signature":"PmlFmHKNNsuqN+VbwFEN5i+0U0BWa3u0M5HFRcKLmT5Amq13PqjvKyY7jLfc/Xu5tmws+mHBDXeTzOQJoM89Lw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1drg7fj2jmp6jtqhrvrcwy7ch23upn52y0q8ch6","to_address":"g1ckddn039khwxzu4v5mc8n34vd9ksaks2l6c3kg","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjmniUCVBxgC9nmDiqYclB355iNqCppngyEupNk0zm9j"},"signature":"32nM8lNhlJyIDc5MwiRIC17uhE/ClhY0X2OMAVjdnXYlBcknLiTRGqOhtA7i1gnvviEqFLD25ipsAOw8IfqRww=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","ugnot","310000000"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"/ozbq9SuSg1s/ynENnYyWYhSop7jPz1TeKWCsP+cRNxspi6x/huawuQE/f01FEZKDeGHPcwlJZZkgbhq6r2/bQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g10unqv2s3kka0tcy4fxlfuxtl35jfe2dryaj28e","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"fGxcfmkJjSIpW/aDxdwj3XjC8xZiQl4XzPpgMSubKVBuTsK6N3N98pQntIOlhVTU0yZSHshkvb7RyCsUWv5GBQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"12000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"t7MAol+62X1W1M4thMER7WeeyQGdngrmkSIjo5g4tNIMugZD4i+IxiLTX8BtWBIggT3c9Utn536bBJ/IvmN/hQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1f928txvkysz4suudnaj9xmmlsu8l7e2nz2n7h7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"/BxH+WVVJeZCouvBiT36q56eHoHhvCGc6lO7Meg92id/710nZyKy7mJZElxEXhquil1bmxKgtfqBCefzHT0aSQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1f928txvkysz4suudnaj9xmmlsu8l7e2nz2n7h7","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"320000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvXCXBj726IQb833UOKiGrP5/NPBb4ijmeOzUSHx1wa6"},"signature":"fUdnqwL3HrJ3L1cRqGqt/+BVTxqTihhOzsiEVpKlzRtGRUgAcXuLdJ4nrL2asu7EKgOCIdjhjXuTJ37R5u06og=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1f928txvkysz4suudnaj9xmmlsu8l7e2nz2n7h7","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"319000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvXCXBj726IQb833UOKiGrP5/NPBb4ijmeOzUSHx1wa6"},"signature":"jpu04h+Px+g4bzwrZGYKqfS2XtDSyUWByoW1FTtw3tAfJVuspth+guDFguKBNRa43jQw3nvi3YQCiPXuqZT76Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1f928txvkysz4suudnaj9xmmlsu8l7e2nz2n7h7","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"310000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvXCXBj726IQb833UOKiGrP5/NPBb4ijmeOzUSHx1wa6"},"signature":"ByvoAhDdOxx/Ryigfh9ANm2akjsjiVli2l+TkT7pX1YYne9/8z7W9veM2s8sCmrIWTTS/tikB40uU6OvQlXicA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1f928txvkysz4suudnaj9xmmlsu8l7e2nz2n7h7","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"210000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvXCXBj726IQb833UOKiGrP5/NPBb4ijmeOzUSHx1wa6"},"signature":"OxJXqGWOsmHmknA/+9I5vlWfTDBm2W9vu57Z+XD3rDk+TL5xTVlBEMiJW4Zh11VAjpicM4w3X3fbFR/awPEcVQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1t4du52tfdfcnsrhlkfxhulr3r2a8a965zs07tx","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"121999997ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoWl1n0gPDWHmsIdghOux9H5dKTvm5LHh/7c9EXMTS0y"},"signature":"68JD9mASG6tzC4KOD3GCV0/WsqOq5H+iN0VNXk69Zrd3ln5tn8hzXYSedIv9fpqolu5wf2VJWSpR53NAZmezFA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1t4du52tfdfcnsrhlkfxhulr3r2a8a965zs07tx","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"9zujJ9R183cwqlZFIbDzjrDk+Wow5fIYxO2FSw9fOlEngerI+5Wdmjr7q9IekaMfkBHfyoAKGg+FTLZGA9mDMg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1t4du52tfdfcnsrhlkfxhulr3r2a8a965zs07tx","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"309000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoWl1n0gPDWHmsIdghOux9H5dKTvm5LHh/7c9EXMTS0y"},"signature":"VHH4AMiWQ/D9E9QadAVcMf3Dmdp2A4Tr4v8A+BGgSPByLactW9pGEN2etUVG+Q1c7gzzWmy27umiXpj4qcdDPw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1hxecqgcv4f0p7s7ap6t20vaeeuvqgvl9qtchr6","to_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","amount":"2500000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuJxl7LShR2+FGthhNED94mz+IowgGHOGEXtOnrBkqq5"},"signature":"lsejIEBD4oginyf3odk30KPmRKR35hOM6pSADqFa4F08Svxl6InPrXbU6sUvJgjVNPTBFU8oxGvursIQriHKzA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1hxecqgcv4f0p7s7ap6t20vaeeuvqgvl9qtchr6","to_address":"g1flk9z2qmkgqeyrl654r3639rzgz7xczdfwwqw7","amount":"2797999997ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuJxl7LShR2+FGthhNED94mz+IowgGHOGEXtOnrBkqq5"},"signature":"Ubl2KGkQ+QS3P1R3DOaHGSNmo2XDZVxJYTrNwINqXLtsPNF/NXyGakstUVzKr7CzV3olC5fzMvKMp/QpbdnYcw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ckddn039khwxzu4v5mc8n34vd9ksaks2l6c3kg","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"10999998ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0kzkYEt8K5ZALtwx28ajSrJZ3f7mI5J91Lqeaf2Rqhw"},"signature":"q/YJVw7rvOG+k53Keq6LCPxzNBZsXsKdMxDNE9JLZ0siNwKndU08PLl9fGd45h7A5lKDSPMffLZ/cB7cQ3Ywuw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"10000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"ssWoIru9/Eksg27ChaYad+1HTzafBnzdcW3gEHiTwy4pGWSTKhBzERMNryTiFQbKBz16UZt0HOqNIVT+447STA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"5000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"iIa0+lAS/TVeTr8GXq2QGtzwKuVH1js3YuM6yFXtYT8Lq5RuU3GxheY34qa3WqnHrh1DWXcMNVOvHu4HT4urjQ=="}],"memo":"12313"}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"5000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"Xz77VWzBDHOL/ByEwPD2Zw2BUa2c8gULhsSar5tXjlpnXayDSGM6jabyT6uz/cA2LT7PUKgYKquJab11UdeQUQ=="}],"memo":"12313"}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"5000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"uTgudqozJJVL/Esr6jZyUZI5sCW3p7a1gVDclcufge8qXAlq9Yosd0xTawtPhOfo7z+GNGgjREx2U06t+NfZGw=="}],"memo":"12313"}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"5000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"vRcpByHekoyDfxE3EhGam1Qfc4/4RVDJ0dq6K6pvpS4wftQndsQT3s1kqLQfMj60jgGWbCCWG0QaoWbA51JsjA=="}],"memo":"12313"}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gasmez6cfqyht6xqdm24pdq4tvvcc476lsum07","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"S0UpR7t7LWfD981pZCROvYzpBmk2EQKEeim52xkWvodwlzQsIi9cDD6ApbbSmRy10vnerRfI7u1XvVPtdyJrDg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gasmez6cfqyht6xqdm24pdq4tvvcc476lsum07","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","Makaridza",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlUhR5qUA0aCzohn0zx44+Hof5o48jEwa+Xy9mYPHd51"},"signature":"AeX5wSeAkx6788Rsgpkz+jAIK/cZpbSKIRTl59Yz5x5TcvnsKjF8bRqhAZDzzuJviBB4Nk9dPug4NRkzJp/xSQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gasmez6cfqyht6xqdm24pdq4tvvcc476lsum07","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","makaridza",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlUhR5qUA0aCzohn0zx44+Hof5o48jEwa+Xy9mYPHd51"},"signature":"HQHz5AVKXDSF1EcVqc/36DnQykyal1LAZSF/KLjH7PVq9TwvMCYlWKewmX1Q+lLWh0wtEA2jwvEI6Ep0m2zUQg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1qz0vwdpymq0upgxsrtqpwhfqjgrlpwdr9374sy","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"hlGhpapepTdzkVQ73YXSqj9SUxrPd1j2/8pyAEdUjVRqW1jJSkt516hvcqkUcIn16atxy+6/rndCGBhaSejzCg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1adlnzk462fw5ge603sm0qlxpftejh9flynjrx2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"c2g6c0q+ccUWphRQjNnzH6IlbFpVuEqFW8Su5AZ4JMkvlg5Tw+EMpOAgyNsV6SqziXo4SPhJW5wiNh+a68PWOg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1adlnzk462fw5ge603sm0qlxpftejh9flynjrx2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","AlinaMK",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6J8AzyW/HGBluhMXLFO85q6AlHLDSglwsH82NsnkW/J"},"signature":"xS3zYLPpSPDQmQ/VcZPAnmRuCsq8Jyo6zoZl8g7r8mIZkO06pHoCyYv7o+IK/5yDBoUVc30iQlRpCI7LdPSQhg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1adlnzk462fw5ge603sm0qlxpftejh9flynjrx2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","AlinaMK",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6J8AzyW/HGBluhMXLFO85q6AlHLDSglwsH82NsnkW/J"},"signature":"OJ15O15r8u41g8wOtrnvEi2g393xJN2gFqR3wgEdK8EfIJhGWs0ch/gYW3EG2ms/xSxhBnhBarHAJqI8Pbw9vA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1adlnzk462fw5ge603sm0qlxpftejh9flynjrx2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","AlinaMK99",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6J8AzyW/HGBluhMXLFO85q6AlHLDSglwsH82NsnkW/J"},"signature":"phIM+eDiN4d7IkrX1HFonEZmgxIlnIlCXOgZqP5H9UR5Tb52orTrhyx1ywUYkCnH5nBrrKn0UH6yjI61BjFyKA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1adlnzk462fw5ge603sm0qlxpftejh9flynjrx2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","alinamk",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6J8AzyW/HGBluhMXLFO85q6AlHLDSglwsH82NsnkW/J"},"signature":"N6V6cQdVptlMF12yJb9GHSWpHG1P98tnMDVQAtPvIUY0GLvfI9BmW5Ofyw0kbCA2hjDZdg+ZkvIj9aOWWrsrMA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18n2p03cj6wfnf2c33j5fdvk2hmkrg4j0wsplcn","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"rejeV2sStbUDPP9GkhUEMldoKCeZZ/Zdyqmr4R6WinEuOsWCGiNyQ6Kc5Yiq9QkHEPVaaozctNZ64C+sArSSqw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"100000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"9b9AWcxcN4SNBja6yGCtJbkSLeVyak3BOxYhZYZb/JpxDvvafWhRKyqa0ktx2mWSS6DIIBJ5tB46dYWemJFmBw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"5000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"QdeqcbvEmh0SkbQYuaKlW5KpzkQtGszSozhsMCWvg2BVk2SK6suYYxmoOuRZ8hzK/L+pNvcwX16Y1Dq/qfgWvw=="}],"memo":"12313"}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"5000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"dp+jQSpBAEF3PX7Lako0Dhup8O8/1Ayu5Lvy7HS2om4PVUOZ6i3haiJkv6LL1LVpZnPaVow/iT7oyeul6t4alQ=="}],"memo":"12313"}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"5000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"KUkfoc+9VdZcNgUZI9HNsdxAJv5iy+i49fyZ/TZG/aEaEWm4pz01xrI8kiW9rM/hpIYQPGzaS8px/o/9+/lvhw=="}],"memo":"12313"}
{"msg":[{"@type":"/vm.m_call","caller":"g1pl3x96jqswtg3gx3ukf2dq4jpcdl4egqev6hg2","send":"","pkg_path":"gno.land/r/wallet/minterv3","func":"Burn","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","ugnot","1248399807"]}],"fee":{"gas_wanted":"500000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArYHP8RjlnLQGQp/YsDRAu11djOFtCFZe4Oxwi36nLm3"},"signature":"aDWF27ev8lGeYVrgY4syPzE8iJLDu4eF0XnhzAsUbelwHOAYMbyFPgEbXyPU6aNBt2EwBgG+E6HHh4OWQqNh1A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"2222000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"ASalBTTEeb2EsErJBEQzmJk9bqlemcI6cYmVuPU9LhA+dAI/WP4jqx4MLmyoZMrx4BSzaNv1nqXx1qwiZiUoCg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"12000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"9l/agZ/4sGbymHhr6RVROSRCkMT2ByxELI6I/Yi+8bsRujoF57BfOrKJ8VK9SubAcus2h3Yz9FkwQAJQG2lnUA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"mOIVIA0pVfLZeYMoSwEW7vVJq+UtMl7PYtMTf+fBfl9FNvdSQcLhkyse0oDtReRY4r1fipDUH8DdKpGfg8Htiw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g12v70cpesur5ykstcduk5uhvmeurq6x2fshzn8a","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"lFV9DOjQUeQp2+MibDd456cy/sB5D2X5H5sPkCm7M9wIdhzub1sqOLTXseqT06gMG12mwogeWaMS00XzTtvDvw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","amount":"1233198ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"pF4mBbwbVH3aobBK60uNKMdtZ4vHJkGwNwHmjO+GkJlkU4DwX/Z2AOsu9pvVKiHxVRFc47RwEd37Q7fqPbvGYg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","a1","HI"]},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","a2","Hello"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"5000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"6Bz9r3SsbZhNCUghfAvQAtqEh1VKEQyIvUWyBelVH+4lOoPHrTn0Yrt2yTMA+V+NdWCcyQ9dGJH6vwx9HiP4sA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"500000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"W6gI6nBhBjzgGA2LvPp79F4reowENQ9zY9cVCP243A9Uc24Fj6IKUsAD3rlxxfDXu3rfoXTGa4jLLME9OpiUSw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","amount":"93000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"4KQUfXHTrbimtsmdquT1j6oYvclOilMvhDiw9ZSmbp48OhY3vVG8cJO/fhh69FgyZVh4JNCedxbMu2ztTLUtmQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1q3j7d85k8x4hxw8f0w7z66hnkh4em6l6c03t5r","to_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","amount":"16000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4kQXATiBQJjQP35IaLO3MF7Lbey8avAympagq8xfo6A"},"signature":"NbHuFtw+NmnzXjFQRWrEBklspKNTvkqidQcE2fGRKbk0EMqbB8d8n6ozl2Qkcacqy2YB4KHl84jfUmSvOkIv8g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ckddn039khwxzu4v5mc8n34vd9ksaks2l6c3kg","amount":"10000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"m6U5iTdJbv+v/cAsgsyiM7jlw/RyWK4GpOgRPCT3I9Vmcgvik4rd1y2VMmVLOAMwSGtfughuXbjFJkUlwE4/CQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"2204999995ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"0J3XMGKrORjaH5n/Lm3aWI+cxxOrqIwLMhtR008f6e1ZSxqHtdzV8VeczGkM/OirWRR0BRc9QtuaZFZ0ym99/Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1nuphu4p06dlgx2se0w58z5c7yv00r5gl5qlud8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ZFDyfWHcoR761faNQDzASXs6J6VC4zaEZ/axpSs32MVLMsciN4vGAOuBzWa2+sddCfgW2hVG6BzyKpB1x+KV5Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nuphu4p06dlgx2se0w58z5c7yv00r5gl5qlud8","send":"200000000ugnot","pkg_path":"gno.land/r/users","func":"Register","args":["","dimokus",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/C4QpPm2Ap4ce9eermKTUPeGI6WPHmiiIk9U1JBFq7O"},"signature":"bq/QAP84xwb2WVxgWDmHAiLVsBqDB7GEWIMeQBt5XFQDCZ/Iq2/dTY1upQVyNNN04GA6wMhj1BADzgVU7UYCbQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nuphu4p06dlgx2se0w58z5c7yv00r5gl5qlud8","send":"200000000ugnot","pkg_path":"gno.land/r/users","func":"Register","args":["","dimokus",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/C4QpPm2Ap4ce9eermKTUPeGI6WPHmiiIk9U1JBFq7O"},"signature":"a6huPE4hG6X5U8QdZw1C9Ru+FnIBnGGeuKG67x//+fMOrTICMjGPPKwyPdxC3Byz6K0WelabQVz5GSjduW/dyw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1kknmnakrffnwquq3nsacrmz0kq7ywhgw3mwgdq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"mAWFevDcAp/BFWY0gw11u54O2mZXWZ8dTP0X4mFPGWExAjJMJP+wQOteSzGFJhuX50tf0cN0Jnkq2XV4BQkStQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kknmnakrffnwquq3nsacrmz0kq7ywhgw3mwgdq","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","abscrp",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ahp9Avx84UfOxjlGi6Smz0/78NTrNG9KeIp1cKbIEBRj"},"signature":"VO4fOVD/x1MU/ya0lAuEowdNPfnbn1Fqv16yHY4p0QB45BR4fSFgi8qRSUyYDjGYEE0SzYyjicsFvGNCgz6QdA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lsngngdxkpl2pcahrjz6yv20zf9tpdchjykypv","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"57IJV4d+WgenSiJvfyL2AOD+wbJW8kpQVIvC9gxFbusTyuhH6NuqEWD5bCPTLjr5QDoYaMUauzAr1cbBmTDo1w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lsngngdxkpl2pcahrjz6yv20zf9tpdchjykypv","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","gnoboss",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ar/sVfhUELN6/e0OWVMmOKn3z8UYTyopLbyP2Yq/2Oh4"},"signature":"w1CcsxAJit7l7s9RyQ2hwhW0tHR4U5idAs/6o4CWWz98UL3m1QFCc9KZrLWBM0FTRofrxDVoW5jRWGa0SlvAAw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"5000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"rfEQWvD2aEXZsYyJ7JFxRMP0CWbMKdg+6RNULtZTMLwz3Yi+cNwOYGM5XYh10Gexj9rbpC3jI6s3vv0TyZx8ww=="}],"memo":"12313"}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","to_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"rB5oRjfyvVsKfzbPzLF/IbNM4/71D5WDSswUnUiynWo5VGcfvH3leZ5UWYY4DcdnQSnt/RqmsMXguQeyhGmeqg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fnakf9vrd6uqn8qdmp88yam4p0ngy572answ9f","to_address":"g155yszn2ehgxzf9kcr9g45j2jfzjfj6envpec55","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3cWVULHSHC1mwK8o1vfJHKfNMvLEvKU/sHPQoFWRoey"},"signature":"GICTn1IPVIo45Fn2/2GWfUDO3shDOjWXSlRIcPRVj+sm+0Sn+ksySbgFsfAkCoXgbl9G51LbblxRObX1GS+iqw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fnakf9vrd6uqn8qdmp88yam4p0ngy572answ9f","to_address":"g1du72ftz4wy9730w2dhezcgaaujzk2yzljyzf72","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3cWVULHSHC1mwK8o1vfJHKfNMvLEvKU/sHPQoFWRoey"},"signature":"PNZVg7/0wYUhx7ANIEACQ7n7cPpvOkCL6bz1zuYHd2hak7Bu2LKZCrq9KkDjvQ2NEmT8/UXi/AjW9dAeBP0ROQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","amount":"11000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"AaxLjW46fTt1817CNTxs35tN0LcpWV2dr4VaXDHaP+lH7WIkhbkTfCyeciMQwSRhXueFK9Dq06XNUSIKZPayng=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","aagggg","HI"]},{"@type":"/vm.m_call","caller":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","aaa111","Hello"]},{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"Dex8WvjTpDQweWgL6S0OkR4tT87zCMN8zOcoRzABuOtRnp9ZWsYc5PSjy6se++obK8Qs+YC51rc/MlrzQ+PDPw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","aagggg","HI"]},{"@type":"/vm.m_call","caller":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","aaa111","Hello"]},{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"qTMK++O1Ud89jVMPet+CfleHUjeqUcwgisnxS1MfN0Yw0jXFCHMN4B+4uLXUv3sYGFHhLL3adEatd2pYH1wSFg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xsfcws0hnu6c4styqpf60nx96z6xauta67ttnr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"/2B9XHI364Mnye0mLH1HAU4OpAgunRhWvoNycy2juDRexs3DlKZqXpA+eCdqhWFwMNgOF1vWHjeoAyf0G8zdhQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xsfcws0hnu6c4styqpf60nx96z6xauta67ttnr","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","CryptoB3","CryptoB3"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1jG7JWI6CquI1eqIqkQbdKH9EFdWu35FBOQ9quGA8/Q"},"signature":"HKYFoJZdr6bhsEUGgg9TmTepDwCODERAy3B/DO+TyaNUzVStKxKJj5AckAwZyzKQdrzl6aH9QCNPtjeJuZjZJA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1sewqnjv9a3mq5hzjmgu86puztsrrhqnc89wunp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"QCjOm6UMnTsmlJyQ/6qFbKRLyV52YOTLGOCAbSdHAacr2xKrlKR+oyfTuduXkthztY1LAoj+DVDlf/2DTp0Bag=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1waumye2guvylnkg2nh499fm0gdle3h8pm32mvt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"tKBzKl34MKre+0nz/nIYpAQHB1kcB/QIDnOcym8VzTxSGCa1sRtQQ/Lfjq8BSafSqCtQNCdPObOfO02vxPvxLg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1a370nfhqsxl8madzln2f3erm70jjhtvqefnasx","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"sAPkpZvEjI9CuEkhQGenAu0a5WTrh/KlEuJbv5dYP25r1iUKFypuED0xWCkUFqpQCui7eCaY0gAdj3hxG/4hgQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vqkk20zykll5htvr8532ap8tdhlj2xa96nrw3k","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"/ptQETFmQI916g7/FIPXyW9sjmWGdXR9Xnsn5uLcjY5Q3n1K3Yz1Dwse5QIvVZ8I2Zgr+JUiJCZBuU8fAk0PUg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gkq0skvtxjkw4srqzy9k0p6d6uapvdaj7t9yyv","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"YtzbmqYHmvRwBBsF0A1aWxZjS0fqhlt3o4GqTfA3H/c641hBnah+CHJalBtuHolfnAcWYrOr/m/zcWzQcB5lrw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1k47aefa77r80reff53ga5eu43zx6haffxrfaed","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"2X+GFVdDedqpNURfCB5IDkoiwv4h4GapnFtGHo+YSilaP1D405cqGd7qEGjhyYOzgjAeVb5myn+wbZU9HIXTxA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fr00ewzxvaahp5hkcxgzqsamws99tn2cplsvuu","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"+L24TLGwSAd+EH2ZX3EoXRBdKHkU02OK7QAkTvhucwA479ncSHhhb4gTvLTA8ihBkFOeCu3WGK1CU/foYHKkyw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1j4h8uu5yxsytej69ddtg2y3s4d35xu0yy75sy7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"/MHKu1r/sTufdLY3STBos6E0Cok47uibG4xD8N32Eu0aU/eGhJ95u71ZmCZ9dy1WcgYzuthxuf9eVMsFmA0eIw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g184uu0l5rn5zm9tq8l5nrveurt0t6uth0emprck","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"EGX54XJ0hHqbt3WF3zSVgufrlIcbj+VVpQJvbcuki8okcYq0fC3JV4YenGCjhwPwNUi4kE+GE1A6kQDAD4BDqA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1paldsfdrvpj302j7g0z996m27wmj3untp2nkyd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"A5W5+fKP0GgTfP3+5Eoy23At3WiyeD1sHzNPmvNGpUdYOD4inKpUqY7tJaYUBOawP7jKmQgiktE5htmlIgrwdQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g173v5nlxfuj4nqlhg4q5yfjr903rtg08s4xdnda","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"NarEED6GQLP2AAbmBry7spUj2b5Oy4bnyeSg7Fpl7aovHL3fPnVS3bZ1fUg4LyQg9J5DwsUSCF7Pa3eWsJlG+g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1sewqnjv9a3mq5hzjmgu86puztsrrhqnc89wunp","to_address":"g173v5nlxfuj4nqlhg4q5yfjr903rtg08s4xdnda","amount":"10000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5bAKjfM+2BMbNnq8PNKlsFjM+HBwkShFWxcGiJtEV+N"},"signature":"40wZGcktk59BqvkSePSF9tvaOfcRgswnJoSDjKp+gTxbMwARz0SklxsbP/7QL56cc+Mf0HOw3OqiOtAotTuYPg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1waumye2guvylnkg2nh499fm0gdle3h8pm32mvt","to_address":"g173v5nlxfuj4nqlhg4q5yfjr903rtg08s4xdnda","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/NHpZujuQ8tvJW/9P/sfPfoUDVbafg+x/OcKhXh+B+R"},"signature":"fjgj2VxTHDVYdpnpyoCRaaCOP5VuGuZXM4I8sOvuuxEfl0lCB0wiEFcfXzJnGcOXI71lbw2vB1dEf0tVgBrLmQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1a370nfhqsxl8madzln2f3erm70jjhtvqefnasx","to_address":"g173v5nlxfuj4nqlhg4q5yfjr903rtg08s4xdnda","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/A7pusQpksmju06Jc20D7m22SUNgUQ185Fjg6GorGi/"},"signature":"AhAFbegjwaz5EfXYeoZ93a9hIGkBXeGLAZHB487RlLt+IXYN6YjdnkmG0VgbBuJHYOKbupTId5xPzbBiXMY2nw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1vqkk20zykll5htvr8532ap8tdhlj2xa96nrw3k","to_address":"g173v5nlxfuj4nqlhg4q5yfjr903rtg08s4xdnda","amount":"1100000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An7n+zkbo3p9uhRJfiXxLfCgH7F/PPKrl8dYZzB5y2jH"},"signature":"V6vHIZZMbzGGUfC4JHF+oWtLFMge5q6wSe4NhdWHs+VmsGxzS7K0S698UCZwQUJ8/2H9Ngf7aARww/qezJ9/Wg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1gkq0skvtxjkw4srqzy9k0p6d6uapvdaj7t9yyv","to_address":"g173v5nlxfuj4nqlhg4q5yfjr903rtg08s4xdnda","amount":"1200000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtX1nllpR7CUh8tyjFx5nVahmpp3ihd2TC4/zrO9QMOU"},"signature":"5GSPHz8oIyUnsXoyJHPc06qZ0O7uzZ4nhuT7CEDPLzJvIIDtbYo8M9ZCL0vKmnEQPNhv1hZ5GclDX1Htm047PA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1paldsfdrvpj302j7g0z996m27wmj3untp2nkyd","to_address":"g173v5nlxfuj4nqlhg4q5yfjr903rtg08s4xdnda","amount":"1500000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ainnx4/sx9aA+ToPLXe6F6el67v20ZKyE9dLLng+OJXg"},"signature":"J2M4gN0nRT3IdzQgIlkQRoCcd5njGBQU8dvEyGlWQRBgIWvc6tjDo/R3dAGBo+KpUhHlhCfX7E2vQytcgFRUug=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fr00ewzxvaahp5hkcxgzqsamws99tn2cplsvuu","to_address":"g173v5nlxfuj4nqlhg4q5yfjr903rtg08s4xdnda","amount":"2000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6NzY0WBFA+rhMzcKIIsR7e0P8jFM/ZgfR9EvYaHuxEa"},"signature":"f6E0/Q5iC9h6OeSTMgrrPzVegoh3DWv2Vjq+2KmBoT5Hb+ofV0wYeIXvrybCl5qurOHNeOGnEDqN5phfJTL+Tw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1k47aefa77r80reff53ga5eu43zx6haffxrfaed","to_address":"g173v5nlxfuj4nqlhg4q5yfjr903rtg08s4xdnda","amount":"3000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9zRS0npCp/iUAQa8zKF6R9dKB92AYJoM+89y9Yr+qYm"},"signature":"z56q0MTk1dY8KELb3HKwnWUnHAlCuviUoTbGfDG+BT0wpw7EF6o1vG+ZDt+vYtmn+42UbYRE8w08DZ89GZIRQA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g184uu0l5rn5zm9tq8l5nrveurt0t6uth0emprck","to_address":"g184uu0l5rn5zm9tq8l5nrveurt0t6uth0emprck","amount":"2000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3d14g+GrP6gxEkbRwN2qSMJ7rDQ0WEWY7QljD4I3+4p"},"signature":"2eC28KtXSLmTy2Sim6D1OLdLQ6pLbhDkpv2GlGFLz9AzRGA70iOTpFeMNOQ2eqembf8PNCEqEUH17Ez6RG0Svw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g173v5nlxfuj4nqlhg4q5yfjr903rtg08s4xdnda","to_address":"g1waumye2guvylnkg2nh499fm0gdle3h8pm32mvt","amount":"3000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArxiGX+CGNG9BjKd7bYt/x5Ay9Y1fm5Y5EzNFzbhUdfX"},"signature":"LFzSRvg0GtYlTOAfR2TzrpCTY5IyabRYXDmSB8t/sXlJii2xPNf+1Zv5eZl20BTsDd7bn9br6+UZ85G7mgq02w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1waumye2guvylnkg2nh499fm0gdle3h8pm32mvt","to_address":"g1sewqnjv9a3mq5hzjmgu86puztsrrhqnc89wunp","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/NHpZujuQ8tvJW/9P/sfPfoUDVbafg+x/OcKhXh+B+R"},"signature":"ICa4RJFOgzGaQgdxhbV0L/OM/HsFHFrnl7inBW03tiZhsAZURTfpWXTZFRhBQUkqOAYIFz1+NELtJo2NNCRO6A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1d8w8xvauv8qcnm34cxghgch9s7cud2c66ctl6u","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"wUn0QTeOaUD1d+Bex0pAzRwBtHAUCfosy9pV4cXjVKhv4EHCbv5gnK10Hsa+//JAkYYsvDGTv2LtybgBmqaTNA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g10c3s98rnnkhcsdkfked6l4u6wlzqwe2t5l5g54","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"uYrghqiobZJFyxivz7RSOddGlHdhxtrmyiecgxeAmpRE4O8B1QhuzXfu/g+13I6jARNblAjFhKk/gdEgnxUPfQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1cd6lymlg89h4xcfuwvlcnx4ugemdv9qztghptq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"64uEVzaleVL/KDmCj1RWBCibqaKKXX3dB3BljdyDDxwIN/35SpWRa/pqIZFD52UCjSX9ICyo4JQUMUXfnfu48w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rlrdptjh86sqtp04vdx94kyp63s2udc932csvt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"jhhy2Im2ASoTyPlw2zmvd7iMT1Mk0yV6hujtyb+HZFFzSh6eSH/Xb2I08ymom0EjFo5QsNjFAz1mbECoCQFEwg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vqx6e4eh9t7ld9urwyyup2vfg80f92gj37wde7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"IUul/xY5PXlKPExWaha11uxW7SVf2xGnmzE/MoczilNSUTZv2/cNOkpgpXoOSAsdyD3yW8KB/a50a0a9R4QIkg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1cvuklmj68237qk3pktr2xsg36qseke7mq3694h","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ept4HyQfq1N947VmdSMUyYwzI63/fFdBN7gwD+QsuPhi6Tbgl+XhIkAG5aMXSd+lk3EGvDNTI7UZ/SG9JnaAAA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16sczqvr2cu47j0cz8hdm40mfga3nzuzmyds00e","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"6VJtfQVA9LE/iBjJvD6o18rDtlbIvshXWdmLb+gv2lsRoX5uLOe3c1A01BwMkJJzxfCnDtlpe6hTCmfNppFFuA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16qfve7w3jmvr4jxk4uzutvyqqmktet8jltee6g","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"nBrsaTxSeBrwt/FW4cQLrTKjd7JsPz7N2BQUqTtGVv8uj9ntf0sNUdxfsMOnjvQRgj+NFAU8SAfolb/8t9bLSw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g10r7gytst9dsst8hx56sa8432emc5nhfpwap8rm","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"NkV49n5qrXbBqAs4eyCdL1iR3ErGyYoNGNzY+gx8L7clWe1n+dexT1op2j5rhd3fmF7ZZpSOkiwPQnYjHsYSdg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1maxyt2laglhrs7lda98myrz8hfysampt73vemg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"slK6Zo9X+Mf6HSHV6KK6aSpGqWBMfOGBxwmD0BIM+lARh0jsGVeLkQ8K5JetiymINQFXrP5wYY0GJgv9v3GvCg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17qry5pyxhzzsj9jjweshsrz6fpr8r4ejc9nsqv","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"5Umwr+e1oOvtL7gX7PVfmiFTys+T32tKIAkB7ZyERVJgG88e+fNVrn4xlPLtKMa3205e1ukoVm7IyeSO+R+3+A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1qnyl3kp9lszmggyvs5khsgwewpa9yjq83758lg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"laH1qQsQ4x2wUL3lfmAauzaE//4MFBtGdJqufuN8aEM9W5ZIrGpYAxpTBehiywi5islpq/7L5ooO6uLcu1b6NQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1egz3nkpljyzkjgl0jswrfk6pajszhtqd7xvxst","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"sCUXHzr9YFTe+y4GGP+XAe4liZpoKqNzjTbiJezEP5UePNDZRPcKyPyloKqodS/5oL8N8wJmYCH6huYqpdoThQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1egd9x0anknngvxu5da5ww7tjjx352zpfstgh65","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"4dQoasM9pFl88G7MyogdahK+slEHFhIz6zzXGFDYjfANqe5DrSkab/dah6bWBCEvgCbJJxIdvFYmCZ5uu+Vj+g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g143ck5lywwrgk6v00l03y0zstulm7wavezdzd3q","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"fXfVVrRTyh+ZRHKzjOZnRtQqOmC5zJeJcA+PYotuv0hCmZBhhvBX8TUsRro8SBFGNasWJ1gPO7o3BaLABL8+0g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1sdwessgwza30nj77pn946wnd82lkp3z7hxjvfd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"MRDftlO+PrGlettXgmSIqO4EkcNPRdQxYKaL0YLwrptRdHer3zOzQKzQKQ670t3cXWhHCnY4+iSKXRo7udpc7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rseh2akqlgw5f9q0hu8zjmzv6mwmmsgvuh4y84","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"MsQ8YZ+bwgKvsFNMShYVoWbhyETNn6Ru22Epb4dYjPkauDzUcQYeAR0CuWVeVWcrQivOAeoXEYfjvRfVJZJoaA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1w8gg8j30pcuaeh96yn74ups5ac5yql8j66eauh","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"syW4ijvmOPbd/uT6l3gLQ3D2Bxsiq637jsgzzQNO5ylXN/k9/y9Gj/qI8TM+dUaapiHQJliYtPJ6sY+ieZAGJw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1h7y0cavm8acd8dlx8x6k0jma28cmpt30x33sws","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"bWH5EU8VJF474qM8/9xdPA0Wla6uKDJC6PFgZG7fs/sK0oOky7wUx0aTM2iTqOgigz+lQ+8KmAixOHuaI5KT2g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1mz6ls6a5qh3sm68e4em94ww9efq0lprknv0usa","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"hkCh3UzP3Zp9mhyODb3ou9gZjtTFGgoNez63PzrGbFIZ0Dn+UxazOuC7Ntuv4Pug09Dwf7U57W/uJd2LTUVqxA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1sewqnjv9a3mq5hzjmgu86puztsrrhqnc89wunp","to_address":"g1xgalv50t62q7sthksps9x8pexp84jwvm725aq7","amount":"3000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5bAKjfM+2BMbNnq8PNKlsFjM+HBwkShFWxcGiJtEV+N"},"signature":"lc7faH/ebJWOYnikeGkK/y4Zf3aaZKvu4BtdYvdf5s9cfz8gcH/OpphSnv+yvdDmcBVrWiubAvHZpktX+FMGEA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1waumye2guvylnkg2nh499fm0gdle3h8pm32mvt","to_address":"g1xgalv50t62q7sthksps9x8pexp84jwvm725aq7","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/NHpZujuQ8tvJW/9P/sfPfoUDVbafg+x/OcKhXh+B+R"},"signature":"fWWgwK/nGf70ipFPb3EUzjft6KBOYCvWBzCIkHxmHQEPFoFrZ8bIN1ueC2doeQGPYxvNBus2UWeX9Rf90tdBoQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1a370nfhqsxl8madzln2f3erm70jjhtvqefnasx","to_address":"g1xgalv50t62q7sthksps9x8pexp84jwvm725aq7","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/A7pusQpksmju06Jc20D7m22SUNgUQ185Fjg6GorGi/"},"signature":"JQgAtZUtpFafQZCIvYAvFKO6Rai4j989SodNAvjMZzE/PkalDBDj4Jd/c462y/nVLkKO5amojsF76W6qHdMHqg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1vqkk20zykll5htvr8532ap8tdhlj2xa96nrw3k","to_address":"g1xgalv50t62q7sthksps9x8pexp84jwvm725aq7","amount":"2000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An7n+zkbo3p9uhRJfiXxLfCgH7F/PPKrl8dYZzB5y2jH"},"signature":"iMX2ugoaXwprnzFr84iAcIeiQGU6TvJsEYec26ZBYJ58nUeT7OMYPP0a5MHwN8gffNJq/NVBtp7xU9xE+gtE+A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1gkq0skvtxjkw4srqzy9k0p6d6uapvdaj7t9yyv","to_address":"g1xgalv50t62q7sthksps9x8pexp84jwvm725aq7","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtX1nllpR7CUh8tyjFx5nVahmpp3ihd2TC4/zrO9QMOU"},"signature":"5FmB8wNH0inoNAUvxyccut4sppsLBpeeNGZRR49dj4ITs88ByC1weeGtqeVpsu1LhshFbFkZT9PJYhk4wOTdbg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1paldsfdrvpj302j7g0z996m27wmj3untp2nkyd","to_address":"g1xgalv50t62q7sthksps9x8pexp84jwvm725aq7","amount":"2000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ainnx4/sx9aA+ToPLXe6F6el67v20ZKyE9dLLng+OJXg"},"signature":"ZDKojz7mMxs8n+vLUndEYGLzNEWdCL6a7Bfjdb60JjBIUu60TDMWamRJi15grhx+DwoKS+4W/tlcIGLi2n8P9Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g184uu0l5rn5zm9tq8l5nrveurt0t6uth0emprck","to_address":"g1xgalv50t62q7sthksps9x8pexp84jwvm725aq7","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3d14g+GrP6gxEkbRwN2qSMJ7rDQ0WEWY7QljD4I3+4p"},"signature":"Mb4u5YfmC7LBbz4jQW2wNVS4krA5k8Hv1yIaFtlGOylb82J0Uu4gAzkHL0M6MfVWEZJc+7DcDqeWj8AI5Sh/yA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1j4h8uu5yxsytej69ddtg2y3s4d35xu0yy75sy7","to_address":"g1xgalv50t62q7sthksps9x8pexp84jwvm725aq7","amount":"3000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aqk+mJAzxcwuCpSNooQ8c43bd2UGK8xSmWCzXl/voJFr"},"signature":"eG62b52eOds6upnzlvTVmT7OsJKlTxZiU/7uw5q0O9ZZ2qeWZEgV/xWhaUu8HGthe0arJXVd27eiRgvNpZ/KIg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fr00ewzxvaahp5hkcxgzqsamws99tn2cplsvuu","to_address":"g1xgalv50t62q7sthksps9x8pexp84jwvm725aq7","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6NzY0WBFA+rhMzcKIIsR7e0P8jFM/ZgfR9EvYaHuxEa"},"signature":"kxO7d3486lY8zck7UztOGUvgNIxBbx/ElNCAxOqw31dpskEebMs9V/XRlc59kg41lP08OJ37THuswWfSeJNSMw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1k47aefa77r80reff53ga5eu43zx6haffxrfaed","to_address":"g1xgalv50t62q7sthksps9x8pexp84jwvm725aq7","amount":"3000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9zRS0npCp/iUAQa8zKF6R9dKB92AYJoM+89y9Yr+qYm"},"signature":"1lCh7/Sr9yS5XIdwY67ieRUM0u0DTepAivklSB0cI4YS+i4GzyYeat9Q/jsw8k3WPcK1lQ4DoEANZJf2X5JZSQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g173v5nlxfuj4nqlhg4q5yfjr903rtg08s4xdnda","to_address":"g1xgalv50t62q7sthksps9x8pexp84jwvm725aq7","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArxiGX+CGNG9BjKd7bYt/x5Ay9Y1fm5Y5EzNFzbhUdfX"},"signature":"NcnQGVJ0VQq8eDYd3Yarulna7cvc5jB62v6Qbs5lOPBNLQ76JWx5vtQ4gvGgvNEMaepvH1JlWHHFSdkACgOB3g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1sd4p3agtufqg5vcqcdrjuwxwpuclzevhaffyh8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"E+B7IJMvO+o0n9qGuwsTKaxpxwByVTAfhGantl4sQUxQnC2O+k9E9CS3mEN0qy5Ezf6gJvM7ftcv5bLBJcwKTQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1sd4p3agtufqg5vcqcdrjuwxwpuclzevhaffyh8","to_address":"g1sc6dax0wlaw6g6za5u6ra3j0av7gaqmrxpczfc","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoirYh0jM2Fik505I3URDQg6eo3Bx1hGw9oj1MGVfyEL"},"signature":"1tYPyv+IKyuROw4YQBiNpMRJuAOMqHvdL/PCA3Cga31Ug1IxT/OPMTIEwoTblTzDm6lVaatkIIod2/oyjPoiEw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fs3xh506433e56yxm4c7cxp7fqen74erd0gwl3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"KMjljNQseJlu8yjYKKlNq4kyeYdLD41uFEpIRxA56ccF/q92x9ml1I7o33C7eWoVcyrCfA9tNEw4CZ4CbnXadg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fs3xh506433e56yxm4c7cxp7fqen74erd0gwl3","to_address":"g1sc6dax0wlaw6g6za5u6ra3j0av7gaqmrxpczfc","amount":"5000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8HZtlDgap4bU0AXqmL+EWKPzWl1PAhr+7k0OIW/2UJw"},"signature":"JRJLLfitumOuokqECDQDdEZhjCRM5BNOfCcHgHjE3qdrKk9QI/81WQdd0Suh0AxixO51LNn0/S3pH+FGPV8jow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g194kf8pk7sr87zhjc8tyzfh6j0g8337k5gy8djm","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Hym8fQgu7fd+xkLqrMxR86Oa3lgo+uAhwM0fVwNBpUM7SO2d0jTGHwGROD8YSjFbyV9h79XNgeQictLs2rbHFA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g194kf8pk7sr87zhjc8tyzfh6j0g8337k5gy8djm","to_address":"g1r8qqu2a905l68gjppunjwdv9ppr0rj8eclwzaz","amount":"6000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzkRM5r7LKV3hZAToG4Kq/SztJx4DGeiw7uJxD49FKXV"},"signature":"MORP94L4YTT/layYoNKhJ2B2g6DMfobZJaJbDborF7RUQ1J6IPnsfEV+9yrsRFf2uWHWOwpC2/qz5S+5tqQ/Bg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1j92ur665jxnr3z36q9dsqaw26zcwgaanckw494","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"xiqKdOmafWk40IFZgVqilk5rl32rRc2SUOtuf/MjrFdi+j3wJg1QvjGHv/gakYLDR+ceQOjaONnxvnbMegHSOw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1j92ur665jxnr3z36q9dsqaw26zcwgaanckw494","to_address":"g1r8qqu2a905l68gjppunjwdv9ppr0rj8eclwzaz","amount":"5000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Az5u7d/4bCAA5v7DqRCu71gszD/gsXUH4xNlfw4GvLb5"},"signature":"u8yZ+49W8g7urzR4B/ROYtN/TO7jq1TfKVYpx4BYy2weDl7kWKt0IP9T0o+SiSEw1SZ1N33SPn1THtuWm/lHiw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19e76u28jefm3a85yj5lsgwfk4ygdx8sxlxefxe","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"7Ks/sdK4aAxYIuSfU6pa99V3MW19Z1RHcFonDVQsW+QlPfVJmyC0q7ww17xVto62Mc4KCfzwSuCPf20TkB4pQA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19e76u28jefm3a85yj5lsgwfk4ygdx8sxlxefxe","to_address":"g1r8qqu2a905l68gjppunjwdv9ppr0rj8eclwzaz","amount":"45000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A48vSDWBNLYfZKXYF0IP9aZiwMsaSkm9TJsBLZfX9gzM"},"signature":"2ZVhpsaFiiB+EcZfl7Q21rzgqa53Ufs/LiLUCybk5Joye4zs7Co3+xXkf14/16e1i/z92cVs9uGTmJV8DTibEQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1d8w8xvauv8qcnm34cxghgch9s7cud2c66ctl6u","to_address":"g1r8qqu2a905l68gjppunjwdv9ppr0rj8eclwzaz","amount":"12000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AinERVHn9viLVLxpniNI4QCZrZOwt8BpsFivdz/owzxb"},"signature":"1crsxacYncTlgqKvBGnYZ05B1T8E3ueHp8fqMH1TpRFL6A2ZQU3w1EsGZLQG9+4NxAh7yP/7XSxLH2TQKexw9A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g10c3s98rnnkhcsdkfked6l4u6wlzqwe2t5l5g54","to_address":"g1r8qqu2a905l68gjppunjwdv9ppr0rj8eclwzaz","amount":"2000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6RAiLVsTQFYnQS4BKQAvCQQtWrYD1+YOQAIkwtYW0TV"},"signature":"t7ntI+Rq0G0Ka5yqVIk+qLIGsxk5Lx76aTVfRRVvJx0NC/X/0YXCXo8tebPQGahB5vaFVN0rMWvP2vWW1bGfYg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1cd6lymlg89h4xcfuwvlcnx4ugemdv9qztghptq","to_address":"g1r8qqu2a905l68gjppunjwdv9ppr0rj8eclwzaz","amount":"6000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5d8GC9MejHMZld6AdyUR9xytCrzjdYtseWAzaiuscbp"},"signature":"TQ83+5qtvwEl2UmK9DTtEUGRce1sEu5ZVgHyiEJMpiV5kf/hFbhe0525LACO0ktJsDcKSreJowLJrP6rYMSiBA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rx5zwdxvkj3zwsaft0vrh83ssjcgcrfqkgslxu","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"SeMbpBbw0jgINAYjSHCwZ9D/KrX8/M6zunMPBXkx9DsSplfIffXnRSli2sMSoefDiwRe7y3Zxet7ZKaVfQkxmA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1rx5zwdxvkj3zwsaft0vrh83ssjcgcrfqkgslxu","to_address":"g1htsk0fql3zyspfk52nlt2rn55a9k7u0fenw7we","amount":"3000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A29D3Bsj+q+I9nLoZyvfh4glHYrFL+3qDuzgBHiedk93"},"signature":"/TAak26TlB3p8Ruiv/sR0V9b4IhCszeoZG/1skUccF4PjwGe22k2VM3CkkS062Pxvon/eGaDBWeW3yXoy+XQUg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1rlrdptjh86sqtp04vdx94kyp63s2udc932csvt","to_address":"g1htsk0fql3zyspfk52nlt2rn55a9k7u0fenw7we","amount":"3000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5v+yQUDDeCHpucXaQ4O9EFWyV8sV5NH3TKZq3Fv+d6C"},"signature":"cGN84Gbk7PvNRwIwq2mMWYpBCgNy1sRl0jB3AeA+OUpiA7HDALWZpH5v4vJ7yalVFIe1IxuwpYYDqopnhZpx3Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1vqx6e4eh9t7ld9urwyyup2vfg80f92gj37wde7","to_address":"g1htsk0fql3zyspfk52nlt2rn55a9k7u0fenw7we","amount":"6000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqbCqpFrT392tI1oyXl0hH3u9+bqD+9tgFJzHa3CCyoW"},"signature":"Sh/DCMObH8MMbOupGyZ4bT82mdz+I0956rLae3Lated+lFTKqMT+R+S3L+S+GrD0QNrP1GZEE4vg2ygTnh3LUw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1j35yqpjwgr8gvllyu8657stf5wk825c5xc0cdp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"/oeqNcrEgDRM08wasC4a6SdDqmuGpAd/F73Uo2js5YMZdysw3Wo+K9nm53hHLkXvXUlR09iHCc00N7z9mCEgqg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1j35yqpjwgr8gvllyu8657stf5wk825c5xc0cdp","to_address":"g1sl8cy6c7ppk3knpw39ge2wtt2kurzvl7dex4u3","amount":"5000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As8H0UNczyGtIZsVLem7OXzlMs1ezPZnX7fqI/ZjuqtD"},"signature":"yIBl0rEKFt3cB750JuBSvxWsB9+d0dGAGiKJLtg4rKNk3YiNRJIhbDAkOADp/XmyJBKWxOYID2o8vesq/J/FPg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1cvuklmj68237qk3pktr2xsg36qseke7mq3694h","to_address":"g1sl8cy6c7ppk3knpw39ge2wtt2kurzvl7dex4u3","amount":"5000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2+aLxbjJWZd5xcYz8wcoTmFn9gMMUXhNOdBy9p8wAEp"},"signature":"qMcmGuPD6VsDKLCLdaTamd4imGbPSUCInXfAeZMzfaYzvAAS/sx5o/2ZGLS29PL2iLgomZ+Uc33dctTzygoMFQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g16qfve7w3jmvr4jxk4uzutvyqqmktet8jltee6g","to_address":"g1sl8cy6c7ppk3knpw39ge2wtt2kurzvl7dex4u3","amount":"6000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5NZfx5gw3LUH39bBnamg2Aup8cQxerbJHVxuHhPUM3H"},"signature":"LZ5IPx7irb/3Px9FnsrqX/7JN+mS3sXbojMHLRCtXI0GpGGvO8lxVQgtxOU/VOGQ38Tx8AMt7ftMOF7wPq9n+A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g16sczqvr2cu47j0cz8hdm40mfga3nzuzmyds00e","to_address":"g1sl8cy6c7ppk3knpw39ge2wtt2kurzvl7dex4u3","amount":"8000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5aOmFKSoQdcUd4lCSnmM3vIViWw1qeYrdvF8WnOn3M6"},"signature":"T04W1EligNYTAo2YV+H0EqP5LvIMwR6RVFCCmRvV5moR9NacbfGDCWo40m+xqa409H7A8fefvHYlJ9US44J/0w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g10r7gytst9dsst8hx56sa8432emc5nhfpwap8rm","to_address":"g1sl8cy6c7ppk3knpw39ge2wtt2kurzvl7dex4u3","amount":"8000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9g1Y5tgRNvc5K8Z+HoL5PDGaxmjKlz+Jof6XB+jkEmH"},"signature":"6Gb8E1L22hWCkPb+s0zdHyd8pMBcJEPMKTpEkmnhHzNT+p5rSh6fJCfivdBmr1nBVktjFaypo+2eBGurv1At1w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g187vvwtkp263s6mpzwwuxawkklq42a0jk8ng5rl","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"CxbwwMC5dso4NLLX8H2YVQVk0ydWDZEQ7/9rWwLqBmEvVArIJKxD/L2O0D8u3UFu+lMRCxqKcKmPRWAOggrHkA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g187vvwtkp263s6mpzwwuxawkklq42a0jk8ng5rl","to_address":"g1sl8cy6c7ppk3knpw39ge2wtt2kurzvl7dex4u3","amount":"6000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag9xxXi1pdmyrAJLyI8jCP+ZVNsNSqPr4CZSBZ/Umzh7"},"signature":"dD3u11oowQgNGXDNKtfpkB6b5QpWRSdpxQYuJkC7E9p5wKp6SPOyAXJRgEplKRz2eYOGvrxM5rjgXBKyCaJoxg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1maxyt2laglhrs7lda98myrz8hfysampt73vemg","to_address":"g1sl8cy6c7ppk3knpw39ge2wtt2kurzvl7dex4u3","amount":"10000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9+0SKaih6R7nxjF6S4/ES1V4QhqxMR6lF9VkhZae4/N"},"signature":"LEGdbsFP20WrVCiPfyWJotw2sSKbNCJVMa5xLuXai6AqHePQQWWeGVQB8IiWJiq1nyMyn8cA2hAB2IkUtq5qgw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g17qry5pyxhzzsj9jjweshsrz6fpr8r4ejc9nsqv","to_address":"g1sl8cy6c7ppk3knpw39ge2wtt2kurzvl7dex4u3","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwcMBUOGns/NBZ8rZcVPsgkJnrI2Tm3X7AUKTJb1u2IL"},"signature":"MRzN/nEkoR3xD6USaL44+mmVE2zRAPIHxDYlkm7OnXJUxFlS2Wo8t4E3Rjy6+0A///vHxtA+mlNC+Xtq8nWv2Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qnyl3kp9lszmggyvs5khsgwewpa9yjq83758lg","to_address":"g1sl8cy6c7ppk3knpw39ge2wtt2kurzvl7dex4u3","amount":"6000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay9bAHtk5ghyvyxnQc6cGvBQXFdXNCHFDNDtAyxsDXYV"},"signature":"vR7Q+ywfBl11As6NsqQanFnsfp1mKUulxW5Ubod/9QA4Klcj/TlEYDnb/zpkXcLLugSmZCeIxkKrAa/xrgLsZg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1egz3nkpljyzkjgl0jswrfk6pajszhtqd7xvxst","to_address":"g1sl8cy6c7ppk3knpw39ge2wtt2kurzvl7dex4u3","amount":"9000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8khydqcFV2FDPU06CfHHHV8i1DZo1N47IvHkwbSptt1"},"signature":"2kfoQO411GD7Ir1I5CJNvkzVccwYbbMq572KMQ2I4h5XlTnEeAGMIC9E1uHyV4WxLS0to51vGldtyqJzrUNBbQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1egd9x0anknngvxu5da5ww7tjjx352zpfstgh65","to_address":"g1sl8cy6c7ppk3knpw39ge2wtt2kurzvl7dex4u3","amount":"10000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Apy1vSL1mGbg8SOLGCnwJEFUu5PAwmTddudhZ8XmsHww"},"signature":"ZGQdi3Dvt2hA1dhS21Dp0DN0I1cm5m2VHbdX9y442Kk0gUqvRdx3wJiTf7hrgA8y+egAXiUzjiMX/Y9r6Qke8w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vsr4rxujljx8wsu4jf6rttmzwwk7yhpnwzrm5p","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ES/11ZoMtJpJUwXzlPixwCNyHlw3qv7vTDYigUP/M4YBIMYVG6BKGeJdXO1VXUi4rs3syYIWJ/OhBvwgm3belw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1vsr4rxujljx8wsu4jf6rttmzwwk7yhpnwzrm5p","to_address":"g17v686aqfw7xjak2nru29xn8meqmeqqu2rda2ck","amount":"5000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1XiirHU1ZCsZuMG7qBnz6w2w26khQTRyebPaNR6WNw2"},"signature":"eAfNlXElNsXZc0ZguGOBvMCiJWio8KMnmp1qtyrK7Nc/pnMcNLD/qPs+zejk4Eo/ocCSBOQvE8VWPVdyzP1C6w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g143ck5lywwrgk6v00l03y0zstulm7wavezdzd3q","to_address":"g17v686aqfw7xjak2nru29xn8meqmeqqu2rda2ck","amount":"10000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsTgJJducsb69uV/777MFeyNSwJO6gfrGJ8ZpOCHSisn"},"signature":"GBhgSHS7uBn+ZzIdUSGVuSfU62z/c3RusmanP/G6bs4JtQMgrqKQ4Mbb8vxOgmabdgku9mVjQ3WwRXnCq+9N6A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1sdwessgwza30nj77pn946wnd82lkp3z7hxjvfd","to_address":"g17v686aqfw7xjak2nru29xn8meqmeqqu2rda2ck","amount":"20000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ameb0i57vlYA3h6GjExdBpNr45hEXpGfR6pEbAjLEcdM"},"signature":"tWoldNW9BhF40iVMG6wND7UkP4dpSX7Is5ehTgdG32Bhh//PK//L5lEPDpnSvD0SpcBU4oNQyKKTayAm22d8JA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1rseh2akqlgw5f9q0hu8zjmzv6mwmmsgvuh4y84","to_address":"g17v686aqfw7xjak2nru29xn8meqmeqqu2rda2ck","amount":"10000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7CrCj75zldavmbgKPDvh2o6uUaEZNTPvrOTcNONc5hy"},"signature":"YzXzrjlnzKkkGTy+a7ZcY6t9/3AG4YX772cfkw5DKsohc+YczoJwGzy7pY/eQrTNoEq9R6QZMQxYrlgX9towTw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1w8gg8j30pcuaeh96yn74ups5ac5yql8j66eauh","to_address":"g17v686aqfw7xjak2nru29xn8meqmeqqu2rda2ck","amount":"12000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhUpQBjekgDCv3e39NzA97JMPUUfs4rnip6h++FWOFpS"},"signature":"Sr/D9EwITEHtijY7DWAuKHPIbs9tVJl2Fh4isfqX0TRxhataIbgfTvZdumRvghO6YLyt94uHJCpGSADymzpfKQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1h7y0cavm8acd8dlx8x6k0jma28cmpt30x33sws","to_address":"g17v686aqfw7xjak2nru29xn8meqmeqqu2rda2ck","amount":"20000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2zgmzNKvDQeIinTqON9mlXVb3Juwu6qdMax+c/GbAdy"},"signature":"Qilj+8qV8PWTSzlTeOxfZJ5+TWZGmnC3q+2GID1eA8RrIhqYei+SlQgU3HnAyCXqO/uTlPDMOUJtnUzI+kCYBg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1mz6ls6a5qh3sm68e4em94ww9efq0lprknv0usa","to_address":"g17v686aqfw7xjak2nru29xn8meqmeqqu2rda2ck","amount":"15000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8BtokDWOmO2vpO8nqYsCpnal8LOFOLKLk5xoN+eeVHs"},"signature":"gfUEXrAFE7m4eEzZBYL+3x4uq7GGzzfdoxmhzZt3pjVyhxr3aXjpFPps3yko6JYt/c45WQIxJEQ+0HlXNwan8w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gynx6dkvg036k8efl28u0vupdcux9xry369jw0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"dMdsyLGadzjebcqXCXnJePZpietqmnY/nD2udSvmQKBXt+QHK9JSMaq1PqzOnsN0D01alGe9PM94ImGIJ3qtkg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1gynx6dkvg036k8efl28u0vupdcux9xry369jw0","to_address":"g1sc6dax0wlaw6g6za5u6ra3j0av7gaqmrxpczfc","amount":"12000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/vhIIKM+i95A+OmR/Os1V0mwv4jZqBa9lXZ3WeSF5Fn"},"signature":"m48d8RJtG8aIYMadvzz06Plal/EZU7eeyL+fqshJjvkDBft9pbW1fE5a1iwyBFFIwKetIpzEgqpjLrs5RWrakA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1tpvnuqgr0q6d2rgm9fm59vwqw4g52a66txd0lv","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"rwx2O2QEwDeykxxQAhExU8vmWOBEIKn9vhCQG0q0DdMjNXjpZ/+DQnUaj+xPMAHh5KWBoNFVNhMSHp4Cfprsuw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1tpvnuqgr0q6d2rgm9fm59vwqw4g52a66txd0lv","to_address":"g1htsk0fql3zyspfk52nlt2rn55a9k7u0fenw7we","amount":"2000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2nEYWNYI0QRkEt8RTocdgk47NZQLzKPIIRUT5cB4kzK"},"signature":"6g8C3GZGQoTObWYvJDbQtRyCrGAKMXcZyAV5im1aLWEVkTKAivDghdZD73TOAy75Hf2tfQwt4ogKyn3klf++Qw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g17v686aqfw7xjak2nru29xn8meqmeqqu2rda2ck","to_address":"g1htsk0fql3zyspfk52nlt2rn55a9k7u0fenw7we","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av334EaPN3PAg8ahubn4WgiN0pujmXu/I2WxxtsI/2SH"},"signature":"FjsFmWw2vFdwc+Te+rO5evSxh/mkEFMOPui4PTLgb5YkTsXDln4qEQ+wKadx+HEMGeqRVHP06o09WiPWaRzXwA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1p8am7hlsnyn783cnkhczqx0pyl0xwvpu0pzsd6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"y1HVWR4fnBuAEtWXxnWFtumL96kkCY5h+01p0ycLugVfQZB10sHeR513gWc5fHr+i8eNpfHa9Db6FUVinE8lpw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1p8am7hlsnyn783cnkhczqx0pyl0xwvpu0pzsd6","to_address":"g1da0exrm55sv4dlgpd3sxqdpx0ks5zp5n633tje","amount":"10000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah2B/nCEG44V4A3FRHnjIKrHaS6Dh01Gec8am5MhmUK6"},"signature":"FancJ3e89r2q1Nb7lgIaM6mNE6EBXEGT4SanoSwU/X0+yiLtJts0hzdiKqzUtLRKweGWUWBbn7vU6Wp8CLS8WA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1da0exrm55sv4dlgpd3sxqdpx0ks5zp5n633tje","to_address":"g17v686aqfw7xjak2nru29xn8meqmeqqu2rda2ck","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8lmev4iofxU8+uOyRb9nRjO7ZFwVPu7oMJQ8X2upvSk"},"signature":"c4WX0PW3/oaVTowypxfgby/i77FLCneoY74Ql64dV/lcafEeVer4DvMyKJsFBeFOFNAJWT5OityurlxLAnYO7A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1sl8cy6c7ppk3knpw39ge2wtt2kurzvl7dex4u3","to_address":"g17v686aqfw7xjak2nru29xn8meqmeqqu2rda2ck","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Awvo59ZR+fciO+57sIg3VVIqQZmUMw83jJSyZuGA2+h0"},"signature":"5eAPtR5EPIJUbm9/idW1FITiWm4ZHGgmtrgkwbT/nfBHWx3+TXtx/MlB3Pc2OAogJrqGPD+Tw9ccN47gyuyA1A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1htsk0fql3zyspfk52nlt2rn55a9k7u0fenw7we","to_address":"g17v686aqfw7xjak2nru29xn8meqmeqqu2rda2ck","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A58yXywKCVCE2RJ6xuclVQ5QKDpNDv98Zhp7mpHRrM0a"},"signature":"bq9qK2TJKVG0lgntmXC9oYIlwJBj+e6PH11HyKrzM1UohZ/eiAz47rhAOzqaht2X0T83/+MxvZgsXle455lVZQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1r8qqu2a905l68gjppunjwdv9ppr0rj8eclwzaz","to_address":"g17v686aqfw7xjak2nru29xn8meqmeqqu2rda2ck","amount":"2000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlGtbvriPvEmr7DFvJIYVK68nTLhiIc+zsdKPyrVYVmC"},"signature":"Eq3FbfyNdkzl+ctl+rXYcBiW89zJ2ozpYWoKqM1thkVnMfCyv9QBNJ48WVK7THz0/ASV+TOyD0BpdsGYElyHxA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1sc6dax0wlaw6g6za5u6ra3j0av7gaqmrxpczfc","to_address":"g17v686aqfw7xjak2nru29xn8meqmeqqu2rda2ck","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap8Dfi+QJhHerdkJP8Lw1HN96L9M/Ik3h/wULrsjOrL6"},"signature":"DDnyWfcP6LzbVENcKdqG1DBnybG82ynaj3lJZGOA6ExBV+fBBwHABOSBUlgZf+NGNl4Cwf9nRG96fsgAOtDKEw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1xgalv50t62q7sthksps9x8pexp84jwvm725aq7","to_address":"g17v686aqfw7xjak2nru29xn8meqmeqqu2rda2ck","amount":"2000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwpBchocnVEE3sClWOkMU9Bui0pjDHs6m9ipc8zzJFEi"},"signature":"iYmnKN7EjOoZrrOzzO3vShAn1UeJEZ//wQBemc5iew5VztjdkngTZgPTAMYkXpDIEw95CqytU5gW0oJvkoezUA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","aaaaa","HI"]},{"@type":"/vm.m_call","caller":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","aaaa","Hello"]},{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"10000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"Mocw/B/XL/vLUvX2rIUsy84O/d/3QLBMxKxyLcjl6YY3TtgayT4rw2JCppJqRb6c81TS4Y2pohqV3ln9gmHL7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","aaaaa","HI"]},{"@type":"/vm.m_call","caller":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","aaaa","Hello"]},{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"10000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"UC/47zrGxDLBdtX0UtMpZfD12hmmapwO6tH1NHZIswMxlUA3wce1xk/QC65UYBKk3GHNuMg2n3XwFzh02kczUA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","amount":"230000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"F1n67CUuS6cbLSPQ6SoiKzd37kd4fpDDskH4D/lgmd5TJrBysJkIScvG3jIR32b68P0srEtoggYRGkI5Zw3xCA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","satoshi","Bitcoin Maker"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"hCzSyUMszAaYxugACxPCxc6FarbGTsEMx6+lxhnn6agl2wAUyHvSlKwkgsxg08riB/5DJ2meszm9NGSVxoC3Rw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","I am the","Bitcoin Maker"]},{"@type":"/vm.m_call","caller":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","Yo","You know What I'm sayin?"]},{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"10000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"Pq3hx5WRug2Vw0OZiU6B0Gaz1sJV+LFTHEWzSQ6VXmofB+TbDwgN97CozfuPRNd5LCvMe0gxmFuuxJ2LY4sgeQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1eulzq8qzt6r72grm9hxgkwnnv0472m7wljv2kp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"TgRDGaFjwBhAh6DAr0uQTbf8HrwHWNCSZ8VN/97QNW0wPL4NZr7ipBqhwiyc6lStfkpKE+AInxL2M52Argq5uw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1eulzq8qzt6r72grm9hxgkwnnv0472m7wljv2kp","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","lizard",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2bw77OV1qLt4LJDrvUm6VpSGQF3KWiT2LwYy0HreZ6r"},"signature":"eoaMlAT6w3QnGSpChRLR3gpl1hRGTMiJgI+Z/36z22cF7yZVtigljuUuc/4NJfBI520zHfBR82CJRiAzAfDpKQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gq8jjra4wpjp5ka66hjx59lmfhqlepa4mmlnjd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"gApRFAd1YBHyfCQQ/5mVSduS18QJqPwSko7eibTTtrh0eNDOeK6dll8U2ChgGgKSt4DSN1F2RWJVPWgcGN+tIQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gq8jjra4wpjp5ka66hjx59lmfhqlepa4mmlnjd","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","lifeisapossible",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax4muoHqZrrcMOm8gjjYTFvlQ0egZr0J8dh6Fg2AOH6L"},"signature":"qYcu1DWowkoCtdAb7hk/CBSsnHcs3LIMHkWQPy2pQZgn+ZkaEHrRkitp/ARaconkh6uUHUVWt/VSDLHVpbH2uQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1dk29mferv4nuk90pn7xca5y24t5m87d2ce2lcw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"cA4JOOJIvvgsWIfH99GdHuGb0/QsWu+C1grn80o6cq1h6WJvATEFGjeE4Ya9KSA9TenDpxGz7qtyZOGhya7FQg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18h5wtpr75ehu8u36v0vwcju6wxr206x8khxw20","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"DcOZKb1kDGXiTSfalhpI7fzKqOBaCZMggVVeO/pTual5n3X4aedAgFk35JOwHMteg5gcXGwh6EptO2MfFSFJWw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18h5wtpr75ehu8u36v0vwcju6wxr206x8khxw20","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","patience",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay9L7Cq5mGb75jCaO10he79ZPxnyzJbZEuUZba8goVRs"},"signature":"fjgpmv1pvulAekvKVhxkmi8/lAHA2xmTPnqigXGTb/UQvNPcS6Vws8B3NCdxXKr1FN4OPaI8DQMcCxyOpftKeA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","amount":"1000000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"uBPtDFy6oPt/nwAZEb8Yy+gMSevP+DZMlw2MWoarRjk8660BZQqHOzlPrnweyGnDtQoYzvjY2taJHJQ/0CXKcQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19v3jt4cchnkfahjr22xa5u3jjngltjawlt06fs","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Fw2atvsrEO6dQWYV3nt0dWoV12NMwNi4Ynpy4P9Hm68nDPJlnUUVG+Q3HBQ1la9RjUO7w8APzTm4gBoB4saJaQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1f0nccapv8h3mcnc07q9re2hjd8q2na3vmpmyh9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ISBsW16zs0zK6ScYHhuIVcb/RH+3cles8qOGMKwp6Gxr1J8RifqT2HvA1m36tE3mouoVvf07WzQ59NgQmmD3ag=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15s8f3l4372nyqd8anvmrz35refg6ludpyalm0f","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Gh5Xx+xLkJBoFU3vVAxY27RgU1IKcuZxpz9iLwOU34USj2pBgTkTz8yNOh/cGTZ6NS8LdlzHZ8cAI9D8ol9Yxg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1f0nccapv8h3mcnc07q9re2hjd8q2na3vmpmyh9","to_address":"g15s8f3l4372nyqd8anvmrz35refg6ludpyalm0f","amount":"309999999ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxNnqSUnOl8+k/B3j3S6h5t70UIQvTnT7r6icsjAVBO2"},"signature":"6MwJFmcRmSMFnAlXLHItQ5hQ7eeVY7vB9wuah6RRDKtgfsBYBV3JbLVL2TAPx3pfZ0OQCFGausuaZ8/KBESB/g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1f0nccapv8h3mcnc07q9re2hjd8q2na3vmpmyh9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"3eiToK+zHCwNMZw9ZYYcwV3Gl2Oky4EfDDnZiiK2yxwh7cxcX8nz+dzJPKIRIm4Hvfml+ZOSgN/6y5s1sWJiDg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15s8f3l4372nyqd8anvmrz35refg6ludpyalm0f","to_address":"g1f0nccapv8h3mcnc07q9re2hjd8q2na3vmpmyh9","amount":"619999998ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ajb4PLUVI5YsLoJ68SB194GPhUPuPOZW3WBMUhjU8jMS"},"signature":"Sx7rays+XQUR6sIobrRISdyzjtksmbgPTSW3Tn8EVAhU+EIBT6ttALlCkKVQs25b/N4CDa9wtn8KfpqenozB4g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15s8f3l4372nyqd8anvmrz35refg6ludpyalm0f","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kY47lkXVycmUtA/CaLnFuuAdtljASNlgbOhGZOcCq75ktO/Yum+deJCCGMSI/vwP4YDrvwk4lmOP5c3ju/R9yw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15s8f3l4372nyqd8anvmrz35refg6ludpyalm0f","to_address":"g19v3jt4cchnkfahjr22xa5u3jjngltjawlt06fs","amount":"100000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ajb4PLUVI5YsLoJ68SB194GPhUPuPOZW3WBMUhjU8jMS"},"signature":"JPz16xh71BdHHvatLXWTIdQzDAKfoUUiEQQ/rIITmZwaOrrgHc4xOLp6eylB2TQJryHQg7YEg3Xx6iU0LNDjCQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15s8f3l4372nyqd8anvmrz35refg6ludpyalm0f","to_address":"g14sm7q4rlkq9ga26wunyu9f3glhke4s5vdv0s65","amount":"209999998ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ajb4PLUVI5YsLoJ68SB194GPhUPuPOZW3WBMUhjU8jMS"},"signature":"jQdvuXRz5o+ApVym13IGboJl7bzhfzhR7O7BXynmzj5aB7/JHnhNBoczd2uv8gAlkEU53O36IOuXrrwqcRQJTQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15s8f3l4372nyqd8anvmrz35refg6ludpyalm0f","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"388T1pglReBl2lBZ55j0BQomS+//NW1cTYUfv00rkaYaQuaRJZy3GlePFfi1+gJvcVNtqJIE+3aWMFhssccOsQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gqf3mh09kf0p28wepfsm2ugqv8kdpwzayjmlfk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"9T1lqX4sG5llbd92hxMAMrfGlNDVyXAbb8H14xdXuvIR8ucLWcQhkVGi9PXL12t4u4277chSQR4W3Xl96QRuGQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gqf3mh09kf0p28wepfsm2ugqv8kdpwzayjmlfk","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","gnoteritori",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlDAR4IGYCU2wJ9+W0vbbSx685BWqPP1ikii/Rrwj7TE"},"signature":"l46mh8m3DG2qp9idcOULyn5aPZP6Mga1e+wkuhrSw0w54ksmLQZ5+WaKZjrh608mGuiaRP27N4aUogaFSkU69g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ht20s6jsfzu6tmdu28jmhn08l2cc25kf3te4u4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"hSZCi2+wOd9st3RcYjTfN5cMzu8brKyZ+C1qKSjZ4e1KOZfuoiQAGQ+Q/pSsx7zqY4YYkZZ4FOm9GkDXo3x8kg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ht20s6jsfzu6tmdu28jmhn08l2cc25kf3te4u4","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","gnotest",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsuySARg3N4Hr/j0Lo3p9s2BzUlcgAimLsKN9YTa1my9"},"signature":"7MNAI661iODgig97BYXRCmgGxn+Bho67G3yRPkY2feNDfS/L3uqWJWQGo3irF5wbSDytw68ovkV6/WfOtRvIvQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ht20s6jsfzu6tmdu28jmhn08l2cc25kf3te4u4","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","truegno",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsuySARg3N4Hr/j0Lo3p9s2BzUlcgAimLsKN9YTa1my9"},"signature":"UHPS6DqIr9uoWXhvIqXtXtYGPBKAYzhK+WG0W6MSYMhOwlYTaRbnbT+TOkNw/1k4MkC3cZdH6e43dNf0c1hIqA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1a2cvey433kkhszsarkx3ppvpzg3gvfe0rzdevn","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"HwUVEIocoXRicjs2Kc0xTplaj/EWihnPF6klgf4yrMEyy61gYVirJBlGbgVclw7MkV56beGOzI/I8qgWaUFXBQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a2cvey433kkhszsarkx3ppvpzg3gvfe0rzdevn","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","gnoland_testnet222",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5Y1h+0dl6NpTd6gj+03dFlG13fLDTsYgVbUs0FQPt++"},"signature":"9lYWIN1vPHkmNeojTn+ufFRv2eohIwIHxPX/LCR6+wlrX6N/STRg402QPUQb6l+1q3sQnrW/cI1SAQkRvmWPSQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a2cvey433kkhszsarkx3ppvpzg3gvfe0rzdevn","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","gno777",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5Y1h+0dl6NpTd6gj+03dFlG13fLDTsYgVbUs0FQPt++"},"signature":"trH5+VwrYpFh3nWj2Cn1PuqdHzXxg791q2x769Qz04tKfXkhQn/jbn7xiihWDqBi2sDMUeE4OHHk7p+f3m00fA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a2cvey433kkhszsarkx3ppvpzg3gvfe0rzdevn","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","gnol777",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5Y1h+0dl6NpTd6gj+03dFlG13fLDTsYgVbUs0FQPt++"},"signature":"Ww94srUOPBDD8MldZCpxCIzSeLYG04uuaA3SMG+EqRIyG89O6UT07d+Zg+TEh1WA0LpFKWxlYGhws1a7ANZ/nw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"100000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"M84rO8Od4vPOBL68NV+5g/jddNw+6w/AkasywV2cDxMpDYpNHVlUI37l2CPlncTd2Qrv3oR1rwO9lynuvYg9QA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ckddn039khwxzu4v5mc8n34vd9ksaks2l6c3kg","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"/tZiEdaCjjo98yuUI87kfzsACpZ2qNn0lf70wg1rnd9qgP48ADSaNd5QITGGk6pZr7OpSgQMJEhCEeeQxB8xUA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ckddn039khwxzu4v5mc8n34vd9ksaks2l6c3kg","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"vtxwjMscIadA94tffeKvMyZxIkVNwYkDg9exHtCzmohO07qp0JjsD19qxbXWrIYVrEXm33g+BuC0aUoTpWnPmg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ckddn039khwxzu4v5mc8n34vd9ksaks2l6c3kg","to_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","amount":"10000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0kzkYEt8K5ZALtwx28ajSrJZ3f7mI5J91Lqeaf2Rqhw"},"signature":"sYEpg0syPF5sM/eoKxuvVoziZEVFqcrqX0/5J5VlfGQbw+TbYmtY9Ux/9QFDDbPDKdxuSFqKisstmcETqzpamg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ckddn039khwxzu4v5mc8n34vd9ksaks2l6c3kg","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"j6n3E8K1sUd72me4l6oJiQOTjaDQm426zcbLnlCW8j5jbuzbT2yQMqHGb9WLA/lQJB2t3cRPEaH6S3AvQs5j3Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"1000000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"7ZGurmUkYGGWj/i3eOlhO3nfA4ny/Nmv5RXbSXZ88Bg0THJpZvmznNmxZcX97ewvbewS+DtMcu1B8H++EgVjcQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fd478pa2h5cyp8hf0h2uxq0dwcqja5hxsskef2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"lITCUd1xe1t3hSbFDYXmK7qn9zsLuOpxdroLYmn6rsxdDGy2rvnMwQullj4bvJIJzmt16ZVZhE8Au9TzN3p1Fw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1z006zf52gvcu3v9uptpwrl6zcncrrgdphznp29","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"h05ziq8EClOL0oAOjm3QaXZaRQncdgMfIhY/v8BsIkM6MhTSgJTgXT0aqiGfOnX1zyF+eWuHL8RAIVHSHYzjVA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1vg5x55g9s0d3lhz2dspuup8d5xwftmyyrz5n0g","to_address":"g1dtyk0z4mmfqsh78q59p8h2aujnldxu9nax4f38","amount":"700000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwKeITDbdCI3luhtRHAF6JN2I+z7mP2Mx/9/tzrmHVA9"},"signature":"7v1Znt7qRYvED5k6210/+zgpDJM9hNzBkV1GapT68ds/dXeGmV5yuxr0B8/ytEV7+sBbje/t9X7w6jDqTTf0Gg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1vg5x55g9s0d3lhz2dspuup8d5xwftmyyrz5n0g","to_address":"g1dtyk0z4mmfqsh78q59p8h2aujnldxu9nax4f38","amount":"300000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwKeITDbdCI3luhtRHAF6JN2I+z7mP2Mx/9/tzrmHVA9"},"signature":"9zLX9aJrSdjLZvTjxtN+WQi3PnJ940CvoHQ7SgiZP9M0uXBnSipboKMSDSjYMGWdhsJpjkxHyyypaqnGS1aSOg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1vg5x55g9s0d3lhz2dspuup8d5xwftmyyrz5n0g","to_address":"g1dtyk0z4mmfqsh78q59p8h2aujnldxu9nax4f38","amount":"239000000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwKeITDbdCI3luhtRHAF6JN2I+z7mP2Mx/9/tzrmHVA9"},"signature":"p9Oxc+M4qj0iP+2vGgccjI63gYbdkgJFEHnjcKHgoQUHfM3ly+VMoDeHKSyx+OKf6jDv5ebMaj+jCXrkox+l0w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16u9gye35q0lnzlga05m54srl0m5rfltt3mgc0t","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","FijiMLK",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyLGd60jMlvNC3Z4hkwY5wJFQdAk3HMvhXdUV3XyKB2w"},"signature":"sz0yi+wQgtOINq6cpEVIP9HHcx0CvPpI086pY9WAxD05vZ7CBvYotzjn0F5JB+XHs4J804QsSnw1d6mB1A+M0Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16u9gye35q0lnzlga05m54srl0m5rfltt3mgc0t","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","fijimlk",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyLGd60jMlvNC3Z4hkwY5wJFQdAk3HMvhXdUV3XyKB2w"},"signature":"TkZAMR7u9bTK442zJ1eF5f28B/2MMR7s3213kVmJtPBHsvrChaIu7mwIVQSaeIi0iS3TiV1CQkR50w9mY2ZWqA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1wfyj4ezrenqcztuqaldunmj6403r3sqzgj4vtm","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"XNqf1l4vOmg7OPQ7SIl2q8kQZnkG1+l3pt85YYmOYdZv1LYDR7SQ3pPHj/I3SDYcktUOac9NOX/jWXM2beVKFQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wfyj4ezrenqcztuqaldunmj6403r3sqzgj4vtm","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","Ezhik",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoRLbSBrlrQhAmQrTfKTFMR16bi5MUg0KYfK50ybahnM"},"signature":"fbgsZ7kgCCKKB13QrfEJPqI4ThbSceOPyPdEEwsnNVNWwhX9Ofwh6UXpo4MOW3MQSvptuyN2J02LZxg6Zdda7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wfyj4ezrenqcztuqaldunmj6403r3sqzgj4vtm","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","Ezhikk",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoRLbSBrlrQhAmQrTfKTFMR16bi5MUg0KYfK50ybahnM"},"signature":"ppnrtH1MiU2hVxoPhkE0J+HC3dKrqmuJ4pAwSP3DuvoW03uiG7I2q+csbcB3GyzTPEgqkvqRLUDK+XNnas+LKQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wfyj4ezrenqcztuqaldunmj6403r3sqzgj4vtm","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","ezhikk",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoRLbSBrlrQhAmQrTfKTFMR16bi5MUg0KYfK50ybahnM"},"signature":"31u1wp5i/AwDhWO8RIJYNbg//DcngOPLW3vxpJ8Z0UxPMJIcSerOj4SZ4E75S2d85g5f2iH02MBRlzmSZc6vKg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","amount":"12311000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"xgThcenryXn+fUjy3lGBu3eSfJpPy0XudqPABQjcLmdIJ3Ye1S5M6pBl2h2hsVq1Hkv4EOCUpJbsjDMHkhrR3Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g19yltltjed5688sullftzurhdshmjwtm8vlqdr2","amount":"10000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"K+0ncvcu0raoDMsG2ESQJAL85eqIEUrrRMDJITHlly8b0WKECdqM3jff0d8ZHHSd6ozDR/63+9Zc2kgr1ZkPfQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cnnph745hpycqln06wj7dcdlur74dz23wn46pl","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","konst010",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AscvF2Tg4odg+jx33FNbog4l9qH+wqTgxUZIO0fv/r/0"},"signature":"7Knb+kDfe9LRnRSdj79mHRaGq7LaauAtfo7p+bUhDkduL1LY9W6Ylzzm49pMl/XrmgQj3guvjmckIwIoIbuCVw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cnnph745hpycqln06wj7dcdlur74dz23wn46pl","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["konst010"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AscvF2Tg4odg+jx33FNbog4l9qH+wqTgxUZIO0fv/r/0"},"signature":"2FXHuUFLBxtP18mz1dqKSxEF0xa7QnQbtKM3MD4VmHpQ98CLSYa4C/q+rv+pvjuEKTHaPzPWHEwMx1iNLxqnTg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cnnph745hpycqln06wj7dcdlur74dz23wn46pl","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["50","Super Gem GnoLAnd","I installed everything myself and very happy about it. Thanks GnoLand, I am glad to be with you"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AscvF2Tg4odg+jx33FNbog4l9qH+wqTgxUZIO0fv/r/0"},"signature":"UtdJ4qPIPNKQ7ZAq1dCEBmcMyYhxZwS1xDePlMwcbdFgZzQfr6LmLAVmZK1/CNaRi2A0VsRZdu+cJMOv5Cmrog=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hzs4mzxjq6mlukjz39sfl4x27sqzrm4rckj6u0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"+uetLGhw/lY9HXzbIvkxIazi/tWAKYfnNkzX6HLmhcwsp1lVhLOJm1M2vzF8upn9vFYKbZsyfcz87EvI6LfZeQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hzs4mzxjq6mlukjz39sfl4x27sqzrm4rckj6u0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","gndz1812",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/Upd/g+rpy7H0iE2UsT2zS62ID9+njZdZbHLQ8xRusI"},"signature":"+El4mYvOUnRF/644mF+RPf64T37MwsoKQWpEnpjQRoVGLV9/YRZWn1h8dU/Hu4Wmee5cHMR6aKl3L+VmTINVuA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lwq7xkw2ft8n5ug57zved7de9mh0fg0nswcw25","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"KTNFnHD9Nsfqi2ylO5Vh/r4rPWJGoaTu0hu7Ajxqu1Bj3FsEU3aTxQr1VPNTRXFlkXDB5se4UN/ZSnBvAXhk+g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ckddn039khwxzu4v5mc8n34vd9ksaks2l6c3kg","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"EPu83YUiA31dqUuUsZjDfeJFOF6yfKN50kcan/JDcMxPffTpMiIbOw13K9P1Xi5Qw5nYhXggZ+6XaBXMITZUkA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1y7h659patawdy99mlufj9lp3t9cwpt8fq852zq","to_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","amount":"34227543ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/c+dnyCVZBoIdj8EwyShLmzKFzgfSJhplWphGtEMTud"},"signature":"QCq46ZAnFgzMwJdBssm7ax7544Du8f20+bfVXWnSevVXcf6xwp4wlIOnNn9uFAQxqaT3SbE4NMtOlng6vjA7wA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fnakf9vrd6uqn8qdmp88yam4p0ngy572answ9f","to_address":"g1h7sxqvet2psvsnnqdj2e8ldwj037s8uwhs7pew","amount":"8121200ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3cWVULHSHC1mwK8o1vfJHKfNMvLEvKU/sHPQoFWRoey"},"signature":"0wvqAcg3l/jS3fI4BkXgpYV+/z4t36LuO4vFt83rZzYEYBm5542mSLZ8VtyjPslET2buDIc77wueiILdz7On6w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fnakf9vrd6uqn8qdmp88yam4p0ngy572answ9f","to_address":"g1h7sxqvet2psvsnnqdj2e8ldwj037s8uwhs7pew","amount":"12ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3cWVULHSHC1mwK8o1vfJHKfNMvLEvKU/sHPQoFWRoey"},"signature":"rcNaQd/BYxs5qLjzJz0UYoREh4CeksTVrQTTstZwJVdEfVqxp3BB9cHTdQfCWwNy5yjbB/l+GuQU+IBd8POcKg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1h7sxqvet2psvsnnqdj2e8ldwj037s8uwhs7pew","to_address":"g12gtfyzkmv9sgj4y5pk5p3svndrl4dsvm2rnl6r","amount":"3999999ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5lwsO5yD8tRLN2i9so5kbiDy9K4121Ann45fbk1Y4Ap"},"signature":"J7LAW5mPgHxrAEHKI6VIUPe5K+kyuQlNsU5L7wQZWuVaxf+2IaOxT9rWDXE3Zdk4snzumsi4Mfme6znEe9EaBA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rljgvygk9csmz2rvnmd2nvztstfssf4khql8ne","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kAeRT5TaVhmZN8AFXdrk2Yiz3E8XYzZSZZm/O4McnG43/EFV4lbjsVPHPXjbrkssVXFUZRVp8U1T9smjN72PDg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1rljgvygk9csmz2rvnmd2nvztstfssf4khql8ne","to_address":"g1y5z9pepy5wsenqq9lyd2c0wd4fx0w8m3xatqn8","amount":"30000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/G5Xc92kp6xw77ARuGBNiM4LKGcRjEHi4kjjUX8Arfx"},"signature":"LRSkiAoWXotvl4Za0k7Woj2DplSzZVURz5bYDcelNxVnGzp8qcCFZrHK3pzN8gcFOzy/Ys6OxOHZLZuTzFH5iQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1sxgf5xv9k04qn4c0x7dfaa43t534pf3yqmftkl","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"j3EkT+1VfKUf2WkS/3kMLpHBooVdfRVLalTg1o/GyQhE9hrqgxzSqEMpw3UWExbEcjB7H6JhK9ctl0kgRmL9SQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sxgf5xv9k04qn4c0x7dfaa43t534pf3yqmftkl","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","moonbridge",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Axn9vMIakdh5kT45/m/l1kA+ujS6zObXTzLdakgm9JCZ"},"signature":"YkR0INW4tQ+FiKEVUKX0/tHZbPw6Teu77OSsRmugzr5rl4Nzou9vPFr26P7w70sff4Dj9fmq0aN7P0qT6WH3ug=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19mcd8xuxe9xgn7whvxkucr0gh4w4zgkmpt5vpv","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"MFGBNrS4DEF6x/KdLuZUukhWhmvg1aFkS2cTMyd45N8XBF/1N7qgu8BZnAfx/MEZr+NVyt1RYcRnR5F/BcXZlw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rsrzcspdadf5pr8s52epxx6fcpac2gw7hfewkk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"a+yWyt4yexascsLVZVuLPnXAgPVhMoEdRdfdBGgMVK84WaGtgffGJhjIPSulvxlZ7F3Lh68bHau67BXUXDsSkw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1nhapduptwx4zm79z5gv26ajtlfemk38vcusddg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"hbtzSj0e+HwUndbpeUIsKMY7Z9tKVnfpTCJ7/A5TbwZVqCnjDRXshAQYQidb62AAS0fhnfvBLLlthGXhq0PqUQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1q9cnd0vd4cmytzysdwfr69qj9x6gks6q420utk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"vNwyRpQjV80UoG+QZHkuN1tDXshfJ4b+pqx2eFS4jV1vg3rKvPxOxFvZ3O7MBU0m+eYUOHyjsEq9K5dhaUA4Cg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15cpzcne8d2q0jers7d347g9yyfrptk3cr7z2v8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"JlywIZAtlNkU/ZFgkKc01MsbIUoYoMH5d6Gd8Q+9xpZcE2/1tslNLvKQqtYdrZpGnnAtwaxXwkkeiDX7YSC5pw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1dj30h6gp507g63h2x3h3k5t6v3nf9ctt4ladj8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"lQ2BHvHchVG00ZQ/YIqxXoMqYnaMLFGD/Vg2f+zx5MoW0QTkBRG6+0B/vqQ0kXw9t6n/o4BVKC+CW7zL/RcIGA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18n2jgvz8kaa6fu4xzw03apq7zlga5cx3umw5g0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ycFOAjM2RHxCxiZy6hrPY4IcTQiNqRR6jsAuoTeBR58b6JtDQO6JCEEEBZHqWPocpZhdjU6qY6SxuXhJ5/O69w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1f4h3e6jhjtnda8n70g89g844rf96w8zedt5ht2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"M/5LnrshB05Xd1U/mM9CHIc7afP21Hg8rKcckehgls8HBCzLZmZ+h9LWJ5z4DNMIRABn+IAQmLhAaYeuwcOdWg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18cz3338u3gqqssuhzess9wkvxe9nct2y7jgp87","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"K02vXDlPNGOfXR8SkZ2T372TvuE5YXPbAZvZHFwKGaAS98KeAqRsff+KiyBlCemky3xJ0io+Y0EpYuvSOqPL4Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1c85q4l5wv89dejwc7gcxg2fcknka6ucwmjrl2c","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Jp/A7P1TTZ9ZJyszAVdaGk2tne7IPHMCEbfvMG7wvqp5hq46B/J5r6gIfxmd/t76n6sxwS1WftYUrXCjEcGsPA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g124yuunk37ayhg9lud6xmfct7jlm3zpls2e5ggl","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"yxzxpwnmcjO5nFr8uoc+OhbHUsRIdAeCVFc7hzlB97xyraAtNZN9M0JeXkU/bjY5lS3l/mbtbrK52tP786kaJA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g10d9xv8d5vvn59snfm5k3sdpclmsq4uk0wl2prr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ovgnNUw5h34SFiM+OYW97Hj+OHBaaQl4x1+F82/DmkhHtRnFwqZp+Wz+/FpAL4l3B9jU4XIqHGN4eF698dowNQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vvnp5q5ggqhyq527w0722lf8ul5vs326a86dd3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"rWRPiuJF070YgAvLmO3f79i/EKJZG8/pQ4Pe4JZJ/34/oNrvoUoRLDexg5Kk1dzBP1Cnq0m/Afj6YOgXcELviA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1urz3w35jzqp5jjn7hdhx25sd68h3lvx5rl9fx8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ZUFEBuTbayQ6sFVPFiiXja8qQdQ7fOPMvMHQj3aLj1VP7CgDukSw2J/wX1r/wRsGzEteTvJfhhfkUgGKR9Z18A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1l4dap4au5kuaknyu73msv664ne6wctwqjpaygu","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"0m7AMNaKq0/arzm+OaqsaPFTPcOvP/92rD6tveCvSTwy9B3sUqpaIbT/wN8LUIp+ZdPeiic3xzTRO9ncQ9t7og=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1aty3m5l2pfyhqlh6kz5qt7gfs9qqjc9pl084pa","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"RzzMVoLb6ahDieep6os4T/XJ3qFUan1lW4/ZWD5JcM85fDbtDp54+mkOqAjV06LQtFNiwPMNLEyUK6MHUhY+6w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1y5z9pepy5wsenqq9lyd2c0wd4fx0w8m3xatqn8","to_address":"g1xpg4fy2j9yfzahwwpucd3t77040lj0rx4fa4tu","amount":"10000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AojsdHSZ8rUkkhHs96dfCxf+O66b/vP6wUZIELpAew1X"},"signature":"0VPkDvS/akGgnOCozJC7qcstKsM0G9+WgNcyags5QBE2aZBuPhqAevjb4iMYoYp9Lzn6ZYiSd/dZZWybATMPHA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19mcd8xuxe9xgn7whvxkucr0gh4w4zgkmpt5vpv","to_address":"g1xpg4fy2j9yfzahwwpucd3t77040lj0rx4fa4tu","amount":"20000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjbNWO+YLxMYFisMUZ0oUVr3PdFBdvKGxHrFtkVA9CUY"},"signature":"CCEOzX+ur07H9XDbqO/m+agha+6XLEWBgZCrSXJ0HLN1/l+wAtB9Dn6CTzESZGQ0ijbW6k+2AsLJ1Z/ggDQ/Kw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1rsrzcspdadf5pr8s52epxx6fcpac2gw7hfewkk","to_address":"g1xpg4fy2j9yfzahwwpucd3t77040lj0rx4fa4tu","amount":"50000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuIlStN1HUTISrn39YMVvA9xHv99tFybP+JEid+wbgzK"},"signature":"qyOAs6oH5PMKoPRm0csZaxYwaPhe3a8A3bcQbn4eMYk184aN17bSx4ov1DHrlNRJjdT7G7pD1hFad38K+6NPZQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1nhapduptwx4zm79z5gv26ajtlfemk38vcusddg","to_address":"g1xpg4fy2j9yfzahwwpucd3t77040lj0rx4fa4tu","amount":"40000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzjO2Wbi/2u7wZUfN0PLBQDEvWthqmNnb6he4fFln4Nr"},"signature":"KCWSwLHa2X2Y7GDqxJrxx+uslTKprPotWpPBYT+Bk2sU7wX32MWyjgn6RVaoD6O7aWHK7jTcq2fGTbQk66X9dA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1q9cnd0vd4cmytzysdwfr69qj9x6gks6q420utk","to_address":"g1xpg4fy2j9yfzahwwpucd3t77040lj0rx4fa4tu","amount":"30000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjCu/tmHqq/1vwmAuTe73ZnSfhEEKzppWTkSJeFtTVJx"},"signature":"7j3tCIkjZrBIXsEwBKrj1O9wn+g80qOvRRgYwmc1Uw8jD+nlnLTCOq3C+42sMwAblH2UcT91pU+Pr+AosFFbyQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15cpzcne8d2q0jers7d347g9yyfrptk3cr7z2v8","to_address":"g1xpg4fy2j9yfzahwwpucd3t77040lj0rx4fa4tu","amount":"15000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlEgAqwaYTkErO8RRwEfJ65vLDvgfTO0FsdXjz5+eUWS"},"signature":"ycJCshIL5Ip2BtXQLsEWaIZl/PqnT9OfvT1DAU4tbwUnlvyV0LRZ/YvQBKcxvBlGzF2WElr+GiQOvYgQt9YAkA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1dzwcxq5q4fnskex7u3a2wq29g7m6nc6retyzsf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"QRR77c4gedi2JmmcITslcpBP1vAkuZ2bzKwP2mO5ZeV7+idg1KL28E+zZfadJD2PdTv5Ik7+cNAx5iJGn3olwQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1dzwcxq5q4fnskex7u3a2wq29g7m6nc6retyzsf","to_address":"g1xpg4fy2j9yfzahwwpucd3t77040lj0rx4fa4tu","amount":"10000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AndRUsKppkgO5+R9nzhlinDMLppoYKs2VjXKOlm/DZdH"},"signature":"5WjpXrLk79bXiJCJUewbtHsPTvx7n4R5a8BcGjLjHgJ+e3M9sADKHltADxnyhqkw/NmC1l3OnqUSM9GQjPL8cw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1dj30h6gp507g63h2x3h3k5t6v3nf9ctt4ladj8","to_address":"g1xpg4fy2j9yfzahwwpucd3t77040lj0rx4fa4tu","amount":"12000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ajjp7Hy4DYve/z/5fAZq4N3/OjNzrupjXTpkSBojLfbX"},"signature":"HnZpzzciqJYuGh0uXAO5dMiom/iU7QzvlZTBT2nomNdG27K7e7KVOQSXc+MGiPMBjJLSlyBp42z7OTH3VJOgbA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g18n2jgvz8kaa6fu4xzw03apq7zlga5cx3umw5g0","to_address":"g1xpg4fy2j9yfzahwwpucd3t77040lj0rx4fa4tu","amount":"14000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ao6W59YD24JPPDAgr8P+jbh8eQnr5JmKuD9u3NPIn4O5"},"signature":"k0RVS9boTuYcySJ8F0zC7bkjltggPdjkWpr6Cx7bqe8lP9ahn+kI1eefhgF6S4HrLRXlcUdntujIicTnOSZmRw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1f4h3e6jhjtnda8n70g89g844rf96w8zedt5ht2","to_address":"g1xpg4fy2j9yfzahwwpucd3t77040lj0rx4fa4tu","amount":"10000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnaRxjT+Uje3z6D1V46MkLsYFteI/qW/z/fLyUM2wpG3"},"signature":"hr2F5OzmcTPUIlJGiedfsZDX0Atfkz4JzW8TfCdohTsqU7bE6tEcmwbvAeSCNawsS0UQoXQpj3OAc5wt2J/r2A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g18cz3338u3gqqssuhzess9wkvxe9nct2y7jgp87","to_address":"g1xpg4fy2j9yfzahwwpucd3t77040lj0rx4fa4tu","amount":"6000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtiBWBRvvGwHN4kxMkjx9fgfizBx5kdadVQR9nTGMfoz"},"signature":"PMcYNUqCl/rt+i2DAf/Qeg7Jd4tDBWsh4kLdr5qFtuJYUoYrRipOBYzlIW7kqk0BlosgxwYohqBAoOGS+MbQ2Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1c85q4l5wv89dejwc7gcxg2fcknka6ucwmjrl2c","to_address":"g1xpg4fy2j9yfzahwwpucd3t77040lj0rx4fa4tu","amount":"23000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwYGaKqZx2h4SJDKXfKq6SpgO2mbpHM9VYYiULF6P1X6"},"signature":"dQ1LtkitMOGAfuVqX5gw/BBwq21U4d+J3MBj1x+3bp5xxhF0Q3LkDbF4m6qUh4vz5XwKQmffvSqGqT7JBV5+0g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g124yuunk37ayhg9lud6xmfct7jlm3zpls2e5ggl","to_address":"g1xpg4fy2j9yfzahwwpucd3t77040lj0rx4fa4tu","amount":"10000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4fCJdtEiYiNOVYx7RTlRu1VzNsyC16ib7ACKq4b7Tzo"},"signature":"ibOYXVnPjdIbCniQZ9J1Sz7fj6S/gb3npMZe2/Jh4/RCJb7UjE+O6yJchZJdIye1DV9bvRwl/SFulIfBACGejg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g10d9xv8d5vvn59snfm5k3sdpclmsq4uk0wl2prr","to_address":"g1xpg4fy2j9yfzahwwpucd3t77040lj0rx4fa4tu","amount":"10000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsAygBY4I5/Rp3JyQnEwklLA9fzaWol4UzXKjYCU74/T"},"signature":"DCrOkqwf2tOsl7eQuBD0dy3dHjppUeDoJSO4gPSoY4N5qcjqKN6BG8cPGHDpj9ViHF01YGz8sUUzdjkFI7ek7g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1vvnp5q5ggqhyq527w0722lf8ul5vs326a86dd3","to_address":"g1xpg4fy2j9yfzahwwpucd3t77040lj0rx4fa4tu","amount":"13000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoMMLGrZV9+ZoC5lpVEjY4BAoDSVI+hJlQw+z/+VI5z7"},"signature":"3MD2fpiwdlbN5RgIoo/O4L+gRFyFrspGXpl83/DEEBxJWYoEURCLRo3ZrtXJV7DGoqZ6tIPFztGr8s102JN6CQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1urz3w35jzqp5jjn7hdhx25sd68h3lvx5rl9fx8","to_address":"g1xpg4fy2j9yfzahwwpucd3t77040lj0rx4fa4tu","amount":"23000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgRoMp69cXRl+kNpiHp60gB/Xy56kTfA+k1Gq83YDweB"},"signature":"+tmE2/CAl16n8x+k0zwJxfdur4d1USWRUzrwoXCCpZc3Dyuh8NtO5mJDoDCeLYkuOGZS3jnoxLoHXRmPOqVn1w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1l4dap4au5kuaknyu73msv664ne6wctwqjpaygu","to_address":"g1xpg4fy2j9yfzahwwpucd3t77040lj0rx4fa4tu","amount":"40000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3bAK0cdegnUBOIu/4HRDT4fVOSVWyqqvEARtkx+hv6L"},"signature":"JbReUT3IWwDkpu3sAeEMaeSQGEdF5Fqm4eauGAHFY08mkzuc0sn9vdRBQp/LNy5aM7VQF2nTdJPNzQTbIkqFjA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1aty3m5l2pfyhqlh6kz5qt7gfs9qqjc9pl084pa","to_address":"g1xpg4fy2j9yfzahwwpucd3t77040lj0rx4fa4tu","amount":"13000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgpORmGq0LDL1kKfVeHvKtBAm5Vv9JnsMOOlXp0F06Id"},"signature":"aL/GIdf1FN9VqpkS5Yn+rRj9C0HhfHUqsF+j5o5YQqJDNURzBOu5LNevX+f7pQZIHWcIpsiAAKOUd4JLXKwitQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1xpg4fy2j9yfzahwwpucd3t77040lj0rx4fa4tu","to_address":"g1dj30h6gp507g63h2x3h3k5t6v3nf9ctt4ladj8","amount":"10000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoXwYnBfZ10evguq4uQFwXupYamZ4+6Uhr/k0yR/6INu"},"signature":"fdy/2cK37icvbG7nPKRt5yyX90JtRbya5WV71YZ0ZtIfFq7lrVkFXFeJKs70WmX5bK96M+LdR0a1kdikBPCPMg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19mcd8xuxe9xgn7whvxkucr0gh4w4zgkmpt5vpv","to_address":"g1dj30h6gp507g63h2x3h3k5t6v3nf9ctt4ladj8","amount":"10000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjbNWO+YLxMYFisMUZ0oUVr3PdFBdvKGxHrFtkVA9CUY"},"signature":"z8RTXKlc1Z9keNRRCVRDc3N5xBPYev4mmK9rvSU7WVIWRDg9x3JZWpNjpAcVzFyewSkxa5w5xpNuuwX3zKcEOA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1rljgvygk9csmz2rvnmd2nvztstfssf4khql8ne","to_address":"g1dj30h6gp507g63h2x3h3k5t6v3nf9ctt4ladj8","amount":"5000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/G5Xc92kp6xw77ARuGBNiM4LKGcRjEHi4kjjUX8Arfx"},"signature":"jVUkvRZ2/nx/2D8wIno33mrskuVShePAe4c4He4/fK1fyCMc0Zf/3hNXw+Aqm/KBoL9/ygQaWA2e7mCzC1pGKg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1y5z9pepy5wsenqq9lyd2c0wd4fx0w8m3xatqn8","to_address":"g1dj30h6gp507g63h2x3h3k5t6v3nf9ctt4ladj8","amount":"10000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AojsdHSZ8rUkkhHs96dfCxf+O66b/vP6wUZIELpAew1X"},"signature":"SfMaHBUqUArm/Mpwz3+8Juh7NdzgPq8uVPMBHWMHBIJFbfA1r1c7yBomL8C3rlGUYFvGoelc9tQfVkkm8OdlVw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19mcd8xuxe9xgn7whvxkucr0gh4w4zgkmpt5vpv","to_address":"g1dj30h6gp507g63h2x3h3k5t6v3nf9ctt4ladj8","amount":"6000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjbNWO+YLxMYFisMUZ0oUVr3PdFBdvKGxHrFtkVA9CUY"},"signature":"aLq+rcXk2fhgXCYMIUV0TJgdCrVV2a0FUQlCjPBrFG8kmSselVb3OWbwz7quIEDw9t4JQeX6XO505PhUybcDbg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1rsrzcspdadf5pr8s52epxx6fcpac2gw7hfewkk","to_address":"g1dj30h6gp507g63h2x3h3k5t6v3nf9ctt4ladj8","amount":"12000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuIlStN1HUTISrn39YMVvA9xHv99tFybP+JEid+wbgzK"},"signature":"PySNucDaDtp3Yejz2KhHBpfKU/CNLixHWzi04yWV2WU31cqk8mes8hbjKcGh7kzmqy5vNiBLPkIhlxJ+LujF0g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1nhapduptwx4zm79z5gv26ajtlfemk38vcusddg","to_address":"g1dj30h6gp507g63h2x3h3k5t6v3nf9ctt4ladj8","amount":"7000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzjO2Wbi/2u7wZUfN0PLBQDEvWthqmNnb6he4fFln4Nr"},"signature":"/WpzEfquUl8xd1q5UMzW16f8nxeZzYrQ00ONXDWNGOp7f8ogu0KTT5MbBeD5C1TcUFW63cEuKwtQV4ht4IETHA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15aeqlvlydy3etzypwqytax63f3nk5ng6rkru55","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"2q6uNeC2ssaxarYlfUH0ueRBFpGlwEjAuy/sZHyUGxJ+bLh45npMnPVBGacLqu1cldLCAfWYvKYV2b4iJ5nXow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15aeqlvlydy3etzypwqytax63f3nk5ng6rkru55","send":"","pkg_path":"gno.land/r/boards","func":"CreateBoard","args":["BOARDNAME"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqMnFbZu2kjWp4iDWA7upvGBwCwnqeiihJGX1OWgJzwb"},"signature":"yGW4xny93BeDOKZzsVt+KjTHaJ/MDjukPVJH03Xj8RxIdF/fhKEh0SqQ3azMhSdjcgCo9f6GpVZarinaATGoDg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15aeqlvlydy3etzypwqytax63f3nk5ng6rkru55","send":"","pkg_path":"gno.land/r/boards","func":"CreateBoard","args":["BOARDNAME"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqMnFbZu2kjWp4iDWA7upvGBwCwnqeiihJGX1OWgJzwb"},"signature":"5971N+JxONCHBQdahd08jr2z7pbalmVEpxIqjC39oORC978kx4YYXVlnVXekfYpBMTzaiYeuSB1F4QqMONRHIA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fwre2yc9m59m8pwek8m5mneck68n6tkr4vk7r7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"7GvBLh9T4IweeCq/S44DdnYCn3bJldjFj0s20HfVTGUAEQIMJ8rtNLSYZa0wvws5JU7b85i/s5EzWmOlA5ntlA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hqz8gynuw92qwqqwneha43gk7v2ectgt5qh7jv","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","superluck","20221215"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoqzO7yvqDb8ix9Ufr6y6zvK2ItSYqdBvCCZqHw4viQm"},"signature":"ASxXRkDxPFWiHVQel/csujW9Y+f31OiGUZyBM3l9xHhg7R2alwHVK7IoAlJjVFMrGxS3h/nmnioDkhBBvd3fpw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fwre2yc9m59m8pwek8m5mneck68n6tkr4vk7r7","to_address":"g1hqz8gynuw92qwqqwneha43gk7v2ectgt5qh7jv","amount":"20000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsYXBWjr9m/Z+KyLPfFtU5OYzWW4Ws8quuMDu+9/MPM7"},"signature":"b6/DpBsItuzvGFe8Uozlhpew2u4xV5a5y/sahC2mk7IpLbAyPkQ72LwArhxKHBuyJrT4BpxYRW5g+vEpwtyqag=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fwre2yc9m59m8pwek8m5mneck68n6tkr4vk7r7","to_address":"g1hqz8gynuw92qwqqwneha43gk7v2ectgt5qh7jv","amount":"280000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsYXBWjr9m/Z+KyLPfFtU5OYzWW4Ws8quuMDu+9/MPM7"},"signature":"+GVT3aw7kJiTArz/r1GkozzojroT3ORShSc40xdd8xxDqDJuoz36ZOUYJbaAhWWcgeWcyomw2XFMulxc8iwRAg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hqz8gynuw92qwqqwneha43gk7v2ectgt5qh7jv","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","superluck","superluck"]}],"fee":{"gas_wanted":"1000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoqzO7yvqDb8ix9Ufr6y6zvK2ItSYqdBvCCZqHw4viQm"},"signature":"rJIH4cw9NfT30GavztEJc1FNRPgTuxki6nkaTLaZZL4VpS3UJyHP7krtqGK1nsJfpwtPy1ok3SLeU8MXTH2/wg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hqz8gynuw92qwqqwneha43gk7v2ectgt5qh7jv","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","superluck","superluck"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoqzO7yvqDb8ix9Ufr6y6zvK2ItSYqdBvCCZqHw4viQm"},"signature":"857gmUUcHwFuQ58teOnnVXlPO6v4152zXUVIOyzFBoc9y1wVBe2cNtIUC2LAVsIBPgck5PE8q982cji43rLFXw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hqz8gynuw92qwqqwneha43gk7v2ectgt5qh7jv","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","superluck","qww"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoqzO7yvqDb8ix9Ufr6y6zvK2ItSYqdBvCCZqHw4viQm"},"signature":"cWdY/7NJftWlCyojYT0qcnN9PQ6GhvRhWY8ktPuFUSUwHWBKUZcqqKfpy435Do8icyDYy8zKM5UWafbo9lOewA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fwre2yc9m59m8pwek8m5mneck68n6tkr4vk7r7","to_address":"g1hqz8gynuw92qwqqwneha43gk7v2ectgt5qh7jv","amount":"9700000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsYXBWjr9m/Z+KyLPfFtU5OYzWW4Ws8quuMDu+9/MPM7"},"signature":"kycLWCPXFl09I46PU0G27Uou2fv+dyXtS4SqEjRSmgBQCDrfFcKTFznHJVstM1TUg5PcHLuAGVrSnrxCM+YFfA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fwre2yc9m59m8pwek8m5mneck68n6tkr4vk7r7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ylVNAkqEcbicNN/K+zXXzXyy/7tvH/YeyGFVhvejTSMujpV3jyzbvyIoMzgpNyUMGyW6jTB/CRr+7GaQEJ9NUw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fwre2yc9m59m8pwek8m5mneck68n6tkr4vk7r7","to_address":"g1hqz8gynuw92qwqqwneha43gk7v2ectgt5qh7jv","amount":"300000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsYXBWjr9m/Z+KyLPfFtU5OYzWW4Ws8quuMDu+9/MPM7"},"signature":"YrwsLf7CItZAUpMFzo2u6QOkc7jtv86fnw9Nq0Juy31pkHWS5sWCQx6EhLuuJ7CkT8SU5lQ4YdXBP0X1f1r3tQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hqz8gynuw92qwqqwneha43gk7v2ectgt5qh7jv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["superluck"]}],"fee":{"gas_wanted":"2000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoqzO7yvqDb8ix9Ufr6y6zvK2ItSYqdBvCCZqHw4viQm"},"signature":"NjvEzWk84eTLtV8k1VUnv0NZjx+JDfRNe5WIFtnL3GNf+R2Oo+XbVw/BgyTLRkpSz/WPXV7LN77i7m9/RDbAfg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hqz8gynuw92qwqqwneha43gk7v2ectgt5qh7jv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["superluck"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoqzO7yvqDb8ix9Ufr6y6zvK2ItSYqdBvCCZqHw4viQm"},"signature":"3z5HCLSCUNE1oE6/ZjWHOgwsBC/STv0Pn7koQZMNFfwtyvwGLg9uKIyvnAHlj6dci4fGrKpP9cPCbbnW4rnrtQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hqz8gynuw92qwqqwneha43gk7v2ectgt5qh7jv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["superluck"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoqzO7yvqDb8ix9Ufr6y6zvK2ItSYqdBvCCZqHw4viQm"},"signature":"n0ktZWMCyqSLN3ocWN7Jp3iI+hXpmhuPErsYlt75tBlCFjsJu+/THfCvgIzB3UeUkRqU39zSORxdUSSM301f5g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hqz8gynuw92qwqqwneha43gk7v2ectgt5qh7jv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["superluck"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoqzO7yvqDb8ix9Ufr6y6zvK2ItSYqdBvCCZqHw4viQm"},"signature":"+jxVLk0172qAuouEgyS/m/XsKrSyHuuMFynN7XNVX1wy7oBNCRYtmMEh/RtXoEMH6juoY/byxPwsKzexxv0FJQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hqz8gynuw92qwqqwneha43gk7v2ectgt5qh7jv","send":"","pkg_path":"gno.land/r/demo/boards","func":"GetBoardIDFromName","args":["superluck"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoqzO7yvqDb8ix9Ufr6y6zvK2ItSYqdBvCCZqHw4viQm"},"signature":"0pbR0/gxz+pdwnZV2I0xj1YGe/vQoKS3GmZ+MCkmma1Q097xS+cXkjjPCjBJDw1NH59cLpm6vyvsSDtLh4ReGw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hqz8gynuw92qwqqwneha43gk7v2ectgt5qh7jv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["51","qww0","Hello gnoland"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoqzO7yvqDb8ix9Ufr6y6zvK2ItSYqdBvCCZqHw4viQm"},"signature":"ynotWSmKEjWbYxc+sri4XMCpj9TJJCsrdOQ6mEYHoAAUu2YQDAY9Xyx5kHS/WePxPf/9tJlwydRKxljljguspw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hqz8gynuw92qwqqwneha43gk7v2ectgt5qh7jv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["51","","1","today is 2022/12/28"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoqzO7yvqDb8ix9Ufr6y6zvK2ItSYqdBvCCZqHw4viQm"},"signature":"1yD7gKAbbDpUpTYzqZZeZE9nEWi32+e38JImHdRM6FtLwn7tSAZ/97QWWl+pcG7nUk50ydc1iyul+a9VziOBwA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hqz8gynuw92qwqqwneha43gk7v2ectgt5qh7jv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["51","1","1","today is 2022/12/28"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoqzO7yvqDb8ix9Ufr6y6zvK2ItSYqdBvCCZqHw4viQm"},"signature":"C88iUBx+yBPslm+viLY1ZpYgOZp9j9Ke7zQPsVC27Ah1e35CpuUhRk4SCDq+bLUTe0+HN+TPUah8D4jEcJVDaQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vhpkcslv9nejkdg84sgdw60qgmj3mhja4ly9y5","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"aAQFVelVkcxJkY0iH2UDxZ5awIM4/nrglndPhvUFsQUR2arV2k/sD1ZhlZ4P9d5uLLxBqGSYFl2aLCSwzUlaEA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g156nsjzaqyvkypwjxptasnsf407se9y7lqf37s3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"olBS7xoT3OyYC4CeP8Tv23B0Zh00ZYtB/FDa1BuNcIFT4+04RZCBEj3Rf71LuT/nJESVGrVzrqRdrriasWXYBQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g156nsjzaqyvkypwjxptasnsf407se9y7lqf37s3","send":"","pkg_path":"gno.land/r/boards","func":"CreateBoard","args":["S3CUR1TY"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuCbdmb9LQP11OyrwjizerUtkq9qlFYPty3A5MYvWSGA"},"signature":"wy0HuK5aNhoN94xwVpyVl9Qbxkn/L252+isaFJIr255e7npCBcXuJNJC9c/vq8KLkiFQzoZ1Pyz95xEHDy2luw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g156nsjzaqyvkypwjxptasnsf407se9y7lqf37s3","send":"","pkg_path":"gno.land/r/boards","func":"CreateBoard","args":["S3CUR1TY_BOARD"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuCbdmb9LQP11OyrwjizerUtkq9qlFYPty3A5MYvWSGA"},"signature":"1voLff8xIcQjyDxFyKBWleMLD1dDBiA/2WwnWNP4oRl8yTst5WTSgVY/bI6UOeD2cKfPS2j7vzn4nhaUW5SeCw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g156nsjzaqyvkypwjxptasnsf407se9y7lqf37s3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["S3CUR1TY"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuCbdmb9LQP11OyrwjizerUtkq9qlFYPty3A5MYvWSGA"},"signature":"RAntlEgCI65YsFVUroOwL2NGPJCxSPn4lWtMwLErPeM8E5Z8xVLzxMRrvsbS4OD6p0uGrOGaWBAmtWCvi2Kw5Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g156nsjzaqyvkypwjxptasnsf407se9y7lqf37s3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["S3CUR1TY"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuCbdmb9LQP11OyrwjizerUtkq9qlFYPty3A5MYvWSGA"},"signature":"RD7xqDeXrK0TKl8zg2Awf5ANvQm4aFwp1H3HIQ+i1d0+PhqKjYqYhqBe4tSKluJhHnQPNcTZQmovK37lRgGIhg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g156nsjzaqyvkypwjxptasnsf407se9y7lqf37s3","send":"","pkg_path":"gno.land/r/demo/boards","func":"GetBoardIDFromName","args":["S3CUR1TY"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuCbdmb9LQP11OyrwjizerUtkq9qlFYPty3A5MYvWSGA"},"signature":"8D9bACig9Qcn3iZt9rQfFeJZWjujsHezTLdXpIjqsRt7R84AvcZSmI6cesOUHDCaxB3FJT2452HKni7jsdDZKQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g156nsjzaqyvkypwjxptasnsf407se9y7lqf37s3","send":"","pkg_path":"gno.land/r/demo/boards","func":"GetBoardIDFromName","args":["S3CUR1TY"]}],"fee":{"gas_wanted":"200000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuCbdmb9LQP11OyrwjizerUtkq9qlFYPty3A5MYvWSGA"},"signature":"Tj5v+CH0DR5ctBAUDaFpzlQ26jniZcJonSz+V4VwyC4NZrNRwbfySGbORArvf9HFDHmETM3U4MXwCmp8hv56tw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g156nsjzaqyvkypwjxptasnsf407se9y7lqf37s3","send":"","pkg_path":"gno.land/r/demo/boards","func":"GetBoardIDFromName","args":["S3CUR1TY"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuCbdmb9LQP11OyrwjizerUtkq9qlFYPty3A5MYvWSGA"},"signature":"zFHfkGgwAh5Ah9g+7yUehubaCyht3Wwjk1/1rsTQv/RpxxR+oJSw4TIStWxyWf/tAkZ1qhOpIU7WPm3YaTp9JQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g156nsjzaqyvkypwjxptasnsf407se9y7lqf37s3","send":"","pkg_path":"gno.land/r/demo/boards","func":"GetBoardIDFromName","args":["s3cur1ty"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuCbdmb9LQP11OyrwjizerUtkq9qlFYPty3A5MYvWSGA"},"signature":"fmCzeVdBj4G44c3yWb4TFjap6ZUobr1bxbH+zV5sBnNhWDipWEk6JdiUKYeo1cQfKJbO46lHs/HayXEFOINbig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g156nsjzaqyvkypwjxptasnsf407se9y7lqf37s3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["S3CUR1TY"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuCbdmb9LQP11OyrwjizerUtkq9qlFYPty3A5MYvWSGA"},"signature":"KygoKIF/8HqluWdAD63EVMU1ArFkwbTPGhEuGezoJkhWq5nvbIEHjwfhYC3gn0YXuSDWLW1r+2evlmbcZQd7Ug=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ckddn039khwxzu4v5mc8n34vd9ksaks2l6c3kg","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"66WWOHCdHSkZnXLTG5vhTqZp8LhFWQPzDNM9mZgWWvtVAZw92DQZQVy5hPgeI0Sr6CWGQ1LpVnvXXTEmPN1VOQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/boards","func":"GetBoardIDFromName","args":["superluck"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"YFQdX+Ew+Y4dsT/O6OTnE97OM8beJZtLBvt3A88w9AE3U/IzV93bXse+00xH2zUUMNWvMnTCnkg758WZD15YqQ=="}],"memo":"12313"}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1uh4h2wm078zhyy4zwh24qssghg0e4geeuq2vj9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"E3rP/zI0r1ef2BD7+GyqJUnmRvbpp9rVVfyIaNudeG0nALD5wnlVpNoH2uxozG+oEvcX37FeXyJ6vR98ZX2vqw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uh4h2wm078zhyy4zwh24qssghg0e4geeuq2vj9","send":"","pkg_path":"gno.land/r/boards","func":"CreateBoard","args":["trongboard"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyUOJz4Rk0Acvd+mtGt9cFDrQWtSweZz2nSiMhLp38Gz"},"signature":"XXh2medv96HZJ0lD5WBPzDSHA7AJkMLwnzikfbkQ0wc0Cl5lACttb1SO1QZKLmflFVAv4WpeAauegiJL8a22Iw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1d9ys48hyc9nxzagw6xxny0f9eanpr6rfhl0t7p","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"4Bfuk3qkpiiiL6NjGYJp7pfBXXrVc1s5daroxaDIZD1CgHPGPKIIP57LjdkVo2xTL4w0JVk9fWyRNea/9NJ8CA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1d9ys48hyc9nxzagw6xxny0f9eanpr6rfhl0t7p","send":"","pkg_path":"gno.land/r/boards","func":"CreateBoard","args":["test"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2mBiXy3Vxfh7cc/Gl9H/ZLw7ULOVUk5fupjmn6+/W2P"},"signature":"fpINfQ6eK8F13J2Ps3t3Sx6vasvlsMoO9/If+/VfxwwKOVj0pj8Nl0JPXLYVwN4g/fOnGFImDlA1SpTLHMho/w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1d9ys48hyc9nxzagw6xxny0f9eanpr6rfhl0t7p","send":"","pkg_path":"app.gno.tools/r/demo/boards","func":"CreateBoard","args":["test"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2mBiXy3Vxfh7cc/Gl9H/ZLw7ULOVUk5fupjmn6+/W2P"},"signature":"tuA5cdAv9tlEVBF+diRq2/U8l/i6o+DMQhQFHZjQ650B/NVdkTpAz6XnnBCPeRP5fPn6Io8lDQT0CbgwmnLRaw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lnsppwynw6hflnuxvkjvrdhjwgcfd2qgxg0pjv","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"/Ko73DC0mmBh5884x7co+rPZb6wdDOQut0A1/woly0VYgfue5kPoC9yB87NblFrhYcTDu1OyGr42UybrSsGyng=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1lnsppwynw6hflnuxvkjvrdhjwgcfd2qgxg0pjv","package":{"Name":"avl","Path":"gno.land/p/demo/avl","Files":[{"Name":"avl.gno","Body":"package avl\n\n// Tree\n\ntype Tree struct {\n\tkey       string\n\tvalue     interface{}\n\theight    int8\n\tsize      int\n\tleftTree  *Tree\n\trightTree *Tree\n}\n\nfunc NewTree(key string, value interface{}) *Tree {\n\treturn \u0026Tree{\n\t\tkey:    key,\n\t\tvalue:  value,\n\t\theight: 0,\n\t\tsize:   1,\n\t}\n}\n\nfunc (tree *Tree) Size() int {\n\tif tree == nil {\n\t\treturn 0\n\t}\n\treturn tree.size\n}\n\nfunc (tree *Tree) IsLeaf() bool {\n\treturn tree.height == 0\n}\n\nfunc (tree *Tree) Key() string {\n\treturn tree.key\n}\n\nfunc (tree *Tree) Value() interface{} {\n\treturn tree.value\n}\n\nfunc (tree *Tree) _copy() *Tree {\n\tif tree.height == 0 {\n\t\tpanic(\"Why are you copying a value tree?\")\n\t}\n\treturn \u0026Tree{\n\t\tkey:       tree.key,\n\t\theight:    tree.height,\n\t\tsize:      tree.size,\n\t\tleftTree:  tree.leftTree,\n\t\trightTree: tree.rightTree,\n\t}\n}\n\nfunc (tree *Tree) Has(key string) (has bool) {\n\tif tree == nil {\n\t\treturn false\n\t}\n\tif tree.key == key {\n\t\treturn true\n\t}\n\tif tree.height == 0 {\n\t\treturn false\n\t} else {\n\t\tif key \u003c tree.key {\n\t\t\treturn tree.getLeftTree().Has(key)\n\t\t} else {\n\t\t\treturn tree.getRightTree().Has(key)\n\t\t}\n\t}\n}\n\nfunc (tree *Tree) Get(key string) (index int, value interface{}, exists bool) {\n\tif tree == nil {\n\t\treturn 0, nil, false\n\t}\n\tif tree.height == 0 {\n\t\tif tree.key == key {\n\t\t\treturn 0, tree.value, true\n\t\t} else if tree.key \u003c key {\n\t\t\treturn 1, nil, false\n\t\t} else {\n\t\t\treturn 0, nil, false\n\t\t}\n\t} else {\n\t\tif key \u003c tree.key {\n\t\t\treturn tree.getLeftTree().Get(key)\n\t\t} else {\n\t\t\trightTree := tree.getRightTree()\n\t\t\tindex, value, exists = rightTree.Get(key)\n\t\t\tindex += tree.size - rightTree.size\n\t\t\treturn index, value, exists\n\t\t}\n\t}\n}\n\nfunc (tree *Tree) GetByIndex(index int) (key string, value interface{}) {\n\tif tree.height == 0 {\n\t\tif index == 0 {\n\t\t\treturn tree.key, tree.value\n\t\t} else {\n\t\t\tpanic(\"GetByIndex asked for invalid index\")\n\t\t\treturn \"\", nil\n\t\t}\n\t} else {\n\t\t// TODO: could improve this by storing the sizes\n\t\tleftTree := tree.getLeftTree()\n\t\tif index \u003c leftTree.size {\n\t\t\treturn leftTree.GetByIndex(index)\n\t\t} else {\n\t\t\treturn tree.getRightTree().GetByIndex(index - leftTree.size)\n\t\t}\n\t}\n}\n\n// XXX consider a better way to do this... perhaps split Tree from Node.\nfunc (tree *Tree) Set(key string, value interface{}) (newSelf *Tree, updated bool) {\n\tif tree == nil {\n\t\treturn NewTree(key, value), false\n\t}\n\tif tree.height == 0 {\n\t\tif key \u003c tree.key {\n\t\t\treturn \u0026Tree{\n\t\t\t\tkey:       tree.key,\n\t\t\t\theight:    1,\n\t\t\t\tsize:      2,\n\t\t\t\tleftTree:  NewTree(key, value),\n\t\t\t\trightTree: tree,\n\t\t\t}, false\n\t\t} else if key == tree.key {\n\t\t\treturn NewTree(key, value), true\n\t\t} else {\n\t\t\treturn \u0026Tree{\n\t\t\t\tkey:       key,\n\t\t\t\theight:    1,\n\t\t\t\tsize:      2,\n\t\t\t\tleftTree:  tree,\n\t\t\t\trightTree: NewTree(key, value),\n\t\t\t}, false\n\t\t}\n\t} else {\n\t\ttree = tree._copy()\n\t\tif key \u003c tree.key {\n\t\t\ttree.leftTree, updated = tree.getLeftTree().Set(key, value)\n\t\t} else {\n\t\t\ttree.rightTree, updated = tree.getRightTree().Set(key, value)\n\t\t}\n\t\tif updated {\n\t\t\treturn tree, updated\n\t\t} else {\n\t\t\ttree.calcHeightAndSize()\n\t\t\treturn tree.balance(), updated\n\t\t}\n\t}\n}\n\n// newTree: The new tree to replace tree after remove.\n// newKey: new leftmost leaf key for tree after successfully removing 'key' if changed.\n// value: removed value.\nfunc (tree *Tree) Remove(key string) (\n\tnewTree *Tree, newKey string, value interface{}, removed bool,\n) {\n\tif tree == nil {\n\t\treturn nil, \"\", nil, false\n\t}\n\tif tree.height == 0 {\n\t\tif key == tree.key {\n\t\t\treturn nil, \"\", tree.value, true\n\t\t} else {\n\t\t\treturn tree, \"\", nil, false\n\t\t}\n\t} else {\n\t\tif key \u003c tree.key {\n\t\t\tvar newLeftTree *Tree\n\t\t\tnewLeftTree, newKey, value, removed = tree.getLeftTree().Remove(key)\n\t\t\tif !removed {\n\t\t\t\treturn tree, \"\", value, false\n\t\t\t} else if newLeftTree == nil { // left tree held value, was removed\n\t\t\t\treturn tree.rightTree, tree.key, value, true\n\t\t\t}\n\t\t\ttree = tree._copy()\n\t\t\ttree.leftTree = newLeftTree\n\t\t\ttree.calcHeightAndSize()\n\t\t\ttree = tree.balance()\n\t\t\treturn tree, newKey, value, true\n\t\t} else {\n\t\t\tvar newRightTree *Tree\n\t\t\tnewRightTree, newKey, value, removed = tree.getRightTree().Remove(key)\n\t\t\tif !removed {\n\t\t\t\treturn tree, \"\", value, false\n\t\t\t} else if newRightTree == nil { // right tree held value, was removed\n\t\t\t\treturn tree.leftTree, \"\", value, true\n\t\t\t}\n\t\t\ttree = tree._copy()\n\t\t\ttree.rightTree = newRightTree\n\t\t\tif newKey != \"\" {\n\t\t\t\ttree.key = newKey\n\t\t\t}\n\t\t\ttree.calcHeightAndSize()\n\t\t\ttree = tree.balance()\n\t\t\treturn tree, \"\", value, true\n\t\t}\n\t}\n}\n\nfunc (tree *Tree) getLeftTree() *Tree {\n\treturn tree.leftTree\n}\n\nfunc (tree *Tree) getRightTree() *Tree {\n\treturn tree.rightTree\n}\n\n// NOTE: overwrites tree\n// TODO: optimize balance \u0026 rotate\nfunc (tree *Tree) rotateRight() *Tree {\n\ttree = tree._copy()\n\tl := tree.getLeftTree()\n\t_l := l._copy()\n\n\t_lrCached := _l.rightTree\n\t_l.rightTree = tree\n\ttree.leftTree = _lrCached\n\n\ttree.calcHeightAndSize()\n\t_l.calcHeightAndSize()\n\n\treturn _l\n}\n\n// NOTE: overwrites tree\n// TODO: optimize balance \u0026 rotate\nfunc (tree *Tree) rotateLeft() *Tree {\n\ttree = tree._copy()\n\tr := tree.getRightTree()\n\t_r := r._copy()\n\n\t_rlCached := _r.leftTree\n\t_r.leftTree = tree\n\ttree.rightTree = _rlCached\n\n\ttree.calcHeightAndSize()\n\t_r.calcHeightAndSize()\n\n\treturn _r\n}\n\n// NOTE: mutates height and size\nfunc (tree *Tree) calcHeightAndSize() {\n\ttree.height = maxInt8(tree.getLeftTree().height, tree.getRightTree().height) + 1\n\ttree.size = tree.getLeftTree().size + tree.getRightTree().size\n}\n\nfunc (tree *Tree) calcBalance() int {\n\treturn int(tree.getLeftTree().height) - int(tree.getRightTree().height)\n}\n\n// NOTE: assumes that tree can be modified\n// TODO: optimize balance \u0026 rotate\nfunc (tree *Tree) balance() (newSelf *Tree) {\n\tbalance := tree.calcBalance()\n\tif balance \u003e 1 {\n\t\tif tree.getLeftTree().calcBalance() \u003e= 0 {\n\t\t\t// Left Left Case\n\t\t\treturn tree.rotateRight()\n\t\t} else {\n\t\t\t// Left Right Case\n\t\t\t// tree = tree._copy()\n\t\t\tleft := tree.getLeftTree()\n\t\t\ttree.leftTree = left.rotateLeft()\n\t\t\t// tree.calcHeightAndSize()\n\t\t\treturn tree.rotateRight()\n\t\t}\n\t}\n\tif balance \u003c -1 {\n\t\tif tree.getRightTree().calcBalance() \u003c= 0 {\n\t\t\t// Right Right Case\n\t\t\treturn tree.rotateLeft()\n\t\t} else {\n\t\t\t// Right Left Case\n\t\t\t// tree = tree._copy()\n\t\t\tright := tree.getRightTree()\n\t\t\ttree.rightTree = right.rotateRight()\n\t\t\t// tree.calcHeightAndSize()\n\t\t\treturn tree.rotateLeft()\n\t\t}\n\t}\n\t// Nothing changed\n\treturn tree\n}\n\n// Shortcut for TraverseInRange.\nfunc (tree *Tree) Iterate(start, end string, cb func(*Tree) bool) bool {\n\treturn tree.TraverseInRange(start, end, true, true, cb)\n}\n\n// Shortcut for TraverseInRange.\nfunc (tree *Tree) IterateReverse(start, end string, cb func(*Tree) bool) bool {\n\treturn tree.TraverseInRange(start, end, false, true, cb)\n}\n\n// TraverseInRange traverses all nodes, including inner nodes.\n// Start is inclusive and end is exclusive when ascending,\n// Start and end are inclusive when descending.\n// Empty start and empty end denote no start and no end.\n// If leavesOnly is true, only visit leaf nodes.\n// NOTE: To simulate an exclusive reverse traversal,\n// just append 0x00 to start.\nfunc (tree *Tree) TraverseInRange(start, end string, ascending bool, leavesOnly bool, cb func(*Tree) bool) bool {\n\tif tree == nil {\n\t\treturn false\n\t}\n\tafterStart := (start == \"\" || start \u003c tree.key)\n\tstartOrAfter := (start == \"\" || start \u003c= tree.key)\n\tbeforeEnd := false\n\tif ascending {\n\t\tbeforeEnd = (end == \"\" || tree.key \u003c end)\n\t} else {\n\t\tbeforeEnd = (end == \"\" || tree.key \u003c= end)\n\t}\n\n\t// Run callback per inner/leaf node.\n\tstop := false\n\tif (!tree.IsLeaf() \u0026\u0026 !leavesOnly) ||\n\t\t(tree.IsLeaf() \u0026\u0026 startOrAfter \u0026\u0026 beforeEnd) {\n\t\tstop = cb(tree)\n\t\tif stop {\n\t\t\treturn stop\n\t\t}\n\t}\n\tif tree.IsLeaf() {\n\t\treturn stop\n\t}\n\n\tif ascending {\n\t\t// check lower trees, then higher\n\t\tif afterStart {\n\t\t\tstop = tree.getLeftTree().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t\tif stop {\n\t\t\treturn stop\n\t\t}\n\t\tif beforeEnd {\n\t\t\tstop = tree.getRightTree().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t} else {\n\t\t// check the higher trees first\n\t\tif beforeEnd {\n\t\t\tstop = tree.getRightTree().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t\tif stop {\n\t\t\treturn stop\n\t\t}\n\t\tif afterStart {\n\t\t\tstop = tree.getLeftTree().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t}\n\n\treturn stop\n}\n\n// Only used in testing...\nfunc (tree *Tree) lmd() *Tree {\n\tif tree.height == 0 {\n\t\treturn tree\n\t}\n\treturn tree.getLeftTree().lmd()\n}\n\n// Only used in testing...\nfunc (tree *Tree) rmd() *Tree {\n\tif tree.height == 0 {\n\t\treturn tree\n\t}\n\treturn tree.getRightTree().rmd()\n}\n\nfunc maxInt8(a, b int8) int8 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n"},{"Name":"mut_tree.gno","Body":"package avl\n\n// MutTree\n\ntype MutTree struct {\n\ttree *Tree\n}\n\nfunc NewMutTree() *MutTree {\n\treturn \u0026MutTree{\n\t\ttree: nil,\n\t}\n}\n\nfunc (mtree *MutTree) Size() int {\n\treturn mtree.tree.Size()\n}\n\nfunc (mtree *MutTree) Has(key string) (has bool) {\n\treturn mtree.tree.Has(key)\n}\n\nfunc (mtree *MutTree) Get(key string) (value interface{}, exists bool) {\n\t_, value, exists = mtree.tree.Get(key)\n\treturn\n}\n\nfunc (mtree *MutTree) GetByIndex(index int) (key string, value interface{}) {\n\treturn mtree.tree.GetByIndex(index)\n}\n\nfunc (mtree *MutTree) Set(key string, value interface{}) (updated bool) {\n\tnewtree, updated := mtree.tree.Set(key, value)\n\tmtree.tree = newtree\n\treturn updated\n}\n\nfunc (mtree *MutTree) Remove(key string) (value interface{}, removed bool) {\n\tnewtree, _, value, removed := mtree.tree.Remove(key)\n\tmtree.tree = newtree\n\treturn value, removed\n}\n\n// Shortcut for TraverseInRange.\nfunc (mtree *MutTree) Iterate(start, end string, cb func(*Tree) bool) bool {\n\treturn mtree.tree.TraverseInRange(start, end, true, true, cb)\n}\n\n// Shortcut for TraverseInRange.\nfunc (mtree *MutTree) IterateReverse(start, end string, cb func(*Tree) bool) bool {\n\treturn mtree.tree.TraverseInRange(start, end, false, true, cb)\n}\n"},{"Name":"z_0_filetest.gno","Body":"// PKGPATH: gno.land/r/test\npackage test\n\nimport (\n\t\"gno.land/p/demo/avl\"\n)\n\nvar tree *avl.Tree\n\nfunc init() {\n\ttree = avl.NewTree(\"key0\", \"value0\")\n\t// tree, _ = tree.Set(\"key0\", \"value0\")\n}\n\nfunc main() {\n\tvar updated bool\n\ttree, updated = tree.Set(\"key1\", \"value1\")\n\t// println(tree, updated)\n\tprintln(updated, tree.Size())\n}\n\n// Output:\n// false 2\n\n// Realm:\n// switchrealm[\"gno.land/r/test\"]\n// u[a8ada09dee16d791fd406d629fe29bb0ed084a30:4]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key0\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"value0\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:4\",\n//         \"ModTime\": \"5\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:6]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key1\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"value1\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:6\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:5]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key1\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"88d6986e67eb0c95b4819a9cf8fbf0fcb463d956\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:4\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"b42318d02c6407284a2c7939698eddcdb236749e\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:6\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// u[a8ada09dee16d791fd406d629fe29bb0ed084a30:2]={\n//     \"Blank\": {},\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"IsEscaped\": true,\n//         \"ModTime\": \"4\",\n//         \"RefCount\": \"2\"\n//     },\n//     \"Parent\": null,\n//     \"Source\": {\n//         \"@type\": \"/gno.RefNode\",\n//         \"BlockNode\": null,\n//         \"Location\": {\n//             \"File\": \"\",\n//             \"Line\": \"0\",\n//             \"Nonce\": \"0\",\n//             \"PkgPath\": \"gno.land/r/test\"\n//         }\n//     },\n//     \"Values\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"init.0\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"10\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"main\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"15\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"b58c2c6a28f7606b2e42ceca75f2da474ba4a623\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\"\n//                     }\n//                 }\n//             }\n//         }\n//     ]\n// }\n"},{"Name":"z_1_filetest.gno","Body":"// PKGPATH: gno.land/r/test\npackage test\n\nimport (\n\t\"gno.land/p/demo/avl\"\n)\n\nvar tree *avl.Tree\n\nfunc init() {\n\ttree = avl.NewTree(\"key0\", \"value0\")\n\ttree, _ = tree.Set(\"key1\", \"value1\")\n}\n\nfunc main() {\n\tvar updated bool\n\ttree, updated = tree.Set(\"key2\", \"value2\")\n\t// println(tree, updated)\n\tprintln(updated, tree.Size())\n}\n\n// Output:\n// false 3\n\n// Realm:\n// switchrealm[\"gno.land/r/test\"]\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:9]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key2\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"value2\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:9\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:8]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key2\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"bac14657044a4dbc78c87aaf6c08c38b6d5acca2\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:6\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"26a241729119ba3e93757282656c60c82924b881\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:9\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:7\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:7]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key1\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AwAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"07a4fe3e53c0b930af41d04712c28adb5c462e6b\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"1ac455de553fba7821eb3f1786b130774042ee54\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:7\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// u[a8ada09dee16d791fd406d629fe29bb0ed084a30:2]={\n//     \"Blank\": {},\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"IsEscaped\": true,\n//         \"ModTime\": \"6\",\n//         \"RefCount\": \"2\"\n//     },\n//     \"Parent\": null,\n//     \"Source\": {\n//         \"@type\": \"/gno.RefNode\",\n//         \"BlockNode\": null,\n//         \"Location\": {\n//             \"File\": \"\",\n//             \"Line\": \"0\",\n//             \"Nonce\": \"0\",\n//             \"PkgPath\": \"gno.land/r/test\"\n//         }\n//     },\n//     \"Values\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"init.0\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"10\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"main\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"15\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"f6613fd4bc857c62f0d3b5f3bd2416aa7a46191c\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:7\"\n//                     }\n//                 }\n//             }\n//         }\n//     ]\n// }\n// d[a8ada09dee16d791fd406d629fe29bb0ed084a30:4]\n"}]},"deposit":"100ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiTPFM7EjFSP3X5Vs/A4ArLVnscpqadoPU4Yz3UTSYzu"},"signature":"CIizgACja5bmBCJ2UPM6cAlf8Uqs4sUommVd6GV5Vio5PykIG6Ns5ecpl7do+djwqKE6K/6dfyHTMqMrwQP3gg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d9ys48hyc9nxzagw6xxny0f9eanpr6rfhl0t7p","package":{"Name":"avl","Path":"gno.land/p/demo/avol","Files":[{"Name":"avl.gno","Body":"package avl\n\n// Tree\n\ntype Tree struct {\n\tkey       string\n\tvalue     interface{}\n\theight    int8\n\tsize      int\n\tleftTree  *Tree\n\trightTree *Tree\n}\n\nfunc NewTree(key string, value interface{}) *Tree {\n\treturn \u0026Tree{\n\t\tkey:    key,\n\t\tvalue:  value,\n\t\theight: 0,\n\t\tsize:   1,\n\t}\n}\n\nfunc (tree *Tree) Size() int {\n\tif tree == nil {\n\t\treturn 0\n\t}\n\treturn tree.size\n}\n\nfunc (tree *Tree) IsLeaf() bool {\n\treturn tree.height == 0\n}\n\nfunc (tree *Tree) Key() string {\n\treturn tree.key\n}\n\nfunc (tree *Tree) Value() interface{} {\n\treturn tree.value\n}\n\nfunc (tree *Tree) _copy() *Tree {\n\tif tree.height == 0 {\n\t\tpanic(\"Why are you copying a value tree?\")\n\t}\n\treturn \u0026Tree{\n\t\tkey:       tree.key,\n\t\theight:    tree.height,\n\t\tsize:      tree.size,\n\t\tleftTree:  tree.leftTree,\n\t\trightTree: tree.rightTree,\n\t}\n}\n\nfunc (tree *Tree) Has(key string) (has bool) {\n\tif tree == nil {\n\t\treturn false\n\t}\n\tif tree.key == key {\n\t\treturn true\n\t}\n\tif tree.height == 0 {\n\t\treturn false\n\t} else {\n\t\tif key \u003c tree.key {\n\t\t\treturn tree.getLeftTree().Has(key)\n\t\t} else {\n\t\t\treturn tree.getRightTree().Has(key)\n\t\t}\n\t}\n}\n\nfunc (tree *Tree) Get(key string) (index int, value interface{}, exists bool) {\n\tif tree == nil {\n\t\treturn 0, nil, false\n\t}\n\tif tree.height == 0 {\n\t\tif tree.key == key {\n\t\t\treturn 0, tree.value, true\n\t\t} else if tree.key \u003c key {\n\t\t\treturn 1, nil, false\n\t\t} else {\n\t\t\treturn 0, nil, false\n\t\t}\n\t} else {\n\t\tif key \u003c tree.key {\n\t\t\treturn tree.getLeftTree().Get(key)\n\t\t} else {\n\t\t\trightTree := tree.getRightTree()\n\t\t\tindex, value, exists = rightTree.Get(key)\n\t\t\tindex += tree.size - rightTree.size\n\t\t\treturn index, value, exists\n\t\t}\n\t}\n}\n\nfunc (tree *Tree) GetByIndex(index int) (key string, value interface{}) {\n\tif tree.height == 0 {\n\t\tif index == 0 {\n\t\t\treturn tree.key, tree.value\n\t\t} else {\n\t\t\tpanic(\"GetByIndex asked for invalid index\")\n\t\t\treturn \"\", nil\n\t\t}\n\t} else {\n\t\t// TODO: could improve this by storing the sizes\n\t\tleftTree := tree.getLeftTree()\n\t\tif index \u003c leftTree.size {\n\t\t\treturn leftTree.GetByIndex(index)\n\t\t} else {\n\t\t\treturn tree.getRightTree().GetByIndex(index - leftTree.size)\n\t\t}\n\t}\n}\n\n// XXX consider a better way to do this... perhaps split Tree from Node.\nfunc (tree *Tree) Set(key string, value interface{}) (newSelf *Tree, updated bool) {\n\tif tree == nil {\n\t\treturn NewTree(key, value), false\n\t}\n\tif tree.height == 0 {\n\t\tif key \u003c tree.key {\n\t\t\treturn \u0026Tree{\n\t\t\t\tkey:       tree.key,\n\t\t\t\theight:    1,\n\t\t\t\tsize:      2,\n\t\t\t\tleftTree:  NewTree(key, value),\n\t\t\t\trightTree: tree,\n\t\t\t}, false\n\t\t} else if key == tree.key {\n\t\t\treturn NewTree(key, value), true\n\t\t} else {\n\t\t\treturn \u0026Tree{\n\t\t\t\tkey:       key,\n\t\t\t\theight:    1,\n\t\t\t\tsize:      2,\n\t\t\t\tleftTree:  tree,\n\t\t\t\trightTree: NewTree(key, value),\n\t\t\t}, false\n\t\t}\n\t} else {\n\t\ttree = tree._copy()\n\t\tif key \u003c tree.key {\n\t\t\ttree.leftTree, updated = tree.getLeftTree().Set(key, value)\n\t\t} else {\n\t\t\ttree.rightTree, updated = tree.getRightTree().Set(key, value)\n\t\t}\n\t\tif updated {\n\t\t\treturn tree, updated\n\t\t} else {\n\t\t\ttree.calcHeightAndSize()\n\t\t\treturn tree.balance(), updated\n\t\t}\n\t}\n}\n\n// newTree: The new tree to replace tree after remove.\n// newKey: new leftmost leaf key for tree after successfully removing 'key' if changed.\n// value: removed value.\nfunc (tree *Tree) Remove(key string) (\n\tnewTree *Tree, newKey string, value interface{}, removed bool,\n) {\n\tif tree == nil {\n\t\treturn nil, \"\", nil, false\n\t}\n\tif tree.height == 0 {\n\t\tif key == tree.key {\n\t\t\treturn nil, \"\", tree.value, true\n\t\t} else {\n\t\t\treturn tree, \"\", nil, false\n\t\t}\n\t} else {\n\t\tif key \u003c tree.key {\n\t\t\tvar newLeftTree *Tree\n\t\t\tnewLeftTree, newKey, value, removed = tree.getLeftTree().Remove(key)\n\t\t\tif !removed {\n\t\t\t\treturn tree, \"\", value, false\n\t\t\t} else if newLeftTree == nil { // left tree held value, was removed\n\t\t\t\treturn tree.rightTree, tree.key, value, true\n\t\t\t}\n\t\t\ttree = tree._copy()\n\t\t\ttree.leftTree = newLeftTree\n\t\t\ttree.calcHeightAndSize()\n\t\t\ttree = tree.balance()\n\t\t\treturn tree, newKey, value, true\n\t\t} else {\n\t\t\tvar newRightTree *Tree\n\t\t\tnewRightTree, newKey, value, removed = tree.getRightTree().Remove(key)\n\t\t\tif !removed {\n\t\t\t\treturn tree, \"\", value, false\n\t\t\t} else if newRightTree == nil { // right tree held value, was removed\n\t\t\t\treturn tree.leftTree, \"\", value, true\n\t\t\t}\n\t\t\ttree = tree._copy()\n\t\t\ttree.rightTree = newRightTree\n\t\t\tif newKey != \"\" {\n\t\t\t\ttree.key = newKey\n\t\t\t}\n\t\t\ttree.calcHeightAndSize()\n\t\t\ttree = tree.balance()\n\t\t\treturn tree, \"\", value, true\n\t\t}\n\t}\n}\n\nfunc (tree *Tree) getLeftTree() *Tree {\n\treturn tree.leftTree\n}\n\nfunc (tree *Tree) getRightTree() *Tree {\n\treturn tree.rightTree\n}\n\n// NOTE: overwrites tree\n// TODO: optimize balance \u0026 rotate\nfunc (tree *Tree) rotateRight() *Tree {\n\ttree = tree._copy()\n\tl := tree.getLeftTree()\n\t_l := l._copy()\n\n\t_lrCached := _l.rightTree\n\t_l.rightTree = tree\n\ttree.leftTree = _lrCached\n\n\ttree.calcHeightAndSize()\n\t_l.calcHeightAndSize()\n\n\treturn _l\n}\n\n// NOTE: overwrites tree\n// TODO: optimize balance \u0026 rotate\nfunc (tree *Tree) rotateLeft() *Tree {\n\ttree = tree._copy()\n\tr := tree.getRightTree()\n\t_r := r._copy()\n\n\t_rlCached := _r.leftTree\n\t_r.leftTree = tree\n\ttree.rightTree = _rlCached\n\n\ttree.calcHeightAndSize()\n\t_r.calcHeightAndSize()\n\n\treturn _r\n}\n\n// NOTE: mutates height and size\nfunc (tree *Tree) calcHeightAndSize() {\n\ttree.height = maxInt8(tree.getLeftTree().height, tree.getRightTree().height) + 1\n\ttree.size = tree.getLeftTree().size + tree.getRightTree().size\n}\n\nfunc (tree *Tree) calcBalance() int {\n\treturn int(tree.getLeftTree().height) - int(tree.getRightTree().height)\n}\n\n// NOTE: assumes that tree can be modified\n// TODO: optimize balance \u0026 rotate\nfunc (tree *Tree) balance() (newSelf *Tree) {\n\tbalance := tree.calcBalance()\n\tif balance \u003e 1 {\n\t\tif tree.getLeftTree().calcBalance() \u003e= 0 {\n\t\t\t// Left Left Case\n\t\t\treturn tree.rotateRight()\n\t\t} else {\n\t\t\t// Left Right Case\n\t\t\t// tree = tree._copy()\n\t\t\tleft := tree.getLeftTree()\n\t\t\ttree.leftTree = left.rotateLeft()\n\t\t\t// tree.calcHeightAndSize()\n\t\t\treturn tree.rotateRight()\n\t\t}\n\t}\n\tif balance \u003c -1 {\n\t\tif tree.getRightTree().calcBalance() \u003c= 0 {\n\t\t\t// Right Right Case\n\t\t\treturn tree.rotateLeft()\n\t\t} else {\n\t\t\t// Right Left Case\n\t\t\t// tree = tree._copy()\n\t\t\tright := tree.getRightTree()\n\t\t\ttree.rightTree = right.rotateRight()\n\t\t\t// tree.calcHeightAndSize()\n\t\t\treturn tree.rotateLeft()\n\t\t}\n\t}\n\t// Nothing changed\n\treturn tree\n}\n\n// Shortcut for TraverseInRange.\nfunc (tree *Tree) Iterate(start, end string, cb func(*Tree) bool) bool {\n\treturn tree.TraverseInRange(start, end, true, true, cb)\n}\n\n// Shortcut for TraverseInRange.\nfunc (tree *Tree) IterateReverse(start, end string, cb func(*Tree) bool) bool {\n\treturn tree.TraverseInRange(start, end, false, true, cb)\n}\n\n// TraverseInRange traverses all nodes, including inner nodes.\n// Start is inclusive and end is exclusive when ascending,\n// Start and end are inclusive when descending.\n// Empty start and empty end denote no start and no end.\n// If leavesOnly is true, only visit leaf nodes.\n// NOTE: To simulate an exclusive reverse traversal,\n// just append 0x00 to start.\nfunc (tree *Tree) TraverseInRange(start, end string, ascending bool, leavesOnly bool, cb func(*Tree) bool) bool {\n\tif tree == nil {\n\t\treturn false\n\t}\n\tafterStart := (start == \"\" || start \u003c tree.key)\n\tstartOrAfter := (start == \"\" || start \u003c= tree.key)\n\tbeforeEnd := false\n\tif ascending {\n\t\tbeforeEnd = (end == \"\" || tree.key \u003c end)\n\t} else {\n\t\tbeforeEnd = (end == \"\" || tree.key \u003c= end)\n\t}\n\n\t// Run callback per inner/leaf node.\n\tstop := false\n\tif (!tree.IsLeaf() \u0026\u0026 !leavesOnly) ||\n\t\t(tree.IsLeaf() \u0026\u0026 startOrAfter \u0026\u0026 beforeEnd) {\n\t\tstop = cb(tree)\n\t\tif stop {\n\t\t\treturn stop\n\t\t}\n\t}\n\tif tree.IsLeaf() {\n\t\treturn stop\n\t}\n\n\tif ascending {\n\t\t// check lower trees, then higher\n\t\tif afterStart {\n\t\t\tstop = tree.getLeftTree().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t\tif stop {\n\t\t\treturn stop\n\t\t}\n\t\tif beforeEnd {\n\t\t\tstop = tree.getRightTree().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t} else {\n\t\t// check the higher trees first\n\t\tif beforeEnd {\n\t\t\tstop = tree.getRightTree().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t\tif stop {\n\t\t\treturn stop\n\t\t}\n\t\tif afterStart {\n\t\t\tstop = tree.getLeftTree().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t}\n\n\treturn stop\n}\n\n// Only used in testing...\nfunc (tree *Tree) lmd() *Tree {\n\tif tree.height == 0 {\n\t\treturn tree\n\t}\n\treturn tree.getLeftTree().lmd()\n}\n\n// Only used in testing...\nfunc (tree *Tree) rmd() *Tree {\n\tif tree.height == 0 {\n\t\treturn tree\n\t}\n\treturn tree.getRightTree().rmd()\n}\n\nfunc maxInt8(a, b int8) int8 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n"},{"Name":"mut_tree.gno","Body":"package avl\n\n// MutTree\n\ntype MutTree struct {\n\ttree *Tree\n}\n\nfunc NewMutTree() *MutTree {\n\treturn \u0026MutTree{\n\t\ttree: nil,\n\t}\n}\n\nfunc (mtree *MutTree) Size() int {\n\treturn mtree.tree.Size()\n}\n\nfunc (mtree *MutTree) Has(key string) (has bool) {\n\treturn mtree.tree.Has(key)\n}\n\nfunc (mtree *MutTree) Get(key string) (value interface{}, exists bool) {\n\t_, value, exists = mtree.tree.Get(key)\n\treturn\n}\n\nfunc (mtree *MutTree) GetByIndex(index int) (key string, value interface{}) {\n\treturn mtree.tree.GetByIndex(index)\n}\n\nfunc (mtree *MutTree) Set(key string, value interface{}) (updated bool) {\n\tnewtree, updated := mtree.tree.Set(key, value)\n\tmtree.tree = newtree\n\treturn updated\n}\n\nfunc (mtree *MutTree) Remove(key string) (value interface{}, removed bool) {\n\tnewtree, _, value, removed := mtree.tree.Remove(key)\n\tmtree.tree = newtree\n\treturn value, removed\n}\n\n// Shortcut for TraverseInRange.\nfunc (mtree *MutTree) Iterate(start, end string, cb func(*Tree) bool) bool {\n\treturn mtree.tree.TraverseInRange(start, end, true, true, cb)\n}\n\n// Shortcut for TraverseInRange.\nfunc (mtree *MutTree) IterateReverse(start, end string, cb func(*Tree) bool) bool {\n\treturn mtree.tree.TraverseInRange(start, end, false, true, cb)\n}\n"},{"Name":"z_0_filetest.gno","Body":"// PKGPATH: gno.land/r/test\npackage test\n\nimport (\n\t\"gno.land/p/demo/avl\"\n)\n\nvar tree *avl.Tree\n\nfunc init() {\n\ttree = avl.NewTree(\"key0\", \"value0\")\n\t// tree, _ = tree.Set(\"key0\", \"value0\")\n}\n\nfunc main() {\n\tvar updated bool\n\ttree, updated = tree.Set(\"key1\", \"value1\")\n\t// println(tree, updated)\n\tprintln(updated, tree.Size())\n}\n\n// Output:\n// false 2\n\n// Realm:\n// switchrealm[\"gno.land/r/test\"]\n// u[a8ada09dee16d791fd406d629fe29bb0ed084a30:4]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key0\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"value0\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:4\",\n//         \"ModTime\": \"5\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:6]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key1\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"value1\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:6\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:5]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key1\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"88d6986e67eb0c95b4819a9cf8fbf0fcb463d956\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:4\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"b42318d02c6407284a2c7939698eddcdb236749e\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:6\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// u[a8ada09dee16d791fd406d629fe29bb0ed084a30:2]={\n//     \"Blank\": {},\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"IsEscaped\": true,\n//         \"ModTime\": \"4\",\n//         \"RefCount\": \"2\"\n//     },\n//     \"Parent\": null,\n//     \"Source\": {\n//         \"@type\": \"/gno.RefNode\",\n//         \"BlockNode\": null,\n//         \"Location\": {\n//             \"File\": \"\",\n//             \"Line\": \"0\",\n//             \"Nonce\": \"0\",\n//             \"PkgPath\": \"gno.land/r/test\"\n//         }\n//     },\n//     \"Values\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"init.0\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"10\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"main\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"15\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"b58c2c6a28f7606b2e42ceca75f2da474ba4a623\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\"\n//                     }\n//                 }\n//             }\n//         }\n//     ]\n// }\n"},{"Name":"z_1_filetest.gno","Body":"// PKGPATH: gno.land/r/test\npackage test\n\nimport (\n\t\"gno.land/p/demo/avl\"\n)\n\nvar tree *avl.Tree\n\nfunc init() {\n\ttree = avl.NewTree(\"key0\", \"value0\")\n\ttree, _ = tree.Set(\"key1\", \"value1\")\n}\n\nfunc main() {\n\tvar updated bool\n\ttree, updated = tree.Set(\"key2\", \"value2\")\n\t// println(tree, updated)\n\tprintln(updated, tree.Size())\n}\n\n// Output:\n// false 3\n\n// Realm:\n// switchrealm[\"gno.land/r/test\"]\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:9]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key2\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"value2\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:9\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:8]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key2\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"bac14657044a4dbc78c87aaf6c08c38b6d5acca2\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:6\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"26a241729119ba3e93757282656c60c82924b881\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:9\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:7\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:7]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key1\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AwAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"07a4fe3e53c0b930af41d04712c28adb5c462e6b\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"1ac455de553fba7821eb3f1786b130774042ee54\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:7\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// u[a8ada09dee16d791fd406d629fe29bb0ed084a30:2]={\n//     \"Blank\": {},\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"IsEscaped\": true,\n//         \"ModTime\": \"6\",\n//         \"RefCount\": \"2\"\n//     },\n//     \"Parent\": null,\n//     \"Source\": {\n//         \"@type\": \"/gno.RefNode\",\n//         \"BlockNode\": null,\n//         \"Location\": {\n//             \"File\": \"\",\n//             \"Line\": \"0\",\n//             \"Nonce\": \"0\",\n//             \"PkgPath\": \"gno.land/r/test\"\n//         }\n//     },\n//     \"Values\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"init.0\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"10\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"main\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"15\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"f6613fd4bc857c62f0d3b5f3bd2416aa7a46191c\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:7\"\n//                     }\n//                 }\n//             }\n//         }\n//     ]\n// }\n// d[a8ada09dee16d791fd406d629fe29bb0ed084a30:4]\n"}]},"deposit":"100ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2mBiXy3Vxfh7cc/Gl9H/ZLw7ULOVUk5fupjmn6+/W2P"},"signature":"JeAq7H2K+01didCNi0RQppXiZ38mqK1VwgbgdOydX0J/X6XqT8lE1dDVVQMsCaGhLgshKVoLKvOkImATJ8VJ0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1lnsppwynw6hflnuxvkjvrdhjwgcfd2qgxg0pjv","package":{"Name":"avl","Path":"gno.land/p/demo/avl","Files":[{"Name":"avl.gno","Body":"package avl\n\n// Tree\n\ntype Tree struct {\n\tkey       string\n\tvalue     interface{}\n\theight    int8\n\tsize      int\n\tleftTree  *Tree\n\trightTree *Tree\n}\n\nfunc NewTree(key string, value interface{}) *Tree {\n\treturn \u0026Tree{\n\t\tkey:    key,\n\t\tvalue:  value,\n\t\theight: 0,\n\t\tsize:   1,\n\t}\n}\n\nfunc (tree *Tree) Size() int {\n\tif tree == nil {\n\t\treturn 0\n\t}\n\treturn tree.size\n}\n\nfunc (tree *Tree) IsLeaf() bool {\n\treturn tree.height == 0\n}\n\nfunc (tree *Tree) Key() string {\n\treturn tree.key\n}\n\nfunc (tree *Tree) Value() interface{} {\n\treturn tree.value\n}\n\nfunc (tree *Tree) _copy() *Tree {\n\tif tree.height == 0 {\n\t\tpanic(\"Why are you copying a value tree?\")\n\t}\n\treturn \u0026Tree{\n\t\tkey:       tree.key,\n\t\theight:    tree.height,\n\t\tsize:      tree.size,\n\t\tleftTree:  tree.leftTree,\n\t\trightTree: tree.rightTree,\n\t}\n}\n\nfunc (tree *Tree) Has(key string) (has bool) {\n\tif tree == nil {\n\t\treturn false\n\t}\n\tif tree.key == key {\n\t\treturn true\n\t}\n\tif tree.height == 0 {\n\t\treturn false\n\t} else {\n\t\tif key \u003c tree.key {\n\t\t\treturn tree.getLeftTree().Has(key)\n\t\t} else {\n\t\t\treturn tree.getRightTree().Has(key)\n\t\t}\n\t}\n}\n\nfunc (tree *Tree) Get(key string) (index int, value interface{}, exists bool) {\n\tif tree == nil {\n\t\treturn 0, nil, false\n\t}\n\tif tree.height == 0 {\n\t\tif tree.key == key {\n\t\t\treturn 0, tree.value, true\n\t\t} else if tree.key \u003c key {\n\t\t\treturn 1, nil, false\n\t\t} else {\n\t\t\treturn 0, nil, false\n\t\t}\n\t} else {\n\t\tif key \u003c tree.key {\n\t\t\treturn tree.getLeftTree().Get(key)\n\t\t} else {\n\t\t\trightTree := tree.getRightTree()\n\t\t\tindex, value, exists = rightTree.Get(key)\n\t\t\tindex += tree.size - rightTree.size\n\t\t\treturn index, value, exists\n\t\t}\n\t}\n}\n\nfunc (tree *Tree) GetByIndex(index int) (key string, value interface{}) {\n\tif tree.height == 0 {\n\t\tif index == 0 {\n\t\t\treturn tree.key, tree.value\n\t\t} else {\n\t\t\tpanic(\"GetByIndex asked for invalid index\")\n\t\t\treturn \"\", nil\n\t\t}\n\t} else {\n\t\t// TODO: could improve this by storing the sizes\n\t\tleftTree := tree.getLeftTree()\n\t\tif index \u003c leftTree.size {\n\t\t\treturn leftTree.GetByIndex(index)\n\t\t} else {\n\t\t\treturn tree.getRightTree().GetByIndex(index - leftTree.size)\n\t\t}\n\t}\n}\n\n// XXX consider a better way to do this... perhaps split Tree from Node.\nfunc (tree *Tree) Set(key string, value interface{}) (newSelf *Tree, updated bool) {\n\tif tree == nil {\n\t\treturn NewTree(key, value), false\n\t}\n\tif tree.height == 0 {\n\t\tif key \u003c tree.key {\n\t\t\treturn \u0026Tree{\n\t\t\t\tkey:       tree.key,\n\t\t\t\theight:    1,\n\t\t\t\tsize:      2,\n\t\t\t\tleftTree:  NewTree(key, value),\n\t\t\t\trightTree: tree,\n\t\t\t}, false\n\t\t} else if key == tree.key {\n\t\t\treturn NewTree(key, value), true\n\t\t} else {\n\t\t\treturn \u0026Tree{\n\t\t\t\tkey:       key,\n\t\t\t\theight:    1,\n\t\t\t\tsize:      2,\n\t\t\t\tleftTree:  tree,\n\t\t\t\trightTree: NewTree(key, value),\n\t\t\t}, false\n\t\t}\n\t} else {\n\t\ttree = tree._copy()\n\t\tif key \u003c tree.key {\n\t\t\ttree.leftTree, updated = tree.getLeftTree().Set(key, value)\n\t\t} else {\n\t\t\ttree.rightTree, updated = tree.getRightTree().Set(key, value)\n\t\t}\n\t\tif updated {\n\t\t\treturn tree, updated\n\t\t} else {\n\t\t\ttree.calcHeightAndSize()\n\t\t\treturn tree.balance(), updated\n\t\t}\n\t}\n}\n\n// newTree: The new tree to replace tree after remove.\n// newKey: new leftmost leaf key for tree after successfully removing 'key' if changed.\n// value: removed value.\nfunc (tree *Tree) Remove(key string) (\n\tnewTree *Tree, newKey string, value interface{}, removed bool,\n) {\n\tif tree == nil {\n\t\treturn nil, \"\", nil, false\n\t}\n\tif tree.height == 0 {\n\t\tif key == tree.key {\n\t\t\treturn nil, \"\", tree.value, true\n\t\t} else {\n\t\t\treturn tree, \"\", nil, false\n\t\t}\n\t} else {\n\t\tif key \u003c tree.key {\n\t\t\tvar newLeftTree *Tree\n\t\t\tnewLeftTree, newKey, value, removed = tree.getLeftTree().Remove(key)\n\t\t\tif !removed {\n\t\t\t\treturn tree, \"\", value, false\n\t\t\t} else if newLeftTree == nil { // left tree held value, was removed\n\t\t\t\treturn tree.rightTree, tree.key, value, true\n\t\t\t}\n\t\t\ttree = tree._copy()\n\t\t\ttree.leftTree = newLeftTree\n\t\t\ttree.calcHeightAndSize()\n\t\t\ttree = tree.balance()\n\t\t\treturn tree, newKey, value, true\n\t\t} else {\n\t\t\tvar newRightTree *Tree\n\t\t\tnewRightTree, newKey, value, removed = tree.getRightTree().Remove(key)\n\t\t\tif !removed {\n\t\t\t\treturn tree, \"\", value, false\n\t\t\t} else if newRightTree == nil { // right tree held value, was removed\n\t\t\t\treturn tree.leftTree, \"\", value, true\n\t\t\t}\n\t\t\ttree = tree._copy()\n\t\t\ttree.rightTree = newRightTree\n\t\t\tif newKey != \"\" {\n\t\t\t\ttree.key = newKey\n\t\t\t}\n\t\t\ttree.calcHeightAndSize()\n\t\t\ttree = tree.balance()\n\t\t\treturn tree, \"\", value, true\n\t\t}\n\t}\n}\n\nfunc (tree *Tree) getLeftTree() *Tree {\n\treturn tree.leftTree\n}\n\nfunc (tree *Tree) getRightTree() *Tree {\n\treturn tree.rightTree\n}\n\n// NOTE: overwrites tree\n// TODO: optimize balance \u0026 rotate\nfunc (tree *Tree) rotateRight() *Tree {\n\ttree = tree._copy()\n\tl := tree.getLeftTree()\n\t_l := l._copy()\n\n\t_lrCached := _l.rightTree\n\t_l.rightTree = tree\n\ttree.leftTree = _lrCached\n\n\ttree.calcHeightAndSize()\n\t_l.calcHeightAndSize()\n\n\treturn _l\n}\n\n// NOTE: overwrites tree\n// TODO: optimize balance \u0026 rotate\nfunc (tree *Tree) rotateLeft() *Tree {\n\ttree = tree._copy()\n\tr := tree.getRightTree()\n\t_r := r._copy()\n\n\t_rlCached := _r.leftTree\n\t_r.leftTree = tree\n\ttree.rightTree = _rlCached\n\n\ttree.calcHeightAndSize()\n\t_r.calcHeightAndSize()\n\n\treturn _r\n}\n\n// NOTE: mutates height and size\nfunc (tree *Tree) calcHeightAndSize() {\n\ttree.height = maxInt8(tree.getLeftTree().height, tree.getRightTree().height) + 1\n\ttree.size = tree.getLeftTree().size + tree.getRightTree().size\n}\n\nfunc (tree *Tree) calcBalance() int {\n\treturn int(tree.getLeftTree().height) - int(tree.getRightTree().height)\n}\n\n// NOTE: assumes that tree can be modified\n// TODO: optimize balance \u0026 rotate\nfunc (tree *Tree) balance() (newSelf *Tree) {\n\tbalance := tree.calcBalance()\n\tif balance \u003e 1 {\n\t\tif tree.getLeftTree().calcBalance() \u003e= 0 {\n\t\t\t// Left Left Case\n\t\t\treturn tree.rotateRight()\n\t\t} else {\n\t\t\t// Left Right Case\n\t\t\t// tree = tree._copy()\n\t\t\tleft := tree.getLeftTree()\n\t\t\ttree.leftTree = left.rotateLeft()\n\t\t\t// tree.calcHeightAndSize()\n\t\t\treturn tree.rotateRight()\n\t\t}\n\t}\n\tif balance \u003c -1 {\n\t\tif tree.getRightTree().calcBalance() \u003c= 0 {\n\t\t\t// Right Right Case\n\t\t\treturn tree.rotateLeft()\n\t\t} else {\n\t\t\t// Right Left Case\n\t\t\t// tree = tree._copy()\n\t\t\tright := tree.getRightTree()\n\t\t\ttree.rightTree = right.rotateRight()\n\t\t\t// tree.calcHeightAndSize()\n\t\t\treturn tree.rotateLeft()\n\t\t}\n\t}\n\t// Nothing changed\n\treturn tree\n}\n\n// Shortcut for TraverseInRange.\nfunc (tree *Tree) Iterate(start, end string, cb func(*Tree) bool) bool {\n\treturn tree.TraverseInRange(start, end, true, true, cb)\n}\n\n// Shortcut for TraverseInRange.\nfunc (tree *Tree) IterateReverse(start, end string, cb func(*Tree) bool) bool {\n\treturn tree.TraverseInRange(start, end, false, true, cb)\n}\n\n// TraverseInRange traverses all nodes, including inner nodes.\n// Start is inclusive and end is exclusive when ascending,\n// Start and end are inclusive when descending.\n// Empty start and empty end denote no start and no end.\n// If leavesOnly is true, only visit leaf nodes.\n// NOTE: To simulate an exclusive reverse traversal,\n// just append 0x00 to start.\nfunc (tree *Tree) TraverseInRange(start, end string, ascending bool, leavesOnly bool, cb func(*Tree) bool) bool {\n\tif tree == nil {\n\t\treturn false\n\t}\n\tafterStart := (start == \"\" || start \u003c tree.key)\n\tstartOrAfter := (start == \"\" || start \u003c= tree.key)\n\tbeforeEnd := false\n\tif ascending {\n\t\tbeforeEnd = (end == \"\" || tree.key \u003c end)\n\t} else {\n\t\tbeforeEnd = (end == \"\" || tree.key \u003c= end)\n\t}\n\n\t// Run callback per inner/leaf node.\n\tstop := false\n\tif (!tree.IsLeaf() \u0026\u0026 !leavesOnly) ||\n\t\t(tree.IsLeaf() \u0026\u0026 startOrAfter \u0026\u0026 beforeEnd) {\n\t\tstop = cb(tree)\n\t\tif stop {\n\t\t\treturn stop\n\t\t}\n\t}\n\tif tree.IsLeaf() {\n\t\treturn stop\n\t}\n\n\tif ascending {\n\t\t// check lower trees, then higher\n\t\tif afterStart {\n\t\t\tstop = tree.getLeftTree().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t\tif stop {\n\t\t\treturn stop\n\t\t}\n\t\tif beforeEnd {\n\t\t\tstop = tree.getRightTree().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t} else {\n\t\t// check the higher trees first\n\t\tif beforeEnd {\n\t\t\tstop = tree.getRightTree().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t\tif stop {\n\t\t\treturn stop\n\t\t}\n\t\tif afterStart {\n\t\t\tstop = tree.getLeftTree().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t}\n\n\treturn stop\n}\n\n// Only used in testing...\nfunc (tree *Tree) lmd() *Tree {\n\tif tree.height == 0 {\n\t\treturn tree\n\t}\n\treturn tree.getLeftTree().lmd()\n}\n\n// Only used in testing...\nfunc (tree *Tree) rmd() *Tree {\n\tif tree.height == 0 {\n\t\treturn tree\n\t}\n\treturn tree.getRightTree().rmd()\n}\n\nfunc maxInt8(a, b int8) int8 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n"},{"Name":"mut_tree.gno","Body":"package avl\n\n// MutTree\n\ntype MutTree struct {\n\ttree *Tree\n}\n\nfunc NewMutTree() *MutTree {\n\treturn \u0026MutTree{\n\t\ttree: nil,\n\t}\n}\n\nfunc (mtree *MutTree) Size() int {\n\treturn mtree.tree.Size()\n}\n\nfunc (mtree *MutTree) Has(key string) (has bool) {\n\treturn mtree.tree.Has(key)\n}\n\nfunc (mtree *MutTree) Get(key string) (value interface{}, exists bool) {\n\t_, value, exists = mtree.tree.Get(key)\n\treturn\n}\n\nfunc (mtree *MutTree) GetByIndex(index int) (key string, value interface{}) {\n\treturn mtree.tree.GetByIndex(index)\n}\n\nfunc (mtree *MutTree) Set(key string, value interface{}) (updated bool) {\n\tnewtree, updated := mtree.tree.Set(key, value)\n\tmtree.tree = newtree\n\treturn updated\n}\n\nfunc (mtree *MutTree) Remove(key string) (value interface{}, removed bool) {\n\tnewtree, _, value, removed := mtree.tree.Remove(key)\n\tmtree.tree = newtree\n\treturn value, removed\n}\n\n// Shortcut for TraverseInRange.\nfunc (mtree *MutTree) Iterate(start, end string, cb func(*Tree) bool) bool {\n\treturn mtree.tree.TraverseInRange(start, end, true, true, cb)\n}\n\n// Shortcut for TraverseInRange.\nfunc (mtree *MutTree) IterateReverse(start, end string, cb func(*Tree) bool) bool {\n\treturn mtree.tree.TraverseInRange(start, end, false, true, cb)\n}\n"},{"Name":"z_0_filetest.gno","Body":"// PKGPATH: gno.land/r/test\npackage test\n\nimport (\n\t\"gno.land/p/demo/avl\"\n)\n\nvar tree *avl.Tree\n\nfunc init() {\n\ttree = avl.NewTree(\"key0\", \"value0\")\n\t// tree, _ = tree.Set(\"key0\", \"value0\")\n}\n\nfunc main() {\n\tvar updated bool\n\ttree, updated = tree.Set(\"key1\", \"value1\")\n\t// println(tree, updated)\n\tprintln(updated, tree.Size())\n}\n\n// Output:\n// false 2\n\n// Realm:\n// switchrealm[\"gno.land/r/test\"]\n// u[a8ada09dee16d791fd406d629fe29bb0ed084a30:4]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key0\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"value0\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:4\",\n//         \"ModTime\": \"5\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:6]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key1\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"value1\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:6\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:5]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key1\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"88d6986e67eb0c95b4819a9cf8fbf0fcb463d956\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:4\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"b42318d02c6407284a2c7939698eddcdb236749e\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:6\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// u[a8ada09dee16d791fd406d629fe29bb0ed084a30:2]={\n//     \"Blank\": {},\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"IsEscaped\": true,\n//         \"ModTime\": \"4\",\n//         \"RefCount\": \"2\"\n//     },\n//     \"Parent\": null,\n//     \"Source\": {\n//         \"@type\": \"/gno.RefNode\",\n//         \"BlockNode\": null,\n//         \"Location\": {\n//             \"File\": \"\",\n//             \"Line\": \"0\",\n//             \"Nonce\": \"0\",\n//             \"PkgPath\": \"gno.land/r/test\"\n//         }\n//     },\n//     \"Values\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"init.0\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"10\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"main\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"15\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"b58c2c6a28f7606b2e42ceca75f2da474ba4a623\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\"\n//                     }\n//                 }\n//             }\n//         }\n//     ]\n// }\n"},{"Name":"z_1_filetest.gno","Body":"// PKGPATH: gno.land/r/test\npackage test\n\nimport (\n\t\"gno.land/p/demo/avl\"\n)\n\nvar tree *avl.Tree\n\nfunc init() {\n\ttree = avl.NewTree(\"key0\", \"value0\")\n\ttree, _ = tree.Set(\"key1\", \"value1\")\n}\n\nfunc main() {\n\tvar updated bool\n\ttree, updated = tree.Set(\"key2\", \"value2\")\n\t// println(tree, updated)\n\tprintln(updated, tree.Size())\n}\n\n// Output:\n// false 3\n\n// Realm:\n// switchrealm[\"gno.land/r/test\"]\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:9]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key2\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"value2\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:9\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:8]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key2\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"bac14657044a4dbc78c87aaf6c08c38b6d5acca2\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:6\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"26a241729119ba3e93757282656c60c82924b881\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:9\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:7\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:7]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key1\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AwAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"07a4fe3e53c0b930af41d04712c28adb5c462e6b\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"1ac455de553fba7821eb3f1786b130774042ee54\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:7\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// u[a8ada09dee16d791fd406d629fe29bb0ed084a30:2]={\n//     \"Blank\": {},\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"IsEscaped\": true,\n//         \"ModTime\": \"6\",\n//         \"RefCount\": \"2\"\n//     },\n//     \"Parent\": null,\n//     \"Source\": {\n//         \"@type\": \"/gno.RefNode\",\n//         \"BlockNode\": null,\n//         \"Location\": {\n//             \"File\": \"\",\n//             \"Line\": \"0\",\n//             \"Nonce\": \"0\",\n//             \"PkgPath\": \"gno.land/r/test\"\n//         }\n//     },\n//     \"Values\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"init.0\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"10\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"main\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"15\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"f6613fd4bc857c62f0d3b5f3bd2416aa7a46191c\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:7\"\n//                     }\n//                 }\n//             }\n//         }\n//     ]\n// }\n// d[a8ada09dee16d791fd406d629fe29bb0ed084a30:4]\n"}]},"deposit":"100ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiTPFM7EjFSP3X5Vs/A4ArLVnscpqadoPU4Yz3UTSYzu"},"signature":"vxzGQrxv0O0hN3jtz+8IQLgvtpLtcvVFWvAX9MaP8IYNOAAilEqz0CwO4a8JfbCkg5hk7caeOUSr6RwiTqVWww=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d9ys48hyc9nxzagw6xxny0f9eanpr6rfhl0t7p","package":{"Name":"avl","Path":"gno.land/p/demo/avolo","Files":[{"Name":"avl.gno","Body":"package avl\n\n// Tree\n\ntype Tree struct {\n\tkey       string\n\tvalue     interface{}\n\theight    int8\n\tsize      int\n\tleftTree  *Tree\n\trightTree *Tree\n}\n\nfunc NewTree(key string, value interface{}) *Tree {\n\treturn \u0026Tree{\n\t\tkey:    key,\n\t\tvalue:  value,\n\t\theight: 0,\n\t\tsize:   1,\n\t}\n}\n\nfunc (tree *Tree) Size() int {\n\tif tree == nil {\n\t\treturn 0\n\t}\n\treturn tree.size\n}\n\nfunc (tree *Tree) IsLeaf() bool {\n\treturn tree.height == 0\n}\n\nfunc (tree *Tree) Key() string {\n\treturn tree.key\n}\n\nfunc (tree *Tree) Value() interface{} {\n\treturn tree.value\n}\n\nfunc (tree *Tree) _copy() *Tree {\n\tif tree.height == 0 {\n\t\tpanic(\"Why are you copying a value tree?\")\n\t}\n\treturn \u0026Tree{\n\t\tkey:       tree.key,\n\t\theight:    tree.height,\n\t\tsize:      tree.size,\n\t\tleftTree:  tree.leftTree,\n\t\trightTree: tree.rightTree,\n\t}\n}\n\nfunc (tree *Tree) Has(key string) (has bool) {\n\tif tree == nil {\n\t\treturn false\n\t}\n\tif tree.key == key {\n\t\treturn true\n\t}\n\tif tree.height == 0 {\n\t\treturn false\n\t} else {\n\t\tif key \u003c tree.key {\n\t\t\treturn tree.getLeftTree().Has(key)\n\t\t} else {\n\t\t\treturn tree.getRightTree().Has(key)\n\t\t}\n\t}\n}\n\nfunc (tree *Tree) Get(key string) (index int, value interface{}, exists bool) {\n\tif tree == nil {\n\t\treturn 0, nil, false\n\t}\n\tif tree.height == 0 {\n\t\tif tree.key == key {\n\t\t\treturn 0, tree.value, true\n\t\t} else if tree.key \u003c key {\n\t\t\treturn 1, nil, false\n\t\t} else {\n\t\t\treturn 0, nil, false\n\t\t}\n\t} else {\n\t\tif key \u003c tree.key {\n\t\t\treturn tree.getLeftTree().Get(key)\n\t\t} else {\n\t\t\trightTree := tree.getRightTree()\n\t\t\tindex, value, exists = rightTree.Get(key)\n\t\t\tindex += tree.size - rightTree.size\n\t\t\treturn index, value, exists\n\t\t}\n\t}\n}\n\nfunc (tree *Tree) GetByIndex(index int) (key string, value interface{}) {\n\tif tree.height == 0 {\n\t\tif index == 0 {\n\t\t\treturn tree.key, tree.value\n\t\t} else {\n\t\t\tpanic(\"GetByIndex asked for invalid index\")\n\t\t\treturn \"\", nil\n\t\t}\n\t} else {\n\t\t// TODO: could improve this by storing the sizes\n\t\tleftTree := tree.getLeftTree()\n\t\tif index \u003c leftTree.size {\n\t\t\treturn leftTree.GetByIndex(index)\n\t\t} else {\n\t\t\treturn tree.getRightTree().GetByIndex(index - leftTree.size)\n\t\t}\n\t}\n}\n\n// XXX consider a better way to do this... perhaps split Tree from Node.\nfunc (tree *Tree) Set(key string, value interface{}) (newSelf *Tree, updated bool) {\n\tif tree == nil {\n\t\treturn NewTree(key, value), false\n\t}\n\tif tree.height == 0 {\n\t\tif key \u003c tree.key {\n\t\t\treturn \u0026Tree{\n\t\t\t\tkey:       tree.key,\n\t\t\t\theight:    1,\n\t\t\t\tsize:      2,\n\t\t\t\tleftTree:  NewTree(key, value),\n\t\t\t\trightTree: tree,\n\t\t\t}, false\n\t\t} else if key == tree.key {\n\t\t\treturn NewTree(key, value), true\n\t\t} else {\n\t\t\treturn \u0026Tree{\n\t\t\t\tkey:       key,\n\t\t\t\theight:    1,\n\t\t\t\tsize:      2,\n\t\t\t\tleftTree:  tree,\n\t\t\t\trightTree: NewTree(key, value),\n\t\t\t}, false\n\t\t}\n\t} else {\n\t\ttree = tree._copy()\n\t\tif key \u003c tree.key {\n\t\t\ttree.leftTree, updated = tree.getLeftTree().Set(key, value)\n\t\t} else {\n\t\t\ttree.rightTree, updated = tree.getRightTree().Set(key, value)\n\t\t}\n\t\tif updated {\n\t\t\treturn tree, updated\n\t\t} else {\n\t\t\ttree.calcHeightAndSize()\n\t\t\treturn tree.balance(), updated\n\t\t}\n\t}\n}\n\n// newTree: The new tree to replace tree after remove.\n// newKey: new leftmost leaf key for tree after successfully removing 'key' if changed.\n// value: removed value.\nfunc (tree *Tree) Remove(key string) (\n\tnewTree *Tree, newKey string, value interface{}, removed bool,\n) {\n\tif tree == nil {\n\t\treturn nil, \"\", nil, false\n\t}\n\tif tree.height == 0 {\n\t\tif key == tree.key {\n\t\t\treturn nil, \"\", tree.value, true\n\t\t} else {\n\t\t\treturn tree, \"\", nil, false\n\t\t}\n\t} else {\n\t\tif key \u003c tree.key {\n\t\t\tvar newLeftTree *Tree\n\t\t\tnewLeftTree, newKey, value, removed = tree.getLeftTree().Remove(key)\n\t\t\tif !removed {\n\t\t\t\treturn tree, \"\", value, false\n\t\t\t} else if newLeftTree == nil { // left tree held value, was removed\n\t\t\t\treturn tree.rightTree, tree.key, value, true\n\t\t\t}\n\t\t\ttree = tree._copy()\n\t\t\ttree.leftTree = newLeftTree\n\t\t\ttree.calcHeightAndSize()\n\t\t\ttree = tree.balance()\n\t\t\treturn tree, newKey, value, true\n\t\t} else {\n\t\t\tvar newRightTree *Tree\n\t\t\tnewRightTree, newKey, value, removed = tree.getRightTree().Remove(key)\n\t\t\tif !removed {\n\t\t\t\treturn tree, \"\", value, false\n\t\t\t} else if newRightTree == nil { // right tree held value, was removed\n\t\t\t\treturn tree.leftTree, \"\", value, true\n\t\t\t}\n\t\t\ttree = tree._copy()\n\t\t\ttree.rightTree = newRightTree\n\t\t\tif newKey != \"\" {\n\t\t\t\ttree.key = newKey\n\t\t\t}\n\t\t\ttree.calcHeightAndSize()\n\t\t\ttree = tree.balance()\n\t\t\treturn tree, \"\", value, true\n\t\t}\n\t}\n}\n\nfunc (tree *Tree) getLeftTree() *Tree {\n\treturn tree.leftTree\n}\n\nfunc (tree *Tree) getRightTree() *Tree {\n\treturn tree.rightTree\n}\n\n// NOTE: overwrites tree\n// TODO: optimize balance \u0026 rotate\nfunc (tree *Tree) rotateRight() *Tree {\n\ttree = tree._copy()\n\tl := tree.getLeftTree()\n\t_l := l._copy()\n\n\t_lrCached := _l.rightTree\n\t_l.rightTree = tree\n\ttree.leftTree = _lrCached\n\n\ttree.calcHeightAndSize()\n\t_l.calcHeightAndSize()\n\n\treturn _l\n}\n\n// NOTE: overwrites tree\n// TODO: optimize balance \u0026 rotate\nfunc (tree *Tree) rotateLeft() *Tree {\n\ttree = tree._copy()\n\tr := tree.getRightTree()\n\t_r := r._copy()\n\n\t_rlCached := _r.leftTree\n\t_r.leftTree = tree\n\ttree.rightTree = _rlCached\n\n\ttree.calcHeightAndSize()\n\t_r.calcHeightAndSize()\n\n\treturn _r\n}\n\n// NOTE: mutates height and size\nfunc (tree *Tree) calcHeightAndSize() {\n\ttree.height = maxInt8(tree.getLeftTree().height, tree.getRightTree().height) + 1\n\ttree.size = tree.getLeftTree().size + tree.getRightTree().size\n}\n\nfunc (tree *Tree) calcBalance() int {\n\treturn int(tree.getLeftTree().height) - int(tree.getRightTree().height)\n}\n\n// NOTE: assumes that tree can be modified\n// TODO: optimize balance \u0026 rotate\nfunc (tree *Tree) balance() (newSelf *Tree) {\n\tbalance := tree.calcBalance()\n\tif balance \u003e 1 {\n\t\tif tree.getLeftTree().calcBalance() \u003e= 0 {\n\t\t\t// Left Left Case\n\t\t\treturn tree.rotateRight()\n\t\t} else {\n\t\t\t// Left Right Case\n\t\t\t// tree = tree._copy()\n\t\t\tleft := tree.getLeftTree()\n\t\t\ttree.leftTree = left.rotateLeft()\n\t\t\t// tree.calcHeightAndSize()\n\t\t\treturn tree.rotateRight()\n\t\t}\n\t}\n\tif balance \u003c -1 {\n\t\tif tree.getRightTree().calcBalance() \u003c= 0 {\n\t\t\t// Right Right Case\n\t\t\treturn tree.rotateLeft()\n\t\t} else {\n\t\t\t// Right Left Case\n\t\t\t// tree = tree._copy()\n\t\t\tright := tree.getRightTree()\n\t\t\ttree.rightTree = right.rotateRight()\n\t\t\t// tree.calcHeightAndSize()\n\t\t\treturn tree.rotateLeft()\n\t\t}\n\t}\n\t// Nothing changed\n\treturn tree\n}\n\n// Shortcut for TraverseInRange.\nfunc (tree *Tree) Iterate(start, end string, cb func(*Tree) bool) bool {\n\treturn tree.TraverseInRange(start, end, true, true, cb)\n}\n\n// Shortcut for TraverseInRange.\nfunc (tree *Tree) IterateReverse(start, end string, cb func(*Tree) bool) bool {\n\treturn tree.TraverseInRange(start, end, false, true, cb)\n}\n\n// TraverseInRange traverses all nodes, including inner nodes.\n// Start is inclusive and end is exclusive when ascending,\n// Start and end are inclusive when descending.\n// Empty start and empty end denote no start and no end.\n// If leavesOnly is true, only visit leaf nodes.\n// NOTE: To simulate an exclusive reverse traversal,\n// just append 0x00 to start.\nfunc (tree *Tree) TraverseInRange(start, end string, ascending bool, leavesOnly bool, cb func(*Tree) bool) bool {\n\tif tree == nil {\n\t\treturn false\n\t}\n\tafterStart := (start == \"\" || start \u003c tree.key)\n\tstartOrAfter := (start == \"\" || start \u003c= tree.key)\n\tbeforeEnd := false\n\tif ascending {\n\t\tbeforeEnd = (end == \"\" || tree.key \u003c end)\n\t} else {\n\t\tbeforeEnd = (end == \"\" || tree.key \u003c= end)\n\t}\n\n\t// Run callback per inner/leaf node.\n\tstop := false\n\tif (!tree.IsLeaf() \u0026\u0026 !leavesOnly) ||\n\t\t(tree.IsLeaf() \u0026\u0026 startOrAfter \u0026\u0026 beforeEnd) {\n\t\tstop = cb(tree)\n\t\tif stop {\n\t\t\treturn stop\n\t\t}\n\t}\n\tif tree.IsLeaf() {\n\t\treturn stop\n\t}\n\n\tif ascending {\n\t\t// check lower trees, then higher\n\t\tif afterStart {\n\t\t\tstop = tree.getLeftTree().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t\tif stop {\n\t\t\treturn stop\n\t\t}\n\t\tif beforeEnd {\n\t\t\tstop = tree.getRightTree().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t} else {\n\t\t// check the higher trees first\n\t\tif beforeEnd {\n\t\t\tstop = tree.getRightTree().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t\tif stop {\n\t\t\treturn stop\n\t\t}\n\t\tif afterStart {\n\t\t\tstop = tree.getLeftTree().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t}\n\n\treturn stop\n}\n\n// Only used in testing...\nfunc (tree *Tree) lmd() *Tree {\n\tif tree.height == 0 {\n\t\treturn tree\n\t}\n\treturn tree.getLeftTree().lmd()\n}\n\n// Only used in testing...\nfunc (tree *Tree) rmd() *Tree {\n\tif tree.height == 0 {\n\t\treturn tree\n\t}\n\treturn tree.getRightTree().rmd()\n}\n\nfunc maxInt8(a, b int8) int8 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n"},{"Name":"mut_tree.gno","Body":"package avl\n\n// MutTree\n\ntype MutTree struct {\n\ttree *Tree\n}\n\nfunc NewMutTree() *MutTree {\n\treturn \u0026MutTree{\n\t\ttree: nil,\n\t}\n}\n\nfunc (mtree *MutTree) Size() int {\n\treturn mtree.tree.Size()\n}\n\nfunc (mtree *MutTree) Has(key string) (has bool) {\n\treturn mtree.tree.Has(key)\n}\n\nfunc (mtree *MutTree) Get(key string) (value interface{}, exists bool) {\n\t_, value, exists = mtree.tree.Get(key)\n\treturn\n}\n\nfunc (mtree *MutTree) GetByIndex(index int) (key string, value interface{}) {\n\treturn mtree.tree.GetByIndex(index)\n}\n\nfunc (mtree *MutTree) Set(key string, value interface{}) (updated bool) {\n\tnewtree, updated := mtree.tree.Set(key, value)\n\tmtree.tree = newtree\n\treturn updated\n}\n\nfunc (mtree *MutTree) Remove(key string) (value interface{}, removed bool) {\n\tnewtree, _, value, removed := mtree.tree.Remove(key)\n\tmtree.tree = newtree\n\treturn value, removed\n}\n\n// Shortcut for TraverseInRange.\nfunc (mtree *MutTree) Iterate(start, end string, cb func(*Tree) bool) bool {\n\treturn mtree.tree.TraverseInRange(start, end, true, true, cb)\n}\n\n// Shortcut for TraverseInRange.\nfunc (mtree *MutTree) IterateReverse(start, end string, cb func(*Tree) bool) bool {\n\treturn mtree.tree.TraverseInRange(start, end, false, true, cb)\n}\n"},{"Name":"z_0_filetest.gno","Body":"// PKGPATH: gno.land/r/test\npackage test\n\nimport (\n\t\"gno.land/p/demo/avl\"\n)\n\nvar tree *avl.Tree\n\nfunc init() {\n\ttree = avl.NewTree(\"key0\", \"value0\")\n\t// tree, _ = tree.Set(\"key0\", \"value0\")\n}\n\nfunc main() {\n\tvar updated bool\n\ttree, updated = tree.Set(\"key1\", \"value1\")\n\t// println(tree, updated)\n\tprintln(updated, tree.Size())\n}\n\n// Output:\n// false 2\n\n// Realm:\n// switchrealm[\"gno.land/r/test\"]\n// u[a8ada09dee16d791fd406d629fe29bb0ed084a30:4]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key0\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"value0\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:4\",\n//         \"ModTime\": \"5\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:6]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key1\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"value1\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:6\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:5]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key1\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"88d6986e67eb0c95b4819a9cf8fbf0fcb463d956\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:4\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"b42318d02c6407284a2c7939698eddcdb236749e\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:6\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// u[a8ada09dee16d791fd406d629fe29bb0ed084a30:2]={\n//     \"Blank\": {},\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"IsEscaped\": true,\n//         \"ModTime\": \"4\",\n//         \"RefCount\": \"2\"\n//     },\n//     \"Parent\": null,\n//     \"Source\": {\n//         \"@type\": \"/gno.RefNode\",\n//         \"BlockNode\": null,\n//         \"Location\": {\n//             \"File\": \"\",\n//             \"Line\": \"0\",\n//             \"Nonce\": \"0\",\n//             \"PkgPath\": \"gno.land/r/test\"\n//         }\n//     },\n//     \"Values\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"init.0\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"10\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"main\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"15\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"b58c2c6a28f7606b2e42ceca75f2da474ba4a623\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\"\n//                     }\n//                 }\n//             }\n//         }\n//     ]\n// }\n"},{"Name":"z_1_filetest.gno","Body":"// PKGPATH: gno.land/r/test\npackage test\n\nimport (\n\t\"gno.land/p/demo/avl\"\n)\n\nvar tree *avl.Tree\n\nfunc init() {\n\ttree = avl.NewTree(\"key0\", \"value0\")\n\ttree, _ = tree.Set(\"key1\", \"value1\")\n}\n\nfunc main() {\n\tvar updated bool\n\ttree, updated = tree.Set(\"key2\", \"value2\")\n\t// println(tree, updated)\n\tprintln(updated, tree.Size())\n}\n\n// Output:\n// false 3\n\n// Realm:\n// switchrealm[\"gno.land/r/test\"]\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:9]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key2\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"value2\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:9\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:8]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key2\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"bac14657044a4dbc78c87aaf6c08c38b6d5acca2\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:6\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"26a241729119ba3e93757282656c60c82924b881\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:9\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:7\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:7]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key1\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AwAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"07a4fe3e53c0b930af41d04712c28adb5c462e6b\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"1ac455de553fba7821eb3f1786b130774042ee54\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:7\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// u[a8ada09dee16d791fd406d629fe29bb0ed084a30:2]={\n//     \"Blank\": {},\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"IsEscaped\": true,\n//         \"ModTime\": \"6\",\n//         \"RefCount\": \"2\"\n//     },\n//     \"Parent\": null,\n//     \"Source\": {\n//         \"@type\": \"/gno.RefNode\",\n//         \"BlockNode\": null,\n//         \"Location\": {\n//             \"File\": \"\",\n//             \"Line\": \"0\",\n//             \"Nonce\": \"0\",\n//             \"PkgPath\": \"gno.land/r/test\"\n//         }\n//     },\n//     \"Values\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"init.0\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"10\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"main\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"15\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"f6613fd4bc857c62f0d3b5f3bd2416aa7a46191c\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:7\"\n//                     }\n//                 }\n//             }\n//         }\n//     ]\n// }\n// d[a8ada09dee16d791fd406d629fe29bb0ed084a30:4]\n"}]},"deposit":"100ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2mBiXy3Vxfh7cc/Gl9H/ZLw7ULOVUk5fupjmn6+/W2P"},"signature":"h6mlVkOnfdDK+2TQ/nIBMW/R8ME+K3ntvNLv00lDcph6b6m+/7xRKi0cByL9tYELQYUIVvCQq/vrHirJpe0zDw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1lnsppwynw6hflnuxvkjvrdhjwgcfd2qgxg0pjv","package":{"Name":"avl","Path":"gno.land/p/demo/trongvip","Files":[{"Name":"avl.gno","Body":"package avl\n\n// Tree\n\ntype Tree struct {\n\tkey       string\n\tvalue     interface{}\n\theight    int8\n\tsize      int\n\tleftTree  *Tree\n\trightTree *Tree\n}\n\nfunc NewTree(key string, value interface{}) *Tree {\n\treturn \u0026Tree{\n\t\tkey:    key,\n\t\tvalue:  value,\n\t\theight: 0,\n\t\tsize:   1,\n\t}\n}\n\nfunc (tree *Tree) Size() int {\n\tif tree == nil {\n\t\treturn 0\n\t}\n\treturn tree.size\n}\n\nfunc (tree *Tree) IsLeaf() bool {\n\treturn tree.height == 0\n}\n\nfunc (tree *Tree) Key() string {\n\treturn tree.key\n}\n\nfunc (tree *Tree) Value() interface{} {\n\treturn tree.value\n}\n\nfunc (tree *Tree) _copy() *Tree {\n\tif tree.height == 0 {\n\t\tpanic(\"Why are you copying a value tree?\")\n\t}\n\treturn \u0026Tree{\n\t\tkey:       tree.key,\n\t\theight:    tree.height,\n\t\tsize:      tree.size,\n\t\tleftTree:  tree.leftTree,\n\t\trightTree: tree.rightTree,\n\t}\n}\n\nfunc (tree *Tree) Has(key string) (has bool) {\n\tif tree == nil {\n\t\treturn false\n\t}\n\tif tree.key == key {\n\t\treturn true\n\t}\n\tif tree.height == 0 {\n\t\treturn false\n\t} else {\n\t\tif key \u003c tree.key {\n\t\t\treturn tree.getLeftTree().Has(key)\n\t\t} else {\n\t\t\treturn tree.getRightTree().Has(key)\n\t\t}\n\t}\n}\n\nfunc (tree *Tree) Get(key string) (index int, value interface{}, exists bool) {\n\tif tree == nil {\n\t\treturn 0, nil, false\n\t}\n\tif tree.height == 0 {\n\t\tif tree.key == key {\n\t\t\treturn 0, tree.value, true\n\t\t} else if tree.key \u003c key {\n\t\t\treturn 1, nil, false\n\t\t} else {\n\t\t\treturn 0, nil, false\n\t\t}\n\t} else {\n\t\tif key \u003c tree.key {\n\t\t\treturn tree.getLeftTree().Get(key)\n\t\t} else {\n\t\t\trightTree := tree.getRightTree()\n\t\t\tindex, value, exists = rightTree.Get(key)\n\t\t\tindex += tree.size - rightTree.size\n\t\t\treturn index, value, exists\n\t\t}\n\t}\n}\n\nfunc (tree *Tree) GetByIndex(index int) (key string, value interface{}) {\n\tif tree.height == 0 {\n\t\tif index == 0 {\n\t\t\treturn tree.key, tree.value\n\t\t} else {\n\t\t\tpanic(\"GetByIndex asked for invalid index\")\n\t\t\treturn \"\", nil\n\t\t}\n\t} else {\n\t\t// TODO: could improve this by storing the sizes\n\t\tleftTree := tree.getLeftTree()\n\t\tif index \u003c leftTree.size {\n\t\t\treturn leftTree.GetByIndex(index)\n\t\t} else {\n\t\t\treturn tree.getRightTree().GetByIndex(index - leftTree.size)\n\t\t}\n\t}\n}\n\n// XXX consider a better way to do this... perhaps split Tree from Node.\nfunc (tree *Tree) Set(key string, value interface{}) (newSelf *Tree, updated bool) {\n\tif tree == nil {\n\t\treturn NewTree(key, value), false\n\t}\n\tif tree.height == 0 {\n\t\tif key \u003c tree.key {\n\t\t\treturn \u0026Tree{\n\t\t\t\tkey:       tree.key,\n\t\t\t\theight:    1,\n\t\t\t\tsize:      2,\n\t\t\t\tleftTree:  NewTree(key, value),\n\t\t\t\trightTree: tree,\n\t\t\t}, false\n\t\t} else if key == tree.key {\n\t\t\treturn NewTree(key, value), true\n\t\t} else {\n\t\t\treturn \u0026Tree{\n\t\t\t\tkey:       key,\n\t\t\t\theight:    1,\n\t\t\t\tsize:      2,\n\t\t\t\tleftTree:  tree,\n\t\t\t\trightTree: NewTree(key, value),\n\t\t\t}, false\n\t\t}\n\t} else {\n\t\ttree = tree._copy()\n\t\tif key \u003c tree.key {\n\t\t\ttree.leftTree, updated = tree.getLeftTree().Set(key, value)\n\t\t} else {\n\t\t\ttree.rightTree, updated = tree.getRightTree().Set(key, value)\n\t\t}\n\t\tif updated {\n\t\t\treturn tree, updated\n\t\t} else {\n\t\t\ttree.calcHeightAndSize()\n\t\t\treturn tree.balance(), updated\n\t\t}\n\t}\n}\n\n// newTree: The new tree to replace tree after remove.\n// newKey: new leftmost leaf key for tree after successfully removing 'key' if changed.\n// value: removed value.\nfunc (tree *Tree) Remove(key string) (\n\tnewTree *Tree, newKey string, value interface{}, removed bool,\n) {\n\tif tree == nil {\n\t\treturn nil, \"\", nil, false\n\t}\n\tif tree.height == 0 {\n\t\tif key == tree.key {\n\t\t\treturn nil, \"\", tree.value, true\n\t\t} else {\n\t\t\treturn tree, \"\", nil, false\n\t\t}\n\t} else {\n\t\tif key \u003c tree.key {\n\t\t\tvar newLeftTree *Tree\n\t\t\tnewLeftTree, newKey, value, removed = tree.getLeftTree().Remove(key)\n\t\t\tif !removed {\n\t\t\t\treturn tree, \"\", value, false\n\t\t\t} else if newLeftTree == nil { // left tree held value, was removed\n\t\t\t\treturn tree.rightTree, tree.key, value, true\n\t\t\t}\n\t\t\ttree = tree._copy()\n\t\t\ttree.leftTree = newLeftTree\n\t\t\ttree.calcHeightAndSize()\n\t\t\ttree = tree.balance()\n\t\t\treturn tree, newKey, value, true\n\t\t} else {\n\t\t\tvar newRightTree *Tree\n\t\t\tnewRightTree, newKey, value, removed = tree.getRightTree().Remove(key)\n\t\t\tif !removed {\n\t\t\t\treturn tree, \"\", value, false\n\t\t\t} else if newRightTree == nil { // right tree held value, was removed\n\t\t\t\treturn tree.leftTree, \"\", value, true\n\t\t\t}\n\t\t\ttree = tree._copy()\n\t\t\ttree.rightTree = newRightTree\n\t\t\tif newKey != \"\" {\n\t\t\t\ttree.key = newKey\n\t\t\t}\n\t\t\ttree.calcHeightAndSize()\n\t\t\ttree = tree.balance()\n\t\t\treturn tree, \"\", value, true\n\t\t}\n\t}\n}\n\nfunc (tree *Tree) getLeftTree() *Tree {\n\treturn tree.leftTree\n}\n\nfunc (tree *Tree) getRightTree() *Tree {\n\treturn tree.rightTree\n}\n\n// NOTE: overwrites tree\n// TODO: optimize balance \u0026 rotate\nfunc (tree *Tree) rotateRight() *Tree {\n\ttree = tree._copy()\n\tl := tree.getLeftTree()\n\t_l := l._copy()\n\n\t_lrCached := _l.rightTree\n\t_l.rightTree = tree\n\ttree.leftTree = _lrCached\n\n\ttree.calcHeightAndSize()\n\t_l.calcHeightAndSize()\n\n\treturn _l\n}\n\n// NOTE: overwrites tree\n// TODO: optimize balance \u0026 rotate\nfunc (tree *Tree) rotateLeft() *Tree {\n\ttree = tree._copy()\n\tr := tree.getRightTree()\n\t_r := r._copy()\n\n\t_rlCached := _r.leftTree\n\t_r.leftTree = tree\n\ttree.rightTree = _rlCached\n\n\ttree.calcHeightAndSize()\n\t_r.calcHeightAndSize()\n\n\treturn _r\n}\n\n// NOTE: mutates height and size\nfunc (tree *Tree) calcHeightAndSize() {\n\ttree.height = maxInt8(tree.getLeftTree().height, tree.getRightTree().height) + 1\n\ttree.size = tree.getLeftTree().size + tree.getRightTree().size\n}\n\nfunc (tree *Tree) calcBalance() int {\n\treturn int(tree.getLeftTree().height) - int(tree.getRightTree().height)\n}\n\n// NOTE: assumes that tree can be modified\n// TODO: optimize balance \u0026 rotate\nfunc (tree *Tree) balance() (newSelf *Tree) {\n\tbalance := tree.calcBalance()\n\tif balance \u003e 1 {\n\t\tif tree.getLeftTree().calcBalance() \u003e= 0 {\n\t\t\t// Left Left Case\n\t\t\treturn tree.rotateRight()\n\t\t} else {\n\t\t\t// Left Right Case\n\t\t\t// tree = tree._copy()\n\t\t\tleft := tree.getLeftTree()\n\t\t\ttree.leftTree = left.rotateLeft()\n\t\t\t// tree.calcHeightAndSize()\n\t\t\treturn tree.rotateRight()\n\t\t}\n\t}\n\tif balance \u003c -1 {\n\t\tif tree.getRightTree().calcBalance() \u003c= 0 {\n\t\t\t// Right Right Case\n\t\t\treturn tree.rotateLeft()\n\t\t} else {\n\t\t\t// Right Left Case\n\t\t\t// tree = tree._copy()\n\t\t\tright := tree.getRightTree()\n\t\t\ttree.rightTree = right.rotateRight()\n\t\t\t// tree.calcHeightAndSize()\n\t\t\treturn tree.rotateLeft()\n\t\t}\n\t}\n\t// Nothing changed\n\treturn tree\n}\n\n// Shortcut for TraverseInRange.\nfunc (tree *Tree) Iterate(start, end string, cb func(*Tree) bool) bool {\n\treturn tree.TraverseInRange(start, end, true, true, cb)\n}\n\n// Shortcut for TraverseInRange.\nfunc (tree *Tree) IterateReverse(start, end string, cb func(*Tree) bool) bool {\n\treturn tree.TraverseInRange(start, end, false, true, cb)\n}\n\n// TraverseInRange traverses all nodes, including inner nodes.\n// Start is inclusive and end is exclusive when ascending,\n// Start and end are inclusive when descending.\n// Empty start and empty end denote no start and no end.\n// If leavesOnly is true, only visit leaf nodes.\n// NOTE: To simulate an exclusive reverse traversal,\n// just append 0x00 to start.\nfunc (tree *Tree) TraverseInRange(start, end string, ascending bool, leavesOnly bool, cb func(*Tree) bool) bool {\n\tif tree == nil {\n\t\treturn false\n\t}\n\tafterStart := (start == \"\" || start \u003c tree.key)\n\tstartOrAfter := (start == \"\" || start \u003c= tree.key)\n\tbeforeEnd := false\n\tif ascending {\n\t\tbeforeEnd = (end == \"\" || tree.key \u003c end)\n\t} else {\n\t\tbeforeEnd = (end == \"\" || tree.key \u003c= end)\n\t}\n\n\t// Run callback per inner/leaf node.\n\tstop := false\n\tif (!tree.IsLeaf() \u0026\u0026 !leavesOnly) ||\n\t\t(tree.IsLeaf() \u0026\u0026 startOrAfter \u0026\u0026 beforeEnd) {\n\t\tstop = cb(tree)\n\t\tif stop {\n\t\t\treturn stop\n\t\t}\n\t}\n\tif tree.IsLeaf() {\n\t\treturn stop\n\t}\n\n\tif ascending {\n\t\t// check lower trees, then higher\n\t\tif afterStart {\n\t\t\tstop = tree.getLeftTree().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t\tif stop {\n\t\t\treturn stop\n\t\t}\n\t\tif beforeEnd {\n\t\t\tstop = tree.getRightTree().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t} else {\n\t\t// check the higher trees first\n\t\tif beforeEnd {\n\t\t\tstop = tree.getRightTree().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t\tif stop {\n\t\t\treturn stop\n\t\t}\n\t\tif afterStart {\n\t\t\tstop = tree.getLeftTree().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t}\n\n\treturn stop\n}\n\n// Only used in testing...\nfunc (tree *Tree) lmd() *Tree {\n\tif tree.height == 0 {\n\t\treturn tree\n\t}\n\treturn tree.getLeftTree().lmd()\n}\n\n// Only used in testing...\nfunc (tree *Tree) rmd() *Tree {\n\tif tree.height == 0 {\n\t\treturn tree\n\t}\n\treturn tree.getRightTree().rmd()\n}\n\nfunc maxInt8(a, b int8) int8 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n"},{"Name":"mut_tree.gno","Body":"package avl\n\n// MutTree\n\ntype MutTree struct {\n\ttree *Tree\n}\n\nfunc NewMutTree() *MutTree {\n\treturn \u0026MutTree{\n\t\ttree: nil,\n\t}\n}\n\nfunc (mtree *MutTree) Size() int {\n\treturn mtree.tree.Size()\n}\n\nfunc (mtree *MutTree) Has(key string) (has bool) {\n\treturn mtree.tree.Has(key)\n}\n\nfunc (mtree *MutTree) Get(key string) (value interface{}, exists bool) {\n\t_, value, exists = mtree.tree.Get(key)\n\treturn\n}\n\nfunc (mtree *MutTree) GetByIndex(index int) (key string, value interface{}) {\n\treturn mtree.tree.GetByIndex(index)\n}\n\nfunc (mtree *MutTree) Set(key string, value interface{}) (updated bool) {\n\tnewtree, updated := mtree.tree.Set(key, value)\n\tmtree.tree = newtree\n\treturn updated\n}\n\nfunc (mtree *MutTree) Remove(key string) (value interface{}, removed bool) {\n\tnewtree, _, value, removed := mtree.tree.Remove(key)\n\tmtree.tree = newtree\n\treturn value, removed\n}\n\n// Shortcut for TraverseInRange.\nfunc (mtree *MutTree) Iterate(start, end string, cb func(*Tree) bool) bool {\n\treturn mtree.tree.TraverseInRange(start, end, true, true, cb)\n}\n\n// Shortcut for TraverseInRange.\nfunc (mtree *MutTree) IterateReverse(start, end string, cb func(*Tree) bool) bool {\n\treturn mtree.tree.TraverseInRange(start, end, false, true, cb)\n}\n"},{"Name":"z_0_filetest.gno","Body":"// PKGPATH: gno.land/r/test\npackage test\n\nimport (\n\t\"gno.land/p/demo/avl\"\n)\n\nvar tree *avl.Tree\n\nfunc init() {\n\ttree = avl.NewTree(\"key0\", \"value0\")\n\t// tree, _ = tree.Set(\"key0\", \"value0\")\n}\n\nfunc main() {\n\tvar updated bool\n\ttree, updated = tree.Set(\"key1\", \"value1\")\n\t// println(tree, updated)\n\tprintln(updated, tree.Size())\n}\n\n// Output:\n// false 2\n\n// Realm:\n// switchrealm[\"gno.land/r/test\"]\n// u[a8ada09dee16d791fd406d629fe29bb0ed084a30:4]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key0\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"value0\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:4\",\n//         \"ModTime\": \"5\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:6]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key1\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"value1\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:6\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:5]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key1\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"88d6986e67eb0c95b4819a9cf8fbf0fcb463d956\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:4\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"b42318d02c6407284a2c7939698eddcdb236749e\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:6\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// u[a8ada09dee16d791fd406d629fe29bb0ed084a30:2]={\n//     \"Blank\": {},\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"IsEscaped\": true,\n//         \"ModTime\": \"4\",\n//         \"RefCount\": \"2\"\n//     },\n//     \"Parent\": null,\n//     \"Source\": {\n//         \"@type\": \"/gno.RefNode\",\n//         \"BlockNode\": null,\n//         \"Location\": {\n//             \"File\": \"\",\n//             \"Line\": \"0\",\n//             \"Nonce\": \"0\",\n//             \"PkgPath\": \"gno.land/r/test\"\n//         }\n//     },\n//     \"Values\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"init.0\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"10\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"main\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"15\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"b58c2c6a28f7606b2e42ceca75f2da474ba4a623\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\"\n//                     }\n//                 }\n//             }\n//         }\n//     ]\n// }\n"},{"Name":"z_1_filetest.gno","Body":"// PKGPATH: gno.land/r/test\npackage test\n\nimport (\n\t\"gno.land/p/demo/avl\"\n)\n\nvar tree *avl.Tree\n\nfunc init() {\n\ttree = avl.NewTree(\"key0\", \"value0\")\n\ttree, _ = tree.Set(\"key1\", \"value1\")\n}\n\nfunc main() {\n\tvar updated bool\n\ttree, updated = tree.Set(\"key2\", \"value2\")\n\t// println(tree, updated)\n\tprintln(updated, tree.Size())\n}\n\n// Output:\n// false 3\n\n// Realm:\n// switchrealm[\"gno.land/r/test\"]\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:9]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key2\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"value2\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:9\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:8]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key2\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"bac14657044a4dbc78c87aaf6c08c38b6d5acca2\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:6\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"26a241729119ba3e93757282656c60c82924b881\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:9\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:7\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:7]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key1\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AwAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"07a4fe3e53c0b930af41d04712c28adb5c462e6b\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"1ac455de553fba7821eb3f1786b130774042ee54\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:7\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// u[a8ada09dee16d791fd406d629fe29bb0ed084a30:2]={\n//     \"Blank\": {},\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"IsEscaped\": true,\n//         \"ModTime\": \"6\",\n//         \"RefCount\": \"2\"\n//     },\n//     \"Parent\": null,\n//     \"Source\": {\n//         \"@type\": \"/gno.RefNode\",\n//         \"BlockNode\": null,\n//         \"Location\": {\n//             \"File\": \"\",\n//             \"Line\": \"0\",\n//             \"Nonce\": \"0\",\n//             \"PkgPath\": \"gno.land/r/test\"\n//         }\n//     },\n//     \"Values\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"init.0\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"10\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"main\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"15\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"f6613fd4bc857c62f0d3b5f3bd2416aa7a46191c\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:7\"\n//                     }\n//                 }\n//             }\n//         }\n//     ]\n// }\n// d[a8ada09dee16d791fd406d629fe29bb0ed084a30:4]\n"}]},"deposit":"100ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiTPFM7EjFSP3X5Vs/A4ArLVnscpqadoPU4Yz3UTSYzu"},"signature":"3Yx2JS9GnPLQWQqWG1TQcBfp39hRMdmWSBPqWH4Z3YxVJzKxbVsDjlnYnSy1MWxBE0u81p/g7SQHXYEHaUFG5g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1lnsppwynw6hflnuxvkjvrdhjwgcfd2qgxg0pjv","package":{"Name":"avl","Path":"gno.land/p/demo/trongvip1","Files":[{"Name":"avl.gno","Body":"package avl\n\n// Tree\n\ntype Tree struct {\n\tkey       string\n\tvalue     interface{}\n\theight    int8\n\tsize      int\n\tleftTree  *Tree\n\trightTree *Tree\n}\n\nfunc NewTree(key string, value interface{}) *Tree {\n\treturn \u0026Tree{\n\t\tkey:    key,\n\t\tvalue:  value,\n\t\theight: 0,\n\t\tsize:   1,\n\t}\n}\n\nfunc (tree *Tree) Size() int {\n\tif tree == nil {\n\t\treturn 0\n\t}\n\treturn tree.size\n}\n\nfunc (tree *Tree) IsLeaf() bool {\n\treturn tree.height == 0\n}\n\nfunc (tree *Tree) Key() string {\n\treturn tree.key\n}\n\nfunc (tree *Tree) Value() interface{} {\n\treturn tree.value\n}\n\nfunc (tree *Tree) _copy() *Tree {\n\tif tree.height == 0 {\n\t\tpanic(\"Why are you copying a value tree?\")\n\t}\n\treturn \u0026Tree{\n\t\tkey:       tree.key,\n\t\theight:    tree.height,\n\t\tsize:      tree.size,\n\t\tleftTree:  tree.leftTree,\n\t\trightTree: tree.rightTree,\n\t}\n}\n\nfunc (tree *Tree) Has(key string) (has bool) {\n\tif tree == nil {\n\t\treturn false\n\t}\n\tif tree.key == key {\n\t\treturn true\n\t}\n\tif tree.height == 0 {\n\t\treturn false\n\t} else {\n\t\tif key \u003c tree.key {\n\t\t\treturn tree.getLeftTree().Has(key)\n\t\t} else {\n\t\t\treturn tree.getRightTree().Has(key)\n\t\t}\n\t}\n}\n\nfunc (tree *Tree) Get(key string) (index int, value interface{}, exists bool) {\n\tif tree == nil {\n\t\treturn 0, nil, false\n\t}\n\tif tree.height == 0 {\n\t\tif tree.key == key {\n\t\t\treturn 0, tree.value, true\n\t\t} else if tree.key \u003c key {\n\t\t\treturn 1, nil, false\n\t\t} else {\n\t\t\treturn 0, nil, false\n\t\t}\n\t} else {\n\t\tif key \u003c tree.key {\n\t\t\treturn tree.getLeftTree().Get(key)\n\t\t} else {\n\t\t\trightTree := tree.getRightTree()\n\t\t\tindex, value, exists = rightTree.Get(key)\n\t\t\tindex += tree.size - rightTree.size\n\t\t\treturn index, value, exists\n\t\t}\n\t}\n}\n\nfunc (tree *Tree) GetByIndex(index int) (key string, value interface{}) {\n\tif tree.height == 0 {\n\t\tif index == 0 {\n\t\t\treturn tree.key, tree.value\n\t\t} else {\n\t\t\tpanic(\"GetByIndex asked for invalid index\")\n\t\t\treturn \"\", nil\n\t\t}\n\t} else {\n\t\t// TODO: could improve this by storing the sizes\n\t\tleftTree := tree.getLeftTree()\n\t\tif index \u003c leftTree.size {\n\t\t\treturn leftTree.GetByIndex(index)\n\t\t} else {\n\t\t\treturn tree.getRightTree().GetByIndex(index - leftTree.size)\n\t\t}\n\t}\n}\n\n// XXX consider a better way to do this... perhaps split Tree from Node.\nfunc (tree *Tree) Set(key string, value interface{}) (newSelf *Tree, updated bool) {\n\tif tree == nil {\n\t\treturn NewTree(key, value), false\n\t}\n\tif tree.height == 0 {\n\t\tif key \u003c tree.key {\n\t\t\treturn \u0026Tree{\n\t\t\t\tkey:       tree.key,\n\t\t\t\theight:    1,\n\t\t\t\tsize:      2,\n\t\t\t\tleftTree:  NewTree(key, value),\n\t\t\t\trightTree: tree,\n\t\t\t}, false\n\t\t} else if key == tree.key {\n\t\t\treturn NewTree(key, value), true\n\t\t} else {\n\t\t\treturn \u0026Tree{\n\t\t\t\tkey:       key,\n\t\t\t\theight:    1,\n\t\t\t\tsize:      2,\n\t\t\t\tleftTree:  tree,\n\t\t\t\trightTree: NewTree(key, value),\n\t\t\t}, false\n\t\t}\n\t} else {\n\t\ttree = tree._copy()\n\t\tif key \u003c tree.key {\n\t\t\ttree.leftTree, updated = tree.getLeftTree().Set(key, value)\n\t\t} else {\n\t\t\ttree.rightTree, updated = tree.getRightTree().Set(key, value)\n\t\t}\n\t\tif updated {\n\t\t\treturn tree, updated\n\t\t} else {\n\t\t\ttree.calcHeightAndSize()\n\t\t\treturn tree.balance(), updated\n\t\t}\n\t}\n}\n\n// newTree: The new tree to replace tree after remove.\n// newKey: new leftmost leaf key for tree after successfully removing 'key' if changed.\n// value: removed value.\nfunc (tree *Tree) Remove(key string) (\n\tnewTree *Tree, newKey string, value interface{}, removed bool,\n) {\n\tif tree == nil {\n\t\treturn nil, \"\", nil, false\n\t}\n\tif tree.height == 0 {\n\t\tif key == tree.key {\n\t\t\treturn nil, \"\", tree.value, true\n\t\t} else {\n\t\t\treturn tree, \"\", nil, false\n\t\t}\n\t} else {\n\t\tif key \u003c tree.key {\n\t\t\tvar newLeftTree *Tree\n\t\t\tnewLeftTree, newKey, value, removed = tree.getLeftTree().Remove(key)\n\t\t\tif !removed {\n\t\t\t\treturn tree, \"\", value, false\n\t\t\t} else if newLeftTree == nil { // left tree held value, was removed\n\t\t\t\treturn tree.rightTree, tree.key, value, true\n\t\t\t}\n\t\t\ttree = tree._copy()\n\t\t\ttree.leftTree = newLeftTree\n\t\t\ttree.calcHeightAndSize()\n\t\t\ttree = tree.balance()\n\t\t\treturn tree, newKey, value, true\n\t\t} else {\n\t\t\tvar newRightTree *Tree\n\t\t\tnewRightTree, newKey, value, removed = tree.getRightTree().Remove(key)\n\t\t\tif !removed {\n\t\t\t\treturn tree, \"\", value, false\n\t\t\t} else if newRightTree == nil { // right tree held value, was removed\n\t\t\t\treturn tree.leftTree, \"\", value, true\n\t\t\t}\n\t\t\ttree = tree._copy()\n\t\t\ttree.rightTree = newRightTree\n\t\t\tif newKey != \"\" {\n\t\t\t\ttree.key = newKey\n\t\t\t}\n\t\t\ttree.calcHeightAndSize()\n\t\t\ttree = tree.balance()\n\t\t\treturn tree, \"\", value, true\n\t\t}\n\t}\n}\n\nfunc (tree *Tree) getLeftTree() *Tree {\n\treturn tree.leftTree\n}\n\nfunc (tree *Tree) getRightTree() *Tree {\n\treturn tree.rightTree\n}\n\n// NOTE: overwrites tree\n// TODO: optimize balance \u0026 rotate\nfunc (tree *Tree) rotateRight() *Tree {\n\ttree = tree._copy()\n\tl := tree.getLeftTree()\n\t_l := l._copy()\n\n\t_lrCached := _l.rightTree\n\t_l.rightTree = tree\n\ttree.leftTree = _lrCached\n\n\ttree.calcHeightAndSize()\n\t_l.calcHeightAndSize()\n\n\treturn _l\n}\n\n// NOTE: overwrites tree\n// TODO: optimize balance \u0026 rotate\nfunc (tree *Tree) rotateLeft() *Tree {\n\ttree = tree._copy()\n\tr := tree.getRightTree()\n\t_r := r._copy()\n\n\t_rlCached := _r.leftTree\n\t_r.leftTree = tree\n\ttree.rightTree = _rlCached\n\n\ttree.calcHeightAndSize()\n\t_r.calcHeightAndSize()\n\n\treturn _r\n}\n\n// NOTE: mutates height and size\nfunc (tree *Tree) calcHeightAndSize() {\n\ttree.height = maxInt8(tree.getLeftTree().height, tree.getRightTree().height) + 1\n\ttree.size = tree.getLeftTree().size + tree.getRightTree().size\n}\n\nfunc (tree *Tree) calcBalance() int {\n\treturn int(tree.getLeftTree().height) - int(tree.getRightTree().height)\n}\n\n// NOTE: assumes that tree can be modified\n// TODO: optimize balance \u0026 rotate\nfunc (tree *Tree) balance() (newSelf *Tree) {\n\tbalance := tree.calcBalance()\n\tif balance \u003e 1 {\n\t\tif tree.getLeftTree().calcBalance() \u003e= 0 {\n\t\t\t// Left Left Case\n\t\t\treturn tree.rotateRight()\n\t\t} else {\n\t\t\t// Left Right Case\n\t\t\t// tree = tree._copy()\n\t\t\tleft := tree.getLeftTree()\n\t\t\ttree.leftTree = left.rotateLeft()\n\t\t\t// tree.calcHeightAndSize()\n\t\t\treturn tree.rotateRight()\n\t\t}\n\t}\n\tif balance \u003c -1 {\n\t\tif tree.getRightTree().calcBalance() \u003c= 0 {\n\t\t\t// Right Right Case\n\t\t\treturn tree.rotateLeft()\n\t\t} else {\n\t\t\t// Right Left Case\n\t\t\t// tree = tree._copy()\n\t\t\tright := tree.getRightTree()\n\t\t\ttree.rightTree = right.rotateRight()\n\t\t\t// tree.calcHeightAndSize()\n\t\t\treturn tree.rotateLeft()\n\t\t}\n\t}\n\t// Nothing changed\n\treturn tree\n}\n\n// Shortcut for TraverseInRange.\nfunc (tree *Tree) Iterate(start, end string, cb func(*Tree) bool) bool {\n\treturn tree.TraverseInRange(start, end, true, true, cb)\n}\n\n// Shortcut for TraverseInRange.\nfunc (tree *Tree) IterateReverse(start, end string, cb func(*Tree) bool) bool {\n\treturn tree.TraverseInRange(start, end, false, true, cb)\n}\n\n// TraverseInRange traverses all nodes, including inner nodes.\n// Start is inclusive and end is exclusive when ascending,\n// Start and end are inclusive when descending.\n// Empty start and empty end denote no start and no end.\n// If leavesOnly is true, only visit leaf nodes.\n// NOTE: To simulate an exclusive reverse traversal,\n// just append 0x00 to start.\nfunc (tree *Tree) TraverseInRange(start, end string, ascending bool, leavesOnly bool, cb func(*Tree) bool) bool {\n\tif tree == nil {\n\t\treturn false\n\t}\n\tafterStart := (start == \"\" || start \u003c tree.key)\n\tstartOrAfter := (start == \"\" || start \u003c= tree.key)\n\tbeforeEnd := false\n\tif ascending {\n\t\tbeforeEnd = (end == \"\" || tree.key \u003c end)\n\t} else {\n\t\tbeforeEnd = (end == \"\" || tree.key \u003c= end)\n\t}\n\n\t// Run callback per inner/leaf node.\n\tstop := false\n\tif (!tree.IsLeaf() \u0026\u0026 !leavesOnly) ||\n\t\t(tree.IsLeaf() \u0026\u0026 startOrAfter \u0026\u0026 beforeEnd) {\n\t\tstop = cb(tree)\n\t\tif stop {\n\t\t\treturn stop\n\t\t}\n\t}\n\tif tree.IsLeaf() {\n\t\treturn stop\n\t}\n\n\tif ascending {\n\t\t// check lower trees, then higher\n\t\tif afterStart {\n\t\t\tstop = tree.getLeftTree().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t\tif stop {\n\t\t\treturn stop\n\t\t}\n\t\tif beforeEnd {\n\t\t\tstop = tree.getRightTree().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t} else {\n\t\t// check the higher trees first\n\t\tif beforeEnd {\n\t\t\tstop = tree.getRightTree().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t\tif stop {\n\t\t\treturn stop\n\t\t}\n\t\tif afterStart {\n\t\t\tstop = tree.getLeftTree().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t}\n\n\treturn stop\n}\n\n// Only used in testing...\nfunc (tree *Tree) lmd() *Tree {\n\tif tree.height == 0 {\n\t\treturn tree\n\t}\n\treturn tree.getLeftTree().lmd()\n}\n\n// Only used in testing...\nfunc (tree *Tree) rmd() *Tree {\n\tif tree.height == 0 {\n\t\treturn tree\n\t}\n\treturn tree.getRightTree().rmd()\n}\n\nfunc maxInt8(a, b int8) int8 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n"},{"Name":"mut_tree.gno","Body":"package avl\n\n// MutTree\n\ntype MutTree struct {\n\ttree *Tree\n}\n\nfunc NewMutTree() *MutTree {\n\treturn \u0026MutTree{\n\t\ttree: nil,\n\t}\n}\n\nfunc (mtree *MutTree) Size() int {\n\treturn mtree.tree.Size()\n}\n\nfunc (mtree *MutTree) Has(key string) (has bool) {\n\treturn mtree.tree.Has(key)\n}\n\nfunc (mtree *MutTree) Get(key string) (value interface{}, exists bool) {\n\t_, value, exists = mtree.tree.Get(key)\n\treturn\n}\n\nfunc (mtree *MutTree) GetByIndex(index int) (key string, value interface{}) {\n\treturn mtree.tree.GetByIndex(index)\n}\n\nfunc (mtree *MutTree) Set(key string, value interface{}) (updated bool) {\n\tnewtree, updated := mtree.tree.Set(key, value)\n\tmtree.tree = newtree\n\treturn updated\n}\n\nfunc (mtree *MutTree) Remove(key string) (value interface{}, removed bool) {\n\tnewtree, _, value, removed := mtree.tree.Remove(key)\n\tmtree.tree = newtree\n\treturn value, removed\n}\n\n// Shortcut for TraverseInRange.\nfunc (mtree *MutTree) Iterate(start, end string, cb func(*Tree) bool) bool {\n\treturn mtree.tree.TraverseInRange(start, end, true, true, cb)\n}\n\n// Shortcut for TraverseInRange.\nfunc (mtree *MutTree) IterateReverse(start, end string, cb func(*Tree) bool) bool {\n\treturn mtree.tree.TraverseInRange(start, end, false, true, cb)\n}\n"},{"Name":"z_0_filetest.gno","Body":"// PKGPATH: gno.land/r/test\npackage test\n\nimport (\n\t\"gno.land/p/demo/avl\"\n)\n\nvar tree *avl.Tree\n\nfunc init() {\n\ttree = avl.NewTree(\"key0\", \"value0\")\n\t// tree, _ = tree.Set(\"key0\", \"value0\")\n}\n\nfunc main() {\n\tvar updated bool\n\ttree, updated = tree.Set(\"key1\", \"value1\")\n\t// println(tree, updated)\n\tprintln(updated, tree.Size())\n}\n\n// Output:\n// false 2\n\n// Realm:\n// switchrealm[\"gno.land/r/test\"]\n// u[a8ada09dee16d791fd406d629fe29bb0ed084a30:4]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key0\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"value0\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:4\",\n//         \"ModTime\": \"5\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:6]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key1\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"value1\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:6\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:5]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key1\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"88d6986e67eb0c95b4819a9cf8fbf0fcb463d956\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:4\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"b42318d02c6407284a2c7939698eddcdb236749e\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:6\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// u[a8ada09dee16d791fd406d629fe29bb0ed084a30:2]={\n//     \"Blank\": {},\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"IsEscaped\": true,\n//         \"ModTime\": \"4\",\n//         \"RefCount\": \"2\"\n//     },\n//     \"Parent\": null,\n//     \"Source\": {\n//         \"@type\": \"/gno.RefNode\",\n//         \"BlockNode\": null,\n//         \"Location\": {\n//             \"File\": \"\",\n//             \"Line\": \"0\",\n//             \"Nonce\": \"0\",\n//             \"PkgPath\": \"gno.land/r/test\"\n//         }\n//     },\n//     \"Values\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"init.0\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"10\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"main\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"15\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"b58c2c6a28f7606b2e42ceca75f2da474ba4a623\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\"\n//                     }\n//                 }\n//             }\n//         }\n//     ]\n// }\n"},{"Name":"z_1_filetest.gno","Body":"// PKGPATH: gno.land/r/test\npackage test\n\nimport (\n\t\"gno.land/p/demo/avl\"\n)\n\nvar tree *avl.Tree\n\nfunc init() {\n\ttree = avl.NewTree(\"key0\", \"value0\")\n\ttree, _ = tree.Set(\"key1\", \"value1\")\n}\n\nfunc main() {\n\tvar updated bool\n\ttree, updated = tree.Set(\"key2\", \"value2\")\n\t// println(tree, updated)\n\tprintln(updated, tree.Size())\n}\n\n// Output:\n// false 3\n\n// Realm:\n// switchrealm[\"gno.land/r/test\"]\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:9]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key2\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"value2\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:9\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:8]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key2\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"bac14657044a4dbc78c87aaf6c08c38b6d5acca2\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:6\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"26a241729119ba3e93757282656c60c82924b881\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:9\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:7\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:7]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key1\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AwAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"07a4fe3e53c0b930af41d04712c28adb5c462e6b\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"1ac455de553fba7821eb3f1786b130774042ee54\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:7\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// u[a8ada09dee16d791fd406d629fe29bb0ed084a30:2]={\n//     \"Blank\": {},\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"IsEscaped\": true,\n//         \"ModTime\": \"6\",\n//         \"RefCount\": \"2\"\n//     },\n//     \"Parent\": null,\n//     \"Source\": {\n//         \"@type\": \"/gno.RefNode\",\n//         \"BlockNode\": null,\n//         \"Location\": {\n//             \"File\": \"\",\n//             \"Line\": \"0\",\n//             \"Nonce\": \"0\",\n//             \"PkgPath\": \"gno.land/r/test\"\n//         }\n//     },\n//     \"Values\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"init.0\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"10\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"main\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"15\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"f6613fd4bc857c62f0d3b5f3bd2416aa7a46191c\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:7\"\n//                     }\n//                 }\n//             }\n//         }\n//     ]\n// }\n// d[a8ada09dee16d791fd406d629fe29bb0ed084a30:4]\n"}]},"deposit":"100ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiTPFM7EjFSP3X5Vs/A4ArLVnscpqadoPU4Yz3UTSYzu"},"signature":"zicOHERrlEqYI9eXC2NYINy3Ig1JWG05G8hLKRJ7h0Untjs5hxZfhli85wAKVNms/t2UQsXNYJYo2LZxYrZ93A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d9ys48hyc9nxzagw6xxny0f9eanpr6rfhl0t7p","package":{"Name":"boards","Path":"gno.land/r/demo/boards","Files":[{"Name":"README.md","Body":"This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"},{"Name":"board.gno","Body":"package boards\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n//----------------------------------------\n// Board\n\ntype BoardID uint64\n\nfunc (bid BoardID) String() string {\n\treturn strconv.Itoa(int(bid))\n}\n\ntype Board struct {\n\tid        BoardID // only set for public boards.\n\turl       string\n\tname      string\n\tcreator   std.Address\n\tthreads   *avl.MutTree // Post.id -\u003e *Post\n\tpostsCtr  uint64       // increments Post.id\n\tcreatedAt time.Time\n\tdeleted   *avl.MutTree // TODO reserved for fast-delete.\n}\n\nfunc newBoard(id BoardID, url string, name string, creator std.Address) *Board {\n\tif !reName.MatchString(name) {\n\t\tpanic(\"invalid name: \" + name)\n\t}\n\texists := gBoardsByName.Has(name)\n\tif exists {\n\t\tpanic(\"board already exists\")\n\t}\n\treturn \u0026Board{\n\t\tid:        id,\n\t\turl:       url,\n\t\tname:      name,\n\t\tcreator:   creator,\n\t\tthreads:   avl.NewMutTree(),\n\t\tcreatedAt: time.Now(),\n\t}\n}\n\n/* TODO support this once we figure out how to ensure URL correctness.\n// A private board is not tracked by gBoards*,\n// but must be persisted by the caller's realm.\n// Private boards have 0 id and does not ping\n// back the remote board on reposts.\nfunc NewPrivateBoard(url string, name string, creator std.Address) *Board {\n\treturn newBoard(0, url, name, creator)\n}\n*/\n\nfunc (board *Board) IsPrivate() bool {\n\treturn board.id == 0\n}\n\nfunc (board *Board) GetThread(pid PostID) *Post {\n\tpidkey := postIDKey(pid)\n\tpostI, exists := board.threads.Get(pidkey)\n\tif !exists {\n\t\treturn nil\n\t}\n\treturn postI.(*Post)\n}\n\nfunc (board *Board) AddThread(creator std.Address, title string, body string) *Post {\n\tpid := board.incGetPostID()\n\tpidkey := postIDKey(pid)\n\tthread := newPost(board, pid, creator, title, body, pid, 0, 0)\n\tboard.threads.Set(pidkey, thread)\n\treturn thread\n}\n\n// NOTE: this can be potentially very expensive for threads with many replies.\n// TODO: implement optional fast-delete where thread is simply moved.\nfunc (board *Board) DeleteThread(pid PostID) {\n\tpidkey := postIDKey(pid)\n\t_, removed := board.threads.Remove(pidkey)\n\tif !removed {\n\t\tpanic(\"thread does not exist with id \" + pid.String())\n\t}\n}\n\nfunc (board *Board) HasPermission(addr std.Address, perm Permission) bool {\n\tif board.creator == addr {\n\t\tswitch perm {\n\t\tcase EditPermission:\n\t\t\treturn true\n\t\tcase DeletePermission:\n\t\t\treturn true\n\t\tdefault:\n\t\t\treturn false\n\t\t}\n\t}\n\treturn false\n}\n\n// Renders the board for display suitable as plaintext in\n// console.  This is suitable for demonstration or tests,\n// but not for prod.\nfunc (board *Board) RenderBoard() string {\n\tstr := \"\"\n\tstr += \"\\\\[[post](\" + board.GetPostFormURL() + \")]\\n\\n\"\n\tif board.threads.Size() \u003e 0 {\n\t\tboard.threads.Iterate(\"\", \"\", func(n *avl.Tree) bool {\n\t\t\tif str != \"\" {\n\t\t\t\tstr += \"----------------------------------------\\n\"\n\t\t\t}\n\t\t\tstr += n.Value().(*Post).RenderSummary() + \"\\n\"\n\t\t\treturn false\n\t\t})\n\t}\n\treturn str\n}\n\nfunc (board *Board) incGetPostID() PostID {\n\tboard.postsCtr++\n\treturn PostID(board.postsCtr)\n}\n\nfunc (board *Board) GetURLFromThreadAndReplyID(threadID, replyID PostID) string {\n\tif replyID == 0 {\n\t\treturn board.url + \"/\" + threadID.String()\n\t} else {\n\t\treturn board.url + \"/\" + threadID.String() + \"/\" + replyID.String()\n\t}\n}\n\nfunc (board *Board) GetPostFormURL() string {\n\treturn \"/r/demo/boards?help\u0026__func=CreateThread\" +\n\t\t\"\u0026bid=\" + board.id.String() +\n\t\t\"\u0026body.type=textarea\"\n}\n"},{"Name":"boards.gno","Body":"package boards\n\nimport (\n\t\"regexp\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n//----------------------------------------\n// Realm (package) state\n\nvar (\n\tgBoards         = avl.NewMutTree() // id -\u003e *Board\n\tgBoardsCtr      int                // increments Board.id\n\tgBoardsByName   = avl.NewMutTree() // name -\u003e *Board\n\tgDefaultAnonFee = 100000000        // minimum fee required if anonymous\n)\n\n//----------------------------------------\n// Constants\n\nvar reName = regexp.MustCompile(`^[a-z]+[_a-z0-9]{2,29}$`)\n"},{"Name":"example_post.md","Body":"Hey all! 👋\n\nThis is my first post in this land!"},{"Name":"misc.gno","Body":"package boards\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/r/demo/users\"\n)\n\n//----------------------------------------\n// private utility methods\n// XXX ensure these cannot be called from public.\n\nfunc getBoard(bid BoardID) *Board {\n\tbidkey := boardIDKey(bid)\n\tboard_, exists := gBoards.Get(bidkey)\n\tif !exists {\n\t\treturn nil\n\t}\n\tboard := board_.(*Board)\n\treturn board\n}\n\nfunc incGetBoardID() BoardID {\n\tgBoardsCtr++\n\treturn BoardID(gBoardsCtr)\n}\n\nfunc padLeft(str string, length int) string {\n\tif len(str) \u003e= length {\n\t\treturn str\n\t} else {\n\t\treturn strings.Repeat(\" \", length-len(str)) + str\n\t}\n}\n\nfunc padZero(u64 uint64, length int) string {\n\tstr := strconv.Itoa(int(u64))\n\tif len(str) \u003e= length {\n\t\treturn str\n\t} else {\n\t\treturn strings.Repeat(\"0\", length-len(str)) + str\n\t}\n}\n\nfunc boardIDKey(bid BoardID) string {\n\treturn padZero(uint64(bid), 10)\n}\n\nfunc postIDKey(pid PostID) string {\n\treturn padZero(uint64(pid), 10)\n}\n\nfunc indentBody(indent string, body string) string {\n\tlines := strings.Split(body, \"\\n\")\n\tres := \"\"\n\tfor i, line := range lines {\n\t\tif i \u003e 0 {\n\t\t\tres += \"\\n\"\n\t\t}\n\t\tres += indent + line\n\t}\n\treturn res\n}\n\n// NOTE: length must be greater than 3.\nfunc summaryOf(str string, length int) string {\n\tlines := strings.SplitN(str, \"\\n\", 2)\n\tline := lines[0]\n\tif len(line) \u003e length {\n\t\tline = line[:(length-3)] + \"...\"\n\t} else if len(lines) \u003e 1 {\n\t\t// len(line) \u003c= 80\n\t\tline = line + \"...\"\n\t}\n\treturn line\n}\n\nfunc displayAddressMD(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user == nil {\n\t\treturn \"[\" + addr.String() + \"](/r/users:\" + addr.String() + \")\"\n\t} else {\n\t\treturn \"[@\" + user.Name() + \"](/r/users:\" + user.Name() + \")\"\n\t}\n}\n\nfunc usernameOf(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user == nil {\n\t\treturn \"\"\n\t} else {\n\t\treturn user.Name()\n\t}\n}\n"},{"Name":"post.gno","Body":"package boards\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n//----------------------------------------\n// Post\n\n// NOTE: a PostID is relative to the board.\ntype PostID uint64\n\nfunc (pid PostID) String() string {\n\treturn strconv.Itoa(int(pid))\n}\n\n// A Post is a \"thread\" or a \"reply\" depending on context.\n// A thread is a Post of a Board that holds other replies.\ntype Post struct {\n\tboard       *Board\n\tid          PostID\n\tcreator     std.Address\n\ttitle       string // optional\n\tbody        string\n\treplies     *avl.MutTree // Post.id -\u003e *Post\n\trepliesAll  *avl.MutTree // Post.id -\u003e *Post (all replies, for top-level posts)\n\treposts     *avl.MutTree // Board.id -\u003e Post.id\n\tthreadID    PostID       // original Post.id\n\tparentID    PostID       // parent Post.id (if reply or repost)\n\trepostBoard BoardID      // original Board.id (if repost)\n\tcreatedAt   time.Time\n\tupdatedAt   time.Time\n}\n\nfunc newPost(board *Board, id PostID, creator std.Address, title, body string, threadID, parentID PostID, repostBoard BoardID) *Post {\n\treturn \u0026Post{\n\t\tboard:       board,\n\t\tid:          id,\n\t\tcreator:     creator,\n\t\ttitle:       title,\n\t\tbody:        body,\n\t\treplies:     avl.NewMutTree(),\n\t\trepliesAll:  avl.NewMutTree(),\n\t\treposts:     avl.NewMutTree(),\n\t\tthreadID:    threadID,\n\t\tparentID:    parentID,\n\t\trepostBoard: repostBoard,\n\t\tcreatedAt:   time.Now(),\n\t}\n}\n\nfunc (post *Post) IsThread() bool {\n\treturn post.parentID == 0\n}\n\nfunc (post *Post) GetPostID() PostID {\n\treturn post.id\n}\n\nfunc (post *Post) AddReply(creator std.Address, body string) *Post {\n\tboard := post.board\n\tpid := board.incGetPostID()\n\tpidkey := postIDKey(pid)\n\treply := newPost(board, pid, creator, \"\", body, post.threadID, post.id, 0)\n\tpost.replies.Set(pidkey, reply)\n\tif post.threadID == post.id {\n\t\tpost.repliesAll.Set(pidkey, reply)\n\t} else {\n\t\tthread := board.GetThread(post.threadID)\n\t\tthread.repliesAll.Set(pidkey, reply)\n\t}\n\treturn reply\n}\n\nfunc (post *Post) Update(title string, body string) {\n\tpost.title = title\n\tpost.body = body\n\tpost.updatedAt = time.Now()\n}\n\nfunc (thread *Post) GetReply(pid PostID) *Post {\n\tpidkey := postIDKey(pid)\n\treplyI, ok := thread.repliesAll.Get(pidkey)\n\tif !ok {\n\t\treturn nil\n\t} else {\n\t\treturn replyI.(*Post)\n\t}\n}\n\nfunc (post *Post) AddRepostTo(creator std.Address, title, body string, dst *Board) *Post {\n\tif !post.IsThread() {\n\t\tpanic(\"cannot repost non-thread post\")\n\t}\n\tpid := dst.incGetPostID()\n\tpidkey := postIDKey(pid)\n\trepost := newPost(dst, pid, creator, title, body, pid, post.id, post.board.id)\n\tdst.threads.Set(pidkey, repost)\n\tif !dst.IsPrivate() {\n\t\tbidkey := boardIDKey(dst.id)\n\t\tpost.reposts.Set(bidkey, pid)\n\t}\n\treturn repost\n}\n\nfunc (thread *Post) DeletePost(pid PostID) {\n\tif thread.id == pid {\n\t\tpanic(\"should not happen\")\n\t}\n\tpidkey := postIDKey(pid)\n\tpostI, removed := thread.repliesAll.Remove(pidkey)\n\tif !removed {\n\t\tpanic(\"post not found in thread\")\n\t}\n\tpost := postI.(*Post)\n\tif post.parentID != thread.id {\n\t\tparent := thread.GetReply(post.parentID)\n\t\tparent.replies.Remove(pidkey)\n\t} else {\n\t\tthread.replies.Remove(pidkey)\n\t}\n}\n\nfunc (post *Post) HasPermission(addr std.Address, perm Permission) bool {\n\tif post.creator == addr {\n\t\tswitch perm {\n\t\tcase EditPermission:\n\t\t\treturn true\n\t\tcase DeletePermission:\n\t\t\treturn true\n\t\tdefault:\n\t\t\treturn false\n\t\t}\n\t}\n\t// post notes inherit permissions of the board.\n\treturn post.board.HasPermission(addr, perm)\n}\n\nfunc (post *Post) GetSummary() string {\n\treturn summaryOf(post.body, 80)\n}\n\nfunc (post *Post) GetURL() string {\n\tif post.IsThread() {\n\t\treturn post.board.GetURLFromThreadAndReplyID(\n\t\t\tpost.id, 0)\n\t} else {\n\t\treturn post.board.GetURLFromThreadAndReplyID(\n\t\t\tpost.threadID, post.id)\n\t}\n}\n\nfunc (post *Post) GetReplyFormURL() string {\n\treturn \"/r/demo/boards?help\u0026__func=CreateReply\" +\n\t\t\"\u0026bid=\" + post.board.id.String() +\n\t\t\"\u0026threadid=\" + post.threadID.String() +\n\t\t\"\u0026postid=\" + post.id.String() +\n\t\t\"\u0026body.type=textarea\"\n}\n\nfunc (post *Post) GetDeleteFormURL() string {\n\treturn \"/r/demo/boards?help\u0026__func=DeletePost\" +\n\t\t\"\u0026bid=\" + post.board.id.String() +\n\t\t\"\u0026threadid=\" + post.threadID.String() +\n\t\t\"\u0026postid=\" + post.id.String()\n}\n\nfunc (post *Post) RenderSummary() string {\n\tstr := \"\"\n\tif post.title != \"\" {\n\t\tstr += \"## [\" + summaryOf(post.title, 80) + \"](\" + post.GetURL() + \")\\n\"\n\t\tstr += \"\\n\"\n\t}\n\tstr += post.GetSummary() + \"\\n\"\n\tstr += \"\\\\- \" + displayAddressMD(post.creator) + \",\"\n\tstr += \" [\" + post.createdAt.Format(\"2006-01-02 3:04pm MST\") + \"](\" + post.GetURL() + \")\"\n\tstr += \" \\\\[[x](\" + post.GetDeleteFormURL() + \")]\"\n\tstr += \" (\" + strconv.Itoa(post.replies.Size()) + \" replies)\" + \"\\n\"\n\treturn str\n}\n\nfunc (post *Post) RenderPost(indent string, levels int) string {\n\tif post == nil {\n\t\treturn \"nil post\"\n\t}\n\tstr := \"\"\n\tif post.title != \"\" {\n\t\tstr += indent + \"# \" + post.title + \"\\n\"\n\t\tstr += indent + \"\\n\"\n\t}\n\tstr += indentBody(indent, post.body) + \"\\n\" // TODO: indent body lines.\n\tstr += indent + \"\\\\- \" + displayAddressMD(post.creator) + \", \"\n\tstr += \"[\" + post.createdAt.Format(\"2006-01-02 3:04pm (MST)\") + \"](\" + post.GetURL() + \")\"\n\tstr += \" \\\\[[reply](\" + post.GetReplyFormURL() + \")]\"\n\tstr += \" \\\\[[x](\" + post.GetDeleteFormURL() + \")]\\n\"\n\tif levels \u003e 0 {\n\t\tif post.replies.Size() \u003e 0 {\n\t\t\tpost.replies.Iterate(\"\", \"\", func(n *avl.Tree) bool {\n\t\t\t\tstr += indent + \"\\n\"\n\t\t\t\tstr += n.Value().(*Post).RenderPost(indent+\"\u003e \", levels-1)\n\t\t\t\treturn false\n\t\t\t})\n\t\t}\n\t} else {\n\t\tif post.replies.Size() \u003e 0 {\n\t\t\tstr += indent + \"\\n\"\n\t\t\tstr += indent + \"_[see all \" + strconv.Itoa(post.replies.Size()) + \" replies](\" + post.GetURL() + \")_\\n\"\n\t\t}\n\t}\n\treturn str\n}\n\n// render reply and link to context thread\nfunc (post *Post) RenderInner() string {\n\tif post.IsThread() {\n\t\tpanic(\"unexpected thread\")\n\t}\n\tthreadID := post.threadID\n\t// replyID := post.id\n\tparentID := post.parentID\n\tstr := \"\"\n\tstr += \"_[see thread](\" + post.board.GetURLFromThreadAndReplyID(\n\t\tthreadID, 0) + \")_\\n\\n\"\n\tthread := post.board.GetThread(post.threadID)\n\tvar parent *Post\n\tif thread.id == parentID {\n\t\tparent = thread\n\t} else {\n\t\tparent = thread.GetReply(parentID)\n\t}\n\tstr += parent.RenderPost(\"\", 0)\n\tstr += \"\\n\"\n\tstr += post.RenderPost(\"\u003e \", 5)\n\treturn str\n}\n"},{"Name":"public.gno","Body":"package boards\n\nimport (\n\t\"std\"\n\t\"strconv\"\n)\n\n//----------------------------------------\n// Public facing functions\n\nfunc GetBoardIDFromName(name string) (BoardID, bool) {\n\tboardI, exists := gBoardsByName.Get(name)\n\tif !exists {\n\t\treturn 0, false\n\t}\n\treturn boardI.(*Board).id, true\n}\n\nfunc CreateBoard(name string) BoardID {\n\tstd.AssertOriginCall()\n\tbid := incGetBoardID()\n\tcaller := std.GetOrigCaller()\n\tif usernameOf(caller) == \"\" {\n\t\tpanic(\"unauthorized\")\n\t}\n\turl := \"/r/demo/boards:\" + name\n\tboard := newBoard(bid, url, name, caller)\n\tbidkey := boardIDKey(bid)\n\tgBoards.Set(bidkey, board)\n\tgBoardsByName.Set(name, board)\n\treturn board.id\n}\n\nfunc checkAnonFee() bool {\n\tsent := std.GetOrigSend()\n\tanonFeeCoin := std.Coin{\"ugnot\", int64(gDefaultAnonFee)}\n\tif len(sent) == 1 \u0026\u0026 sent[0].IsGTE(anonFeeCoin) {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc CreateThread(bid BoardID, title string, body string) PostID {\n\tstd.AssertOriginCall()\n\tcaller := std.GetOrigCaller()\n\tif usernameOf(caller) == \"\" {\n\t\tif !checkAnonFee() {\n\t\t\tpanic(\"please register, otherwise minimum fee \" + strconv.Itoa(gDefaultAnonFee) + \" is required if anonymous\")\n\t\t}\n\t}\n\tboard := getBoard(bid)\n\tif board == nil {\n\t\tpanic(\"board not exist\")\n\t}\n\tthread := board.AddThread(caller, title, body)\n\treturn thread.id\n}\n\nfunc CreateReply(bid BoardID, threadid, postid PostID, body string) PostID {\n\tstd.AssertOriginCall()\n\tcaller := std.GetOrigCaller()\n\tif usernameOf(caller) == \"\" {\n\t\tif !checkAnonFee() {\n\t\t\tpanic(\"please register, otherwise minimum fee \" + strconv.Itoa(gDefaultAnonFee) + \" is required if anonymous\")\n\t\t}\n\t}\n\tboard := getBoard(bid)\n\tif board == nil {\n\t\tpanic(\"board not exist\")\n\t}\n\tthread := board.GetThread(threadid)\n\tif thread == nil {\n\t\tpanic(\"thread not exist\")\n\t}\n\tif postid == threadid {\n\t\treply := thread.AddReply(caller, body)\n\t\treturn reply.id\n\t} else {\n\t\tpost := thread.GetReply(postid)\n\t\treply := post.AddReply(caller, body)\n\t\treturn reply.id\n\t}\n}\n\n// If dstBoard is private, does not ping back.\n// If board specified by bid is private, panics.\nfunc CreateRepost(bid BoardID, postid PostID, title string, body string, dstBoardID BoardID) PostID {\n\tstd.AssertOriginCall()\n\tcaller := std.GetOrigCaller()\n\tif usernameOf(caller) == \"\" {\n\t\t// TODO: allow with gDefaultAnonFee payment.\n\t\tif !checkAnonFee() {\n\t\t\tpanic(\"please register, otherwise minimum fee \" + strconv.Itoa(gDefaultAnonFee) + \" is required if anonymous\")\n\t\t}\n\t}\n\tboard := getBoard(bid)\n\tif board == nil {\n\t\tpanic(\"src board not exist\")\n\t}\n\tif board.IsPrivate() {\n\t\tpanic(\"cannot repost from a private board\")\n\t}\n\tdst := getBoard(dstBoardID)\n\tif dst == nil {\n\t\tpanic(\"dst board not exist\")\n\t}\n\tthread := board.GetThread(postid)\n\tif thread == nil {\n\t\tpanic(\"thread not exist\")\n\t}\n\trepost := thread.AddRepostTo(caller, title, body, dst)\n\treturn repost.id\n}\n\nfunc DeletePost(bid BoardID, threadid, postid PostID, reason string) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetOrigCaller()\n\tboard := getBoard(bid)\n\tif board == nil {\n\t\tpanic(\"board not exist\")\n\t}\n\tthread := board.GetThread(threadid)\n\tif thread == nil {\n\t\tpanic(\"thread not exist\")\n\t}\n\tif postid == threadid {\n\t\t// delete thread\n\t\tif !thread.HasPermission(caller, DeletePermission) {\n\t\t\tpanic(\"unauthorized\")\n\t\t}\n\t\tboard.DeleteThread(threadid)\n\t} else {\n\t\t// delete thread's post\n\t\tpost := thread.GetReply(postid)\n\t\tif post == nil {\n\t\t\tpanic(\"post not exist\")\n\t\t}\n\t\tif !post.HasPermission(caller, DeletePermission) {\n\t\t\tpanic(\"unauthorized\")\n\t\t}\n\t\tthread.DeletePost(postid)\n\t}\n}\n\nfunc EditPost(bid BoardID, threadid, postid PostID, title, body string) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetOrigCaller()\n\tboard := getBoard(bid)\n\tif board == nil {\n\t\tpanic(\"board not exist\")\n\t}\n\tthread := board.GetThread(threadid)\n\tif thread == nil {\n\t\tpanic(\"thread not exist\")\n\t}\n\tif postid == threadid {\n\t\t// edit thread\n\t\tif !thread.HasPermission(caller, EditPermission) {\n\t\t\tpanic(\"unauthorized\")\n\t\t}\n\t\tthread.Update(title, body)\n\t} else {\n\t\t// edit thread's post\n\t\tpost := thread.GetReply(postid)\n\t\tif post == nil {\n\t\t\tpanic(\"post not exist\")\n\t\t}\n\t\tif !post.HasPermission(caller, EditPermission) {\n\t\t\tpanic(\"unauthorized\")\n\t\t}\n\t\tpost.Update(title, body)\n\t}\n}\n"},{"Name":"render.gno","Body":"package boards\n\nimport (\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n//----------------------------------------\n// Render functions\n\nfunc RenderBoard(bid BoardID) string {\n\tboard := getBoard(bid)\n\tif board == nil {\n\t\treturn \"missing board\"\n\t}\n\treturn board.RenderBoard()\n}\n\nfunc Render(path string) string {\n\tif path == \"\" {\n\t\tstr := \"These are all the boards of this realm:\\n\\n\"\n\t\tgBoards.Iterate(\"\", \"\", func(n *avl.Tree) bool {\n\t\t\tboard := n.Value().(*Board)\n\t\t\tstr += \" * [\" + board.url + \"](\" + board.url + \")\\n\"\n\t\t\treturn false\n\t\t})\n\t\treturn str\n\t}\n\tparts := strings.Split(path, \"/\")\n\tif len(parts) == 1 {\n\t\t// /r/demo/boards:BOARD_NAME\n\t\tname := parts[0]\n\t\tboardI, exists := gBoardsByName.Get(name)\n\t\tif !exists {\n\t\t\treturn \"board does not exist: \" + name\n\t\t}\n\t\treturn boardI.(*Board).RenderBoard()\n\t} else if len(parts) == 2 {\n\t\t// /r/demo/boards:BOARD_NAME/THREAD_ID\n\t\tname := parts[0]\n\t\tboardI, exists := gBoardsByName.Get(name)\n\t\tif !exists {\n\t\t\treturn \"board does not exist: \" + name\n\t\t}\n\t\tpid, err := strconv.Atoi(parts[1])\n\t\tif err != nil {\n\t\t\treturn \"invalid thread id: \" + parts[1]\n\t\t}\n\t\tboard := boardI.(*Board)\n\t\tthread := board.GetThread(PostID(pid))\n\t\tif thread == nil {\n\t\t\treturn \"thread does not exist with id: \" + parts[1]\n\t\t}\n\t\treturn thread.RenderPost(\"\", 5)\n\t} else if len(parts) == 3 {\n\t\t// /r/demo/boards:BOARD_NAME/THREAD_ID/REPLY_ID\n\t\tname := parts[0]\n\t\tboardI, exists := gBoardsByName.Get(name)\n\t\tif !exists {\n\t\t\treturn \"board does not exist: \" + name\n\t\t}\n\t\tpid, err := strconv.Atoi(parts[1])\n\t\tif err != nil {\n\t\t\treturn \"invalid thread id: \" + parts[1]\n\t\t}\n\t\tboard := boardI.(*Board)\n\t\tthread := board.GetThread(PostID(pid))\n\t\tif thread == nil {\n\t\t\treturn \"thread does not exist with id: \" + parts[1]\n\t\t}\n\t\trid, err := strconv.Atoi(parts[2])\n\t\tif err != nil {\n\t\t\treturn \"invalid reply id: \" + parts[2]\n\t\t}\n\t\treply := thread.GetReply(PostID(rid))\n\t\tif reply == nil {\n\t\t\treturn \"reply does not exist with id: \" + parts[2]\n\t\t}\n\t\treturn reply.RenderInner()\n\t} else {\n\t\treturn \"unrecognized path \" + path\n\t}\n}\n"},{"Name":"role.gno","Body":"package boards\n\ntype Permission string\n\nconst (\n\tDeletePermission Permission = \"role:delete\"\n\tEditPermission   Permission = \"role:edit\"\n)\n"},{"Name":"z_0_a_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\nimport (\n\t\"gno.land/r/demo/boards\"\n)\n\nvar bid boards.BoardID\n\nfunc init() {\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid := boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\tboards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Error:\n// unauthorized\n"},{"Name":"z_0_b_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 199000000ugnot\n\nimport (\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar bid boards.BoardID\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\tbid = boards.CreateBoard(\"test_board\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Error:\n// payment must not be less than 200000000\n"},{"Name":"z_0_c_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar bid boards.BoardID\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\tboards.CreateThread(1, \"First Post (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Error:\n// board not exist\n"},{"Name":"z_0_d_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar bid boards.BoardID\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateReply(bid, 0, 0, \"Reply of the second post\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Error:\n// thread not exist\n"},{"Name":"z_0_e_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar bid boards.BoardID\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\tboards.CreateReply(bid, 0, 0, \"Reply of the second post\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Error:\n// board not exist\n"},{"Name":"z_0_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar bid boards.BoardID\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid := boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\tboards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Output:\n// \\[[post](/r/demo/boards?help\u0026__func=CreateThread\u0026bid=1\u0026body.type=textarea)]\n//\n// ----------------------------------------\n// ## [First Post (title)](/r/demo/boards:test_board/1)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm UTC](/r/demo/boards:test_board/1) \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)] (0 replies)\n//\n// ----------------------------------------\n// ## [Second Post (title)](/r/demo/boards:test_board/2)\n//\n// Body of the second post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm UTC](/r/demo/boards:test_board/2) \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=2)] (1 replies)\n"},{"Name":"z_10_a_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\t// boardId 2 not exist\n\tboards.DeletePost(2, pid, pid, \"\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// board not exist\n"},{"Name":"z_10_b_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\t// pid of 2 not exist\n\tboards.DeletePost(bid, 2, 2, \"\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// thread not exist\n"},{"Name":"z_10_c_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n\trid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n\trid = boards.CreateReply(bid, pid, pid, \"First reply of the First post\\n\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\tboards.DeletePost(bid, pid, rid, \"\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n//\n// \u003e First reply of the First post\n// \u003e\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=2)]\n//\n// ----------------------------------------------------\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n"},{"Name":"z_10_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\tboards.DeletePost(bid, pid, pid, \"\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n//\n// ----------------------------------------------------\n// thread does not exist with id: 1\n"},{"Name":"z_11_a_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\t// board 2 not exist\n\tboards.EditPost(2, pid, pid, \"Edited: First Post in (title)\", \"Edited: Body of the first post. (body)\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// board not exist\n"},{"Name":"z_11_b_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\t// thread 2 not exist\n\tboards.EditPost(bid, 2, pid, \"Edited: First Post in (title)\", \"Edited: Body of the first post. (body)\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// thread not exist\n"},{"Name":"z_11_c_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\t// post 2 not exist\n\tboards.EditPost(bid, pid, 2, \"Edited: First Post in (title)\", \"Edited: Body of the first post. (body)\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// post not exist\n"},{"Name":"z_11_d_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n\trid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n\trid = boards.CreateReply(bid, pid, pid, \"First reply of the First post\\n\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\tboards.EditPost(bid, pid, rid, \"\", \"Edited: First reply of the First post\\n\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n//\n// \u003e First reply of the First post\n// \u003e\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=2)]\n//\n// ----------------------------------------------------\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n//\n// \u003e Edited: First reply of the First post\n// \u003e\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=2)]\n"},{"Name":"z_11_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\tboards.EditPost(bid, pid, pid, \"Edited: First Post in (title)\", \"Edited: Body of the first post. (body)\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n//\n// ----------------------------------------------------\n// # Edited: First Post in (title)\n//\n// Edited: Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n"},{"Name":"z_1_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar board *boards.Board\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\t_ = boards.CreateBoard(\"test_board_1\")\n\t_ = boards.CreateBoard(\"test_board_2\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"\"))\n}\n\n// Output:\n// These are all the boards of this realm:\n//\n//  * [/r/demo/boards:test_board_1](/r/demo/boards:test_board_1)\n//  * [/r/demo/boards:test_board_2](/r/demo/boards:test_board_2)\n"},{"Name":"z_2_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid = boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\tboards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # Second Post (title)\n//\n// Body of the second post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=2)]\n//\n// \u003e Reply of the second post\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/3) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=3\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=3)]\n"},{"Name":"z_3_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid = boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n}\n\nfunc main() {\n\trid := boards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n\tprintln(rid)\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// 3\n// # Second Post (title)\n//\n// Body of the second post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=2)]\n//\n// \u003e Reply of the second post\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/3) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=3\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=3)]\n"},{"Name":"z_4_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid = boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\trid := boards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n\tprintln(rid)\n}\n\nfunc main() {\n\trid2 := boards.CreateReply(bid, pid, pid, \"Second reply of the second post\")\n\tprintln(rid2)\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// 3\n// 4\n// # Second Post (title)\n//\n// Body of the second post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=2)]\n//\n// \u003e Reply of the second post\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/3) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=3\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=3)]\n//\n// \u003e Second reply of the second post\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/4) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=4\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=4)]\n\n// Realm:\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/boards\"]\n// u[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:100]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"0000000003\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/r/demo/boards.Post\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/r/demo/boards.Post\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Escaped\": true,\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:101\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:100\",\n//         \"ModTime\": \"108\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:108\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:109]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"0000000004\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/r/demo/boards.Post\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/r/demo/boards.Post\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Escaped\": true,\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:109\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:108\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:108]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"0000000004\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"b0e1bb401a1e4392dc4aa8353e35364905be64af\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:100\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"a14457b34570e396c59208d49f40e1cc23b80a11\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:109\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:108\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:95\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:111]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:111\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:112]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:112\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:113]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:113\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:114]={\n//     \"Fields\": [\n//         {\n//             \"N\": \"AAAAgJSeXbo=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"65536\"\n//             }\n//         },\n//         {\n//             \"N\": \"AbSNdvQQIhE=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"1024\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"time.Location\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"336074805fc853987abe6f7fe3ad97a6a6f3077a:2\"\n//                 },\n//                 \"Index\": \"188\",\n//                 \"TV\": null\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:114\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:115]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"65536\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"1024\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"time.Location\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:115\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/r/demo/boards.Board\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/r/demo/boards.Board\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Escaped\": true,\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:81\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"N\": \"BAAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"gno.land/r/demo/boards.PostID\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"std.Address\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"g1arjyc64rpthwn8zhxtzjvearm5scy43y7vm985\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"Second reply of the second post\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"9adae740a66b6f3d0066d3ddf478290286fd8a6e\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:111\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"630649048eb057bc03298c019417120984ad62b7\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:112\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"691da6b946b1873fba7f8dcf100e3e9d280e0759\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:113\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"gno.land/r/demo/boards.PostID\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"gno.land/r/demo/boards.PostID\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"gno.land/r/demo/boards.BoardID\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"time.Time\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.RefValue\",\n//                 \"Hash\": \"91a60131fc119b8a406c4be71e1e991e37ca522b\",\n//                 \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:114\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"time.Time\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.RefValue\",\n//                 \"Hash\": \"39aedff3aa8d8246df681ff0f576f8ac31cb5d55\",\n//                 \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:115\"\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110\",\n//         \"IsEscaped\": true,\n//         \"ModTime\": \"0\",\n//         \"RefCount\": \"2\"\n//     }\n// }\n// u[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:107]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"0000000003\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/r/demo/boards.Post\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/r/demo/boards.Post\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Escaped\": true,\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:101\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:107\",\n//         \"ModTime\": \"116\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:116\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:117]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"0000000004\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/r/demo/boards.Post\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/r/demo/boards.Post\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Escaped\": true,\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:117\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:116\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:116]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"0000000004\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"625e87966cb6643c1ad5ccd0a9ee1b0e3fe767fb\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:107\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"280f673fa84e1981a3138849f782b5dd87fbfd09\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:117\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:116\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:96\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// u[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:81]={\n//     \"Fields\": [\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"gno.land/r/demo/boards.BoardID\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"/r/demo/boards:test_board\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"test_board\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"std.Address\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"g1arjyc64rpthwn8zhxtzjvearm5scy43y7vm985\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"ecc6212ef0cb96a4785bb34427a7d0ee7f4c8400\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:82\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"N\": \"BAAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"65536\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"time.Time\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.RefValue\",\n//                 \"Hash\": \"7e9fd9bb5e90a06c7751585cd80f23aedddde25b\",\n//                 \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:83\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:81\",\n//         \"IsEscaped\": true,\n//         \"ModTime\": \"107\",\n//         \"RefCount\": \"6\"\n//     }\n// }\n// u[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:95]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"1a1636b4c1593d1694512b57780449f80c14d92f\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:108\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:95\",\n//         \"ModTime\": \"107\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:94\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// u[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:96]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"4df019c20a64842ebe5ae2cf1aed14cc7799588d\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:116\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:96\",\n//         \"ModTime\": \"107\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:94\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// switchrealm[\"gno.land/r/demo/boards\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/boards\"]\n// switchrealm[\"gno.land/r/boards_test\"]\n"},{"Name":"z_5_b_filetest.gno","Body":"package main\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/testutils\"\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nconst admin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\")\n\nfunc main() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\t// create board via registered user\n\tbid := boards.CreateBoard(\"test_board\")\n\n\t// create post via anon user\n\ttest2 := testutils.TestAddress(\"test2\")\n\tstd.TestSetOrigCaller(test2)\n\tstd.TestSetOrigSend(std.Coins{{\"ugnot\", 9000000}}, nil)\n\n\tpid := boards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// please register, otherwise minimum fee 100000000 is required if anonymous\n"},{"Name":"z_5_c_filetest.gno","Body":"package main\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/testutils\"\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nconst admin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\")\n\nfunc main() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\t// create board via registered user\n\tbid := boards.CreateBoard(\"test_board\")\n\n\t// create post via anon user\n\ttest2 := testutils.TestAddress(\"test2\")\n\tstd.TestSetOrigCaller(test2)\n\tstd.TestSetOrigSend(std.Coins{{\"ugnot\", 101000000}}, nil)\n\n\tpid := boards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tboards.CreateReply(bid, pid, pid, \"Reply of the first post\")\n\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # First Post (title)\n//\n// Body of the first post. (body)\n// \\- [g1w3jhxapjta047h6lta047h6lta047h6laqcyu4](/r/users:g1w3jhxapjta047h6lta047h6lta047h6laqcyu4), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n//\n// \u003e Reply of the first post\n// \u003e \\- [g1w3jhxapjta047h6lta047h6lta047h6laqcyu4](/r/users:g1w3jhxapjta047h6lta047h6lta047h6laqcyu4), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=2)]\n"},{"Name":"z_5_d_filetest.gno","Body":"package main\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/testutils\"\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nconst admin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\")\n\nfunc main() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\t// create board via registered user\n\tbid := boards.CreateBoard(\"test_board\")\n\tpid := boards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\n\t// create reply via anon user\n\ttest2 := testutils.TestAddress(\"test2\")\n\tstd.TestSetOrigCaller(test2)\n\tstd.TestSetOrigSend(std.Coins{{\"ugnot\", 9000000}}, nil)\n\tboards.CreateReply(bid, pid, pid, \"Reply of the first post\")\n\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// please register, otherwise minimum fee 100000000 is required if anonymous\n"},{"Name":"z_5_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid = boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\trid := boards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n}\n\nfunc main() {\n\trid2 := boards.CreateReply(bid, pid, pid, \"Second reply of the second post\\n\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # Second Post (title)\n//\n// Body of the second post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=2)]\n//\n// \u003e Reply of the second post\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/3) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=3\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=3)]\n//\n// \u003e Second reply of the second post\n// \u003e\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/4) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=4\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=4)]\n"},{"Name":"z_6_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n\trid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid = boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\trid = boards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n}\n\nfunc main() {\n\tboards.CreateReply(bid, pid, pid, \"Second reply of the second post\\n\")\n\tboards.CreateReply(bid, pid, rid, \"First reply of the first reply\\n\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # Second Post (title)\n//\n// Body of the second post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=2)]\n//\n// \u003e Reply of the second post\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/3) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=3\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=3)]\n// \u003e\n// \u003e \u003e First reply of the first reply\n// \u003e \u003e\n// \u003e \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/5) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=5\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=5)]\n//\n// \u003e Second reply of the second post\n// \u003e\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/4) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=4\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=4)]\n"},{"Name":"z_7_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nfunc init() {\n\t// register\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\t// create board and post\n\tbid := boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Output:\n// \\[[post](/r/demo/boards?help\u0026__func=CreateThread\u0026bid=1\u0026body.type=textarea)]\n//\n// ----------------------------------------\n// ## [First Post (title)](/r/demo/boards:test_board/1)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm UTC](/r/demo/boards:test_board/1) \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)] (0 replies)\n"},{"Name":"z_8_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n\trid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid = boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\trid = boards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n}\n\nfunc main() {\n\tboards.CreateReply(bid, pid, pid, \"Second reply of the second post\\n\")\n\trid2 := boards.CreateReply(bid, pid, rid, \"First reply of the first reply\\n\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid)) + \"/\" + strconv.Itoa(int(rid2))))\n}\n\n// Output:\n// _[see thread](/r/demo/boards:test_board/2)_\n//\n// Reply of the second post\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/3) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=3\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=3)]\n//\n// _[see all 1 replies](/r/demo/boards:test_board/2/3)_\n//\n// \u003e First reply of the first reply\n// \u003e\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/5) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=5\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=5)]\n"},{"Name":"z_9_a_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar dstBoard boards.BoardID\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tdstBoard = boards.CreateBoard(\"dst_board\")\n\n\tboards.CreateRepost(0, 0, \"First Post in (title)\", \"Body of the first post. (body)\", dstBoard)\n}\n\nfunc main() {\n}\n\n// Error:\n// src board not exist\n"},{"Name":"z_9_b_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tsrcBoard boards.BoardID\n\tpid      boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tsrcBoard = boards.CreateBoard(\"first_board\")\n\tpid = boards.CreateThread(srcBoard, \"First Post in (title)\", \"Body of the first post. (body)\")\n\n\tboards.CreateRepost(srcBoard, pid, \"First Post in (title)\", \"Body of the first post. (body)\", 0)\n}\n\nfunc main() {\n}\n\n// Error:\n// dst board not exist\n"},{"Name":"z_9_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tfirstBoard  boards.BoardID\n\tsecondBoard boards.BoardID\n\tpid         boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tfirstBoard = boards.CreateBoard(\"first_board\")\n\tsecondBoard = boards.CreateBoard(\"second_board\")\n\tpid = boards.CreateThread(firstBoard, \"First Post in (title)\", \"Body of the first post. (body)\")\n\n\tboards.CreateRepost(firstBoard, pid, \"First Post in (title)\", \"Body of the first post. (body)\", secondBoard)\n}\n\nfunc main() {\n\tprintln(boards.Render(\"second_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:second_board/1/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=2\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=2\u0026threadid=1\u0026postid=1)]\n"}]},"deposit":"100ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2mBiXy3Vxfh7cc/Gl9H/ZLw7ULOVUk5fupjmn6+/W2P"},"signature":"MYb9oRZRylEc2Jwr9jEh8+aen8JeP4ELM4C+Yq/qlVkXsSQhGrW83HZlfXS9LzhwJcQfIgWVXvCyMtW5NLUtxw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d9ys48hyc9nxzagw6xxny0f9eanpr6rfhl0t7p","package":{"Name":"boards","Path":"gno.land/r/demo/boardss","Files":[{"Name":"README.md","Body":"This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"},{"Name":"board.gno","Body":"package boards\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n//----------------------------------------\n// Board\n\ntype BoardID uint64\n\nfunc (bid BoardID) String() string {\n\treturn strconv.Itoa(int(bid))\n}\n\ntype Board struct {\n\tid        BoardID // only set for public boards.\n\turl       string\n\tname      string\n\tcreator   std.Address\n\tthreads   *avl.MutTree // Post.id -\u003e *Post\n\tpostsCtr  uint64       // increments Post.id\n\tcreatedAt time.Time\n\tdeleted   *avl.MutTree // TODO reserved for fast-delete.\n}\n\nfunc newBoard(id BoardID, url string, name string, creator std.Address) *Board {\n\tif !reName.MatchString(name) {\n\t\tpanic(\"invalid name: \" + name)\n\t}\n\texists := gBoardsByName.Has(name)\n\tif exists {\n\t\tpanic(\"board already exists\")\n\t}\n\treturn \u0026Board{\n\t\tid:        id,\n\t\turl:       url,\n\t\tname:      name,\n\t\tcreator:   creator,\n\t\tthreads:   avl.NewMutTree(),\n\t\tcreatedAt: time.Now(),\n\t}\n}\n\n/* TODO support this once we figure out how to ensure URL correctness.\n// A private board is not tracked by gBoards*,\n// but must be persisted by the caller's realm.\n// Private boards have 0 id and does not ping\n// back the remote board on reposts.\nfunc NewPrivateBoard(url string, name string, creator std.Address) *Board {\n\treturn newBoard(0, url, name, creator)\n}\n*/\n\nfunc (board *Board) IsPrivate() bool {\n\treturn board.id == 0\n}\n\nfunc (board *Board) GetThread(pid PostID) *Post {\n\tpidkey := postIDKey(pid)\n\tpostI, exists := board.threads.Get(pidkey)\n\tif !exists {\n\t\treturn nil\n\t}\n\treturn postI.(*Post)\n}\n\nfunc (board *Board) AddThread(creator std.Address, title string, body string) *Post {\n\tpid := board.incGetPostID()\n\tpidkey := postIDKey(pid)\n\tthread := newPost(board, pid, creator, title, body, pid, 0, 0)\n\tboard.threads.Set(pidkey, thread)\n\treturn thread\n}\n\n// NOTE: this can be potentially very expensive for threads with many replies.\n// TODO: implement optional fast-delete where thread is simply moved.\nfunc (board *Board) DeleteThread(pid PostID) {\n\tpidkey := postIDKey(pid)\n\t_, removed := board.threads.Remove(pidkey)\n\tif !removed {\n\t\tpanic(\"thread does not exist with id \" + pid.String())\n\t}\n}\n\nfunc (board *Board) HasPermission(addr std.Address, perm Permission) bool {\n\tif board.creator == addr {\n\t\tswitch perm {\n\t\tcase EditPermission:\n\t\t\treturn true\n\t\tcase DeletePermission:\n\t\t\treturn true\n\t\tdefault:\n\t\t\treturn false\n\t\t}\n\t}\n\treturn false\n}\n\n// Renders the board for display suitable as plaintext in\n// console.  This is suitable for demonstration or tests,\n// but not for prod.\nfunc (board *Board) RenderBoard() string {\n\tstr := \"\"\n\tstr += \"\\\\[[post](\" + board.GetPostFormURL() + \")]\\n\\n\"\n\tif board.threads.Size() \u003e 0 {\n\t\tboard.threads.Iterate(\"\", \"\", func(n *avl.Tree) bool {\n\t\t\tif str != \"\" {\n\t\t\t\tstr += \"----------------------------------------\\n\"\n\t\t\t}\n\t\t\tstr += n.Value().(*Post).RenderSummary() + \"\\n\"\n\t\t\treturn false\n\t\t})\n\t}\n\treturn str\n}\n\nfunc (board *Board) incGetPostID() PostID {\n\tboard.postsCtr++\n\treturn PostID(board.postsCtr)\n}\n\nfunc (board *Board) GetURLFromThreadAndReplyID(threadID, replyID PostID) string {\n\tif replyID == 0 {\n\t\treturn board.url + \"/\" + threadID.String()\n\t} else {\n\t\treturn board.url + \"/\" + threadID.String() + \"/\" + replyID.String()\n\t}\n}\n\nfunc (board *Board) GetPostFormURL() string {\n\treturn \"/r/demo/boards?help\u0026__func=CreateThread\" +\n\t\t\"\u0026bid=\" + board.id.String() +\n\t\t\"\u0026body.type=textarea\"\n}\n"},{"Name":"boards.gno","Body":"package boards\n\nimport (\n\t\"regexp\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n//----------------------------------------\n// Realm (package) state\n\nvar (\n\tgBoards         = avl.NewMutTree() // id -\u003e *Board\n\tgBoardsCtr      int                // increments Board.id\n\tgBoardsByName   = avl.NewMutTree() // name -\u003e *Board\n\tgDefaultAnonFee = 100000000        // minimum fee required if anonymous\n)\n\n//----------------------------------------\n// Constants\n\nvar reName = regexp.MustCompile(`^[a-z]+[_a-z0-9]{2,29}$`)\n"},{"Name":"example_post.md","Body":"Hey all! 👋\n\nThis is my first post in this land!"},{"Name":"misc.gno","Body":"package boards\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/r/demo/users\"\n)\n\n//----------------------------------------\n// private utility methods\n// XXX ensure these cannot be called from public.\n\nfunc getBoard(bid BoardID) *Board {\n\tbidkey := boardIDKey(bid)\n\tboard_, exists := gBoards.Get(bidkey)\n\tif !exists {\n\t\treturn nil\n\t}\n\tboard := board_.(*Board)\n\treturn board\n}\n\nfunc incGetBoardID() BoardID {\n\tgBoardsCtr++\n\treturn BoardID(gBoardsCtr)\n}\n\nfunc padLeft(str string, length int) string {\n\tif len(str) \u003e= length {\n\t\treturn str\n\t} else {\n\t\treturn strings.Repeat(\" \", length-len(str)) + str\n\t}\n}\n\nfunc padZero(u64 uint64, length int) string {\n\tstr := strconv.Itoa(int(u64))\n\tif len(str) \u003e= length {\n\t\treturn str\n\t} else {\n\t\treturn strings.Repeat(\"0\", length-len(str)) + str\n\t}\n}\n\nfunc boardIDKey(bid BoardID) string {\n\treturn padZero(uint64(bid), 10)\n}\n\nfunc postIDKey(pid PostID) string {\n\treturn padZero(uint64(pid), 10)\n}\n\nfunc indentBody(indent string, body string) string {\n\tlines := strings.Split(body, \"\\n\")\n\tres := \"\"\n\tfor i, line := range lines {\n\t\tif i \u003e 0 {\n\t\t\tres += \"\\n\"\n\t\t}\n\t\tres += indent + line\n\t}\n\treturn res\n}\n\n// NOTE: length must be greater than 3.\nfunc summaryOf(str string, length int) string {\n\tlines := strings.SplitN(str, \"\\n\", 2)\n\tline := lines[0]\n\tif len(line) \u003e length {\n\t\tline = line[:(length-3)] + \"...\"\n\t} else if len(lines) \u003e 1 {\n\t\t// len(line) \u003c= 80\n\t\tline = line + \"...\"\n\t}\n\treturn line\n}\n\nfunc displayAddressMD(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user == nil {\n\t\treturn \"[\" + addr.String() + \"](/r/users:\" + addr.String() + \")\"\n\t} else {\n\t\treturn \"[@\" + user.Name() + \"](/r/users:\" + user.Name() + \")\"\n\t}\n}\n\nfunc usernameOf(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user == nil {\n\t\treturn \"\"\n\t} else {\n\t\treturn user.Name()\n\t}\n}\n"},{"Name":"post.gno","Body":"package boards\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n//----------------------------------------\n// Post\n\n// NOTE: a PostID is relative to the board.\ntype PostID uint64\n\nfunc (pid PostID) String() string {\n\treturn strconv.Itoa(int(pid))\n}\n\n// A Post is a \"thread\" or a \"reply\" depending on context.\n// A thread is a Post of a Board that holds other replies.\ntype Post struct {\n\tboard       *Board\n\tid          PostID\n\tcreator     std.Address\n\ttitle       string // optional\n\tbody        string\n\treplies     *avl.MutTree // Post.id -\u003e *Post\n\trepliesAll  *avl.MutTree // Post.id -\u003e *Post (all replies, for top-level posts)\n\treposts     *avl.MutTree // Board.id -\u003e Post.id\n\tthreadID    PostID       // original Post.id\n\tparentID    PostID       // parent Post.id (if reply or repost)\n\trepostBoard BoardID      // original Board.id (if repost)\n\tcreatedAt   time.Time\n\tupdatedAt   time.Time\n}\n\nfunc newPost(board *Board, id PostID, creator std.Address, title, body string, threadID, parentID PostID, repostBoard BoardID) *Post {\n\treturn \u0026Post{\n\t\tboard:       board,\n\t\tid:          id,\n\t\tcreator:     creator,\n\t\ttitle:       title,\n\t\tbody:        body,\n\t\treplies:     avl.NewMutTree(),\n\t\trepliesAll:  avl.NewMutTree(),\n\t\treposts:     avl.NewMutTree(),\n\t\tthreadID:    threadID,\n\t\tparentID:    parentID,\n\t\trepostBoard: repostBoard,\n\t\tcreatedAt:   time.Now(),\n\t}\n}\n\nfunc (post *Post) IsThread() bool {\n\treturn post.parentID == 0\n}\n\nfunc (post *Post) GetPostID() PostID {\n\treturn post.id\n}\n\nfunc (post *Post) AddReply(creator std.Address, body string) *Post {\n\tboard := post.board\n\tpid := board.incGetPostID()\n\tpidkey := postIDKey(pid)\n\treply := newPost(board, pid, creator, \"\", body, post.threadID, post.id, 0)\n\tpost.replies.Set(pidkey, reply)\n\tif post.threadID == post.id {\n\t\tpost.repliesAll.Set(pidkey, reply)\n\t} else {\n\t\tthread := board.GetThread(post.threadID)\n\t\tthread.repliesAll.Set(pidkey, reply)\n\t}\n\treturn reply\n}\n\nfunc (post *Post) Update(title string, body string) {\n\tpost.title = title\n\tpost.body = body\n\tpost.updatedAt = time.Now()\n}\n\nfunc (thread *Post) GetReply(pid PostID) *Post {\n\tpidkey := postIDKey(pid)\n\treplyI, ok := thread.repliesAll.Get(pidkey)\n\tif !ok {\n\t\treturn nil\n\t} else {\n\t\treturn replyI.(*Post)\n\t}\n}\n\nfunc (post *Post) AddRepostTo(creator std.Address, title, body string, dst *Board) *Post {\n\tif !post.IsThread() {\n\t\tpanic(\"cannot repost non-thread post\")\n\t}\n\tpid := dst.incGetPostID()\n\tpidkey := postIDKey(pid)\n\trepost := newPost(dst, pid, creator, title, body, pid, post.id, post.board.id)\n\tdst.threads.Set(pidkey, repost)\n\tif !dst.IsPrivate() {\n\t\tbidkey := boardIDKey(dst.id)\n\t\tpost.reposts.Set(bidkey, pid)\n\t}\n\treturn repost\n}\n\nfunc (thread *Post) DeletePost(pid PostID) {\n\tif thread.id == pid {\n\t\tpanic(\"should not happen\")\n\t}\n\tpidkey := postIDKey(pid)\n\tpostI, removed := thread.repliesAll.Remove(pidkey)\n\tif !removed {\n\t\tpanic(\"post not found in thread\")\n\t}\n\tpost := postI.(*Post)\n\tif post.parentID != thread.id {\n\t\tparent := thread.GetReply(post.parentID)\n\t\tparent.replies.Remove(pidkey)\n\t} else {\n\t\tthread.replies.Remove(pidkey)\n\t}\n}\n\nfunc (post *Post) HasPermission(addr std.Address, perm Permission) bool {\n\tif post.creator == addr {\n\t\tswitch perm {\n\t\tcase EditPermission:\n\t\t\treturn true\n\t\tcase DeletePermission:\n\t\t\treturn true\n\t\tdefault:\n\t\t\treturn false\n\t\t}\n\t}\n\t// post notes inherit permissions of the board.\n\treturn post.board.HasPermission(addr, perm)\n}\n\nfunc (post *Post) GetSummary() string {\n\treturn summaryOf(post.body, 80)\n}\n\nfunc (post *Post) GetURL() string {\n\tif post.IsThread() {\n\t\treturn post.board.GetURLFromThreadAndReplyID(\n\t\t\tpost.id, 0)\n\t} else {\n\t\treturn post.board.GetURLFromThreadAndReplyID(\n\t\t\tpost.threadID, post.id)\n\t}\n}\n\nfunc (post *Post) GetReplyFormURL() string {\n\treturn \"/r/demo/boards?help\u0026__func=CreateReply\" +\n\t\t\"\u0026bid=\" + post.board.id.String() +\n\t\t\"\u0026threadid=\" + post.threadID.String() +\n\t\t\"\u0026postid=\" + post.id.String() +\n\t\t\"\u0026body.type=textarea\"\n}\n\nfunc (post *Post) GetDeleteFormURL() string {\n\treturn \"/r/demo/boards?help\u0026__func=DeletePost\" +\n\t\t\"\u0026bid=\" + post.board.id.String() +\n\t\t\"\u0026threadid=\" + post.threadID.String() +\n\t\t\"\u0026postid=\" + post.id.String()\n}\n\nfunc (post *Post) RenderSummary() string {\n\tstr := \"\"\n\tif post.title != \"\" {\n\t\tstr += \"## [\" + summaryOf(post.title, 80) + \"](\" + post.GetURL() + \")\\n\"\n\t\tstr += \"\\n\"\n\t}\n\tstr += post.GetSummary() + \"\\n\"\n\tstr += \"\\\\- \" + displayAddressMD(post.creator) + \",\"\n\tstr += \" [\" + post.createdAt.Format(\"2006-01-02 3:04pm MST\") + \"](\" + post.GetURL() + \")\"\n\tstr += \" \\\\[[x](\" + post.GetDeleteFormURL() + \")]\"\n\tstr += \" (\" + strconv.Itoa(post.replies.Size()) + \" replies)\" + \"\\n\"\n\treturn str\n}\n\nfunc (post *Post) RenderPost(indent string, levels int) string {\n\tif post == nil {\n\t\treturn \"nil post\"\n\t}\n\tstr := \"\"\n\tif post.title != \"\" {\n\t\tstr += indent + \"# \" + post.title + \"\\n\"\n\t\tstr += indent + \"\\n\"\n\t}\n\tstr += indentBody(indent, post.body) + \"\\n\" // TODO: indent body lines.\n\tstr += indent + \"\\\\- \" + displayAddressMD(post.creator) + \", \"\n\tstr += \"[\" + post.createdAt.Format(\"2006-01-02 3:04pm (MST)\") + \"](\" + post.GetURL() + \")\"\n\tstr += \" \\\\[[reply](\" + post.GetReplyFormURL() + \")]\"\n\tstr += \" \\\\[[x](\" + post.GetDeleteFormURL() + \")]\\n\"\n\tif levels \u003e 0 {\n\t\tif post.replies.Size() \u003e 0 {\n\t\t\tpost.replies.Iterate(\"\", \"\", func(n *avl.Tree) bool {\n\t\t\t\tstr += indent + \"\\n\"\n\t\t\t\tstr += n.Value().(*Post).RenderPost(indent+\"\u003e \", levels-1)\n\t\t\t\treturn false\n\t\t\t})\n\t\t}\n\t} else {\n\t\tif post.replies.Size() \u003e 0 {\n\t\t\tstr += indent + \"\\n\"\n\t\t\tstr += indent + \"_[see all \" + strconv.Itoa(post.replies.Size()) + \" replies](\" + post.GetURL() + \")_\\n\"\n\t\t}\n\t}\n\treturn str\n}\n\n// render reply and link to context thread\nfunc (post *Post) RenderInner() string {\n\tif post.IsThread() {\n\t\tpanic(\"unexpected thread\")\n\t}\n\tthreadID := post.threadID\n\t// replyID := post.id\n\tparentID := post.parentID\n\tstr := \"\"\n\tstr += \"_[see thread](\" + post.board.GetURLFromThreadAndReplyID(\n\t\tthreadID, 0) + \")_\\n\\n\"\n\tthread := post.board.GetThread(post.threadID)\n\tvar parent *Post\n\tif thread.id == parentID {\n\t\tparent = thread\n\t} else {\n\t\tparent = thread.GetReply(parentID)\n\t}\n\tstr += parent.RenderPost(\"\", 0)\n\tstr += \"\\n\"\n\tstr += post.RenderPost(\"\u003e \", 5)\n\treturn str\n}\n"},{"Name":"public.gno","Body":"package boards\n\nimport (\n\t\"std\"\n\t\"strconv\"\n)\n\n//----------------------------------------\n// Public facing functions\n\nfunc GetBoardIDFromName(name string) (BoardID, bool) {\n\tboardI, exists := gBoardsByName.Get(name)\n\tif !exists {\n\t\treturn 0, false\n\t}\n\treturn boardI.(*Board).id, true\n}\n\nfunc CreateBoard(name string) BoardID {\n\tstd.AssertOriginCall()\n\tbid := incGetBoardID()\n\tcaller := std.GetOrigCaller()\n\tif usernameOf(caller) == \"\" {\n\t\tpanic(\"unauthorized\")\n\t}\n\turl := \"/r/demo/boards:\" + name\n\tboard := newBoard(bid, url, name, caller)\n\tbidkey := boardIDKey(bid)\n\tgBoards.Set(bidkey, board)\n\tgBoardsByName.Set(name, board)\n\treturn board.id\n}\n\nfunc checkAnonFee() bool {\n\tsent := std.GetOrigSend()\n\tanonFeeCoin := std.Coin{\"ugnot\", int64(gDefaultAnonFee)}\n\tif len(sent) == 1 \u0026\u0026 sent[0].IsGTE(anonFeeCoin) {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc CreateThread(bid BoardID, title string, body string) PostID {\n\tstd.AssertOriginCall()\n\tcaller := std.GetOrigCaller()\n\tif usernameOf(caller) == \"\" {\n\t\tif !checkAnonFee() {\n\t\t\tpanic(\"please register, otherwise minimum fee \" + strconv.Itoa(gDefaultAnonFee) + \" is required if anonymous\")\n\t\t}\n\t}\n\tboard := getBoard(bid)\n\tif board == nil {\n\t\tpanic(\"board not exist\")\n\t}\n\tthread := board.AddThread(caller, title, body)\n\treturn thread.id\n}\n\nfunc CreateReply(bid BoardID, threadid, postid PostID, body string) PostID {\n\tstd.AssertOriginCall()\n\tcaller := std.GetOrigCaller()\n\tif usernameOf(caller) == \"\" {\n\t\tif !checkAnonFee() {\n\t\t\tpanic(\"please register, otherwise minimum fee \" + strconv.Itoa(gDefaultAnonFee) + \" is required if anonymous\")\n\t\t}\n\t}\n\tboard := getBoard(bid)\n\tif board == nil {\n\t\tpanic(\"board not exist\")\n\t}\n\tthread := board.GetThread(threadid)\n\tif thread == nil {\n\t\tpanic(\"thread not exist\")\n\t}\n\tif postid == threadid {\n\t\treply := thread.AddReply(caller, body)\n\t\treturn reply.id\n\t} else {\n\t\tpost := thread.GetReply(postid)\n\t\treply := post.AddReply(caller, body)\n\t\treturn reply.id\n\t}\n}\n\n// If dstBoard is private, does not ping back.\n// If board specified by bid is private, panics.\nfunc CreateRepost(bid BoardID, postid PostID, title string, body string, dstBoardID BoardID) PostID {\n\tstd.AssertOriginCall()\n\tcaller := std.GetOrigCaller()\n\tif usernameOf(caller) == \"\" {\n\t\t// TODO: allow with gDefaultAnonFee payment.\n\t\tif !checkAnonFee() {\n\t\t\tpanic(\"please register, otherwise minimum fee \" + strconv.Itoa(gDefaultAnonFee) + \" is required if anonymous\")\n\t\t}\n\t}\n\tboard := getBoard(bid)\n\tif board == nil {\n\t\tpanic(\"src board not exist\")\n\t}\n\tif board.IsPrivate() {\n\t\tpanic(\"cannot repost from a private board\")\n\t}\n\tdst := getBoard(dstBoardID)\n\tif dst == nil {\n\t\tpanic(\"dst board not exist\")\n\t}\n\tthread := board.GetThread(postid)\n\tif thread == nil {\n\t\tpanic(\"thread not exist\")\n\t}\n\trepost := thread.AddRepostTo(caller, title, body, dst)\n\treturn repost.id\n}\n\nfunc DeletePost(bid BoardID, threadid, postid PostID, reason string) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetOrigCaller()\n\tboard := getBoard(bid)\n\tif board == nil {\n\t\tpanic(\"board not exist\")\n\t}\n\tthread := board.GetThread(threadid)\n\tif thread == nil {\n\t\tpanic(\"thread not exist\")\n\t}\n\tif postid == threadid {\n\t\t// delete thread\n\t\tif !thread.HasPermission(caller, DeletePermission) {\n\t\t\tpanic(\"unauthorized\")\n\t\t}\n\t\tboard.DeleteThread(threadid)\n\t} else {\n\t\t// delete thread's post\n\t\tpost := thread.GetReply(postid)\n\t\tif post == nil {\n\t\t\tpanic(\"post not exist\")\n\t\t}\n\t\tif !post.HasPermission(caller, DeletePermission) {\n\t\t\tpanic(\"unauthorized\")\n\t\t}\n\t\tthread.DeletePost(postid)\n\t}\n}\n\nfunc EditPost(bid BoardID, threadid, postid PostID, title, body string) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetOrigCaller()\n\tboard := getBoard(bid)\n\tif board == nil {\n\t\tpanic(\"board not exist\")\n\t}\n\tthread := board.GetThread(threadid)\n\tif thread == nil {\n\t\tpanic(\"thread not exist\")\n\t}\n\tif postid == threadid {\n\t\t// edit thread\n\t\tif !thread.HasPermission(caller, EditPermission) {\n\t\t\tpanic(\"unauthorized\")\n\t\t}\n\t\tthread.Update(title, body)\n\t} else {\n\t\t// edit thread's post\n\t\tpost := thread.GetReply(postid)\n\t\tif post == nil {\n\t\t\tpanic(\"post not exist\")\n\t\t}\n\t\tif !post.HasPermission(caller, EditPermission) {\n\t\t\tpanic(\"unauthorized\")\n\t\t}\n\t\tpost.Update(title, body)\n\t}\n}\n"},{"Name":"render.gno","Body":"package boards\n\nimport (\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n//----------------------------------------\n// Render functions\n\nfunc RenderBoard(bid BoardID) string {\n\tboard := getBoard(bid)\n\tif board == nil {\n\t\treturn \"missing board\"\n\t}\n\treturn board.RenderBoard()\n}\n\nfunc Render(path string) string {\n\tif path == \"\" {\n\t\tstr := \"These are all the boards of this realm:\\n\\n\"\n\t\tgBoards.Iterate(\"\", \"\", func(n *avl.Tree) bool {\n\t\t\tboard := n.Value().(*Board)\n\t\t\tstr += \" * [\" + board.url + \"](\" + board.url + \")\\n\"\n\t\t\treturn false\n\t\t})\n\t\treturn str\n\t}\n\tparts := strings.Split(path, \"/\")\n\tif len(parts) == 1 {\n\t\t// /r/demo/boards:BOARD_NAME\n\t\tname := parts[0]\n\t\tboardI, exists := gBoardsByName.Get(name)\n\t\tif !exists {\n\t\t\treturn \"board does not exist: \" + name\n\t\t}\n\t\treturn boardI.(*Board).RenderBoard()\n\t} else if len(parts) == 2 {\n\t\t// /r/demo/boards:BOARD_NAME/THREAD_ID\n\t\tname := parts[0]\n\t\tboardI, exists := gBoardsByName.Get(name)\n\t\tif !exists {\n\t\t\treturn \"board does not exist: \" + name\n\t\t}\n\t\tpid, err := strconv.Atoi(parts[1])\n\t\tif err != nil {\n\t\t\treturn \"invalid thread id: \" + parts[1]\n\t\t}\n\t\tboard := boardI.(*Board)\n\t\tthread := board.GetThread(PostID(pid))\n\t\tif thread == nil {\n\t\t\treturn \"thread does not exist with id: \" + parts[1]\n\t\t}\n\t\treturn thread.RenderPost(\"\", 5)\n\t} else if len(parts) == 3 {\n\t\t// /r/demo/boards:BOARD_NAME/THREAD_ID/REPLY_ID\n\t\tname := parts[0]\n\t\tboardI, exists := gBoardsByName.Get(name)\n\t\tif !exists {\n\t\t\treturn \"board does not exist: \" + name\n\t\t}\n\t\tpid, err := strconv.Atoi(parts[1])\n\t\tif err != nil {\n\t\t\treturn \"invalid thread id: \" + parts[1]\n\t\t}\n\t\tboard := boardI.(*Board)\n\t\tthread := board.GetThread(PostID(pid))\n\t\tif thread == nil {\n\t\t\treturn \"thread does not exist with id: \" + parts[1]\n\t\t}\n\t\trid, err := strconv.Atoi(parts[2])\n\t\tif err != nil {\n\t\t\treturn \"invalid reply id: \" + parts[2]\n\t\t}\n\t\treply := thread.GetReply(PostID(rid))\n\t\tif reply == nil {\n\t\t\treturn \"reply does not exist with id: \" + parts[2]\n\t\t}\n\t\treturn reply.RenderInner()\n\t} else {\n\t\treturn \"unrecognized path \" + path\n\t}\n}\n"},{"Name":"role.gno","Body":"package boards\n\ntype Permission string\n\nconst (\n\tDeletePermission Permission = \"role:delete\"\n\tEditPermission   Permission = \"role:edit\"\n)\n"},{"Name":"z_0_a_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\nimport (\n\t\"gno.land/r/demo/boards\"\n)\n\nvar bid boards.BoardID\n\nfunc init() {\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid := boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\tboards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Error:\n// unauthorized\n"},{"Name":"z_0_b_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 199000000ugnot\n\nimport (\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar bid boards.BoardID\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\tbid = boards.CreateBoard(\"test_board\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Error:\n// payment must not be less than 200000000\n"},{"Name":"z_0_c_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar bid boards.BoardID\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\tboards.CreateThread(1, \"First Post (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Error:\n// board not exist\n"},{"Name":"z_0_d_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar bid boards.BoardID\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateReply(bid, 0, 0, \"Reply of the second post\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Error:\n// thread not exist\n"},{"Name":"z_0_e_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar bid boards.BoardID\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\tboards.CreateReply(bid, 0, 0, \"Reply of the second post\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Error:\n// board not exist\n"},{"Name":"z_0_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar bid boards.BoardID\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid := boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\tboards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Output:\n// \\[[post](/r/demo/boards?help\u0026__func=CreateThread\u0026bid=1\u0026body.type=textarea)]\n//\n// ----------------------------------------\n// ## [First Post (title)](/r/demo/boards:test_board/1)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm UTC](/r/demo/boards:test_board/1) \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)] (0 replies)\n//\n// ----------------------------------------\n// ## [Second Post (title)](/r/demo/boards:test_board/2)\n//\n// Body of the second post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm UTC](/r/demo/boards:test_board/2) \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=2)] (1 replies)\n"},{"Name":"z_10_a_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\t// boardId 2 not exist\n\tboards.DeletePost(2, pid, pid, \"\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// board not exist\n"},{"Name":"z_10_b_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\t// pid of 2 not exist\n\tboards.DeletePost(bid, 2, 2, \"\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// thread not exist\n"},{"Name":"z_10_c_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n\trid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n\trid = boards.CreateReply(bid, pid, pid, \"First reply of the First post\\n\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\tboards.DeletePost(bid, pid, rid, \"\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n//\n// \u003e First reply of the First post\n// \u003e\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=2)]\n//\n// ----------------------------------------------------\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n"},{"Name":"z_10_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\tboards.DeletePost(bid, pid, pid, \"\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n//\n// ----------------------------------------------------\n// thread does not exist with id: 1\n"},{"Name":"z_11_a_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\t// board 2 not exist\n\tboards.EditPost(2, pid, pid, \"Edited: First Post in (title)\", \"Edited: Body of the first post. (body)\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// board not exist\n"},{"Name":"z_11_b_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\t// thread 2 not exist\n\tboards.EditPost(bid, 2, pid, \"Edited: First Post in (title)\", \"Edited: Body of the first post. (body)\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// thread not exist\n"},{"Name":"z_11_c_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\t// post 2 not exist\n\tboards.EditPost(bid, pid, 2, \"Edited: First Post in (title)\", \"Edited: Body of the first post. (body)\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// post not exist\n"},{"Name":"z_11_d_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n\trid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n\trid = boards.CreateReply(bid, pid, pid, \"First reply of the First post\\n\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\tboards.EditPost(bid, pid, rid, \"\", \"Edited: First reply of the First post\\n\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n//\n// \u003e First reply of the First post\n// \u003e\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=2)]\n//\n// ----------------------------------------------------\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n//\n// \u003e Edited: First reply of the First post\n// \u003e\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=2)]\n"},{"Name":"z_11_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\tboards.EditPost(bid, pid, pid, \"Edited: First Post in (title)\", \"Edited: Body of the first post. (body)\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n//\n// ----------------------------------------------------\n// # Edited: First Post in (title)\n//\n// Edited: Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n"},{"Name":"z_1_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar board *boards.Board\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\t_ = boards.CreateBoard(\"test_board_1\")\n\t_ = boards.CreateBoard(\"test_board_2\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"\"))\n}\n\n// Output:\n// These are all the boards of this realm:\n//\n//  * [/r/demo/boards:test_board_1](/r/demo/boards:test_board_1)\n//  * [/r/demo/boards:test_board_2](/r/demo/boards:test_board_2)\n"},{"Name":"z_2_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid = boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\tboards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # Second Post (title)\n//\n// Body of the second post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=2)]\n//\n// \u003e Reply of the second post\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/3) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=3\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=3)]\n"},{"Name":"z_3_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid = boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n}\n\nfunc main() {\n\trid := boards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n\tprintln(rid)\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// 3\n// # Second Post (title)\n//\n// Body of the second post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=2)]\n//\n// \u003e Reply of the second post\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/3) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=3\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=3)]\n"},{"Name":"z_4_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid = boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\trid := boards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n\tprintln(rid)\n}\n\nfunc main() {\n\trid2 := boards.CreateReply(bid, pid, pid, \"Second reply of the second post\")\n\tprintln(rid2)\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// 3\n// 4\n// # Second Post (title)\n//\n// Body of the second post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=2)]\n//\n// \u003e Reply of the second post\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/3) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=3\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=3)]\n//\n// \u003e Second reply of the second post\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/4) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=4\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=4)]\n\n// Realm:\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/boards\"]\n// u[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:100]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"0000000003\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/r/demo/boards.Post\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/r/demo/boards.Post\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Escaped\": true,\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:101\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:100\",\n//         \"ModTime\": \"108\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:108\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:109]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"0000000004\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/r/demo/boards.Post\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/r/demo/boards.Post\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Escaped\": true,\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:109\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:108\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:108]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"0000000004\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"b0e1bb401a1e4392dc4aa8353e35364905be64af\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:100\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"a14457b34570e396c59208d49f40e1cc23b80a11\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:109\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:108\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:95\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:111]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:111\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:112]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:112\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:113]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:113\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:114]={\n//     \"Fields\": [\n//         {\n//             \"N\": \"AAAAgJSeXbo=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"65536\"\n//             }\n//         },\n//         {\n//             \"N\": \"AbSNdvQQIhE=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"1024\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"time.Location\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"336074805fc853987abe6f7fe3ad97a6a6f3077a:2\"\n//                 },\n//                 \"Index\": \"188\",\n//                 \"TV\": null\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:114\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:115]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"65536\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"1024\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"time.Location\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:115\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/r/demo/boards.Board\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/r/demo/boards.Board\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Escaped\": true,\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:81\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"N\": \"BAAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"gno.land/r/demo/boards.PostID\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"std.Address\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"g1arjyc64rpthwn8zhxtzjvearm5scy43y7vm985\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"Second reply of the second post\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"9adae740a66b6f3d0066d3ddf478290286fd8a6e\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:111\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"630649048eb057bc03298c019417120984ad62b7\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:112\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"691da6b946b1873fba7f8dcf100e3e9d280e0759\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:113\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"gno.land/r/demo/boards.PostID\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"gno.land/r/demo/boards.PostID\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"gno.land/r/demo/boards.BoardID\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"time.Time\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.RefValue\",\n//                 \"Hash\": \"91a60131fc119b8a406c4be71e1e991e37ca522b\",\n//                 \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:114\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"time.Time\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.RefValue\",\n//                 \"Hash\": \"39aedff3aa8d8246df681ff0f576f8ac31cb5d55\",\n//                 \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:115\"\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110\",\n//         \"IsEscaped\": true,\n//         \"ModTime\": \"0\",\n//         \"RefCount\": \"2\"\n//     }\n// }\n// u[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:107]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"0000000003\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/r/demo/boards.Post\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/r/demo/boards.Post\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Escaped\": true,\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:101\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:107\",\n//         \"ModTime\": \"116\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:116\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:117]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"0000000004\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/r/demo/boards.Post\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/r/demo/boards.Post\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Escaped\": true,\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:117\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:116\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:116]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"0000000004\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"625e87966cb6643c1ad5ccd0a9ee1b0e3fe767fb\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:107\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"280f673fa84e1981a3138849f782b5dd87fbfd09\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:117\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:116\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:96\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// u[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:81]={\n//     \"Fields\": [\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"gno.land/r/demo/boards.BoardID\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"/r/demo/boards:test_board\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"test_board\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"std.Address\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"g1arjyc64rpthwn8zhxtzjvearm5scy43y7vm985\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"ecc6212ef0cb96a4785bb34427a7d0ee7f4c8400\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:82\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"N\": \"BAAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"65536\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"time.Time\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.RefValue\",\n//                 \"Hash\": \"7e9fd9bb5e90a06c7751585cd80f23aedddde25b\",\n//                 \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:83\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:81\",\n//         \"IsEscaped\": true,\n//         \"ModTime\": \"107\",\n//         \"RefCount\": \"6\"\n//     }\n// }\n// u[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:95]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"1a1636b4c1593d1694512b57780449f80c14d92f\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:108\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:95\",\n//         \"ModTime\": \"107\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:94\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// u[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:96]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"4df019c20a64842ebe5ae2cf1aed14cc7799588d\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:116\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:96\",\n//         \"ModTime\": \"107\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:94\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// switchrealm[\"gno.land/r/demo/boards\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/boards\"]\n// switchrealm[\"gno.land/r/boards_test\"]\n"},{"Name":"z_5_b_filetest.gno","Body":"package main\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/testutils\"\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nconst admin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\")\n\nfunc main() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\t// create board via registered user\n\tbid := boards.CreateBoard(\"test_board\")\n\n\t// create post via anon user\n\ttest2 := testutils.TestAddress(\"test2\")\n\tstd.TestSetOrigCaller(test2)\n\tstd.TestSetOrigSend(std.Coins{{\"ugnot\", 9000000}}, nil)\n\n\tpid := boards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// please register, otherwise minimum fee 100000000 is required if anonymous\n"},{"Name":"z_5_c_filetest.gno","Body":"package main\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/testutils\"\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nconst admin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\")\n\nfunc main() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\t// create board via registered user\n\tbid := boards.CreateBoard(\"test_board\")\n\n\t// create post via anon user\n\ttest2 := testutils.TestAddress(\"test2\")\n\tstd.TestSetOrigCaller(test2)\n\tstd.TestSetOrigSend(std.Coins{{\"ugnot\", 101000000}}, nil)\n\n\tpid := boards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tboards.CreateReply(bid, pid, pid, \"Reply of the first post\")\n\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # First Post (title)\n//\n// Body of the first post. (body)\n// \\- [g1w3jhxapjta047h6lta047h6lta047h6laqcyu4](/r/users:g1w3jhxapjta047h6lta047h6lta047h6laqcyu4), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n//\n// \u003e Reply of the first post\n// \u003e \\- [g1w3jhxapjta047h6lta047h6lta047h6laqcyu4](/r/users:g1w3jhxapjta047h6lta047h6lta047h6laqcyu4), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=2)]\n"},{"Name":"z_5_d_filetest.gno","Body":"package main\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/testutils\"\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nconst admin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\")\n\nfunc main() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\t// create board via registered user\n\tbid := boards.CreateBoard(\"test_board\")\n\tpid := boards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\n\t// create reply via anon user\n\ttest2 := testutils.TestAddress(\"test2\")\n\tstd.TestSetOrigCaller(test2)\n\tstd.TestSetOrigSend(std.Coins{{\"ugnot\", 9000000}}, nil)\n\tboards.CreateReply(bid, pid, pid, \"Reply of the first post\")\n\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// please register, otherwise minimum fee 100000000 is required if anonymous\n"},{"Name":"z_5_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid = boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\trid := boards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n}\n\nfunc main() {\n\trid2 := boards.CreateReply(bid, pid, pid, \"Second reply of the second post\\n\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # Second Post (title)\n//\n// Body of the second post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=2)]\n//\n// \u003e Reply of the second post\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/3) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=3\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=3)]\n//\n// \u003e Second reply of the second post\n// \u003e\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/4) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=4\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=4)]\n"},{"Name":"z_6_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n\trid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid = boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\trid = boards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n}\n\nfunc main() {\n\tboards.CreateReply(bid, pid, pid, \"Second reply of the second post\\n\")\n\tboards.CreateReply(bid, pid, rid, \"First reply of the first reply\\n\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # Second Post (title)\n//\n// Body of the second post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=2)]\n//\n// \u003e Reply of the second post\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/3) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=3\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=3)]\n// \u003e\n// \u003e \u003e First reply of the first reply\n// \u003e \u003e\n// \u003e \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/5) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=5\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=5)]\n//\n// \u003e Second reply of the second post\n// \u003e\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/4) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=4\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=4)]\n"},{"Name":"z_7_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nfunc init() {\n\t// register\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\t// create board and post\n\tbid := boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Output:\n// \\[[post](/r/demo/boards?help\u0026__func=CreateThread\u0026bid=1\u0026body.type=textarea)]\n//\n// ----------------------------------------\n// ## [First Post (title)](/r/demo/boards:test_board/1)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm UTC](/r/demo/boards:test_board/1) \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)] (0 replies)\n"},{"Name":"z_8_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n\trid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid = boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\trid = boards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n}\n\nfunc main() {\n\tboards.CreateReply(bid, pid, pid, \"Second reply of the second post\\n\")\n\trid2 := boards.CreateReply(bid, pid, rid, \"First reply of the first reply\\n\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid)) + \"/\" + strconv.Itoa(int(rid2))))\n}\n\n// Output:\n// _[see thread](/r/demo/boards:test_board/2)_\n//\n// Reply of the second post\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/3) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=3\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=3)]\n//\n// _[see all 1 replies](/r/demo/boards:test_board/2/3)_\n//\n// \u003e First reply of the first reply\n// \u003e\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/5) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=5\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=5)]\n"},{"Name":"z_9_a_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar dstBoard boards.BoardID\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tdstBoard = boards.CreateBoard(\"dst_board\")\n\n\tboards.CreateRepost(0, 0, \"First Post in (title)\", \"Body of the first post. (body)\", dstBoard)\n}\n\nfunc main() {\n}\n\n// Error:\n// src board not exist\n"},{"Name":"z_9_b_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tsrcBoard boards.BoardID\n\tpid      boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tsrcBoard = boards.CreateBoard(\"first_board\")\n\tpid = boards.CreateThread(srcBoard, \"First Post in (title)\", \"Body of the first post. (body)\")\n\n\tboards.CreateRepost(srcBoard, pid, \"First Post in (title)\", \"Body of the first post. (body)\", 0)\n}\n\nfunc main() {\n}\n\n// Error:\n// dst board not exist\n"},{"Name":"z_9_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tfirstBoard  boards.BoardID\n\tsecondBoard boards.BoardID\n\tpid         boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tfirstBoard = boards.CreateBoard(\"first_board\")\n\tsecondBoard = boards.CreateBoard(\"second_board\")\n\tpid = boards.CreateThread(firstBoard, \"First Post in (title)\", \"Body of the first post. (body)\")\n\n\tboards.CreateRepost(firstBoard, pid, \"First Post in (title)\", \"Body of the first post. (body)\", secondBoard)\n}\n\nfunc main() {\n\tprintln(boards.Render(\"second_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:second_board/1/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=2\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=2\u0026threadid=1\u0026postid=1)]\n"}]},"deposit":"100ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2mBiXy3Vxfh7cc/Gl9H/ZLw7ULOVUk5fupjmn6+/W2P"},"signature":"8c3KCYXfsvaZQFFLkmSD9b3U7qwUv/I08hTdyotr9SQthKbEgLWToSbqQb1RObseY/Jr3nruulBnCeZwfU5vpw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1lnsppwynw6hflnuxvkjvrdhjwgcfd2qgxg0pjv","package":{"Name":"boards","Path":"gno.land/r/demo/boards-trongvip","Files":[{"Name":"README.md","Body":"This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"},{"Name":"board.gno","Body":"package boards\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n//----------------------------------------\n// Board\n\ntype BoardID uint64\n\nfunc (bid BoardID) String() string {\n\treturn strconv.Itoa(int(bid))\n}\n\ntype Board struct {\n\tid        BoardID // only set for public boards.\n\turl       string\n\tname      string\n\tcreator   std.Address\n\tthreads   *avl.MutTree // Post.id -\u003e *Post\n\tpostsCtr  uint64       // increments Post.id\n\tcreatedAt time.Time\n\tdeleted   *avl.MutTree // TODO reserved for fast-delete.\n}\n\nfunc newBoard(id BoardID, url string, name string, creator std.Address) *Board {\n\tif !reName.MatchString(name) {\n\t\tpanic(\"invalid name: \" + name)\n\t}\n\texists := gBoardsByName.Has(name)\n\tif exists {\n\t\tpanic(\"board already exists\")\n\t}\n\treturn \u0026Board{\n\t\tid:        id,\n\t\turl:       url,\n\t\tname:      name,\n\t\tcreator:   creator,\n\t\tthreads:   avl.NewMutTree(),\n\t\tcreatedAt: time.Now(),\n\t}\n}\n\n/* TODO support this once we figure out how to ensure URL correctness.\n// A private board is not tracked by gBoards*,\n// but must be persisted by the caller's realm.\n// Private boards have 0 id and does not ping\n// back the remote board on reposts.\nfunc NewPrivateBoard(url string, name string, creator std.Address) *Board {\n\treturn newBoard(0, url, name, creator)\n}\n*/\n\nfunc (board *Board) IsPrivate() bool {\n\treturn board.id == 0\n}\n\nfunc (board *Board) GetThread(pid PostID) *Post {\n\tpidkey := postIDKey(pid)\n\tpostI, exists := board.threads.Get(pidkey)\n\tif !exists {\n\t\treturn nil\n\t}\n\treturn postI.(*Post)\n}\n\nfunc (board *Board) AddThread(creator std.Address, title string, body string) *Post {\n\tpid := board.incGetPostID()\n\tpidkey := postIDKey(pid)\n\tthread := newPost(board, pid, creator, title, body, pid, 0, 0)\n\tboard.threads.Set(pidkey, thread)\n\treturn thread\n}\n\n// NOTE: this can be potentially very expensive for threads with many replies.\n// TODO: implement optional fast-delete where thread is simply moved.\nfunc (board *Board) DeleteThread(pid PostID) {\n\tpidkey := postIDKey(pid)\n\t_, removed := board.threads.Remove(pidkey)\n\tif !removed {\n\t\tpanic(\"thread does not exist with id \" + pid.String())\n\t}\n}\n\nfunc (board *Board) HasPermission(addr std.Address, perm Permission) bool {\n\tif board.creator == addr {\n\t\tswitch perm {\n\t\tcase EditPermission:\n\t\t\treturn true\n\t\tcase DeletePermission:\n\t\t\treturn true\n\t\tdefault:\n\t\t\treturn false\n\t\t}\n\t}\n\treturn false\n}\n\n// Renders the board for display suitable as plaintext in\n// console.  This is suitable for demonstration or tests,\n// but not for prod.\nfunc (board *Board) RenderBoard() string {\n\tstr := \"\"\n\tstr += \"\\\\[[post](\" + board.GetPostFormURL() + \")]\\n\\n\"\n\tif board.threads.Size() \u003e 0 {\n\t\tboard.threads.Iterate(\"\", \"\", func(n *avl.Tree) bool {\n\t\t\tif str != \"\" {\n\t\t\t\tstr += \"----------------------------------------\\n\"\n\t\t\t}\n\t\t\tstr += n.Value().(*Post).RenderSummary() + \"\\n\"\n\t\t\treturn false\n\t\t})\n\t}\n\treturn str\n}\n\nfunc (board *Board) incGetPostID() PostID {\n\tboard.postsCtr++\n\treturn PostID(board.postsCtr)\n}\n\nfunc (board *Board) GetURLFromThreadAndReplyID(threadID, replyID PostID) string {\n\tif replyID == 0 {\n\t\treturn board.url + \"/\" + threadID.String()\n\t} else {\n\t\treturn board.url + \"/\" + threadID.String() + \"/\" + replyID.String()\n\t}\n}\n\nfunc (board *Board) GetPostFormURL() string {\n\treturn \"/r/demo/boards?help\u0026__func=CreateThread\" +\n\t\t\"\u0026bid=\" + board.id.String() +\n\t\t\"\u0026body.type=textarea\"\n}\n"},{"Name":"boards.gno","Body":"package boards\n\nimport (\n\t\"regexp\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n//----------------------------------------\n// Realm (package) state\n\nvar (\n\tgBoards         = avl.NewMutTree() // id -\u003e *Board\n\tgBoardsCtr      int                // increments Board.id\n\tgBoardsByName   = avl.NewMutTree() // name -\u003e *Board\n\tgDefaultAnonFee = 100000000        // minimum fee required if anonymous\n)\n\n//----------------------------------------\n// Constants\n\nvar reName = regexp.MustCompile(`^[a-z]+[_a-z0-9]{2,29}$`)\n"},{"Name":"example_post.md","Body":"Hey all! 👋\n\nThis is my first post in this land!"},{"Name":"misc.gno","Body":"package boards\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/r/demo/users\"\n)\n\n//----------------------------------------\n// private utility methods\n// XXX ensure these cannot be called from public.\n\nfunc getBoard(bid BoardID) *Board {\n\tbidkey := boardIDKey(bid)\n\tboard_, exists := gBoards.Get(bidkey)\n\tif !exists {\n\t\treturn nil\n\t}\n\tboard := board_.(*Board)\n\treturn board\n}\n\nfunc incGetBoardID() BoardID {\n\tgBoardsCtr++\n\treturn BoardID(gBoardsCtr)\n}\n\nfunc padLeft(str string, length int) string {\n\tif len(str) \u003e= length {\n\t\treturn str\n\t} else {\n\t\treturn strings.Repeat(\" \", length-len(str)) + str\n\t}\n}\n\nfunc padZero(u64 uint64, length int) string {\n\tstr := strconv.Itoa(int(u64))\n\tif len(str) \u003e= length {\n\t\treturn str\n\t} else {\n\t\treturn strings.Repeat(\"0\", length-len(str)) + str\n\t}\n}\n\nfunc boardIDKey(bid BoardID) string {\n\treturn padZero(uint64(bid), 10)\n}\n\nfunc postIDKey(pid PostID) string {\n\treturn padZero(uint64(pid), 10)\n}\n\nfunc indentBody(indent string, body string) string {\n\tlines := strings.Split(body, \"\\n\")\n\tres := \"\"\n\tfor i, line := range lines {\n\t\tif i \u003e 0 {\n\t\t\tres += \"\\n\"\n\t\t}\n\t\tres += indent + line\n\t}\n\treturn res\n}\n\n// NOTE: length must be greater than 3.\nfunc summaryOf(str string, length int) string {\n\tlines := strings.SplitN(str, \"\\n\", 2)\n\tline := lines[0]\n\tif len(line) \u003e length {\n\t\tline = line[:(length-3)] + \"...\"\n\t} else if len(lines) \u003e 1 {\n\t\t// len(line) \u003c= 80\n\t\tline = line + \"...\"\n\t}\n\treturn line\n}\n\nfunc displayAddressMD(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user == nil {\n\t\treturn \"[\" + addr.String() + \"](/r/users:\" + addr.String() + \")\"\n\t} else {\n\t\treturn \"[@\" + user.Name() + \"](/r/users:\" + user.Name() + \")\"\n\t}\n}\n\nfunc usernameOf(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user == nil {\n\t\treturn \"\"\n\t} else {\n\t\treturn user.Name()\n\t}\n}\n"},{"Name":"post.gno","Body":"package boards\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n//----------------------------------------\n// Post\n\n// NOTE: a PostID is relative to the board.\ntype PostID uint64\n\nfunc (pid PostID) String() string {\n\treturn strconv.Itoa(int(pid))\n}\n\n// A Post is a \"thread\" or a \"reply\" depending on context.\n// A thread is a Post of a Board that holds other replies.\ntype Post struct {\n\tboard       *Board\n\tid          PostID\n\tcreator     std.Address\n\ttitle       string // optional\n\tbody        string\n\treplies     *avl.MutTree // Post.id -\u003e *Post\n\trepliesAll  *avl.MutTree // Post.id -\u003e *Post (all replies, for top-level posts)\n\treposts     *avl.MutTree // Board.id -\u003e Post.id\n\tthreadID    PostID       // original Post.id\n\tparentID    PostID       // parent Post.id (if reply or repost)\n\trepostBoard BoardID      // original Board.id (if repost)\n\tcreatedAt   time.Time\n\tupdatedAt   time.Time\n}\n\nfunc newPost(board *Board, id PostID, creator std.Address, title, body string, threadID, parentID PostID, repostBoard BoardID) *Post {\n\treturn \u0026Post{\n\t\tboard:       board,\n\t\tid:          id,\n\t\tcreator:     creator,\n\t\ttitle:       title,\n\t\tbody:        body,\n\t\treplies:     avl.NewMutTree(),\n\t\trepliesAll:  avl.NewMutTree(),\n\t\treposts:     avl.NewMutTree(),\n\t\tthreadID:    threadID,\n\t\tparentID:    parentID,\n\t\trepostBoard: repostBoard,\n\t\tcreatedAt:   time.Now(),\n\t}\n}\n\nfunc (post *Post) IsThread() bool {\n\treturn post.parentID == 0\n}\n\nfunc (post *Post) GetPostID() PostID {\n\treturn post.id\n}\n\nfunc (post *Post) AddReply(creator std.Address, body string) *Post {\n\tboard := post.board\n\tpid := board.incGetPostID()\n\tpidkey := postIDKey(pid)\n\treply := newPost(board, pid, creator, \"\", body, post.threadID, post.id, 0)\n\tpost.replies.Set(pidkey, reply)\n\tif post.threadID == post.id {\n\t\tpost.repliesAll.Set(pidkey, reply)\n\t} else {\n\t\tthread := board.GetThread(post.threadID)\n\t\tthread.repliesAll.Set(pidkey, reply)\n\t}\n\treturn reply\n}\n\nfunc (post *Post) Update(title string, body string) {\n\tpost.title = title\n\tpost.body = body\n\tpost.updatedAt = time.Now()\n}\n\nfunc (thread *Post) GetReply(pid PostID) *Post {\n\tpidkey := postIDKey(pid)\n\treplyI, ok := thread.repliesAll.Get(pidkey)\n\tif !ok {\n\t\treturn nil\n\t} else {\n\t\treturn replyI.(*Post)\n\t}\n}\n\nfunc (post *Post) AddRepostTo(creator std.Address, title, body string, dst *Board) *Post {\n\tif !post.IsThread() {\n\t\tpanic(\"cannot repost non-thread post\")\n\t}\n\tpid := dst.incGetPostID()\n\tpidkey := postIDKey(pid)\n\trepost := newPost(dst, pid, creator, title, body, pid, post.id, post.board.id)\n\tdst.threads.Set(pidkey, repost)\n\tif !dst.IsPrivate() {\n\t\tbidkey := boardIDKey(dst.id)\n\t\tpost.reposts.Set(bidkey, pid)\n\t}\n\treturn repost\n}\n\nfunc (thread *Post) DeletePost(pid PostID) {\n\tif thread.id == pid {\n\t\tpanic(\"should not happen\")\n\t}\n\tpidkey := postIDKey(pid)\n\tpostI, removed := thread.repliesAll.Remove(pidkey)\n\tif !removed {\n\t\tpanic(\"post not found in thread\")\n\t}\n\tpost := postI.(*Post)\n\tif post.parentID != thread.id {\n\t\tparent := thread.GetReply(post.parentID)\n\t\tparent.replies.Remove(pidkey)\n\t} else {\n\t\tthread.replies.Remove(pidkey)\n\t}\n}\n\nfunc (post *Post) HasPermission(addr std.Address, perm Permission) bool {\n\tif post.creator == addr {\n\t\tswitch perm {\n\t\tcase EditPermission:\n\t\t\treturn true\n\t\tcase DeletePermission:\n\t\t\treturn true\n\t\tdefault:\n\t\t\treturn false\n\t\t}\n\t}\n\t// post notes inherit permissions of the board.\n\treturn post.board.HasPermission(addr, perm)\n}\n\nfunc (post *Post) GetSummary() string {\n\treturn summaryOf(post.body, 80)\n}\n\nfunc (post *Post) GetURL() string {\n\tif post.IsThread() {\n\t\treturn post.board.GetURLFromThreadAndReplyID(\n\t\t\tpost.id, 0)\n\t} else {\n\t\treturn post.board.GetURLFromThreadAndReplyID(\n\t\t\tpost.threadID, post.id)\n\t}\n}\n\nfunc (post *Post) GetReplyFormURL() string {\n\treturn \"/r/demo/boards?help\u0026__func=CreateReply\" +\n\t\t\"\u0026bid=\" + post.board.id.String() +\n\t\t\"\u0026threadid=\" + post.threadID.String() +\n\t\t\"\u0026postid=\" + post.id.String() +\n\t\t\"\u0026body.type=textarea\"\n}\n\nfunc (post *Post) GetDeleteFormURL() string {\n\treturn \"/r/demo/boards?help\u0026__func=DeletePost\" +\n\t\t\"\u0026bid=\" + post.board.id.String() +\n\t\t\"\u0026threadid=\" + post.threadID.String() +\n\t\t\"\u0026postid=\" + post.id.String()\n}\n\nfunc (post *Post) RenderSummary() string {\n\tstr := \"\"\n\tif post.title != \"\" {\n\t\tstr += \"## [\" + summaryOf(post.title, 80) + \"](\" + post.GetURL() + \")\\n\"\n\t\tstr += \"\\n\"\n\t}\n\tstr += post.GetSummary() + \"\\n\"\n\tstr += \"\\\\- \" + displayAddressMD(post.creator) + \",\"\n\tstr += \" [\" + post.createdAt.Format(\"2006-01-02 3:04pm MST\") + \"](\" + post.GetURL() + \")\"\n\tstr += \" \\\\[[x](\" + post.GetDeleteFormURL() + \")]\"\n\tstr += \" (\" + strconv.Itoa(post.replies.Size()) + \" replies)\" + \"\\n\"\n\treturn str\n}\n\nfunc (post *Post) RenderPost(indent string, levels int) string {\n\tif post == nil {\n\t\treturn \"nil post\"\n\t}\n\tstr := \"\"\n\tif post.title != \"\" {\n\t\tstr += indent + \"# \" + post.title + \"\\n\"\n\t\tstr += indent + \"\\n\"\n\t}\n\tstr += indentBody(indent, post.body) + \"\\n\" // TODO: indent body lines.\n\tstr += indent + \"\\\\- \" + displayAddressMD(post.creator) + \", \"\n\tstr += \"[\" + post.createdAt.Format(\"2006-01-02 3:04pm (MST)\") + \"](\" + post.GetURL() + \")\"\n\tstr += \" \\\\[[reply](\" + post.GetReplyFormURL() + \")]\"\n\tstr += \" \\\\[[x](\" + post.GetDeleteFormURL() + \")]\\n\"\n\tif levels \u003e 0 {\n\t\tif post.replies.Size() \u003e 0 {\n\t\t\tpost.replies.Iterate(\"\", \"\", func(n *avl.Tree) bool {\n\t\t\t\tstr += indent + \"\\n\"\n\t\t\t\tstr += n.Value().(*Post).RenderPost(indent+\"\u003e \", levels-1)\n\t\t\t\treturn false\n\t\t\t})\n\t\t}\n\t} else {\n\t\tif post.replies.Size() \u003e 0 {\n\t\t\tstr += indent + \"\\n\"\n\t\t\tstr += indent + \"_[see all \" + strconv.Itoa(post.replies.Size()) + \" replies](\" + post.GetURL() + \")_\\n\"\n\t\t}\n\t}\n\treturn str\n}\n\n// render reply and link to context thread\nfunc (post *Post) RenderInner() string {\n\tif post.IsThread() {\n\t\tpanic(\"unexpected thread\")\n\t}\n\tthreadID := post.threadID\n\t// replyID := post.id\n\tparentID := post.parentID\n\tstr := \"\"\n\tstr += \"_[see thread](\" + post.board.GetURLFromThreadAndReplyID(\n\t\tthreadID, 0) + \")_\\n\\n\"\n\tthread := post.board.GetThread(post.threadID)\n\tvar parent *Post\n\tif thread.id == parentID {\n\t\tparent = thread\n\t} else {\n\t\tparent = thread.GetReply(parentID)\n\t}\n\tstr += parent.RenderPost(\"\", 0)\n\tstr += \"\\n\"\n\tstr += post.RenderPost(\"\u003e \", 5)\n\treturn str\n}\n"},{"Name":"public.gno","Body":"package boards\n\nimport (\n\t\"std\"\n\t\"strconv\"\n)\n\n//----------------------------------------\n// Public facing functions\n\nfunc GetBoardIDFromName(name string) (BoardID, bool) {\n\tboardI, exists := gBoardsByName.Get(name)\n\tif !exists {\n\t\treturn 0, false\n\t}\n\treturn boardI.(*Board).id, true\n}\n\nfunc CreateBoard(name string) BoardID {\n\tstd.AssertOriginCall()\n\tbid := incGetBoardID()\n\tcaller := std.GetOrigCaller()\n\tif usernameOf(caller) == \"\" {\n\t\tpanic(\"unauthorized\")\n\t}\n\turl := \"/r/demo/boards:\" + name\n\tboard := newBoard(bid, url, name, caller)\n\tbidkey := boardIDKey(bid)\n\tgBoards.Set(bidkey, board)\n\tgBoardsByName.Set(name, board)\n\treturn board.id\n}\n\nfunc checkAnonFee() bool {\n\tsent := std.GetOrigSend()\n\tanonFeeCoin := std.Coin{\"ugnot\", int64(gDefaultAnonFee)}\n\tif len(sent) == 1 \u0026\u0026 sent[0].IsGTE(anonFeeCoin) {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc CreateThread(bid BoardID, title string, body string) PostID {\n\tstd.AssertOriginCall()\n\tcaller := std.GetOrigCaller()\n\tif usernameOf(caller) == \"\" {\n\t\tif !checkAnonFee() {\n\t\t\tpanic(\"please register, otherwise minimum fee \" + strconv.Itoa(gDefaultAnonFee) + \" is required if anonymous\")\n\t\t}\n\t}\n\tboard := getBoard(bid)\n\tif board == nil {\n\t\tpanic(\"board not exist\")\n\t}\n\tthread := board.AddThread(caller, title, body)\n\treturn thread.id\n}\n\nfunc CreateReply(bid BoardID, threadid, postid PostID, body string) PostID {\n\tstd.AssertOriginCall()\n\tcaller := std.GetOrigCaller()\n\tif usernameOf(caller) == \"\" {\n\t\tif !checkAnonFee() {\n\t\t\tpanic(\"please register, otherwise minimum fee \" + strconv.Itoa(gDefaultAnonFee) + \" is required if anonymous\")\n\t\t}\n\t}\n\tboard := getBoard(bid)\n\tif board == nil {\n\t\tpanic(\"board not exist\")\n\t}\n\tthread := board.GetThread(threadid)\n\tif thread == nil {\n\t\tpanic(\"thread not exist\")\n\t}\n\tif postid == threadid {\n\t\treply := thread.AddReply(caller, body)\n\t\treturn reply.id\n\t} else {\n\t\tpost := thread.GetReply(postid)\n\t\treply := post.AddReply(caller, body)\n\t\treturn reply.id\n\t}\n}\n\n// If dstBoard is private, does not ping back.\n// If board specified by bid is private, panics.\nfunc CreateRepost(bid BoardID, postid PostID, title string, body string, dstBoardID BoardID) PostID {\n\tstd.AssertOriginCall()\n\tcaller := std.GetOrigCaller()\n\tif usernameOf(caller) == \"\" {\n\t\t// TODO: allow with gDefaultAnonFee payment.\n\t\tif !checkAnonFee() {\n\t\t\tpanic(\"please register, otherwise minimum fee \" + strconv.Itoa(gDefaultAnonFee) + \" is required if anonymous\")\n\t\t}\n\t}\n\tboard := getBoard(bid)\n\tif board == nil {\n\t\tpanic(\"src board not exist\")\n\t}\n\tif board.IsPrivate() {\n\t\tpanic(\"cannot repost from a private board\")\n\t}\n\tdst := getBoard(dstBoardID)\n\tif dst == nil {\n\t\tpanic(\"dst board not exist\")\n\t}\n\tthread := board.GetThread(postid)\n\tif thread == nil {\n\t\tpanic(\"thread not exist\")\n\t}\n\trepost := thread.AddRepostTo(caller, title, body, dst)\n\treturn repost.id\n}\n\nfunc DeletePost(bid BoardID, threadid, postid PostID, reason string) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetOrigCaller()\n\tboard := getBoard(bid)\n\tif board == nil {\n\t\tpanic(\"board not exist\")\n\t}\n\tthread := board.GetThread(threadid)\n\tif thread == nil {\n\t\tpanic(\"thread not exist\")\n\t}\n\tif postid == threadid {\n\t\t// delete thread\n\t\tif !thread.HasPermission(caller, DeletePermission) {\n\t\t\tpanic(\"unauthorized\")\n\t\t}\n\t\tboard.DeleteThread(threadid)\n\t} else {\n\t\t// delete thread's post\n\t\tpost := thread.GetReply(postid)\n\t\tif post == nil {\n\t\t\tpanic(\"post not exist\")\n\t\t}\n\t\tif !post.HasPermission(caller, DeletePermission) {\n\t\t\tpanic(\"unauthorized\")\n\t\t}\n\t\tthread.DeletePost(postid)\n\t}\n}\n\nfunc EditPost(bid BoardID, threadid, postid PostID, title, body string) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetOrigCaller()\n\tboard := getBoard(bid)\n\tif board == nil {\n\t\tpanic(\"board not exist\")\n\t}\n\tthread := board.GetThread(threadid)\n\tif thread == nil {\n\t\tpanic(\"thread not exist\")\n\t}\n\tif postid == threadid {\n\t\t// edit thread\n\t\tif !thread.HasPermission(caller, EditPermission) {\n\t\t\tpanic(\"unauthorized\")\n\t\t}\n\t\tthread.Update(title, body)\n\t} else {\n\t\t// edit thread's post\n\t\tpost := thread.GetReply(postid)\n\t\tif post == nil {\n\t\t\tpanic(\"post not exist\")\n\t\t}\n\t\tif !post.HasPermission(caller, EditPermission) {\n\t\t\tpanic(\"unauthorized\")\n\t\t}\n\t\tpost.Update(title, body)\n\t}\n}\n"},{"Name":"render.gno","Body":"package boards\n\nimport (\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n//----------------------------------------\n// Render functions\n\nfunc RenderBoard(bid BoardID) string {\n\tboard := getBoard(bid)\n\tif board == nil {\n\t\treturn \"missing board\"\n\t}\n\treturn board.RenderBoard()\n}\n\nfunc Render(path string) string {\n\tif path == \"\" {\n\t\tstr := \"These are all the boards of this realm:\\n\\n\"\n\t\tgBoards.Iterate(\"\", \"\", func(n *avl.Tree) bool {\n\t\t\tboard := n.Value().(*Board)\n\t\t\tstr += \" * [\" + board.url + \"](\" + board.url + \")\\n\"\n\t\t\treturn false\n\t\t})\n\t\treturn str\n\t}\n\tparts := strings.Split(path, \"/\")\n\tif len(parts) == 1 {\n\t\t// /r/demo/boards:BOARD_NAME\n\t\tname := parts[0]\n\t\tboardI, exists := gBoardsByName.Get(name)\n\t\tif !exists {\n\t\t\treturn \"board does not exist: \" + name\n\t\t}\n\t\treturn boardI.(*Board).RenderBoard()\n\t} else if len(parts) == 2 {\n\t\t// /r/demo/boards:BOARD_NAME/THREAD_ID\n\t\tname := parts[0]\n\t\tboardI, exists := gBoardsByName.Get(name)\n\t\tif !exists {\n\t\t\treturn \"board does not exist: \" + name\n\t\t}\n\t\tpid, err := strconv.Atoi(parts[1])\n\t\tif err != nil {\n\t\t\treturn \"invalid thread id: \" + parts[1]\n\t\t}\n\t\tboard := boardI.(*Board)\n\t\tthread := board.GetThread(PostID(pid))\n\t\tif thread == nil {\n\t\t\treturn \"thread does not exist with id: \" + parts[1]\n\t\t}\n\t\treturn thread.RenderPost(\"\", 5)\n\t} else if len(parts) == 3 {\n\t\t// /r/demo/boards:BOARD_NAME/THREAD_ID/REPLY_ID\n\t\tname := parts[0]\n\t\tboardI, exists := gBoardsByName.Get(name)\n\t\tif !exists {\n\t\t\treturn \"board does not exist: \" + name\n\t\t}\n\t\tpid, err := strconv.Atoi(parts[1])\n\t\tif err != nil {\n\t\t\treturn \"invalid thread id: \" + parts[1]\n\t\t}\n\t\tboard := boardI.(*Board)\n\t\tthread := board.GetThread(PostID(pid))\n\t\tif thread == nil {\n\t\t\treturn \"thread does not exist with id: \" + parts[1]\n\t\t}\n\t\trid, err := strconv.Atoi(parts[2])\n\t\tif err != nil {\n\t\t\treturn \"invalid reply id: \" + parts[2]\n\t\t}\n\t\treply := thread.GetReply(PostID(rid))\n\t\tif reply == nil {\n\t\t\treturn \"reply does not exist with id: \" + parts[2]\n\t\t}\n\t\treturn reply.RenderInner()\n\t} else {\n\t\treturn \"unrecognized path \" + path\n\t}\n}\n"},{"Name":"role.gno","Body":"package boards\n\ntype Permission string\n\nconst (\n\tDeletePermission Permission = \"role:delete\"\n\tEditPermission   Permission = \"role:edit\"\n)\n"},{"Name":"z_0_a_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\nimport (\n\t\"gno.land/r/demo/boards\"\n)\n\nvar bid boards.BoardID\n\nfunc init() {\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid := boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\tboards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Error:\n// unauthorized\n"},{"Name":"z_0_b_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 199000000ugnot\n\nimport (\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar bid boards.BoardID\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\tbid = boards.CreateBoard(\"test_board\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Error:\n// payment must not be less than 200000000\n"},{"Name":"z_0_c_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar bid boards.BoardID\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\tboards.CreateThread(1, \"First Post (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Error:\n// board not exist\n"},{"Name":"z_0_d_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar bid boards.BoardID\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateReply(bid, 0, 0, \"Reply of the second post\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Error:\n// thread not exist\n"},{"Name":"z_0_e_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar bid boards.BoardID\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\tboards.CreateReply(bid, 0, 0, \"Reply of the second post\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Error:\n// board not exist\n"},{"Name":"z_0_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar bid boards.BoardID\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid := boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\tboards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Output:\n// \\[[post](/r/demo/boards?help\u0026__func=CreateThread\u0026bid=1\u0026body.type=textarea)]\n//\n// ----------------------------------------\n// ## [First Post (title)](/r/demo/boards:test_board/1)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm UTC](/r/demo/boards:test_board/1) \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)] (0 replies)\n//\n// ----------------------------------------\n// ## [Second Post (title)](/r/demo/boards:test_board/2)\n//\n// Body of the second post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm UTC](/r/demo/boards:test_board/2) \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=2)] (1 replies)\n"},{"Name":"z_10_a_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\t// boardId 2 not exist\n\tboards.DeletePost(2, pid, pid, \"\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// board not exist\n"},{"Name":"z_10_b_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\t// pid of 2 not exist\n\tboards.DeletePost(bid, 2, 2, \"\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// thread not exist\n"},{"Name":"z_10_c_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n\trid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n\trid = boards.CreateReply(bid, pid, pid, \"First reply of the First post\\n\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\tboards.DeletePost(bid, pid, rid, \"\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n//\n// \u003e First reply of the First post\n// \u003e\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=2)]\n//\n// ----------------------------------------------------\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n"},{"Name":"z_10_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\tboards.DeletePost(bid, pid, pid, \"\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n//\n// ----------------------------------------------------\n// thread does not exist with id: 1\n"},{"Name":"z_11_a_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\t// board 2 not exist\n\tboards.EditPost(2, pid, pid, \"Edited: First Post in (title)\", \"Edited: Body of the first post. (body)\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// board not exist\n"},{"Name":"z_11_b_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\t// thread 2 not exist\n\tboards.EditPost(bid, 2, pid, \"Edited: First Post in (title)\", \"Edited: Body of the first post. (body)\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// thread not exist\n"},{"Name":"z_11_c_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\t// post 2 not exist\n\tboards.EditPost(bid, pid, 2, \"Edited: First Post in (title)\", \"Edited: Body of the first post. (body)\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// post not exist\n"},{"Name":"z_11_d_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n\trid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n\trid = boards.CreateReply(bid, pid, pid, \"First reply of the First post\\n\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\tboards.EditPost(bid, pid, rid, \"\", \"Edited: First reply of the First post\\n\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n//\n// \u003e First reply of the First post\n// \u003e\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=2)]\n//\n// ----------------------------------------------------\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n//\n// \u003e Edited: First reply of the First post\n// \u003e\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=2)]\n"},{"Name":"z_11_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\tboards.EditPost(bid, pid, pid, \"Edited: First Post in (title)\", \"Edited: Body of the first post. (body)\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n//\n// ----------------------------------------------------\n// # Edited: First Post in (title)\n//\n// Edited: Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n"},{"Name":"z_1_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar board *boards.Board\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\t_ = boards.CreateBoard(\"test_board_1\")\n\t_ = boards.CreateBoard(\"test_board_2\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"\"))\n}\n\n// Output:\n// These are all the boards of this realm:\n//\n//  * [/r/demo/boards:test_board_1](/r/demo/boards:test_board_1)\n//  * [/r/demo/boards:test_board_2](/r/demo/boards:test_board_2)\n"},{"Name":"z_2_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid = boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\tboards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # Second Post (title)\n//\n// Body of the second post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=2)]\n//\n// \u003e Reply of the second post\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/3) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=3\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=3)]\n"},{"Name":"z_3_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid = boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n}\n\nfunc main() {\n\trid := boards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n\tprintln(rid)\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// 3\n// # Second Post (title)\n//\n// Body of the second post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=2)]\n//\n// \u003e Reply of the second post\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/3) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=3\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=3)]\n"},{"Name":"z_4_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid = boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\trid := boards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n\tprintln(rid)\n}\n\nfunc main() {\n\trid2 := boards.CreateReply(bid, pid, pid, \"Second reply of the second post\")\n\tprintln(rid2)\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// 3\n// 4\n// # Second Post (title)\n//\n// Body of the second post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=2)]\n//\n// \u003e Reply of the second post\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/3) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=3\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=3)]\n//\n// \u003e Second reply of the second post\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/4) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=4\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=4)]\n\n// Realm:\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/boards\"]\n// u[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:100]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"0000000003\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/r/demo/boards.Post\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/r/demo/boards.Post\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Escaped\": true,\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:101\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:100\",\n//         \"ModTime\": \"108\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:108\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:109]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"0000000004\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/r/demo/boards.Post\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/r/demo/boards.Post\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Escaped\": true,\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:109\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:108\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:108]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"0000000004\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"b0e1bb401a1e4392dc4aa8353e35364905be64af\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:100\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"a14457b34570e396c59208d49f40e1cc23b80a11\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:109\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:108\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:95\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:111]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:111\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:112]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:112\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:113]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:113\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:114]={\n//     \"Fields\": [\n//         {\n//             \"N\": \"AAAAgJSeXbo=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"65536\"\n//             }\n//         },\n//         {\n//             \"N\": \"AbSNdvQQIhE=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"1024\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"time.Location\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"336074805fc853987abe6f7fe3ad97a6a6f3077a:2\"\n//                 },\n//                 \"Index\": \"188\",\n//                 \"TV\": null\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:114\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:115]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"65536\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"1024\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"time.Location\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:115\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/r/demo/boards.Board\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/r/demo/boards.Board\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Escaped\": true,\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:81\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"N\": \"BAAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"gno.land/r/demo/boards.PostID\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"std.Address\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"g1arjyc64rpthwn8zhxtzjvearm5scy43y7vm985\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"Second reply of the second post\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"9adae740a66b6f3d0066d3ddf478290286fd8a6e\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:111\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"630649048eb057bc03298c019417120984ad62b7\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:112\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"691da6b946b1873fba7f8dcf100e3e9d280e0759\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:113\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"gno.land/r/demo/boards.PostID\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"gno.land/r/demo/boards.PostID\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"gno.land/r/demo/boards.BoardID\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"time.Time\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.RefValue\",\n//                 \"Hash\": \"91a60131fc119b8a406c4be71e1e991e37ca522b\",\n//                 \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:114\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"time.Time\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.RefValue\",\n//                 \"Hash\": \"39aedff3aa8d8246df681ff0f576f8ac31cb5d55\",\n//                 \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:115\"\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110\",\n//         \"IsEscaped\": true,\n//         \"ModTime\": \"0\",\n//         \"RefCount\": \"2\"\n//     }\n// }\n// u[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:107]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"0000000003\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/r/demo/boards.Post\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/r/demo/boards.Post\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Escaped\": true,\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:101\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:107\",\n//         \"ModTime\": \"116\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:116\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:117]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"0000000004\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/r/demo/boards.Post\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/r/demo/boards.Post\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Escaped\": true,\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:117\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:116\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:116]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"0000000004\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"625e87966cb6643c1ad5ccd0a9ee1b0e3fe767fb\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:107\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"280f673fa84e1981a3138849f782b5dd87fbfd09\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:117\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:116\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:96\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// u[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:81]={\n//     \"Fields\": [\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"gno.land/r/demo/boards.BoardID\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"/r/demo/boards:test_board\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"test_board\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"std.Address\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"g1arjyc64rpthwn8zhxtzjvearm5scy43y7vm985\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"ecc6212ef0cb96a4785bb34427a7d0ee7f4c8400\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:82\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"N\": \"BAAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"65536\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"time.Time\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.RefValue\",\n//                 \"Hash\": \"7e9fd9bb5e90a06c7751585cd80f23aedddde25b\",\n//                 \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:83\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:81\",\n//         \"IsEscaped\": true,\n//         \"ModTime\": \"107\",\n//         \"RefCount\": \"6\"\n//     }\n// }\n// u[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:95]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"1a1636b4c1593d1694512b57780449f80c14d92f\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:108\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:95\",\n//         \"ModTime\": \"107\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:94\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// u[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:96]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"4df019c20a64842ebe5ae2cf1aed14cc7799588d\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:116\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:96\",\n//         \"ModTime\": \"107\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:94\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// switchrealm[\"gno.land/r/demo/boards\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/boards\"]\n// switchrealm[\"gno.land/r/boards_test\"]\n"},{"Name":"z_5_b_filetest.gno","Body":"package main\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/testutils\"\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nconst admin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\")\n\nfunc main() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\t// create board via registered user\n\tbid := boards.CreateBoard(\"test_board\")\n\n\t// create post via anon user\n\ttest2 := testutils.TestAddress(\"test2\")\n\tstd.TestSetOrigCaller(test2)\n\tstd.TestSetOrigSend(std.Coins{{\"ugnot\", 9000000}}, nil)\n\n\tpid := boards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// please register, otherwise minimum fee 100000000 is required if anonymous\n"},{"Name":"z_5_c_filetest.gno","Body":"package main\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/testutils\"\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nconst admin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\")\n\nfunc main() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\t// create board via registered user\n\tbid := boards.CreateBoard(\"test_board\")\n\n\t// create post via anon user\n\ttest2 := testutils.TestAddress(\"test2\")\n\tstd.TestSetOrigCaller(test2)\n\tstd.TestSetOrigSend(std.Coins{{\"ugnot\", 101000000}}, nil)\n\n\tpid := boards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tboards.CreateReply(bid, pid, pid, \"Reply of the first post\")\n\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # First Post (title)\n//\n// Body of the first post. (body)\n// \\- [g1w3jhxapjta047h6lta047h6lta047h6laqcyu4](/r/users:g1w3jhxapjta047h6lta047h6lta047h6laqcyu4), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n//\n// \u003e Reply of the first post\n// \u003e \\- [g1w3jhxapjta047h6lta047h6lta047h6laqcyu4](/r/users:g1w3jhxapjta047h6lta047h6lta047h6laqcyu4), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=2)]\n"},{"Name":"z_5_d_filetest.gno","Body":"package main\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/testutils\"\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nconst admin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\")\n\nfunc main() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\t// create board via registered user\n\tbid := boards.CreateBoard(\"test_board\")\n\tpid := boards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\n\t// create reply via anon user\n\ttest2 := testutils.TestAddress(\"test2\")\n\tstd.TestSetOrigCaller(test2)\n\tstd.TestSetOrigSend(std.Coins{{\"ugnot\", 9000000}}, nil)\n\tboards.CreateReply(bid, pid, pid, \"Reply of the first post\")\n\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// please register, otherwise minimum fee 100000000 is required if anonymous\n"},{"Name":"z_5_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid = boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\trid := boards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n}\n\nfunc main() {\n\trid2 := boards.CreateReply(bid, pid, pid, \"Second reply of the second post\\n\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # Second Post (title)\n//\n// Body of the second post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=2)]\n//\n// \u003e Reply of the second post\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/3) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=3\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=3)]\n//\n// \u003e Second reply of the second post\n// \u003e\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/4) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=4\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=4)]\n"},{"Name":"z_6_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n\trid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid = boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\trid = boards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n}\n\nfunc main() {\n\tboards.CreateReply(bid, pid, pid, \"Second reply of the second post\\n\")\n\tboards.CreateReply(bid, pid, rid, \"First reply of the first reply\\n\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # Second Post (title)\n//\n// Body of the second post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=2)]\n//\n// \u003e Reply of the second post\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/3) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=3\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=3)]\n// \u003e\n// \u003e \u003e First reply of the first reply\n// \u003e \u003e\n// \u003e \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/5) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=5\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=5)]\n//\n// \u003e Second reply of the second post\n// \u003e\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/4) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=4\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=4)]\n"},{"Name":"z_7_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nfunc init() {\n\t// register\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\t// create board and post\n\tbid := boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Output:\n// \\[[post](/r/demo/boards?help\u0026__func=CreateThread\u0026bid=1\u0026body.type=textarea)]\n//\n// ----------------------------------------\n// ## [First Post (title)](/r/demo/boards:test_board/1)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm UTC](/r/demo/boards:test_board/1) \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)] (0 replies)\n"},{"Name":"z_8_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n\trid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid = boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\trid = boards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n}\n\nfunc main() {\n\tboards.CreateReply(bid, pid, pid, \"Second reply of the second post\\n\")\n\trid2 := boards.CreateReply(bid, pid, rid, \"First reply of the first reply\\n\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid)) + \"/\" + strconv.Itoa(int(rid2))))\n}\n\n// Output:\n// _[see thread](/r/demo/boards:test_board/2)_\n//\n// Reply of the second post\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/3) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=3\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=3)]\n//\n// _[see all 1 replies](/r/demo/boards:test_board/2/3)_\n//\n// \u003e First reply of the first reply\n// \u003e\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/5) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=5\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=5)]\n"},{"Name":"z_9_a_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar dstBoard boards.BoardID\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tdstBoard = boards.CreateBoard(\"dst_board\")\n\n\tboards.CreateRepost(0, 0, \"First Post in (title)\", \"Body of the first post. (body)\", dstBoard)\n}\n\nfunc main() {\n}\n\n// Error:\n// src board not exist\n"},{"Name":"z_9_b_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tsrcBoard boards.BoardID\n\tpid      boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tsrcBoard = boards.CreateBoard(\"first_board\")\n\tpid = boards.CreateThread(srcBoard, \"First Post in (title)\", \"Body of the first post. (body)\")\n\n\tboards.CreateRepost(srcBoard, pid, \"First Post in (title)\", \"Body of the first post. (body)\", 0)\n}\n\nfunc main() {\n}\n\n// Error:\n// dst board not exist\n"},{"Name":"z_9_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tfirstBoard  boards.BoardID\n\tsecondBoard boards.BoardID\n\tpid         boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tfirstBoard = boards.CreateBoard(\"first_board\")\n\tsecondBoard = boards.CreateBoard(\"second_board\")\n\tpid = boards.CreateThread(firstBoard, \"First Post in (title)\", \"Body of the first post. (body)\")\n\n\tboards.CreateRepost(firstBoard, pid, \"First Post in (title)\", \"Body of the first post. (body)\", secondBoard)\n}\n\nfunc main() {\n\tprintln(boards.Render(\"second_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:second_board/1/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=2\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=2\u0026threadid=1\u0026postid=1)]\n"}]},"deposit":"100ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiTPFM7EjFSP3X5Vs/A4ArLVnscpqadoPU4Yz3UTSYzu"},"signature":"14Gt2wdC3PMNhanQq4QXBt6COPTgJ8vip8IOM/u18qdmDGx7DMCEdTOtEfTRrxBHbUfnvomhe3+6xCXzU6/Rkw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1lnsppwynw6hflnuxvkjvrdhjwgcfd2qgxg0pjv","package":{"Name":"boards","Path":"gno.land/r/demo/trongvip1","Files":[{"Name":"README.md","Body":"This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"},{"Name":"board.gno","Body":"package boards\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n//----------------------------------------\n// Board\n\ntype BoardID uint64\n\nfunc (bid BoardID) String() string {\n\treturn strconv.Itoa(int(bid))\n}\n\ntype Board struct {\n\tid        BoardID // only set for public boards.\n\turl       string\n\tname      string\n\tcreator   std.Address\n\tthreads   *avl.MutTree // Post.id -\u003e *Post\n\tpostsCtr  uint64       // increments Post.id\n\tcreatedAt time.Time\n\tdeleted   *avl.MutTree // TODO reserved for fast-delete.\n}\n\nfunc newBoard(id BoardID, url string, name string, creator std.Address) *Board {\n\tif !reName.MatchString(name) {\n\t\tpanic(\"invalid name: \" + name)\n\t}\n\texists := gBoardsByName.Has(name)\n\tif exists {\n\t\tpanic(\"board already exists\")\n\t}\n\treturn \u0026Board{\n\t\tid:        id,\n\t\turl:       url,\n\t\tname:      name,\n\t\tcreator:   creator,\n\t\tthreads:   avl.NewMutTree(),\n\t\tcreatedAt: time.Now(),\n\t}\n}\n\n/* TODO support this once we figure out how to ensure URL correctness.\n// A private board is not tracked by gBoards*,\n// but must be persisted by the caller's realm.\n// Private boards have 0 id and does not ping\n// back the remote board on reposts.\nfunc NewPrivateBoard(url string, name string, creator std.Address) *Board {\n\treturn newBoard(0, url, name, creator)\n}\n*/\n\nfunc (board *Board) IsPrivate() bool {\n\treturn board.id == 0\n}\n\nfunc (board *Board) GetThread(pid PostID) *Post {\n\tpidkey := postIDKey(pid)\n\tpostI, exists := board.threads.Get(pidkey)\n\tif !exists {\n\t\treturn nil\n\t}\n\treturn postI.(*Post)\n}\n\nfunc (board *Board) AddThread(creator std.Address, title string, body string) *Post {\n\tpid := board.incGetPostID()\n\tpidkey := postIDKey(pid)\n\tthread := newPost(board, pid, creator, title, body, pid, 0, 0)\n\tboard.threads.Set(pidkey, thread)\n\treturn thread\n}\n\n// NOTE: this can be potentially very expensive for threads with many replies.\n// TODO: implement optional fast-delete where thread is simply moved.\nfunc (board *Board) DeleteThread(pid PostID) {\n\tpidkey := postIDKey(pid)\n\t_, removed := board.threads.Remove(pidkey)\n\tif !removed {\n\t\tpanic(\"thread does not exist with id \" + pid.String())\n\t}\n}\n\nfunc (board *Board) HasPermission(addr std.Address, perm Permission) bool {\n\tif board.creator == addr {\n\t\tswitch perm {\n\t\tcase EditPermission:\n\t\t\treturn true\n\t\tcase DeletePermission:\n\t\t\treturn true\n\t\tdefault:\n\t\t\treturn false\n\t\t}\n\t}\n\treturn false\n}\n\n// Renders the board for display suitable as plaintext in\n// console.  This is suitable for demonstration or tests,\n// but not for prod.\nfunc (board *Board) RenderBoard() string {\n\tstr := \"\"\n\tstr += \"\\\\[[post](\" + board.GetPostFormURL() + \")]\\n\\n\"\n\tif board.threads.Size() \u003e 0 {\n\t\tboard.threads.Iterate(\"\", \"\", func(n *avl.Tree) bool {\n\t\t\tif str != \"\" {\n\t\t\t\tstr += \"----------------------------------------\\n\"\n\t\t\t}\n\t\t\tstr += n.Value().(*Post).RenderSummary() + \"\\n\"\n\t\t\treturn false\n\t\t})\n\t}\n\treturn str\n}\n\nfunc (board *Board) incGetPostID() PostID {\n\tboard.postsCtr++\n\treturn PostID(board.postsCtr)\n}\n\nfunc (board *Board) GetURLFromThreadAndReplyID(threadID, replyID PostID) string {\n\tif replyID == 0 {\n\t\treturn board.url + \"/\" + threadID.String()\n\t} else {\n\t\treturn board.url + \"/\" + threadID.String() + \"/\" + replyID.String()\n\t}\n}\n\nfunc (board *Board) GetPostFormURL() string {\n\treturn \"/r/demo/boards?help\u0026__func=CreateThread\" +\n\t\t\"\u0026bid=\" + board.id.String() +\n\t\t\"\u0026body.type=textarea\"\n}\n"},{"Name":"boards.gno","Body":"package boards\n\nimport (\n\t\"regexp\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n//----------------------------------------\n// Realm (package) state\n\nvar (\n\tgBoards         = avl.NewMutTree() // id -\u003e *Board\n\tgBoardsCtr      int                // increments Board.id\n\tgBoardsByName   = avl.NewMutTree() // name -\u003e *Board\n\tgDefaultAnonFee = 100000000        // minimum fee required if anonymous\n)\n\n//----------------------------------------\n// Constants\n\nvar reName = regexp.MustCompile(`^[a-z]+[_a-z0-9]{2,29}$`)\n"},{"Name":"example_post.md","Body":"Hey all! 👋\n\nThis is my first post in this land!"},{"Name":"misc.gno","Body":"package boards\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/r/demo/users\"\n)\n\n//----------------------------------------\n// private utility methods\n// XXX ensure these cannot be called from public.\n\nfunc getBoard(bid BoardID) *Board {\n\tbidkey := boardIDKey(bid)\n\tboard_, exists := gBoards.Get(bidkey)\n\tif !exists {\n\t\treturn nil\n\t}\n\tboard := board_.(*Board)\n\treturn board\n}\n\nfunc incGetBoardID() BoardID {\n\tgBoardsCtr++\n\treturn BoardID(gBoardsCtr)\n}\n\nfunc padLeft(str string, length int) string {\n\tif len(str) \u003e= length {\n\t\treturn str\n\t} else {\n\t\treturn strings.Repeat(\" \", length-len(str)) + str\n\t}\n}\n\nfunc padZero(u64 uint64, length int) string {\n\tstr := strconv.Itoa(int(u64))\n\tif len(str) \u003e= length {\n\t\treturn str\n\t} else {\n\t\treturn strings.Repeat(\"0\", length-len(str)) + str\n\t}\n}\n\nfunc boardIDKey(bid BoardID) string {\n\treturn padZero(uint64(bid), 10)\n}\n\nfunc postIDKey(pid PostID) string {\n\treturn padZero(uint64(pid), 10)\n}\n\nfunc indentBody(indent string, body string) string {\n\tlines := strings.Split(body, \"\\n\")\n\tres := \"\"\n\tfor i, line := range lines {\n\t\tif i \u003e 0 {\n\t\t\tres += \"\\n\"\n\t\t}\n\t\tres += indent + line\n\t}\n\treturn res\n}\n\n// NOTE: length must be greater than 3.\nfunc summaryOf(str string, length int) string {\n\tlines := strings.SplitN(str, \"\\n\", 2)\n\tline := lines[0]\n\tif len(line) \u003e length {\n\t\tline = line[:(length-3)] + \"...\"\n\t} else if len(lines) \u003e 1 {\n\t\t// len(line) \u003c= 80\n\t\tline = line + \"...\"\n\t}\n\treturn line\n}\n\nfunc displayAddressMD(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user == nil {\n\t\treturn \"[\" + addr.String() + \"](/r/users:\" + addr.String() + \")\"\n\t} else {\n\t\treturn \"[@\" + user.Name() + \"](/r/users:\" + user.Name() + \")\"\n\t}\n}\n\nfunc usernameOf(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user == nil {\n\t\treturn \"\"\n\t} else {\n\t\treturn user.Name()\n\t}\n}\n"},{"Name":"post.gno","Body":"package boards\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n//----------------------------------------\n// Post\n\n// NOTE: a PostID is relative to the board.\ntype PostID uint64\n\nfunc (pid PostID) String() string {\n\treturn strconv.Itoa(int(pid))\n}\n\n// A Post is a \"thread\" or a \"reply\" depending on context.\n// A thread is a Post of a Board that holds other replies.\ntype Post struct {\n\tboard       *Board\n\tid          PostID\n\tcreator     std.Address\n\ttitle       string // optional\n\tbody        string\n\treplies     *avl.MutTree // Post.id -\u003e *Post\n\trepliesAll  *avl.MutTree // Post.id -\u003e *Post (all replies, for top-level posts)\n\treposts     *avl.MutTree // Board.id -\u003e Post.id\n\tthreadID    PostID       // original Post.id\n\tparentID    PostID       // parent Post.id (if reply or repost)\n\trepostBoard BoardID      // original Board.id (if repost)\n\tcreatedAt   time.Time\n\tupdatedAt   time.Time\n}\n\nfunc newPost(board *Board, id PostID, creator std.Address, title, body string, threadID, parentID PostID, repostBoard BoardID) *Post {\n\treturn \u0026Post{\n\t\tboard:       board,\n\t\tid:          id,\n\t\tcreator:     creator,\n\t\ttitle:       title,\n\t\tbody:        body,\n\t\treplies:     avl.NewMutTree(),\n\t\trepliesAll:  avl.NewMutTree(),\n\t\treposts:     avl.NewMutTree(),\n\t\tthreadID:    threadID,\n\t\tparentID:    parentID,\n\t\trepostBoard: repostBoard,\n\t\tcreatedAt:   time.Now(),\n\t}\n}\n\nfunc (post *Post) IsThread() bool {\n\treturn post.parentID == 0\n}\n\nfunc (post *Post) GetPostID() PostID {\n\treturn post.id\n}\n\nfunc (post *Post) AddReply(creator std.Address, body string) *Post {\n\tboard := post.board\n\tpid := board.incGetPostID()\n\tpidkey := postIDKey(pid)\n\treply := newPost(board, pid, creator, \"\", body, post.threadID, post.id, 0)\n\tpost.replies.Set(pidkey, reply)\n\tif post.threadID == post.id {\n\t\tpost.repliesAll.Set(pidkey, reply)\n\t} else {\n\t\tthread := board.GetThread(post.threadID)\n\t\tthread.repliesAll.Set(pidkey, reply)\n\t}\n\treturn reply\n}\n\nfunc (post *Post) Update(title string, body string) {\n\tpost.title = title\n\tpost.body = body\n\tpost.updatedAt = time.Now()\n}\n\nfunc (thread *Post) GetReply(pid PostID) *Post {\n\tpidkey := postIDKey(pid)\n\treplyI, ok := thread.repliesAll.Get(pidkey)\n\tif !ok {\n\t\treturn nil\n\t} else {\n\t\treturn replyI.(*Post)\n\t}\n}\n\nfunc (post *Post) AddRepostTo(creator std.Address, title, body string, dst *Board) *Post {\n\tif !post.IsThread() {\n\t\tpanic(\"cannot repost non-thread post\")\n\t}\n\tpid := dst.incGetPostID()\n\tpidkey := postIDKey(pid)\n\trepost := newPost(dst, pid, creator, title, body, pid, post.id, post.board.id)\n\tdst.threads.Set(pidkey, repost)\n\tif !dst.IsPrivate() {\n\t\tbidkey := boardIDKey(dst.id)\n\t\tpost.reposts.Set(bidkey, pid)\n\t}\n\treturn repost\n}\n\nfunc (thread *Post) DeletePost(pid PostID) {\n\tif thread.id == pid {\n\t\tpanic(\"should not happen\")\n\t}\n\tpidkey := postIDKey(pid)\n\tpostI, removed := thread.repliesAll.Remove(pidkey)\n\tif !removed {\n\t\tpanic(\"post not found in thread\")\n\t}\n\tpost := postI.(*Post)\n\tif post.parentID != thread.id {\n\t\tparent := thread.GetReply(post.parentID)\n\t\tparent.replies.Remove(pidkey)\n\t} else {\n\t\tthread.replies.Remove(pidkey)\n\t}\n}\n\nfunc (post *Post) HasPermission(addr std.Address, perm Permission) bool {\n\tif post.creator == addr {\n\t\tswitch perm {\n\t\tcase EditPermission:\n\t\t\treturn true\n\t\tcase DeletePermission:\n\t\t\treturn true\n\t\tdefault:\n\t\t\treturn false\n\t\t}\n\t}\n\t// post notes inherit permissions of the board.\n\treturn post.board.HasPermission(addr, perm)\n}\n\nfunc (post *Post) GetSummary() string {\n\treturn summaryOf(post.body, 80)\n}\n\nfunc (post *Post) GetURL() string {\n\tif post.IsThread() {\n\t\treturn post.board.GetURLFromThreadAndReplyID(\n\t\t\tpost.id, 0)\n\t} else {\n\t\treturn post.board.GetURLFromThreadAndReplyID(\n\t\t\tpost.threadID, post.id)\n\t}\n}\n\nfunc (post *Post) GetReplyFormURL() string {\n\treturn \"/r/demo/boards?help\u0026__func=CreateReply\" +\n\t\t\"\u0026bid=\" + post.board.id.String() +\n\t\t\"\u0026threadid=\" + post.threadID.String() +\n\t\t\"\u0026postid=\" + post.id.String() +\n\t\t\"\u0026body.type=textarea\"\n}\n\nfunc (post *Post) GetDeleteFormURL() string {\n\treturn \"/r/demo/boards?help\u0026__func=DeletePost\" +\n\t\t\"\u0026bid=\" + post.board.id.String() +\n\t\t\"\u0026threadid=\" + post.threadID.String() +\n\t\t\"\u0026postid=\" + post.id.String()\n}\n\nfunc (post *Post) RenderSummary() string {\n\tstr := \"\"\n\tif post.title != \"\" {\n\t\tstr += \"## [\" + summaryOf(post.title, 80) + \"](\" + post.GetURL() + \")\\n\"\n\t\tstr += \"\\n\"\n\t}\n\tstr += post.GetSummary() + \"\\n\"\n\tstr += \"\\\\- \" + displayAddressMD(post.creator) + \",\"\n\tstr += \" [\" + post.createdAt.Format(\"2006-01-02 3:04pm MST\") + \"](\" + post.GetURL() + \")\"\n\tstr += \" \\\\[[x](\" + post.GetDeleteFormURL() + \")]\"\n\tstr += \" (\" + strconv.Itoa(post.replies.Size()) + \" replies)\" + \"\\n\"\n\treturn str\n}\n\nfunc (post *Post) RenderPost(indent string, levels int) string {\n\tif post == nil {\n\t\treturn \"nil post\"\n\t}\n\tstr := \"\"\n\tif post.title != \"\" {\n\t\tstr += indent + \"# \" + post.title + \"\\n\"\n\t\tstr += indent + \"\\n\"\n\t}\n\tstr += indentBody(indent, post.body) + \"\\n\" // TODO: indent body lines.\n\tstr += indent + \"\\\\- \" + displayAddressMD(post.creator) + \", \"\n\tstr += \"[\" + post.createdAt.Format(\"2006-01-02 3:04pm (MST)\") + \"](\" + post.GetURL() + \")\"\n\tstr += \" \\\\[[reply](\" + post.GetReplyFormURL() + \")]\"\n\tstr += \" \\\\[[x](\" + post.GetDeleteFormURL() + \")]\\n\"\n\tif levels \u003e 0 {\n\t\tif post.replies.Size() \u003e 0 {\n\t\t\tpost.replies.Iterate(\"\", \"\", func(n *avl.Tree) bool {\n\t\t\t\tstr += indent + \"\\n\"\n\t\t\t\tstr += n.Value().(*Post).RenderPost(indent+\"\u003e \", levels-1)\n\t\t\t\treturn false\n\t\t\t})\n\t\t}\n\t} else {\n\t\tif post.replies.Size() \u003e 0 {\n\t\t\tstr += indent + \"\\n\"\n\t\t\tstr += indent + \"_[see all \" + strconv.Itoa(post.replies.Size()) + \" replies](\" + post.GetURL() + \")_\\n\"\n\t\t}\n\t}\n\treturn str\n}\n\n// render reply and link to context thread\nfunc (post *Post) RenderInner() string {\n\tif post.IsThread() {\n\t\tpanic(\"unexpected thread\")\n\t}\n\tthreadID := post.threadID\n\t// replyID := post.id\n\tparentID := post.parentID\n\tstr := \"\"\n\tstr += \"_[see thread](\" + post.board.GetURLFromThreadAndReplyID(\n\t\tthreadID, 0) + \")_\\n\\n\"\n\tthread := post.board.GetThread(post.threadID)\n\tvar parent *Post\n\tif thread.id == parentID {\n\t\tparent = thread\n\t} else {\n\t\tparent = thread.GetReply(parentID)\n\t}\n\tstr += parent.RenderPost(\"\", 0)\n\tstr += \"\\n\"\n\tstr += post.RenderPost(\"\u003e \", 5)\n\treturn str\n}\n"},{"Name":"public.gno","Body":"package boards\n\nimport (\n\t\"std\"\n\t\"strconv\"\n)\n\n//----------------------------------------\n// Public facing functions\n\nfunc GetBoardIDFromName(name string) (BoardID, bool) {\n\tboardI, exists := gBoardsByName.Get(name)\n\tif !exists {\n\t\treturn 0, false\n\t}\n\treturn boardI.(*Board).id, true\n}\n\nfunc CreateBoard(name string) BoardID {\n\tstd.AssertOriginCall()\n\tbid := incGetBoardID()\n\tcaller := std.GetOrigCaller()\n\tif usernameOf(caller) == \"\" {\n\t\tpanic(\"unauthorized\")\n\t}\n\turl := \"/r/demo/boards:\" + name\n\tboard := newBoard(bid, url, name, caller)\n\tbidkey := boardIDKey(bid)\n\tgBoards.Set(bidkey, board)\n\tgBoardsByName.Set(name, board)\n\treturn board.id\n}\n\nfunc checkAnonFee() bool {\n\tsent := std.GetOrigSend()\n\tanonFeeCoin := std.Coin{\"ugnot\", int64(gDefaultAnonFee)}\n\tif len(sent) == 1 \u0026\u0026 sent[0].IsGTE(anonFeeCoin) {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc CreateThread(bid BoardID, title string, body string) PostID {\n\tstd.AssertOriginCall()\n\tcaller := std.GetOrigCaller()\n\tif usernameOf(caller) == \"\" {\n\t\tif !checkAnonFee() {\n\t\t\tpanic(\"please register, otherwise minimum fee \" + strconv.Itoa(gDefaultAnonFee) + \" is required if anonymous\")\n\t\t}\n\t}\n\tboard := getBoard(bid)\n\tif board == nil {\n\t\tpanic(\"board not exist\")\n\t}\n\tthread := board.AddThread(caller, title, body)\n\treturn thread.id\n}\n\nfunc CreateReply(bid BoardID, threadid, postid PostID, body string) PostID {\n\tstd.AssertOriginCall()\n\tcaller := std.GetOrigCaller()\n\tif usernameOf(caller) == \"\" {\n\t\tif !checkAnonFee() {\n\t\t\tpanic(\"please register, otherwise minimum fee \" + strconv.Itoa(gDefaultAnonFee) + \" is required if anonymous\")\n\t\t}\n\t}\n\tboard := getBoard(bid)\n\tif board == nil {\n\t\tpanic(\"board not exist\")\n\t}\n\tthread := board.GetThread(threadid)\n\tif thread == nil {\n\t\tpanic(\"thread not exist\")\n\t}\n\tif postid == threadid {\n\t\treply := thread.AddReply(caller, body)\n\t\treturn reply.id\n\t} else {\n\t\tpost := thread.GetReply(postid)\n\t\treply := post.AddReply(caller, body)\n\t\treturn reply.id\n\t}\n}\n\n// If dstBoard is private, does not ping back.\n// If board specified by bid is private, panics.\nfunc CreateRepost(bid BoardID, postid PostID, title string, body string, dstBoardID BoardID) PostID {\n\tstd.AssertOriginCall()\n\tcaller := std.GetOrigCaller()\n\tif usernameOf(caller) == \"\" {\n\t\t// TODO: allow with gDefaultAnonFee payment.\n\t\tif !checkAnonFee() {\n\t\t\tpanic(\"please register, otherwise minimum fee \" + strconv.Itoa(gDefaultAnonFee) + \" is required if anonymous\")\n\t\t}\n\t}\n\tboard := getBoard(bid)\n\tif board == nil {\n\t\tpanic(\"src board not exist\")\n\t}\n\tif board.IsPrivate() {\n\t\tpanic(\"cannot repost from a private board\")\n\t}\n\tdst := getBoard(dstBoardID)\n\tif dst == nil {\n\t\tpanic(\"dst board not exist\")\n\t}\n\tthread := board.GetThread(postid)\n\tif thread == nil {\n\t\tpanic(\"thread not exist\")\n\t}\n\trepost := thread.AddRepostTo(caller, title, body, dst)\n\treturn repost.id\n}\n\nfunc DeletePost(bid BoardID, threadid, postid PostID, reason string) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetOrigCaller()\n\tboard := getBoard(bid)\n\tif board == nil {\n\t\tpanic(\"board not exist\")\n\t}\n\tthread := board.GetThread(threadid)\n\tif thread == nil {\n\t\tpanic(\"thread not exist\")\n\t}\n\tif postid == threadid {\n\t\t// delete thread\n\t\tif !thread.HasPermission(caller, DeletePermission) {\n\t\t\tpanic(\"unauthorized\")\n\t\t}\n\t\tboard.DeleteThread(threadid)\n\t} else {\n\t\t// delete thread's post\n\t\tpost := thread.GetReply(postid)\n\t\tif post == nil {\n\t\t\tpanic(\"post not exist\")\n\t\t}\n\t\tif !post.HasPermission(caller, DeletePermission) {\n\t\t\tpanic(\"unauthorized\")\n\t\t}\n\t\tthread.DeletePost(postid)\n\t}\n}\n\nfunc EditPost(bid BoardID, threadid, postid PostID, title, body string) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetOrigCaller()\n\tboard := getBoard(bid)\n\tif board == nil {\n\t\tpanic(\"board not exist\")\n\t}\n\tthread := board.GetThread(threadid)\n\tif thread == nil {\n\t\tpanic(\"thread not exist\")\n\t}\n\tif postid == threadid {\n\t\t// edit thread\n\t\tif !thread.HasPermission(caller, EditPermission) {\n\t\t\tpanic(\"unauthorized\")\n\t\t}\n\t\tthread.Update(title, body)\n\t} else {\n\t\t// edit thread's post\n\t\tpost := thread.GetReply(postid)\n\t\tif post == nil {\n\t\t\tpanic(\"post not exist\")\n\t\t}\n\t\tif !post.HasPermission(caller, EditPermission) {\n\t\t\tpanic(\"unauthorized\")\n\t\t}\n\t\tpost.Update(title, body)\n\t}\n}\n"},{"Name":"render.gno","Body":"package boards\n\nimport (\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n//----------------------------------------\n// Render functions\n\nfunc RenderBoard(bid BoardID) string {\n\tboard := getBoard(bid)\n\tif board == nil {\n\t\treturn \"missing board\"\n\t}\n\treturn board.RenderBoard()\n}\n\nfunc Render(path string) string {\n\tif path == \"\" {\n\t\tstr := \"These are all the boards of this realm:\\n\\n\"\n\t\tgBoards.Iterate(\"\", \"\", func(n *avl.Tree) bool {\n\t\t\tboard := n.Value().(*Board)\n\t\t\tstr += \" * [\" + board.url + \"](\" + board.url + \")\\n\"\n\t\t\treturn false\n\t\t})\n\t\treturn str\n\t}\n\tparts := strings.Split(path, \"/\")\n\tif len(parts) == 1 {\n\t\t// /r/demo/boards:BOARD_NAME\n\t\tname := parts[0]\n\t\tboardI, exists := gBoardsByName.Get(name)\n\t\tif !exists {\n\t\t\treturn \"board does not exist: \" + name\n\t\t}\n\t\treturn boardI.(*Board).RenderBoard()\n\t} else if len(parts) == 2 {\n\t\t// /r/demo/boards:BOARD_NAME/THREAD_ID\n\t\tname := parts[0]\n\t\tboardI, exists := gBoardsByName.Get(name)\n\t\tif !exists {\n\t\t\treturn \"board does not exist: \" + name\n\t\t}\n\t\tpid, err := strconv.Atoi(parts[1])\n\t\tif err != nil {\n\t\t\treturn \"invalid thread id: \" + parts[1]\n\t\t}\n\t\tboard := boardI.(*Board)\n\t\tthread := board.GetThread(PostID(pid))\n\t\tif thread == nil {\n\t\t\treturn \"thread does not exist with id: \" + parts[1]\n\t\t}\n\t\treturn thread.RenderPost(\"\", 5)\n\t} else if len(parts) == 3 {\n\t\t// /r/demo/boards:BOARD_NAME/THREAD_ID/REPLY_ID\n\t\tname := parts[0]\n\t\tboardI, exists := gBoardsByName.Get(name)\n\t\tif !exists {\n\t\t\treturn \"board does not exist: \" + name\n\t\t}\n\t\tpid, err := strconv.Atoi(parts[1])\n\t\tif err != nil {\n\t\t\treturn \"invalid thread id: \" + parts[1]\n\t\t}\n\t\tboard := boardI.(*Board)\n\t\tthread := board.GetThread(PostID(pid))\n\t\tif thread == nil {\n\t\t\treturn \"thread does not exist with id: \" + parts[1]\n\t\t}\n\t\trid, err := strconv.Atoi(parts[2])\n\t\tif err != nil {\n\t\t\treturn \"invalid reply id: \" + parts[2]\n\t\t}\n\t\treply := thread.GetReply(PostID(rid))\n\t\tif reply == nil {\n\t\t\treturn \"reply does not exist with id: \" + parts[2]\n\t\t}\n\t\treturn reply.RenderInner()\n\t} else {\n\t\treturn \"unrecognized path \" + path\n\t}\n}\n"},{"Name":"role.gno","Body":"package boards\n\ntype Permission string\n\nconst (\n\tDeletePermission Permission = \"role:delete\"\n\tEditPermission   Permission = \"role:edit\"\n)\n"},{"Name":"z_0_a_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\nimport (\n\t\"gno.land/r/demo/boards\"\n)\n\nvar bid boards.BoardID\n\nfunc init() {\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid := boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\tboards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Error:\n// unauthorized\n"},{"Name":"z_0_b_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 199000000ugnot\n\nimport (\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar bid boards.BoardID\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\tbid = boards.CreateBoard(\"test_board\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Error:\n// payment must not be less than 200000000\n"},{"Name":"z_0_c_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar bid boards.BoardID\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\tboards.CreateThread(1, \"First Post (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Error:\n// board not exist\n"},{"Name":"z_0_d_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar bid boards.BoardID\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateReply(bid, 0, 0, \"Reply of the second post\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Error:\n// thread not exist\n"},{"Name":"z_0_e_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar bid boards.BoardID\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\tboards.CreateReply(bid, 0, 0, \"Reply of the second post\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Error:\n// board not exist\n"},{"Name":"z_0_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar bid boards.BoardID\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid := boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\tboards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Output:\n// \\[[post](/r/demo/boards?help\u0026__func=CreateThread\u0026bid=1\u0026body.type=textarea)]\n//\n// ----------------------------------------\n// ## [First Post (title)](/r/demo/boards:test_board/1)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm UTC](/r/demo/boards:test_board/1) \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)] (0 replies)\n//\n// ----------------------------------------\n// ## [Second Post (title)](/r/demo/boards:test_board/2)\n//\n// Body of the second post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm UTC](/r/demo/boards:test_board/2) \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=2)] (1 replies)\n"},{"Name":"z_10_a_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\t// boardId 2 not exist\n\tboards.DeletePost(2, pid, pid, \"\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// board not exist\n"},{"Name":"z_10_b_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\t// pid of 2 not exist\n\tboards.DeletePost(bid, 2, 2, \"\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// thread not exist\n"},{"Name":"z_10_c_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n\trid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n\trid = boards.CreateReply(bid, pid, pid, \"First reply of the First post\\n\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\tboards.DeletePost(bid, pid, rid, \"\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n//\n// \u003e First reply of the First post\n// \u003e\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=2)]\n//\n// ----------------------------------------------------\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n"},{"Name":"z_10_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\tboards.DeletePost(bid, pid, pid, \"\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n//\n// ----------------------------------------------------\n// thread does not exist with id: 1\n"},{"Name":"z_11_a_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\t// board 2 not exist\n\tboards.EditPost(2, pid, pid, \"Edited: First Post in (title)\", \"Edited: Body of the first post. (body)\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// board not exist\n"},{"Name":"z_11_b_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\t// thread 2 not exist\n\tboards.EditPost(bid, 2, pid, \"Edited: First Post in (title)\", \"Edited: Body of the first post. (body)\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// thread not exist\n"},{"Name":"z_11_c_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\t// post 2 not exist\n\tboards.EditPost(bid, pid, 2, \"Edited: First Post in (title)\", \"Edited: Body of the first post. (body)\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// post not exist\n"},{"Name":"z_11_d_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n\trid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n\trid = boards.CreateReply(bid, pid, pid, \"First reply of the First post\\n\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\tboards.EditPost(bid, pid, rid, \"\", \"Edited: First reply of the First post\\n\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n//\n// \u003e First reply of the First post\n// \u003e\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=2)]\n//\n// ----------------------------------------------------\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n//\n// \u003e Edited: First reply of the First post\n// \u003e\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=2)]\n"},{"Name":"z_11_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tpid = boards.CreateThread(bid, \"First Post in (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n\tboards.EditPost(bid, pid, pid, \"Edited: First Post in (title)\", \"Edited: Body of the first post. (body)\")\n\tprintln(\"----------------------------------------------------\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n//\n// ----------------------------------------------------\n// # Edited: First Post in (title)\n//\n// Edited: Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n"},{"Name":"z_1_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar board *boards.Board\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\t_ = boards.CreateBoard(\"test_board_1\")\n\t_ = boards.CreateBoard(\"test_board_2\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"\"))\n}\n\n// Output:\n// These are all the boards of this realm:\n//\n//  * [/r/demo/boards:test_board_1](/r/demo/boards:test_board_1)\n//  * [/r/demo/boards:test_board_2](/r/demo/boards:test_board_2)\n"},{"Name":"z_2_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid = boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\tboards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # Second Post (title)\n//\n// Body of the second post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=2)]\n//\n// \u003e Reply of the second post\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/3) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=3\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=3)]\n"},{"Name":"z_3_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid = boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n}\n\nfunc main() {\n\trid := boards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n\tprintln(rid)\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// 3\n// # Second Post (title)\n//\n// Body of the second post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=2)]\n//\n// \u003e Reply of the second post\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/3) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=3\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=3)]\n"},{"Name":"z_4_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid = boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\trid := boards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n\tprintln(rid)\n}\n\nfunc main() {\n\trid2 := boards.CreateReply(bid, pid, pid, \"Second reply of the second post\")\n\tprintln(rid2)\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// 3\n// 4\n// # Second Post (title)\n//\n// Body of the second post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=2)]\n//\n// \u003e Reply of the second post\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/3) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=3\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=3)]\n//\n// \u003e Second reply of the second post\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/4) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=4\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=4)]\n\n// Realm:\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/boards\"]\n// u[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:100]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"0000000003\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/r/demo/boards.Post\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/r/demo/boards.Post\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Escaped\": true,\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:101\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:100\",\n//         \"ModTime\": \"108\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:108\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:109]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"0000000004\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/r/demo/boards.Post\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/r/demo/boards.Post\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Escaped\": true,\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:109\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:108\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:108]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"0000000004\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"b0e1bb401a1e4392dc4aa8353e35364905be64af\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:100\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"a14457b34570e396c59208d49f40e1cc23b80a11\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:109\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:108\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:95\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:111]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:111\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:112]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:112\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:113]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:113\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:114]={\n//     \"Fields\": [\n//         {\n//             \"N\": \"AAAAgJSeXbo=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"65536\"\n//             }\n//         },\n//         {\n//             \"N\": \"AbSNdvQQIhE=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"1024\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"time.Location\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"336074805fc853987abe6f7fe3ad97a6a6f3077a:2\"\n//                 },\n//                 \"Index\": \"188\",\n//                 \"TV\": null\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:114\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:115]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"65536\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"1024\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"time.Location\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:115\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/r/demo/boards.Board\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/r/demo/boards.Board\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Escaped\": true,\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:81\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"N\": \"BAAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"gno.land/r/demo/boards.PostID\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"std.Address\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"g1arjyc64rpthwn8zhxtzjvearm5scy43y7vm985\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"Second reply of the second post\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"9adae740a66b6f3d0066d3ddf478290286fd8a6e\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:111\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"630649048eb057bc03298c019417120984ad62b7\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:112\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"691da6b946b1873fba7f8dcf100e3e9d280e0759\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:113\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"gno.land/r/demo/boards.PostID\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"gno.land/r/demo/boards.PostID\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"gno.land/r/demo/boards.BoardID\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"time.Time\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.RefValue\",\n//                 \"Hash\": \"91a60131fc119b8a406c4be71e1e991e37ca522b\",\n//                 \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:114\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"time.Time\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.RefValue\",\n//                 \"Hash\": \"39aedff3aa8d8246df681ff0f576f8ac31cb5d55\",\n//                 \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:115\"\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110\",\n//         \"IsEscaped\": true,\n//         \"ModTime\": \"0\",\n//         \"RefCount\": \"2\"\n//     }\n// }\n// u[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:107]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"0000000003\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/r/demo/boards.Post\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/r/demo/boards.Post\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Escaped\": true,\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:101\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:107\",\n//         \"ModTime\": \"116\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:116\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:117]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"0000000004\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/r/demo/boards.Post\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/r/demo/boards.Post\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Escaped\": true,\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:110\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:117\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:116\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:116]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"0000000004\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"625e87966cb6643c1ad5ccd0a9ee1b0e3fe767fb\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:107\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"280f673fa84e1981a3138849f782b5dd87fbfd09\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:117\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:116\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:96\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// u[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:81]={\n//     \"Fields\": [\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"gno.land/r/demo/boards.BoardID\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"/r/demo/boards:test_board\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"test_board\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"std.Address\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"g1arjyc64rpthwn8zhxtzjvearm5scy43y7vm985\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"ecc6212ef0cb96a4785bb34427a7d0ee7f4c8400\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:82\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"N\": \"BAAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"65536\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.RefType\",\n//                 \"ID\": \"time.Time\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.RefValue\",\n//                 \"Hash\": \"7e9fd9bb5e90a06c7751585cd80f23aedddde25b\",\n//                 \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:83\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.MutTree\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:81\",\n//         \"IsEscaped\": true,\n//         \"ModTime\": \"107\",\n//         \"RefCount\": \"6\"\n//     }\n// }\n// u[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:95]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"1a1636b4c1593d1694512b57780449f80c14d92f\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:108\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:95\",\n//         \"ModTime\": \"107\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:94\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// u[f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:96]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Tree\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"4df019c20a64842ebe5ae2cf1aed14cc7799588d\",\n//                         \"ObjectID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:116\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:96\",\n//         \"ModTime\": \"107\",\n//         \"OwnerID\": \"f6dbf411da22e67d74cd7ddba6a76cd7e14a4822:94\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// switchrealm[\"gno.land/r/demo/boards\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/users\"]\n// switchrealm[\"gno.land/r/demo/boards\"]\n// switchrealm[\"gno.land/r/boards_test\"]\n"},{"Name":"z_5_b_filetest.gno","Body":"package main\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/testutils\"\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nconst admin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\")\n\nfunc main() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\t// create board via registered user\n\tbid := boards.CreateBoard(\"test_board\")\n\n\t// create post via anon user\n\ttest2 := testutils.TestAddress(\"test2\")\n\tstd.TestSetOrigCaller(test2)\n\tstd.TestSetOrigSend(std.Coins{{\"ugnot\", 9000000}}, nil)\n\n\tpid := boards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// please register, otherwise minimum fee 100000000 is required if anonymous\n"},{"Name":"z_5_c_filetest.gno","Body":"package main\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/testutils\"\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nconst admin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\")\n\nfunc main() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\t// create board via registered user\n\tbid := boards.CreateBoard(\"test_board\")\n\n\t// create post via anon user\n\ttest2 := testutils.TestAddress(\"test2\")\n\tstd.TestSetOrigCaller(test2)\n\tstd.TestSetOrigSend(std.Coins{{\"ugnot\", 101000000}}, nil)\n\n\tpid := boards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tboards.CreateReply(bid, pid, pid, \"Reply of the first post\")\n\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # First Post (title)\n//\n// Body of the first post. (body)\n// \\- [g1w3jhxapjta047h6lta047h6lta047h6laqcyu4](/r/users:g1w3jhxapjta047h6lta047h6lta047h6laqcyu4), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)]\n//\n// \u003e Reply of the first post\n// \u003e \\- [g1w3jhxapjta047h6lta047h6lta047h6laqcyu4](/r/users:g1w3jhxapjta047h6lta047h6lta047h6laqcyu4), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/1/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=1\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=2)]\n"},{"Name":"z_5_d_filetest.gno","Body":"package main\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/testutils\"\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nconst admin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\")\n\nfunc main() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\t// create board via registered user\n\tbid := boards.CreateBoard(\"test_board\")\n\tpid := boards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\n\t// create reply via anon user\n\ttest2 := testutils.TestAddress(\"test2\")\n\tstd.TestSetOrigCaller(test2)\n\tstd.TestSetOrigSend(std.Coins{{\"ugnot\", 9000000}}, nil)\n\tboards.CreateReply(bid, pid, pid, \"Reply of the first post\")\n\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Error:\n// please register, otherwise minimum fee 100000000 is required if anonymous\n"},{"Name":"z_5_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid = boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\trid := boards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n}\n\nfunc main() {\n\trid2 := boards.CreateReply(bid, pid, pid, \"Second reply of the second post\\n\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # Second Post (title)\n//\n// Body of the second post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=2)]\n//\n// \u003e Reply of the second post\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/3) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=3\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=3)]\n//\n// \u003e Second reply of the second post\n// \u003e\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/4) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=4\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=4)]\n"},{"Name":"z_6_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n\trid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid = boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\trid = boards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n}\n\nfunc main() {\n\tboards.CreateReply(bid, pid, pid, \"Second reply of the second post\\n\")\n\tboards.CreateReply(bid, pid, rid, \"First reply of the first reply\\n\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # Second Post (title)\n//\n// Body of the second post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=2\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=2)]\n//\n// \u003e Reply of the second post\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/3) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=3\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=3)]\n// \u003e\n// \u003e \u003e First reply of the first reply\n// \u003e \u003e\n// \u003e \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/5) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=5\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=5)]\n//\n// \u003e Second reply of the second post\n// \u003e\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/4) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=4\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=4)]\n"},{"Name":"z_7_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nfunc init() {\n\t// register\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\t// create board and post\n\tbid := boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n}\n\nfunc main() {\n\tprintln(boards.Render(\"test_board\"))\n}\n\n// Output:\n// \\[[post](/r/demo/boards?help\u0026__func=CreateThread\u0026bid=1\u0026body.type=textarea)]\n//\n// ----------------------------------------\n// ## [First Post (title)](/r/demo/boards:test_board/1)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm UTC](/r/demo/boards:test_board/1) \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=1\u0026postid=1)] (0 replies)\n"},{"Name":"z_8_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 2000000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbid boards.BoardID\n\tpid boards.PostID\n\trid boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tbid = boards.CreateBoard(\"test_board\")\n\tboards.CreateThread(bid, \"First Post (title)\", \"Body of the first post. (body)\")\n\tpid = boards.CreateThread(bid, \"Second Post (title)\", \"Body of the second post. (body)\")\n\trid = boards.CreateReply(bid, pid, pid, \"Reply of the second post\")\n}\n\nfunc main() {\n\tboards.CreateReply(bid, pid, pid, \"Second reply of the second post\\n\")\n\trid2 := boards.CreateReply(bid, pid, rid, \"First reply of the first reply\\n\")\n\tprintln(boards.Render(\"test_board/\" + strconv.Itoa(int(pid)) + \"/\" + strconv.Itoa(int(rid2))))\n}\n\n// Output:\n// _[see thread](/r/demo/boards:test_board/2)_\n//\n// Reply of the second post\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/3) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=3\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=3)]\n//\n// _[see all 1 replies](/r/demo/boards:test_board/2/3)_\n//\n// \u003e First reply of the first reply\n// \u003e\n// \u003e \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:test_board/2/5) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=1\u0026threadid=2\u0026postid=5\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=1\u0026threadid=2\u0026postid=5)]\n"},{"Name":"z_9_a_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar dstBoard boards.BoardID\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tdstBoard = boards.CreateBoard(\"dst_board\")\n\n\tboards.CreateRepost(0, 0, \"First Post in (title)\", \"Body of the first post. (body)\", dstBoard)\n}\n\nfunc main() {\n}\n\n// Error:\n// src board not exist\n"},{"Name":"z_9_b_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tsrcBoard boards.BoardID\n\tpid      boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tsrcBoard = boards.CreateBoard(\"first_board\")\n\tpid = boards.CreateThread(srcBoard, \"First Post in (title)\", \"Body of the first post. (body)\")\n\n\tboards.CreateRepost(srcBoard, pid, \"First Post in (title)\", \"Body of the first post. (body)\", 0)\n}\n\nfunc main() {\n}\n\n// Error:\n// dst board not exist\n"},{"Name":"z_9_filetest.gno","Body":"// PKGPATH: gno.land/r/boards_test\npackage boards_test\n\n// SEND: 200000000ugnot\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/r/demo/boards\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tfirstBoard  boards.BoardID\n\tsecondBoard boards.BoardID\n\tpid         boards.PostID\n)\n\nfunc init() {\n\tusers.Register(\"\", \"gnouser\", \"my profile\")\n\n\tfirstBoard = boards.CreateBoard(\"first_board\")\n\tsecondBoard = boards.CreateBoard(\"second_board\")\n\tpid = boards.CreateThread(firstBoard, \"First Post in (title)\", \"Body of the first post. (body)\")\n\n\tboards.CreateRepost(firstBoard, pid, \"First Post in (title)\", \"Body of the first post. (body)\", secondBoard)\n}\n\nfunc main() {\n\tprintln(boards.Render(\"second_board/\" + strconv.Itoa(int(pid))))\n}\n\n// Output:\n// # First Post in (title)\n//\n// Body of the first post. (body)\n// \\- [@gnouser](/r/users:gnouser), [2009-02-13 11:31pm (UTC)](/r/demo/boards:second_board/1/1) \\[[reply](/r/demo/boards?help\u0026__func=CreateReply\u0026bid=2\u0026threadid=1\u0026postid=1\u0026body.type=textarea)] \\[[x](/r/demo/boards?help\u0026__func=DeletePost\u0026bid=2\u0026threadid=1\u0026postid=1)]\n"}]},"deposit":"100ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiTPFM7EjFSP3X5Vs/A4ArLVnscpqadoPU4Yz3UTSYzu"},"signature":"H+j37dMPzMDmk9fimqzoTXRq5pJmPH2ERQGGkuJmxLF8Qc1IGUSJbVk4jQvqJc82zhF2n5mbUO15HK+89rQJ0w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gv3rpmd0wrm8jrprgmy9adt6nckgsnnqae9mae","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"wE9QufDcURp4YPt4St115+oF5Y6Ud5sVUZTxvlcC72EfpQS5WVLYCCKMGb3qFuZax253vxzs0MApNhMkueGiBw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hzs4mzxjq6mlukjz39sfl4x27sqzrm4rckj6u0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","gndz1812",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/Upd/g+rpy7H0iE2UsT2zS62ID9+njZdZbHLQ8xRusI"},"signature":"OngfaGGD8FcAHnBueXNug5YMYHPjTN9eiV5BdpBghRgT4/O7aSZcFyUzNdB6KplCwSsasiOVyaTzaYv4JU/Olg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1z006zf52gvcu3v9uptpwrl6zcncrrgdphznp29","send":"200gnot","pkg_path":"gno.land/r/users","func":"Register","args":["","gouegd","Hi I'm gouegd from Aotearoa"]}],"fee":{"gas_wanted":"50000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6h2lRg2JeOgopsWP7x3JRJYMdnLy5EPhE73kHytXneW"},"signature":"v6ccLGaKz+Mtjhe8Ssji7hYSmK1fvKZzhxW1U1tbw+kxW9hMRc2vg/Ll8xlwkqhpcBdYEAJ1vAwBJZ85hk7MOQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1z006zf52gvcu3v9uptpwrl6zcncrrgdphznp29","send":"200000000ugnot","pkg_path":"gno.land/r/users","func":"Register","args":["","gouegd","Hi I'm gouegd from Aotearoa"]}],"fee":{"gas_wanted":"50000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6h2lRg2JeOgopsWP7x3JRJYMdnLy5EPhE73kHytXneW"},"signature":"PLiP8ItkO9JAuwDn/RWuJQ0GSlLlKgiYh7XYTbKdga4CQoAlDkT8E+ZfLIEIEJSdXavpfn0EkmyxpDE5/pDsLQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1k54agl4wn68mkwpkhv4vmjhsfyycxj34mm2pjl","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"7fTm7c1uD1ccqVAmfOrbX/XwdXIPJL/7jO+vp6wghRETf/wgpWR5I2ik29LCSgKW65En32eezcxvoHW4oXw9Ow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k8p7x84gjcy0recfkzvfgljxyyxdlgu02y6w50","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["gno_demo_test2"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6sURdF72+imW+kYkFKR0lhx1XEPwHnXhsbvPzBpctfC"},"signature":"CumFFdzCaI/7+PGgU6wSy/qSIZCxltuGN0bfunwORSkAfuNv31na8PfMXGBefs0anEwsQeMOpUspfjsVhrzjsQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1z006zf52gvcu3v9uptpwrl6zcncrrgdphznp29","send":"200000000ugnot","pkg_path":"gno.land/r/users","func":"Register","args":["gouegd","Hi I'm gouegd from Aotearoa"]}],"fee":{"gas_wanted":"50000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6h2lRg2JeOgopsWP7x3JRJYMdnLy5EPhE73kHytXneW"},"signature":"eaMd52rxS/iz2pMrdGnCp3rRidvrohcV8NZFk6gwDaF8VhZB89PiVvxCs/nZmu3qVuv3LfU65U3iPEkgN1PdwQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/boards","func":"GetBoardIDFromName","args":["superluck"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"1vuTR3kGFDmWvmxpA7DbYp/qZ7cKTX0qTzGK+ytmkbFytYbC9krM84y83zDZqkW/M1K0NUYImBDThq6/jE1mRw=="}],"memo":"12313"}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g13pu676gmeg7f5uf26skuasvrkkacr6665jau8r","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"2KfoSY40pKucizPNVSz05m4LS0FkVZdsUvubB66symdupWTkDLGdh/xijLNc0sybYcDVqve7f1Nl2lWE84sfVw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13pu676gmeg7f5uf26skuasvrkkacr6665jau8r","to_address":"g13pu676gmeg7f5uf26skuasvrkkacr6665jau8r","amount":"1000000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au29lyTgTux8EdrkBCbcuJAzDa22iaqr3ZL6x8/DUPu4"},"signature":"DyyUXLiRpOU3J6gWeRye97Jgn/hHy26olQSvovksBokxLmKg6xDz1pYLq3mLFVrVjnRZBvP+wFoC6SyAKLXZxQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13pu676gmeg7f5uf26skuasvrkkacr6665jau8r","to_address":"g13pu676gmeg7f5uf26skuasvrkkacr6665jau8r","amount":"100000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au29lyTgTux8EdrkBCbcuJAzDa22iaqr3ZL6x8/DUPu4"},"signature":"+sStmMq4SiJPPqkO/9Trj3Tm4CwDheIkifs6Vluid0ANOUzVWPaKvdLtN9AkCzhF+dBan1NLj9O7qIaWIoum9Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13pu676gmeg7f5uf26skuasvrkkacr6665jau8r","to_address":"g164ghm34h4v856lngqwhp43zxv3q0d5r248svgl","amount":"100000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au29lyTgTux8EdrkBCbcuJAzDa22iaqr3ZL6x8/DUPu4"},"signature":"DWHAZyQ/C41yH3hQ6UTpmGbdUSPuYNOgr1UNbrAv2TMl/5VRFXoxujzFwwxs39MAEsfbvjdzLYFbsJ+y83hKNg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13pu676gmeg7f5uf26skuasvrkkacr6665jau8r","to_address":"g164ghm34h4v856lngqwhp43zxv3q0d5r248svgl","amount":"100000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au29lyTgTux8EdrkBCbcuJAzDa22iaqr3ZL6x8/DUPu4"},"signature":"dfierf3EHYQoSfqIV1zaCGnPq+GcDaUF9UO+/LjfWToXjc5oOM25LUi66LlclAb2PnYwoLl62/yTnLnmF3WD/g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g164ghm34h4v856lngqwhp43zxv3q0d5r248svgl","to_address":"g13pu676gmeg7f5uf26skuasvrkkacr6665jau8r","amount":"100000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlcpTJIm6+VDRrSEkOTBN+eqUpDXq+1XLYPzOMMAGYTm"},"signature":"O98iKGYnDyko8pOQC/Zvly1uPK7rpzlTvM8YtDUmbO8QGiEwkCSAU1aJECkoiwMzrNBYKPgQSkdnX/KHoTP4Tg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13pu676gmeg7f5uf26skuasvrkkacr6665jau8r","to_address":"g13pu676gmeg7f5uf26skuasvrkkacr6665jau8r","amount":"999000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au29lyTgTux8EdrkBCbcuJAzDa22iaqr3ZL6x8/DUPu4"},"signature":"WWwV21ZA//OEkCpH6/QHrvSuieOk3k8r8xRsgrg/AuMTRYzlp13vo/Ch2knzZODnAG+aBAAZ33iTPV4/XFRQDw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13pu676gmeg7f5uf26skuasvrkkacr6665jau8r","to_address":"g13pu676gmeg7f5uf26skuasvrkkacr6665jau8r","amount":"666000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au29lyTgTux8EdrkBCbcuJAzDa22iaqr3ZL6x8/DUPu4"},"signature":"zrDSh+zUxeVjjuheghfqGDg/bFRC1WHHODmfEjgT2B80EoxSeX93mQZ8ByFIQcJvECjzsdJ2/NUl8eEsFMVrgg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13pu676gmeg7f5uf26skuasvrkkacr6665jau8r","to_address":"g13pu676gmeg7f5uf26skuasvrkkacr6665jau8r","amount":"99000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au29lyTgTux8EdrkBCbcuJAzDa22iaqr3ZL6x8/DUPu4"},"signature":"Gr4seX6Yu39OUfdpOyIbrotQ8hDGWF9GrfS23ZPua80/vpm98lqSffffRDmLybOC/jvuYq0iKKEXrlvpC0MnTQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13pu676gmeg7f5uf26skuasvrkkacr6665jau8r","to_address":"g13pu676gmeg7f5uf26skuasvrkkacr6665jau8r","amount":"99000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au29lyTgTux8EdrkBCbcuJAzDa22iaqr3ZL6x8/DUPu4"},"signature":"aWpVJ1pbLwGSfG81O7m0JpwDrk+mEGl6FS83GQNqE48RSzEne4JpNKJHK/YV+lFcIdakg08bJ4Dq0t5zBnPRKg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13pu676gmeg7f5uf26skuasvrkkacr6665jau8r","to_address":"g13pu676gmeg7f5uf26skuasvrkkacr6665jau8r","amount":"99000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au29lyTgTux8EdrkBCbcuJAzDa22iaqr3ZL6x8/DUPu4"},"signature":"NHEawNaBbu5AcldEDA4gyC/43s8Rrp1uTg0JCogHCqkSU/6LZ1eSEjLej/hECv8LsM42LnwGok2yhLVWK8Z8jA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13pu676gmeg7f5uf26skuasvrkkacr6665jau8r","to_address":"g164ghm34h4v856lngqwhp43zxv3q0d5r248svgl","amount":"99000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au29lyTgTux8EdrkBCbcuJAzDa22iaqr3ZL6x8/DUPu4"},"signature":"bMH5Xw3BiPlir+W3XqIJU0HVWeBw1M+GTj/we3W8gABabfU5DEJJvyfEQuVvzrrTt1itLFwc6fI5NZbozzvq1Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13pu676gmeg7f5uf26skuasvrkkacr6665jau8r","to_address":"g164ghm34h4v856lngqwhp43zxv3q0d5r248svgl","amount":"99000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au29lyTgTux8EdrkBCbcuJAzDa22iaqr3ZL6x8/DUPu4"},"signature":"m5GD99xMfDhTRH8qxJAg0m4Qml7mXg2XxKa4k4lVoCArXMBu8daseKtHJSbi0UxO05G+5nF77IpiALfwkey/qw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13pu676gmeg7f5uf26skuasvrkkacr6665jau8r","to_address":"g164ghm34h4v856lngqwhp43zxv3q0d5r248svgl","amount":"99000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au29lyTgTux8EdrkBCbcuJAzDa22iaqr3ZL6x8/DUPu4"},"signature":"4SA2eIDnV9D1zWbSROte0IbOWT77EzWqLA+vdg1zENcVuFA170bg44QnmZKaEXTMqlqY/1hPVqJyYKQv6Fusxw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13pu676gmeg7f5uf26skuasvrkkacr6665jau8r","to_address":"g164ghm34h4v856lngqwhp43zxv3q0d5r248svgl","amount":"99000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au29lyTgTux8EdrkBCbcuJAzDa22iaqr3ZL6x8/DUPu4"},"signature":"egKkUkUC3+7Hc3C94NAM9SZiThUcVEs3VucW9bu/DG1O2TmRy7PKvm520GqUoA3spB7eeLOSkqCfsH2BskbAlQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g164ghm34h4v856lngqwhp43zxv3q0d5r248svgl","to_address":"g13pu676gmeg7f5uf26skuasvrkkacr6665jau8r","amount":"33000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlcpTJIm6+VDRrSEkOTBN+eqUpDXq+1XLYPzOMMAGYTm"},"signature":"5A4aEhU2QXak0uvnphibxZz9WoJP3cxRhN1Mwpo9kx14L0H7NBztE2glFpeAc2VF8sjOjhSVy7/rTKvRBxOXfw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g164ghm34h4v856lngqwhp43zxv3q0d5r248svgl","to_address":"g13pu676gmeg7f5uf26skuasvrkkacr6665jau8r","amount":"55000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlcpTJIm6+VDRrSEkOTBN+eqUpDXq+1XLYPzOMMAGYTm"},"signature":"oEj9hnO2PExr+VITj6a3JvwfZvLWwD6jP/B/EuSfscx2mVw1JbXH8kUtd35ny2to+/m4Wt+HQv/lskSPfR8xSQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13pu676gmeg7f5uf26skuasvrkkacr6665jau8r","to_address":"g164ghm34h4v856lngqwhp43zxv3q0d5r248svgl","amount":"99000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au29lyTgTux8EdrkBCbcuJAzDa22iaqr3ZL6x8/DUPu4"},"signature":"brxF5Hryj1J7VzG4+FUrpPRNp6Jiq49CP+oOEnQ+qfwgJsyzhgk75TRW7uMZNWmh/YZK1JZ4gSCXdYAHApzvyw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13pu676gmeg7f5uf26skuasvrkkacr6665jau8r","to_address":"g164ghm34h4v856lngqwhp43zxv3q0d5r248svgl","amount":"99000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au29lyTgTux8EdrkBCbcuJAzDa22iaqr3ZL6x8/DUPu4"},"signature":"8jaZDrYsbY5qKVuScOk/PpABG4XzCFu1kx7VnjL6QPFYBffHogyM/7Q479sU3k/BhC3tULXMvnkpP/ro//jwGA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13pu676gmeg7f5uf26skuasvrkkacr6665jau8r","to_address":"g13pu676gmeg7f5uf26skuasvrkkacr6665jau8r","amount":"99000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au29lyTgTux8EdrkBCbcuJAzDa22iaqr3ZL6x8/DUPu4"},"signature":"F29+m0qbZYGI6Bw73t43n9QsCfcksUOW/Ak6m9Cr3FAkLpO5M7clgB1Pw8KRocQSi7dB6JxmxQQMburFy5ylCg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13pu676gmeg7f5uf26skuasvrkkacr6665jau8r","to_address":"g13pu676gmeg7f5uf26skuasvrkkacr6665jau8r","amount":"100000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au29lyTgTux8EdrkBCbcuJAzDa22iaqr3ZL6x8/DUPu4"},"signature":"Ly1BThhOxinPaHxhLAfku+pyEZHMhrfPBmDT/sXOBWU48LLKrgZhlM1Nvot4MHw1PK5rZnwRDvETZRkmcxiUzA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1z006zf52gvcu3v9uptpwrl6zcncrrgdphznp29","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["gouegd","Hi I'm gouegd from Aotearoa"]}],"fee":{"gas_wanted":"50000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6h2lRg2JeOgopsWP7x3JRJYMdnLy5EPhE73kHytXneW"},"signature":"JCK++v7NcRHYrtr9i8+I1Wv65y4Ehr7LkPgFsMnkOrJlVRkQ/2Zt476xGlKWTw9mtN3PLsqoXJ0AaItfFDUFZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1z006zf52gvcu3v9uptpwrl6zcncrrgdphznp29","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["gouegd","Hi I'm gouegd from Aotearoa"]}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6h2lRg2JeOgopsWP7x3JRJYMdnLy5EPhE73kHytXneW"},"signature":"KDtvMt1HV7DnHO2oHkc8Hc7MKZ04YLPCpFy+pH8NbUlaFXvuAgUWMBj9HjY4C3q8h6QU/IClPowE4IJmOuVFjg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1z006zf52gvcu3v9uptpwrl6zcncrrgdphznp29","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["gouegd","Hi I'm gouegd from Aotearoa"]}],"fee":{"gas_wanted":"150000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6h2lRg2JeOgopsWP7x3JRJYMdnLy5EPhE73kHytXneW"},"signature":"bdZcjIYhbX/hjEbWNrLyjYb+F1N0lAUYaIWFxvlfliAQBo/ce6KkBrCa68no8ZrLY3I5RZI6xAhzlYcYwTaZjw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1z006zf52gvcu3v9uptpwrl6zcncrrgdphznp29","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","gouegd","Hi I'm gouegd from Aotearoa"]}],"fee":{"gas_wanted":"150000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6h2lRg2JeOgopsWP7x3JRJYMdnLy5EPhE73kHytXneW"},"signature":"/ZwtfYaBlS/vMwo0p0zGt1rsz+y2Y+UOafQOv7j/U+5/qjo50z8ttUxTBwk3imy2f0jKMLdKiGFc0Vn68pWlrQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vdtcqtcjcrrm0cl2lefh7la2an47gewra2y9ga","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"jNrEC0lazHYIH6lIQ2FOkgdAxEkOfbN4GUg92T4fUWVumGjcvzdrFk88hvLlwdyzTTyJYbNRhfhnl/cr3QsRyw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1tuv36zg7frzwk5wenp7jpuw6tdgkdqrpmgzh7l","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"0E+e2RZlJxgXh7F3ZGRMZ6p1IM0TV/MV0X1po8/+1sQSZG4i2x+bZeN/2J1s3ej0DO5h9Cew55Dojb9smmC9fg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tuv36zg7frzwk5wenp7jpuw6tdgkdqrpmgzh7l","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","Cake4Stake",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwDzKIKjMfSGCxKaQkjDkjmDhIqk513LZ2tT8pnWilz9"},"signature":"5jB7QE+7Advg+IfzgvzRkq5mWlLETX4H+ZIrVhxjMQRnehHGSNEC+2MM67hHBdM3qdEtdP/mH2xv+dbmZo8eaQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tuv36zg7frzwk5wenp7jpuw6tdgkdqrpmgzh7l","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","cake4stake",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwDzKIKjMfSGCxKaQkjDkjmDhIqk513LZ2tT8pnWilz9"},"signature":"h8RSJOqXp+g+2Uy4PR0ajG2hfoTBJy2XRD1UPF5pzyVr076whyKO03kHVJ6NM5NGj3hEzZFS0xVnjj15v9EVCg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1etn2jn8w69qa3mlk7s2alnm9s9pm7r50v8ryut","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"PCZ5GfqDZT6Pd1W6D4/jymSboNU1qL8UUiQPU4fp6nQDK0EUfM7U6fJ9JE6R3g2/AE0rY9apSKN3ucfjm7sNBQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1etn2jn8w69qa3mlk7s2alnm9s9pm7r50v8ryut","amount":"300000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"V0WyP/Cmc8Fi9WbRo6Y9zdXqvkYe1h/VKwCy+6kAAu92oCzS/E4n/m9/jUP9uKl+mDyNmguMU30FUvl0Wj10PA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g185zs5sadpzjk32jqfkhr45r9e90y4tc3dx5tc9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"B+c4bZHp7mrYbr8srhTK0lXPLNylgFv5RJfDamGcn/VG/x8Rujl0Q/eQGwxB3HfzjGlpf0OYy0Wu8KfdOiofsw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ankv4k5luvu9rgla37ayjcw9a85nrh77yuezgy","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Kx3AY+N/D+9n9N7Qk1ygL+aCHdmnaEz1TN1BgGh6Zso+87TWHMrrOQY+EmqCMpd738PU7omzgwzeZmqw4hz2oQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g173pnswk7sp0cvqvxfepenr5ujuj02llzca03xv","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"r2i5bzTXUEQTmOcggpUgQdOiquB1tCyQG2FPurLNs6Y55AbwTVlx+W+A+nRxyz73qIDvw17tWSSaLhgS1rvwwg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g173pnswk7sp0cvqvxfepenr5ujuj02llzca03xv","send":"200000000ugnot","pkg_path":"gno.land/r/users","func":"Register","args":["","georgyio",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8Tn8bUiaJEvxoxjjzV7Slo9hQaWyDDVy4iccohGBDbU"},"signature":"enOsnDYp8lDaxrkiXMNFo5m1YN270HTCDbpF1Ne0VJYd5Z2os39hbvF8VNs5HjCAdfB93dAhQuqLxOxltklZHA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g173pnswk7sp0cvqvxfepenr5ujuj02llzca03xv","send":"200000000ugnot","pkg_path":"gno.land/r/users","func":"Register","args":["","georgyio",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8Tn8bUiaJEvxoxjjzV7Slo9hQaWyDDVy4iccohGBDbU"},"signature":"SzqUyTNS8I8rSN9Jzb/tX2iq8wj+BDLaynfk5C0xRx5wXsNiLiqMd9QKfxCNm7wFlPDpq9Iyx9/1AXDxJODQLA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g173pnswk7sp0cvqvxfepenr5ujuj02llzca03xv","send":"100000000ugnot","pkg_path":"gno.land/p/demo/users","func":"Register","args":["","georgyio",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8Tn8bUiaJEvxoxjjzV7Slo9hQaWyDDVy4iccohGBDbU"},"signature":"jYf/KXIOTBh5tFILrYEWATjn4tifOEIRYSoIA70d0U0JhFWsC07FIdSRnWPlv+os7ouwi0CQKgRfJ/Lb3ODJAA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g173pnswk7sp0cvqvxfepenr5ujuj02llzca03xv","send":"100000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","georgyio",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8Tn8bUiaJEvxoxjjzV7Slo9hQaWyDDVy4iccohGBDbU"},"signature":"mY9vp1ji5ASxTmtoz91Vt+D6JkOwd51QviZkMYpMNSky3vOFiYn/+b1OxbcxvOl//7yOODQUSV4KryrrSafriw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g173pnswk7sp0cvqvxfepenr5ujuj02llzca03xv","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","georgyio",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8Tn8bUiaJEvxoxjjzV7Slo9hQaWyDDVy4iccohGBDbU"},"signature":"/t5tWEOVnjjRTlV/7cHtz1eq46uTjjwioCW8zqdrGOA6wvy0zHXkkAOZ2INNlIE+BRRNszQh+dH1M1uCjNSc0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g173pnswk7sp0cvqvxfepenr5ujuj02llzca03xv","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["georgyio"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8Tn8bUiaJEvxoxjjzV7Slo9hQaWyDDVy4iccohGBDbU"},"signature":"tZj394uohQe0gY/9iAr64rEb+qFSy+7sOa9H5ewtqSkuFsAfYflElJR77Kus4ZkzswXgyLYnoC2DCwWvgpaEyQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g173pnswk7sp0cvqvxfepenr5ujuj02llzca03xv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["53","TEST3","Completed DONE :)"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8Tn8bUiaJEvxoxjjzV7Slo9hQaWyDDVy4iccohGBDbU"},"signature":"nZFU7O1S9nSQcfT9VxeoJxmV+NOnfl6xcjpHaLxCsy04FQrH+0Lpbgh64wvscN2up6o7p3o2a3Fe4JSeraTIrQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g173pnswk7sp0cvqvxfepenr5ujuj02llzca03xv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["53","Twitter thread","https://twitter.com/Kriptauser15/status/1564232689435262979?s=20\u0026t=72jc-7vpmd_dcKmZ8uCVzQ"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8Tn8bUiaJEvxoxjjzV7Slo9hQaWyDDVy4iccohGBDbU"},"signature":"o/QwDZX51vWD/HavD4fFvqwlUQmnW9zVWh5gXJACiuRK/gzk5i07T8RXIV+ugAllsIIhaZ7re+cMbfkX6M2DtQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g173pnswk7sp0cvqvxfepenr5ujuj02llzca03xv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1","Something or Nothing","What would you choose?"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8Tn8bUiaJEvxoxjjzV7Slo9hQaWyDDVy4iccohGBDbU"},"signature":"GdvrEGVv6YEDjnkuu1Gam80reMXMwNHvKC9GJr91yjZ8K4wLScUQ3hjoW0QZ/Mjicc4QT2XPhPC1XQW+qc256A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g173pnswk7sp0cvqvxfepenr5ujuj02llzca03xv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1","4","4","Why @_gnoland\n1. Started with a fork of Tendermint scalable performant L1 #blockchain as a significant amplification and addition to the #CosmosEcosystem.\n2. http://Gno.Land created by Jae Kwon that is co-Founder of @cosmos and #tendermint.\n3. Built in its own language #Gnolang destined to write Realms (Smart Contracts on Gno).\n4. Sustainable dual token Model: fee and governance token."]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8Tn8bUiaJEvxoxjjzV7Slo9hQaWyDDVy4iccohGBDbU"},"signature":"OY85iY3yGPDyTtd1hUNgeNIS9O9JxU9GfRcY2Uqp8vE/e4QWRySfFd1vwd6N9EjvJrhwBt+Ma67W6LlHbEOeNw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"200000000000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"NMixe8Y/QDWioDebjAB2WyI+fsyCl+xT/v9itq4jCC0VMliCbJBd52AgMofMEMqlZ7v0Z6E+SN+dC1AGnZAuMg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","to_address":"g1flk9z2qmkgqeyrl654r3639rzgz7xczdfwwqw7","amount":"777000000000000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"xoyuid4epzh+tDqAMaQBk5Xg5VieE+x7lLXnj2r6NwI6xM+VpIKf2dz0R3XObD/bLmftDEaRiJUDd2oRhBUDWw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"200001663009984ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"k48JZj9NJzW+sZFVzE7yjQM51T0JI1lf2/3JinLBRmkezYyVVSiVMLtSR0NxKupv+VG5ttav9zVSLJKnvhKnBg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArADVPfUBrZVmlqmZWPWucRTe9gkJ9wJFyTszJoU5Ebi"},"signature":"XN2Y+ABk2Jzws6YmRfz90MJ8Y3h4ukg1vVOElmVfTYE0zyB4+gTzt7CKEXtX3xewk96dRuKLC12yO2UH8x2xWA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","to_address":"g1kcew58nf3qesa5uylnsquuat77mje3ykvf4krs","amount":"200002106009976ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArADVPfUBrZVmlqmZWPWucRTe9gkJ9wJFyTszJoU5Ebi"},"signature":"ovQg5cRbziWb3UCJda3S3ELtyLtPdo8z3xmajeGCm9szPmxoBjaLH8nqTzCnXrGqvy+M7jDZXD5sQi+IZ+LCwA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"999999999ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"6XwBAbmW1akC+fsb5EdhXBLxCEJH5KeEoaQQJFqQB5Qh7UVIQjCCdRZ2h2bPNNuo3C/nOmNOw+myVYzsHnvHLg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"999999998ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"x/kBVD4H5H3LolwbKp/IFSUxE3q/WXpP7Ex5xUVSpIgHcw9AnvvMyfadbQJGZBSRmIHHizYpPLISO88jZWqXkw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"999999997ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"XZxo9TZfBxYaIZlDFfN5sbaMqDA6jkgw6u3/Pgfee3lLHsRv9kW59b82wt+4rRe9V8F0JCnSKJ6Q2mdib9YAzg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"999999996ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"fb42Ay4vlTPvigE+4lv/GpJhefipM/czvUBPi92ALXpGV/wCATgx+fUK4upWb2qr1wpJYvgjj3jvCkOB/XsjTQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"999999995ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"q0yipNtuxYF2Y5Iai5CIhB9U+wl1j0V74FtEEvrRtyR9H2H3u6O0+6nEKT6uUHIxaoHJpYKanwLDHWPgVi1aCg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"wPFIwkbTNAX3zTkKQN66VcqBFKCwZvSGJSvPkiWYv/ALHn3cetccY1X0c9U8Ut4Gu0/8kEcGAP3GueBdH8bRbg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"8000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"6rWjr0lvH6Tfnv7XF98Q8gGUFmhJPC5UW3QENMTN9/pjiFq1mzEFEYp+EkPJKxkvsDikNm6spdQmjwAhcMZWqA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"8100000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArADVPfUBrZVmlqmZWPWucRTe9gkJ9wJFyTszJoU5Ebi"},"signature":"2Qdo1jqNg0CU/onUSowmxkp/I4a/Vuf2jKwUuB7q2m5QzcYtKM36S9rRAvQzGHwel6x9G7ZexrPEQtHFb+thCg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"8200000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArADVPfUBrZVmlqmZWPWucRTe9gkJ9wJFyTszJoU5Ebi"},"signature":"72Awn0zYYjqtmFHxpMlPbfCJg93vD/4HYjPcYUxaCMwdQxnLZwiE61nvpX6/xbRdK6WRk6/e+qBNaUTFc10Pgw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"8300000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArADVPfUBrZVmlqmZWPWucRTe9gkJ9wJFyTszJoU5Ebi"},"signature":"woXCk8EY9DxpsKZEG4jCFd1dEEUZDFLmq8MvS6wVFhEPSjUf7CT2sOG30nzQIZh8EKWiuA2qaBji5ZaFNP9Mig=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"8400000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArADVPfUBrZVmlqmZWPWucRTe9gkJ9wJFyTszJoU5Ebi"},"signature":"bBLpBW7vxA23ztQPGzEU4CqvNPsjJzhZlQd88Yn6MCY8uVv0eFOjk68qhI9MAwacV3lTWh7Rm0mv5AnzjpAFDg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"8500000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArADVPfUBrZVmlqmZWPWucRTe9gkJ9wJFyTszJoU5Ebi"},"signature":"zG4axOleoAvGt5ApAZ2dNmM270sZX/VITXZdw80Q3oJSIMePUZjs35PGUroG0hb8HErea8iOQWgGrfJ5IQAq8g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"8600000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArADVPfUBrZVmlqmZWPWucRTe9gkJ9wJFyTszJoU5Ebi"},"signature":"l/8AJ9cfgCSXk/YE7QIzZ5FDQDqHG7DCTap99GhGLmJG64iZmjjgtkfwZ1eoLdyPIXLGIj0EZwBd14uEMxGCuQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"8700000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArADVPfUBrZVmlqmZWPWucRTe9gkJ9wJFyTszJoU5Ebi"},"signature":"3IMtBG5OpMCSy8AnDRIaqWefh6DDoy+L4yMNsynvWkcfJiGzGDOa804spYYBv3M/dH5Yfh1bJR0WoP+G9SvGjQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"8999993ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArADVPfUBrZVmlqmZWPWucRTe9gkJ9wJFyTszJoU5Ebi"},"signature":"3x0ab25WP44maOTMLMYQdcTVsPufYaVapTm3eIHvfaFrtdxIQti9Xwt1UMX91kQZlrvzWq3aB4Y8rR0mYAfGxA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"999992ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArADVPfUBrZVmlqmZWPWucRTe9gkJ9wJFyTszJoU5Ebi"},"signature":"FJhYjiDq9ElJQw+NA3r/K1LHJyhgpKkqAyeAzAJ0J71pt4ScNeV+ghJxU5KvfCTTcfWx4u0MQIqlkdcVDoAWPA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1100000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArADVPfUBrZVmlqmZWPWucRTe9gkJ9wJFyTszJoU5Ebi"},"signature":"A2Uwvik+lIaQ/Rjwn6cPCazsf/YdVx8OzgqbulLIjUshy/NdPb29k6ZfhE1QtI0mdzGEbW2/OWGchyR9Pah9zg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"899998ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArADVPfUBrZVmlqmZWPWucRTe9gkJ9wJFyTszJoU5Ebi"},"signature":"40A1vtn5A+o+STgD+jRbso8T8V/BTcBgvVWxYR6yU1M07QHrOypAYLaKttIy8B3gEaMqlLS0fBZoAOclz5ca3Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"993999982ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"q14eCsqlXc2q/WTv49osS818hZxbS+xynsTs+ebuXBobrKLfjGqtGW7DCSlcznjguw0arLF9Nj4Yhs5lmEpJOw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"993999981ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"A75qSJDj/5WYUEJGv+gVMHGjfuL9q1zlMyVMomSQ7g4Sg+HnQ7Xafi+36iiP2/6vQm7doCLr5pgXBpHH1OzwmQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"993999980ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"COgBI5ANeuBVtWrSFBkjJ1TwZIhM41nLPF+l2nH7AtkokqT3wKR0ozX0a1Wzq6qIIahDwYjNAGKeE9fAJmHRaw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1kcew58nf3qesa5uylnsquuat77mje3ykvf4krs","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"200002106009975ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aho1BX/O7aXAfbjhpSjH/nlWJ3l1CizxFYNpoRgFldIb"},"signature":"GETAGVzfxPaOtqxz20m+22rAXqICagHIOQYk2Z2PQElX9DdMHU4PS3UTyrHMMAbKXOpPx/torpfYi9tlGrKlTg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","to_address":"g1hxecqgcv4f0p7s7ap6t20vaeeuvqgvl9qtchr6","amount":"123000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"bj8BwtBYvXfWcQnP2zo+rSjt5ezQG4zvc/vXwH+MwmspXpBAWpS+K3d19LcL7kkga/n5WU+pglMBZWDPj6qJ7Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1t4du52tfdfcnsrhlkfxhulr3r2a8a965zs07tx","amount":"100003100009954ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"2DmvHik5aKqKN0Xud6WPt3ZNGHmGvi5t3Exqwn2V41I3JBQrOIvtCyjgvKvpheJoyrpK2eWIKF7gRzpWFV5Ubw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1kcew58nf3qesa5uylnsquuat77mje3ykvf4krs","amount":"99999999999999ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"ptjK6EyRy11KgenL285PJAsyjQp/u8ZpHCuJmoG8x64fwbfYwhAzYJ7IF1aD7pRbUCNe2Pj4ccpZyTkOG6ST8A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1t4du52tfdfcnsrhlkfxhulr3r2a8a965zs07tx","to_address":"g1ggdxf2sy3h2cujyfkdtv0h0954usy6uy2td3ze","amount":"50003101009952ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoWl1n0gPDWHmsIdghOux9H5dKTvm5LHh/7c9EXMTS0y"},"signature":"JBK9N0jpYMRsGOeL6PS0iEPMTNRNqpVLGugvUooOx+dX7f0O391L66l5Cm3JO6c45XIYrZRa1ijxdO6+NA5apA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ggdxf2sy3h2cujyfkdtv0h0954usy6uy2td3ze","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"10003101000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7AAnm9cENaltZDYVvzIBY0S1sSxrLxZfTyoXm8dEYT3"},"signature":"JTCjVPsV+rkAqn5ZWxq7FTEMyr7/wYEIyMn/B715ji8zeYuUiQPqs4+fLGSvC4QE2En4cl4kpJN56951XJNgPQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1flk9z2qmkgqeyrl654r3639rzgz7xczdfwwqw7","to_address":"g1hxecqgcv4f0p7s7ap6t20vaeeuvqgvl9qtchr6","amount":"123456000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0cN2jM5SaG0tbXUEYYhgUmFIGjdIxzlDeBxpetbIQsa"},"signature":"VFvho0VFRN99MP9YxD04wDfZoRytMTSncNjrZUtohzE4LpC1xH81EnDvNFmUgFUVgzTKtnfnZg0FTGx0bN/g2w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1hxecqgcv4f0p7s7ap6t20vaeeuvqgvl9qtchr6","to_address":"g1hxecqgcv4f0p7s7ap6t20vaeeuvqgvl9qtchr6","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuJxl7LShR2+FGthhNED94mz+IowgGHOGEXtOnrBkqq5"},"signature":"Un+eV6eM4ZNtv3rNXe9Q2qYg0mIJfxgZgxD22PjnBXB/2uiT9YkMVOTDZ1Iaom6lqqxT4fU7ynS77uZA1mK1Qw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1hxecqgcv4f0p7s7ap6t20vaeeuvqgvl9qtchr6","to_address":"g1hxecqgcv4f0p7s7ap6t20vaeeuvqgvl9qtchr6","amount":"22000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuJxl7LShR2+FGthhNED94mz+IowgGHOGEXtOnrBkqq5"},"signature":"1/tMlHfqi3T545r/NMz0srbdPkuOLvRv/NUl7FsyQkNY5GM8fmAxkpCyhT2fAkDa3mEecNv7d4TZEbV01tdnlw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"10003100999999ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"i5pB5joE4NYIfGYk3ky0j3+3n8zPnLo7PFR5jqlvfecpX5AXedeiqJRAp/GDLdQHiGhTSQFmJqk6Wk6io3O9Zw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1t5n7x0lxcx0gasvlmvlrr32puqc50veuyx7uhy","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"RzkyeOKilS9ub8TJcvfic5J2Y3BMYHw9bM8jWqWVBSoy/4aoRY3vhciNDkLDyLTgjiAKnygcEOhYZ9y/4BFoHw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vyjwm2tqqm60swj29kdhr6jf543sevmv4xg8dk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"UCDk/CGSZglwRcGH3/MCjUwfG1Hv/io2HN6pvtGiLUt6t4eyfcikEp480NI7LbdXWdoqfbPA+ZW6FnGxX6pnmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10tu6v3f69pvpzt9kze2lxv6kxkywcfgwlesjdc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["10","Hello","Hello Gnoland"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjyGel3FFRJiW/E4UgfhFGEY0Kw8GMtlK71CwyobBX+F"},"signature":"FWm8M//YCc0bTM+HtjJhH+Z0s7GUrfgrtje+dor9cJoJi972KH3Lq7VUM6VFChb+O8bpdiF1KMNGfgF9HtJiVw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10tu6v3f69pvpzt9kze2lxv6kxkywcfgwlesjdc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["10","Hello","Hello Gnoland"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjyGel3FFRJiW/E4UgfhFGEY0Kw8GMtlK71CwyobBX+F"},"signature":"xvxJY3M1bq6xrN7LzDV675au2qhi0a/EbFRZkH8QqZd0/XTd1tdBZJjQeP1FSMod4Fpr/Syt7LXFXpJTIiQKQA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10tu6v3f69pvpzt9kze2lxv6kxkywcfgwlesjdc","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","android2600",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjyGel3FFRJiW/E4UgfhFGEY0Kw8GMtlK71CwyobBX+F"},"signature":"BgdyIgIudaNMX6wQO7pD7HqgrkYyOnfdWzAIsNEpz20ovdOn7/PZLHIF60cUJB5xtbk4ONopSsewMZkPJV/u0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10tu6v3f69pvpzt9kze2lxv6kxkywcfgwlesjdc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["10","Hello","Hello Gnoland"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjyGel3FFRJiW/E4UgfhFGEY0Kw8GMtlK71CwyobBX+F"},"signature":"jP+Wdwver3Oj3MhhCGl7IaVx2zfBgInzBrBQHAGag00fFs+RW+/O/gTdvWdHPLftG0TV88wTA0U+HluvjYFBig=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"jSLCKAT2XuAnsaF30FfdlgUn7jaewKmOTjokVo4QUvM6nmETwMLHnT4In8uoQTi65lwR/s8KczoqrMoqIEqcLg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","amount":"1222000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"MlCUix/y0L60txBKCG0eTvpN3z/BLcxEtAUrViR/ABtHvix4+y34jyUP7m9zp6/U2LpwjfVVW7RFtJzq78rSOw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1hxecqgcv4f0p7s7ap6t20vaeeuvqgvl9qtchr6","to_address":"g1mjzyk7r49ta4h6ppgv2fedgz5ek6hgyttge9pv","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuJxl7LShR2+FGthhNED94mz+IowgGHOGEXtOnrBkqq5"},"signature":"5nL46kmhDod7lxcsJd+ECE+vgKcIovWwQvHdUhtaTQsfwB55jFFAF1NfNMgdRlMJxppdBaRhl4052r5Q+eJYSQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1hxecqgcv4f0p7s7ap6t20vaeeuvqgvl9qtchr6","to_address":"g1mjzyk7r49ta4h6ppgv2fedgz5ek6hgyttge9pv","amount":"2000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuJxl7LShR2+FGthhNED94mz+IowgGHOGEXtOnrBkqq5"},"signature":"LF+iiv99lHZoHxRd+M+PfZOH2m4LWrysdsFGZpg/NFc9xUtUIKRrWKSRpS6N9YOIbDWtLtmYYtpv1m/L5knMZg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1mjzyk7r49ta4h6ppgv2fedgz5ek6hgyttge9pv","to_address":"g1hxecqgcv4f0p7s7ap6t20vaeeuvqgvl9qtchr6","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwpFZ/Eba2YD0tSPYISodHi2gBBhx/hUg/PPZTt93aq7"},"signature":"DmBtXt4Fey6RAbJ6vnda7vAUxIrkeSmeLpyLoo9uXfUXrwn+BK7NdgOVV4GuYUm0ZTTguKFep3blHW/7rGkk5w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1hxecqgcv4f0p7s7ap6t20vaeeuvqgvl9qtchr6","to_address":"g1464j2nrhnx4qvhe2fd7n0hcwvx7c9u5mlzc89u","amount":"500000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuJxl7LShR2+FGthhNED94mz+IowgGHOGEXtOnrBkqq5"},"signature":"lvr3GXd5nUSN91JoS6MZCDBEcO8+GaZoxlQQPS+tNRQ4j045Sac7E1qbJwcUu5P6n2FUasi9D9uuJ0ftUr7vww=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"MvnDbqOVErQ4p0tobecmD7k64/ovwIf2cIE1KSg4tfh6Jvbs92Fn8W1gpllKzT+20bSb/lO7g2zG90zKeyg9dA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"5000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"MGJJUVd1dXsz8pkoyD4ItZhfhxOyodDvlAhKR2RUoRVBP5LbYSQ4SZv05qiMGafNwr43Fn0OGkYTvN5JjqET/Q=="}],"memo":"test"}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g1una3q2l9qmd6fg6gyele46ct7emumwcrv74508","amount":"6123412ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"OFq91fHjZ21QNWRYwf4qFDN/GiKopC0vBms/zvSwv7hjdA2bnEOpBZgEsf/lND/NqUijA9TQwroMfu5AUhQGJw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g1n98hehcd8nkkvkdeu82k5fzj6ft7eq4gmkk5ce","amount":"8151234ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"Kex05ngBBEC1kL6kc1vaQr2wI3J/wEanjv07Faiota8EFOcyNuAdo0lFay5DuEbaLbRA1rkK8obhktNtDz8fbA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1una3q2l9qmd6fg6gyele46ct7emumwcrv74508","to_address":"g1n98hehcd8nkkvkdeu82k5fzj6ft7eq4gmkk5ce","amount":"6123311ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5LEAlpCxwD34GuaPOfvZsFwBG4LIPKrzqAXDP+kZ/Wb"},"signature":"4SI7UcWx7ApYi2bi4yB7gWj/ewc/wFSslK4UjrpkQuVN4QjoG67IjGoLoqPR07nDHI0ajfPhHuUrWqd9eWuhMQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1n98hehcd8nkkvkdeu82k5fzj6ft7eq4gmkk5ce","to_address":"g1una3q2l9qmd6fg6gyele46ct7emumwcrv74508","amount":"5512312ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aubtu9sjckfdXwgiNeVeyMl1t4vEMsz2XVTdM1Ugb2h/"},"signature":"/TJRpUaW71d3SGszgoAIinmb8Uf/bJ5pf1BvVnzB/elUu+DG9+21ojxLCWYYEdJc2+HoiESxHxLCk44jnH0zJw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1n98hehcd8nkkvkdeu82k5fzj6ft7eq4gmkk5ce","to_address":"g1una3q2l9qmd6fg6gyele46ct7emumwcrv74508","amount":"8762231ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aubtu9sjckfdXwgiNeVeyMl1t4vEMsz2XVTdM1Ugb2h/"},"signature":"4YqSvFtwyzX9QQseJet4LoN8jp4IG9rnLNrlYXHh/BxCm4TYxKAxyfCgRdMrkTYnbVwACLaQKsM3he7zCw0XaA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1uy9j4j9jlf5nvpmqd9vrevuctdw257jdgseh2a","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"aeyu4CXiO7EW05dwhVL8jKzGIaVeFxUj37c0V1DIZ0hinO65BVlzv3G8OZFP3tDZ1OxGEwKzdXPWo6MoYBHGdg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fd478pa2h5cyp8hf0h2uxq0dwcqja5hxsskef2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","biC",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0ul+2Tlp1sNsEFiYVk0OxUMaUqYG6BD6W6hNdk3M4j4"},"signature":"CwrsGBtuMCXsHNDgtYM8QwM+cU7XHWzo3YcI5EvGv9IZ5B6XEMFMzOFd+yjyOStKMOsZpLTDHZUUDKGfa4F6mw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1t4du52tfdfcnsrhlkfxhulr3r2a8a965zs07tx","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoWl1n0gPDWHmsIdghOux9H5dKTvm5LHh/7c9EXMTS0y"},"signature":"CsyfaScAbgfZ1rftLrbCw1gBRTiq7jOl/5J9R6R/lHVAgtB2u8PTqxh+wVZH5iC06VNec7Cg0MK5nfKJK9CENw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1t4du52tfdfcnsrhlkfxhulr3r2a8a965zs07tx","amount":"12000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"O7bQfIWbpc/NyNl6zSpZ88S6HHvVgv6TrN1Fj2/e49Ixtou8r+5kL35pHdBdSTQyYxtDwpEgrnMQemIlB14Qow=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"100000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"behEwGf0cK/UUs+t341T6y5/JAWXx/5JHs1uF5CnFIsMAyjSTp3qb9bJIM4lkBc25MUj6Y9EH1d93rf23ep/Iw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g190828sv8stuwtnjv7z0qfjwpvwrq2lylu5u02m","amount":"123000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"P0CKufLOu8jU5EQdGfHzyqmUATno3pzB2ilMmpy1+uJ950g3mO6Z9ihGNUZmPOdz1arbUEfN5wQ9X77foaR2aA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qv3dqyw46fut94z9t90jka58saw2e7l99nzqtr","to_address":"g1plxd74hnxyjvh309nfcndp53ypvv93yp5rd7dk","amount":"4141251ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3Tw76GV0BAtfeMytcN0YmNQsmhocbe7kMs7sCF8SJVx"},"signature":"uQtDibeZOTxTlMYPD8rxGeYjZuQD60F7bo7tYHw3pB1ef+kz4uekR57ptGw0jMlp/AzTizJAKqS9wuYzqU4TXw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"Zx2I2VbgC2FEuvyTPKaCWzTBGRfdGlGIzEE3BYSi4/kCSn89qljjyuK8+h1UL+yXBSQ4AgJDMC6m3QIEfWG9DA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"NBKIPI+etbV3QYJoBJJa2O+/Px/sMyCxsxkP0LAmW8RLlBhJc6rrSGwoXuh3FTdHgPSLHZWPvtQK8Ws2T4XLZQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"Ns6ovlNg544N+W1EQQDjrWDizDfknwtrBNr+Z9o7HzAXUI8j+swXqv59h3Bd63hwziGfaKujZqKR38//kwunvQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"gcfs++hafMExNoAUT1qc7QortWhmkqg5dFjkfdrascdjvd5mJ8AT5OOBuq03BK/4OFx0a+wTR41gq5LO6ruM0w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"2000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"8qZHjWqqtEDhCBMlQ3Qxvri+YwCYxcbPe52AfGq1N4gxMk8j8rXvyBK9TI//9hQnd+4/nPeVOaznVZJffC8Yyg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"HTJo4jRUwu9xZG3L9tc7T6sl1KjPCO3FQ7eXxx2Q/+EOjRtqcf/LDpoA5VKqbqb2Mrb5JBknLL6tPZjVKdRpUg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"LYw+OcsERo0yTdlGnaX/M9oQ7/hnmyzMB4PJF2xgYqp7VioTLYbaqxE5bCsQnEwD+4LgACoLWK3EUEWzTaV/bQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qgr7980ry7f6rqr9cs6d45y09k5u6dzhjksksn","to_address":"g1qgr7980ry7f6rqr9cs6d45y09k5u6dzhjksksn","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av4vVTR7Zuh26clc3Zw0ReP/XbEXDQXYtHiYne7ObO/W"},"signature":"8s0tlyb+5SLKFcXjLf8Rg6oL+3rFMJ3Eok0EmmXxcqsyQEN6GNgvLdIOffB9scY2CZCZ/NDM21/ECHcpcRcKqA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"PxIg09oqx+ZnA2MWxthtCbjjQtsPVP50aWzIbbDhE8ld+vG+WOtLLN+WHd1oF0OvFveEF+ArJ1lGAfXD2aXK1Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qgr7980ry7f6rqr9cs6d45y09k5u6dzhjksksn","to_address":"g1qgr7980ry7f6rqr9cs6d45y09k5u6dzhjksksn","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av4vVTR7Zuh26clc3Zw0ReP/XbEXDQXYtHiYne7ObO/W"},"signature":"qmaGpVRwUT9+Qiomx8AK6Bz5tyHCzfrtUajmsNHA+G1kJ3A99SiOUpxAzyWTqB6hTdShZwO3ff6LOam5OQ2xMQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"pPmAXJOqu0HViM8+gUfLipZWK8ABIwXgcXCQJNuvtTMMUCmv0W9g/bQEdI6F1jJFcwPmgcxnP++/LQpdwkcOng=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"9IzdWRntvnoN2Ciwh2rw++tzRaP4ym2HoSUZDwjxsK8A8bRhdDTSvpJXLZY/Lz1JcswaeIfyxrZIgRZiS7vgLQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qgr7980ry7f6rqr9cs6d45y09k5u6dzhjksksn","to_address":"g1qgr7980ry7f6rqr9cs6d45y09k5u6dzhjksksn","amount":"2000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av4vVTR7Zuh26clc3Zw0ReP/XbEXDQXYtHiYne7ObO/W"},"signature":"l7/cNic55874mf177tpgqt6aAZ4Bf5NfEmLPRFutHpteoVvIe3tbtfzVn0PvHHaqB9AxpARELtPMPvsHZQ1P6w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","amount":"1ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"JfCQB5cyuTKH6sAa27fP+7Yqt5DBM+tAumHYqdN3VllNdCKwJuCEHYkxqlQAguje5J9h5xpw7MWBkZy7Yfv/EA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g1mdl7sq2t0qwsxr9h43nhjktvdky22fanh7ndcf","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"XIYkLoZzfDdjtLvk216TbQZMPtC/xtpNWVpARsWlxnNGiTcNkANDM/BtWnqFFdp5ljppf1S91C47NZPB/GUYsw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1mdl7sq2t0qwsxr9h43nhjktvdky22fanh7ndcf","to_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","amount":"1099999ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A30E2610dOPyjE5DJN/aFJy4Seyw6xe2WGbzMfrdMz6c"},"signature":"Arik5nrZTxgFVMxaiwHWQ2p8sxTs8BbJtsGcc4CsY+k0yX0Ykc04At/cq7uJldldDUGDS+Ufj11HphPDVI7FBw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g12v70cpesur5ykstcduk5uhvmeurq6x2fshzn8a","to_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","amount":"2000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av7fm4Zz9W6xW1ARoIlh5RiUPYElbK+aVlFQeqOsrP+7"},"signature":"nj3ylxKeqJKfVQ7DQ0xyoCQ8n4Xr/e6KrP3aKa8cHH5k50o9g9GOGGVZi0WQdvrRkWtqGDAgUv1vt2w0dEk9HQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g12v70cpesur5ykstcduk5uhvmeurq6x2fshzn8a","amount":"8000009ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"1r9TqSFX4PPawmjzacVa6PrR+pxKJA/bK/lEZ9A7yWkyuk/egAoZ0kjYng9ZjbGgWBRhDgNV3N4aRVpxhxr8GA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","amount":"8999998ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"MMR7F5NU2K1rR1vBUZF67U46QKobpkaxV75wVmx5q1FBu7/p6QNBmuATJkc/3HaJUB79leiOdHgOtfQyxymAJQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g12v70cpesur5ykstcduk5uhvmeurq6x2fshzn8a","amount":"8000999ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"FAMn78lntmzQwJAFj1RskWknln9SmHgD2G5kYPrW+EtqqoFyMKkNUJUBJCz2/sWaN7H2/XjLyGd+wqXdzoJpMQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","amount":"8494949ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"HZu+e6ttOsh1V49HQLqEgbagU/ekl5cOieQzf2zhzvtz7+GPfPBhXeWN8RR2B/5Xztil7RSXBTna6Y9t/gLZoA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","amount":"8100000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"lolE7GgNyFv6KUSPzzB243WYZAHGVQgCrmTGlhi1WB5a4HT9d2Lkps/7AZ3phnj+yeKvggU05o+sN7gGKbhuew=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","amount":"8000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"ExmxidD/dKipoxd9kA2KPB1Jnab5LIdnkUfSih/XmAsskAB10SIyLWUKZrXAIozJ4A6S6g1OimIIfguWUqYh9w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","amount":"8800000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"aV/Vugholt2L3ZW3lmG2mHZZWuE4M7aXKRyS5zIcGtkH5NYNk7SLy8Mkk1fIndYXTkBD77fA+u/vCsEMu8/Mog=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","amount":"7100000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"HFw+1Sz4aEvyWGYT6cyzxPkDFPxngmqY5p7L+34LHNhT1+2HD59SrdsL+gSFXVLwYRS9bfurvmkNGWXn2Jm63Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","amount":"7300000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"umhtgmi4KlxaHOQGgsxEcQDydFoJLvGrmr3BRMCW3qAsrOPUHCEe3MlMVKk2OWOGwq/+zqoanKOmyupLVP1GwA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","amount":"7700000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"PDy6gaaA3BRvN4xxun02NxvSOehzza22sVnPpXRdijkLdwU/+2TIjNmwtb2QWWGp1Xt5w7JOnS28VD2qj9G3Eg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"+qEE1E7Keh4ZCEaRkkTEnE6aGwcv6q4ErMIxDCvNVYAryrt4BvR/rNv5BBfrUhQA1x2cVtuFMdZR8MZZrXdMFg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g12v70cpesur5ykstcduk5uhvmeurq6x2fshzn8a","amount":"8020000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"B02kApk65xa3hM13YFmlPy608sGxG//ZXn6ysX+xvrZVd65/+bnly8Ic8CQbbS4ozNg2FKR5RZX5CzVbWEQ0UQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g12v70cpesur5ykstcduk5uhvmeurq6x2fshzn8a","amount":"10000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"5LFjGUC9YAvmNJahUAfMogl347OUk9epJOFytJQhJqMd8SEz5tPzubkJ774jHKEGv7+SY0TbE+GsJI4ANR1IQg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g12v70cpesur5ykstcduk5uhvmeurq6x2fshzn8a","to_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","amount":"34000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av7fm4Zz9W6xW1ARoIlh5RiUPYElbK+aVlFQeqOsrP+7"},"signature":"tnO4MRE8CQP4jE0UeNBQesv5OvD8Lg1bi1aYw03+TCdDFzf+l3iU+2ltZkZXFynUFBYySySMaUQ80DvTFoiOgw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","to_address":"g1flk9z2qmkgqeyrl654r3639rzgz7xczdfwwqw7","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"DfZz093EPzLAaAsHbSSRw1950rhuy1fgvyuGNJpxXyA84zsILWwBo+SsQC2eifxYVO9fF+5Lzi9cOMsq1UPxHg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g17y3h56qqau2wnputq5x3208nd0zww7wstmmakq","to_address":"g1vxtqulrhv9ausll7h0kg64zxtarpn9hnytjn5m","amount":"2000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1ovRRIA5ZMhzUrw6E5nt2g315BDcuesrUkaEfSVGeAW"},"signature":"Hedvb6Fl42cI0ukx1boUNOfQ+P9PjFg3ozZ1Wv1OXiISlovnDYQ46kDniSRl3/ObaV4WYPc0JqgSPEGl9WYmpA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g17y3h56qqau2wnputq5x3208nd0zww7wstmmakq","to_address":"g1vxtqulrhv9ausll7h0kg64zxtarpn9hnytjn5m","amount":"13260000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1ovRRIA5ZMhzUrw6E5nt2g315BDcuesrUkaEfSVGeAW"},"signature":"XQT+cJ5P3HhD+z3DXGk5EUkRIsT+PxNQTLLbe3zVv2F5D/fRLrmH84ZyHuyEzV2xn9vb1oCmgHX+RiDLQqkIpA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g19nyjukh2zhew30f7sdeq7vymkf0fyj6yadyq5t","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"/GNUZOncnnaV7EPFZNhKROOK9uzDHb64M4crd7PefhBESoi94tMhR6Y+bSjKHraprN7h9E+kCrklg7eJMcdSnw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"oOjnQu/AwXC79N7AP7DqzH+P6th41UUrhBv3MMTAhLpdlDlv6tWIVjWOGn+snpYi3zsGwxw0fxHFKP8Fm83Q9g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g12v70cpesur5ykstcduk5uhvmeurq6x2fshzn8a","amount":"1000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"x5OGVrkOY+LPvWJwqfk6mFYSefJUPb/K0FRJ5wAJkPomF4KM4m7asaBe5VGCplLsaODzYqECaD7BHDfEG6qQaQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","amount":"10000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"i6KxCneSKCW6n3R5dYHlCEuJ37aWO4shjASHUOoPg3cMGazM5GxFc2EF4wF9zPJ8tOKoD8/b1B0S+aq/Q2L7tw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19nyjukh2zhew30f7sdeq7vymkf0fyj6yadyq5t","to_address":"g1ckddn039khwxzu4v5mc8n34vd9ksaks2l6c3kg","amount":"500000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhmrmnpPm7Nk35W47nLMHtKSLACqEn97Nvrli5pvBzFh"},"signature":"ftc1ZrL1nB5ijYRWU5BiNUIz4C3XcQ4ApQVaPCyRXlVPNqntm8aR1diSt+cOis3DhEW9WcC5u4DuPMTc6NU0fQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","ggg","HI"]},{"@type":"/vm.m_call","caller":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","ghhh","Hello"]},{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"100ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"SWnZ+LrNNbhiWmcH9Id2ZwxhxyITzrIB6JCyP9orAKoXeZHwXeuBx+uDiNv7HUn2IScj2iOIX5OR9B3cne1ozA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"100ugnot"},{"@type":"/vm.m_call","caller":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","ghhh","Hello"]},{"@type":"/vm.m_call","caller":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","ggg","HI"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"NG9Z/Cra8oB7CXGjvJKZCgK64Ftaz7/D6a6owWNs3PUomV07PUJ9apmkefqNxXydr0wVIG1mDWF6nkl8QjzSaQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","amount":"1000000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"35VNjKA70yLeNM/wvAbcSRSA5C8IE9O7KrO2mfWW3UkElMiGk9SvaEJ9oiuCyGzJ8Y9iGoga+8t1jJ+i9HsUiQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"100ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"6pFjS9XVTlRCABmgHm9XoNPVcVDJWqXGki5ucx166SYS4akcZosMXGwigo0gD0Y9FJlpO++Rsw6xkxM2g5IO5Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"200ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"P7oJIF1CZzX0fonxaw78BHps/5cWPk9F8IVQ38fST8JPQ9ClAXg8RMsT3mA459UbAi8TfcsKW8KTyNMCCt0fRg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1s5e62zwkqn7npetrer500d954uy2utmwq60r42","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"200ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsnpfjgZGhgrGlRGVw4gXzS5IWpcOoBNKgDhdIwpQrz8"},"signature":"cN3qcWmDySizNMietsboxuLW7HI8KQuxBrveYmOH9ltke3ALG7iOUcyLpQ1Bk3LY5h14tX8mM+uzHuphfQ0ciQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g12v70cpesur5ykstcduk5uhvmeurq6x2fshzn8a","to_address":"g1ele5uju6u4mut74g6e45mtmyj309j58djj5v3l","amount":"1337677ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av7fm4Zz9W6xW1ARoIlh5RiUPYElbK+aVlFQeqOsrP+7"},"signature":"lH5Wb7xuRq5kFF5cOPJVYvKnLzvFUiVT4lDOMp+TNmwmI1r0det9UcHIiMdt/+Fb0naR5O6pvRnah9xaydJipA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14w5ql2y642yxg4g7skl8cvwrtr79cfmedmrh08","send":"","pkg_path":"gno.land/r/demo/sotatoken1","func":"TotalSupply","args":null}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgX0/1IPm9DG1g6bufBCFwruU9i8bBgqEPKuIcGThX9/"},"signature":"HK+1H0uYCFu/xvNrC8V0WjLU03Vx0cxSqctfFeVBjqYDBYONWr+ScfzbiPFhSh3Hv/Q3h2/q3JvMhVeOfZy3qQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14w5ql2y642yxg4g7skl8cvwrtr79cfmedmrh08","send":"","pkg_path":"gno.land/r/demo/sotatoken1","func":"TotalSupply","args":null}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgX0/1IPm9DG1g6bufBCFwruU9i8bBgqEPKuIcGThX9/"},"signature":"hytTS1sdLDQdpn6lMbLLVWG1IGXaos6KGU1LbQ/cSXwUZ9eNcP5FiYsdWGmj6QbHtfE4bKi3L7+RZxfVQ4zTuw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xnaq7uv2u745lv88ngzvpynvha7lwn8fhpx0vr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"eRFEoqgTvC+WSfD6gRqLewBbiumygAeGGbWMf0pO+s0K9d+md+Wluur3ilBz80gtSKzCM0hzCCNWCa8zPSqftA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xnaq7uv2u745lv88ngzvpynvha7lwn8fhpx0vr","send":"","pkg_path":"gno.land/r/demo/sotatoken1","func":"BalanceOf","args":["g14w5ql2y642yxg4g7skl8cvwrtr79cfmedmrh08"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1Iz8Og4YCCkF7M48l+pQMuAwYLN3FsWTWu8z0CLUkeb"},"signature":"9W/R+TB7+AQ7rSCUA5dkUMbGL6NzBaL8Y4RHj33amfQh5lB5aeHuKA3PhrKM0b9rvQRLcBOxtWHfofIC3OOz2w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1qtnuzc43d9gp0ufhkqpcs7ppg4pyhnrgghfplu","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"kpCrt+4NfjyAPWug4JF2OpKqfGzM6H1StF6lfR6m3zwZ1FSK+MJwVFJsb7pbPE/CjAZBH2qj3pBBIlDFjb9izg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qtfd02nvmtsryz933np372n0v5x845aklgq8ug","to_address":"g1ax0fagz0m09x8j6cwugzrs60lr0skq82dff2gu","amount":"27000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/lSpB3IikgBH3dS9eyA29Y2gW3vIiG4qMWoteAbFDV3"},"signature":"6SXr/GbLYFidrQYbG3miobW8ieg04wxGdyAtjKS2gG1kkgQCh9fBZYPBSzfrM3V+4StEeDdjjVEsJFHdfNnFGA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ax0fagz0m09x8j6cwugzrs60lr0skq82dff2gu","to_address":"g1unp9tqk7qskmgrd4tms6x55m8gearjyd2lgmzk","amount":"26999999ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlFI48hNxljpm1sYn1Lfpg3PphKjKiWCUjdxZHtmC5Qi"},"signature":"O4kniMJwC5lE4aQ0GPdmzesvBGL4ZDZvlDCGs7k7VC5LA3ud0e6I+WVVWn71GOIRwn2lnr/yb8ZSoJ8LqSkgnQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1cu550wrcem8dtq5twusjgh49zke42w4fyn5zmf","to_address":"g1azra3g249jcvw377myqydxqn462kjhee3parjd","amount":"309999999ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtyL5SERwApp52U46NEYERO6zKAizDg1QxHSguyAQrn9"},"signature":"ZsyYEGr/VUlqRxJzV3UyCYgQyrCDmRVBWCWAO6ds/MVUc5rW5ZWSB2yow09gmfBkEBSIvzmSZf/XkuZw1khG0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18hw66hk497tr3sgwdmm8fg5psp6e7echlrqk64","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Qgilsp31L/c7dT+WAOgI5+K4T4OGkz0DiwLXFMeamwYpn9+b/UNFhIBOz9XhT6MYZx+PjhYvrE4M6cxnsteccQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xqw5226mvwst8nfns866he04vkccmhpe4nln0e","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"V1V7BnvAwoVV72C8tWo86QjTl+hzk3ChJglClnWMxQtvp33Zi+uTAWIEmffKnbWsiMwXG0Xoi5R9rEAZwDJ1UQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1r2z22flcfsfmgvrjcs9ymazhjylr5hl83t4emp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"I+uq15n9e+rxmHtxLna+M4++Q664NIjxV/8zSUv7P8ReKLyjjYWUl9mFCt2kKUV9HHX3AXrXmQhE+8BWQ7Claw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1qz4z82l7d404r3m2jw7udpqsygw77qu9u3ty9y","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"C9huXotNT3d52tHKiVzy5SVzSv9g6Me3zm0aGxc3WCw+syc3quGZDZ68PsPwwWEFjD1jMd0V69FOkKAk6JfVgQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1cz2pv5zmky5nd3wtzmfkxkes6d5w3kaar3n5vs","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"0f7M0LM6jwKiisPXoI+HEuepcAIxswsZs9AJ91QnCsYN9IrKwiXs9nEb8g0vd1eEdsjRDe8CjTGXfaKN2DXCvQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1te4hwj3j0xklpa0cejkuumur86gexym5j83tpq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Q2S7MYd4OJ+IvPKMNLcwrxlEb4YYG4bQ6oijbb7eaxUqhbqgl5AD6UH9SloSimDLEx6Cs+jhAoe7YgG6O0OxAg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1sh7p96qzmqvxjer3pge9cfytdplepgegkv3ywt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"m42O/XehhALQTQm4zPjcsBZtz7KfFV4pg6gj8rK5jjVMGaX4s+4MeLQoLaAo6DX/VoKGY+u0Y/pQ3jY8V7WVnw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1sxal5lcnm07sgqfmlcekwtx4fnulanvkxt2nzr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"dcnzBHy/i+VaikLVA4Y1b9z02Y0guCs7pMXfhvoe/7seVAlZ4Z7HtkSpKihEMEliufsVhuYFdx4fBr5ZnwDy9Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1msdzckdkzhvzmv0qnyd4ht2mespvz4c5h4u8ng","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","apollon",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A05SDtx5cQMCTxPIUw2pQn6x6SOnRu5pGiA0UmSL000h"},"signature":"VQKVNkpG6LEcYQJbRqqkwJQdpxRf7y466FMS7PzkVeZgyqJ9w04hnmk7oIN1txGKVMZDyReDPa2kBAKhff9UyA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1msdzckdkzhvzmv0qnyd4ht2mespvz4c5h4u8ng","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["apollon"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A05SDtx5cQMCTxPIUw2pQn6x6SOnRu5pGiA0UmSL000h"},"signature":"m4pdbcl43Om4i8IygBOjICf5pKzO1tP156ILQqtBbCc76dQ5OVXh4wjIv+rP5afZkonatqqqZnKfmPbOouUYfQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1msdzckdkzhvzmv0qnyd4ht2mespvz4c5h4u8ng","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["54","apollon","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A05SDtx5cQMCTxPIUw2pQn6x6SOnRu5pGiA0UmSL000h"},"signature":"p83e6EIJekKF8TKGBcDgU5YJko/0dugHR5si8JqYhlx//sKBeCPgMuLRRer2mOIq6g5HpO3Ls2QLsbV4zdGXJQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1msdzckdkzhvzmv0qnyd4ht2mespvz4c5h4u8ng","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["54","1","1","g1msdzckdkzhvzmv0qnyd4ht2mespvz4c5h4u8ng"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A05SDtx5cQMCTxPIUw2pQn6x6SOnRu5pGiA0UmSL000h"},"signature":"BHHqL3PR7fxpX/SD1b/c2lm1HlnhIr0/bu51vcz9R/gOjA9zAl7xioGjALMLD6u84X7PTgdYpcvDotDTqJZiRw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s058hq9jrdja8tzewpv7q9e6l7h3s8q88ylrz8","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","andixmb",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6Qhn8yeLJI3AxUrnMRgChz+g7rFKFeOEIYMeNbZeG3e"},"signature":"3/sDOzVtYU8w6ERj/wrv44++CTtq/wtQ6wntjf1LPUZQKyM5EjKpbUh8vUbUCplyCEbJb47ybr6cHVp0scz9xg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s058hq9jrdja8tzewpv7q9e6l7h3s8q88ylrz8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["andixmb"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6Qhn8yeLJI3AxUrnMRgChz+g7rFKFeOEIYMeNbZeG3e"},"signature":"10F2sUe8obaYFBJZKtEDumOHxH2Se8Zf21Z5fCbaKChlrMG+4t0nR6SddM4lGfjE/H/ePz7eTVEGB39/1AkKKw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s058hq9jrdja8tzewpv7q9e6l7h3s8q88ylrz8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["55","andixmb","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6Qhn8yeLJI3AxUrnMRgChz+g7rFKFeOEIYMeNbZeG3e"},"signature":"vuF9qy0K9nyh3rzE9pYx7jRtrOBuxQvHjH8FKmWr1yoFTJar9WbME0S33WgT4U5uo3dIFvSHHi8/pZrnhkYdGg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s058hq9jrdja8tzewpv7q9e6l7h3s8q88ylrz8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["55","1","1","g1s058hq9jrdja8tzewpv7q9e6l7h3s8q88ylrz8"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6Qhn8yeLJI3AxUrnMRgChz+g7rFKFeOEIYMeNbZeG3e"},"signature":"mdAlZwaZHVHEeZ482ZERd4KRQpE++VKccMw5sxmh9dQsJGqX1Atw743Ctsdb7xqumAX7/QsVuVjLFVo6f0NJ6g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ae4nsxhv6cjpvu8n8xuqd3xs7h05vm9hza4fqd","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","Blockpower",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2ZJhpwUK56fWMO2GsOU27jGB2BB9rGNBs8PdGfm1cCu"},"signature":"3KFAEC/LmdktHgio8wLiNUaIjro75OdCHBrjMLZzhqc1Q8V22NNPgkgJy4LyUbw/AlRuXzfoYSBvnJNbMjknQg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ae4nsxhv6cjpvu8n8xuqd3xs7h05vm9hza4fqd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["Blockpower"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2ZJhpwUK56fWMO2GsOU27jGB2BB9rGNBs8PdGfm1cCu"},"signature":"LX+/iNWtkFwPYnBVDblIQ3qJmEOBsqoP1RO/HuSTLhNSK5c+FgnDbh7EQB9i5JxdPyzA0UQzVr91fP7qETLpHg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ae4nsxhv6cjpvu8n8xuqd3xs7h05vm9hza4fqd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["0","Blockpower","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2ZJhpwUK56fWMO2GsOU27jGB2BB9rGNBs8PdGfm1cCu"},"signature":"qVSLHWGagvwiFkIhis6LE4dRiiiCS8yye7GA0hgasfI4rpsgeMLntoDxb9NAY+j/MRjfGNetRkKPkDv5BtGthA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ae4nsxhv6cjpvu8n8xuqd3xs7h05vm9hza4fqd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["0","1","1","g1ae4nsxhv6cjpvu8n8xuqd3xs7h05vm9hza4fqd"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2ZJhpwUK56fWMO2GsOU27jGB2BB9rGNBs8PdGfm1cCu"},"signature":"uADzCfXPClVqYdu29W2F0lrQaPYUWdV0j6ZkXTACPm0fM2g3DRDjxNIeAncUdhjwvxjVVD3AlkWqJqQI0yAkLQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ae4nsxhv6cjpvu8n8xuqd3xs7h05vm9hza4fqd","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","blockpower",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2ZJhpwUK56fWMO2GsOU27jGB2BB9rGNBs8PdGfm1cCu"},"signature":"dL82R1YakIVccX+X37Lu82SopguqMTRQaHGCWFZKiqBPUKRuR+UoYgzQ2ze53ur1UmOUd8B3Ch5j42joep8mnQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ae4nsxhv6cjpvu8n8xuqd3xs7h05vm9hza4fqd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["blockpower"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2ZJhpwUK56fWMO2GsOU27jGB2BB9rGNBs8PdGfm1cCu"},"signature":"+MPthQpCxEa5gKKmY4nQ3IpvIQDVwUBaBL637wokwg01IGkLvTmuzKxvjKsnJjQFT43K022q8JAAW6eqgEMEHQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ae4nsxhv6cjpvu8n8xuqd3xs7h05vm9hza4fqd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["56","blockpower","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2ZJhpwUK56fWMO2GsOU27jGB2BB9rGNBs8PdGfm1cCu"},"signature":"4f/cFi4eG828isGiHLnSm7let8fVGMDS4pAhvwMaE6Z1iKpBy9ftyPIoNGWCpHmP1xfrS7hpXK5q7/wF6Le/og=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ae4nsxhv6cjpvu8n8xuqd3xs7h05vm9hza4fqd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["56","1","1","g1ae4nsxhv6cjpvu8n8xuqd3xs7h05vm9hza4fqd"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2ZJhpwUK56fWMO2GsOU27jGB2BB9rGNBs8PdGfm1cCu"},"signature":"ywnTG+zSFVAvb6HqIsn4i4/8dl2cYJEciSrTdU6toqkUvq4JBti5HDaYdukD76QXxPTZE/rnvwh0NQVaMGvMFA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tlf4954y9tz2k0tzdpudh4xnxxarc3d0pglnmd","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","christismith",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3LQn0Wnkrd4Ggn+VeF7wQ5hNz12KnarDmgUgEFAfaKu"},"signature":"ikC/uPp/lEf7254i7mI8p4nwKjvRzKAKf/jl/Zoov2NjaGKHsgXFg+0ByoquxAi/w98z29w/0cFUBahNgv+h+Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tlf4954y9tz2k0tzdpudh4xnxxarc3d0pglnmd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["christismith"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3LQn0Wnkrd4Ggn+VeF7wQ5hNz12KnarDmgUgEFAfaKu"},"signature":"7ocZ/+Vl4k90DvPqDRAeDfcmq32UCl1oLNlqJ/gjGi5lPQh1G0YxsW1GX2LqABIaXIODX5GYJ0Ma58PdkzpNww=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tlf4954y9tz2k0tzdpudh4xnxxarc3d0pglnmd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["57","christismith","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3LQn0Wnkrd4Ggn+VeF7wQ5hNz12KnarDmgUgEFAfaKu"},"signature":"HPgD53UVk/YfRVIYf/hilppHZCUaP4E7cdmEOR9FS31VJ6Nx/tnpO9E8VsTwlZWfe8Qz8p4jg99iVBFzXuMIJA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tlf4954y9tz2k0tzdpudh4xnxxarc3d0pglnmd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["57","1","1","g1tlf4954y9tz2k0tzdpudh4xnxxarc3d0pglnmd"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3LQn0Wnkrd4Ggn+VeF7wQ5hNz12KnarDmgUgEFAfaKu"},"signature":"d6l8eCoiQ4gee9I3Cnk8fBiVmo0bfZ0pKJ2i2VX+Qd0wbh7MST+3sLBoA9r+5nPrjR4I4DDrKMy5vfTtA0UMoQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1htajw8z3g4cd9vtcm4r7takefmgdf3c2n9es7q","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","fatihsenel",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlNupMAQi3zrNaRoLbydrPDQQzgoCuQekt1Z/M1F9L0n"},"signature":"OR468cIZAAa4OvTsfS365kk4XtRv02bVeNNmXiAZMdELDAf+VAYOt/BqRJzoLd0GS9c+OUSlT+6CMVg83iy/hw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1htajw8z3g4cd9vtcm4r7takefmgdf3c2n9es7q","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["fatihsenel"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlNupMAQi3zrNaRoLbydrPDQQzgoCuQekt1Z/M1F9L0n"},"signature":"lJgPNjtyPmoDxdjDx9jrOcE1tKDAt3F0D65S4OPPclIavX6aPla+AkcGdrSgLIsMYgmueXrGGd7dM831iG9UQA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1htajw8z3g4cd9vtcm4r7takefmgdf3c2n9es7q","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["58","fatihsenel","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlNupMAQi3zrNaRoLbydrPDQQzgoCuQekt1Z/M1F9L0n"},"signature":"051DTivbrjEDOGQ44ZmIaDmUv0VlxwdCWNGiiV5FFmUuj6N61mjoJX5mJkp0+zIh7Fjz/DQ5WG1kXs00GzCRTA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1htajw8z3g4cd9vtcm4r7takefmgdf3c2n9es7q","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["58","1","1","g1htajw8z3g4cd9vtcm4r7takefmgdf3c2n9es7q"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlNupMAQi3zrNaRoLbydrPDQQzgoCuQekt1Z/M1F9L0n"},"signature":"7fvyqKUByIB3KJLP795U65Zho/O8JtpY1P3ND6gC+wJdCzJsDhF0YqKDQofXX25rqAaSSDyDdLPoZJ8AKP7y+A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tfj29dwz959fy7mnhrfxfckxvvhf5sd9pu49wh","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","freightliner",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhTegjbHVS/zUgjyrrgCl7tk9bnNi5YlOm3ZoQvjw368"},"signature":"SFc5O0wyHM6xj/GLlRWTiecfJ62LhqOFM68FVA7gGyM+67JIWOge4wXxpsQ2JS5m/oY6ClNDSR4mYp5+aG2DXw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tfj29dwz959fy7mnhrfxfckxvvhf5sd9pu49wh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["freightliner"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhTegjbHVS/zUgjyrrgCl7tk9bnNi5YlOm3ZoQvjw368"},"signature":"h54kk7TjDArcEOi4cosvqznbpuKf/9mdr13EdUbHtHxkrtR3VvCF14xpJN51YUfvZTzh0AI9pV6RUnZjvO80lA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tfj29dwz959fy7mnhrfxfckxvvhf5sd9pu49wh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["59","freightliner","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhTegjbHVS/zUgjyrrgCl7tk9bnNi5YlOm3ZoQvjw368"},"signature":"bZAMmfni3yJkFZJswiius7JvzJWWsFaCodk3pksQT6x8fJn0FoP4twI5NYn0W0I/LjBCkxZiulMbq4Eh8Wf8Iw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tfj29dwz959fy7mnhrfxfckxvvhf5sd9pu49wh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["59","1","1","g1tfj29dwz959fy7mnhrfxfckxvvhf5sd9pu49wh"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhTegjbHVS/zUgjyrrgCl7tk9bnNi5YlOm3ZoQvjw368"},"signature":"wFAsay23WgMb6KfP/TK9DuERP/z/s/Ftl7YfXAh55d0Z16d+fRVWNafqcF+ZmeVPa48VNAB4SAI+li7J0U4zhA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fxyehq3xe9y27jqpgy4z9wt6zryj4rl0n46l20","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","memreka",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As3lbqt1hstFa2sm8oOmAyikf9EHfprM6aiM5/6mAIs7"},"signature":"bD54up3BnjcTCT2dF0yjqreqbGVlbuslfctJ+lAVQbpizcIB0XWYCg5TPNyxY+ASsAAbpylrGwEhbX2B76k82w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fxyehq3xe9y27jqpgy4z9wt6zryj4rl0n46l20","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["memreka"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As3lbqt1hstFa2sm8oOmAyikf9EHfprM6aiM5/6mAIs7"},"signature":"euy5YyNlh0ULN98z+i99XkwxIOz/qMV7gnICJRaQy1lQVBRmb94s/IMNB0gLuIFVrHxh/UGovcXYj4umaDRM3w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fxyehq3xe9y27jqpgy4z9wt6zryj4rl0n46l20","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["60","1","1","g1fxyehq3xe9y27jqpgy4z9wt6zryj4rl0n46l20"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As3lbqt1hstFa2sm8oOmAyikf9EHfprM6aiM5/6mAIs7"},"signature":"Q68XeCQx5O4NhusBlx68YpKxdI5XuGMRspx1Wn+P2JgFdJS/PeidFUgGjHHmiyw5K5kY3pArCGwoiUA2C3CwqA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fxyehq3xe9y27jqpgy4z9wt6zryj4rl0n46l20","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","memreka",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As3lbqt1hstFa2sm8oOmAyikf9EHfprM6aiM5/6mAIs7"},"signature":"ekMOBaFhmYOphF6T4ccD5J2YmhwTkc8FAj238HGrxNU9xWfDsn0g9CX+TqXCvB3NxsXklXWxQKHgLdymfMIfAQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fxyehq3xe9y27jqpgy4z9wt6zryj4rl0n46l20","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["memreka"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As3lbqt1hstFa2sm8oOmAyikf9EHfprM6aiM5/6mAIs7"},"signature":"KD+J+eVVFmUNKkOpqv5De0VMx+A95gkF0ZDX73+Fsapetam/xtg3nWpNMtnowasiRNd3EeHr8N1gQXC0xJBqqQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fxyehq3xe9y27jqpgy4z9wt6zryj4rl0n46l20","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["60","memreka","This is a simple test realm contract that demonstrates how to use the banker.\n\nSee [gno.land/r/banktest/banktest.go](/r/banktest/banktest.go) to see the original contract code.\n\nThis article will go through each line to explain how it works.\n\n```go\npackage banktest\n```\n\nThis package is locally named \"banktest\" (could be anything).\n\n```go\nimport (\n    \"std\"\n)\n```\n\nThe \"std\" package is defined by the gno code in stdlibs/std/. \u003c/br\u003e\nSelf explanatory; and you'll see more usage from std later.\n\n```go\ntype activity struct {\n    caller   std.Address\n    sent     std.Coins\n    returned std.Coins\n    time     time.Time\n}\n\nfunc (act *activity) String() string {\n    return act.caller.String() + \" \" +\n        act.sent.String() + \" sent, \" +\n        act.returned.String() + \" returned, at \" +\n        act.time.Format(\"2006-01-02 3:04pm MST\")\n}\n\nvar latest [10]*activity\n```\n\nThis is just maintaining a list of recent activity to this contract.\nNotice that the \"latest\" variable is defined \"globally\" within\nthe context of the realm with path \"gno.land/r/banktest\".\n\nThis means that calls to functions defined within this package\nare encapsulated within this \"data realm\", where the data is\nmutated based on transactions that can potentially cross many\nrealm and non-realm packge boundaries (in the call stack).\n\n```go\n// Deposit will take the coins (to the realm's pkgaddr) or return them to user.\nfunc Deposit(returnDenom string, returnAmount int64) string {\n    std.AssertOriginCall()\n    caller := std.GetOrigCaller()\n    send := std.Coins{{returnDenom, returnAmount}}\n```\n\nThis is the beginning of the definition of the contract function named\n\"Deposit\".  `std.AssertOriginCall() asserts that this function was called by a\ngno transactional Message. The caller is the user who signed off on this\ntransactional message. Send is the amount of deposit sent along with this\nmessage.\n\n```go\n    // record activity\n    act := \u0026activity{\n        caller:   caller,\n        sent:     std.GetOrigSend(),\n        returned: send,\n        time:     time.Now(),\n    }\n    for i := len(latest) - 2; i \u003e= 0; i-- {\n        latest[i+1] = latest[i] // shift by +1.\n    }\n    latest[0] = act\n```\n\nUpdating the \"latest\" array for viewing at gno.land/r/banktest: (w/ trailing colon).\n\n```go\n    // return if any.\n    if returnAmount \u003e 0 {\n```\n\nIf the user requested the return of coins...\n\n```go\n        banker := std.GetBanker(std.BankerTypeOrigSend)\n```\n\nuse a std.Banker instance to return any deposited coins to the original sender.\n\n```go\n        pkgaddr := std.GetOrigPkgAddr()\n        // TODO: use std.Coins constructors, this isn't generally safe.\n        banker.SendCoins(pkgaddr, caller, send)\n        return \"returned!\"\n```\n\nNotice that each realm package has an associated Cosmos address.\n\n\nFinally, the results are rendered via an ABCI query call when you visit [/r/banktest:](/r/banktest:).\n\n```go\nfunc Render(path string) string {\n    // get realm coins.\n    banker := std.GetBanker(std.BankerTypeReadonly)\n    coins := banker.GetCoins(std.GetOrigPkgAddr())\n\n    // render\n    res := \"\"\n    res += \"## recent activity\n\"\n    res += \"\n\"\n    for _, act := range latest {\n        if act == nil {\n            break\n        }\n        res += \" * \" + act.String() + \"\n\"\n    }\n    res += \"\n\"\n    res += \"## total deposits\n\"\n    res += coins.String()\n    return res\n}\n```\n\nYou can call this contract yourself, by vistiing [/r/banktest](/r/banktest) and the [quickstart guide](/r/boards:gnolang/4).\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As3lbqt1hstFa2sm8oOmAyikf9EHfprM6aiM5/6mAIs7"},"signature":"fXBR93LMYyM+DG1Xy1onWqq5rfh1gwIyxJ0ixASle3EvY5ozCMikHe1sAmnu+PHQf20B6PGqBCuE24M7uKfhHA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fxyehq3xe9y27jqpgy4z9wt6zryj4rl0n46l20","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["60","1","1","g1fxyehq3xe9y27jqpgy4z9wt6zryj4rl0n46l20"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As3lbqt1hstFa2sm8oOmAyikf9EHfprM6aiM5/6mAIs7"},"signature":"63rDbfWlbGoDO9o8nvbc7PnFDIxLy0ffK1nW4xG0v3xWEOnG2ATSqaMSRiebo17+0dwzkzwfK+uNTuEgKYFuUg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","amount":"121000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"FrKhDED1SkKH60WjtQhjD5s28x2gzJtvGccBPTrVo0wwd3HOK9h1Rl55fU0Sw3WtOdwO8bdFwKjMWCtnMEFU5g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1nh9rkyjp7kpjuf8e6hg3l0rd6mttjx72xdcchz","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"6rOxGxXBHoEPsbkm/leAUldy0DGNqvIwtwu9Xo8l9ZEcOPBKQAlseKGcYgRQufH2r/wEl1/uD4UEEnIuJdKrpQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1x92ncklg6s2f8cn6v406v8sv97hpdyxjzqg630","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Z0vWMI+bMIfzd+mh8X0u9pqZWRxdRl2WmJ6+16WFQrdYlvxZtOBzCMlQPWAv4aj6cMM/ObQAm+AMSYDaeaiEqg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x92ncklg6s2f8cn6v406v8sv97hpdyxjzqg630","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","PurpleMoney",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9pALr095ASAmge5xnbt74xxxUiA24WCdJsOUygH51bm"},"signature":"RsOMUvXo9dCs89xZlRHP88EZ5T6euls6sghtfPGNkEwWRUS6o/GYCjC/rTDbVlKNjz2NCVsgQFI3NU+bNZKZTQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x92ncklg6s2f8cn6v406v8sv97hpdyxjzqg630","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","PurpleMoney",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9pALr095ASAmge5xnbt74xxxUiA24WCdJsOUygH51bm"},"signature":"iOHGr3g6cTr0KfcRAC9qC9a31/ggCEN+cN/sKDROUz4cy0s6UW+dZytuoOecuFggGSA6lImOm/P6XcyR7agdKA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x92ncklg6s2f8cn6v406v8sv97hpdyxjzqg630","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","PurpleMoney",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9pALr095ASAmge5xnbt74xxxUiA24WCdJsOUygH51bm"},"signature":"5UGPqa+5Z24DeMrLw2pqyOax5PkjxE5c3/Op4L5C114NG+zKZ9IehqFAG1cbaDR6eow8qWl7JdD5M/hZ6KNWyA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x92ncklg6s2f8cn6v406v8sv97hpdyxjzqg630","send":"","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","PurpleMoney",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9pALr095ASAmge5xnbt74xxxUiA24WCdJsOUygH51bm"},"signature":"IzFV5valaAHGjH2ai1RibJYWEMnkY4csIU4WYuUElgpRbZ0BdiLP2ZPl10W0hzFl48qnnt3lGV7xJlQMkvvDfQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x92ncklg6s2f8cn6v406v8sv97hpdyxjzqg630","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","PurpleMoney",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9pALr095ASAmge5xnbt74xxxUiA24WCdJsOUygH51bm"},"signature":"SRo5Nr9RNB97FHZV02wL0skFMl+eelIHgSaIn2pKef1A6wRa++llD+zGoiuECEH/xvgCAtAY6J1FRMgH+rTTAg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x92ncklg6s2f8cn6v406v8sv97hpdyxjzqg630","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","purplemoney",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9pALr095ASAmge5xnbt74xxxUiA24WCdJsOUygH51bm"},"signature":"spXm9TSoG2pm7nhHWigsE7fqvFON7ZtaMdm3m0//HH8xjPi7r5nkWLDMjYVFJMpWurWPW++3iQ5a6DAYHcVo1w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vyjwm2tqqm60swj29kdhr6jf543sevmv4xg8dk","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","viettel",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+DU6jfWzh9rKMfo8bl6eyCGBiBXWThOj+0N1P3P6cf"},"signature":"XSoR3vZeW1WIfRxVmweve50vYiClj6JhCGRQBAXrpDUE57GWlUgFNhYby644gZynlgGLhPap2rNWJ2TblZFNMw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vyjwm2tqqm60swj29kdhr6jf543sevmv4xg8dk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["viettel"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+DU6jfWzh9rKMfo8bl6eyCGBiBXWThOj+0N1P3P6cf"},"signature":"DzJYiB07BJwlGEQHDYlvLq0xEisYfF7zBbMvQqWU6ZJ2lkQcUM8uU3/crS9ygz7Z2CVFkKoDWUb4rV2kI2weCA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vyjwm2tqqm60swj29kdhr6jf543sevmv4xg8dk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["61","viettel","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+DU6jfWzh9rKMfo8bl6eyCGBiBXWThOj+0N1P3P6cf"},"signature":"VFxVZSpVnldKbZVKN9l4E3NhQ+1ib6N9cLGcqxp5o/4qRP4gA27CAt72/qhyz2k04EsDQaop5WPKWb81Jq2wRA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vyjwm2tqqm60swj29kdhr6jf543sevmv4xg8dk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["61","1","1","g1vyjwm2tqqm60swj29kdhr6jf543sevmv4xg8dk"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+DU6jfWzh9rKMfo8bl6eyCGBiBXWThOj+0N1P3P6cf"},"signature":"StRXW2l/6Uk1ikSDK7bYnPEHjlBGqN5kVwHrZnyR7Ep6t1CyBcTh6ZdPKy+IhlMd3YLI1lCGeAgCOvKllWj8SA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g13hsesqhasas0wgwp6e2lzmzfaf8rztvsszvky7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"RxmvwiZWNiSDn42Fv+v/7887qxT7XdJxq3nBSourhEQBfVqqnMFyrjAjxkZzs/rMxQqBzZIRkrd+h926Eherdg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13hsesqhasas0wgwp6e2lzmzfaf8rztvsszvky7","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","kunka",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0onqluBVRlxIs+DmeAyxvns2RJeLkA1JgRHOIQUFSDP"},"signature":"JPG2TdZFJJZF+MUmmlyjvpPolg/ile93zSHCVQGTfGl3ZzSyaSjwj+7P21BEfaFF8etEWCjP49iHunRDJ5qSLw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13hsesqhasas0wgwp6e2lzmzfaf8rztvsszvky7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["kunka"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0onqluBVRlxIs+DmeAyxvns2RJeLkA1JgRHOIQUFSDP"},"signature":"oJKTWwk4yvBXLqi3QyoXD44kJ9J9aH19CHYvL2ENjMhs/sr3A6FC4gjBKY99SUApi1WbstnNzmYdVmXEreAXYA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13hsesqhasas0wgwp6e2lzmzfaf8rztvsszvky7","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","kungka",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0onqluBVRlxIs+DmeAyxvns2RJeLkA1JgRHOIQUFSDP"},"signature":"NK8+FINf2/iVAYK4Mh8aUXMxSqaYkS45RzOc5qimt+BqDMlE3+KOH+fQRyT04EgMjTO3D0uTqJqoGQ8ah19WzQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13hsesqhasas0wgwp6e2lzmzfaf8rztvsszvky7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["kungka"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0onqluBVRlxIs+DmeAyxvns2RJeLkA1JgRHOIQUFSDP"},"signature":"eH7vzUT/srO7EAjmmQs5XFlDoMWFMA+UXRuYKZ/GBiZp1JEM+MTPkUKnCF9tVcXGeGKSlvtCfn6cA9qyz6gWZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13hsesqhasas0wgwp6e2lzmzfaf8rztvsszvky7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["62","kungka","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0onqluBVRlxIs+DmeAyxvns2RJeLkA1JgRHOIQUFSDP"},"signature":"MVnxEF72QueLwPkJzl9STtLC3n0XcxojMNzrZVvOy3VD6GJXkGb4lU/B1jrWBlw1ejXUl5ucoJxMI30CvjrcZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13hsesqhasas0wgwp6e2lzmzfaf8rztvsszvky7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["62","1","1","g13hsesqhasas0wgwp6e2lzmzfaf8rztvsszvky7"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0onqluBVRlxIs+DmeAyxvns2RJeLkA1JgRHOIQUFSDP"},"signature":"m3VwSxxmkpDKjdJ9otUKXy28jHzAxjApYMGvhJyp15hy5WS/zXj61npYjzA5mxWgslp+9QMPzAbbmMfNtj9qLg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1qxlzqqckupx5th94sadvhxe09eney842efvsxf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"5xQKiw4SIOnaAhIbEsqh4fSGWiY5/krR7BG+km6bOF9IpvJNRvYYPiyldRDQZ1QTIjWfut9p/r/wrgleOPHYzg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qxlzqqckupx5th94sadvhxe09eney842efvsxf","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","toptop",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsIACpoh1MmUK0MaUPZ0F5lh3v+ek4Jhk5n6PAyU37Ta"},"signature":"T7Abh1bn8SJGbZSwRN695+UtnLIWzQsats/knmQJy3UetM7ph9MSD9PQPxmL2ihdl5OZ8l7A4bzIit+N/anrLw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qxlzqqckupx5th94sadvhxe09eney842efvsxf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["toptop"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsIACpoh1MmUK0MaUPZ0F5lh3v+ek4Jhk5n6PAyU37Ta"},"signature":"7UDnH1f5ufhyuqufhgN44cosNQWQszjYJhjIP7wismBPFQuPwwKPdl6fyF9jryKtk2oH9aQxrQqYwlHxil3avQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qxlzqqckupx5th94sadvhxe09eney842efvsxf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["63","toptop","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsIACpoh1MmUK0MaUPZ0F5lh3v+ek4Jhk5n6PAyU37Ta"},"signature":"s2+SK1kbaBPky3WD5x9xhA1DOY0RYQrmOEpzHMak3Cpchx1RdnBUXJ2yls9f96gZLmYIZfvhc7IfBSZawj85Og=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qxlzqqckupx5th94sadvhxe09eney842efvsxf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["63","1","1","g1qxlzqqckupx5th94sadvhxe09eney842efvsxf"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsIACpoh1MmUK0MaUPZ0F5lh3v+ek4Jhk5n6PAyU37Ta"},"signature":"7RSI82of2NNRvcZ7fJxMhpcvPKMM2zmLWLWoXHbsr4wYvejpcf5rhI6rmVd1lqDAWeS8inw27aoViSGIwstlRw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fvcw2397q8je46r8gfm7cx7mwslseceq6jm2l0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"NZgGyBm77AtqmHEp7k4g4UfyNsSNE3k/psASFnwjfx4XsgmsBdLIvVQtmOnYkMGEKzT5LjUmMiyjv8lJGz3gSA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fvcw2397q8je46r8gfm7cx7mwslseceq6jm2l0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","legend",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An2M6zP5g/ccBR/bMOO50y3Np1rZuUw+rbUOapQgbiJm"},"signature":"RBefOCaTnZ1uOPAHzQ7UaU4/SNplDuOvjcAtxg5kHa4KzdeJ/T69CnmrNKtIi0xGgCpQXeLw4VHd8TWNfGNGNw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fvcw2397q8je46r8gfm7cx7mwslseceq6jm2l0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["legend"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An2M6zP5g/ccBR/bMOO50y3Np1rZuUw+rbUOapQgbiJm"},"signature":"YVigKf9IStltfKQntHD48IuYYAWw8nIFOC8wxwc+019kT3QiAyhJQFqHDkfPzSNpZUbfK4LyZabzXrLP2HVjyg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fvcw2397q8je46r8gfm7cx7mwslseceq6jm2l0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["64","legend","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An2M6zP5g/ccBR/bMOO50y3Np1rZuUw+rbUOapQgbiJm"},"signature":"6eTSxQbgtId8DxmXKUlNqE7ErGOHFSVkpkNkEEOIC2UqVmlDrNP/4KfKZwEWbkeH1sW2EMPMq1QcOuFqs8VYGg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fvcw2397q8je46r8gfm7cx7mwslseceq6jm2l0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["64","1","1","g1fvcw2397q8je46r8gfm7cx7mwslseceq6jm2l0"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An2M6zP5g/ccBR/bMOO50y3Np1rZuUw+rbUOapQgbiJm"},"signature":"4fFAlbwbihJc00a+tw7VhI/J2cVbUwu/CzY9uBYR/6dG6l0oAWT0ao83/4itx3+g5xxt8CYNOo+nPe/kjnubJA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1wy77wh8f52hmpp6p8vyw380rayu7pc454p6ghh","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"lsGxQ26kM/oxc4oJYMKc1KgZZ7vi1X1ZgPqIt7vP6Iw53hypgcXtcTykpjkeb9jXCC5DcsyAnfic14xe1oTrcQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wy77wh8f52hmpp6p8vyw380rayu7pc454p6ghh","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","garden",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhNALMQbRzo+fpbo2uH4XQJxNWo7mborXiymQX/zw+ux"},"signature":"8YiLQ3TFxBk6zV3Ls856A4QfCkP2+H4c6KOtgHm2fe4BBr8aDovpun8eN/X1hsulijQoIRY39VCFquHAP31j9g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wy77wh8f52hmpp6p8vyw380rayu7pc454p6ghh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["garden"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhNALMQbRzo+fpbo2uH4XQJxNWo7mborXiymQX/zw+ux"},"signature":"UPupp38YNodigsuKSOJrxmfWtQEbjCFu++EGixbukAUVfr4AxyroQR48m65Po6Et0k1Lz3oBnULzpXBSk870lg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wy77wh8f52hmpp6p8vyw380rayu7pc454p6ghh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["65","garden","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhNALMQbRzo+fpbo2uH4XQJxNWo7mborXiymQX/zw+ux"},"signature":"zpGbJqPUiKfyNPpya9A+deLj0IQSzTmfHT4BsRpGosE86eqGLCodPUTYVE2oaJoqJetc67pQgwX9+qMo5iHjag=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wy77wh8f52hmpp6p8vyw380rayu7pc454p6ghh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["65","1","1","g1wy77wh8f52hmpp6p8vyw380rayu7pc454p6ghh"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhNALMQbRzo+fpbo2uH4XQJxNWo7mborXiymQX/zw+ux"},"signature":"zMzslvM2F/Vlv9GC8wgjiBckT0PxBEXoVrDbW9iJAh1+mvDU94/hN7zmgfGOxWpPN8A4rQZ62IIm6CH9b4tofQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fvtc6fzawccl6ry4c4ld9gfncn9rzt7qevpsrj","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"aPOwrJjs/M04h7TAcfHX7myIWgt636QMxnANEHC+T55FrMoLa+qszp3wVc7Hek9qh4Sv+2Ge4a4NrxxV6RCtEg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fvtc6fzawccl6ry4c4ld9gfncn9rzt7qevpsrj","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","tuoidabuon",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/ukNLIVYB5ZDRWUwm7Ph12Povku4sS940Yiw/JlVdve"},"signature":"pIT9ImRdfnWacBcEFJYjiBwziYXv+EbQCOswKsIqPeVZ1lG5ZG0tVWJ/pFNULsy8ruZG3yy4vixbJXy2rgUAwQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fvtc6fzawccl6ry4c4ld9gfncn9rzt7qevpsrj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["tuoidabuon"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/ukNLIVYB5ZDRWUwm7Ph12Povku4sS940Yiw/JlVdve"},"signature":"zFe3d6QdgaakRSKjR8aKUo0IzxDODxC7GxiSMCuVgNxJh6Cg12DJ7vgfNIpA7jezn4DixoJl4j4y5HsaCb7Q2Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fvtc6fzawccl6ry4c4ld9gfncn9rzt7qevpsrj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["66","tuoidabuon","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/ukNLIVYB5ZDRWUwm7Ph12Povku4sS940Yiw/JlVdve"},"signature":"pETNBknfHA77CYlT3oFA/0TSnO34a9lMD81R66nMaqY9zb1L5r/rcjByomqJeky1uxSapm9RHA09qLM44JKRHg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fvtc6fzawccl6ry4c4ld9gfncn9rzt7qevpsrj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["66","1","1","g1fvtc6fzawccl6ry4c4ld9gfncn9rzt7qevpsrj"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/ukNLIVYB5ZDRWUwm7Ph12Povku4sS940Yiw/JlVdve"},"signature":"BKJWqL/QSPwV6xEs6lB6jdTJ0MKUx3RZsMUKkwUWxaclVY0XAEaefSDmkVaXeqxuscao/i1eWfoT1qfK3IhtGg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jpyu7hyg2rlmhhtn38tfpxxz6nehdrutxtvm6y","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"3w3e9WHFTHmNdY1XBNimpZfWaHM6OTzUqElnxl1v3SlI3w2w6DnID446eVZB7i8YhGw+CHlti0hS20QpeIlqpQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jpyu7hyg2rlmhhtn38tfpxxz6nehdrutxtvm6y","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","muahong",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag2mUczMqZQ4T29WoZaVc7LOReyy+UB9VEDF3/gobFlT"},"signature":"+PV1fDmo4S02jhjbMwIYsyx0TjChaglZ2WQ55PexlGBAtY28IPL6kWCQFS2iorNc0lCxNlNifPsrvfpXULHEOA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jpyu7hyg2rlmhhtn38tfpxxz6nehdrutxtvm6y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["muahong"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag2mUczMqZQ4T29WoZaVc7LOReyy+UB9VEDF3/gobFlT"},"signature":"ECLiqAZiDAY0BWYTp+xKPWjtM/c5kyusTGC+4JZdptAYFYTsQnbCipP8Yq/p0+k1Xp6uKGG8PH0g3/eTdn7dvA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jpyu7hyg2rlmhhtn38tfpxxz6nehdrutxtvm6y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["67","muahong","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag2mUczMqZQ4T29WoZaVc7LOReyy+UB9VEDF3/gobFlT"},"signature":"1uRaVFxBrIyFSGIFK1HwYNhwVLZ0sPk0aNJoxqODT1sB4cIRzLp5HCYBCQaiZRWElDYA8iq7htLoFdHVsaJjPw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jpyu7hyg2rlmhhtn38tfpxxz6nehdrutxtvm6y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["67","1","1","g1jpyu7hyg2rlmhhtn38tfpxxz6nehdrutxtvm6y"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag2mUczMqZQ4T29WoZaVc7LOReyy+UB9VEDF3/gobFlT"},"signature":"iXbdDcKiKWEQB7EE64ycDeVsL3MRGTlLEbf87BiBPF80+0GJoYKUKBb8OdZZuf0VFLdm6frYROwmS4Zmy9ZjTA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1a6pffl9nh7prljukz62gnwp7wk6dfhxxlsjuv2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ooNw/HokFN+ZFvI47DENcl2o1PoxCofRYV9G+w+OvIJYjyn8uB+5B1qiILNMtNB3h46yH+fIZ4XovwyBF3wToQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a6pffl9nh7prljukz62gnwp7wk6dfhxxlsjuv2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","catbui",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyY/gWon5I/bHq3yWP0GaPOI1btTFlCSoRlY27qT2zbi"},"signature":"DRxCx1imtVmzDL1FhptUfIOPXGaFugVThYTVNNstcVcS+wPZC30luJrVMuBAEnQX05Fdq6FmjxT4KsuKbSnO6Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a6pffl9nh7prljukz62gnwp7wk6dfhxxlsjuv2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["catbui"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyY/gWon5I/bHq3yWP0GaPOI1btTFlCSoRlY27qT2zbi"},"signature":"wUPO/qUTKyDiF26HacSHP/mRu9Uong/rh9dAxE4dniQulGgp+/BeID9/RqndOBmkYokqmqQCFbxNVZjHRxsE1w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a6pffl9nh7prljukz62gnwp7wk6dfhxxlsjuv2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["68","catbui","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyY/gWon5I/bHq3yWP0GaPOI1btTFlCSoRlY27qT2zbi"},"signature":"KlmyP6h3tmjCvsKfRuqT+eCXO5lVLr6y6yGEJFY8JqMJrNawQo0dNNWPMx+m+7ImM0wKfIyCbL5/LpyJ6i4CbA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a6pffl9nh7prljukz62gnwp7wk6dfhxxlsjuv2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["68","1","1","g1a6pffl9nh7prljukz62gnwp7wk6dfhxxlsjuv2"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyY/gWon5I/bHq3yWP0GaPOI1btTFlCSoRlY27qT2zbi"},"signature":"Lmr/XVJlp4qVynWS7Q0NPepRfAn8iMM1kY0wa6vysANMpgJJP8luGSvvPcyCARR+9QMt3aWU8S+7Ctd54moM7w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1nayqc9zfpx0cepf0ltlf8363mc2gne2zvhut4m","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"JmNKUP+8T/iZ1w6YLU7pQIpZz911VyccA7qcFYxW6g5YW3nq/pxO3y9dnsQJTWQ+dqW/F4GZBCDsGzZOOt3h3w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nayqc9zfpx0cepf0ltlf8363mc2gne2zvhut4m","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","quynhhuong",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A034j+DiFr3zmxma2kRdGAa4N8cMPzGh+UDe2P1iypeM"},"signature":"uqcEFVmbwYzY94w21Pcvj5LwyEZZwNRnHPTeWvXan9ATk2sK1Z7fuml5UUkgFQ1XfCualbAbeouSfuHQ6Sdc4Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nayqc9zfpx0cepf0ltlf8363mc2gne2zvhut4m","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["quynhhuong"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A034j+DiFr3zmxma2kRdGAa4N8cMPzGh+UDe2P1iypeM"},"signature":"Cb+wwgP4T1JqJN0tY6GThOJhshl0ydKB7CXgTU5bVqoWO+KBSZM/qb7NZSC5Ez11hDQ5/08O6d8jzfLyHiPNww=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nayqc9zfpx0cepf0ltlf8363mc2gne2zvhut4m","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["69","quynhhuong","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A034j+DiFr3zmxma2kRdGAa4N8cMPzGh+UDe2P1iypeM"},"signature":"Uj+Jc8FmuD8OfKYR768H6uNNJ4674dAcIIuhbFxD/yM1Q3yJ8vjNT4SZNHnAT1rIFU7ezYo2qqGU4refoFoRUg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nayqc9zfpx0cepf0ltlf8363mc2gne2zvhut4m","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["69","1","1","g1nayqc9zfpx0cepf0ltlf8363mc2gne2zvhut4m"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A034j+DiFr3zmxma2kRdGAa4N8cMPzGh+UDe2P1iypeM"},"signature":"FYx2lFwkI4KnjV2bv4PDtEcvUWAK4rRRDUV0XTErxbVQqEnoheHkFKjrVNv4ykvICHw1tHA4zG9UPVaXYoouCg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1p9ucamvx8zm0s8mv0pf0v88r4da4ej6ypt57pn","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"CeBabrhknVp/1f4NOAKS+F1qN5jmFDcL1VLEVp0/3ghaVlFD9LnLcd+V/xUeMkVJDdQ8bFa1vZHQzp7fOeQwuw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p9ucamvx8zm0s8mv0pf0v88r4da4ej6ypt57pn","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","«Dnomira»",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzJ2IG2DsWyoU1UlN97SS1DFqwCqn2GZyNd1DtQr5I2d"},"signature":"Q0er3MxvCWDKXUnMS2xhGRt1xIDesZ01+JdZvCNO+kQ0/8lplUeMSH1RKSAuuLpkcX1h7kZSK73vJBP28u74Cw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16lrn6qhd525h9ghmsrs80fv4ejvzqmzy0myheu","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"7E/ubsX8KjE9R6Vev0BqfAZXerKZiOKVbh6eCQTNwTUdIo44oSruu6oq72XF0L2pjstRcDueUpxj9SdXFsk7PQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p9ucamvx8zm0s8mv0pf0v88r4da4ej6ypt57pn","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","«Dnomira»",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzJ2IG2DsWyoU1UlN97SS1DFqwCqn2GZyNd1DtQr5I2d"},"signature":"a0C/oYA45mg6aojaD3bKlzrkSJV36jspwSnAAQf2KjkZuiHXb5cg41Nijpwgyo+47sy60SMfHjbBsbFySY5YVg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p9ucamvx8zm0s8mv0pf0v88r4da4ej6ypt57pn","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","«Dnomira»",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzJ2IG2DsWyoU1UlN97SS1DFqwCqn2GZyNd1DtQr5I2d"},"signature":"tCVdcQasSCfK14hEBOB6N5S0LPSZU+BmN1DyPSKKtD0CkQ0+oJkT4Yqe9+2snxVhFU9NTyJ518tAlpXGNxegUA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p9ucamvx8zm0s8mv0pf0v88r4da4ej6ypt57pn","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","«Dnomira»",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzJ2IG2DsWyoU1UlN97SS1DFqwCqn2GZyNd1DtQr5I2d"},"signature":"aI540cY83mPJOmHX9gBrM834TsT8rIwZCVzYRGbcRdEtU8Ls1O+aUwhx+INFBdhQRqctgqOKJ6did5Q+n6GZiQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p9ucamvx8zm0s8mv0pf0v88r4da4ej6ypt57pn","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","Hamond",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzJ2IG2DsWyoU1UlN97SS1DFqwCqn2GZyNd1DtQr5I2d"},"signature":"LSWcYqE4sDgEWG0jczRDr0vKgTRjbAESyxXfX3nqu8pyRYY/UBL3drfEp4WWtAqtlQuguRwi7F/Y4iRmJ4iYbQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p9ucamvx8zm0s8mv0pf0v88r4da4ej6ypt57pn","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","testgnoland",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzJ2IG2DsWyoU1UlN97SS1DFqwCqn2GZyNd1DtQr5I2d"},"signature":"yKLuujFLnGlqCu8B2Av4P7rJJpwqcqBKgs72nJl0HOVNuQfNk57V6b9Fx7Y8GmyQjxSETSbrg/GiWZjGziPBFg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p9ucamvx8zm0s8mv0pf0v88r4da4ej6ypt57pn","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["testgnoland"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzJ2IG2DsWyoU1UlN97SS1DFqwCqn2GZyNd1DtQr5I2d"},"signature":"jb3KgrMUdcvSX/5v6re0gIFd+6mvdpUejZtOCPzdV/9kMcgpOYfdzWY9dsC0SDOAUoGwG973PN/18abAxlp0HA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p9ucamvx8zm0s8mv0pf0v88r4da4ej6ypt57pn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["70","Testgnoland","Bezrazlichie"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzJ2IG2DsWyoU1UlN97SS1DFqwCqn2GZyNd1DtQr5I2d"},"signature":"foURSlk7XV/2JV/5uUSzrOMTBOi37Tfc9Q2h/HAsUpQQ6JUVAvP1F+/pnSr834xQQxwo/qPdFqeIgITaJi15Ew=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rduh9jw4usz878r6q28ktml3s6rgd3uyqkhphh","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"tGKhiG3QDVnNTDgKqSpTkn5lyd/HleGrXCnfBIWSEwMqxZDxNo/Qill9aY5w2JSxdKiNh3uowaccwgJkit2v4w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1krunxemw63u2r25cc46q90c7dwudra2chtlnza","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"rJEeQQAF/OLEoE7CSgA1/nKWVCwafVKs8uYXweAQbKsl+jTNPeNNAnCUj9TWCLCX21Eqis7W/o2zy1gxmbuoDA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jv7d7pykj2y7ct9mnftn4xuzhxsd7aeca8g0el","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"J32Ao0ld4tR7OzpZALuKrjaerDQlScvpJfAChTTRSqgB+c/5k0byeB2MNof59K3zLcxcivN6M1dlku5TYTdxVg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g140nk9kcxnv7up2r77pfz3vknyshd7stlq7r6cr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"lVXioOOg8A8OphRx/RkWWT9LGdz6hhryR2+O0FvVWjYs474zOMct/1sAk93G/KPGrl2wGmkFxlS1IBRtzVbcEw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1uxgxzpsu3ppxqq64e2le52efj82etr5a76y6p3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"vP0v8cT/9MMCfbNAfYhOlGSCfgrYGpxNlxBjZYgyvWYa5DCDt/YP3bkb8mXkuatd1WS+gOd9eZ994mcMqVrRxQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g13nmhnyy3k0wpda4v5atctkhkce7kpmak7f97v8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"QAPJdR0vu3pOTtawvLU5y+tYATo6ATswUq0uCeMpWFov8KfSe/VYJw7B8kLDBJ5NVZP97VM9icGVCpXr7LhhJg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gt9c9avp04kpfp9ddglkr02e2k4fjdpmgsrac2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"/O0lXPMy/1oCXy+RIEKbsXXStGMWf6dyyDzCPuJxTXdTqL8JM0odBjGxxRYxvrRZDM3aOCi6IR7omIjE2rqJug=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13nmhnyy3k0wpda4v5atctkhkce7kpmak7f97v8","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","kuzbma",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqcYHP6uIgeIhZQ8s1T8hl5gkKHO9m2EYfGckqd0+Uat"},"signature":"aiI1EJM3LHIVQk0ZOpVoptEgmu1MLi7TIoRpvsmVgtEl5M6fvn5brY7K38gZi2OEgQDSV+x8oSn0AkJH2/wOgA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gt9c9avp04kpfp9ddglkr02e2k4fjdpmgsrac2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","Maya",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5A/pG/jHP1WFkI/+VI1tyDj+H2gMuB82YC6y2ePRLz+"},"signature":"yIXd7OF9aDJmUVfOKZwMLaur+EzxbhURTtIa5bnJJDU/a+VqHt4gteSVyPfgL1eV1AJa+K8sKn9shkGCxw0gHQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gt9c9avp04kpfp9ddglkr02e2k4fjdpmgsrac2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","Maya",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5A/pG/jHP1WFkI/+VI1tyDj+H2gMuB82YC6y2ePRLz+"},"signature":"WDQfiZS3H+1Dq25hngiPFarxEVAOWNmaVJXH3w2QWpFY9UTO2SBzh/foMW0K3NuCtB2pvXGrwxST0a9K6WtZ1g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gt9c9avp04kpfp9ddglkr02e2k4fjdpmgsrac2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","Maya",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5A/pG/jHP1WFkI/+VI1tyDj+H2gMuB82YC6y2ePRLz+"},"signature":"jdSKyHc0U/BTMPf1xvoKAV4lp9fyhZCHUpjh2jP8fE9sUW0RonCBq7q9A8HeUniDVab20YMZqsRJELm+7SXJkA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g13qvdzctppx45suasqkr436rqcdw3l9rpmjgwn6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"h5OqRbusYBIrVIXlO43K5QQyFEUZ769jEXpAhRH9EAZdiLojnSMP7VsuYdT+VjSLd4W8Ll59TPzyeer50jlIJg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vnwkv6mvu8q30e96fuys0eplq5pm6h9s2lrqz9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"uSi4wFCBe0PRe5wIU0HzSDPosDH/onAPUdIsoEC0og4AFlWTU7vIY3vjsTk9kl39QoQS9FILyji5mq5TjhIO2w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vnwkv6mvu8q30e96fuys0eplq5pm6h9s2lrqz9","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","pasha555",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtbvC+ji2mjgFF3dl7Rf+dpoyD7cK5jdYTJeMY9+niR/"},"signature":"OjjwEORRG9rwNZV33Z/WCwxMuqb7PLh0M9iY7uqCMNpvzGosP/ST/k9hnPklGi8jsVEWyCO/IYmXmD+gYYARmw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pl3x96jqswtg3gx3ukf2dq4jpcdl4egqev6hg2","send":"","pkg_path":"gno.land/r/wallet/minterv3","func":"Burn","args":["g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","ugnot","9857582877000"]}],"fee":{"gas_wanted":"500000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArYHP8RjlnLQGQp/YsDRAu11djOFtCFZe4Oxwi36nLm3"},"signature":"Qb/Hiep0J6oBxrgrUCTeEqGO9KXE6BH6ZBE+iO7qatgTuCjviOnHuVfZQmU/hkDIjrMTVleMYaW7elAlSuGq7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pl3x96jqswtg3gx3ukf2dq4jpcdl4egqev6hg2","send":"","pkg_path":"gno.land/r/wallet/minterv3","func":"Burn","args":["g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","ugnot","1222780000000000"]}],"fee":{"gas_wanted":"500000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArYHP8RjlnLQGQp/YsDRAu11djOFtCFZe4Oxwi36nLm3"},"signature":"Su5XxbgeFUuectZWUQVxS1jQGfPTPfo3X/NIOPh7vr19Qf468mgXp3gkAKmWii/zl9S6cVvKX2oGzWJtkZ04SQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pl3x96jqswtg3gx3ukf2dq4jpcdl4egqev6hg2","send":"","pkg_path":"gno.land/r/wallet/minterv3","func":"Burn","args":["g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","ugnot","1221567120000000000"]}],"fee":{"gas_wanted":"500000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArYHP8RjlnLQGQp/YsDRAu11djOFtCFZe4Oxwi36nLm3"},"signature":"YRVE1W2QH/EddlVgnOThdQI0B+7/wxZWCgn/cnyzmZFWwd0vmVUgp2k8ZD15p0UhBf+bPUabj57kr6ZIAw0BMg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pl3x96jqswtg3gx3ukf2dq4jpcdl4egqev6hg2","send":"","pkg_path":"gno.land/r/wallet/minterv3","func":"Burn","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","ugnot","10003081800183000000"]}],"fee":{"gas_wanted":"500000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArYHP8RjlnLQGQp/YsDRAu11djOFtCFZe4Oxwi36nLm3"},"signature":"KO222qyJVMYgofPf9sWTAurKlORU3OJQeST6aqqB0U1ip6ss8s0+iAy6czFle9IBRCwdKqJuIUo6PvYJK09dRQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pl3x96jqswtg3gx3ukf2dq4jpcdl4egqev6hg2","send":"","pkg_path":"gno.land/r/wallet/minterv3","func":"Burn","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","ugnot","10002081900183"]}],"fee":{"gas_wanted":"500000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArYHP8RjlnLQGQp/YsDRAu11djOFtCFZe4Oxwi36nLm3"},"signature":"JI8dxR6dIDRpm5H6EtvDElW14/9oAVRDo7Kdhk6OdftQFYfp/a8Z1LmBqWvfVRw3qJ6GHleGHjpk7KeEehlhcQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pl3x96jqswtg3gx3ukf2dq4jpcdl4egqev6hg2","send":"","pkg_path":"gno.land/r/wallet/minterv3","func":"Burn","args":["g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","ugnot","99000000000"]}],"fee":{"gas_wanted":"500000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArYHP8RjlnLQGQp/YsDRAu11djOFtCFZe4Oxwi36nLm3"},"signature":"uKBSrd9mVHp4u48FzP3scUhZOy4K2tlUN45PLxT2j30y5/CRarIjWsQdAK6TT+PNXbSX3JBiZtDYxeffpLFx4w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1gygypcr6js0dxp88tfne33gxsdn5alwh8t5n5h","to_address":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","amount":"1000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtO0ILC9e2UqNTt91Q51tYignsOdadzu/4nuYh76c5Yr"},"signature":"lZJG4t+eQ61V2tAZAxr3vC7KK9rB4qTnd5KmE7R1F0dxbriXPAow0kLcCZSvAQ3NZhMJGC+OLrBoKn89ZbRPRQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1gygypcr6js0dxp88tfne33gxsdn5alwh8t5n5h","to_address":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","amount":"900000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtO0ILC9e2UqNTt91Q51tYignsOdadzu/4nuYh76c5Yr"},"signature":"zK82c+Q4CsqzUpFFRQX6JAV3Zwfz71FNK1xqVnRsnmUZtQIHPulyGKjqgo95bk+0uLM99yieos/J5+Yx2SFukA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18ct6tra49d4ea4z258lvxlsuw2zwxhn69xgmjp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Lm7jCyhb3//PvW5x5T0qtO3u5aRN5TYRdoLISld22dcMwP+m6ezb+IKpRiws5Lslt9odKbWSGsJ+iJHA4BgWvg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1zj5eeh2n3r8vkc29gv7q53ynzq0tuhj7ghjama","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"msvFhw380STXXsHTRMDMWNcB6YofXNK87UHquqQx51RZ9SlBw1BD3qwcimGbdRf0W+f8ImFgYtGX83sGR7hhkw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18qvzjr0pqurexxy8z4v8ndvtdcn0ar0s8uphgu","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"3/l+7/tqt2nvv/NcdFh9NwfcY46ZfQM9rsqICMHw6e8vfYsIEx7SvODVGD7veycja6aEGHfMRc4EXqluqHj+kQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1y7ds02jymhghjkkz84zrhs7hr6kraxakwc044j","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"rXL0UL3VxObEIQDJ0fH05wloMxrJe+fjNrs6+qbANS9B7B9jDFnRvTgXTMH8uqp8FH9Pu50cKfUScicVx59djQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16khn8f84e0m3u346jj2d8sfl98976evv7ds54q","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"qsrQoPYDy/C6U4KqHf5uN/Pup36xIJChNzqN0VHANU4XTJ0Qt/vFfd8uoDX5lxadd4AzfDmgkxV/WSX1nPsj4g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16khn8f84e0m3u346jj2d8sfl98976evv7ds54q","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","nodebehemote",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmZKLOncvSVPU64Z5dscvjUyhLT1ZhVXr6JmSyYPpqQh"},"signature":"lWe8UKLdeAK+ZpsNuql2n1NYX6371+tWKhqarOPUZ9Ijpix9rbV8n6iFsFgqdEhWn3SO7j5N0ZivAePMCXj2CQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1trpstmfjqzzpy2k9jzh3cgmy6yglrvjwwvzufg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"y/3C36WigLWzn/h5JVFGDZmzVxcDiSNTunHjkXcXUgtxhqxP0UJWDF0cf4l1YhoeEDJb+y9KL1Elk3UY0dwKOg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1pp7zugdgtcdyhpsap74zuucdtq2725ewkxm8fu","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Ev6/M3QrV1Yc+UMqrbk5DkpY9bnjuR2TrbCdfajW5KBRLJCHRi3IqOWsppSaPrtBYwfKYGU5t2PPnZPW7dyOBQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1y6fj9dytpllsyw0x664qksxc60yjnfqpzs49ku","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"/EyWyV+UXOkYK6rubpSpiFTAsZQszZVFCqbGl4u8ZUgRJ7VU/8leZ9OpQPAOeTW4IPcWmJi06FJcWIgBCNKe/g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g187ex0vp7qq6z8haluz0wthj7tvkn5s84a3s52r","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"P9O9Zkgdsu9qD8PKdKEIUz+ZNw8h3dI+nvpP8VqhE+Z6819A1+3rkiyp78eMTI3FulkSJcVMZIPq/25p3eaqhA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1yvqx9hsx2kcdxgngn6h4qfk50qvt8m8zs39nuh","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"m5Y0LUXuBOHf/+wUMO/NUAuZYnp3RgWyz3Rxu7Ctv/sUY6mVlY2ZQjvcEInIWfk9XYCpOJ3cvXzpIsX4+xamzA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1n3s0lu8tgg3wp087jexgxzvkmz6dq3xjecewv6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"v35WKiO0bIOMWeNTZJXnivYv8DkdnGslai6AoFk5pf57TyrWOqbqmZxUbmqBrwsxj4POFWkbMTt9u1Ts5Fzt1A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1u00w6j0gzl4ey9ygtzk7f58sm83x425vpa4537","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"tKpfTUhKHXEOBF7PJM1mxQEB7YKq9N735YbOIgemgB06Yh7LrY5kqCBnUP/WdtfddQdRoytONLANrKBbikG7BA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1um85z32tmudfd7mgf4aqh74pxh39vfm77ymqnd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"uXOmANVK/jzNlnxQ7ApPupdhUzeZnnew6mO1pYCDyGFD38stvZNAi76ZRPBcEgNlrmjhzhSO11IbDP6LJvi8jA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1c0rd9l4eanyxkellcdtxsdpa5nn0pkceaav76a","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"zamTI2AuwSedY0h+kKfcPW4OoqmLtT/GVccADib5elNVxggIn+2lsmAtBABLYd0NlaO9ro3lWYX1gTp++o5jFg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1t36kx5htq5tmgrc8sz79g60njztkyn40tacezf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"MSsmseK3nAtSy0I4Pp1HaiSzcSgW6FBlPCYrtgVKxeUPO9qPOtVY84oHE3JEADRzb+SzjSmzKyRxtIp/5NjwzA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1qp66u4826t5v2e9vkkccf8g555addyup3w4r0n","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Nl0fyrhL5wLH/FU1WRqgJPpw38DEBaT58hZbFTqjOhoIyWvWkwwmHJhXrz1e/Qc9tzoGTraBov1TgqWLXbPz4Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1pxy2an8065dwed7dazjqwdnn6clp0nlrewnx60","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"wtE8EWydVBxt3Gi0q0z4bTDAGm3T7ZnFUsHWXd2gPDZ6/gEqWmaPl30zzbsRE7Re6QhWuptGaNoOMwbyV2aMCw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1y3zyd74lwt5290ms33j7rqqf6tj0wcq8an8tq4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"MMeCF3eKUG3Z6FRIH2FVwcu5u1/2C9UNedJtqHgZYcMTmiiIYR1HMq1Y+wCMs/j1vJjz/Lf0jqipd1mD1xhYJQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jyv69weqzmykcnu6h6j66xxpl5luumd7ux4zk5","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"hmMr1ElZ3VHG9/ZFoawJwEqV/BR7zWkvrvytlSKH8bEKKPcWa0MLOPo4WM7ON0Vx/nwkCOsEQbfDrAWRVhBoCg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1mxsr5skppajxzvc639yn5tdhha7wa5h87tvax2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"3wBED14jchyyPqSh8U3Ed0Z9HgyoW2F81UbBd/Rqv85MMzBRDO3XvRi6zb7NBVV+EsQvd9Z5dv3X2UM4UDO5Ew=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1c2umezwa4529frnpjavrdmp0g9zck9qeyj3yt6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"uRBgppJI96mCgs+yFbpifTAJ/2oeQwrYib+NAPwH3AEVMbtscFQaR/CS8xIRHNHM4wohB87J/YX/2J1zmQMDqQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1quqmlm7aljtwtl9juj20y25nr0nfgy5xjaely7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"t0SEUH+UVzPXhNjQUfyU3vf1A5VIGzqdy9BEayJ8855N3rtNHp2TMo9dnDtY48ASz0w3X/irWvjhsGq4A3akRg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1mgyrry0xw9kasgapn8xt9gg0wctxc3363jfvxs","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"WfnKhGzTBGgjP39MwRVD2HTd1UCcg0Wtegs8hM2fuXpHUMJg/thkmONDx6B3Z55upTc6PN6vfCzxb3Kjj1SXAQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1veeeuleqf6ylzty7jj89hmhmk3vg2jgkpdvxxh","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"va9IFksIPHrVZbVfK/8R7JHUJQMU2GmaifKS5l1SPqIb547AOgK4EXC5Zeey445wT9c0aRd8T3eLyQiEHJfzJg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jkla087m2em707sfemc8ptyqtkhvhadk8j00ag","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"jO2roxFH3VNs3E+7fCwawdqRfD7nzzE2RtpuzaJZ+RFDgykQSHKKuvM5LDMemirEUkwDo8jOu6zrp4xii7YvZA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19c5vtgeyv4vkhqzjj2jdfzp6p8yqluy26asfam","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"7l3y+JdXgtsdWaNOVtinOs37L2M+yefSAvJyP9wvjyhcFUiiMovzedCyuAk0/juOmzPSTXvkaUCC4u4qLs+Kfg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1adjhg6dyt888qc5296qz62dyym722c6a3tfz5q","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"TrRtp2vaWHd0eMYf9xtpWxu2iIXaxtTqhyfs3OWrllMgUJjf9j/ZWa7ifG/zFbQRDPJ/cdbjJJD85bqUxCKEgg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1w0yfk5fsj0myxp0rz3zkg8knl25dqslxewf4hg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"LrSm8onRV89dSB+8ITI0ytCsw0f0tvr0lwV1VMJJ+6cOBZCIby9dCvwqNvdq9yIdlR1s2ISz/vgAl7bq07BZJg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rzk58e3yye90j5espejeh62vfh56v0tlywthel","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"l/vaJmLLGSEWv/HyyeTuL+cW1JeMrpp1WohSM1Rf8AxyjpZK8hh4PezbC8Xwtvcuqm2wqWMKBDTiedegp1fw1g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1h8xuk3zmym6t9dh9c4j5s9xv2mheyc5yh6c4cx","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"2AXFf/tKaR7l8S1rGm1MfJ23145ty1s9rBYWDQlVKbIKLMKJEpjJJ9qwBLJ4B2CEpEYZ2Bsm3rtHafvI5vJT8A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xc4k4k5ghyl05d8sjgwl2x3d6x6ykmz2t0utan","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"eWVLePR7561mexSh6uF7ASVJejsmjPi6zPQl4mEywpBUI4aAka2QkiazWbEp3qYnw1lSSJKAFL5FuEGnMFG6Zw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1yzaw0r2yrs5706m3tjnyslfxpg9rypwslag6ne","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"aqmTilx+RJ0tqzgCmPHMc8bHtYA24yQV3AjUEPo3AG9vyAE6jnyBdj6acdPKsmj/ftjnxFd+KgJ6XOTtScg4GQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1a4xa2asy9frxnfrersy35pkjeu0g6nsknn8qkk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"0/zwq7XbELKANn5L9JDzZZCu6q8UbRHabUHBUAbbdj4ISUkl8Ih1ejkMQD0AvJBBGUbic6/gfUVPB4tuCos0HA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18uzwfsdr5spjf6rw8lakk3kr2rcgptaprh40pj","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"9cONCcdYSN5ZpMPzjs/26GA2YGONYmlaIUatVodoHa0eEYJ2eDETc6ljtXOS5gglvicz9Rx5Ch5rnvrg86xnlQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1qxpazyvyz5cm63qa9wrm65kdylw66e89w6l8my","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"LBzPb2Z8qpGeSEUpqP8bvY1ufrIFNzo4BM3u4eYCLW4awnBsd9SrAdIwwko2O0uiiBu60Io6RNkocD4UCHxT1w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1prurfspawq6eme9nancq7g77fgys3w5nwf42fx","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"D/ow2IK2n6uHEmeQg4ODt/J9ho+uF9jSDEeUc008OMtPXE7oOGNpwl8W0ADv1wMyFNrR9dCeOBd6w7OrU1xLjw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17u3h0u36qp20pwggjt2cv3x90vsa2hw4lsuget","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"iBj9rdksRO2tX7eT0IQKQX1wPFMP66nPr2buUeZzDm9BWNIOLncEO/Oq1PhTaC8g+l1IcVuSU5FaHQxdcylBZg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17xjgf7peh0efp39kqaj8kxge34m5guyh3edw0w","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"KeSNxtZtti6R4J1IPat1nvdK54A8JW/xaJKpu+Q9cHxHPfp3/hpaibDa1icm8g76rZVm/ddbGQ2JGuUhjYR9xQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1mvl0ltqk4rn89phwff9d0zyztnlev5tj5dx5t9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"upZGHqK8uAUvTMtXX0Vr/Y+DakLeNks/s2dIGWLtp0VSI3fST/++YMIjdgYCAfCakFWiFVq5UKB3/E9UuGi/WQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1tazncdgckqtk96wcvkeemkhxnx0y7dvm6rpneu","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"sJB0XxR99jgSIkSPiRT3C2WMH7fH+WTsJ/KzlyKZN0kuJTFhBhS8mIpVAo3+BtQvXbTRFzFO+fnpJ+U1HUms9A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1c0vpq3syj7a6jgfxjneumckuhjjpg5tsue2yzy","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"xuPsMo696Ci0CggoiN0uV+43/epjV3rurfz+O5695BZYxuZ4iWVn1oyloqTmyyEJCGgyEaggQhWfG1sHDhmqOg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1r8fn25kggum58jr2hudn3hxufaestxwegkms9a","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"1ITDsV9kiuPbFeA/KfPiT9uD1/VbWWNpU2t4zl1iQ6kQ0duCvnI3y82mWloetdQ67iDZWpL9/TCqQ6NS439h8A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1kq5ld32swfcqmqrq89v4n7acwuplte8yzujgd0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ds8qwA4/PEVPKN4+qBbeMvhpPFP9JqF1j1H77KEs/ccMRyghV8xzjEO14FF0B1PVY1QuTw+NetU1+TKjiVQATQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1g05jkw9e9k9xf4p0yyj44gcs0ws95a2j9ufx2j","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"7iG5lQLcuVR2GBwagCxg8lX8q/lo129h5xFz/lNSwGBC0vZB6I1QXP1s9mo8z3OrwIZ0JYMPM/5CumWPaLAbBA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1wvnfgzvvq9fxk0zr6nc8py852peuxjjkhyze6g","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"+mbhEthJAXWogERIKQeqlmCNBnf+zJ5b7cN6OTgabEBIC2Uh4knoFPBt2T2TRuOlUMEndOrBLdQa2rp6VUX8zw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1mzh6lxlvkuv6a47ulffwsp9kgp4aywdvupedje","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Mx5/rdCrrS4CCBPOkyViV5PtpnYG4Rho/kbu9qz0Km9mt5tRqZC8mV9X+Zq3BWCD05otvLSbH5bg1BLaK0Vksw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ey8pzf8v9kepcm32aj38qnzfwpsmc2s5h9gjzf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"pOvrIxCyVe1YmjNsmxvQiSzF3pryzfy0uTEqxdaZplpGK+Dw8FSvV90TjXg0ehLJ8WclF4QlMmapP8RUi13lhQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g13ad3fl2cxxktpcy7vj92dzn7tf2zehghs7myzr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"xOgZ0j1WC2O7dlu7KplQtT2L5GNAhiuyjaQmlJ0CSRcbVD06/QeLrimP/azrkc2W12Qazly5Y3LW1p1aHZW/cg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hn8ga4a4drc4pc3hg2v6t2m7rxzqa6tv3udvus","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"iY9GAbSEuKfnpMrvZURy7wtMwtx8O3Rc36YHJzlMC7Jg0gu2GfpD9TtSI9grIvQI0gOFpuigSI6GnnzitLvpiQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1afqrj73yt7x2y4rld2n3r2ad5r2snq2l4dwzep","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"N5+GdCNjBEY/ZDap7KzfBEvfIeb2K65p2FwmrcAvpB5G5Ag/Hd3OH2IE8yLjaCLI8ZU8mqdxsqxifCtq7zuGcg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g13k5zc66cyrq5s8d2c07ver28cyjuj4fqpylw3y","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"4G8b8ExD5kl6A/RoaaLxhiJJHZbTSRBep5CS5NY4vZAk69NzTvVRkHzyyjuEP/+jfb2O6gbyLzt8HmrCoiY3Dg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18n0w5sqeq06t868kk4p2cu4jdmp9eftm54et58","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Ops/KrfXG57t8qf8eDnwE9OwsoTOn5fAwSKr3Iw/8KFY/76Ay8iIEVtIlu/gDBHbuw1FUEGVg0nabVOQfE+ajg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1kk5xmlalyxylarsx5utv803h5snv5tzqpswrtg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"0jUkhUOGfDoTNz4iN19eCRa930jVzlRNkvvK9S9K/JszdsWJMI1uxMn59CPSVI5pZAAU+yDUOyHq9jCzrFeUXA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17jn2pl8vyepw7qxtgyngu9h3urks8fggdq7zsd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Si4FZxkHt3iDTdofc9NYmg6H8fc1p9iIlFBrecXBCc4eIj2KWkPzFyR9MLSIO5WDQfA7SjX2qgD5iBw3C9xm9A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1scvku2lmpmwxhshga06hznl8z690h269a9srd3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"tc2gdJEA2Q5vuw47vTRpqAo/zoJMerFh8UIhcZdTwCxGtAx5yJebxFE1UhLJPM+UxU5PQU+41YmVCWaoT4zydg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1kemhaqjjn9mf7ejk6u3sws984a0gtxedpv9h2p","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"FcO/ZOJrlX8Uk0sfPy2vF4hUuZ5EmUZ6t2MeLXlSSQYdHerT2CIsm0RELmLVS0ZcA3vZoHtSydkWq38VqOMvCA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1aechl8fga8ua5vj4ugd54vr34u6s8lg8nm4c8y","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"usIHpOrjPMR63pwLe2sMguSFV0lpVoplkvcEiv6zu9d4Vwdhii+0I8fAypDVTVWfBMVwxtXPm0UiwagVBZnocA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15wtywndf73uusnmcl4s5ndeyf4wlgxf96tgyxh","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Lak0S27LWMjjI9fdTfWiqDwqCjR7MLKUyS+IC9ovRFMR+1gIj1zyHS+1oykexCTsPDYs+FofbEbsBswpiWwzXQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lka3902pdnx578hgl8t7hfj7xhfmg6exrf4hg8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"jPuoj3kmz659IkMe4qXoS1D9K/vmzDFrIlXApI9n2U83ur2DaauiETKwNpgZhDaum2tVOSKgT/Nk10VW+Hfd4w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1tr3z0letpht5a7cycfh59j0n9fnnz9qm0uv3u5","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ixF4h4R2u7abzsnRriWmkP/DTfUzJrlSzj6wxVsLILUI9tZsQMqSyDeFoH1GffOd+VhTCMGKgG1P/E7Mc5v7qg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1v26gxm4036ap6rsgffucvejrpfvddj58s2n6gx","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"OBEIe8Qu/E/WcVcU32EWrb0ka4VF0BqL6E6Lhwv9CP9K7eQMq5IiI2EexE785aqJwDQ348ti2UBynuFkjkwDCA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g194zpdn2p5wqrtlqlklgsz8nc7wlkgu7w77smea","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"wdZrAmPvgrBbxkk0x6Fp/Mtme03v/tjjGtxTTWs3118t8z8wD98O9QgvI3KXgRAT24eVhdlz9rBfvigE0XdG/w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1cvtpx29r3uhex82d78x83gqfrp0r75t4z5q636","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"za7+uYP0A6WygbiwS7xxU+gdSzqVT0mr8DHoojFqfz4Dk9BHMkzZp/DKvTHtlsVIq/ynAotGq9nCy+2tGj50Lg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14kvvvre0mxyxm9un4957cf7lt0xmn6m8tlgu8w","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"n1uZNlu1rp2CWItc/OsjweI2HgvmTqQmKcF3fX1hcfokSAR7eiKB5U9rFBmb07VYdsqW4QfnDq9iPxK/zuoYOA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rfemtj0ma8x4g4nenttrfky9r6sq0lrt38d3qp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"mdCaP7yH1y7mFk3MVuEAW5gZVvfRuU0nv0IRNE3eML4GEEdatUcb+Rm2YY43RBX07M4HpOptUDxFKsao8Anu0g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1mchgyekkfcxftsjqyjdel80fkc34u52jsrw6ve","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"E6Oi2pnBUug0vN1jcw+SQ8uQ5YB35vD9cKLXbfQ1fjAJUShxVk4I5nMwGXk/NePuLehLGUb+9jGHxQk8d/zS2w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18gdc8r69q4j0etundqffqrvl9zmxla8fjasej0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"5WUdqO7swcV4JyyKvvL7+N9beJmDfs2rqWhQNeOgyFBUo/tYUyUWZJzPOhEAG3VWiXOql3PJHtkbLrUABDqGCQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1w7tv69670w2plm4zjav9zxf7lkn7cu9tgz6jse","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"9dkX4EgU12jsRBg/SeuiwjnV47ZNRyFDldL/UnQWZ99+bH/e485hgTAnCthb+cwNcIxQuxaZiBePmtooF4eBuw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rgaxdlwq2gffwv2hxv4akrxsxzxc2h0xe9gxgy","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ZbwyacojNuazWJd102D2w3XDyLcdaZFBqLUWEN7ea+Mi3p2iUaQIgbyjrnh+viKTMR5MWRIokpniIg91MmZT0g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ppe55654s27d8qgrd27qk44xm07e6584d044n9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"KMHKNfXN4rbBs1eeI73FoBUflrMW83oN43NNxvNtFC0xuQqRs1GEzzBPVHP0Nypt0ghq//PF7bZc/MSdp5Yxnw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1e8c4g5v5pyx2nyp2fyqmypd6ua8qrj8wwhycda","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"vH3hLNzL5b1MpDCq63a41owmDOYqQtvUVLlD3Sf9OgEEfwgxBOeciCTPmDnIgyjhaDzejCK88/+stxMIJPfOyw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g188e7ka70jnyt9cg7l3j6e3sp5w2kx656gkzqdq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"O7YqnSNJI0aKoio0S7WtSaLR7SmKpmSJajIeXh7ot8AXtcx7eIaSaUTZwHmz7B/ICjit9UUTkio8p4EkpddiTw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1p50t63tm9dqzndrxvsu7n6gpa28fq73npcs5tj","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"yqBnEAjwDr9UZHxclVaY6DrWKxI6FhUzUQHA4KBvc+0CdV1gnFRDRzsBHMwixmOyOXwqHkekktH/+F4t80te2Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xkndtqp4mp34l6mr38m36e8styec5we2y383tr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"gqlJKTaTkMLkhNychMDqbUmSH160/5FAJqjI+CxKJD99wpEoyo7Dw7OK3s5ar2Q6uC3isxRE+ZnyaIB3hM4SIg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1wrxfxmha4p2rpqdqzt66av84cztu4eyca3sf9a","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"UgmhYlkMTqKZiZ83sZ9C0OPK4/NJzULs/NkG/ceunUoaY1iLM0gCVgrD9Vvv6ZZqwa1oO2pnKIzyzIey/hNkJw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1mkkra64f2mwcd3x7rzxmavsw8tqk2ry46c8kw9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"z96m4L5XKpe2mh04LmTGJnZJz/HFa1jTJQw3Obp5te13i+M3kHjO4++nSb5XWEwhwL8UQmO/0H4J9Hs4kJamKg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17pje280tc9q6c3gpjge9gark6cjde46ggnffjs","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Puhrzk22XjEtwwd35PkhMSxRdNn4bWIHJsQW/gMY6EVYuUsJWrjsMssjo7Jb2bYLKpLzuEwwHXF4aYCP+aRGlw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1epykgkj8zku8ctpz7ax9feydffm4d62pamqadm","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"mxknxwL88iHXIl1Qv5Ih5QwV9bUHHwhnsjU0xOB33MEB+D3eqiDnN++o2/1zMVdgIJVxWdir7w4AvCdOEddhGg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1z37kn630xdygfc2qh7x8ufga3szj9yzjkx3frt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"GyPEovEisZsVSA/0C/webqHfyjht2OPLavq/EfyuD5BkLsf+YXohCpNZC29jsLBrw+Dldj/iPTVgEF0BJDwxJQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1cs0g7jrvdfl4sk2z7306gka2merxfx5rm0wn0l","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"KUulEpMugRVYxI7VtU3K3ONW15726MgFyDhxvMHDwO9Ow/khyV3oXFdXsYewfk6FCInMvQJkkOYP0L0HzGhWCw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1j6vkx4dwxyzr2hnlt6w89aram46f3h9gkplkcf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"1F+gfQzXECQCPH2huuxjB0nwZf/8rKBshuw189M+ZEpylJvsoFEfFPh9LywoiAYBkHqwy5KF/zSgGfEJLkXlaw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19muz449skz5cyykpk3a3m04hnd4shgq52v33an","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"vIUY519J7PvsFiRutZAu+/wTwYhMsonTJFCaOTglIhRQEsEabytKBtcb+XzeipBCex+zmhtOprNZk2diMCv+kQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1u97lhu44d76j6l99rx5jfvacv48epzlxc7nyy0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"q7P3Mn7W2tH6wUEy2hbT2gNlQtWEhc+lAx+h/QuM4XJR5Cv4sNRPu+tAmoAN84DcGcQer2OpI4JW5l6NWt+khA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g13504jhryesff5rxly0jalwvv2eu5r7yqdp3nph","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"qX9cjuHGsjFjsOgJ5inI6mX2CdxrPtaYQajw9ghCsjY3I6U5E+R9xf4Buts6S8d5ImDNJ8SegxzU4wrtDifmEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1epe2sm7n4lx8r75slfzdv55k7fde09j4ffxwav","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"GU3vi8yQPA2iQx28m5c3FDU4ydHCOqeyaQtb29wUbrkfYx+DFIh3xHVThQy5BPlRRiLIHWmksLWzs7gGacRjmQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xsc7wf5mpdsgsckqp7kt5uaft8ajghx4a0mled","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"JkWWajDYNUhuLQx67lfAy9t+5Jss4tKe/6V6yXJ+4OEqcND+1/2Er85IeZDy4GNd1ZwCE9Mqq6bTG1RYayW/iw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1aae4uxjhk8gt0jdl763zpvqenslaq2v42nrd4g","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ji6moB4RdJuk1JCkb2B9C+JZZ6IkMDNibH4kzDzM475tCOcWSJAnBUbBgIQN2ow4/AyeWVDuszzKhfoOYZqz1w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19xavcncrelhf7p6rdxldlwqjajgaqjr0zkck6w","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"fAGTHksz2JtQJElAdHq6r0hhqKf7SaDwoSzIykX8PSQJEHXHQht5l0chxM1yPiSVEtGo+Oq/52CHV41qo8Sssg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14uv43u6p87qmj059qtykxdck5qlwfrvwwve9l0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"aQMFiwS4x6HWTKyzWedSuZjxk7DW/4xO6eG66Qcs4Ds6po+YychJCVRKjtmrZnOMLvV+HGX2788q8SZ0jiz4xQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g175smhka4jn3rqlgjwuh6qs2h5ascqf08q0xcfy","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"rHLxMOviDG/AgiO5Jzp2tBSWYscEwxDGQVtCeiw/xpR6m0rLolMQMcEVmfg+j/p5EzJv7So3UUZXTj+57Z1cIw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12lkha4pjtj6ss43vrk3hy8lzamf3njp0ce7ts7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"yGoshzKXIcDgqCnBdm8+qUko6yHlqIEQ6Drd4PBvLUgfrSnpmYAfy1+TFw2jaxSRttkZj+cA/diNaxT+kOgf0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gmmlutwzwnzk4p9n9zv3wefzvnp64ns3r90j3m","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"/ZeFRZdSarvfJmgIJvz7RpPEG9kivtEJdT8a3pgmCXYUZuhYUQvSP28gvGchfEVNfV/cv6PxWsUpNbrgUXG92w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14gkt0unjqyr2s6dn3k6tw9qhayjayy2398sjep","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kJ5nz9S+SbD+bvnOGsZVgrRgA2jhnVEPxOfqzhZ9Kr1RpuPLvL34BTQu8OdVLSB7zPgD0W/TgfwhoVJKksnrvQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15r3tkvnmnxwxyd7qeamxqj2udffshzsn6yrhq2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Y11QCXD1HUGlU2GCZU5WdjaElvdqujD5O63wa5ro/WoQa5ouQqsIrVZ0te1c43mCqx6dGOYQLTaKh++Oo2F4Lw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19slatqz0205v9nkte379mpv2pw2hfjwqg853ls","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"pvwhGGiRAxXAnA2YWNKL9MV3T8+WumYlhl2rRasHUEpSV9jf732KFKS4sPIj9BZ62YAcezFdN2AyYdvgF1Bgaw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1myrxcuxzy6adygqhs2xm5l97dvn7vmrf95d0ep","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"NHL6nTjbXuZxQ1clMagfMBqJWO5i2U97siXmN4F83hIoSRdS6jT/IYZIke8ONLxZ9yAkvICUVuzAAB6IIZDbZA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1duzuxq53s5gudfm5hfqpmwqpm2e7fs8nzd5mff","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"himS6rHnKRStCUC1uXajIXvlTDSNcT8hWeZsK17UPcRhUR3V5rUDA07gZSonERiRMAKcjj/Dw1WSM5A11nbWQQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1c2fx64p8x9nw49cymp7y0hmd0hpqgdlutnr2tr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"RMEJD81506sh+mvib8yvkXlBLtDC9m01vRSP7bdEGt0STXIWWfEIhVsxUZ8Mt+QyB53s9rqMTaTIe+vq3Sh8jA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1n846eskj9kqkdm8jc5e2lr7rg8jjlt6ztq2w5x","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"nCK6lt+aUUcWTzMcluZbwIZPa9e5Bb9mfsxg/j3xBaIonKEdSrhQ+Yz2ax13NvH7QnF0T6625bfz1xFfRjs/+A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1cyn2m25pk3k0c3ux8qv2ylken3t095q7a422ln","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"j/l71FwBWs+uHM+BKet4c5hDyHmuHaQAZ5o3gtg/ytMpXoAzJC/OvjmWr6qHlgi042NZk5dM1DCm64fe+r+vug=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1tlussdtczyapwhzzvf9glw2jsq4kxkdgqaruhs","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Kr+S7d7NFaRPfTHy8p8cPCT4JISFxL9NMFWDHDlrOhlsGw7HmIVi7yPQcYXKspzPi3oiDF0PFEmmjgOE95qolw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1wxf0d2gehug6nexh05surmt7mmuz6chz6n42vn","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"YRAVr3Jmj7j38KE1MBx4NongjmWcsTuBV5c/eiYBQDl9lRLixTvRsI+2xqdi/SFVRXDFzV5sojRQunB1a0y3lw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g186durp7yhgx3jks7nfqgpd00uh7nrzktyaf5z2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"DAoaQBJGLmDPbiP42UZfH8EMn2CgjtM9F7iOay5qqFUwmASt4fOG41kgev9+o2kIr00aD9fH0tmN079mNLCg5Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1v30zuc92rmu7jdape6t7ht4fm60hn3s05tkkkf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"SibNmqBb21hVF7CsG7rX2TjgvNyXRHeSTGAvIvmiPQcWVCcBf3BdvUB4qQfNJpGJmxD/0MigOxPHB7Ay8tdccg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1qd9wzpjt04zkp8zs0a0970puhxxys798ctcaaa","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"cJTYcyzuxCvHgzr1TWgTjvr3OSN3C8Wps6mFE9FcpHtimkYSGIvRbCi5Mrpy2zB0x/DMs1p23eALhtvOceuqEA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g169a3myysl5eevk8kp3rtghf5f0a3ukptgluanf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"FkDkbmQ6qqkGtDoaXPcJkC9hQTlfTk4FFRMJRYnOCwVM5Ps0/z1UAcm+98K2Cfic30zYqwu4Zv1KXL+jIx+INg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1e65duskwkpapy6m9axma47mx7anakvshmp7prv","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"KYEIqrPWWaHdx8brZj8dS1w/Tfy4y4GxJ5UGSglvzoJoHiXFNtj9PMUvCx8NRTdkfUUd/WMQZjJpxVkaRynYqg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18nnl8takg2zd2dv2fhlrd8n5dxxg7gfqgl4mdr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"rm+QyJmew4XKnRjoQqrJlZ7DV6oQ60Ah4cm1ONreLspSU0SEzVz+WqFwAGl3QJ+Lz2q/Swb0Tj1EFD6LO/aZdg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1e88frxdhkuux4v2f28zpl8lsmfkta4ntqf08ut","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"wuFrRAAl3E6ImlE9bUMPJLpXZUgLRKZXjMcQxvzMEgwVhbPAoqKjL/uo7WNi8mG5CDwJ6L/BsEZBFKv36Zagsw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g155k05dq3rqt6x33ymhljdst8jtpkwmmdynkfd8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"TzF6yt1pB5ho/0Y4PULuht1bzKAyqw/JlUa4Vuqcr4VqicAgwV5pnjMun9lvHrgB8J4vLFgNHr/XF4q40YXWeg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1mqzujff544eh3c0m5y5wx3tpjgp5f2q0yjnw60","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Q0/Ap3EmNwuvEnpX+R1i7JwZt4tGYAgyLP82FPyTPbkqlIIcOsLNxTN/qY1Xk2uAgI7ULe/aLdrL02B/EWSINw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1z7mwvwuce0ynky7l6ju0u0wc3c476rcnkrszvp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"4XBO+7lbch/n0jqRuwxFJC52YxlGrZr7Lvx6CyuDbkM+1j6Fsd7HCPGOFA+m5tkfYtcbn3pq4gDv0k9uK62egw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1wsm96kpee27h3m5rejal5nd05l3vrfjee3yjg8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"TgIDzYDAAmfmc/1zwxj0Po7z87RNajPaefjpFBscbL9WYPN+lsSbppKgkSx67beYnzZ0BF130aZjpjJDe2kNvA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g140pexm8p83n6rlkn5rtk86ghq2l9uax0fh9yr6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"9zNpVZTAEJzZFou4TqmHydo5t+HE1do0lQa/XOgEp1wDXdoWIJnRRdnzZf6LOrJH2SVYGNOrn5qZEqn/F850Qg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hvkje80mqqnjjwncha5rcwyzj3ltx77k5va5vh","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"MFmpydm0KV1Z61EelSex4FkxkU6SXrLqaihpAqWGZWYFKw/uN6f/YHczE3dlpa0mbd8q/ddm6ai2Xy5EXlJkHw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14k5vtx75429muhvnx22a4ptwlgk6f7nfc2scmj","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"M7+y1LeI3e7gJmqZXvS3J1oganIhFNmGSoFyDYw2U9gyOpxR27MudYtylKB2KtUzyP/hN4ErI6wgjgKknYX09w=="}],"memo":""}
