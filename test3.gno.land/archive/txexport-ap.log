{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1uf5uek8ukhmgrrr7rjwtuxru788rv9ksatq5ec","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"n96sA7IGieJnxV2em4U/nTgKJKdfKGLrGe04RqjOe2cKjwpvXo1CbTDXCmXde/eLXQ/8sxqWaCNYzR3VVrZIzw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uf5uek8ukhmgrrr7rjwtuxru788rv9ksatq5ec","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","upholdpiecegr",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2eEpck7wWA6Klr2DTUp9yNyV/GJsuXvVlfqsNyUfFp0"},"signature":"D7IpXuX6tWEBkktQv6P32VajSOGsgMFHaQZUhNkvqWEBpYp+MrvR669W78a4eXaQCyOitKW+6NhtNyVb9y/qeg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uf5uek8ukhmgrrr7rjwtuxru788rv9ksatq5ec","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["upholdpiecegr"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2eEpck7wWA6Klr2DTUp9yNyV/GJsuXvVlfqsNyUfFp0"},"signature":"Gj/cjsROxAgVrjGAlyjVL3AoYpJ54OLH9vttEnyQXxwJC+5z0IfP8rXuJPh7Det2z7L4MJnMXrx8ozfW164gOQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uf5uek8ukhmgrrr7rjwtuxru788rv9ksatq5ec","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1992","upholdpiecegr","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2eEpck7wWA6Klr2DTUp9yNyV/GJsuXvVlfqsNyUfFp0"},"signature":"4JeqY03TUtqa6P0CNxFvhH5CoByJP8+doJCy7b8DrmN56rOdONU0I7/1h5Mxum3j1pcXGYTsiDK0awjpmX16sw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uf5uek8ukhmgrrr7rjwtuxru788rv9ksatq5ec","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1992","1","1","g1uf5uek8ukhmgrrr7rjwtuxru788rv9ksatq5ec"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2eEpck7wWA6Klr2DTUp9yNyV/GJsuXvVlfqsNyUfFp0"},"signature":"L9Y0rM0f1o6595zle6DhLwiDhlXw62r7hYIzEDNX/PlCysrTGzEX7ZhN4Yxrptvbt5dl33PQBSE2oplK3T2X+A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1nd2gu83juqrwchrzy6l2rxnjczv3uwqek9apma","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"FzXdZTdcjoRvYVl5RSt+E0WCVMW9p97kskCK7vCXjvduG4kr/xmJfu0ZjDjuhQ976pvI0GuwVtN+zhJVnaoxLg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nd2gu83juqrwchrzy6l2rxnjczv3uwqek9apma","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","negativenaturewc",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AktLEjs/Mc9HZROSm2YBCITIY3uknk2OUyNPGaeoYQ0F"},"signature":"GtA0Hm7oapt++N4faxdAluHDWeAMUwNDNtfFsbyIVxoQ33d0BD17u4M/8YjFcqKjNrm6irfxpqYdkEHyvJImFQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nd2gu83juqrwchrzy6l2rxnjczv3uwqek9apma","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["negativenaturewc"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AktLEjs/Mc9HZROSm2YBCITIY3uknk2OUyNPGaeoYQ0F"},"signature":"vVw3qTEYXqf8h1UvPnQEx12uEHtxXjZnKTg8XN3DqrBECZWgBFM7PZCij3Y5jjPzp7Yl6pMu01NkOHJTidsyYQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nd2gu83juqrwchrzy6l2rxnjczv3uwqek9apma","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1993","negativenaturewc","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AktLEjs/Mc9HZROSm2YBCITIY3uknk2OUyNPGaeoYQ0F"},"signature":"u+UukklwTzUswJDBqOM0whNVCPrkwB2PuGA31nXQRvNmE+L0ULzQaPclidS157HBWsa5zQxIGg4TrjyxwKEn1w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nd2gu83juqrwchrzy6l2rxnjczv3uwqek9apma","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1993","1","1","g1nd2gu83juqrwchrzy6l2rxnjczv3uwqek9apma"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AktLEjs/Mc9HZROSm2YBCITIY3uknk2OUyNPGaeoYQ0F"},"signature":"Pq33vu5/ZFiC2R5RXfM9xGmR0mmrGBfYaliS8gRf+0kbWmk5K2C1laSFZ3M0/qXmcxRp7d07CGFh12kILlFY/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18dseh30xa3fquj9f95q06jd8qkzd7amgvm6lpl","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"mjC3EN3SC7BdPee9qoi0yxkAs4+/gqGulBtUkTpZzXt9qalkM3muBzRhPIWGDsxiIIPWGnx7/lea9UI6ppZ1DA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18dseh30xa3fquj9f95q06jd8qkzd7amgvm6lpl","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","chucklegesturequ",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4TJfixFF9odvmW5cEUy16K+FKvtT7sjS1idDSEN/62/"},"signature":"U+GmgykoY05y3HXVFssbv8kwtnMlklkYwbxmxNDuRFB2FmcmnZPuXdvkGaF2d54G1MbFBaEqehQbDP/Qi3OiuQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18dseh30xa3fquj9f95q06jd8qkzd7amgvm6lpl","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["chucklegesturequ"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4TJfixFF9odvmW5cEUy16K+FKvtT7sjS1idDSEN/62/"},"signature":"5IQ4GUuqBFzejNt6nm8+xJQ8YMplWvsJXdlw9NLo0uFKAcDINl4NDQOTPphJJ83rbdm4agF8SYC2UHCMS5Gjjg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18dseh30xa3fquj9f95q06jd8qkzd7amgvm6lpl","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1994","chucklegesturequ","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4TJfixFF9odvmW5cEUy16K+FKvtT7sjS1idDSEN/62/"},"signature":"/5vrXgucoru1YYZMj5IUEu+JEGG9Xy2CKWPgxQsCzJQHmmMD8XJs1l3DQwj0F4yeM6iA+Fb63/Iuyouz1lBWzA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18dseh30xa3fquj9f95q06jd8qkzd7amgvm6lpl","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1994","1","1","g18dseh30xa3fquj9f95q06jd8qkzd7amgvm6lpl"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4TJfixFF9odvmW5cEUy16K+FKvtT7sjS1idDSEN/62/"},"signature":"Z+Bm6v1o/2+7a6kdC7GJ3rFePY/PT+3N3OfVTA575Nk1CMeuE3kbZXFkyJuu9Spuim7GtLSQ+GXPD1SKWVTPdA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1p6yhjklyy099gjtljazwmtu4kazsgupvvjtt82","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"J9itRCi9NRxKsAXzC51JtcDCTHvQs5e0Z2V2SNjKLUlP1ZISXCAp87ymlEGNVzpgVLmajpHySp6M5e0uz+TZCQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p6yhjklyy099gjtljazwmtu4kazsgupvvjtt82","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","atomdefine9g",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alnx0bHnNBxzlAsVSlF4bVMqetXCrGpX+UGY5yodI4I+"},"signature":"iPimWBG+HSu74tH6Ygw6OTWkrKrlsQY0Q6nHu4xrf5cAV0unfE7OKnL/9aLoJvteswfTNxjwW0TaoihWtQ76Kw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p6yhjklyy099gjtljazwmtu4kazsgupvvjtt82","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["atomdefine9g"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alnx0bHnNBxzlAsVSlF4bVMqetXCrGpX+UGY5yodI4I+"},"signature":"1Y2i/lzj0hvKS52Yx63VRPWStxGBcWwL0YSD8Eb36TtvMNsd7Z14D+6VaclIAw3yl3cqcT9MrOVKrZChOD8/lg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p6yhjklyy099gjtljazwmtu4kazsgupvvjtt82","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1995","atomdefine9g","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alnx0bHnNBxzlAsVSlF4bVMqetXCrGpX+UGY5yodI4I+"},"signature":"iTieDdJ09XhD/hPw9GHklFqiNji9/WzaSjkq1NGgsYQR2C9MOJKPlBeA2mfv0Qajq0nlIdyXz9pvUkSGtLHmTQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p6yhjklyy099gjtljazwmtu4kazsgupvvjtt82","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1995","1","1","g1p6yhjklyy099gjtljazwmtu4kazsgupvvjtt82"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alnx0bHnNBxzlAsVSlF4bVMqetXCrGpX+UGY5yodI4I+"},"signature":"o2QcxVa3I4VDVLP9PUCB+sb9dnnXSIEb8wOUa0Ci6aUmyGVqOeHQtF1nFbisphW0Pp3yFPrTCnUbB/lnc+m9nA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1k2zdtz92qqfnvljwrnsd0gl8pkcegvtkqkz534","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"RoknEdKNFi/mNmOJYmu727O72mBCGH4Jivx6tnmlD18l+A+UmDhFZHiyJ52uW3XDKZNniJjt+bOLCI1S/sd7VA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k2zdtz92qqfnvljwrnsd0gl8pkcegvtkqkz534","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","bannergaugenv",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj3u99BRpMqEJnWUZq/6TRQdeffahxYEXShjtJBOf9ke"},"signature":"PWC/YfNvobfnqLxLkodDjL+t7nfbdYlpKLr+3jfb8fR7WiJ6/eZfpGpAnfyDCQLjpnr7JBBijIsduMB172LoIg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k2zdtz92qqfnvljwrnsd0gl8pkcegvtkqkz534","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["bannergaugenv"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj3u99BRpMqEJnWUZq/6TRQdeffahxYEXShjtJBOf9ke"},"signature":"/0LbkeKWf0nrofJT89Hmy0/BjKVb1vZrEcLZgPLJ6fZczNzjtayqhAiJAqkW97wxTz1Igq4iPK8yDFNCZrphuw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k2zdtz92qqfnvljwrnsd0gl8pkcegvtkqkz534","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1996","bannergaugenv","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj3u99BRpMqEJnWUZq/6TRQdeffahxYEXShjtJBOf9ke"},"signature":"X/F4bZyWF4JkzdTXIyczWIlrGN1HsOuTVIHfswZyHNpx57F8BbSwwlzOYpaMXW++jOSiiFOUOM/MXeIyNaaqdg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k2zdtz92qqfnvljwrnsd0gl8pkcegvtkqkz534","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1996","1","1","g1k2zdtz92qqfnvljwrnsd0gl8pkcegvtkqkz534"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj3u99BRpMqEJnWUZq/6TRQdeffahxYEXShjtJBOf9ke"},"signature":"eCyqDXWrboZL5GiFdaiOxpQVlG45UC3ruFKzQFBViTwecAoVZUpmNOTJseoC3xCTfuTvyuJoEo3m4+/BYv85yg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rel2lsm5zzg0e984lstgvky2hpp9x7n6etddkv","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"oSN6y9y0HIX4jFJuBxyaL3cnJKYZGRdWmfXauVEjYl9DCa4UeWF+Kl0WQR66Wi5Dfxs9ZRocG5qRnmAmmFretQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rel2lsm5zzg0e984lstgvky2hpp9x7n6etddkv","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","forestobtain0e",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhszYL5zvWuI5iEw6fj/qFJ2yVe0IronzFu782tb/gat"},"signature":"PIzU2Rgins7j8T3CnLxKe6xtWzexgkDwrP024DXMa7QmcDmQpxmzU5Z44QuVNrd7TEHppfe/r51hP6lsQxETnQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rel2lsm5zzg0e984lstgvky2hpp9x7n6etddkv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["forestobtain0e"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhszYL5zvWuI5iEw6fj/qFJ2yVe0IronzFu782tb/gat"},"signature":"DpeP/fLwu98GUzpsu49wCzo6LEQ0/AJK7f8nfaXd2KtjHKNHa4qkc1/E8VyEDr5Z/xQOckKcjxnL/lOECJzvFw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rel2lsm5zzg0e984lstgvky2hpp9x7n6etddkv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1997","forestobtain0e","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhszYL5zvWuI5iEw6fj/qFJ2yVe0IronzFu782tb/gat"},"signature":"CyR0s5G+IkGFxAIFvKFD0zAMhR1wvIcUApkZX6PT9hJsjtsQ/LUYhNGG+T69w74b6iL8IgIq9c5Um+PIM/qs3Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rel2lsm5zzg0e984lstgvky2hpp9x7n6etddkv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1997","1","1","g1rel2lsm5zzg0e984lstgvky2hpp9x7n6etddkv"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhszYL5zvWuI5iEw6fj/qFJ2yVe0IronzFu782tb/gat"},"signature":"OrT77RG1YCKAnPpxC6gyAymh8SleYgMnDrspOs8dmrZ39HrOnJK6n40SaTXyyxWsIyqHUQjm6VTrZ6Z1CDlZOA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g189856w47fpvw2gc237ys5e2rtxlwdkvppv5tv9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"97whVTdB3ufEO3pT4ytH0OtmNgdo5yQwj100+T6iZtk0gfyaF063WywCet1Al7e8RYY/X8eXOxbxXsSWzaarOQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Faucet","args":null}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"Ya3NhGbFoEaSBtXeF8M0oQyUPuSBiRg/0CPeVWujSaYPL5tIY9KaKJyCBGWzTqZuga1QN2+QhG+NPqs5b1A5Mw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/escrow_03","func":"CreateContract","args":["g1c5y8jpe585uezcvlmgdjmk5jt2glfw88wxa3xq","foo20","100","60"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"PcmdCNony0HO994P2ebTENrTVX+EpjMPhb2zb9KD9x8Q507KFQmxZ+V2zHyVNdkpxMXJDBfkW3oRDJ5esGxi4g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Approve","args":["g1c5y8jpe585uezcvlmgdjmk5jt2glfw88wxa3xq","1000"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"OdID3PsDNN4CRDCA7msb6RgwZZ2QNLKSIo/M2Yl+EaM3xEOltuW6LAVja2bH0krvn1NMFnRB6IJNEuSJOZHDng=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/escrow_03","func":"CreateContract","args":["g1c5y8jpe585uezcvlmgdjmk5jt2glfw88wxa3xq","foo20","100","60"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"nvtBEQGX7eejayP0GY9pZtQmFAwxdQs/i+QPQWYz+SB1cE/8iOgYRg06HTsWo8BIVS04jPokFfVNIP6w4cUWtA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"dr","Path":"gno.land/r/demo/dr","Files":[{"Name":"dr.gno","Body":"package dr\n\nimport (\n\t\"std\"\n\n\t\"gno.land/r/demo/foo20\"\n\t\"gno.land/r/demo/users\"\n)\n\nfunc FooBal() uint64 {\n\torig := std.GetOrigCaller()\n\treturn foo20.BalanceOf(users.AddressOrName(orig))\n}\n\nfunc FooFaucetBal() uint64 {\n\torig := std.GetOrigCaller()\n\tfoo20.Faucet()\n\treturn foo20.BalanceOf(users.AddressOrName(orig))\n}\n"},{"Name":"dr_test.gno","Body":"package dr\n\nimport (\n\t\"testing\"\n)\n\nfunc TestFunc(t *testing.T) {\n\tprintln(FooBal())\n\tprintln(FooFaucetBal())\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"29k/OAIUP/4RPMY68/ma2lr9+fbUXGmtyZes6uvwsnUpf4njTVToTEFZ+eEBAbdZ4aMzaeZaaPBam3w4XWi26g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/dr","func":"FooBal","args":null}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"tTSRttd2E2l8cSM3Jr2RitcQA1uj/an4kZdAs7ff5AA4V+/O74YA1VjDJeipqcw09oCTVZtzI8prjIPncHyMZg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/dr","func":"FooFaucetBal","args":null}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"g0EzsHvn8xDn7DMAuw95RvDfCjSJI0DsOB36zoZQRkgs/C+mr711RLgTkQsjFRkB2d4XYW7kvy/ORVsVLiMi0g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gzuqgrrhaysze3zen2dfq24l8skytz60fxev47","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kzMUI4/Yrslky65kibvMPoQsZEQ0lDFNHGQiI3p1He1BbVe7YC22doHUJ2Tu4SWkPsxH8ydATVTpBSqiDjMDPw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gxyu09542r2gzkc59u6d3tqfd32axt2e47mhn2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"/rffsU8Y2dgqr1j9iAm4JstmKh8nVJAX4Lm1cALPvFANfXXyeI2qcoryeKT+1R7t2XbpeH+pzXMHIInNqrB7oQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g190828sv8stuwtnjv7z0qfjwpvwrq2lylu5u02m","amount":"22413035539ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"DBbVynA+SdQ6BzcyIjvtss8iEJeuNwdAyhXT0CjpPbF5a4e64j/XJN/yhtOiZhAGE1H/bgWkODpAnKQAbFZYpg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g190828sv8stuwtnjv7z0qfjwpvwrq2lylu5u02m","to_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","amount":"22533035538ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApIXx1LXAJOqLGXo0GfUP+5IxMdg0jKynb6/J/Wu8iZj"},"signature":"YM1+ZD/VSKbCxbu5zU3DVC2urSHWVGXv8KdTdSg2oCZt/4VFQksrWYuRzx6A4vLrvQ0dZw8Hs3wbU6kAARqEUQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g1qv3dqyw46fut94z9t90jka58saw2e7l99nzqtr","amount":"22533035537ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"mG6vVJ2ryxoVnXIsVbwGw+vwZGs6MaliKCNWA7hZmesJsq2QTBDA31kMDXNKMxRbvr6x/ZP52jLmW+uMp7bNDg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qv3dqyw46fut94z9t90jka58saw2e7l99nzqtr","to_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","amount":"22584893282ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3Tw76GV0BAtfeMytcN0YmNQsmhocbe7kMs7sCF8SJVx"},"signature":"eC+zk2vtFUWCVX/G7NVI9R4VkVOM+euajWkWzz1CRVF53mY/1dwR/xqrh/Ix+G2sCTSoQDK7i0CNdbODywxo+A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/social_feeds_v4","func":"CreatePost","args":["1","0","3","{\"title\":\"hi\",\"message\":\"\u003cp\u003ehi\u003c/p\u003e\",\"files\":[],\"hashtags\":[],\"mentions\":[],\"gifs\":[],\"createdAt\":\"2023-08-10T02:49:11.897Z\",\"updatedAt\":\"2023-08-10T02:49:11.897Z\"}"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"1mvgCs1/JgkqJnoFYPbQp8Shp95H2gQK3tnfjTk4gwtKaj3YQMjG9lAfJ8QnOFBqcxbOX/QaESjwXKzgwEOCcg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17n9hpv9h435cvs9x4q54f4phq9k6c5yhfw8rv8","send":"14001000ugnot","pkg_path":"gno.land/r/disperze/register","func":"Register","args":["stargaze.gno","g17n9hpv9h435cvs9x4q54f4phq9k6c5yhfw8rv8"]}],"fee":{"gas_wanted":"4000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AizPGnvzkloh99SrTvlOvNtmWZx2EfIOAHx9L26gT08O"},"signature":"Tvy1gmibONsvzVcgF3SFjBMsNqKpSRCz0jFmaVqSKNYR8eGELp4Jbop6z6YpkTgDf+dPQI/v2zbPEA+EA19UMw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hlngpysh2nva9skzjq3pg8g7pspj26unenwuj3","send":"14001000ugnot","pkg_path":"gno.land/r/disperze/register","func":"Register","args":["cosmos.gno","g1hlngpysh2nva9skzjq3pg8g7pspj26unenwuj3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A80XetD+zz/os+xI/AcFI4DyzjW5N4haYC2OLNBn8OBE"},"signature":"0G7G/xX+ka8kyxyLU0mLAc3naN5kc7bjeCnCrTueg9obZym+EiCjMIWlbfhy5qJhvjA56g8ZNOazkx1swegGBg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1l7nmtmzptycmt36lrju4ypum2yr5zx244c52r3","send":"14001000ugnot","pkg_path":"gno.land/r/disperze/register","func":"Register","args":["samwang.gno","g1l7nmtmzptycmt36lrju4ypum2yr5zx244c52r3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A98IFyM+yKsk0qIx5E0oc4bZxYWQ9WnMDU1kiclZmnpK"},"signature":"qjGWK+c9cQyT1dwnn7+fzl5UhyW0qUu8lvGv2ZvZl10N4WMVFMrWL+QbA6rcjtgNNXOrW0Lrlsg2SpIFZ/dW5w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1l7nmtmzptycmt36lrju4ypum2yr5zx244c52r3","send":"14001000ugnot","pkg_path":"gno.land/r/disperze/register","func":"Register","args":["zhaozhao.gno","g1l7nmtmzptycmt36lrju4ypum2yr5zx244c52r3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A98IFyM+yKsk0qIx5E0oc4bZxYWQ9WnMDU1kiclZmnpK"},"signature":"xAd+mIwkGR3zQeFVSRqWv9FHgia7dDNnOUjmGLGwkY98umJevX7stErzwxMZczSXm+C/bXcKHFN5q7ocEbkHDw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g148gvdl93vdkxgpu0nfntwqduaev0l05kcuhu86","send":"14001000ugnot","pkg_path":"gno.land/r/disperze/register","func":"Register","args":["bitcoin.gno","g148gvdl93vdkxgpu0nfntwqduaev0l05kcuhu86"]}],"fee":{"gas_wanted":"4000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1Zwcds2BWfQbnPk/tc4z8cjRfFKwO6fSC8G4Eu3rQCH"},"signature":"3KhUoBAQ36UM+/ctTmDRYzS7FAZis1T1qIXHpn7cve8blSKsj9EoCx8IBHQFzK0dU4j4HfOlke5mEUhsXgoc4Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1l6j63sm5m48zfgus29fnamvyamdq0kaaj2ypev","send":"34001000ugnot","pkg_path":"gno.land/r/disperze/register","func":"Register","args":["btc.gno","g1l6j63sm5m48zfgus29fnamvyamdq0kaaj2ypev"]}],"fee":{"gas_wanted":"4000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Az7iPt4oiiafa9Rq7nfIwd70b2uDAD/9QWi4RC3t4Xzf"},"signature":"8pkoi1qoKtcdT9Ml5zQZdopO+YUV2H46Li3p0OKQx/gkLgTT5axLaptI46dY9NP8xKUf6qIUf+AxOrJvggyNUg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j4g5gfuq5ttshp904mr0wsqm0my64ldfp88j7v","send":"14001000ugnot","pkg_path":"gno.land/r/disperze/register","func":"Register","args":["ethereum.gno","g1j4g5gfuq5ttshp904mr0wsqm0my64ldfp88j7v"]}],"fee":{"gas_wanted":"4000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9pQrIwJ17LhP8eNlrSppDY+b5/TaqVu5SZwLbet106N"},"signature":"nzGyf/eeJaarsifp6DT1rTBjawPM1NaAPFhkjBF4/sEijy+qHSh9Kvrhz5hudbOz1JR/9MMGZlKWT+V5edBskg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"gopher20","Path":"gno.land/r/demo/gopher20","Files":[{"Name":"gopher20.gno","Body":"package gopher20\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tgopher     *grc20.AdminToken\n\tadmin      std.Address = \"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt\"\n\tlastCaller string\n)\n\nfunc init() {\n\tgopher = grc20.NewAdminToken(\"Gopher\", \"GOPHER\", 4)\n\tgopher.Mint(admin, 1000000*10000) // @administrator (1M)\n\tlastCaller = \"\"\n\tlastPkgPath = \"\"\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn gopher.TotalSupply()\n}\n\nfunc LastCaller() string {\n\treturn lastCaller + \":\" + lastPkgPath\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := gopher.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := gopher.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tgopher.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc CheckPrevRealm() {\n\tcaller := std.PrevRealm().Addr()\n\tlastCaller = caller.String()\n\tlastPkgPath = std.PrevRealm().PkgPath()\n}\n\nfunc CheckCurrentRealm() {\n\tcaller := std.CurrentRealm().Addr()\n\tlastCaller = caller.String()\n\tlastPkgPath = std.CurrentRealm().PkgPath()\n}\n\nfunc CheckOrigPkgAddr() {\n\tcaller := std.GetOrigPkgAddr()\n\tlastCaller = caller.String()\n}\n\n// - Try checking `std.PrevRealm().Addr()`, `std.PrevRealm().PkgPath()` on gopher20 realm\n// - Try checking `std.CurrentRealm().Addr()`, `std.CurrentRealm().PkgPath()` on gopher20 realm\n// - pkgAddr := std.GetOrigPkgAddr() on gno.land/p/demo/grc/exts/vault\n//     err = v.adminToken.Transfer(pkgAddr, caller, uint64(uv.unvaultedAmount))\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tgopher.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tgopher.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// faucet.\nfunc Faucet() {\n\t// FIXME: add limits?\n\t// FIXME: add payment in gnot?\n\tcaller := std.PrevRealm().Addr()\n\tgopher.Mint(caller, 1000*10000) // 1k\n}\n\n// administration.\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tassertIsAdmin(caller)\n\tgopher.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tassertIsAdmin(caller)\n\tgopher.Burn(address.Resolve(), amount)\n}\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn gopher.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := gopher.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"v8D2Ab6h2Pvw9hqZ4oyaZ3hpZ0hRfhdZJ4UOtGjf5uIpMiqMfsp3eC3o+qRYU1wtqTOoEB49duBGCAcuDuF7Iw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"gopher20","Path":"gno.land/r/demo/gopher20","Files":[{"Name":"gopher20.gno","Body":"package gopher20\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tgopher      *grc20.AdminToken\n\tadmin       std.Address = \"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt\"\n\tlastCaller  string\n\tlastPkgPath string\n)\n\nfunc init() {\n\tgopher = grc20.NewAdminToken(\"Gopher\", \"GOPHER\", 4)\n\tgopher.Mint(admin, 1000000*10000) // @administrator (1M)\n\tlastCaller = \"\"\n\tlastPkgPath = \"\"\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn gopher.TotalSupply()\n}\n\nfunc LastCaller() string {\n\treturn lastCaller + \":\" + lastPkgPath\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := gopher.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := gopher.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tgopher.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc CheckPrevRealm() {\n\tcaller := std.PrevRealm().Addr()\n\tlastCaller = caller.String()\n\tlastPkgPath = std.PrevRealm().PkgPath()\n}\n\nfunc CheckCurrentRealm() {\n\tcaller := std.CurrentRealm().Addr()\n\tlastCaller = caller.String()\n\tlastPkgPath = std.CurrentRealm().PkgPath()\n}\n\nfunc CheckOrigPkgAddr() {\n\tcaller := std.GetOrigPkgAddr()\n\tlastCaller = caller.String()\n}\n\n// - Try checking `std.PrevRealm().Addr()`, `std.PrevRealm().PkgPath()` on gopher20 realm\n// - Try checking `std.CurrentRealm().Addr()`, `std.CurrentRealm().PkgPath()` on gopher20 realm\n// - pkgAddr := std.GetOrigPkgAddr() on gno.land/p/demo/grc/exts/vault\n//     err = v.adminToken.Transfer(pkgAddr, caller, uint64(uv.unvaultedAmount))\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tgopher.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tgopher.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// faucet.\nfunc Faucet() {\n\t// FIXME: add limits?\n\t// FIXME: add payment in gnot?\n\tcaller := std.PrevRealm().Addr()\n\tgopher.Mint(caller, 1000*10000) // 1k\n}\n\n// administration.\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tassertIsAdmin(caller)\n\tgopher.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tassertIsAdmin(caller)\n\tgopher.Burn(address.Resolve(), amount)\n}\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn gopher.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := gopher.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"GQtA0Ql2Roe+K6qrX7nADAKR5yVtIWUJcCwmZnC9AgZmaIaG0MnsPyX9SjMX8q9V7HUdejT8QVdoUHBnnddahQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1l7nmtmzptycmt36lrju4ypum2yr5zx244c52r3","send":"14001000ugnot","pkg_path":"gno.land/r/disperze/register","func":"Register","args":["一个帅哥.gno","g1l7nmtmzptycmt36lrju4ypum2yr5zx244c52r3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A98IFyM+yKsk0qIx5E0oc4bZxYWQ9WnMDU1kiclZmnpK"},"signature":"U5p7nR3LcURXlM0MD6/7l+NxZII14tefSG4mo/7E90ctd6UM3r1Xefr1RfpRMaPo2RwtS2HcH4YBNMXgetZvGg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1l7nmtmzptycmt36lrju4ypum2yr5zx244c52r3","send":"34001000ugnot","pkg_path":"gno.land/r/disperze/register","func":"Register","args":["小8.gno","g1l7nmtmzptycmt36lrju4ypum2yr5zx244c52r3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A98IFyM+yKsk0qIx5E0oc4bZxYWQ9WnMDU1kiclZmnpK"},"signature":"KV2q5bl+LzmY19kqprYAlOOpcMASHD/FH72AoCMVcgh7mx6kn564V3lbq2tXk8U64rrIEBLbtB3xICAFZYeXxg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1cvr70jvf8jve5mkh2uhl5jm63r6qdqc54sx9wk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"1lXtc2+ia4huPCCwRGPulbCk/TC7YENzCOH8g4ipBgVT9LtRYpTY/ud0ofEOS3hnH8WwAP2SlBPlcFiSTOb5ew=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/social_feeds_v4","func":"CreatePost","args":["1","0","2","{\"title\":\"\",\"message\":\"hellow\",\"files\":[],\"hashtags\":[],\"mentions\":[],\"gifs\":[],\"createdAt\":\"2023-08-11T01:12:02.201Z\",\"updatedAt\":\"2023-08-11T01:12:02.201Z\"}"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"5UjztNJa4WcCbOlphfc0x79DuOX/xgTVzfQ7cgOlXd9WjP0zWyii7aAqwl9NLXT5DNZIyGJyCT5xxF19fxqvIA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/social_feeds_v4","func":"CreatePost","args":["1","0","3","{\"title\":\"asdf\",\"message\":\"\u003cp\u003easdf\u003c/p\u003e\",\"files\":[],\"hashtags\":[],\"mentions\":[],\"gifs\":[],\"createdAt\":\"2023-08-11T01:13:24.601Z\",\"updatedAt\":\"2023-08-11T01:13:24.601Z\"}"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"qdGAtXuu2Q5OBlt8TAYzF7Qeu12YZ4mETsogjt+XAoIbjHOHL3JOLvF3DTTq6c3FD00d3DxQgem5RDem0EGACA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/social_feeds_v4","func":"CreatePost","args":["1","0","3","{\"title\":\"gaga 99\",\"message\":\"\u003cp\u003egaga g999g\u003c/p\u003e\",\"files\":[],\"hashtags\":[],\"mentions\":[],\"gifs\":[],\"createdAt\":\"2023-08-11T01:40:25.475Z\",\"updatedAt\":\"2023-08-11T01:40:25.475Z\"}"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"TVq+0xEW4btCuDM14umd7QDjfLTmHD2w1/PdvCg71U1FB+n5NhxPhvkuxFxJcR0Ea4qE1x+OEsySDOqDWJ6yag=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"34001000ugnot","pkg_path":"gno.land/r/disperze/register","func":"Register","args":["gno.gno","g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5"]}],"fee":{"gas_wanted":"4000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"NnCodMqK9oDirck0Qs0k6fi9M41AAhI1/BecrOmkBcAcnte51YbvTo73rEeP54ze1EaduXento5Od3NbG7M74A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/social_feeds_v4","func":"CreatePost","args":["1","0","2","{\"title\":\"\",\"message\":\"asd\",\"files\":[],\"hashtags\":[],\"mentions\":[],\"gifs\":[],\"createdAt\":\"2023-08-11T01:47:26.139Z\",\"updatedAt\":\"2023-08-11T01:47:26.139Z\"}"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"7obtDjh9WyyfO1r6NyfwVbwM7SmeOGIpmHLtf3fogNpLk2oIkbaC3dp05NvVAgY+V8hCmKWAnG2rSL6WACt2sg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1cvr70jvf8jve5mkh2uhl5jm63r6qdqc54sx9wk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"nRYFzXYWjk6ebZvVoxOUX0+22lJobT4Ot7PDCJUcKMgXJAeRocxXA8WVE2QxV7mbepM6XIC6AECbi4dDKW59tg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10fv0fvrtgsk4aqwp9k6s0zxzhyap9accvmvuek","send":"14001000ugnot","pkg_path":"gno.land/r/disperze/register","func":"Register","args":["usdt.gno","g10fv0fvrtgsk4aqwp9k6s0zxzhyap9accvmvuek"]}],"fee":{"gas_wanted":"4000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Amz27g7IoY+iOpsGHDuTcVFi7RTJDNPDyEoqIzkmBCZ8"},"signature":"tz+zjphSdWu59lURSplAb+/EmfsaZcY34mKqWV5XGq1ccNq4Y2CJVCNOutNfF3K+fZMooSV/dEoYWZcVjmP4XQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19k34wjqdvpqdz3v64mh3732p8tux0g0pm2l56h","send":"14001000ugnot","pkg_path":"gno.land/r/disperze/register","func":"Register","args":["usdc.gno","g19k34wjqdvpqdz3v64mh3732p8tux0g0pm2l56h"]}],"fee":{"gas_wanted":"4000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwUwpHW4JxGgfH5zRZvDAT9oUl1ZapRW/zgCR7FFCSKn"},"signature":"PvPUjkdzgweFW2Q1j7SY1KkHWevlBU/qZqZ5x9Qlq6UcVt+lLhJQFmJx+cWW/IL/pmvexhnEpIEhBld1EuZ4eQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rc2gg69qtfju4tazq0kxm8ynef29dkddglzg0m","send":"14001000ugnot","pkg_path":"gno.land/r/disperze/register","func":"Register","args":["crypto.gno","g1rc2gg69qtfju4tazq0kxm8ynef29dkddglzg0m"]}],"fee":{"gas_wanted":"4000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ak4B2P2zo+AL5CwhYHMq12ipwOIDQ7xrGA4o5AnMiLrX"},"signature":"v/9EI6PmTlEcUiB+BhuuPxtKkiTaP+uFVCGlzNzM/U9L9ioTVTcHeHKZTn/QVI914dIUA2wtBfK9UOrokoxV4w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18cv8ackz0e52rtmrr60637tudgpvn28hktfx6j","send":"14001000ugnot","pkg_path":"gno.land/r/disperze/register","func":"Register","args":["gnoland.gno","g18cv8ackz0e52rtmrr60637tudgpvn28hktfx6j"]}],"fee":{"gas_wanted":"4000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ar7SQ3nLcpII6VRuaG6PgY8kkREd50l6IA7CpdMgyJU0"},"signature":"eWLBD3EOBoxtMBQcvhWK2fEHTpFfeG/FZLCKJ1Mgk99UfcGVlgmJ9zYRnuZ29f9Lhzu2wvRcdwbI975xp783Wg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pqrmau5ejrk2etannnvdt7y86aac3zaet33vhe","send":"14001000ugnot","pkg_path":"gno.land/r/disperze/register","func":"Register","args":["future.gno","g1pqrmau5ejrk2etannnvdt7y86aac3zaet33vhe"]}],"fee":{"gas_wanted":"4000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApwG90jS1tS5naVw1FaYP5gvefa5eXk8/2mWXxZmT92A"},"signature":"UJipnnG6ZBSLaiY3TvKMat6NPbEM1QcdYkN+oIzuZsMLOZFtM9BB2zqj3+mZqtbUZgjg9DiYCt6w3M28KperJA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jqw62fqy66mwu87smgztt0c3j7s3qc45l50r2m","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"IMx9ssw/EEaUTfQOGrEUdrcKl+BzPYMKE8iyYK5hWYhMzmpM6cWWOyECd2QyNY8FPMmw9suWCee5AeXdDtcHNQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fnakf9vrd6uqn8qdmp88yam4p0ngy572answ9f","to_address":"g1dgmces80tptt4vvr5zlcdc9rg2aqgu2xu067c6","amount":"20000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3cWVULHSHC1mwK8o1vfJHKfNMvLEvKU/sHPQoFWRoey"},"signature":"9GfCh3A7kSg8mn9NWVJ0pdHmcV7u0afEM8eYDFCpr0MrTBoEST3quig6rFaBynTrYs2ks6NZil5/gSmfkouclA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dgmces80tptt4vvr5zlcdc9rg2aqgu2xu067c6","send":"14001000ugnot","pkg_path":"gno.land/r/disperze/register","func":"Register","args":["keplr.gno","g1dgmces80tptt4vvr5zlcdc9rg2aqgu2xu067c6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ai7TnaGmqxzE8nWhXfDRxsAqf1WeEEB/AxzsPDhZbmCT"},"signature":"HWhhf1Vm5Z4vUMRbTEdjuHv65bxys3j12c5gVtE8AywM0Y+a0yMHn88wXL6QeqGjBpRtThfQ2qKFDW45rcSyEQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fnakf9vrd6uqn8qdmp88yam4p0ngy572answ9f","to_address":"g1laxrtvpgckk020rvlvfk2e5erl0ua5w5chr5df","amount":"50000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3cWVULHSHC1mwK8o1vfJHKfNMvLEvKU/sHPQoFWRoey"},"signature":"cMEPHwuA5ajIdgznBjMYM0ScM8hnw0npKEPe2J6nkR54o+D/IR24M/JmF3uD9/dSPJBtSPoqwq9fszWW9UxVWg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1laxrtvpgckk020rvlvfk2e5erl0ua5w5chr5df","send":"14001000ugnot","pkg_path":"gno.land/r/disperze/register","func":"Register","args":["testing.gno","g1laxrtvpgckk020rvlvfk2e5erl0ua5w5chr5df"]}],"fee":{"gas_wanted":"4000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxCgbCe4WAQuRsGyFkuR9qfxF3KxEmSWr8dmPhLmViWn"},"signature":"54GGMXiS9xP5OlDfly3ANprU+CLhpSELvwSRob5RUcQGnEzzYrKNWndQlrfREhu9tR01Rt7wUplroaYocZx+qA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","send":"14001000ugnot","pkg_path":"gno.land/r/disperze/register","func":"Register","args":["test11.gno","g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"NL58pwhtYm3jiIAfZqKIrkw7ClQju8+AEBdEXF203+huzHGRp7nWTz3ZweK799GUNeS1gF5xJp+VmBZRS/KRCw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"34001000ugnot","pkg_path":"gno.land/r/disperze/register","func":"Register","args":["안녕.gno","g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5"]}],"fee":{"gas_wanted":"4000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"93SwpG0Y2Cvv/AenTPoNZ3qYCChUsaJLMGhtvLSEX65FXG5AMbXPFv+NpJCQ6R4scRxgaFrpEHcJWYHxPUgfTg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","send":"34001000ugnot","pkg_path":"gno.land/r/disperze/register","func":"Register","args":["asd.gno","g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f"]}],"fee":{"gas_wanted":"4000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgRVZeBhCNiXMgeopMseJTFgTUwWKdw1TibC+g1lyO3E"},"signature":"gTY7WQPIeYGRDqDCNGShOczDwna8XN9asM+9w/AB5CY73eJ2X75qM+CYzI0PC97ZfZQtoLzlyAQhoJJMqWZCcQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fzjcyrhv7rtrpwhsd0mhl9n7ahxm0v34p9w5kn","to_address":"g1kxa74mz8hul5tge3rvyep6epzhkf99x29zac7g","amount":"1123000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7BGCHnC+0EaBkHciQ6D+fFVnlumBrn4QABY4FhxNlab"},"signature":"hlLy7BS0Vqfmt89gST9a/mUEIrOMFvK/qKJ3Vkju8QQ6sD5BF9mP/hfZe2QD0hO5wmJ+0I7XkwOFNI5K1g/E5Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1wtl83zme3e6tc0e4mne8lsv68c9dez2agjcklf","to_address":"g1wtl83zme3e6tc0e4mne8lsv68c9dez2agjcklf","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/mVVDwJG6n57E53abA5q7D60qE8Oh9dJqQXIZVVE+Iv"},"signature":"sND708v/Cd7EyVrhlb3K82WLjYCPa8obODmqTTzM/IRiKjmQICZGkujU3Cv7AQOU3XUmFqA2cObM3zYTA+sOng=="}],"memo":""}
