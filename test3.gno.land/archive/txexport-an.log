{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"5000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"0XP8eAnWjsJC8Lwy+43t48m/APCKdqFUbqVVpkrDiBJW5RnWFBT3Jdi7VBYdkENC7XjImUbpqYx98CJ8cYpNkA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","5"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"s24tef8yxT4k45mnHdNrIFGd3JPA36VvR5II1U2J70Y97Wt3ZusLMda6heMfAHyvLycC1ij6Ry5jHZrV3S82IQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"4500000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"THeWduBVRQPE8WWb8UG8m1xtRh4TrerSEZ3D6vDoMg4xqrGp+ojz3czDUX3ctt/J4nuujOnogmT3RYz9AckWYw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"12345678ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"LLMUlqDoecoiuSjpRtj8wazj2Yrj+5mXYE2beC2KDchF5Y3FOep0i7mnSuN5vREEKiB/GO4AFkkhgFVPZSfveQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","965"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"EeNfYWYeathFIHTLxp1pZ7RAEOQbMSmkPlvQSP9WXlNgWwE6lG+JeIQ6//YI67UyTJ3o59uEw3t4DZfMyM7vWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"ab1cd","Path":"gno.land/r/demo/abcef","Files":[{"Name":"helloabc11.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Wjh1hK2yh/EQWT4PZx5mkLZunv3BUqW4nqKxAHVm5VgD2rqf5KxynM3ciO0qd6jxDpfS8t6Cxf7qOGmY12Bj0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"g1ggg","Path":"gno.land/r/demo/ggg1g","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"vl0HVS+CaQvFu2x6xZMmkwJGHPXQmGYDX3FqJF6zHGxjaRx7pbDb5FhBCEDN5r/Pi0BVcePfofKji27fpAfI/Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"gggg123","Path":"gno.land/r/demo/gggg123","Files":[{"Name":"gggg123.gno","Body":"package gggg123\n\nfunc gggg123() string {\n\treturn \"gggg123() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"BDM92zvaL+xMlokUcCoetz/ctZB4nulp1se2eOgQPLUFuGdtH/d3QJUUieb1ldpYtl0n9j9AeWacuqiVBgrpFA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","15"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"19I6i+jyAmTfeL0LfNQpuoA10AtF8kv0AMeBQWgy8URHGeUY8yHzA9UauQ8+AA3usi42PFyTsGbs9QZLbJYJoQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["527","","527"]},{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["4885","","4885"]},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"5000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Z4G6DD1ONI5VAh0zxNDDPBx4tja8sZQcDSV3IK8vQ9RbwiGaR9THO1rLn5MGu6iMFKSDRlEcLp/mCu7Gutd8dQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","1111","hihi"]},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"5000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"BSW2qNAjmxlnQH6zCxnHD0pwS/rf5mzxsXhk61yd6AoL0H30wlPS0+KzOLDKB6R5Pu5/1g87ZqNa6BjUcMdqrw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"9934926ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"dHDgalImYoqIZpgiHRhSKkgMKTBnPBMMmDXg91ALJWEah/QY0SdgHE0Otwz0MFnj5iV84Q3zMCxBl09YPbidTA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","82"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"czSaVTtiPPiru/Do4PMnPv7hCoCQVWCbWgbVZCPOwzwYJ74lObx2cR9IyslYWs+tpGmzWkrHz587dZXyGT3gyw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","20"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"O6dVOpP0ex8jlT3PW+tq9TK/kWJ4R5mKhuperM+rgYx9qfO3JoCUfnRoLc0Hx57GrrDhuhc5xnJUpTQ2Fa7p/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","100"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"ScpxkYE0zLVTaY5e25Q3SDj+tIfG6mRRqejmBN3YPoJtEjbsf3D79Lm/41/zNbx0IBbSTE68T03qJg/LHJe3oQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"ZUWXOyIJAqofepNa7k9zw9wiWD+gL135cx1Zmg01+UM56DVDdWoz+GtZVGK1E3oologF051dAAQ4/TCmjqpO5A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1l47x640c4petu4chfjge3qg2uplakx78hkxqxd","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3+XBwhRNxB98UM5CE/sbFKQFUNrwd3wclkoRFngQHN4"},"signature":"AloRZhfXp8A15r2Z6Ks/BzDzzeaI2HOYmk/yoyEqKHYg5bUQ/Uha/FGy9f1HUHaX3EANBQModHzRX/hAWf1alw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"123456ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"x8mvMG+4y+m9WAOW34UpYfECrH/5/JYnBNVm25bcDywxEykv/MhAhccqWulpW62Mej0IAyDqVZDDaw5214iiqw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","111","HI"]},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"50000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"//K4wUFl21YU2IgUjMlhfQKr+ENILAHyucT/6rbNfrl7jxPNe9HdbvoU3vLCta1eztkkxJzdE6zFej+o4aA46w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"1111111111111ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"JDepS+y1/S2ius0ku5Tl5wD0IW1qdt41Hs6Sqx4k+i0OPZKNhWUPZ4Ir5vSCyBhlB6aqFU6tH5Ft1CEV9+Z9Tw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"2500000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"k2RyrH/GNuvufGdKL2kRprQ1o1B+UZnURvT/o9CcC5dCLD+sfhDQ8VCbIVaIAFlkdMtLugfOWBcwmI4Q1toYVQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"100000000000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Qfqh9WxYXn2OYXfLuNHUdRfQnJfgXUExrs1EOpCNQrEzy/vxJv50ySwJQo+cPhvVqlhEGO5941IK6zUrImkjFw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1uatom"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"usyGM9SWq+lpOAQ2ssS21P5YtPH3tkeywWfhMs3u7wJMwzNoJKe1INRVi5eHrHoFRTDGk7fUBdHDp18+joMTXA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"2500000000000abcde"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"9eBBc2rctcC/4aXM80F2oWeR3NmrI5tsRRBDNBmZDHgcbDM4I7kBBUh21vYVjerWhjXdwUnuPb0/0SW7+12WMg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"800000000000000sbf"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"+/hMYkIAS+ShckqbsQNmb9zLy5lUZWeWkr6qMQKkZmkt3LYA73Ok2LsNJEXLLQ2DieqL85sHBZ73b2LMbnQGNA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/gnodao_v02","func":"CreateProposal","args":["0","First proposal","First proposal summary","0","","","","https://metadata.gnodao1.com","https://gnodao1.com"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"POXwpdDNAdgk9G0qpJiQ9xoe676JKqiXq3BGAYVjwwAFutRVoi5Ce+vsE2zCliCI1Zfgs1jjbzKRwQQ2UG3Qxg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/gnodao_v02","func":"VoteProposal","args":["0","0","0"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"sthGHivYwgrswwKeLdv0sQwA0sGTuUhlaQK+r93GnKZwMgykHOHiZ1zuaOaGUjl2CGbFPA4r7V+Lo30xCcanrQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/gnodao_v02","func":"CreateProposal","args":["0","First proposal","First proposal summary","0","","","","https://metadata.gnodao1.com","https://gnodao1.com"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"Z6fZ4MoSuaYpJDc+KRP/u1GqQM/dpmcmGqSGHtReKTk8Ihp88wPZNW/6q4E0YF89Y+0B1/X/BsfwbYJm/atEsw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/gnodao_v02","func":"VoteProposal","args":["0","1","0"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"ILwv+Om9PsEgfNqePTgcVMFMN/Ggoi+PzNWiKoMOof4F4/6X2YW4zgN2ri2pUJEZlWTfLyl8QMwytzywsZ1wrg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/gnodao_v02","func":"TallyAndExecute","args":["0","1"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"mAFi+s6QtE38mPKBgwQ8TKB2+Lx4WXq8z8/aADjltjNyJjE6x6vUL2YcB94AzikkEU8LRPNJjRsw1RmnJGcyvw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/gnodao_v02","func":"TallyAndExecute","args":["0","1"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"NWlFnS9jhMwEvkOGlGbXsCsogpYXXO9dHl9Ul69Z4v1/0IpqfF4gpNKFX29NC0KGd7DDSpJ7h6yMcFZSVGYETg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"100000000000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"QolFGxaUKyR0zUTpe5gqf7MMcOIGW63/cxmYSfd/nZoPGlNuVqZrfaVxsEgDViCSf2vdm0ubVEMt4qUr6fPZAw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"10000000000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"2XLK1+sNU9Ppy5BcWWrwhIeylsPi10EQ1aYSQLMdQDNyqAky6A2/OlTZpxGZA85QrvsA09Nu0Fl0EVybRYozMQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1uatom"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"IYAdirLgfT6OHJAk+JmU39aqkxt98RiNTfWpiE8KNvIOFr6ncNSMikrTaOVEzg9+NjmgQ7/jK4JlbjGUDJa9hA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"/569dqlFi+evzkYleWUNLP5wIKsy5KDppXS+vo78o+F6BwqTRKe3qjofRMPHlN6uuJwvOf8thzxMjm/p81gtAQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"Ou6+3ps85ADWD/TDeXhqkJ/X38OI+lmHgh2HXkEgtv9H5Z5EQlmHeHt7NdHFQls+P4yRaRkRgsXhry3+mvHvow=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"K1u6l0tyY/eIGoT4U17FeqoWlaBwQC9LCoGpCFZWCuhcM2cB/BciUFTZfyHehEky2u2z8n/GneEMXIJbMCBKmA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"v0RPJNYv/Cl6pDpUdHCmsZUaFcCsOvkDqFkaaHh7O31ktaHQXQo9rZMECbv29ZyFcks4pYULxEIwFHxEcxbXaQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"10000000000000idk"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"ba32AV1gqGcoXL7kPsVr8MEjBhC/Chxx37sHJ+JTEwMUq/bYlokLYMTZ0zY4JSMUSbFxF/8LiKauZP2e5yaNRA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1uatom"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"+1qQQOz3RP+74O8WDQrpD77aoRzVII7JbHyV+y6X0/9CFYUWAi+mUtaFj7F3QedKGsZ/P7W437DdaKmbFVkFBA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1uatom"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"E+/uHk1B2YarS0XtLgOO94xmDKOu4CntfAqZxZQdFvR9LKBJdstPHmnVGzKa0vC/JACI8iZR6RF7B5990XA1UQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000000000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"yMhol6/+ZZsk8hvJ1KaQtSyCKDYqGAQEQALXdgRPOhtdrzGvBXxOE09xK4fYLdZq0iRCY38YxcZNZZekOtRLsQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"10000000000000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"d8lfv9TkkgfqX8D/PvJ3gacUs8T64GH7tp5b+X2BmvwP3L+f+nKeio31sQT5ikTJQM+JdGLr8l8vh/ATIQOXIQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"100000000000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"fNkR19V1CJgH9d1zWvLSqtolHrkA1iIfve+K2N/CH+t+n2G3aAB4ni9HNstCyAra7HUV0sIfpMT/1zxZJKch5g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"100000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"/DHNg3b2Knmi1niHONdiUQl4aOYxO1H4pwUt2jCYJ28GQODhl1EeQg/UW6m64ttppxWgP91rmFYL1uuVpIqGwA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"100000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"nXznOvAtVhKzMIsrXr05OHwWLaiFpzHxChAFjuzVBglUnLFpfEfqfKzFo/L15LWKHf36aQQFll1JuF9h9KmRzQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"100000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"l/BCo8jrdtEgaCCZ0KQcENooyuCJ0PyfENTAbuHAiLIwE1BDiLcH03NRCD4q/Nmkc2Wq0jVY/Wg+MxvDube59g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1star"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Cl+aW6yp20fnxHLr+F2Sx5TooIcATVCHx6DKt+lZTRED3eyeqbazjiJRmw5aC5pf1N0tPpbbGEbVIIQsrGrCmg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1star"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"C1ujTmbLb6SCixaCreDFbIt4H9LAD0O5Ko5ykk7Z8RslIvshQojqlRFPl0eJw0zt0QVDnLe+5qVEKg9HqBhPjA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"100ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"6e2GbwtrueutflIRoWjPyCP+XjqILboVlWt23cpq1HRmK77vXin60uyv7KU/sEVQU1hfzzoMdxfIvzd5vHcbcw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"wx4jo8w2rDVA3C4DLwaMnzu9lfiGLYXvN1Rvefd/1iU7e1LwZeDVoR1oss5ltnJnCX2ghtn5ETuWhqPImuk0CQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"+Yr1oQCQ8xQmb1OQPyv2lbDdPU08pdamXGZ1C7jkCPcfAMeTp1w+Zo+pKVBa93OSICl3WNxxXy0+doEasZl8Jw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"0+KVDYhB57Jj4NbcKSQGgY9aXVId8xEsv6s1KFOQEmZk4ZgAJdoDxDakSpMirkh8HMHCm6R35Dh/OBmLt/GwMA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"OxixIQ+5NfkrRX1hn/6bjpOjWXwWryHe1oO0euUqPhNjuRl8koJm1AffSiDmUryAsRf/JJBzZI1xcm0iTCVuJw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1441ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"5DLC6CfMBpg/mgtQp0F+l31DOm7abbdlINbyzV1rdRwb3CLrqKZ+9L6cNdhZwnwVOBtAT14NKw8lU3bFIu4zYg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"14","func":"14","args":["14"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"S75SZzgKc0q7f3P/6fHWecAPz2tzqaTzTTzcxv4cLvF3TfdxQKsaTQYS/ybTKv2mnGo1UqbdWTAWjfdFiyiy7A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"d1IxtSW70AmaW0pWvnjT15+2aOo5KZAjrVf0uvDa9Yxh/OKbwg1HYsXQUl9/q85VlO1sDO/gs+tBGU5YpnVLGw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1ugg"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Yzc83+kfsDR10WL2ASwjyEM6JzBY3WZ7v8dV/W8/Ly8xAYZFCx8f9kDaVXgA3mgdzs/jF3bL/MEs5EvOTs0mfw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1abc"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"bGNdbysnDwZU947yAmCFgj84dxjPraJMNuhYO2oZOVk5HTTA5J04BKKGpKyWl8QGtQsUlusDwIZBYflzC5ZknQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1adc"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"RRL8nJtVVzPu04Bj7tBXG8bGoFxrk6j4TEnG+KH9znErEu9MnS9RrmLARw8LtzJhNpxRoDvCu0jNYKDfVQEOVw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"3adct"}],"fee":{"gas_wanted":"99999","gas_fee":"3ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"0OzTS08EcGBKmPNAp5nAUC+T1QYlSlydAD8soXwL4ckqufhGlQflncf6FwW8aCc2mjSwUwqDrCkvhG3eSHXvsg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"3adct"}],"fee":{"gas_wanted":"50000","gas_fee":"3ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"0sSgsVFmbUj+DIuHgo34fyybyCrfeBZNc5EPXR6TWNIjKthsN20YgkgA4oL+dL+KWUa86VtLthyC697TDf/xCw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"3adct"}],"fee":{"gas_wanted":"40000","gas_fee":"3ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"hHhJRioI3wzqgpHB4c+o1U8qT3yghs0PMNXlB2bKznQKTOxeZ77DXyJpvNE7hyWpIwotvN/1AnBZLLR+AV6FMQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"3adct"}],"fee":{"gas_wanted":"30000","gas_fee":"3ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"vkziqGC1uV09CoVVoavmC2+OF38tWGaK1k3lTvIADuUh1h+9NZc11EoU/LooCkLM/A01JDBXowT0D1cfCvuhhQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"3adct"}],"fee":{"gas_wanted":"29999","gas_fee":"3ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"OobIcnOeHEByB4nn+LEw2pKaPaMCQN6aNC1jA8fYAfNOOe9CllA/iNaA7EITmXwFn7QaDqjcMzSLPp4TxcfS3Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"aabb","Path":"gno.land/r/demo/aabb","Files":[{"Name":"aabb.gno","Body":"package aabb\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"vNpjrbDronUi0MMAffJyTIOylGZExiUBbD70Z/kRXcJBGBVEsMSngdAyPs7GPw9bfs1GfYfuMyJTVFXhHIzXmA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"jQodLm9PwnoLN2Sc+84WtXD96vpJQ9jF+WWQ0fjgHUYw/kxIqrJ5m1+AydRAFHhPkCKk76Ph5Hzji8W61SPioQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","81"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"f2GSCmSV/bELI75NCbkGCT7YFuY6p3W2aKO0C2aOdqF9MXVtuPFkNW0MCgOCL2CEHNWfqhlMvFd6ARAM1O1rKA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1l47x640c4petu4chfjge3qg2uplakx78hkxqxd","20"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"HXbUTjni/wV5O7B1SbwO7yEo+0neIN3TeBhsTC9mMBIh2OR7AhPvse6LMyC95z2hO+zov/boXQFCiqRZCxSL7w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"VxUkA2MtQJW5qScqmWIvNTxpeJ64d0uGbnkEoZkb2mJMq4ib+cSZmXQ51WNRnjJbrpjGeKVy+B05gVCGZ45JYQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","101"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"X/JnDnEu/TET0mkTR67Ypl/2njNGUdwVyYdgVbBPxN07w0LVTHl3EEJKjoHgzB/eX5MtaWBpaEnMMXPUqOq6qw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1l47x640c4petu4chfjge3qg2uplakx78hkxqxd","187"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Z8/WdqmCgDlkaHImSS6jw+5J6d8DAk1Iy4ddpgehZ8YOfPfT9pxwCRy1dR+xsrirFX1+2NhnggNwtMpNET1WJw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1l47x640c4petu4chfjge3qg2uplakx78hkxqxd","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","187"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3+XBwhRNxB98UM5CE/sbFKQFUNrwd3wclkoRFngQHN4"},"signature":"MZodSB9SE6zTagm9LpYXPeuvyK/0Avrf+0iFk6V1IkkNnR9IC7C5SwVD2flHk3ESX2Hupl+cMHgUucuWv+8epQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"10000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"v5OOJgz0G+9GIHwBq6hg9kHp1NDSE+o8J7G9/P5GE0QdJLiuDFvmT802Vw0theKuMpJvrr3g8Tsmnt2rYR1lYA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["10"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"CbxmpSTHFNLTe6YITStMPeK8gthS/H1yujMhSxUH38JP0V1MxDmkNJXOAODn8Plrd+c+42rjq+BBifXk9MCEBA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1apawtjjc29wr9s6tq7y2kq8xwnn4smap9lgkzc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"yRsuiEkiSdQUW15aFlCKHAF3iKf1bVAjcGB0P/KaRf18uN8ak1trp4i6W4gEoT1P4K7WlBJZ50GqymYRb01pXA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","amount":"22119034564ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"Gw7C3fevmDq8l1fGVREasSHd0S8zGgEAwIP+JYSTHlVZi5tmieHTCRFTNvXQFyn6/QWGP1MagOQOsQaYZ+ycQw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1d224yhcszcr2z9qjww046ffppprh4n3al5tc2d","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"zOUGdXSfAeviATsfFMw7NLoR6rQmTZRf3c8GrP6iPaYzs3f1S1srOpyCPuoNn//PnahGTpu98WncewMGioDTPg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"hello","Path":"gno.land/r/demo/mul1","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","10"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"tHHkiN9xl2CajmId57HM/MviRdJ0uLweAselgmM5vE8poYkPJqGKAXpglDBxFaToasAnilKJyKJuJQ1/gsfluQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mjzyk7r49ta4h6ppgv2fedgz5ek6hgyttge9pv","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1hxecqgcv4f0p7s7ap6t20vaeeuvqgvl9qtchr6","3"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwpFZ/Eba2YD0tSPYISodHi2gBBhx/hUg/PPZTt93aq7"},"signature":"63qCzoytjKntUnss1ESOm30qhJL9tccyDnZCfPKiE4chUn6mjBYcNI8AJGQCvLwkX0Cqt0wXJNcHImjw6M0qjA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1134569100"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"zj6sicncfxTvGP0Lv6JSscS5AmACMLhuwaxhfqoWbnh90LWknBAYaZQIvyjNSTeJ7jrxR5MnBvNRAqAeK4ZKOg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","1134572000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"bVLde+qQfC1GNpJXPPoHIQjO6Lmc/eEvT0CEEY0pDmA5Fy7k0J/WIMj7hJjdwce0uG44c5MpCOIMnkpEGpTj8w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"cinap","Path":"gno.land/r/demo/panicker","Files":[{"Name":"panicker.gno","Body":"package cinap\n\nvar ErrCinap = errors.New(\"cinap-err\")\n\nfunc Panic() {\n\tpanic(\"cinap\")\n}\n\nfunc PanicWithError() {\n\tpanic(ErrCinap)\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"s0DjBc43PXddMRTpRBb7jK6xW2Kg0TQHl6yzwxTfRm0HVyMz7QBdWmw9y7ruHD4UvXtDUoSdQNbXgJt59HqvwQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"cinap","Path":"gno.land/r/demo/panicker","Files":[{"Name":"panicker.gno","Body":"package cinap\n\nimport (\n\t\"errors\"\n)\n\nvar ErrCinap = errors.New(\"cinap-err\")\n\nfunc Panic() {\n\tpanic(\"cinap\")\n}\n\nfunc PanicWithError() {\n\tpanic(ErrCinap)\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"IOvjGtmOPtbBZct0jb3e1StlcrmdTh7B0tDH168w3o8mfZUu8To9XXQkGCQO57zrQUrWXpB20UcOwiBQpSZv8w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"cinap","Path":"gno.land/r/demo/panicker_2","Files":[{"Name":"panicker.gno","Body":"package cinap\n\nfunc Panic() {\n\tpanic(\"cinap\")\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"uMw1MEG6iuszNYSNyWOCLXQPveuNFQzPr6Vxdz+Kyl52ImFTfBg639dRqpbQyHddltrLyOI+ZeHYzu1KJUoCYw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"cinap","Path":"gno.land/r/demo/panicker_3","Files":[{"Name":"panicker.gno","Body":"package cinap\n\nimport (\n\t\"errors\"\n)\n\nvar ErrCinap = errors.New(\"A wild cinap has appeared!\")\n\nfunc Render(path string) string {\n\treturn \"\"\n}\n\nfunc Panic() {\n\tpanic(\"cinap\")\n}\n\nfunc PanicWithError() {\n\tpanic(ErrCinap)\n}\n\nfunc Error() error {\n\treturn ErrCinap\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"khnPz6YR6ghqrWw9yP6qzj10XYtSIUvsm8Yx+BWYdUYvAFZ4EyLGAJQ5ZvG2Rdux2bsYRZpk8YuTg8CBV5AEaA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","send":"","pkg_path":"gno.land/r/demo/panicker_3","func":"Panic","args":null}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"CGmbkGed65k9VStOwPg8wgRCsHMgGuNYir9z5rFZUgQ5sgGtSKFun19G0IVACQxeolB1xpq/DT5HH3tp2jMCDg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","send":"","pkg_path":"gno.land/r/demo/panicker_3","func":"Error","args":null}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"VnREqYNKbpIRDClpONEIyFYLQpwYeKLa7eZcL6MX5ZlpQ20nLZl6RnjaoIjEW3mQ1NfuEISQrUhsr7j/o2XjTA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","send":"","pkg_path":"gno.land/r/demo/panicker_3","func":"PanicWithError","args":null}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"ABtOSzVagk6xyYuNLHNJ76zAm9+jWuCmFuRy65E7qucsyYPXhUkgwc1K0MwlogbTPrKtCy0wuKxDZG6XBwuOWQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","to_address":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","amount":"1000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"2pgQ8aW8Rh0OGAeAjF+A/L33XmAX9yxSXrZtKVMmsmMGVuyI/9v0u1fXzUl89T04T9CuE7huGVVS62XNgoQMKA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1q0pjk6dd6lehd5q3gcpghvcf3rd6mqy7tge4va","amount":"80000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"HyilxfEI+FKBW0iBARJ4a/BWM70fMYOloPFdQHmBfplFGSo+DxgrkyN8MTEKmze8fkBn7kB+qsUTG7+Fqjwm/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/gnoland/faucet","func":"AdminAddController","args":["g1q0pjk6dd6lehd5q3gcpghvcf3rd6mqy7tge4va"]}],"fee":{"gas_wanted":"1000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"pqzIIj/i7w7ZEtWg33gTpj0dhe1/Omsx33Uue4dUbFhdXkK5fKRBFmwnvgEUft5fMB0sE1CBoUaU4fsNnG6gIQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1q0pjk6dd6lehd5q3gcpghvcf3rd6mqy7tge4va","amount":"80000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"P7oUIFPyYsGrZPnT0lNL/KXQVr9hDdpvknGiB+q+9ewrwnotMmyzt9SYTFU5JD3m/Sn8i4FzNV8SrbcATGbVtg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1q0pjk6dd6lehd5q3gcpghvcf3rd6mqy7tge4va","amount":"80000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"IS7pKhT6pVRW+/MG2R5r0Ml44nIRbEG2BZTQ1sh3iaN78z5C1TiT7yi0lamGkvbANPrDyz8E0mZA/a8mqCiQAA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"ZrtrHh2de9sVuUYu6xzHL3Xb6wB4UZM9x8tXlWqn7WRTVM2B9rhEsWY0AqQhW89vHmWY7+Lc+T/yMGF6ASgRrg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Mqmf6lDLv35TSWk5WhTPxvSkXAGkbETrMRhaXxWNFQo35q0IdCzTtcG1LmtXOXudjJhZMGJpEwNxZDZo9gIU0Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"7Q3KTCOGmgfbFJvRYekR1F5GpFlYXJJUdWp0o9slV4MfBy+txjo+k7PUzUE2fcYFWc07t8Y4DUkUWNw/ddgJfQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"ijn/KxeOWLpg6QZzfyATJE4nFYTkgqVpTTHHPirxh+4EStZ9VfHdrUJQ2MuRKIolfStxdrPnTufP3gETLa8qow=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"eSkR94accWqFUoGm/yBu13n0LHfCyQ8cFfMu39KyUP1PxV3X2xXhGhqMW09/3hicP9IBpCQaFmysxXAqvsGLEQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"//YrCUp56mqKuqu4zLiTC0J9DJwMg5gevJWRDu/J0R9Q7UCMRomLibOgFYiu9Y0WDRffeAm9MofgK+QhCOAvAg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"sdReF25NXimnb/odrrXof1NeMrWJ5u4Z5aZw65fvXul5cepplJgV+jwiJkriazwaOor33Wq8QGJ5M3IVnvi+Cw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Q9OQ9oQep4gqEdy8vnzE45nUNlCixQ27EAllAJmzE1NaCNaZBhRjAV6soIViKcvI/8nHDCzj9qwQl4ptH7Uv/g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"k+xuaPh22GTDFGPe0o87l4TV7g1VaHHGRV8i/BOqsNA2wo+VnjGAraGIIdh+yXcVcot6W78Svj+cCNA9/O+Asw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"U3CEooJ2NrLBv6nOmGCcdlMmQpT8oDwUWr6XgeAL+AIHcF7a8wRXMUnCv1qI1EUcQWq5vCQNXPF17XAOudm5kw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"y9rXUyBrb4odRMr/2weGNjvTfAR1KCCv79ZtKf/AGYwpES0kQofvcbWtyYlLLcN/6FR+3i/cthWDFq9z7Zb6pg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"HN2paVWvvraGbHvLLtkLKyr0eyV9gQWqpiWpaRQ5/6UJtVGZ/lcoE1oPXETsR92XvnWCmxem2t0mfdS0SmPRqw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Z3G9/2118MGJT0jKHkfJYh6dIiwD9F8Cb/NB4a3JJM4TPbyjS9LhfEb4kMWCQeL9Q3Z0WvVPo7porHG8hYwFTA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"/7acMiDlv6Ir0AdNCCAC8CNJntJ3lRNpIte96Eg5IHpnHT2uFcj85ohMgrzr71thYxbHXPUh7POitjLeWtwNNA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"/s+O1aAA2uZKXU0+fyQtSDF+Z4Va6htb48dRbN+yjMlAhGAyxfzAq7fkZ6ieCcmn9AKIv3OHuERNhGxu6cTfmA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"irqmA63P1V/bcwXoigMhfi2Y+EYk8Bf2nBQrV9wd1wBy+TBWKfW2T32MM5HFEhNbeUn5NUr3db7L5ED7WRBY4g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"WBPCRcQYLvpLnDrDuxtQ9izrlKAWbVAIp2lNbchmaE9mbXH6eH5i8uFZCrPy3a0tgpMbUa/GLL/sV4QMwEG1ow=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"lEBNnEWFIIn8m3C0hYJgfJmwWofDYeZJEeOwqSCChlASVrCkC5Wb7aLlv2NtaG28g2oSf2DVothgAbxqGwH2Fw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"o5e9YsnJHxiga5J0cUaEomYuc8+RxCdmrUeCd2fNTiwqlheMXtHBmVheXSu/gK36dEAHX4ZQIfRjrAtzPsa6bw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"B9jG1IRup3FAiU2LeMOV5mp9mFOFqE8MppkM2nuGG3cb3r9+fS6FMqeK+BVdxhH4wi0PZKfBDBuEE1vKy3Wrfw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"zLqZ1/ePB3sh9/h84Q4bQs9kGV9OklEklSgtBsZykSwbwwJPcmF/nCqgeVyo0E1vXdP+UuXiKVefHd7UHF314Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"01d2ycBGpVs5pTwIAJsoJKmBJ/FliZD8MbET2aPpxXpAsPmRsZj//d50yxE3TuP/ZrtLWwrJqnUMICKtxYFJPA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"mqJzSqg7PIe3ImnZlIlJgd+V8PuR8r7/H7jYLxwEoGszba06dOWYa/O6INB4dQpqKEIFjYXbCimeVT2l2ld1xw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"aabbb","Path":"gno.land/r/demo/aabbb","Files":[{"Name":"aabbb.gno","Body":"package aabb\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"ZUM6neoR40ZyHugQnnwCcF9YvgdKJopzffXoKaFW3w4+b/MqoodIDkq7p7CurQsNLvPqI4abTTMe6g8DyjBFbA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","to_address":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","amount":"100000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"CTEMHPVw8/O2olpetp752xLQQQXnHNyMnFGaef6LpH1tAKLI/PZ1/Z5aABBxIrNhsgfaUJrbnu8+qxcF46lEhw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1q0pjk6dd6lehd5q3gcpghvcf3rd6mqy7tge4va","amount":"80000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"rcUT8hrzIuq2WWcfYHHKucWAEOONg1LZPvUD10Z7YCktecZcR+mKLsj+gEW2+HJ/rs3uorpTa2q8ziSv2wUiDA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1q0pjk6dd6lehd5q3gcpghvcf3rd6mqy7tge4va","amount":"80000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"LBScWO8mfzenB8VJg29KqOOcVcjIrgw5qE0NMf8v77IEdslLC7Z4rvpL3QZ6AuYRbqcYutvxNgz5m49IvIwFOw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1q0pjk6dd6lehd5q3gcpghvcf3rd6mqy7tge4va","amount":"80000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"qAPTH+/zMwPmDp0J/oUccBpiIxvpNRvmrnPnEJWK9ctcfkmsVWKJHCBHNSoRFIBM0XrWEe1ngE+vSnKcG56PZw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1q0pjk6dd6lehd5q3gcpghvcf3rd6mqy7tge4va","amount":"80000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"i3iatIhuPeOdHEqzyvZKhg6aEMK5uO35OMdAbw599Ix1j+6DDdJNZeIdjN+Op4QXP8dZ2RjZ+vyZRO7o74WN2w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1q0pjk6dd6lehd5q3gcpghvcf3rd6mqy7tge4va","amount":"80000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"y1vYMDhl1PI8eVFbRY4EpzB2PxLNhWcCCTI5hScssL5MDiDB+3Lw5afuLMVatUzLulmc8BOlWbaR1+uEekdOUQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1q0pjk6dd6lehd5q3gcpghvcf3rd6mqy7tge4va","amount":"80000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"B05ApIj8roLnGW6epSimntTyEGoGrkIlqsJcMmI7cB1C+YrjC8o8ICc3B4aJKuoI9sB1jCKflu4RfQSmu/yPxw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1q0pjk6dd6lehd5q3gcpghvcf3rd6mqy7tge4va","amount":"80000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"PnD4X8rXJqbk+caEAVN9OvSXCAmUMk6u3aZTboyO+Rsi54tdPBRbY5WLqefzIoGXsr8UwjHvxTB3JjCJodGQ1Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1q0pjk6dd6lehd5q3gcpghvcf3rd6mqy7tge4va","amount":"80000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"nyaAAYChoK4sHg25HPvG/JhL/MABN5zBL/0mbSRMv91o+XxBagAB66gqhYFXDzWQVbqOsgp1ST1R7xzuxnATUg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1q0pjk6dd6lehd5q3gcpghvcf3rd6mqy7tge4va","amount":"80000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"qjkWnvx13+71a/ciN1/WWQAWsESqG3f6+b4DpGkB2ZB9mECz2iSDq3oLaP8u2w5jIfGNsFJm1jMC1VFYcC1t8g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"hello","Path":"gno.land/r/demo/hello222","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"5000000ugnot"},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"CZc7gq3sqHb4kDMkMNNFQ/2eIM+o8y9qn3W90ixZ4vc50ErDugEMJAq9E00KLVwRw1hnqb4Prn0XKHarEzh06w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mjzyk7r49ta4h6ppgv2fedgz5ek6hgyttge9pv","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1flk9z2qmkgqeyrl654r3639rzgz7xczdfwwqw7","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwpFZ/Eba2YD0tSPYISodHi2gBBhx/hUg/PPZTt93aq7"},"signature":"GrA/hg5b6aSeaBZb0YkhFJAyYZvUJ6r7pnJrbcjCeuI07dy70lkiP0k40KHIQ4CptWyE/WrogK91jiLy2uAxGQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_3","func":"Propose","args":["0","Create moderated board","","AAtDcmVhdGVCb2FyZAAIbXlfYm9hcmQ"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"xVGoL1C6F68QRjFX+DOg/3iviGJKvgT0N5OvFj3N1FRLScDusSt+uSk5gEycuy2aXXKS8qhnw/G+DCLyEFim0w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_3","func":"Propose","args":["0","Delete post","","AApEZWxldGVQb3N0AAAAAAAAAAEAAAAAAAAAAQAAAAAAAAACAAlEZW1vcmF0ZWQ"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"voL/BEvmlFTiV/gJzowxTo+eKiTrt27vzQ3+X6J5RrchO9pvcESogY/IB7vwjU3NYlCarHFzIvCs16vmHy4AdA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/dao_realm","func":"Propose","args":["0","Delete post","","AApEZWxldGVQb3N0AAAAAAAAAAEAAAAAAAAAAQAAAAAAAAACAAlEZW1vcmF0ZWQ"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"oUunI+xM9WVKmuFVaLvhs1TNT7FTp0+MfRXQ9Vxn6dggexucq8Afe5w78B13D09+KEkQKvkkAtN8roZ9P9k1DQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/dao_realm","func":"Propose","args":["0","A","B",""]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"yBIUo/7vgBFG1zXzlut4qTL7rxGmSBx9XPcW97s52ahAAdZpAzF3FRQUJZYikyxz+BNL6X13WFnF2tssMtjqSQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1x7mvd7sr7kxjt87hn56dmx5kyt7q0e7qgmwys2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"xq/Pbl2c0GrALolL41LpY8JL53mNksKbjG9VT998KTUbHzvBAAJWBdwiBuMauZZ5QsBVVw5kRWwkvzrHUS4PoQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1r8r79suzvajkh047qss09ce3akegaqars3j6uy","to_address":"g1x7mvd7sr7kxjt87hn56dmx5kyt7q0e7qgmwys2","amount":"100000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxBOIDQaEvDBJrHMopsYcZDKDwwRLQ3AqoHUYa6gDbYM"},"signature":"/izeGQemxvXUGI9PVQ7/H1NFRmKMUEUahSo8TMr7+1k6yaUHGBWxRsGSRegfoK4PVmxcdEBe2BcoTAZ0Apt6SQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rv4myhkefn4592w42kv80fsxqn5euup0d3x44e","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"E2J6D2+HUiL/1Nh+7sfFgxG00DahjZo9nX2o7ys82UtUjOHCfjI21rWRk4102mhbug4EQmnKjh79YBGb/Z6QWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ln2usxhhlz52azszw67xxm2x04nmq5xl9y8dmg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"1RKXiYou6Rz1L9O6JM+gMdvyT1pkw4exF/+YmMqH1+kBr06MGh4vdz25GMZDzdio8432iraBt82vftGWFmNifA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ufafehysvzekctlfypp74yxktff7d7u2du4ptk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"DAxihgc+YLTEy2xeUIbF34eOZl/q1redZrmu15eW11MopgJJ3LRjZHS22NIwxmiGkoGrdthmpvwAvwA+21h26w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1mjzyk7r49ta4h6ppgv2fedgz5ek6hgyttge9pv","3"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"WeFm5Iyr/kvUIBl7wcX88s6170waGLMdozDPRwk/3RwgPxA6jtt5s7jofm6J1Oj/A9ABk/CgwLuxYqJsdmDbVA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1flk9z2qmkgqeyrl654r3639rzgz7xczdfwwqw7","to_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","amount":"500000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0cN2jM5SaG0tbXUEYYhgUmFIGjdIxzlDeBxpetbIQsa"},"signature":"I4Vcmy5CyhLMMQy71pUdaTa08xiye8D3zH49k9n5t7ttdHD8qsu+HIlVhHCXGjRd03TQXaQPzeGwhu55j3hq2Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1hxecqgcv4f0p7s7ap6t20vaeeuvqgvl9qtchr6","2"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"aZUDONHQjkM7Db9Y0RssL/tmJ65nYfybVf6QXtSNlfMZLiUVpfYdFfM4KeplIDEIXAakVVru2GGgYtaI1Q2vRA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModAddPost","args":["monthly-dev-3","The More You Gno: Gno.land Monthly Updates - 3","\n**The More You Gno - Gno.land Monthly Updates 3**\n\nWe’ve been busy since the last edition of *The More You Gno,* with the Gno.land core team and ecosystem partners present at various global developer events. We’ve visited many gnomes (and gnomes-in-the-making) around the world from Berlin to Belgrade, spreading the word about Gno.land and growing our expanding community. Aside from all the networking, Gno.land is taking shape with a new iteration of our website, the Gno.land Funding and Grants Program, and a host of developer updates as always. Let’s dive in.\n\n**Gno by Example**\n\nWe recently launched [Gno by Example](https://gno-by-example.com/), our equivalent to [Solidity by Example](https://solidity-by-example.org/), where you can see tutorials and code snippets to help you learn and get more easily onboarded to Gno.land. Gno by Example is designed to be community-run with a front-end app and tutorials in markdown. There’s also a specific markdown syntax where you can embed certain file fragments to make your tutorials more structured. We’d love to build this into the ultimate resource center for Gno.land, so feel free to [contribute](https://github.com/gnolang/gno-by-example) with new tutorials and sections. Contributions here are eligible for rewards from the Game of Realms competition.\n\n**GnoVM**\n\nWe continue developing GnoVM and invite you to provide feedback on what can be improved. This month, there have been a lot of discussions about how to improve native bindings and use the Gno machine in native function calls. Native function calls are well-defined in Go code generation and Go templates but need some modifications for GnoVM. For example, since new native functions already exist in the Gno code, when we try to define a native function, calling the function doesn’t yield the desired result. We’ve created a bunch of panics and tried writing out native functions to see what goes on for them, in an investigation that will go on for the next few weeks. Got any ideas? Please contribute. ([PR 859](https://github.com/gnolang/gno/pull/859)).\n\n**Testnets**\n\nTalk about testnets has come up a lot in recent weeks and how to best proceed. Some gnomes are asking for a multi-node testnet to allow for great experimentation, whereas others prefer to keep the testnet single-node. There are advantages and disadvantages to both approaches and we are still listening to feedback and ideas. However, we will likely keep testnet 3 single-node and focus on the language while having a second dedicated multi-node testnet where devs can get creative, think outside of the box, test performance, consensus, and everything they need to push the chain to its limits. We’ve created a new [Hackerspace](https://github.com/gnolang/hackerspace) Repository for the multi-node testnet to prevent spam on the main repo, so please use it to share your scripts, posts, snippets, etc.\n\n**Native Coins and GRC-20 Tokens**\n\nWe uncovered some significant issues with the banker module ([PR 393](https://github.com/gnolang/gno/pull/393)) regarding minting and burning tokens with the package minter. It was not scoping, filtering, or minting tokens correctly, making it possible to mint and burn unlimited tokens, including GNOT. We want to allow any realm to create its own token and run multiple tokens on their chains, but we need a prefix for security to resolve the issue and allow anyone to create GRC20 smart-contract-based coins but not native coins. We continue to work with small fixes on this issue and will reopen the PR soon.\n\n**Gno.land Funding and Grants Program**\n\nLast month we released our Funding and Grants Program to encourage more developers, researchers, educators, and tinkerers to interact with Gno.land. If you’re interested in experimenting with Gnolang (Gno) and building innovative dApps, tooling, products, or infrastructure, check out our GitHub [Funding and Grants](https://github.com/gnolang/ecosystem-fund-grants) page for further information on how you can apply. Start contributing to Gno.land or Game of Realms as this is a prerequisite of the funding and grant application process.\n\n**Developer Relations**\n\nThe Gno core team is growing! We hired a new DevRel last month and are looking to take on another dev for this open position, so if you’re interested, head over to our [careers page here](https://jobs.lever.co/allinbits) and apply! You can expect to see a lot more documentation, FAQs, tutorials, and onboarding materials in the coming weeks and months.\n\n**Ecosystem Updates**\n\nOur community of gnomes continues to expand, making tons of activity and progress over the past few weeks. Let’s see what they’ve been up to below.\n\n**Onbloc**\n\nOnbloc has been super active this month attending and co-hosting IRL events and networking to find new gnomes about town. Among other updates, Onbloc has completed the first integration of Tendermint2 JS with the Adena wallet and will continue to swap out their existing libraries with TM2JS wherever applicable to ensure that they are as tightly integrated as possible. The team has also open-sourced the Gnoscan block explorer, so if you’re interested in contributing, hop on over to [Gnoscan here](https://gnoscan.io/) or the [GitHub repo](https://github.com/onbloc/gnoscan) here.\n\n**Teritori**\n\nAnother of our first cohorts from the Grants program, Teritori continues to churn out awesome work and expand its growing team. This month, Teritori has been busy integrating Adena with the Teritori app and working on the DAO contract to build a DAO deployer and various DAO standards and templates for DAO creation. Teritori’s target is to focus on a moderation DAO that can be used for content moderation in social feeds and boards. In the coming weeks, the team plans to integrate the DAO contract into the UI to allow the community to launch a DAO and experiment on the testnet. They have also made an effort to really integrate Gno users by adding .gno at the end of nicknames for people to use. All our grant recipients are documenting their journeys in the hackerspace repo, check out [Teritori’s](https://github.com/gnolang/hackerspace/issues/7) journey.\n\n**Resident Tinkerer, Zack**\n\nAnother grant receiver, Zack, has been making significant progress on his microblogging project. You can check out the specs on GitHub ([PR 791](https://github.com/gnolang/gno/pull/791)) or watch the informative tutorial video, [Go to Gno: How to Build a Microblog](https://www.youtube.com/watch?v=F-_dadxcRJM). You’ll find this especially useful if you have a background in Go and need some additional insights to turn your hand to blockchain coding. Zack has also been working on an implementation of a smart contract for creating and transferring text-based NFTs that conform to haiku poetry standards (find out more on GitHub ([PR 860](https://github.com/gnolang/gno/pull/860)). Other than that, Zack continues his Gnolang journey, “learning and having a lot of fun.”\n\n**EthSeoul, BUIDL Asia, and Getting to Gno**\n\nJune saw members of our core team heading over to Seoul, South Korea, for a week of networking, talks, and events. Our VP of Engineering Manfred Touron gave a keynote on the evolution of smart contracts and an introduction to Gno.land for participants of EthSeoul, followed by a fascinating dive into Proof of Contribution at BUIDL Asia, where we also had a booth. It was an honor to meet so many talented and motivated Korean developers and contributors from around the globe. Seoul is a hotbed of up-and-coming talent and we’ll definitely be back soon.\n\nWe also had the chance to meet with our most active ecosystem contributors Onbloc and co-hosted an event together, Getting to Gno, at the Code States developer academy along with long-time Cosmos builders, Cosmostation. Attendees had the chance to hear about what the core team is building and see some of the great work of our community. A massive thanks to everyone involved, it’s awesome to be BUIDLing together! Read more about our Korean adventures in this [fab write-up by Onbloc](https://medium.com/onbloc/2023-buidl-asia-recap-894c60a1c0f).\n\nEthSeoul - [Watch the talk here](https://www.youtube.com/watch?v=_iSsStlmxoU)\n\nBUIDL Asia - [Watch the talk here](https://www.youtube.com/watch?v=v6k3NHm5vcE)\n\n**EthBelgrade**\n\nCore contributor Milos Zivkovic rocked the Gno.land presence at EthBelgrade in Serbia, giving an introductory workshop about Gno.land, called 'Alice in Gno.land'. Being the first Ethereum conference organized in Serbia, there were lots of attendees from all over the Balkans. Participants joined in a journey through the enchanting realm of Gnolang and the Gno.land platform. Most of the participants were not aware of Goland before but were avid Gophers eager to learn more about the application of the Gno language in blockchains.\n\n**GopherCon Berlin**\n\nThe Gno.land team also had a blast last month at the European edition of GopherCon in Berlin. We had a booth at the event for two days, where we networked, talked about all things Gno, made some amazing connections, and even shared some live code! We’re looking to build an active, open-source Gopher contributor group in Gno.land, so stay tuned for more on that soon.\n\nComing up later this month, Gno.land is an official sponsor of EthCC, Paris, July 17-20. Stop by our booth to pick up some swag, say hey, and ask your questions about Gno.land. You can also catch us at the Nebular Summit for a keynote and workshop by our VP of Engineering, Manfred Touron.\n\n*Do you want to contribute to Gno.land’s monthly updates? If you’re building on Gno.land and want to highlight your development, project, event, or idea, let us know and we’ll include your contribution.*\n","gnoland,gnovm,tm2"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"2OADn9Wg5ilzFyuijuVKJodt0+xXp7uRnsTZ8OSUMnI13k7HHa/ARDqkEs5B/VcYzLDtC/qVgoqgjxnZBujnYA=="}],"memo":"from gnoblog-cli"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"gnodao","Path":"gno.land/r/demo/gnodao_v03","Files":[{"Name":"gnodao.gno","Body":"package gnodao\n\nimport (\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype VoteOption uint32\n\nconst (\n\tYES          VoteOption = 0 // Indicates approval of the proposal in its current form.\n\tNO           VoteOption = 1 // Indicates disapproval of the proposal in its current form.\n\tNO_WITH_VETO VoteOption = 2 // Indicates stronger opposition to the proposal than simply voting No. Not available for SuperMajority-typed proposals as a simple No of 1/3 out of total votes would result in the same outcome.\n\tABSTAIN      VoteOption = 3 // Indicates that the voter is impartial to the outcome of the proposal. Although Abstain votes are counted towards the quorum, they're excluded when calculating the ratio of other voting options above.\n)\n\n// GNODAO VOTE\ntype Vote struct {\n\taddress   std.Address // address of the voter\n\ttimestamp uint64      // block timestamp of the vote\n\toption    VoteOption  // vote option\n}\n\ntype DAO struct {\n\tid               uint64\n\turi              string       // DAO homepage link\n\tmetadata         string       // DAO metadata reference link\n\tfunds            uint64       // DAO managing funds\n\tdepositHistory   []string     // deposit history - reserved for later use\n\tspendHistory     []string     // spend history - reserved for later use\n\tpermissions      []string     // permissions managed on DAO - reserved for later use\n\tpermMap          *avl.MutTree // permission map - reserved for later use\n\tvotingPowers     *avl.MutTree\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalStatus uint32\n\nconst (\n\tNIL           ProposalStatus = 0\n\tVOTING_PERIOD ProposalStatus = 1\n\tPASSED        ProposalStatus = 2\n\tREJECTED      ProposalStatus = 3\n\tFAILED        ProposalStatus = 4\n)\n\nfunc (s ProposalStatus) String() string {\n\tswitch s {\n\tcase NIL:\n\t\treturn \"Nil\"\n\tcase VOTING_PERIOD:\n\t\treturn \"VotingPeriod\"\n\tcase PASSED:\n\t\treturn \"Passed\"\n\tcase REJECTED:\n\t\treturn \"Rejected\"\n\tcase FAILED:\n\t\treturn \"Failed\"\n\t}\n\treturn \"\"\n}\n\ntype VotingPower struct {\n\taddress string\n\tpower   uint64\n}\n\ntype Proposal struct {\n\tdaoId        uint64         // dao id of the proposal\n\tid           uint64         // unique id assigned for each proposal\n\ttitle        string         // proposal title\n\tsummary      string         // proposal summary\n\tspendAmount  uint64         // amount of tokens to spend as part the proposal\n\tspender      std.Address    // address to receive spending tokens\n\tvpUpdates    []VotingPower  // updates on voting power - optional\n\tnewMetadata  string         // new metadata for the DAO - optional\n\tnewURI       string         // new URI for the DAO - optional\n\tsubmitTime   uint64         // proposal submission time\n\tvoteEndTime  uint64         // vote end time for the proposal\n\tstatus       ProposalStatus // StatusNil | StatusVotingPeriod | StatusPassed | StatusRejected | StatusFailed\n\tvotes        *avl.MutTree   // votes on the proposal\n\tvotingPowers []uint64       // voting power sum per voting option\n}\n\n// GNODAO STATE\nvar daos []DAO\nvar proposals [][]Proposal\n\nfunc getDAOVotingPower(daoId uint64, address string) uint64 {\n\tif len(daos) \u003c= int(daoId) {\n\t\treturn 0\n\t}\n\tres, ok := daos[daoId].votingPowers.Get(address)\n\tif ok {\n\t\treturn res.(uint64)\n\t}\n\treturn 0\n}\n\nfunc IsDAOMember(daoId uint64, address std.Address) bool {\n\treturn getDAOVotingPower(daoId, address.String()) \u003e 0\n}\n\nfunc getVote(daoId, proposalId uint64, address std.Address) (Vote, bool) {\n\tif int(daoId) \u003e= len(daos) {\n\t\treturn Vote{}, false\n\t}\n\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\treturn Vote{}, false\n\t}\n\n\tvote, ok := proposals[daoId][proposalId].votes.Get(address.String())\n\tif ok {\n\t\treturn vote.(Vote), true\n\t}\n\treturn Vote{}, false\n}\n\nfunc parseVotingPowers(daoMembers, votingPowers string) []VotingPower {\n\tparsedVPs := []VotingPower{}\n\tif len(daoMembers) == 0 {\n\t\treturn parsedVPs\n\t}\n\tmemberAddrs := strings.Split(daoMembers, \",\")\n\tmemberPowers := strings.Split(votingPowers, \",\")\n\tif len(memberAddrs) != len(memberPowers) {\n\t\tpanic(\"mismatch between members and voting powers count\")\n\t}\n\tfor i, memberAddr := range memberAddrs {\n\t\tpower, err := strconv.Atoi(memberPowers[i])\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tparsedVPs = append(parsedVPs, VotingPower{\n\t\t\taddress: memberAddr,\n\t\t\tpower:   uint64(power),\n\t\t})\n\t}\n\treturn parsedVPs\n}\n\n// GNODAO FUNCTIONS\nfunc CreateDAO(\n\turi string,\n\tmetadata string,\n\tdaoMembers string,\n\tvotingPowers string,\n\tvotingPeriod uint64,\n\tvoteQuorum uint64,\n\tthreshold uint64,\n\tvetoThreshold uint64,\n) {\n\tdaoId := uint64(len(daos))\n\tdaos = append(daos, DAO{\n\t\tid:               daoId,\n\t\turi:              uri,\n\t\tmetadata:         metadata,\n\t\tfunds:            0,\n\t\tdepositHistory:   []string{},\n\t\tspendHistory:     []string{},\n\t\tpermissions:      []string{},\n\t\tpermMap:          avl.NewMutTree(),\n\t\tvotingPowers:     avl.NewMutTree(),\n\t\ttotalVotingPower: 0,\n\t\tvotingPeriod:     votingPeriod,\n\t\tvoteQuorum:       voteQuorum,\n\t\tthreshold:        threshold,\n\t\tvetoThreshold:    vetoThreshold,\n\t})\n\n\tparsedVPs := parseVotingPowers(daoMembers, votingPowers)\n\ttotalVotingPower := uint64(0)\n\tfor _, vp := range parsedVPs {\n\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\ttotalVotingPower += vp.power\n\t}\n\tdaos[daoId].totalVotingPower = totalVotingPower\n\tproposals = append(proposals, []Proposal{})\n\t// TODO: emit events\n}\n\nfunc CreateProposal(\n\tdaoId uint64,\n\ttitle, summary string,\n\tspendAmount uint64, spender std.Address,\n\tdaoMembers string,\n\tvpUpdates string,\n\tnewMetadata string,\n\tnewURI string,\n) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a dao member\")\n\t}\n\n\tparsedVPUpdates := parseVotingPowers(daoMembers, vpUpdates)\n\tproposals[daoId] = append(proposals[daoId], Proposal{\n\t\tdaoId:        daoId,\n\t\tid:           uint64(len(proposals[daoId])),\n\t\ttitle:        title,\n\t\tsummary:      summary,\n\t\tspendAmount:  spendAmount,\n\t\tspender:      spender,\n\t\tvpUpdates:    parsedVPUpdates,\n\t\tnewMetadata:  newMetadata,\n\t\tnewURI:       newURI,\n\t\tsubmitTime:   uint64(time.Now().Unix()),\n\t\tvoteEndTime:  uint64(time.Now().Unix()) + daos[daoId].votingPeriod,\n\t\tstatus:       VOTING_PERIOD,\n\t\tvotes:        avl.NewMutTree(),\n\t\tvotingPowers: []uint64{0, 0, 0, 0}, // initiate as zero for 4 vote types\n\t})\n}\n\nfunc VoteProposal(daoId, proposalId uint64, option VoteOption) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// if invalid proposal, panic\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\n\t// if vote end time is reached panic\n\tif time.Now().Unix() \u003e int64(proposals[daoId][proposalId].voteEndTime) {\n\t\tpanic(\"vote end time reached\")\n\t}\n\n\t// Original vote cancel\n\tcallerVotingPower := getDAOVotingPower(daoId, caller.String())\n\tvote, ok := getVote(daoId, proposalId, caller)\n\tif ok {\n\t\tif proposals[daoId][proposalId].votingPowers[int(vote.option)] \u003e callerVotingPower {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] -= callerVotingPower\n\t\t} else {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] = 0\n\t\t}\n\t}\n\n\t// Create a vote\n\tproposals[daoId][proposalId].votes.Set(caller.String(), Vote{\n\t\taddress:   caller,\n\t\ttimestamp: uint64(time.Now().Unix()),\n\t\toption:    option,\n\t})\n\n\t// Voting power by option update for new vote\n\tproposals[daoId][proposalId].votingPowers[int(option)] += callerVotingPower\n}\n\n// TODO: handle voting power change during voting period for other proposal\n// TODO: experiment with gas limit\nfunc TallyAndExecute(daoId, proposalId uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// validation for proposalId\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\tdao := daos[daoId]\n\tproposal := proposals[daoId][proposalId]\n\tvotingPowers := proposal.votingPowers\n\n\tif time.Now().Unix() \u003c int64(proposal.voteEndTime) {\n\t\tpanic(\"proposal is in voting period\")\n\t}\n\n\t// reference logic for tally - https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/keeper/tally.go\n\ttotalVotes := votingPowers[YES] + votingPowers[NO] + votingPowers[NO_WITH_VETO] + votingPowers[ABSTAIN]\n\tif totalVotes \u003c dao.totalVotingPower*dao.voteQuorum/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If no one votes (everyone abstains), proposal rejected\n\tif totalVotes == votingPowers[ABSTAIN] {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/3 of voters veto, proposal rejected\n\tvetoThreshold := dao.vetoThreshold\n\tif votingPowers[NO_WITH_VETO] \u003e totalVotes*vetoThreshold/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote Yes, proposal passes\n\tthreshold := dao.threshold\n\tif votingPowers[YES] \u003e (totalVotes-votingPowers[ABSTAIN])*threshold/100 {\n\t\tproposals[daoId][proposalId].status = PASSED\n\n\t\t// TODO: spend coins when spendAmount is positive \u0026 spender is a valid address\n\t\tif proposal.spendAmount \u003e 0 {\n\t\t\tif daos[daoId].funds \u003e= proposal.spendAmount {\n\t\t\t\tdaos[daoId].funds -= proposal.spendAmount\n\t\t\t} else {\n\t\t\t\tproposals[daoId][proposalId].status = FAILED\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tif proposal.newMetadata != \"\" {\n\t\t\tdaos[daoId].metadata = proposal.newMetadata\n\t\t}\n\n\t\tif proposal.newURI != \"\" {\n\t\t\tdaos[daoId].uri = proposal.newURI\n\t\t}\n\n\t\tfor _, vp := range proposal.vpUpdates {\n\t\t\tdaos[daoId].totalVotingPower -= getDAOVotingPower(daoId, vp.address)\n\t\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\t\tdaos[daoId].totalVotingPower += vp.power\n\t\t}\n\n\t\t// TODO: contract does not own account that can hold coins - this is one of limitations\n\t\t// TODO: Adena Wallet from OnBloc - investigate on how they manage coins (swap - custody?)\n\t\t// Manual sending for funds (Address \u003c-\u003e Address) - Miloš Živković\n\t\t// https://github.com/gnolang/gno/blob/e392ab51bc05a5efbceaa8dbe395bac2e01ad808/tm2/pkg/crypto/keys/client/send.go#L109-L119\n\t\treturn\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote No, proposal rejected\n\tproposals[daoId][proposalId].status = REJECTED\n}\n\nfunc DepositDAO(daoId uint64, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// TODO: send coins from caller to DAO\n\t// TODO: verify received amount\n\t// daos[daoId].depositHistory = append(daos[daoId].depositHistory, Deposit{\n\t// \taddress: caller,\n\t// \tamount:  amount,\n\t// })\n}\n\nfunc GetDAO(daoId uint64) DAO {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\treturn daos[daoId]\n}\n\nfunc GetDAOs(startAfter, limit uint64) []DAO {\n\tmax := uint64(len(daos))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn daos[startAfter:max]\n}\n\nfunc GetProposal(daoId, proposalId uint64) Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\treturn proposals[daoId][proposalId]\n}\n\nfunc GetProposals(daoId, startAfter, limit uint64) []Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tmax := uint64(len(proposals[daoId]))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn proposals[daoId][startAfter:max]\n}\n\nfunc RenderVote(daoId, proposalId uint64, address std.Address) string {\n\tvote, found := getVote(daoId, proposalId, address)\n\tif !found {\n\t\treturn \"\"\n\t}\n\n\tbz, err := json.Marshal(vote)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn string(bz)\n}\n\ntype DAOEncode struct {\n\tid               uint64\n\turi              string // DAO homepage link\n\tmetadata         string // DAO metadata reference link\n\tfunds            uint64 // DAO managing funds\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalEncode struct {\n\tdaoId        uint64\n\tid           uint64\n\ttitle        string\n\tsummary      string\n\tspendAmount  uint64\n\tspender      std.Address\n\tvpUpdates    []VotingPower\n\tnewMetadata  string\n\tnewURI       string\n\tsubmitTime   uint64\n\tvoteEndTime  uint64\n\tstatus       ProposalStatus\n\tvotingPowers []uint64\n}\n\nfunc GetDAOEncodeObject(dao DAO) DAOEncode {\n\treturn DAOEncode{\n\t\tid:               dao.id,\n\t\turi:              dao.uri,\n\t\tmetadata:         dao.metadata,\n\t\tfunds:            dao.funds,\n\t\ttotalVotingPower: dao.totalVotingPower,\n\t\tvotingPeriod:     dao.votingPeriod,\n\t\tvoteQuorum:       dao.voteQuorum,\n\t\tthreshold:        dao.threshold,\n\t\tvetoThreshold:    dao.vetoThreshold,\n\t}\n}\n\nfunc GetProposalEncodeObject(p Proposal) DAOEncode {\n\treturn DAOEncode{\n\t\tdaoId:        p.daoId,\n\t\tid:           p.id,\n\t\ttitle:        p.title,\n\t\tsummary:      p.summary,\n\t\tspendAmount:  p.spendAmount,\n\t\tspender:      p.spender,\n\t\tvpUpdates:    p.vpUpdates,\n\t\tnewMetadata:  p.newMetadata,\n\t\tnewURI:       p.newURI,\n\t\tsubmitTime:   p.submitTime,\n\t\tvoteEndTime:  p.voteEndTime,\n\t\tstatus:       p.status,\n\t\tvotingPowers: p.votingPowers,\n\t}\n}\n\nfunc RenderDAO(daoId uint64) string {\n\tdaoEncode := GetDAOEncodeObject(GetDAO(daoId))\n\tbz, err := json.Marshal(daoEncode)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn string(bz)\n}\n\nfunc RenderDAOs(startAfter, limit uint64) string {\n\tdaos := GetDAOs(startAfter, limit)\n\tdaoEncodes := []DAOEncode{}\n\tfor _, dao := range daos {\n\t\tdaoEncode := GetDAOEncodeObject(dao)\n\t\tdaoEncodes = append(daoEncodes, daoEncode)\n\t}\n\tbz, err := json.Marshal(daoEncodes)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn string(bz)\n}\n\nfunc RenderProposal(daoId, proposalId uint64) string {\n\tproposalEncode := GetProposalEncodeObject(GetProposal(daoId, proposalId))\n\tbz, err := json.Marshal(proposalEncode)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn string(bz)\n}\n\nfunc RenderProposals(daoId, startAfter, limit uint64) string {\n\tproposals := GetProposals(daoId, startAfter, limit)\n\tproposalEncodes := []ProposalEncode{}\n\tfor _, dao := range proposals {\n\t\tproposalEncode := GetDAOEncodeObject(dao)\n\t\tproposalEncodes = append(proposalEncodes, proposalEncode)\n\t}\n\tbz, err := json.Marshal(proposalEncodes)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn string(bz)\n}\n\nfunc Render(path string) string {\n\treturn \"\"\n}\n"},{"Name":"gnodao_test.gno","Body":"package gnodao\n\nimport (\n\t\"fmt\"\n\t\"std\"\n\t\"testing\"\n\t\"time\"\n)\n\nvar caller std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnabcde\"\nvar caller1 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\"\nvar caller2 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\"\nvar daoMembers = []std.Address{\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnccccc\",\n}\nvar votingPowers = []VotingPower{\n\t{\n\t\taddress: daoMembers[0].String(),\n\t\tpower:   1,\n\t},\n\t{\n\t\taddress: daoMembers[1].String(),\n\t\tpower:   2,\n\t},\n\t{\n\t\taddress: daoMembers[2].String(),\n\t\tpower:   3,\n\t},\n}\n\nfunc assertPanic(t *testing.T, f func()) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t}\n\t}()\n\tf()\n}\n\nfunc TestIsDAOMember(t *testing.T) {\n\tdaos = []DAO{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\n\t// TODO: what package is ideal to use for checks?\n\tif IsDAOMember(0, caller) != false {\n\t\tt.Errorf(\"Should not be false\")\n\t}\n\tif IsDAOMember(0, caller1) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n\tif IsDAOMember(0, caller2) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n}\n\nfunc TestCreateDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\tif len(daos) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tif len(proposals) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tdao := daos[0]\n\tif dao.id != 0 {\n\t\tt.Errorf(\"first DAO id should be 0\")\n\t}\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"dao uri not set properly\")\n\t}\n\tif dao.metadata != \"https://metadata.gnodao1.org\" {\n\t\tt.Errorf(\"dao metadata not set properly\")\n\t}\n\tif dao.funds != 0 {\n\t\tt.Errorf(\"dao funds not set properly\")\n\t}\n\tif len(dao.depositHistory) != 0 {\n\t\tt.Errorf(\"dao deposit history not set properly\")\n\t}\n\tif len(dao.spendHistory) != 0 {\n\t\tt.Errorf(\"dao spend history not set properly\")\n\t}\n\tif len(dao.permissions) != 0 {\n\t\tt.Errorf(\"dao permissions not set properly\")\n\t}\n\tif dao.permMap == nil {\n\t\tt.Errorf(\"dao permission map not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 0 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller1.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller2.String()) != 2 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif dao.totalVotingPower != 6 {\n\t\tt.Errorf(\"totalVotingPower not set properly\")\n\t}\n\tif dao.votingPeriod != 86400*2 {\n\t\tt.Errorf(\"votingPeriod not set properly\")\n\t}\n\tif dao.voteQuorum != 30 {\n\t\tt.Errorf(\"voteQuorum not set properly\")\n\t}\n\tif dao.threshold != 10 {\n\t\tt.Errorf(\"threshold not set properly\")\n\t}\n\tif dao.vetoThreshold != 10 {\n\t\tt.Errorf(\"vetoThreshold not set properly\")\n\t}\n}\n\nfunc TestCreateProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\t})\n\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tproposal := proposals[0][0]\n\tif proposal.daoId != 0 {\n\t\tt.Errorf(\"proposal daoId should be 0\")\n\t}\n\tif proposal.id != 0 {\n\t\tt.Errorf(\"proposal id should be 0\")\n\t}\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"proposal title not set properly\")\n\t}\n\tif proposal.summary != \"Proposal to bootstrap DAO fund.\" {\n\t\tt.Errorf(\"proposal summary not set properly\")\n\t}\n\tif proposal.spendAmount != 0 {\n\t\tt.Errorf(\"proposal spendAmount not set properly\")\n\t}\n\tif proposal.spender != caller {\n\t\tt.Errorf(\"proposal spender not set properly\")\n\t}\n\tif len(proposal.vpUpdates) != 0 {\n\t\tt.Errorf(\"proposal vpUpdates not set properly\")\n\t}\n\tif proposal.newMetadata != \"\" {\n\t\tt.Errorf(\"proposal newMetadata not set properly\")\n\t}\n\tif proposal.newURI != \"\" {\n\t\tt.Errorf(\"proposal newURI not set properly\")\n\t}\n\tif proposal.submitTime != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"proposal submitTime not set properly\")\n\t}\n\tif proposal.voteEndTime != uint64(time.Now().Unix())+daos[0].votingPeriod {\n\t\tt.Errorf(\"proposal voteEndTime not set properly\")\n\t}\n\tif proposal.status != VOTING_PERIOD {\n\t\tt.Errorf(\"proposal status not set properly\")\n\t}\n\tif proposal.votes == nil {\n\t\tt.Errorf(\"proposal votes not set properly\")\n\t}\n\tif len(proposal.votingPowers) != 4 {\n\t\tt.Errorf(\"proposal votingPowers not set properly\")\n\t}\n}\n\nfunc TestVoteProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(1, 0, YES)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(0, 1, YES)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tVoteProposal(0, 0, YES)\n\t})\n\n\t// vote and check result is set properly\n\tstd.TestSetOrigCaller(caller1)\n\tVoteProposal(0, 0, YES)\n\tvote, found := getVote(0, 0, caller1)\n\tif !found {\n\t\tt.Errorf(\"proposal vote not set\")\n\t}\n\tif vote.address != caller1 {\n\t\tt.Errorf(\"vote address not set properly\")\n\t}\n\tif vote.timestamp != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"vote timestamp not set properly\")\n\t}\n\tif vote.option != YES {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 1 {\n\t\tt.Errorf(\"votePowers by vote option not set properly\")\n\t}\n\n\t// vote again with different option and check result\n\tVoteProposal(0, 0, NO)\n\tvote, found = getVote(0, 0, caller1)\n\tif vote.option != NO {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 0 {\n\t\tt.Errorf(\"votePowers for YES not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(NO)] != 1 {\n\t\tt.Errorf(\"votePowers for NO not set properly\")\n\t}\n\n\t// test vote end time already reached\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\t\tVoteProposal(0, 0, YES)\n\t})\n}\n\nfunc TestTallyAndExecute(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{\n\t\t{\n\t\t\taddress: caller.String(),\n\t\t\tpower:   1,\n\t\t},\n\t}, \"newMetadata.com\", \"newURI.com\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(1, 0)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 1)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tTallyAndExecute(0, 0)\n\t})\n\tassertPanic(t, func() { // vote end time not pass\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 0)\n\t})\n\n\t// vote end time to be reached\n\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\n\t// quorum not reached\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for vote quorum\")\n\t}\n\n\t// everyone abstains\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for all abstains\")\n\t}\n\n\t// more than 1/3 vote with NO_WITH_VETO\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower / 2\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = daos[0].totalVotingPower / 2\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for NO_WITH_VETO\")\n\t}\n\n\t// all YES vote\n\tproposals[0][0].votingPowers[ABSTAIN] = 0\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = 0\n\tproposals[0][0].votingPowers[YES] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != PASSED {\n\t\tt.Errorf(\"proposal should be PASSED\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif daos[0].metadata != \"newMetadata.com\" {\n\t\tt.Errorf(\"metadata not set properly\")\n\t}\n\tif daos[0].uri != \"newURI.com\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestDepositDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when not a dao member\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tDepositDAO(0, 100)\n\t})\n\n\t// not panics\n\tstd.TestSetOrigCaller(caller1)\n\tDepositDAO(0, 100)\n}\n\nfunc TestGetDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tGetDAO(100)\n\t})\n\n\t// success when valid dao id\n\tdao := GetDAO(0)\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestGetDAOs(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tgotDaos := GetDAOs(0, 10)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tCreateDAO(\"https://gnodao2.org\", \"https://metadata.gnodao2.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tgotDaos = GetDAOs(0, 0)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 10)\n\tif len(gotDaos) != 2 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 1)\n\tif len(gotDaos) != 1 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n}\n\nfunc TestGetProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tGetProposal(1, 0)\n\t})\n\n\t// panic when invalid proposal id\n\tassertPanic(t, func() {\n\t\tGetProposal(0, 1)\n\t})\n\n\t// success when valid dao id and proposal id\n\tproposal := GetProposal(0, 0)\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"title not set properly\")\n\t}\n}\n\nfunc TestGetProposals(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tassertPanic(t, func() { // invalid dao id\n\t\tGetProposals(0, 0, 10)\n\t})\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"proposal #1\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\tCreateProposal(0, \"proposal #2\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\tgotProposals := GetProposals(0, 0, 0)\n\tif len(gotProposals) != 0 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 10)\n\tif len(gotProposals) != 2 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 1)\n\tif len(gotProposals) != 1 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n}\n\nfunc TestRender(t *testing.T) {\n\tif Render(\"\") != \"\" {\n\t\tt.Errorf(\"Render function should empty\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"h0RBzR5meM1RygXZXkTo59iAzGwKyzEWhOc/MYtPMsE/b88xPfuKU5qPq0HloNHamewU2cCv5ghAhe0PcHF5GA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"gnodao","Path":"gno.land/r/demo/gnodao_v03","Files":[{"Name":"gnodao.gno","Body":"package gnodao\n\nimport (\n\t\"encoding/json\"\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype VoteOption uint32\n\nconst (\n\tYES          VoteOption = 0 // Indicates approval of the proposal in its current form.\n\tNO           VoteOption = 1 // Indicates disapproval of the proposal in its current form.\n\tNO_WITH_VETO VoteOption = 2 // Indicates stronger opposition to the proposal than simply voting No. Not available for SuperMajority-typed proposals as a simple No of 1/3 out of total votes would result in the same outcome.\n\tABSTAIN      VoteOption = 3 // Indicates that the voter is impartial to the outcome of the proposal. Although Abstain votes are counted towards the quorum, they're excluded when calculating the ratio of other voting options above.\n)\n\n// GNODAO VOTE\ntype Vote struct {\n\taddress   std.Address // address of the voter\n\ttimestamp uint64      // block timestamp of the vote\n\toption    VoteOption  // vote option\n}\n\ntype DAO struct {\n\tid               uint64\n\turi              string       // DAO homepage link\n\tmetadata         string       // DAO metadata reference link\n\tfunds            uint64       // DAO managing funds\n\tdepositHistory   []string     // deposit history - reserved for later use\n\tspendHistory     []string     // spend history - reserved for later use\n\tpermissions      []string     // permissions managed on DAO - reserved for later use\n\tpermMap          *avl.MutTree // permission map - reserved for later use\n\tvotingPowers     *avl.MutTree\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalStatus uint32\n\nconst (\n\tNIL           ProposalStatus = 0\n\tVOTING_PERIOD ProposalStatus = 1\n\tPASSED        ProposalStatus = 2\n\tREJECTED      ProposalStatus = 3\n\tFAILED        ProposalStatus = 4\n)\n\nfunc (s ProposalStatus) String() string {\n\tswitch s {\n\tcase NIL:\n\t\treturn \"Nil\"\n\tcase VOTING_PERIOD:\n\t\treturn \"VotingPeriod\"\n\tcase PASSED:\n\t\treturn \"Passed\"\n\tcase REJECTED:\n\t\treturn \"Rejected\"\n\tcase FAILED:\n\t\treturn \"Failed\"\n\t}\n\treturn \"\"\n}\n\ntype VotingPower struct {\n\taddress string\n\tpower   uint64\n}\n\ntype Proposal struct {\n\tdaoId        uint64         // dao id of the proposal\n\tid           uint64         // unique id assigned for each proposal\n\ttitle        string         // proposal title\n\tsummary      string         // proposal summary\n\tspendAmount  uint64         // amount of tokens to spend as part the proposal\n\tspender      std.Address    // address to receive spending tokens\n\tvpUpdates    []VotingPower  // updates on voting power - optional\n\tnewMetadata  string         // new metadata for the DAO - optional\n\tnewURI       string         // new URI for the DAO - optional\n\tsubmitTime   uint64         // proposal submission time\n\tvoteEndTime  uint64         // vote end time for the proposal\n\tstatus       ProposalStatus // StatusNil | StatusVotingPeriod | StatusPassed | StatusRejected | StatusFailed\n\tvotes        *avl.MutTree   // votes on the proposal\n\tvotingPowers []uint64       // voting power sum per voting option\n}\n\n// GNODAO STATE\nvar daos []DAO\nvar proposals [][]Proposal\n\nfunc getDAOVotingPower(daoId uint64, address string) uint64 {\n\tif len(daos) \u003c= int(daoId) {\n\t\treturn 0\n\t}\n\tres, ok := daos[daoId].votingPowers.Get(address)\n\tif ok {\n\t\treturn res.(uint64)\n\t}\n\treturn 0\n}\n\nfunc IsDAOMember(daoId uint64, address std.Address) bool {\n\treturn getDAOVotingPower(daoId, address.String()) \u003e 0\n}\n\nfunc getVote(daoId, proposalId uint64, address std.Address) (Vote, bool) {\n\tif int(daoId) \u003e= len(daos) {\n\t\treturn Vote{}, false\n\t}\n\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\treturn Vote{}, false\n\t}\n\n\tvote, ok := proposals[daoId][proposalId].votes.Get(address.String())\n\tif ok {\n\t\treturn vote.(Vote), true\n\t}\n\treturn Vote{}, false\n}\n\nfunc parseVotingPowers(daoMembers, votingPowers string) []VotingPower {\n\tparsedVPs := []VotingPower{}\n\tif len(daoMembers) == 0 {\n\t\treturn parsedVPs\n\t}\n\tmemberAddrs := strings.Split(daoMembers, \",\")\n\tmemberPowers := strings.Split(votingPowers, \",\")\n\tif len(memberAddrs) != len(memberPowers) {\n\t\tpanic(\"mismatch between members and voting powers count\")\n\t}\n\tfor i, memberAddr := range memberAddrs {\n\t\tpower, err := strconv.Atoi(memberPowers[i])\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tparsedVPs = append(parsedVPs, VotingPower{\n\t\t\taddress: memberAddr,\n\t\t\tpower:   uint64(power),\n\t\t})\n\t}\n\treturn parsedVPs\n}\n\n// GNODAO FUNCTIONS\nfunc CreateDAO(\n\turi string,\n\tmetadata string,\n\tdaoMembers string,\n\tvotingPowers string,\n\tvotingPeriod uint64,\n\tvoteQuorum uint64,\n\tthreshold uint64,\n\tvetoThreshold uint64,\n) {\n\tdaoId := uint64(len(daos))\n\tdaos = append(daos, DAO{\n\t\tid:               daoId,\n\t\turi:              uri,\n\t\tmetadata:         metadata,\n\t\tfunds:            0,\n\t\tdepositHistory:   []string{},\n\t\tspendHistory:     []string{},\n\t\tpermissions:      []string{},\n\t\tpermMap:          avl.NewMutTree(),\n\t\tvotingPowers:     avl.NewMutTree(),\n\t\ttotalVotingPower: 0,\n\t\tvotingPeriod:     votingPeriod,\n\t\tvoteQuorum:       voteQuorum,\n\t\tthreshold:        threshold,\n\t\tvetoThreshold:    vetoThreshold,\n\t})\n\n\tparsedVPs := parseVotingPowers(daoMembers, votingPowers)\n\ttotalVotingPower := uint64(0)\n\tfor _, vp := range parsedVPs {\n\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\ttotalVotingPower += vp.power\n\t}\n\tdaos[daoId].totalVotingPower = totalVotingPower\n\tproposals = append(proposals, []Proposal{})\n\t// TODO: emit events\n}\n\nfunc CreateProposal(\n\tdaoId uint64,\n\ttitle, summary string,\n\tspendAmount uint64, spender std.Address,\n\tdaoMembers string,\n\tvpUpdates string,\n\tnewMetadata string,\n\tnewURI string,\n) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a dao member\")\n\t}\n\n\tparsedVPUpdates := parseVotingPowers(daoMembers, vpUpdates)\n\tproposals[daoId] = append(proposals[daoId], Proposal{\n\t\tdaoId:        daoId,\n\t\tid:           uint64(len(proposals[daoId])),\n\t\ttitle:        title,\n\t\tsummary:      summary,\n\t\tspendAmount:  spendAmount,\n\t\tspender:      spender,\n\t\tvpUpdates:    parsedVPUpdates,\n\t\tnewMetadata:  newMetadata,\n\t\tnewURI:       newURI,\n\t\tsubmitTime:   uint64(time.Now().Unix()),\n\t\tvoteEndTime:  uint64(time.Now().Unix()) + daos[daoId].votingPeriod,\n\t\tstatus:       VOTING_PERIOD,\n\t\tvotes:        avl.NewMutTree(),\n\t\tvotingPowers: []uint64{0, 0, 0, 0}, // initiate as zero for 4 vote types\n\t})\n}\n\nfunc VoteProposal(daoId, proposalId uint64, option VoteOption) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// if invalid proposal, panic\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\n\t// if vote end time is reached panic\n\tif time.Now().Unix() \u003e int64(proposals[daoId][proposalId].voteEndTime) {\n\t\tpanic(\"vote end time reached\")\n\t}\n\n\t// Original vote cancel\n\tcallerVotingPower := getDAOVotingPower(daoId, caller.String())\n\tvote, ok := getVote(daoId, proposalId, caller)\n\tif ok {\n\t\tif proposals[daoId][proposalId].votingPowers[int(vote.option)] \u003e callerVotingPower {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] -= callerVotingPower\n\t\t} else {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] = 0\n\t\t}\n\t}\n\n\t// Create a vote\n\tproposals[daoId][proposalId].votes.Set(caller.String(), Vote{\n\t\taddress:   caller,\n\t\ttimestamp: uint64(time.Now().Unix()),\n\t\toption:    option,\n\t})\n\n\t// Voting power by option update for new vote\n\tproposals[daoId][proposalId].votingPowers[int(option)] += callerVotingPower\n}\n\n// TODO: handle voting power change during voting period for other proposal\n// TODO: experiment with gas limit\nfunc TallyAndExecute(daoId, proposalId uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// validation for proposalId\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\tdao := daos[daoId]\n\tproposal := proposals[daoId][proposalId]\n\tvotingPowers := proposal.votingPowers\n\n\tif time.Now().Unix() \u003c int64(proposal.voteEndTime) {\n\t\tpanic(\"proposal is in voting period\")\n\t}\n\n\t// reference logic for tally - https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/keeper/tally.go\n\ttotalVotes := votingPowers[YES] + votingPowers[NO] + votingPowers[NO_WITH_VETO] + votingPowers[ABSTAIN]\n\tif totalVotes \u003c dao.totalVotingPower*dao.voteQuorum/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If no one votes (everyone abstains), proposal rejected\n\tif totalVotes == votingPowers[ABSTAIN] {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/3 of voters veto, proposal rejected\n\tvetoThreshold := dao.vetoThreshold\n\tif votingPowers[NO_WITH_VETO] \u003e totalVotes*vetoThreshold/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote Yes, proposal passes\n\tthreshold := dao.threshold\n\tif votingPowers[YES] \u003e (totalVotes-votingPowers[ABSTAIN])*threshold/100 {\n\t\tproposals[daoId][proposalId].status = PASSED\n\n\t\t// TODO: spend coins when spendAmount is positive \u0026 spender is a valid address\n\t\tif proposal.spendAmount \u003e 0 {\n\t\t\tif daos[daoId].funds \u003e= proposal.spendAmount {\n\t\t\t\tdaos[daoId].funds -= proposal.spendAmount\n\t\t\t} else {\n\t\t\t\tproposals[daoId][proposalId].status = FAILED\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tif proposal.newMetadata != \"\" {\n\t\t\tdaos[daoId].metadata = proposal.newMetadata\n\t\t}\n\n\t\tif proposal.newURI != \"\" {\n\t\t\tdaos[daoId].uri = proposal.newURI\n\t\t}\n\n\t\tfor _, vp := range proposal.vpUpdates {\n\t\t\tdaos[daoId].totalVotingPower -= getDAOVotingPower(daoId, vp.address)\n\t\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\t\tdaos[daoId].totalVotingPower += vp.power\n\t\t}\n\n\t\t// TODO: contract does not own account that can hold coins - this is one of limitations\n\t\t// TODO: Adena Wallet from OnBloc - investigate on how they manage coins (swap - custody?)\n\t\t// Manual sending for funds (Address \u003c-\u003e Address) - Miloš Živković\n\t\t// https://github.com/gnolang/gno/blob/e392ab51bc05a5efbceaa8dbe395bac2e01ad808/tm2/pkg/crypto/keys/client/send.go#L109-L119\n\t\treturn\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote No, proposal rejected\n\tproposals[daoId][proposalId].status = REJECTED\n}\n\nfunc DepositDAO(daoId uint64, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// TODO: send coins from caller to DAO\n\t// TODO: verify received amount\n\t// daos[daoId].depositHistory = append(daos[daoId].depositHistory, Deposit{\n\t// \taddress: caller,\n\t// \tamount:  amount,\n\t// })\n}\n\nfunc GetDAO(daoId uint64) DAO {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\treturn daos[daoId]\n}\n\nfunc GetDAOs(startAfter, limit uint64) []DAO {\n\tmax := uint64(len(daos))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn daos[startAfter:max]\n}\n\nfunc GetProposal(daoId, proposalId uint64) Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\treturn proposals[daoId][proposalId]\n}\n\nfunc GetProposals(daoId, startAfter, limit uint64) []Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tmax := uint64(len(proposals[daoId]))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn proposals[daoId][startAfter:max]\n}\n\nfunc RenderVote(daoId, proposalId uint64, address std.Address) string {\n\tvote, found := getVote(daoId, proposalId, address)\n\tif !found {\n\t\treturn \"\"\n\t}\n\n\tbz, err := json.Marshal(vote)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn string(bz)\n}\n\ntype DAOEncode struct {\n\tid               uint64\n\turi              string // DAO homepage link\n\tmetadata         string // DAO metadata reference link\n\tfunds            uint64 // DAO managing funds\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalEncode struct {\n\tdaoId        uint64\n\tid           uint64\n\ttitle        string\n\tsummary      string\n\tspendAmount  uint64\n\tspender      std.Address\n\tvpUpdates    []VotingPower\n\tnewMetadata  string\n\tnewURI       string\n\tsubmitTime   uint64\n\tvoteEndTime  uint64\n\tstatus       ProposalStatus\n\tvotingPowers []uint64\n}\n\nfunc GetDAOEncodeObject(dao DAO) DAOEncode {\n\treturn DAOEncode{\n\t\tid:               dao.id,\n\t\turi:              dao.uri,\n\t\tmetadata:         dao.metadata,\n\t\tfunds:            dao.funds,\n\t\ttotalVotingPower: dao.totalVotingPower,\n\t\tvotingPeriod:     dao.votingPeriod,\n\t\tvoteQuorum:       dao.voteQuorum,\n\t\tthreshold:        dao.threshold,\n\t\tvetoThreshold:    dao.vetoThreshold,\n\t}\n}\n\nfunc GetProposalEncodeObject(p Proposal) DAOEncode {\n\treturn DAOEncode{\n\t\tdaoId:        p.daoId,\n\t\tid:           p.id,\n\t\ttitle:        p.title,\n\t\tsummary:      p.summary,\n\t\tspendAmount:  p.spendAmount,\n\t\tspender:      p.spender,\n\t\tvpUpdates:    p.vpUpdates,\n\t\tnewMetadata:  p.newMetadata,\n\t\tnewURI:       p.newURI,\n\t\tsubmitTime:   p.submitTime,\n\t\tvoteEndTime:  p.voteEndTime,\n\t\tstatus:       p.status,\n\t\tvotingPowers: p.votingPowers,\n\t}\n}\n\nfunc RenderDAO(daoId uint64) string {\n\tdaoEncode := GetDAOEncodeObject(GetDAO(daoId))\n\tbz, err := json.Marshal(daoEncode)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn string(bz)\n}\n\nfunc RenderDAOs(startAfter, limit uint64) string {\n\tdaos := GetDAOs(startAfter, limit)\n\tdaoEncodes := []DAOEncode{}\n\tfor _, dao := range daos {\n\t\tdaoEncode := GetDAOEncodeObject(dao)\n\t\tdaoEncodes = append(daoEncodes, daoEncode)\n\t}\n\tbz, err := json.Marshal(daoEncodes)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn string(bz)\n}\n\nfunc RenderProposal(daoId, proposalId uint64) string {\n\tproposalEncode := GetProposalEncodeObject(GetProposal(daoId, proposalId))\n\tbz, err := json.Marshal(proposalEncode)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn string(bz)\n}\n\nfunc RenderProposals(daoId, startAfter, limit uint64) string {\n\tproposals := GetProposals(daoId, startAfter, limit)\n\tproposalEncodes := []ProposalEncode{}\n\tfor _, dao := range proposals {\n\t\tproposalEncode := GetDAOEncodeObject(dao)\n\t\tproposalEncodes = append(proposalEncodes, proposalEncode)\n\t}\n\tbz, err := json.Marshal(proposalEncodes)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn string(bz)\n}\n\nfunc Render(path string) string {\n\treturn \"\"\n}\n"},{"Name":"gnodao_test.gno","Body":"package gnodao\n\nimport (\n\t\"fmt\"\n\t\"std\"\n\t\"testing\"\n\t\"time\"\n)\n\nvar caller std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnabcde\"\nvar caller1 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\"\nvar caller2 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\"\nvar daoMembers = []std.Address{\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnccccc\",\n}\nvar votingPowers = []VotingPower{\n\t{\n\t\taddress: daoMembers[0].String(),\n\t\tpower:   1,\n\t},\n\t{\n\t\taddress: daoMembers[1].String(),\n\t\tpower:   2,\n\t},\n\t{\n\t\taddress: daoMembers[2].String(),\n\t\tpower:   3,\n\t},\n}\n\nfunc assertPanic(t *testing.T, f func()) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t}\n\t}()\n\tf()\n}\n\nfunc TestIsDAOMember(t *testing.T) {\n\tdaos = []DAO{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\n\t// TODO: what package is ideal to use for checks?\n\tif IsDAOMember(0, caller) != false {\n\t\tt.Errorf(\"Should not be false\")\n\t}\n\tif IsDAOMember(0, caller1) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n\tif IsDAOMember(0, caller2) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n}\n\nfunc TestCreateDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\tif len(daos) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tif len(proposals) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tdao := daos[0]\n\tif dao.id != 0 {\n\t\tt.Errorf(\"first DAO id should be 0\")\n\t}\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"dao uri not set properly\")\n\t}\n\tif dao.metadata != \"https://metadata.gnodao1.org\" {\n\t\tt.Errorf(\"dao metadata not set properly\")\n\t}\n\tif dao.funds != 0 {\n\t\tt.Errorf(\"dao funds not set properly\")\n\t}\n\tif len(dao.depositHistory) != 0 {\n\t\tt.Errorf(\"dao deposit history not set properly\")\n\t}\n\tif len(dao.spendHistory) != 0 {\n\t\tt.Errorf(\"dao spend history not set properly\")\n\t}\n\tif len(dao.permissions) != 0 {\n\t\tt.Errorf(\"dao permissions not set properly\")\n\t}\n\tif dao.permMap == nil {\n\t\tt.Errorf(\"dao permission map not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 0 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller1.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller2.String()) != 2 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif dao.totalVotingPower != 6 {\n\t\tt.Errorf(\"totalVotingPower not set properly\")\n\t}\n\tif dao.votingPeriod != 86400*2 {\n\t\tt.Errorf(\"votingPeriod not set properly\")\n\t}\n\tif dao.voteQuorum != 30 {\n\t\tt.Errorf(\"voteQuorum not set properly\")\n\t}\n\tif dao.threshold != 10 {\n\t\tt.Errorf(\"threshold not set properly\")\n\t}\n\tif dao.vetoThreshold != 10 {\n\t\tt.Errorf(\"vetoThreshold not set properly\")\n\t}\n}\n\nfunc TestCreateProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\t})\n\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tproposal := proposals[0][0]\n\tif proposal.daoId != 0 {\n\t\tt.Errorf(\"proposal daoId should be 0\")\n\t}\n\tif proposal.id != 0 {\n\t\tt.Errorf(\"proposal id should be 0\")\n\t}\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"proposal title not set properly\")\n\t}\n\tif proposal.summary != \"Proposal to bootstrap DAO fund.\" {\n\t\tt.Errorf(\"proposal summary not set properly\")\n\t}\n\tif proposal.spendAmount != 0 {\n\t\tt.Errorf(\"proposal spendAmount not set properly\")\n\t}\n\tif proposal.spender != caller {\n\t\tt.Errorf(\"proposal spender not set properly\")\n\t}\n\tif len(proposal.vpUpdates) != 0 {\n\t\tt.Errorf(\"proposal vpUpdates not set properly\")\n\t}\n\tif proposal.newMetadata != \"\" {\n\t\tt.Errorf(\"proposal newMetadata not set properly\")\n\t}\n\tif proposal.newURI != \"\" {\n\t\tt.Errorf(\"proposal newURI not set properly\")\n\t}\n\tif proposal.submitTime != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"proposal submitTime not set properly\")\n\t}\n\tif proposal.voteEndTime != uint64(time.Now().Unix())+daos[0].votingPeriod {\n\t\tt.Errorf(\"proposal voteEndTime not set properly\")\n\t}\n\tif proposal.status != VOTING_PERIOD {\n\t\tt.Errorf(\"proposal status not set properly\")\n\t}\n\tif proposal.votes == nil {\n\t\tt.Errorf(\"proposal votes not set properly\")\n\t}\n\tif len(proposal.votingPowers) != 4 {\n\t\tt.Errorf(\"proposal votingPowers not set properly\")\n\t}\n}\n\nfunc TestVoteProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(1, 0, YES)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(0, 1, YES)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tVoteProposal(0, 0, YES)\n\t})\n\n\t// vote and check result is set properly\n\tstd.TestSetOrigCaller(caller1)\n\tVoteProposal(0, 0, YES)\n\tvote, found := getVote(0, 0, caller1)\n\tif !found {\n\t\tt.Errorf(\"proposal vote not set\")\n\t}\n\tif vote.address != caller1 {\n\t\tt.Errorf(\"vote address not set properly\")\n\t}\n\tif vote.timestamp != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"vote timestamp not set properly\")\n\t}\n\tif vote.option != YES {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 1 {\n\t\tt.Errorf(\"votePowers by vote option not set properly\")\n\t}\n\n\t// vote again with different option and check result\n\tVoteProposal(0, 0, NO)\n\tvote, found = getVote(0, 0, caller1)\n\tif vote.option != NO {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 0 {\n\t\tt.Errorf(\"votePowers for YES not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(NO)] != 1 {\n\t\tt.Errorf(\"votePowers for NO not set properly\")\n\t}\n\n\t// test vote end time already reached\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\t\tVoteProposal(0, 0, YES)\n\t})\n}\n\nfunc TestTallyAndExecute(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{\n\t\t{\n\t\t\taddress: caller.String(),\n\t\t\tpower:   1,\n\t\t},\n\t}, \"newMetadata.com\", \"newURI.com\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(1, 0)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 1)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tTallyAndExecute(0, 0)\n\t})\n\tassertPanic(t, func() { // vote end time not pass\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 0)\n\t})\n\n\t// vote end time to be reached\n\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\n\t// quorum not reached\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for vote quorum\")\n\t}\n\n\t// everyone abstains\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for all abstains\")\n\t}\n\n\t// more than 1/3 vote with NO_WITH_VETO\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower / 2\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = daos[0].totalVotingPower / 2\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for NO_WITH_VETO\")\n\t}\n\n\t// all YES vote\n\tproposals[0][0].votingPowers[ABSTAIN] = 0\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = 0\n\tproposals[0][0].votingPowers[YES] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != PASSED {\n\t\tt.Errorf(\"proposal should be PASSED\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif daos[0].metadata != \"newMetadata.com\" {\n\t\tt.Errorf(\"metadata not set properly\")\n\t}\n\tif daos[0].uri != \"newURI.com\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestDepositDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when not a dao member\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tDepositDAO(0, 100)\n\t})\n\n\t// not panics\n\tstd.TestSetOrigCaller(caller1)\n\tDepositDAO(0, 100)\n}\n\nfunc TestGetDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tGetDAO(100)\n\t})\n\n\t// success when valid dao id\n\tdao := GetDAO(0)\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestGetDAOs(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tgotDaos := GetDAOs(0, 10)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tCreateDAO(\"https://gnodao2.org\", \"https://metadata.gnodao2.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tgotDaos = GetDAOs(0, 0)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 10)\n\tif len(gotDaos) != 2 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 1)\n\tif len(gotDaos) != 1 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n}\n\nfunc TestGetProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tGetProposal(1, 0)\n\t})\n\n\t// panic when invalid proposal id\n\tassertPanic(t, func() {\n\t\tGetProposal(0, 1)\n\t})\n\n\t// success when valid dao id and proposal id\n\tproposal := GetProposal(0, 0)\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"title not set properly\")\n\t}\n}\n\nfunc TestGetProposals(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tassertPanic(t, func() { // invalid dao id\n\t\tGetProposals(0, 0, 10)\n\t})\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"proposal #1\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\tCreateProposal(0, \"proposal #2\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\tgotProposals := GetProposals(0, 0, 0)\n\tif len(gotProposals) != 0 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 10)\n\tif len(gotProposals) != 2 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 1)\n\tif len(gotProposals) != 1 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n}\n\nfunc TestRender(t *testing.T) {\n\tif Render(\"\") != \"\" {\n\t\tt.Errorf(\"Render function should empty\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"6kEoraD0qNv0BNcoELqcnXejtU5HKU7pTS6pS2t9JuBle2LfZJDWHizms1aPwpYRlU5t+eDLWZe9iC7r57k5Hw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"gnodao","Path":"gno.land/r/demo/gnodao_v03","Files":[{"Name":"gnodao.gno","Body":"package gnodao\n\nimport (\n\t\"encoding/json\"\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype VoteOption uint32\n\nconst (\n\tYES          VoteOption = 0 // Indicates approval of the proposal in its current form.\n\tNO           VoteOption = 1 // Indicates disapproval of the proposal in its current form.\n\tNO_WITH_VETO VoteOption = 2 // Indicates stronger opposition to the proposal than simply voting No. Not available for SuperMajority-typed proposals as a simple No of 1/3 out of total votes would result in the same outcome.\n\tABSTAIN      VoteOption = 3 // Indicates that the voter is impartial to the outcome of the proposal. Although Abstain votes are counted towards the quorum, they're excluded when calculating the ratio of other voting options above.\n)\n\n// GNODAO VOTE\ntype Vote struct {\n\taddress   std.Address // address of the voter\n\ttimestamp uint64      // block timestamp of the vote\n\toption    VoteOption  // vote option\n}\n\ntype DAO struct {\n\tid               uint64\n\turi              string       // DAO homepage link\n\tmetadata         string       // DAO metadata reference link\n\tfunds            uint64       // DAO managing funds\n\tdepositHistory   []string     // deposit history - reserved for later use\n\tspendHistory     []string     // spend history - reserved for later use\n\tpermissions      []string     // permissions managed on DAO - reserved for later use\n\tpermMap          *avl.MutTree // permission map - reserved for later use\n\tvotingPowers     *avl.MutTree\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalStatus uint32\n\nconst (\n\tNIL           ProposalStatus = 0\n\tVOTING_PERIOD ProposalStatus = 1\n\tPASSED        ProposalStatus = 2\n\tREJECTED      ProposalStatus = 3\n\tFAILED        ProposalStatus = 4\n)\n\nfunc (s ProposalStatus) String() string {\n\tswitch s {\n\tcase NIL:\n\t\treturn \"Nil\"\n\tcase VOTING_PERIOD:\n\t\treturn \"VotingPeriod\"\n\tcase PASSED:\n\t\treturn \"Passed\"\n\tcase REJECTED:\n\t\treturn \"Rejected\"\n\tcase FAILED:\n\t\treturn \"Failed\"\n\t}\n\treturn \"\"\n}\n\ntype VotingPower struct {\n\taddress string\n\tpower   uint64\n}\n\ntype Proposal struct {\n\tdaoId        uint64         // dao id of the proposal\n\tid           uint64         // unique id assigned for each proposal\n\ttitle        string         // proposal title\n\tsummary      string         // proposal summary\n\tspendAmount  uint64         // amount of tokens to spend as part the proposal\n\tspender      std.Address    // address to receive spending tokens\n\tvpUpdates    []VotingPower  // updates on voting power - optional\n\tnewMetadata  string         // new metadata for the DAO - optional\n\tnewURI       string         // new URI for the DAO - optional\n\tsubmitTime   uint64         // proposal submission time\n\tvoteEndTime  uint64         // vote end time for the proposal\n\tstatus       ProposalStatus // StatusNil | StatusVotingPeriod | StatusPassed | StatusRejected | StatusFailed\n\tvotes        *avl.MutTree   // votes on the proposal\n\tvotingPowers []uint64       // voting power sum per voting option\n}\n\n// GNODAO STATE\nvar daos []DAO\nvar proposals [][]Proposal\n\nfunc getDAOVotingPower(daoId uint64, address string) uint64 {\n\tif len(daos) \u003c= int(daoId) {\n\t\treturn 0\n\t}\n\tres, ok := daos[daoId].votingPowers.Get(address)\n\tif ok {\n\t\treturn res.(uint64)\n\t}\n\treturn 0\n}\n\nfunc IsDAOMember(daoId uint64, address std.Address) bool {\n\treturn getDAOVotingPower(daoId, address.String()) \u003e 0\n}\n\nfunc getVote(daoId, proposalId uint64, address std.Address) (Vote, bool) {\n\tif int(daoId) \u003e= len(daos) {\n\t\treturn Vote{}, false\n\t}\n\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\treturn Vote{}, false\n\t}\n\n\tvote, ok := proposals[daoId][proposalId].votes.Get(address.String())\n\tif ok {\n\t\treturn vote.(Vote), true\n\t}\n\treturn Vote{}, false\n}\n\nfunc parseVotingPowers(daoMembers, votingPowers string) []VotingPower {\n\tparsedVPs := []VotingPower{}\n\tif len(daoMembers) == 0 {\n\t\treturn parsedVPs\n\t}\n\tmemberAddrs := strings.Split(daoMembers, \",\")\n\tmemberPowers := strings.Split(votingPowers, \",\")\n\tif len(memberAddrs) != len(memberPowers) {\n\t\tpanic(\"mismatch between members and voting powers count\")\n\t}\n\tfor i, memberAddr := range memberAddrs {\n\t\tpower, err := strconv.Atoi(memberPowers[i])\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tparsedVPs = append(parsedVPs, VotingPower{\n\t\t\taddress: memberAddr,\n\t\t\tpower:   uint64(power),\n\t\t})\n\t}\n\treturn parsedVPs\n}\n\n// GNODAO FUNCTIONS\nfunc CreateDAO(\n\turi string,\n\tmetadata string,\n\tdaoMembers string,\n\tvotingPowers string,\n\tvotingPeriod uint64,\n\tvoteQuorum uint64,\n\tthreshold uint64,\n\tvetoThreshold uint64,\n) {\n\tdaoId := uint64(len(daos))\n\tdaos = append(daos, DAO{\n\t\tid:               daoId,\n\t\turi:              uri,\n\t\tmetadata:         metadata,\n\t\tfunds:            0,\n\t\tdepositHistory:   []string{},\n\t\tspendHistory:     []string{},\n\t\tpermissions:      []string{},\n\t\tpermMap:          avl.NewMutTree(),\n\t\tvotingPowers:     avl.NewMutTree(),\n\t\ttotalVotingPower: 0,\n\t\tvotingPeriod:     votingPeriod,\n\t\tvoteQuorum:       voteQuorum,\n\t\tthreshold:        threshold,\n\t\tvetoThreshold:    vetoThreshold,\n\t})\n\n\tparsedVPs := parseVotingPowers(daoMembers, votingPowers)\n\ttotalVotingPower := uint64(0)\n\tfor _, vp := range parsedVPs {\n\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\ttotalVotingPower += vp.power\n\t}\n\tdaos[daoId].totalVotingPower = totalVotingPower\n\tproposals = append(proposals, []Proposal{})\n\t// TODO: emit events\n}\n\nfunc CreateProposal(\n\tdaoId uint64,\n\ttitle, summary string,\n\tspendAmount uint64, spender std.Address,\n\tdaoMembers string,\n\tvpUpdates string,\n\tnewMetadata string,\n\tnewURI string,\n) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a dao member\")\n\t}\n\n\tparsedVPUpdates := parseVotingPowers(daoMembers, vpUpdates)\n\tproposals[daoId] = append(proposals[daoId], Proposal{\n\t\tdaoId:        daoId,\n\t\tid:           uint64(len(proposals[daoId])),\n\t\ttitle:        title,\n\t\tsummary:      summary,\n\t\tspendAmount:  spendAmount,\n\t\tspender:      spender,\n\t\tvpUpdates:    parsedVPUpdates,\n\t\tnewMetadata:  newMetadata,\n\t\tnewURI:       newURI,\n\t\tsubmitTime:   uint64(time.Now().Unix()),\n\t\tvoteEndTime:  uint64(time.Now().Unix()) + daos[daoId].votingPeriod,\n\t\tstatus:       VOTING_PERIOD,\n\t\tvotes:        avl.NewMutTree(),\n\t\tvotingPowers: []uint64{0, 0, 0, 0}, // initiate as zero for 4 vote types\n\t})\n}\n\nfunc VoteProposal(daoId, proposalId uint64, option VoteOption) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// if invalid proposal, panic\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\n\t// if vote end time is reached panic\n\tif time.Now().Unix() \u003e int64(proposals[daoId][proposalId].voteEndTime) {\n\t\tpanic(\"vote end time reached\")\n\t}\n\n\t// Original vote cancel\n\tcallerVotingPower := getDAOVotingPower(daoId, caller.String())\n\tvote, ok := getVote(daoId, proposalId, caller)\n\tif ok {\n\t\tif proposals[daoId][proposalId].votingPowers[int(vote.option)] \u003e callerVotingPower {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] -= callerVotingPower\n\t\t} else {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] = 0\n\t\t}\n\t}\n\n\t// Create a vote\n\tproposals[daoId][proposalId].votes.Set(caller.String(), Vote{\n\t\taddress:   caller,\n\t\ttimestamp: uint64(time.Now().Unix()),\n\t\toption:    option,\n\t})\n\n\t// Voting power by option update for new vote\n\tproposals[daoId][proposalId].votingPowers[int(option)] += callerVotingPower\n}\n\n// TODO: handle voting power change during voting period for other proposal\n// TODO: experiment with gas limit\nfunc TallyAndExecute(daoId, proposalId uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// validation for proposalId\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\tdao := daos[daoId]\n\tproposal := proposals[daoId][proposalId]\n\tvotingPowers := proposal.votingPowers\n\n\tif time.Now().Unix() \u003c int64(proposal.voteEndTime) {\n\t\tpanic(\"proposal is in voting period\")\n\t}\n\n\t// reference logic for tally - https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/keeper/tally.go\n\ttotalVotes := votingPowers[YES] + votingPowers[NO] + votingPowers[NO_WITH_VETO] + votingPowers[ABSTAIN]\n\tif totalVotes \u003c dao.totalVotingPower*dao.voteQuorum/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If no one votes (everyone abstains), proposal rejected\n\tif totalVotes == votingPowers[ABSTAIN] {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/3 of voters veto, proposal rejected\n\tvetoThreshold := dao.vetoThreshold\n\tif votingPowers[NO_WITH_VETO] \u003e totalVotes*vetoThreshold/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote Yes, proposal passes\n\tthreshold := dao.threshold\n\tif votingPowers[YES] \u003e (totalVotes-votingPowers[ABSTAIN])*threshold/100 {\n\t\tproposals[daoId][proposalId].status = PASSED\n\n\t\t// TODO: spend coins when spendAmount is positive \u0026 spender is a valid address\n\t\tif proposal.spendAmount \u003e 0 {\n\t\t\tif daos[daoId].funds \u003e= proposal.spendAmount {\n\t\t\t\tdaos[daoId].funds -= proposal.spendAmount\n\t\t\t} else {\n\t\t\t\tproposals[daoId][proposalId].status = FAILED\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tif proposal.newMetadata != \"\" {\n\t\t\tdaos[daoId].metadata = proposal.newMetadata\n\t\t}\n\n\t\tif proposal.newURI != \"\" {\n\t\t\tdaos[daoId].uri = proposal.newURI\n\t\t}\n\n\t\tfor _, vp := range proposal.vpUpdates {\n\t\t\tdaos[daoId].totalVotingPower -= getDAOVotingPower(daoId, vp.address)\n\t\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\t\tdaos[daoId].totalVotingPower += vp.power\n\t\t}\n\n\t\t// TODO: contract does not own account that can hold coins - this is one of limitations\n\t\t// TODO: Adena Wallet from OnBloc - investigate on how they manage coins (swap - custody?)\n\t\t// Manual sending for funds (Address \u003c-\u003e Address) - Miloš Živković\n\t\t// https://github.com/gnolang/gno/blob/e392ab51bc05a5efbceaa8dbe395bac2e01ad808/tm2/pkg/crypto/keys/client/send.go#L109-L119\n\t\treturn\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote No, proposal rejected\n\tproposals[daoId][proposalId].status = REJECTED\n}\n\nfunc DepositDAO(daoId uint64, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// TODO: send coins from caller to DAO\n\t// TODO: verify received amount\n\t// daos[daoId].depositHistory = append(daos[daoId].depositHistory, Deposit{\n\t// \taddress: caller,\n\t// \tamount:  amount,\n\t// })\n}\n\nfunc GetDAO(daoId uint64) DAO {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\treturn daos[daoId]\n}\n\nfunc GetDAOs(startAfter, limit uint64) []DAO {\n\tmax := uint64(len(daos))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn daos[startAfter:max]\n}\n\nfunc GetProposal(daoId, proposalId uint64) Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\treturn proposals[daoId][proposalId]\n}\n\nfunc GetProposals(daoId, startAfter, limit uint64) []Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tmax := uint64(len(proposals[daoId]))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn proposals[daoId][startAfter:max]\n}\n\nfunc RenderVote(daoId, proposalId uint64, address std.Address) string {\n\tvote, found := getVote(daoId, proposalId, address)\n\tif !found {\n\t\treturn \"\"\n\t}\n\n\tbz, err := json.Marshal(vote)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn string(bz)\n}\n\ntype DAOEncode struct {\n\tid               uint64\n\turi              string // DAO homepage link\n\tmetadata         string // DAO metadata reference link\n\tfunds            uint64 // DAO managing funds\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalEncode struct {\n\tdaoId        uint64\n\tid           uint64\n\ttitle        string\n\tsummary      string\n\tspendAmount  uint64\n\tspender      std.Address\n\tvpUpdates    []VotingPower\n\tnewMetadata  string\n\tnewURI       string\n\tsubmitTime   uint64\n\tvoteEndTime  uint64\n\tstatus       ProposalStatus\n\tvotingPowers []uint64\n}\n\nfunc GetDAOEncodeObject(dao DAO) DAOEncode {\n\treturn DAOEncode{\n\t\tid:               dao.id,\n\t\turi:              dao.uri,\n\t\tmetadata:         dao.metadata,\n\t\tfunds:            dao.funds,\n\t\ttotalVotingPower: dao.totalVotingPower,\n\t\tvotingPeriod:     dao.votingPeriod,\n\t\tvoteQuorum:       dao.voteQuorum,\n\t\tthreshold:        dao.threshold,\n\t\tvetoThreshold:    dao.vetoThreshold,\n\t}\n}\n\nfunc GetProposalEncodeObject(p Proposal) DAOEncode {\n\treturn DAOEncode{\n\t\tdaoId:        p.daoId,\n\t\tid:           p.id,\n\t\ttitle:        p.title,\n\t\tsummary:      p.summary,\n\t\tspendAmount:  p.spendAmount,\n\t\tspender:      p.spender,\n\t\tvpUpdates:    p.vpUpdates,\n\t\tnewMetadata:  p.newMetadata,\n\t\tnewURI:       p.newURI,\n\t\tsubmitTime:   p.submitTime,\n\t\tvoteEndTime:  p.voteEndTime,\n\t\tstatus:       p.status,\n\t\tvotingPowers: p.votingPowers,\n\t}\n}\n\nfunc RenderDAO(daoId uint64) string {\n\tdaoEncode := GetDAOEncodeObject(GetDAO(daoId))\n\tbz, err := json.Marshal(daoEncode)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn string(bz)\n}\n\nfunc RenderDAOs(startAfter, limit uint64) string {\n\tdaos := GetDAOs(startAfter, limit)\n\tdaoEncodes := []DAOEncode{}\n\tfor _, dao := range daos {\n\t\tdaoEncode := GetDAOEncodeObject(dao)\n\t\tdaoEncodes = append(daoEncodes, daoEncode)\n\t}\n\tbz, err := json.Marshal(daoEncodes)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn string(bz)\n}\n\nfunc RenderProposal(daoId, proposalId uint64) string {\n\tproposalEncode := GetProposalEncodeObject(GetProposal(daoId, proposalId))\n\tbz, err := json.Marshal(proposalEncode)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn string(bz)\n}\n\nfunc RenderProposals(daoId, startAfter, limit uint64) string {\n\tproposals := GetProposals(daoId, startAfter, limit)\n\tproposalEncodes := []ProposalEncode{}\n\tfor _, dao := range proposals {\n\t\tproposalEncode := GetDAOEncodeObject(dao)\n\t\tproposalEncodes = append(proposalEncodes, proposalEncode)\n\t}\n\tbz, err := json.Marshal(proposalEncodes)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn string(bz)\n}\n\nfunc Render(path string) string {\n\treturn \"\"\n}\n"},{"Name":"gnodao_test.gno","Body":"package gnodao\n\nimport (\n\t\"fmt\"\n\t\"std\"\n\t\"testing\"\n\t\"time\"\n)\n\nvar caller std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnabcde\"\nvar caller1 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\"\nvar caller2 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\"\nvar daoMembers = []std.Address{\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnccccc\",\n}\nvar votingPowers = []VotingPower{\n\t{\n\t\taddress: daoMembers[0].String(),\n\t\tpower:   1,\n\t},\n\t{\n\t\taddress: daoMembers[1].String(),\n\t\tpower:   2,\n\t},\n\t{\n\t\taddress: daoMembers[2].String(),\n\t\tpower:   3,\n\t},\n}\n\nfunc assertPanic(t *testing.T, f func()) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t}\n\t}()\n\tf()\n}\n\nfunc TestIsDAOMember(t *testing.T) {\n\tdaos = []DAO{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\n\t// TODO: what package is ideal to use for checks?\n\tif IsDAOMember(0, caller) != false {\n\t\tt.Errorf(\"Should not be false\")\n\t}\n\tif IsDAOMember(0, caller1) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n\tif IsDAOMember(0, caller2) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n}\n\nfunc TestCreateDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\tif len(daos) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tif len(proposals) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tdao := daos[0]\n\tif dao.id != 0 {\n\t\tt.Errorf(\"first DAO id should be 0\")\n\t}\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"dao uri not set properly\")\n\t}\n\tif dao.metadata != \"https://metadata.gnodao1.org\" {\n\t\tt.Errorf(\"dao metadata not set properly\")\n\t}\n\tif dao.funds != 0 {\n\t\tt.Errorf(\"dao funds not set properly\")\n\t}\n\tif len(dao.depositHistory) != 0 {\n\t\tt.Errorf(\"dao deposit history not set properly\")\n\t}\n\tif len(dao.spendHistory) != 0 {\n\t\tt.Errorf(\"dao spend history not set properly\")\n\t}\n\tif len(dao.permissions) != 0 {\n\t\tt.Errorf(\"dao permissions not set properly\")\n\t}\n\tif dao.permMap == nil {\n\t\tt.Errorf(\"dao permission map not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 0 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller1.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller2.String()) != 2 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif dao.totalVotingPower != 6 {\n\t\tt.Errorf(\"totalVotingPower not set properly\")\n\t}\n\tif dao.votingPeriod != 86400*2 {\n\t\tt.Errorf(\"votingPeriod not set properly\")\n\t}\n\tif dao.voteQuorum != 30 {\n\t\tt.Errorf(\"voteQuorum not set properly\")\n\t}\n\tif dao.threshold != 10 {\n\t\tt.Errorf(\"threshold not set properly\")\n\t}\n\tif dao.vetoThreshold != 10 {\n\t\tt.Errorf(\"vetoThreshold not set properly\")\n\t}\n}\n\nfunc TestCreateProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\t})\n\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tproposal := proposals[0][0]\n\tif proposal.daoId != 0 {\n\t\tt.Errorf(\"proposal daoId should be 0\")\n\t}\n\tif proposal.id != 0 {\n\t\tt.Errorf(\"proposal id should be 0\")\n\t}\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"proposal title not set properly\")\n\t}\n\tif proposal.summary != \"Proposal to bootstrap DAO fund.\" {\n\t\tt.Errorf(\"proposal summary not set properly\")\n\t}\n\tif proposal.spendAmount != 0 {\n\t\tt.Errorf(\"proposal spendAmount not set properly\")\n\t}\n\tif proposal.spender != caller {\n\t\tt.Errorf(\"proposal spender not set properly\")\n\t}\n\tif len(proposal.vpUpdates) != 0 {\n\t\tt.Errorf(\"proposal vpUpdates not set properly\")\n\t}\n\tif proposal.newMetadata != \"\" {\n\t\tt.Errorf(\"proposal newMetadata not set properly\")\n\t}\n\tif proposal.newURI != \"\" {\n\t\tt.Errorf(\"proposal newURI not set properly\")\n\t}\n\tif proposal.submitTime != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"proposal submitTime not set properly\")\n\t}\n\tif proposal.voteEndTime != uint64(time.Now().Unix())+daos[0].votingPeriod {\n\t\tt.Errorf(\"proposal voteEndTime not set properly\")\n\t}\n\tif proposal.status != VOTING_PERIOD {\n\t\tt.Errorf(\"proposal status not set properly\")\n\t}\n\tif proposal.votes == nil {\n\t\tt.Errorf(\"proposal votes not set properly\")\n\t}\n\tif len(proposal.votingPowers) != 4 {\n\t\tt.Errorf(\"proposal votingPowers not set properly\")\n\t}\n}\n\nfunc TestVoteProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(1, 0, YES)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(0, 1, YES)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tVoteProposal(0, 0, YES)\n\t})\n\n\t// vote and check result is set properly\n\tstd.TestSetOrigCaller(caller1)\n\tVoteProposal(0, 0, YES)\n\tvote, found := getVote(0, 0, caller1)\n\tif !found {\n\t\tt.Errorf(\"proposal vote not set\")\n\t}\n\tif vote.address != caller1 {\n\t\tt.Errorf(\"vote address not set properly\")\n\t}\n\tif vote.timestamp != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"vote timestamp not set properly\")\n\t}\n\tif vote.option != YES {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 1 {\n\t\tt.Errorf(\"votePowers by vote option not set properly\")\n\t}\n\n\t// vote again with different option and check result\n\tVoteProposal(0, 0, NO)\n\tvote, found = getVote(0, 0, caller1)\n\tif vote.option != NO {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 0 {\n\t\tt.Errorf(\"votePowers for YES not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(NO)] != 1 {\n\t\tt.Errorf(\"votePowers for NO not set properly\")\n\t}\n\n\t// test vote end time already reached\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\t\tVoteProposal(0, 0, YES)\n\t})\n}\n\nfunc TestTallyAndExecute(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{\n\t\t{\n\t\t\taddress: caller.String(),\n\t\t\tpower:   1,\n\t\t},\n\t}, \"newMetadata.com\", \"newURI.com\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(1, 0)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 1)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tTallyAndExecute(0, 0)\n\t})\n\tassertPanic(t, func() { // vote end time not pass\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 0)\n\t})\n\n\t// vote end time to be reached\n\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\n\t// quorum not reached\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for vote quorum\")\n\t}\n\n\t// everyone abstains\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for all abstains\")\n\t}\n\n\t// more than 1/3 vote with NO_WITH_VETO\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower / 2\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = daos[0].totalVotingPower / 2\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for NO_WITH_VETO\")\n\t}\n\n\t// all YES vote\n\tproposals[0][0].votingPowers[ABSTAIN] = 0\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = 0\n\tproposals[0][0].votingPowers[YES] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != PASSED {\n\t\tt.Errorf(\"proposal should be PASSED\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif daos[0].metadata != \"newMetadata.com\" {\n\t\tt.Errorf(\"metadata not set properly\")\n\t}\n\tif daos[0].uri != \"newURI.com\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestDepositDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when not a dao member\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tDepositDAO(0, 100)\n\t})\n\n\t// not panics\n\tstd.TestSetOrigCaller(caller1)\n\tDepositDAO(0, 100)\n}\n\nfunc TestGetDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tGetDAO(100)\n\t})\n\n\t// success when valid dao id\n\tdao := GetDAO(0)\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestGetDAOs(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tgotDaos := GetDAOs(0, 10)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tCreateDAO(\"https://gnodao2.org\", \"https://metadata.gnodao2.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tgotDaos = GetDAOs(0, 0)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 10)\n\tif len(gotDaos) != 2 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 1)\n\tif len(gotDaos) != 1 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n}\n\nfunc TestGetProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tGetProposal(1, 0)\n\t})\n\n\t// panic when invalid proposal id\n\tassertPanic(t, func() {\n\t\tGetProposal(0, 1)\n\t})\n\n\t// success when valid dao id and proposal id\n\tproposal := GetProposal(0, 0)\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"title not set properly\")\n\t}\n}\n\nfunc TestGetProposals(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tassertPanic(t, func() { // invalid dao id\n\t\tGetProposals(0, 0, 10)\n\t})\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"proposal #1\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\tCreateProposal(0, \"proposal #2\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\tgotProposals := GetProposals(0, 0, 0)\n\tif len(gotProposals) != 0 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 10)\n\tif len(gotProposals) != 2 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 1)\n\tif len(gotProposals) != 1 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n}\n\nfunc TestRender(t *testing.T) {\n\tif Render(\"\") != \"\" {\n\t\tt.Errorf(\"Render function should empty\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"VWPq0RL2X3pl+OKp+JA9B6U79+BQKPm6n7eY/gF8Y/VL+R9BjecnZXNT5yhrFE4/Kj8g+uLmXcAUlhj/qAARUQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"gnodao","Path":"gno.land/r/demo/gnodao_v03","Files":[{"Name":"gnodao.gno","Body":"package gnodao\n\nimport (\n\t\"encoding/json\"\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype VoteOption uint32\n\nconst (\n\tYES          VoteOption = 0 // Indicates approval of the proposal in its current form.\n\tNO           VoteOption = 1 // Indicates disapproval of the proposal in its current form.\n\tNO_WITH_VETO VoteOption = 2 // Indicates stronger opposition to the proposal than simply voting No. Not available for SuperMajority-typed proposals as a simple No of 1/3 out of total votes would result in the same outcome.\n\tABSTAIN      VoteOption = 3 // Indicates that the voter is impartial to the outcome of the proposal. Although Abstain votes are counted towards the quorum, they're excluded when calculating the ratio of other voting options above.\n)\n\n// GNODAO VOTE\ntype Vote struct {\n\taddress   std.Address // address of the voter\n\ttimestamp uint64      // block timestamp of the vote\n\toption    VoteOption  // vote option\n}\n\ntype DAO struct {\n\tid               uint64\n\turi              string       // DAO homepage link\n\tmetadata         string       // DAO metadata reference link\n\tfunds            uint64       // DAO managing funds\n\tdepositHistory   []string     // deposit history - reserved for later use\n\tspendHistory     []string     // spend history - reserved for later use\n\tpermissions      []string     // permissions managed on DAO - reserved for later use\n\tpermMap          *avl.MutTree // permission map - reserved for later use\n\tvotingPowers     *avl.MutTree\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalStatus uint32\n\nconst (\n\tNIL           ProposalStatus = 0\n\tVOTING_PERIOD ProposalStatus = 1\n\tPASSED        ProposalStatus = 2\n\tREJECTED      ProposalStatus = 3\n\tFAILED        ProposalStatus = 4\n)\n\nfunc (s ProposalStatus) String() string {\n\tswitch s {\n\tcase NIL:\n\t\treturn \"Nil\"\n\tcase VOTING_PERIOD:\n\t\treturn \"VotingPeriod\"\n\tcase PASSED:\n\t\treturn \"Passed\"\n\tcase REJECTED:\n\t\treturn \"Rejected\"\n\tcase FAILED:\n\t\treturn \"Failed\"\n\t}\n\treturn \"\"\n}\n\ntype VotingPower struct {\n\taddress string\n\tpower   uint64\n}\n\ntype Proposal struct {\n\tdaoId        uint64         // dao id of the proposal\n\tid           uint64         // unique id assigned for each proposal\n\ttitle        string         // proposal title\n\tsummary      string         // proposal summary\n\tspendAmount  uint64         // amount of tokens to spend as part the proposal\n\tspender      std.Address    // address to receive spending tokens\n\tvpUpdates    []VotingPower  // updates on voting power - optional\n\tnewMetadata  string         // new metadata for the DAO - optional\n\tnewURI       string         // new URI for the DAO - optional\n\tsubmitTime   uint64         // proposal submission time\n\tvoteEndTime  uint64         // vote end time for the proposal\n\tstatus       ProposalStatus // StatusNil | StatusVotingPeriod | StatusPassed | StatusRejected | StatusFailed\n\tvotes        *avl.MutTree   // votes on the proposal\n\tvotingPowers []uint64       // voting power sum per voting option\n}\n\n// GNODAO STATE\nvar daos []DAO\nvar proposals [][]Proposal\n\nfunc getDAOVotingPower(daoId uint64, address string) uint64 {\n\tif len(daos) \u003c= int(daoId) {\n\t\treturn 0\n\t}\n\tres, ok := daos[daoId].votingPowers.Get(address)\n\tif ok {\n\t\treturn res.(uint64)\n\t}\n\treturn 0\n}\n\nfunc IsDAOMember(daoId uint64, address std.Address) bool {\n\treturn getDAOVotingPower(daoId, address.String()) \u003e 0\n}\n\nfunc getVote(daoId, proposalId uint64, address std.Address) (Vote, bool) {\n\tif int(daoId) \u003e= len(daos) {\n\t\treturn Vote{}, false\n\t}\n\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\treturn Vote{}, false\n\t}\n\n\tvote, ok := proposals[daoId][proposalId].votes.Get(address.String())\n\tif ok {\n\t\treturn vote.(Vote), true\n\t}\n\treturn Vote{}, false\n}\n\nfunc parseVotingPowers(daoMembers, votingPowers string) []VotingPower {\n\tparsedVPs := []VotingPower{}\n\tif len(daoMembers) == 0 {\n\t\treturn parsedVPs\n\t}\n\tmemberAddrs := strings.Split(daoMembers, \",\")\n\tmemberPowers := strings.Split(votingPowers, \",\")\n\tif len(memberAddrs) != len(memberPowers) {\n\t\tpanic(\"mismatch between members and voting powers count\")\n\t}\n\tfor i, memberAddr := range memberAddrs {\n\t\tpower, err := strconv.Atoi(memberPowers[i])\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tparsedVPs = append(parsedVPs, VotingPower{\n\t\t\taddress: memberAddr,\n\t\t\tpower:   uint64(power),\n\t\t})\n\t}\n\treturn parsedVPs\n}\n\n// GNODAO FUNCTIONS\nfunc CreateDAO(\n\turi string,\n\tmetadata string,\n\tdaoMembers string,\n\tvotingPowers string,\n\tvotingPeriod uint64,\n\tvoteQuorum uint64,\n\tthreshold uint64,\n\tvetoThreshold uint64,\n) {\n\tdaoId := uint64(len(daos))\n\tdaos = append(daos, DAO{\n\t\tid:               daoId,\n\t\turi:              uri,\n\t\tmetadata:         metadata,\n\t\tfunds:            0,\n\t\tdepositHistory:   []string{},\n\t\tspendHistory:     []string{},\n\t\tpermissions:      []string{},\n\t\tpermMap:          avl.NewMutTree(),\n\t\tvotingPowers:     avl.NewMutTree(),\n\t\ttotalVotingPower: 0,\n\t\tvotingPeriod:     votingPeriod,\n\t\tvoteQuorum:       voteQuorum,\n\t\tthreshold:        threshold,\n\t\tvetoThreshold:    vetoThreshold,\n\t})\n\n\tparsedVPs := parseVotingPowers(daoMembers, votingPowers)\n\ttotalVotingPower := uint64(0)\n\tfor _, vp := range parsedVPs {\n\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\ttotalVotingPower += vp.power\n\t}\n\tdaos[daoId].totalVotingPower = totalVotingPower\n\tproposals = append(proposals, []Proposal{})\n\t// TODO: emit events\n}\n\nfunc CreateProposal(\n\tdaoId uint64,\n\ttitle, summary string,\n\tspendAmount uint64, spender std.Address,\n\tdaoMembers string,\n\tvpUpdates string,\n\tnewMetadata string,\n\tnewURI string,\n) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a dao member\")\n\t}\n\n\tparsedVPUpdates := parseVotingPowers(daoMembers, vpUpdates)\n\tproposals[daoId] = append(proposals[daoId], Proposal{\n\t\tdaoId:        daoId,\n\t\tid:           uint64(len(proposals[daoId])),\n\t\ttitle:        title,\n\t\tsummary:      summary,\n\t\tspendAmount:  spendAmount,\n\t\tspender:      spender,\n\t\tvpUpdates:    parsedVPUpdates,\n\t\tnewMetadata:  newMetadata,\n\t\tnewURI:       newURI,\n\t\tsubmitTime:   uint64(time.Now().Unix()),\n\t\tvoteEndTime:  uint64(time.Now().Unix()) + daos[daoId].votingPeriod,\n\t\tstatus:       VOTING_PERIOD,\n\t\tvotes:        avl.NewMutTree(),\n\t\tvotingPowers: []uint64{0, 0, 0, 0}, // initiate as zero for 4 vote types\n\t})\n}\n\nfunc VoteProposal(daoId, proposalId uint64, option VoteOption) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// if invalid proposal, panic\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\n\t// if vote end time is reached panic\n\tif time.Now().Unix() \u003e int64(proposals[daoId][proposalId].voteEndTime) {\n\t\tpanic(\"vote end time reached\")\n\t}\n\n\t// Original vote cancel\n\tcallerVotingPower := getDAOVotingPower(daoId, caller.String())\n\tvote, ok := getVote(daoId, proposalId, caller)\n\tif ok {\n\t\tif proposals[daoId][proposalId].votingPowers[int(vote.option)] \u003e callerVotingPower {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] -= callerVotingPower\n\t\t} else {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] = 0\n\t\t}\n\t}\n\n\t// Create a vote\n\tproposals[daoId][proposalId].votes.Set(caller.String(), Vote{\n\t\taddress:   caller,\n\t\ttimestamp: uint64(time.Now().Unix()),\n\t\toption:    option,\n\t})\n\n\t// Voting power by option update for new vote\n\tproposals[daoId][proposalId].votingPowers[int(option)] += callerVotingPower\n}\n\n// TODO: handle voting power change during voting period for other proposal\n// TODO: experiment with gas limit\nfunc TallyAndExecute(daoId, proposalId uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// validation for proposalId\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\tdao := daos[daoId]\n\tproposal := proposals[daoId][proposalId]\n\tvotingPowers := proposal.votingPowers\n\n\tif time.Now().Unix() \u003c int64(proposal.voteEndTime) {\n\t\tpanic(\"proposal is in voting period\")\n\t}\n\n\t// reference logic for tally - https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/keeper/tally.go\n\ttotalVotes := votingPowers[YES] + votingPowers[NO] + votingPowers[NO_WITH_VETO] + votingPowers[ABSTAIN]\n\tif totalVotes \u003c dao.totalVotingPower*dao.voteQuorum/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If no one votes (everyone abstains), proposal rejected\n\tif totalVotes == votingPowers[ABSTAIN] {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/3 of voters veto, proposal rejected\n\tvetoThreshold := dao.vetoThreshold\n\tif votingPowers[NO_WITH_VETO] \u003e totalVotes*vetoThreshold/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote Yes, proposal passes\n\tthreshold := dao.threshold\n\tif votingPowers[YES] \u003e (totalVotes-votingPowers[ABSTAIN])*threshold/100 {\n\t\tproposals[daoId][proposalId].status = PASSED\n\n\t\t// TODO: spend coins when spendAmount is positive \u0026 spender is a valid address\n\t\tif proposal.spendAmount \u003e 0 {\n\t\t\tif daos[daoId].funds \u003e= proposal.spendAmount {\n\t\t\t\tdaos[daoId].funds -= proposal.spendAmount\n\t\t\t} else {\n\t\t\t\tproposals[daoId][proposalId].status = FAILED\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tif proposal.newMetadata != \"\" {\n\t\t\tdaos[daoId].metadata = proposal.newMetadata\n\t\t}\n\n\t\tif proposal.newURI != \"\" {\n\t\t\tdaos[daoId].uri = proposal.newURI\n\t\t}\n\n\t\tfor _, vp := range proposal.vpUpdates {\n\t\t\tdaos[daoId].totalVotingPower -= getDAOVotingPower(daoId, vp.address)\n\t\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\t\tdaos[daoId].totalVotingPower += vp.power\n\t\t}\n\n\t\t// TODO: contract does not own account that can hold coins - this is one of limitations\n\t\t// TODO: Adena Wallet from OnBloc - investigate on how they manage coins (swap - custody?)\n\t\t// Manual sending for funds (Address \u003c-\u003e Address) - Miloš Živković\n\t\t// https://github.com/gnolang/gno/blob/e392ab51bc05a5efbceaa8dbe395bac2e01ad808/tm2/pkg/crypto/keys/client/send.go#L109-L119\n\t\treturn\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote No, proposal rejected\n\tproposals[daoId][proposalId].status = REJECTED\n}\n\nfunc DepositDAO(daoId uint64, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// TODO: send coins from caller to DAO\n\t// TODO: verify received amount\n\t// daos[daoId].depositHistory = append(daos[daoId].depositHistory, Deposit{\n\t// \taddress: caller,\n\t// \tamount:  amount,\n\t// })\n}\n\nfunc GetDAO(daoId uint64) DAO {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\treturn daos[daoId]\n}\n\nfunc GetDAOs(startAfter, limit uint64) []DAO {\n\tmax := uint64(len(daos))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn daos[startAfter:max]\n}\n\nfunc GetProposal(daoId, proposalId uint64) Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\treturn proposals[daoId][proposalId]\n}\n\nfunc GetProposals(daoId, startAfter, limit uint64) []Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tmax := uint64(len(proposals[daoId]))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn proposals[daoId][startAfter:max]\n}\n\nfunc RenderVote(daoId, proposalId uint64, address std.Address) string {\n\tvote, found := getVote(daoId, proposalId, address)\n\tif !found {\n\t\treturn \"\"\n\t}\n\n\tbz, err := json.Marshal(vote)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn string(bz)\n}\n\ntype DAOEncode struct {\n\tid               uint64\n\turi              string // DAO homepage link\n\tmetadata         string // DAO metadata reference link\n\tfunds            uint64 // DAO managing funds\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalEncode struct {\n\tdaoId        uint64\n\tid           uint64\n\ttitle        string\n\tsummary      string\n\tspendAmount  uint64\n\tspender      std.Address\n\tvpUpdates    []VotingPower\n\tnewMetadata  string\n\tnewURI       string\n\tsubmitTime   uint64\n\tvoteEndTime  uint64\n\tstatus       ProposalStatus\n\tvotingPowers []uint64\n}\n\nfunc GetDAOEncodeObject(dao DAO) DAOEncode {\n\treturn DAOEncode{\n\t\tid:               dao.id,\n\t\turi:              dao.uri,\n\t\tmetadata:         dao.metadata,\n\t\tfunds:            dao.funds,\n\t\ttotalVotingPower: dao.totalVotingPower,\n\t\tvotingPeriod:     dao.votingPeriod,\n\t\tvoteQuorum:       dao.voteQuorum,\n\t\tthreshold:        dao.threshold,\n\t\tvetoThreshold:    dao.vetoThreshold,\n\t}\n}\n\nfunc GetProposalEncodeObject(p Proposal) DAOEncode {\n\treturn DAOEncode{\n\t\tdaoId:        p.daoId,\n\t\tid:           p.id,\n\t\ttitle:        p.title,\n\t\tsummary:      p.summary,\n\t\tspendAmount:  p.spendAmount,\n\t\tspender:      p.spender,\n\t\tvpUpdates:    p.vpUpdates,\n\t\tnewMetadata:  p.newMetadata,\n\t\tnewURI:       p.newURI,\n\t\tsubmitTime:   p.submitTime,\n\t\tvoteEndTime:  p.voteEndTime,\n\t\tstatus:       p.status,\n\t\tvotingPowers: p.votingPowers,\n\t}\n}\n\nfunc RenderDAO(daoId uint64) string {\n\tdaoEncode := GetDAOEncodeObject(GetDAO(daoId))\n\tbz, err := json.Marshal(daoEncode)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn string(bz)\n}\n\nfunc RenderDAOs(startAfter, limit uint64) string {\n\tdaos := GetDAOs(startAfter, limit)\n\tdaoEncodes := []DAOEncode{}\n\tfor _, dao := range daos {\n\t\tdaoEncode := GetDAOEncodeObject(dao)\n\t\tdaoEncodes = append(daoEncodes, daoEncode)\n\t}\n\tbz, err := json.Marshal(daoEncodes)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn string(bz)\n}\n\nfunc RenderProposal(daoId, proposalId uint64) string {\n\tproposalEncode := GetProposalEncodeObject(GetProposal(daoId, proposalId))\n\tbz, err := json.Marshal(proposalEncode)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn string(bz)\n}\n\nfunc RenderProposals(daoId, startAfter, limit uint64) string {\n\tproposals := GetProposals(daoId, startAfter, limit)\n\tproposalEncodes := []ProposalEncode{}\n\tfor _, dao := range proposals {\n\t\tproposalEncode := GetDAOEncodeObject(dao)\n\t\tproposalEncodes = append(proposalEncodes, proposalEncode)\n\t}\n\tbz, err := json.Marshal(proposalEncodes)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn string(bz)\n}\n\nfunc Render(path string) string {\n\treturn \"\"\n}\n"},{"Name":"gnodao_test.gno","Body":"package gnodao\n\nimport (\n\t\"fmt\"\n\t\"std\"\n\t\"testing\"\n\t\"time\"\n)\n\nvar caller std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnabcde\"\nvar caller1 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\"\nvar caller2 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\"\nvar daoMembers = []std.Address{\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnccccc\",\n}\nvar votingPowers = []VotingPower{\n\t{\n\t\taddress: daoMembers[0].String(),\n\t\tpower:   1,\n\t},\n\t{\n\t\taddress: daoMembers[1].String(),\n\t\tpower:   2,\n\t},\n\t{\n\t\taddress: daoMembers[2].String(),\n\t\tpower:   3,\n\t},\n}\n\nfunc assertPanic(t *testing.T, f func()) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t}\n\t}()\n\tf()\n}\n\nfunc TestIsDAOMember(t *testing.T) {\n\tdaos = []DAO{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\n\t// TODO: what package is ideal to use for checks?\n\tif IsDAOMember(0, caller) != false {\n\t\tt.Errorf(\"Should not be false\")\n\t}\n\tif IsDAOMember(0, caller1) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n\tif IsDAOMember(0, caller2) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n}\n\nfunc TestCreateDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\tif len(daos) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tif len(proposals) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tdao := daos[0]\n\tif dao.id != 0 {\n\t\tt.Errorf(\"first DAO id should be 0\")\n\t}\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"dao uri not set properly\")\n\t}\n\tif dao.metadata != \"https://metadata.gnodao1.org\" {\n\t\tt.Errorf(\"dao metadata not set properly\")\n\t}\n\tif dao.funds != 0 {\n\t\tt.Errorf(\"dao funds not set properly\")\n\t}\n\tif len(dao.depositHistory) != 0 {\n\t\tt.Errorf(\"dao deposit history not set properly\")\n\t}\n\tif len(dao.spendHistory) != 0 {\n\t\tt.Errorf(\"dao spend history not set properly\")\n\t}\n\tif len(dao.permissions) != 0 {\n\t\tt.Errorf(\"dao permissions not set properly\")\n\t}\n\tif dao.permMap == nil {\n\t\tt.Errorf(\"dao permission map not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 0 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller1.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller2.String()) != 2 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif dao.totalVotingPower != 6 {\n\t\tt.Errorf(\"totalVotingPower not set properly\")\n\t}\n\tif dao.votingPeriod != 86400*2 {\n\t\tt.Errorf(\"votingPeriod not set properly\")\n\t}\n\tif dao.voteQuorum != 30 {\n\t\tt.Errorf(\"voteQuorum not set properly\")\n\t}\n\tif dao.threshold != 10 {\n\t\tt.Errorf(\"threshold not set properly\")\n\t}\n\tif dao.vetoThreshold != 10 {\n\t\tt.Errorf(\"vetoThreshold not set properly\")\n\t}\n}\n\nfunc TestCreateProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\t})\n\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tproposal := proposals[0][0]\n\tif proposal.daoId != 0 {\n\t\tt.Errorf(\"proposal daoId should be 0\")\n\t}\n\tif proposal.id != 0 {\n\t\tt.Errorf(\"proposal id should be 0\")\n\t}\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"proposal title not set properly\")\n\t}\n\tif proposal.summary != \"Proposal to bootstrap DAO fund.\" {\n\t\tt.Errorf(\"proposal summary not set properly\")\n\t}\n\tif proposal.spendAmount != 0 {\n\t\tt.Errorf(\"proposal spendAmount not set properly\")\n\t}\n\tif proposal.spender != caller {\n\t\tt.Errorf(\"proposal spender not set properly\")\n\t}\n\tif len(proposal.vpUpdates) != 0 {\n\t\tt.Errorf(\"proposal vpUpdates not set properly\")\n\t}\n\tif proposal.newMetadata != \"\" {\n\t\tt.Errorf(\"proposal newMetadata not set properly\")\n\t}\n\tif proposal.newURI != \"\" {\n\t\tt.Errorf(\"proposal newURI not set properly\")\n\t}\n\tif proposal.submitTime != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"proposal submitTime not set properly\")\n\t}\n\tif proposal.voteEndTime != uint64(time.Now().Unix())+daos[0].votingPeriod {\n\t\tt.Errorf(\"proposal voteEndTime not set properly\")\n\t}\n\tif proposal.status != VOTING_PERIOD {\n\t\tt.Errorf(\"proposal status not set properly\")\n\t}\n\tif proposal.votes == nil {\n\t\tt.Errorf(\"proposal votes not set properly\")\n\t}\n\tif len(proposal.votingPowers) != 4 {\n\t\tt.Errorf(\"proposal votingPowers not set properly\")\n\t}\n}\n\nfunc TestVoteProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(1, 0, YES)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(0, 1, YES)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tVoteProposal(0, 0, YES)\n\t})\n\n\t// vote and check result is set properly\n\tstd.TestSetOrigCaller(caller1)\n\tVoteProposal(0, 0, YES)\n\tvote, found := getVote(0, 0, caller1)\n\tif !found {\n\t\tt.Errorf(\"proposal vote not set\")\n\t}\n\tif vote.address != caller1 {\n\t\tt.Errorf(\"vote address not set properly\")\n\t}\n\tif vote.timestamp != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"vote timestamp not set properly\")\n\t}\n\tif vote.option != YES {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 1 {\n\t\tt.Errorf(\"votePowers by vote option not set properly\")\n\t}\n\n\t// vote again with different option and check result\n\tVoteProposal(0, 0, NO)\n\tvote, found = getVote(0, 0, caller1)\n\tif vote.option != NO {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 0 {\n\t\tt.Errorf(\"votePowers for YES not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(NO)] != 1 {\n\t\tt.Errorf(\"votePowers for NO not set properly\")\n\t}\n\n\t// test vote end time already reached\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\t\tVoteProposal(0, 0, YES)\n\t})\n}\n\nfunc TestTallyAndExecute(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{\n\t\t{\n\t\t\taddress: caller.String(),\n\t\t\tpower:   1,\n\t\t},\n\t}, \"newMetadata.com\", \"newURI.com\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(1, 0)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 1)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tTallyAndExecute(0, 0)\n\t})\n\tassertPanic(t, func() { // vote end time not pass\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 0)\n\t})\n\n\t// vote end time to be reached\n\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\n\t// quorum not reached\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for vote quorum\")\n\t}\n\n\t// everyone abstains\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for all abstains\")\n\t}\n\n\t// more than 1/3 vote with NO_WITH_VETO\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower / 2\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = daos[0].totalVotingPower / 2\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for NO_WITH_VETO\")\n\t}\n\n\t// all YES vote\n\tproposals[0][0].votingPowers[ABSTAIN] = 0\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = 0\n\tproposals[0][0].votingPowers[YES] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != PASSED {\n\t\tt.Errorf(\"proposal should be PASSED\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif daos[0].metadata != \"newMetadata.com\" {\n\t\tt.Errorf(\"metadata not set properly\")\n\t}\n\tif daos[0].uri != \"newURI.com\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestDepositDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when not a dao member\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tDepositDAO(0, 100)\n\t})\n\n\t// not panics\n\tstd.TestSetOrigCaller(caller1)\n\tDepositDAO(0, 100)\n}\n\nfunc TestGetDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tGetDAO(100)\n\t})\n\n\t// success when valid dao id\n\tdao := GetDAO(0)\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestGetDAOs(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tgotDaos := GetDAOs(0, 10)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tCreateDAO(\"https://gnodao2.org\", \"https://metadata.gnodao2.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tgotDaos = GetDAOs(0, 0)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 10)\n\tif len(gotDaos) != 2 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 1)\n\tif len(gotDaos) != 1 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n}\n\nfunc TestGetProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tGetProposal(1, 0)\n\t})\n\n\t// panic when invalid proposal id\n\tassertPanic(t, func() {\n\t\tGetProposal(0, 1)\n\t})\n\n\t// success when valid dao id and proposal id\n\tproposal := GetProposal(0, 0)\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"title not set properly\")\n\t}\n}\n\nfunc TestGetProposals(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tassertPanic(t, func() { // invalid dao id\n\t\tGetProposals(0, 0, 10)\n\t})\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"proposal #1\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\tCreateProposal(0, \"proposal #2\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\tgotProposals := GetProposals(0, 0, 0)\n\tif len(gotProposals) != 0 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 10)\n\tif len(gotProposals) != 2 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 1)\n\tif len(gotProposals) != 1 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n}\n\nfunc TestRender(t *testing.T) {\n\tif Render(\"\") != \"\" {\n\t\tt.Errorf(\"Render function should empty\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"P6Mn3KHpG/jwgAp6LHh0XOMisDbqUflwNqfGtkfiVe8k1GEAEkorHvacDRM+Ij0gV+Ht2DOKq1J5bYgNyliUmQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"gnodao","Path":"gno.land/r/demo/gnodao_v03","Files":[{"Name":"gnodao.gno","Body":"package gnodao\n\nimport (\n\tjson \"encoding/binary\"\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype VoteOption uint32\n\nconst (\n\tYES          VoteOption = 0 // Indicates approval of the proposal in its current form.\n\tNO           VoteOption = 1 // Indicates disapproval of the proposal in its current form.\n\tNO_WITH_VETO VoteOption = 2 // Indicates stronger opposition to the proposal than simply voting No. Not available for SuperMajority-typed proposals as a simple No of 1/3 out of total votes would result in the same outcome.\n\tABSTAIN      VoteOption = 3 // Indicates that the voter is impartial to the outcome of the proposal. Although Abstain votes are counted towards the quorum, they're excluded when calculating the ratio of other voting options above.\n)\n\n// GNODAO VOTE\ntype Vote struct {\n\taddress   std.Address // address of the voter\n\ttimestamp uint64      // block timestamp of the vote\n\toption    VoteOption  // vote option\n}\n\ntype DAO struct {\n\tid               uint64\n\turi              string       // DAO homepage link\n\tmetadata         string       // DAO metadata reference link\n\tfunds            uint64       // DAO managing funds\n\tdepositHistory   []string     // deposit history - reserved for later use\n\tspendHistory     []string     // spend history - reserved for later use\n\tpermissions      []string     // permissions managed on DAO - reserved for later use\n\tpermMap          *avl.MutTree // permission map - reserved for later use\n\tvotingPowers     *avl.MutTree\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalStatus uint32\n\nconst (\n\tNIL           ProposalStatus = 0\n\tVOTING_PERIOD ProposalStatus = 1\n\tPASSED        ProposalStatus = 2\n\tREJECTED      ProposalStatus = 3\n\tFAILED        ProposalStatus = 4\n)\n\nfunc (s ProposalStatus) String() string {\n\tswitch s {\n\tcase NIL:\n\t\treturn \"Nil\"\n\tcase VOTING_PERIOD:\n\t\treturn \"VotingPeriod\"\n\tcase PASSED:\n\t\treturn \"Passed\"\n\tcase REJECTED:\n\t\treturn \"Rejected\"\n\tcase FAILED:\n\t\treturn \"Failed\"\n\t}\n\treturn \"\"\n}\n\ntype VotingPower struct {\n\taddress string\n\tpower   uint64\n}\n\ntype Proposal struct {\n\tdaoId        uint64         // dao id of the proposal\n\tid           uint64         // unique id assigned for each proposal\n\ttitle        string         // proposal title\n\tsummary      string         // proposal summary\n\tspendAmount  uint64         // amount of tokens to spend as part the proposal\n\tspender      std.Address    // address to receive spending tokens\n\tvpUpdates    []VotingPower  // updates on voting power - optional\n\tnewMetadata  string         // new metadata for the DAO - optional\n\tnewURI       string         // new URI for the DAO - optional\n\tsubmitTime   uint64         // proposal submission time\n\tvoteEndTime  uint64         // vote end time for the proposal\n\tstatus       ProposalStatus // StatusNil | StatusVotingPeriod | StatusPassed | StatusRejected | StatusFailed\n\tvotes        *avl.MutTree   // votes on the proposal\n\tvotingPowers []uint64       // voting power sum per voting option\n}\n\n// GNODAO STATE\nvar daos []DAO\nvar proposals [][]Proposal\n\nfunc getDAOVotingPower(daoId uint64, address string) uint64 {\n\tif len(daos) \u003c= int(daoId) {\n\t\treturn 0\n\t}\n\tres, ok := daos[daoId].votingPowers.Get(address)\n\tif ok {\n\t\treturn res.(uint64)\n\t}\n\treturn 0\n}\n\nfunc IsDAOMember(daoId uint64, address std.Address) bool {\n\treturn getDAOVotingPower(daoId, address.String()) \u003e 0\n}\n\nfunc getVote(daoId, proposalId uint64, address std.Address) (Vote, bool) {\n\tif int(daoId) \u003e= len(daos) {\n\t\treturn Vote{}, false\n\t}\n\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\treturn Vote{}, false\n\t}\n\n\tvote, ok := proposals[daoId][proposalId].votes.Get(address.String())\n\tif ok {\n\t\treturn vote.(Vote), true\n\t}\n\treturn Vote{}, false\n}\n\nfunc parseVotingPowers(daoMembers, votingPowers string) []VotingPower {\n\tparsedVPs := []VotingPower{}\n\tif len(daoMembers) == 0 {\n\t\treturn parsedVPs\n\t}\n\tmemberAddrs := strings.Split(daoMembers, \",\")\n\tmemberPowers := strings.Split(votingPowers, \",\")\n\tif len(memberAddrs) != len(memberPowers) {\n\t\tpanic(\"mismatch between members and voting powers count\")\n\t}\n\tfor i, memberAddr := range memberAddrs {\n\t\tpower, err := strconv.Atoi(memberPowers[i])\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tparsedVPs = append(parsedVPs, VotingPower{\n\t\t\taddress: memberAddr,\n\t\t\tpower:   uint64(power),\n\t\t})\n\t}\n\treturn parsedVPs\n}\n\n// GNODAO FUNCTIONS\nfunc CreateDAO(\n\turi string,\n\tmetadata string,\n\tdaoMembers string,\n\tvotingPowers string,\n\tvotingPeriod uint64,\n\tvoteQuorum uint64,\n\tthreshold uint64,\n\tvetoThreshold uint64,\n) {\n\tdaoId := uint64(len(daos))\n\tdaos = append(daos, DAO{\n\t\tid:               daoId,\n\t\turi:              uri,\n\t\tmetadata:         metadata,\n\t\tfunds:            0,\n\t\tdepositHistory:   []string{},\n\t\tspendHistory:     []string{},\n\t\tpermissions:      []string{},\n\t\tpermMap:          avl.NewMutTree(),\n\t\tvotingPowers:     avl.NewMutTree(),\n\t\ttotalVotingPower: 0,\n\t\tvotingPeriod:     votingPeriod,\n\t\tvoteQuorum:       voteQuorum,\n\t\tthreshold:        threshold,\n\t\tvetoThreshold:    vetoThreshold,\n\t})\n\n\tparsedVPs := parseVotingPowers(daoMembers, votingPowers)\n\ttotalVotingPower := uint64(0)\n\tfor _, vp := range parsedVPs {\n\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\ttotalVotingPower += vp.power\n\t}\n\tdaos[daoId].totalVotingPower = totalVotingPower\n\tproposals = append(proposals, []Proposal{})\n\t// TODO: emit events\n}\n\nfunc CreateProposal(\n\tdaoId uint64,\n\ttitle, summary string,\n\tspendAmount uint64, spender std.Address,\n\tdaoMembers string,\n\tvpUpdates string,\n\tnewMetadata string,\n\tnewURI string,\n) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a dao member\")\n\t}\n\n\tparsedVPUpdates := parseVotingPowers(daoMembers, vpUpdates)\n\tproposals[daoId] = append(proposals[daoId], Proposal{\n\t\tdaoId:        daoId,\n\t\tid:           uint64(len(proposals[daoId])),\n\t\ttitle:        title,\n\t\tsummary:      summary,\n\t\tspendAmount:  spendAmount,\n\t\tspender:      spender,\n\t\tvpUpdates:    parsedVPUpdates,\n\t\tnewMetadata:  newMetadata,\n\t\tnewURI:       newURI,\n\t\tsubmitTime:   uint64(time.Now().Unix()),\n\t\tvoteEndTime:  uint64(time.Now().Unix()) + daos[daoId].votingPeriod,\n\t\tstatus:       VOTING_PERIOD,\n\t\tvotes:        avl.NewMutTree(),\n\t\tvotingPowers: []uint64{0, 0, 0, 0}, // initiate as zero for 4 vote types\n\t})\n}\n\nfunc VoteProposal(daoId, proposalId uint64, option VoteOption) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// if invalid proposal, panic\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\n\t// if vote end time is reached panic\n\tif time.Now().Unix() \u003e int64(proposals[daoId][proposalId].voteEndTime) {\n\t\tpanic(\"vote end time reached\")\n\t}\n\n\t// Original vote cancel\n\tcallerVotingPower := getDAOVotingPower(daoId, caller.String())\n\tvote, ok := getVote(daoId, proposalId, caller)\n\tif ok {\n\t\tif proposals[daoId][proposalId].votingPowers[int(vote.option)] \u003e callerVotingPower {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] -= callerVotingPower\n\t\t} else {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] = 0\n\t\t}\n\t}\n\n\t// Create a vote\n\tproposals[daoId][proposalId].votes.Set(caller.String(), Vote{\n\t\taddress:   caller,\n\t\ttimestamp: uint64(time.Now().Unix()),\n\t\toption:    option,\n\t})\n\n\t// Voting power by option update for new vote\n\tproposals[daoId][proposalId].votingPowers[int(option)] += callerVotingPower\n}\n\n// TODO: handle voting power change during voting period for other proposal\n// TODO: experiment with gas limit\nfunc TallyAndExecute(daoId, proposalId uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// validation for proposalId\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\tdao := daos[daoId]\n\tproposal := proposals[daoId][proposalId]\n\tvotingPowers := proposal.votingPowers\n\n\tif time.Now().Unix() \u003c int64(proposal.voteEndTime) {\n\t\tpanic(\"proposal is in voting period\")\n\t}\n\n\t// reference logic for tally - https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/keeper/tally.go\n\ttotalVotes := votingPowers[YES] + votingPowers[NO] + votingPowers[NO_WITH_VETO] + votingPowers[ABSTAIN]\n\tif totalVotes \u003c dao.totalVotingPower*dao.voteQuorum/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If no one votes (everyone abstains), proposal rejected\n\tif totalVotes == votingPowers[ABSTAIN] {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/3 of voters veto, proposal rejected\n\tvetoThreshold := dao.vetoThreshold\n\tif votingPowers[NO_WITH_VETO] \u003e totalVotes*vetoThreshold/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote Yes, proposal passes\n\tthreshold := dao.threshold\n\tif votingPowers[YES] \u003e (totalVotes-votingPowers[ABSTAIN])*threshold/100 {\n\t\tproposals[daoId][proposalId].status = PASSED\n\n\t\t// TODO: spend coins when spendAmount is positive \u0026 spender is a valid address\n\t\tif proposal.spendAmount \u003e 0 {\n\t\t\tif daos[daoId].funds \u003e= proposal.spendAmount {\n\t\t\t\tdaos[daoId].funds -= proposal.spendAmount\n\t\t\t} else {\n\t\t\t\tproposals[daoId][proposalId].status = FAILED\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tif proposal.newMetadata != \"\" {\n\t\t\tdaos[daoId].metadata = proposal.newMetadata\n\t\t}\n\n\t\tif proposal.newURI != \"\" {\n\t\t\tdaos[daoId].uri = proposal.newURI\n\t\t}\n\n\t\tfor _, vp := range proposal.vpUpdates {\n\t\t\tdaos[daoId].totalVotingPower -= getDAOVotingPower(daoId, vp.address)\n\t\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\t\tdaos[daoId].totalVotingPower += vp.power\n\t\t}\n\n\t\t// TODO: contract does not own account that can hold coins - this is one of limitations\n\t\t// TODO: Adena Wallet from OnBloc - investigate on how they manage coins (swap - custody?)\n\t\t// Manual sending for funds (Address \u003c-\u003e Address) - Miloš Živković\n\t\t// https://github.com/gnolang/gno/blob/e392ab51bc05a5efbceaa8dbe395bac2e01ad808/tm2/pkg/crypto/keys/client/send.go#L109-L119\n\t\treturn\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote No, proposal rejected\n\tproposals[daoId][proposalId].status = REJECTED\n}\n\nfunc DepositDAO(daoId uint64, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// TODO: send coins from caller to DAO\n\t// TODO: verify received amount\n\t// daos[daoId].depositHistory = append(daos[daoId].depositHistory, Deposit{\n\t// \taddress: caller,\n\t// \tamount:  amount,\n\t// })\n}\n\nfunc GetDAO(daoId uint64) DAO {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\treturn daos[daoId]\n}\n\nfunc GetDAOs(startAfter, limit uint64) []DAO {\n\tmax := uint64(len(daos))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn daos[startAfter:max]\n}\n\nfunc GetProposal(daoId, proposalId uint64) Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\treturn proposals[daoId][proposalId]\n}\n\nfunc GetProposals(daoId, startAfter, limit uint64) []Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tmax := uint64(len(proposals[daoId]))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn proposals[daoId][startAfter:max]\n}\n\nfunc RenderVote(daoId, proposalId uint64, address std.Address) string {\n\tvote, found := getVote(daoId, proposalId, address)\n\tif !found {\n\t\treturn \"\"\n\t}\n\n\tbz, err := json.Marshal(vote)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn string(bz)\n}\n\ntype DAOEncode struct {\n\tid               uint64\n\turi              string // DAO homepage link\n\tmetadata         string // DAO metadata reference link\n\tfunds            uint64 // DAO managing funds\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalEncode struct {\n\tdaoId        uint64\n\tid           uint64\n\ttitle        string\n\tsummary      string\n\tspendAmount  uint64\n\tspender      std.Address\n\tvpUpdates    []VotingPower\n\tnewMetadata  string\n\tnewURI       string\n\tsubmitTime   uint64\n\tvoteEndTime  uint64\n\tstatus       ProposalStatus\n\tvotingPowers []uint64\n}\n\nfunc GetDAOEncodeObject(dao DAO) DAOEncode {\n\treturn DAOEncode{\n\t\tid:               dao.id,\n\t\turi:              dao.uri,\n\t\tmetadata:         dao.metadata,\n\t\tfunds:            dao.funds,\n\t\ttotalVotingPower: dao.totalVotingPower,\n\t\tvotingPeriod:     dao.votingPeriod,\n\t\tvoteQuorum:       dao.voteQuorum,\n\t\tthreshold:        dao.threshold,\n\t\tvetoThreshold:    dao.vetoThreshold,\n\t}\n}\n\nfunc GetProposalEncodeObject(p Proposal) DAOEncode {\n\treturn DAOEncode{\n\t\tdaoId:        p.daoId,\n\t\tid:           p.id,\n\t\ttitle:        p.title,\n\t\tsummary:      p.summary,\n\t\tspendAmount:  p.spendAmount,\n\t\tspender:      p.spender,\n\t\tvpUpdates:    p.vpUpdates,\n\t\tnewMetadata:  p.newMetadata,\n\t\tnewURI:       p.newURI,\n\t\tsubmitTime:   p.submitTime,\n\t\tvoteEndTime:  p.voteEndTime,\n\t\tstatus:       p.status,\n\t\tvotingPowers: p.votingPowers,\n\t}\n}\n\nfunc RenderDAO(daoId uint64) string {\n\tdaoEncode := GetDAOEncodeObject(GetDAO(daoId))\n\tbz, err := json.Marshal(daoEncode)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn string(bz)\n}\n\nfunc RenderDAOs(startAfter, limit uint64) string {\n\tdaos := GetDAOs(startAfter, limit)\n\tdaoEncodes := []DAOEncode{}\n\tfor _, dao := range daos {\n\t\tdaoEncode := GetDAOEncodeObject(dao)\n\t\tdaoEncodes = append(daoEncodes, daoEncode)\n\t}\n\tbz, err := json.Marshal(daoEncodes)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn string(bz)\n}\n\nfunc RenderProposal(daoId, proposalId uint64) string {\n\tproposalEncode := GetProposalEncodeObject(GetProposal(daoId, proposalId))\n\tbz, err := json.Marshal(proposalEncode)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn string(bz)\n}\n\nfunc RenderProposals(daoId, startAfter, limit uint64) string {\n\tproposals := GetProposals(daoId, startAfter, limit)\n\tproposalEncodes := []ProposalEncode{}\n\tfor _, dao := range proposals {\n\t\tproposalEncode := GetDAOEncodeObject(dao)\n\t\tproposalEncodes = append(proposalEncodes, proposalEncode)\n\t}\n\tbz, err := json.Marshal(proposalEncodes)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn string(bz)\n}\n\nfunc Render(path string) string {\n\treturn \"\"\n}\n"},{"Name":"gnodao_test.gno","Body":"package gnodao\n\nimport (\n\t\"fmt\"\n\t\"std\"\n\t\"testing\"\n\t\"time\"\n)\n\nvar caller std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnabcde\"\nvar caller1 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\"\nvar caller2 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\"\nvar daoMembers = []std.Address{\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnccccc\",\n}\nvar votingPowers = []VotingPower{\n\t{\n\t\taddress: daoMembers[0].String(),\n\t\tpower:   1,\n\t},\n\t{\n\t\taddress: daoMembers[1].String(),\n\t\tpower:   2,\n\t},\n\t{\n\t\taddress: daoMembers[2].String(),\n\t\tpower:   3,\n\t},\n}\n\nfunc assertPanic(t *testing.T, f func()) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t}\n\t}()\n\tf()\n}\n\nfunc TestIsDAOMember(t *testing.T) {\n\tdaos = []DAO{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\n\t// TODO: what package is ideal to use for checks?\n\tif IsDAOMember(0, caller) != false {\n\t\tt.Errorf(\"Should not be false\")\n\t}\n\tif IsDAOMember(0, caller1) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n\tif IsDAOMember(0, caller2) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n}\n\nfunc TestCreateDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\tif len(daos) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tif len(proposals) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tdao := daos[0]\n\tif dao.id != 0 {\n\t\tt.Errorf(\"first DAO id should be 0\")\n\t}\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"dao uri not set properly\")\n\t}\n\tif dao.metadata != \"https://metadata.gnodao1.org\" {\n\t\tt.Errorf(\"dao metadata not set properly\")\n\t}\n\tif dao.funds != 0 {\n\t\tt.Errorf(\"dao funds not set properly\")\n\t}\n\tif len(dao.depositHistory) != 0 {\n\t\tt.Errorf(\"dao deposit history not set properly\")\n\t}\n\tif len(dao.spendHistory) != 0 {\n\t\tt.Errorf(\"dao spend history not set properly\")\n\t}\n\tif len(dao.permissions) != 0 {\n\t\tt.Errorf(\"dao permissions not set properly\")\n\t}\n\tif dao.permMap == nil {\n\t\tt.Errorf(\"dao permission map not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 0 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller1.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller2.String()) != 2 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif dao.totalVotingPower != 6 {\n\t\tt.Errorf(\"totalVotingPower not set properly\")\n\t}\n\tif dao.votingPeriod != 86400*2 {\n\t\tt.Errorf(\"votingPeriod not set properly\")\n\t}\n\tif dao.voteQuorum != 30 {\n\t\tt.Errorf(\"voteQuorum not set properly\")\n\t}\n\tif dao.threshold != 10 {\n\t\tt.Errorf(\"threshold not set properly\")\n\t}\n\tif dao.vetoThreshold != 10 {\n\t\tt.Errorf(\"vetoThreshold not set properly\")\n\t}\n}\n\nfunc TestCreateProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\t})\n\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tproposal := proposals[0][0]\n\tif proposal.daoId != 0 {\n\t\tt.Errorf(\"proposal daoId should be 0\")\n\t}\n\tif proposal.id != 0 {\n\t\tt.Errorf(\"proposal id should be 0\")\n\t}\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"proposal title not set properly\")\n\t}\n\tif proposal.summary != \"Proposal to bootstrap DAO fund.\" {\n\t\tt.Errorf(\"proposal summary not set properly\")\n\t}\n\tif proposal.spendAmount != 0 {\n\t\tt.Errorf(\"proposal spendAmount not set properly\")\n\t}\n\tif proposal.spender != caller {\n\t\tt.Errorf(\"proposal spender not set properly\")\n\t}\n\tif len(proposal.vpUpdates) != 0 {\n\t\tt.Errorf(\"proposal vpUpdates not set properly\")\n\t}\n\tif proposal.newMetadata != \"\" {\n\t\tt.Errorf(\"proposal newMetadata not set properly\")\n\t}\n\tif proposal.newURI != \"\" {\n\t\tt.Errorf(\"proposal newURI not set properly\")\n\t}\n\tif proposal.submitTime != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"proposal submitTime not set properly\")\n\t}\n\tif proposal.voteEndTime != uint64(time.Now().Unix())+daos[0].votingPeriod {\n\t\tt.Errorf(\"proposal voteEndTime not set properly\")\n\t}\n\tif proposal.status != VOTING_PERIOD {\n\t\tt.Errorf(\"proposal status not set properly\")\n\t}\n\tif proposal.votes == nil {\n\t\tt.Errorf(\"proposal votes not set properly\")\n\t}\n\tif len(proposal.votingPowers) != 4 {\n\t\tt.Errorf(\"proposal votingPowers not set properly\")\n\t}\n}\n\nfunc TestVoteProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(1, 0, YES)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(0, 1, YES)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tVoteProposal(0, 0, YES)\n\t})\n\n\t// vote and check result is set properly\n\tstd.TestSetOrigCaller(caller1)\n\tVoteProposal(0, 0, YES)\n\tvote, found := getVote(0, 0, caller1)\n\tif !found {\n\t\tt.Errorf(\"proposal vote not set\")\n\t}\n\tif vote.address != caller1 {\n\t\tt.Errorf(\"vote address not set properly\")\n\t}\n\tif vote.timestamp != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"vote timestamp not set properly\")\n\t}\n\tif vote.option != YES {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 1 {\n\t\tt.Errorf(\"votePowers by vote option not set properly\")\n\t}\n\n\t// vote again with different option and check result\n\tVoteProposal(0, 0, NO)\n\tvote, found = getVote(0, 0, caller1)\n\tif vote.option != NO {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 0 {\n\t\tt.Errorf(\"votePowers for YES not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(NO)] != 1 {\n\t\tt.Errorf(\"votePowers for NO not set properly\")\n\t}\n\n\t// test vote end time already reached\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\t\tVoteProposal(0, 0, YES)\n\t})\n}\n\nfunc TestTallyAndExecute(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{\n\t\t{\n\t\t\taddress: caller.String(),\n\t\t\tpower:   1,\n\t\t},\n\t}, \"newMetadata.com\", \"newURI.com\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(1, 0)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 1)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tTallyAndExecute(0, 0)\n\t})\n\tassertPanic(t, func() { // vote end time not pass\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 0)\n\t})\n\n\t// vote end time to be reached\n\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\n\t// quorum not reached\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for vote quorum\")\n\t}\n\n\t// everyone abstains\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for all abstains\")\n\t}\n\n\t// more than 1/3 vote with NO_WITH_VETO\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower / 2\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = daos[0].totalVotingPower / 2\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for NO_WITH_VETO\")\n\t}\n\n\t// all YES vote\n\tproposals[0][0].votingPowers[ABSTAIN] = 0\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = 0\n\tproposals[0][0].votingPowers[YES] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != PASSED {\n\t\tt.Errorf(\"proposal should be PASSED\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif daos[0].metadata != \"newMetadata.com\" {\n\t\tt.Errorf(\"metadata not set properly\")\n\t}\n\tif daos[0].uri != \"newURI.com\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestDepositDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when not a dao member\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tDepositDAO(0, 100)\n\t})\n\n\t// not panics\n\tstd.TestSetOrigCaller(caller1)\n\tDepositDAO(0, 100)\n}\n\nfunc TestGetDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tGetDAO(100)\n\t})\n\n\t// success when valid dao id\n\tdao := GetDAO(0)\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestGetDAOs(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tgotDaos := GetDAOs(0, 10)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tCreateDAO(\"https://gnodao2.org\", \"https://metadata.gnodao2.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tgotDaos = GetDAOs(0, 0)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 10)\n\tif len(gotDaos) != 2 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 1)\n\tif len(gotDaos) != 1 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n}\n\nfunc TestGetProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tGetProposal(1, 0)\n\t})\n\n\t// panic when invalid proposal id\n\tassertPanic(t, func() {\n\t\tGetProposal(0, 1)\n\t})\n\n\t// success when valid dao id and proposal id\n\tproposal := GetProposal(0, 0)\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"title not set properly\")\n\t}\n}\n\nfunc TestGetProposals(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tassertPanic(t, func() { // invalid dao id\n\t\tGetProposals(0, 0, 10)\n\t})\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"proposal #1\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\tCreateProposal(0, \"proposal #2\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\tgotProposals := GetProposals(0, 0, 0)\n\tif len(gotProposals) != 0 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 10)\n\tif len(gotProposals) != 2 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 1)\n\tif len(gotProposals) != 1 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n}\n\nfunc TestRender(t *testing.T) {\n\tif Render(\"\") != \"\" {\n\t\tt.Errorf(\"Render function should empty\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"/+tu2gDGvF1CeNoZkpminmgw6wVLnSshBZIcO6cwn/57mmZ5yJgA2HuV7OXEl0mzpyUZtVqQ7e5ACRJRnVKr3Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"gnodao","Path":"gno.land/r/demo/gnodao_v03","Files":[{"Name":"gnodao.gno","Body":"package gnodao\n\nimport (\n\tjson \"encoding/binary\"\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype VoteOption uint32\n\nconst (\n\tYES          VoteOption = 0 // Indicates approval of the proposal in its current form.\n\tNO           VoteOption = 1 // Indicates disapproval of the proposal in its current form.\n\tNO_WITH_VETO VoteOption = 2 // Indicates stronger opposition to the proposal than simply voting No. Not available for SuperMajority-typed proposals as a simple No of 1/3 out of total votes would result in the same outcome.\n\tABSTAIN      VoteOption = 3 // Indicates that the voter is impartial to the outcome of the proposal. Although Abstain votes are counted towards the quorum, they're excluded when calculating the ratio of other voting options above.\n)\n\n// GNODAO VOTE\ntype Vote struct {\n\taddress   std.Address // address of the voter\n\ttimestamp uint64      // block timestamp of the vote\n\toption    VoteOption  // vote option\n}\n\ntype DAO struct {\n\tid               uint64\n\turi              string       // DAO homepage link\n\tmetadata         string       // DAO metadata reference link\n\tfunds            uint64       // DAO managing funds\n\tdepositHistory   []string     // deposit history - reserved for later use\n\tspendHistory     []string     // spend history - reserved for later use\n\tpermissions      []string     // permissions managed on DAO - reserved for later use\n\tpermMap          *avl.MutTree // permission map - reserved for later use\n\tvotingPowers     *avl.MutTree\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalStatus uint32\n\nconst (\n\tNIL           ProposalStatus = 0\n\tVOTING_PERIOD ProposalStatus = 1\n\tPASSED        ProposalStatus = 2\n\tREJECTED      ProposalStatus = 3\n\tFAILED        ProposalStatus = 4\n)\n\nfunc (s ProposalStatus) String() string {\n\tswitch s {\n\tcase NIL:\n\t\treturn \"Nil\"\n\tcase VOTING_PERIOD:\n\t\treturn \"VotingPeriod\"\n\tcase PASSED:\n\t\treturn \"Passed\"\n\tcase REJECTED:\n\t\treturn \"Rejected\"\n\tcase FAILED:\n\t\treturn \"Failed\"\n\t}\n\treturn \"\"\n}\n\ntype VotingPower struct {\n\taddress string\n\tpower   uint64\n}\n\ntype Proposal struct {\n\tdaoId        uint64         // dao id of the proposal\n\tid           uint64         // unique id assigned for each proposal\n\ttitle        string         // proposal title\n\tsummary      string         // proposal summary\n\tspendAmount  uint64         // amount of tokens to spend as part the proposal\n\tspender      std.Address    // address to receive spending tokens\n\tvpUpdates    []VotingPower  // updates on voting power - optional\n\tnewMetadata  string         // new metadata for the DAO - optional\n\tnewURI       string         // new URI for the DAO - optional\n\tsubmitTime   uint64         // proposal submission time\n\tvoteEndTime  uint64         // vote end time for the proposal\n\tstatus       ProposalStatus // StatusNil | StatusVotingPeriod | StatusPassed | StatusRejected | StatusFailed\n\tvotes        *avl.MutTree   // votes on the proposal\n\tvotingPowers []uint64       // voting power sum per voting option\n}\n\n// GNODAO STATE\nvar daos []DAO\nvar proposals [][]Proposal\n\nfunc getDAOVotingPower(daoId uint64, address string) uint64 {\n\tif len(daos) \u003c= int(daoId) {\n\t\treturn 0\n\t}\n\tres, ok := daos[daoId].votingPowers.Get(address)\n\tif ok {\n\t\treturn res.(uint64)\n\t}\n\treturn 0\n}\n\nfunc IsDAOMember(daoId uint64, address std.Address) bool {\n\treturn getDAOVotingPower(daoId, address.String()) \u003e 0\n}\n\nfunc getVote(daoId, proposalId uint64, address std.Address) (Vote, bool) {\n\tif int(daoId) \u003e= len(daos) {\n\t\treturn Vote{}, false\n\t}\n\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\treturn Vote{}, false\n\t}\n\n\tvote, ok := proposals[daoId][proposalId].votes.Get(address.String())\n\tif ok {\n\t\treturn vote.(Vote), true\n\t}\n\treturn Vote{}, false\n}\n\nfunc parseVotingPowers(daoMembers, votingPowers string) []VotingPower {\n\tparsedVPs := []VotingPower{}\n\tif len(daoMembers) == 0 {\n\t\treturn parsedVPs\n\t}\n\tmemberAddrs := strings.Split(daoMembers, \",\")\n\tmemberPowers := strings.Split(votingPowers, \",\")\n\tif len(memberAddrs) != len(memberPowers) {\n\t\tpanic(\"mismatch between members and voting powers count\")\n\t}\n\tfor i, memberAddr := range memberAddrs {\n\t\tpower, err := strconv.Atoi(memberPowers[i])\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tparsedVPs = append(parsedVPs, VotingPower{\n\t\t\taddress: memberAddr,\n\t\t\tpower:   uint64(power),\n\t\t})\n\t}\n\treturn parsedVPs\n}\n\n// GNODAO FUNCTIONS\nfunc CreateDAO(\n\turi string,\n\tmetadata string,\n\tdaoMembers string,\n\tvotingPowers string,\n\tvotingPeriod uint64,\n\tvoteQuorum uint64,\n\tthreshold uint64,\n\tvetoThreshold uint64,\n) {\n\tdaoId := uint64(len(daos))\n\tdaos = append(daos, DAO{\n\t\tid:               daoId,\n\t\turi:              uri,\n\t\tmetadata:         metadata,\n\t\tfunds:            0,\n\t\tdepositHistory:   []string{},\n\t\tspendHistory:     []string{},\n\t\tpermissions:      []string{},\n\t\tpermMap:          avl.NewMutTree(),\n\t\tvotingPowers:     avl.NewMutTree(),\n\t\ttotalVotingPower: 0,\n\t\tvotingPeriod:     votingPeriod,\n\t\tvoteQuorum:       voteQuorum,\n\t\tthreshold:        threshold,\n\t\tvetoThreshold:    vetoThreshold,\n\t})\n\n\tparsedVPs := parseVotingPowers(daoMembers, votingPowers)\n\ttotalVotingPower := uint64(0)\n\tfor _, vp := range parsedVPs {\n\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\ttotalVotingPower += vp.power\n\t}\n\tdaos[daoId].totalVotingPower = totalVotingPower\n\tproposals = append(proposals, []Proposal{})\n\t// TODO: emit events\n}\n\nfunc CreateProposal(\n\tdaoId uint64,\n\ttitle, summary string,\n\tspendAmount uint64, spender std.Address,\n\tdaoMembers string,\n\tvpUpdates string,\n\tnewMetadata string,\n\tnewURI string,\n) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a dao member\")\n\t}\n\n\tparsedVPUpdates := parseVotingPowers(daoMembers, vpUpdates)\n\tproposals[daoId] = append(proposals[daoId], Proposal{\n\t\tdaoId:        daoId,\n\t\tid:           uint64(len(proposals[daoId])),\n\t\ttitle:        title,\n\t\tsummary:      summary,\n\t\tspendAmount:  spendAmount,\n\t\tspender:      spender,\n\t\tvpUpdates:    parsedVPUpdates,\n\t\tnewMetadata:  newMetadata,\n\t\tnewURI:       newURI,\n\t\tsubmitTime:   uint64(time.Now().Unix()),\n\t\tvoteEndTime:  uint64(time.Now().Unix()) + daos[daoId].votingPeriod,\n\t\tstatus:       VOTING_PERIOD,\n\t\tvotes:        avl.NewMutTree(),\n\t\tvotingPowers: []uint64{0, 0, 0, 0}, // initiate as zero for 4 vote types\n\t})\n}\n\nfunc VoteProposal(daoId, proposalId uint64, option VoteOption) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// if invalid proposal, panic\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\n\t// if vote end time is reached panic\n\tif time.Now().Unix() \u003e int64(proposals[daoId][proposalId].voteEndTime) {\n\t\tpanic(\"vote end time reached\")\n\t}\n\n\t// Original vote cancel\n\tcallerVotingPower := getDAOVotingPower(daoId, caller.String())\n\tvote, ok := getVote(daoId, proposalId, caller)\n\tif ok {\n\t\tif proposals[daoId][proposalId].votingPowers[int(vote.option)] \u003e callerVotingPower {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] -= callerVotingPower\n\t\t} else {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] = 0\n\t\t}\n\t}\n\n\t// Create a vote\n\tproposals[daoId][proposalId].votes.Set(caller.String(), Vote{\n\t\taddress:   caller,\n\t\ttimestamp: uint64(time.Now().Unix()),\n\t\toption:    option,\n\t})\n\n\t// Voting power by option update for new vote\n\tproposals[daoId][proposalId].votingPowers[int(option)] += callerVotingPower\n}\n\n// TODO: handle voting power change during voting period for other proposal\n// TODO: experiment with gas limit\nfunc TallyAndExecute(daoId, proposalId uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// validation for proposalId\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\tdao := daos[daoId]\n\tproposal := proposals[daoId][proposalId]\n\tvotingPowers := proposal.votingPowers\n\n\tif time.Now().Unix() \u003c int64(proposal.voteEndTime) {\n\t\tpanic(\"proposal is in voting period\")\n\t}\n\n\t// reference logic for tally - https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/keeper/tally.go\n\ttotalVotes := votingPowers[YES] + votingPowers[NO] + votingPowers[NO_WITH_VETO] + votingPowers[ABSTAIN]\n\tif totalVotes \u003c dao.totalVotingPower*dao.voteQuorum/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If no one votes (everyone abstains), proposal rejected\n\tif totalVotes == votingPowers[ABSTAIN] {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/3 of voters veto, proposal rejected\n\tvetoThreshold := dao.vetoThreshold\n\tif votingPowers[NO_WITH_VETO] \u003e totalVotes*vetoThreshold/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote Yes, proposal passes\n\tthreshold := dao.threshold\n\tif votingPowers[YES] \u003e (totalVotes-votingPowers[ABSTAIN])*threshold/100 {\n\t\tproposals[daoId][proposalId].status = PASSED\n\n\t\t// TODO: spend coins when spendAmount is positive \u0026 spender is a valid address\n\t\tif proposal.spendAmount \u003e 0 {\n\t\t\tif daos[daoId].funds \u003e= proposal.spendAmount {\n\t\t\t\tdaos[daoId].funds -= proposal.spendAmount\n\t\t\t} else {\n\t\t\t\tproposals[daoId][proposalId].status = FAILED\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tif proposal.newMetadata != \"\" {\n\t\t\tdaos[daoId].metadata = proposal.newMetadata\n\t\t}\n\n\t\tif proposal.newURI != \"\" {\n\t\t\tdaos[daoId].uri = proposal.newURI\n\t\t}\n\n\t\tfor _, vp := range proposal.vpUpdates {\n\t\t\tdaos[daoId].totalVotingPower -= getDAOVotingPower(daoId, vp.address)\n\t\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\t\tdaos[daoId].totalVotingPower += vp.power\n\t\t}\n\n\t\t// TODO: contract does not own account that can hold coins - this is one of limitations\n\t\t// TODO: Adena Wallet from OnBloc - investigate on how they manage coins (swap - custody?)\n\t\t// Manual sending for funds (Address \u003c-\u003e Address) - Miloš Živković\n\t\t// https://github.com/gnolang/gno/blob/e392ab51bc05a5efbceaa8dbe395bac2e01ad808/tm2/pkg/crypto/keys/client/send.go#L109-L119\n\t\treturn\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote No, proposal rejected\n\tproposals[daoId][proposalId].status = REJECTED\n}\n\nfunc DepositDAO(daoId uint64, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// TODO: send coins from caller to DAO\n\t// TODO: verify received amount\n\t// daos[daoId].depositHistory = append(daos[daoId].depositHistory, Deposit{\n\t// \taddress: caller,\n\t// \tamount:  amount,\n\t// })\n}\n\nfunc GetDAO(daoId uint64) DAO {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\treturn daos[daoId]\n}\n\nfunc GetDAOs(startAfter, limit uint64) []DAO {\n\tmax := uint64(len(daos))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn daos[startAfter:max]\n}\n\nfunc GetProposal(daoId, proposalId uint64) Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\treturn proposals[daoId][proposalId]\n}\n\nfunc GetProposals(daoId, startAfter, limit uint64) []Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tmax := uint64(len(proposals[daoId]))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn proposals[daoId][startAfter:max]\n}\n\nfunc RenderVote(daoId, proposalId uint64, address std.Address) string {\n\tvote, found := getVote(daoId, proposalId, address)\n\tif !found {\n\t\treturn \"\"\n\t}\n\n\tbz, err := json.Marshal(vote)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn string(bz)\n}\n\ntype DAOEncode struct {\n\tid               uint64\n\turi              string // DAO homepage link\n\tmetadata         string // DAO metadata reference link\n\tfunds            uint64 // DAO managing funds\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalEncode struct {\n\tdaoId        uint64\n\tid           uint64\n\ttitle        string\n\tsummary      string\n\tspendAmount  uint64\n\tspender      std.Address\n\tvpUpdates    []VotingPower\n\tnewMetadata  string\n\tnewURI       string\n\tsubmitTime   uint64\n\tvoteEndTime  uint64\n\tstatus       ProposalStatus\n\tvotingPowers []uint64\n}\n\nfunc GetDAOEncodeObject(dao DAO) DAOEncode {\n\treturn DAOEncode{\n\t\tid:               dao.id,\n\t\turi:              dao.uri,\n\t\tmetadata:         dao.metadata,\n\t\tfunds:            dao.funds,\n\t\ttotalVotingPower: dao.totalVotingPower,\n\t\tvotingPeriod:     dao.votingPeriod,\n\t\tvoteQuorum:       dao.voteQuorum,\n\t\tthreshold:        dao.threshold,\n\t\tvetoThreshold:    dao.vetoThreshold,\n\t}\n}\n\nfunc GetProposalEncodeObject(p Proposal) DAOEncode {\n\treturn DAOEncode{\n\t\tdaoId:        p.daoId,\n\t\tid:           p.id,\n\t\ttitle:        p.title,\n\t\tsummary:      p.summary,\n\t\tspendAmount:  p.spendAmount,\n\t\tspender:      p.spender,\n\t\tvpUpdates:    p.vpUpdates,\n\t\tnewMetadata:  p.newMetadata,\n\t\tnewURI:       p.newURI,\n\t\tsubmitTime:   p.submitTime,\n\t\tvoteEndTime:  p.voteEndTime,\n\t\tstatus:       p.status,\n\t\tvotingPowers: p.votingPowers,\n\t}\n}\n\nfunc RenderDAO(daoId uint64) string {\n\tdaoEncode := GetDAOEncodeObject(GetDAO(daoId))\n\tbz, err := json.Marshal(daoEncode)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn string(bz)\n}\n\nfunc RenderDAOs(startAfter, limit uint64) string {\n\tdaos := GetDAOs(startAfter, limit)\n\tdaoEncodes := []DAOEncode{}\n\tfor _, dao := range daos {\n\t\tdaoEncode := GetDAOEncodeObject(dao)\n\t\tdaoEncodes = append(daoEncodes, daoEncode)\n\t}\n\tbz, err := json.Marshal(daoEncodes)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn string(bz)\n}\n\nfunc RenderProposal(daoId, proposalId uint64) string {\n\tproposalEncode := GetProposalEncodeObject(GetProposal(daoId, proposalId))\n\tbz, err := json.Marshal(proposalEncode)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn string(bz)\n}\n\nfunc RenderProposals(daoId, startAfter, limit uint64) string {\n\tproposals := GetProposals(daoId, startAfter, limit)\n\tproposalEncodes := []ProposalEncode{}\n\tfor _, dao := range proposals {\n\t\tproposalEncode := GetDAOEncodeObject(dao)\n\t\tproposalEncodes = append(proposalEncodes, proposalEncode)\n\t}\n\tbz, err := json.Marshal(proposalEncodes)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn string(bz)\n}\n\nfunc Render(path string) string {\n\treturn \"\"\n}\n"},{"Name":"gnodao_test.gno","Body":"package gnodao\n\nimport (\n\t\"fmt\"\n\t\"std\"\n\t\"testing\"\n\t\"time\"\n)\n\nvar caller std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnabcde\"\nvar caller1 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\"\nvar caller2 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\"\nvar daoMembers = []std.Address{\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnccccc\",\n}\nvar votingPowers = []VotingPower{\n\t{\n\t\taddress: daoMembers[0].String(),\n\t\tpower:   1,\n\t},\n\t{\n\t\taddress: daoMembers[1].String(),\n\t\tpower:   2,\n\t},\n\t{\n\t\taddress: daoMembers[2].String(),\n\t\tpower:   3,\n\t},\n}\n\nfunc assertPanic(t *testing.T, f func()) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t}\n\t}()\n\tf()\n}\n\nfunc TestIsDAOMember(t *testing.T) {\n\tdaos = []DAO{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\n\t// TODO: what package is ideal to use for checks?\n\tif IsDAOMember(0, caller) != false {\n\t\tt.Errorf(\"Should not be false\")\n\t}\n\tif IsDAOMember(0, caller1) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n\tif IsDAOMember(0, caller2) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n}\n\nfunc TestCreateDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\tif len(daos) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tif len(proposals) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tdao := daos[0]\n\tif dao.id != 0 {\n\t\tt.Errorf(\"first DAO id should be 0\")\n\t}\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"dao uri not set properly\")\n\t}\n\tif dao.metadata != \"https://metadata.gnodao1.org\" {\n\t\tt.Errorf(\"dao metadata not set properly\")\n\t}\n\tif dao.funds != 0 {\n\t\tt.Errorf(\"dao funds not set properly\")\n\t}\n\tif len(dao.depositHistory) != 0 {\n\t\tt.Errorf(\"dao deposit history not set properly\")\n\t}\n\tif len(dao.spendHistory) != 0 {\n\t\tt.Errorf(\"dao spend history not set properly\")\n\t}\n\tif len(dao.permissions) != 0 {\n\t\tt.Errorf(\"dao permissions not set properly\")\n\t}\n\tif dao.permMap == nil {\n\t\tt.Errorf(\"dao permission map not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 0 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller1.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller2.String()) != 2 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif dao.totalVotingPower != 6 {\n\t\tt.Errorf(\"totalVotingPower not set properly\")\n\t}\n\tif dao.votingPeriod != 86400*2 {\n\t\tt.Errorf(\"votingPeriod not set properly\")\n\t}\n\tif dao.voteQuorum != 30 {\n\t\tt.Errorf(\"voteQuorum not set properly\")\n\t}\n\tif dao.threshold != 10 {\n\t\tt.Errorf(\"threshold not set properly\")\n\t}\n\tif dao.vetoThreshold != 10 {\n\t\tt.Errorf(\"vetoThreshold not set properly\")\n\t}\n}\n\nfunc TestCreateProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\t})\n\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tproposal := proposals[0][0]\n\tif proposal.daoId != 0 {\n\t\tt.Errorf(\"proposal daoId should be 0\")\n\t}\n\tif proposal.id != 0 {\n\t\tt.Errorf(\"proposal id should be 0\")\n\t}\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"proposal title not set properly\")\n\t}\n\tif proposal.summary != \"Proposal to bootstrap DAO fund.\" {\n\t\tt.Errorf(\"proposal summary not set properly\")\n\t}\n\tif proposal.spendAmount != 0 {\n\t\tt.Errorf(\"proposal spendAmount not set properly\")\n\t}\n\tif proposal.spender != caller {\n\t\tt.Errorf(\"proposal spender not set properly\")\n\t}\n\tif len(proposal.vpUpdates) != 0 {\n\t\tt.Errorf(\"proposal vpUpdates not set properly\")\n\t}\n\tif proposal.newMetadata != \"\" {\n\t\tt.Errorf(\"proposal newMetadata not set properly\")\n\t}\n\tif proposal.newURI != \"\" {\n\t\tt.Errorf(\"proposal newURI not set properly\")\n\t}\n\tif proposal.submitTime != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"proposal submitTime not set properly\")\n\t}\n\tif proposal.voteEndTime != uint64(time.Now().Unix())+daos[0].votingPeriod {\n\t\tt.Errorf(\"proposal voteEndTime not set properly\")\n\t}\n\tif proposal.status != VOTING_PERIOD {\n\t\tt.Errorf(\"proposal status not set properly\")\n\t}\n\tif proposal.votes == nil {\n\t\tt.Errorf(\"proposal votes not set properly\")\n\t}\n\tif len(proposal.votingPowers) != 4 {\n\t\tt.Errorf(\"proposal votingPowers not set properly\")\n\t}\n}\n\nfunc TestVoteProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(1, 0, YES)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(0, 1, YES)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tVoteProposal(0, 0, YES)\n\t})\n\n\t// vote and check result is set properly\n\tstd.TestSetOrigCaller(caller1)\n\tVoteProposal(0, 0, YES)\n\tvote, found := getVote(0, 0, caller1)\n\tif !found {\n\t\tt.Errorf(\"proposal vote not set\")\n\t}\n\tif vote.address != caller1 {\n\t\tt.Errorf(\"vote address not set properly\")\n\t}\n\tif vote.timestamp != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"vote timestamp not set properly\")\n\t}\n\tif vote.option != YES {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 1 {\n\t\tt.Errorf(\"votePowers by vote option not set properly\")\n\t}\n\n\t// vote again with different option and check result\n\tVoteProposal(0, 0, NO)\n\tvote, found = getVote(0, 0, caller1)\n\tif vote.option != NO {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 0 {\n\t\tt.Errorf(\"votePowers for YES not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(NO)] != 1 {\n\t\tt.Errorf(\"votePowers for NO not set properly\")\n\t}\n\n\t// test vote end time already reached\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\t\tVoteProposal(0, 0, YES)\n\t})\n}\n\nfunc TestTallyAndExecute(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{\n\t\t{\n\t\t\taddress: caller.String(),\n\t\t\tpower:   1,\n\t\t},\n\t}, \"newMetadata.com\", \"newURI.com\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(1, 0)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 1)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tTallyAndExecute(0, 0)\n\t})\n\tassertPanic(t, func() { // vote end time not pass\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 0)\n\t})\n\n\t// vote end time to be reached\n\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\n\t// quorum not reached\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for vote quorum\")\n\t}\n\n\t// everyone abstains\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for all abstains\")\n\t}\n\n\t// more than 1/3 vote with NO_WITH_VETO\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower / 2\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = daos[0].totalVotingPower / 2\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for NO_WITH_VETO\")\n\t}\n\n\t// all YES vote\n\tproposals[0][0].votingPowers[ABSTAIN] = 0\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = 0\n\tproposals[0][0].votingPowers[YES] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != PASSED {\n\t\tt.Errorf(\"proposal should be PASSED\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif daos[0].metadata != \"newMetadata.com\" {\n\t\tt.Errorf(\"metadata not set properly\")\n\t}\n\tif daos[0].uri != \"newURI.com\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestDepositDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when not a dao member\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tDepositDAO(0, 100)\n\t})\n\n\t// not panics\n\tstd.TestSetOrigCaller(caller1)\n\tDepositDAO(0, 100)\n}\n\nfunc TestGetDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tGetDAO(100)\n\t})\n\n\t// success when valid dao id\n\tdao := GetDAO(0)\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestGetDAOs(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tgotDaos := GetDAOs(0, 10)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tCreateDAO(\"https://gnodao2.org\", \"https://metadata.gnodao2.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tgotDaos = GetDAOs(0, 0)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 10)\n\tif len(gotDaos) != 2 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 1)\n\tif len(gotDaos) != 1 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n}\n\nfunc TestGetProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tGetProposal(1, 0)\n\t})\n\n\t// panic when invalid proposal id\n\tassertPanic(t, func() {\n\t\tGetProposal(0, 1)\n\t})\n\n\t// success when valid dao id and proposal id\n\tproposal := GetProposal(0, 0)\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"title not set properly\")\n\t}\n}\n\nfunc TestGetProposals(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tassertPanic(t, func() { // invalid dao id\n\t\tGetProposals(0, 0, 10)\n\t})\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"proposal #1\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\tCreateProposal(0, \"proposal #2\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\tgotProposals := GetProposals(0, 0, 0)\n\tif len(gotProposals) != 0 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 10)\n\tif len(gotProposals) != 2 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 1)\n\tif len(gotProposals) != 1 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n}\n\nfunc TestRender(t *testing.T) {\n\tif Render(\"\") != \"\" {\n\t\tt.Errorf(\"Render function should empty\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"Q4X6cviYL93byim5uE5TMT0gsbMg1m1ia7tqRetvnWFV+3W1/RXCfSc11Zm6Vteq7YbWIfs+kvfvTgB9aqONtw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_0","Path":"gno.land/r/demo/multi_tx_0","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"mMY0haKiQwsc+2a55aHNVoGAY6gCpspTRmfTyHqsT/ES9MaHsy71NWBjqNyCLdQAbJXVdpBNSoY4xztZYnb22g=="}],"memo":"tx-0"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_1","Path":"gno.land/r/demo/multi_tx_1","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"t9AXExUT/GwVTMImz05p8wSinSYKhmNNhyAz4UGvem9NOwtjJgaeDYnZ26sp9RephkzJEiLII2juTl+L7vbWfg=="}],"memo":"tx-1"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_0","Path":"gno.land/r/demo/multi_tx_0","Files":[{"Name":"multi_tx_0.gno","Body":"package multi_tx_0\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"5qn2oByzT0RBBGPtB+MN1fL5+ORPfSR1dmxjukKTMSkbJZ2vLRjsjlNvTovIwwh68nxOfp0YZzKZzQmaBbU+xg=="}],"memo":"tx-0"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"prefix_0","Path":"gno.land/r/demo/prefix_0","Files":[{"Name":"prefix_0.gno","Body":"package prefix_0\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"tEMkY3wsshybjpxbuaepeW3xSvyk0jeak1W7Ug7LV/N8v3MLLFByoj05S1W6q8xxHpukWpeYSMJVE0xfg3eHsA=="}],"memo":"tx-0"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"prefix_1","Path":"gno.land/r/demo/prefix_1","Files":[{"Name":"prefix_1.gno","Body":"package prefix_1\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"h0g5unB7HjtSHHczF5vxIVMlCrIvbQTrD0UIBzuV7NMxgJ+MfO4+mKUbEB8vjLWV2XRTQ+Az0VvizpYeoFAEWw=="}],"memo":"tx-1"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"prefix_0","Path":"gno.land/r/demo/prefix_0","Files":[{"Name":"prefix_0.gno","Body":"package prefix_0\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"uIfmaxR9NOMojLjcBTOmb1p7RSZlVQWSONKpR2gEeu1IzfEfjMgyZItEESZZOqUCTS5sugAVG/FFDQUPVJB7qA=="}],"memo":"tx-0"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"prefix_1","Path":"gno.land/r/demo/prefix_1","Files":[{"Name":"prefix_1.gno","Body":"package prefix_1\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"iqidQH9rr9yRURE1hN8R96qB5dETWzU+0k6H0kvmrkUQc7VIVrWAYbECJfqMukNXUzr2XzrDGb1U4lRJT9Jr7A=="}],"memo":"tx-1"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"prefix_2","Path":"gno.land/r/demo/prefix_2","Files":[{"Name":"prefix_2.gno","Body":"package prefix_2\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"KxlHBMeL8mpXHdvkDw+vfn0BZ8nOKH8FCBeOtBjA/t9l1wW3pVadT/kH58ZM41GVc4K3cF/gN5LTFv7zmLaA6A=="}],"memo":"tx-2"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"prefix_3","Path":"gno.land/r/demo/prefix_3","Files":[{"Name":"prefix_3.gno","Body":"package prefix_3\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"hgIfaj332cWRnktuxN1GkdBR8mNsgCFVsP6gAlXrwjFgNv7QsImhZUL89v/mROa1PKfhK7YwG09SC47OdUp/LQ=="}],"memo":"tx-3"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_1_0","Path":"gno.land/r/demoprefix +/_0","Files":[{"Name":"multi_tx_1_0.gno","Body":"package multi_tx_1_0\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"ej12c9h0I12/6nl/6PXd/4OkvC68ElaNjnA+5CRsLA5nSxnYZpGGqaCxXwQvQZSuerB/hhPOPLtyMYqre3RagA=="}],"memo":"tx-0"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_1_1","Path":"gno.land/r/demoprefix +/_1","Files":[{"Name":"multi_tx_1_1.gno","Body":"package multi_tx_1_1\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"GCgYlaHGCKW9EQbk6SrVL9MBnyubOKFXWLF13sUPFwwTQ2VsHxM2UabnSQ+qDchjrVrQzxDVGZmard0r+WxPqg=="}],"memo":"tx-1"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_1_0","Path":"gno.land/r/demoprefix +/_0","Files":[{"Name":"multi_tx_1_0.gno","Body":"package multi_tx_1_0\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"uARJgx69zJGSwBwng1d1wFAZFeD764JQ5Hlnf14124cf8w5YT+X+SUKU1bj0r0Hc4iRurKmZdvh1aeO3SoZzTQ=="}],"memo":"tx-0"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_1_1","Path":"gno.land/r/demoprefix +/_1","Files":[{"Name":"multi_tx_1_1.gno","Body":"package multi_tx_1_1\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"x2tt8ee0ELmJn/zy5EVg6UqHfwsr4GWOXdMnCDBYlMhmC+pIws1a6x3gFdXf7sGzBQLaIZaikecVmc/jzK9m3A=="}],"memo":"tx-1"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_1_2","Path":"gno.land/r/demoprefix +/_2","Files":[{"Name":"multi_tx_1_2.gno","Body":"package multi_tx_1_2\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"hKIYF7s/3h3C2tKma/vMhvz7mQrZd+ZIi+COvaFjiTNunu+QPdsOgdySqqAOGAqHffIZbrEwwc8+xCfu/u6/fw=="}],"memo":"tx-2"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_2_0","Path":"gno.land/r/demoprefix +/_0","Files":[{"Name":"multi_tx_2_0.gno","Body":"package multi_tx_2_0\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"mowxOGLz97MA99Dlr7LVPEl/hgL495h+HADs4qx7F6RJlossfE3R+18B6I+rlndD6sQYdz6OADzCopGJHpi1qg=="}],"memo":"tx-0"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_2_1","Path":"gno.land/r/demoprefix +/_1","Files":[{"Name":"multi_tx_2_1.gno","Body":"package multi_tx_2_1\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"d8K0XA7VzFe2C2d9lRRarRzyJKgUuXYhIPdRMpTa1od1hqboWL2h2DdKkmKljrFq6CRECQsoafy2lMjw4y6ETA=="}],"memo":"tx-1"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_2_0","Path":"gno.land/r/demo/multi_tx_2_0","Files":[{"Name":"multi_tx_2_0.gno","Body":"package multi_tx_2_0\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"hWHhAUDSyB9556JOHvsk5QHXexDLciAUAQOs0gEt5VwlvgFpq5SiJnRYMlGHO6HW9rb5KM47OrNfLXsmG7iF7Q=="}],"memo":"tx-0"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_2_1","Path":"gno.land/r/demo/multi_tx_2_1","Files":[{"Name":"multi_tx_2_1.gno","Body":"package multi_tx_2_1\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"yUPWopmKVzbbPvb66N3rt23BuuAouPP5BdMuxLw4BzwEJi32gNEkaKoxNla6IzfGwj2U+wY+s1GqsD+PGI1/mw=="}],"memo":"tx-1"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_2_2","Path":"gno.land/r/demo/multi_tx_2_2","Files":[{"Name":"multi_tx_2_2.gno","Body":"package multi_tx_2_2\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"b878rfHBFrfKOREHJErqCAIiP4Kb7i/zACnM1zOQz94wyp7pzL6SpzN5Ga6nmgSugpCTK2zkm5OA0X8sI4VmwQ=="}],"memo":"tx-2"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_2_0","Path":"gno.land/r/demo/multi_tx_2_0","Files":[{"Name":"multi_tx_2_0.gno","Body":"package multi_tx_2_0\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"EAGG0uyc71JzG5U9tQB5P6NKKZoqAXjNusGl8f8ZZh1F25A+S4SrLtiZIm16wNY89AQ8Sb4dL+eHtxT6+Sspgw=="}],"memo":"tx-0"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_3_0","Path":"gno.land/r/demo/multi_tx_3_0","Files":[{"Name":"multi_tx_3_0.gno","Body":"package multi_tx_3_0\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"186lDQWfe5M8W9ZNAK0E2C4Fwzj4jUz4F9fRukv0+GtqZv9yc1SRY0jTZ7oL9qtpR7bxmwjFpZNC4pVJhIjYaw=="}],"memo":"tx-0"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_4_0","Path":"gno.land/r/demo/multi_tx_4_0","Files":[{"Name":"multi_tx_4_0.gno","Body":"package multi_tx_4_0\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"2000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"LcFrN3irpuA+LEiWZdLKBXF5NKzDKyG+8fC4cxsRZgRewZfbAynOgZSjEBuoaAb/ZNOqkFxsTxywA8r2RfQFWQ=="}],"memo":"tx-0"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_4_1","Path":"gno.land/r/demo/multi_tx_4_1","Files":[{"Name":"multi_tx_4_1.gno","Body":"package multi_tx_4_1\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"2000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"1mEJMHsP80KWVhs5M+AiqklgI0BluQEWmPNK8jxuqXYkqx1C8/lyTvnuRZDDHpJDVjT8mnH1fF2l8iHp106gVA=="}],"memo":"tx-1"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_4_2","Path":"gno.land/r/demo/multi_tx_4_2","Files":[{"Name":"multi_tx_4_2.gno","Body":"package multi_tx_4_2\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"2000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"4sTvDdoxPyEgb7B8Ve5zkJM8cBA2NtL+m+y+krmACsJu5PCJxvtX33sAXBcv9CfJcD1R7ytorjNiYnpe3xEpnQ=="}],"memo":"tx-2"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_5_0","Path":"gno.land/r/demo/multi_tx_5_0","Files":[{"Name":"multi_tx_5_0.gno","Body":"package multi_tx_5_0\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"2000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"nPip0Yoyuon8+IS7D9M2ElcsddmZ+3aW6Tk5/+Ae1JU912HWfHalT5FVnvyEQoiIHEEt8Jb1Zrx8kFlrI752JQ=="}],"memo":"tx-0"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_5_1","Path":"gno.land/r/demo/multi_tx_5_1","Files":[{"Name":"multi_tx_5_1.gno","Body":"package multi_tx_5_1\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"2000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"Dg5L+JczinYuptZwxH1QYR572h8zKipbZlxXzgasdKc7tY3dXpNGn2iEDmh2mUcUpCpEdayxOxt8C3DTtqbbOA=="}],"memo":"tx-1"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_5_2","Path":"gno.land/r/demo/multi_tx_5_2","Files":[{"Name":"multi_tx_5_2.gno","Body":"package multi_tx_5_2\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"2000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"Y+joHykUkD6La3mQwsI49z3/dQ2/HGMmMYEaQTS42bUqFpxEKAQIfLbeSyas8xxDNCvNvBB13tpAU4ZUPmINoA=="}],"memo":"tx-2"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_6_0","Path":"gno.land/r/demo/multi_tx_6_0","Files":[{"Name":"multi_tx_6_0.gno","Body":"package multi_tx_6_0\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"Y9871Cc9cZ9WROSCRSKmNcGVf+tp+d+08K6YVcbjejN2SHnopTcnoujSaO2YuOSWSihXFYLzTyFxM7dtaMQosQ=="}],"memo":"tx-0"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_6_1","Path":"gno.land/r/demo/multi_tx_6_1","Files":[{"Name":"multi_tx_6_1.gno","Body":"package multi_tx_6_1\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"jzV/UJZ1lYCgA8rhrM4q7hVrQMxuibDEz19GfBwM/4ZlUgYA4FdjmyQq+tTCJCg4Cgb3PotBjv2gFMNkKvKk2A=="}],"memo":"tx-1"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_7_0","Path":"gno.land/r/demo/multi_tx_7_0","Files":[{"Name":"multi_tx_7_0.gno","Body":"package multi_tx_7_0\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"vfr1dAxutywh+EDMesHOKZyAfQNNObEtGf3csnJkZk5YyMP9FWxbz9v+YfyzTQblEvntgqndzlruBxXuHn8iEA=="}],"memo":"tx-0"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_7_1","Path":"gno.land/r/demo/multi_tx_7_1","Files":[{"Name":"multi_tx_7_1.gno","Body":"package multi_tx_7_1\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"leUxyHhxwN5krrOHGytK3n4fTZN3K7EZepE1lg8TCOhEZZv1goKOpOkQ0PR9+GiGDxSru2TRmlUU6AQENIn9/Q=="}],"memo":"tx-1"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_8_0","Path":"gno.land/r/demo/multi_tx_8_0","Files":[{"Name":"multi_tx_8_0.gno","Body":"package multi_tx_8_0\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"CfQH2bnukxvxCvV3poRsjd/h1995A0t/xW6rFcomFGoZdBaz+WjjUT5zO7a65+RBL+/GXawNqXb1bAx6pDgGFg=="}],"memo":"tx-0"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_9_0","Path":"gno.land/r/demo/multi_tx_9_0","Files":[{"Name":"multi_tx_9_0.gno","Body":"package multi_tx_9_0\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"kWqXcJkoroI6VLsNw6mOrMdEcYM5tBaWoX+xdAljYIok4oqapspoEa2LTio6InprcVVT1EVKRZy3jUtHKe1Pjg=="}],"memo":"tx-0"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_9_1","Path":"gno.land/r/demo/multi_tx_9_1","Files":[{"Name":"multi_tx_9_1.gno","Body":"package multi_tx_9_1\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"8n5Y0kV9jK3hYRpaGTfa+fDHKkQC9wZPdxi7S/GGUP5RzJP0xrNp8eJT1ZlNw2aSIpkzDHSSscIqz7bxUk+hpA=="}],"memo":"tx-1"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_10_0","Path":"gno.land/r/demo/multi_tx_10_0","Files":[{"Name":"multi_tx_10_0.gno","Body":"package multi_tx_10_0\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"/4YWWOWFQ+lSW5RjbnLQu8X/ZhpgFQiMNOKVAsMBUSZ8QjJ2sGCMU3H+XfPxg8VUdCeXqHRrnpFEbUwyeMqgmw=="}],"memo":"tx-0"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_10_1","Path":"gno.land/r/demo/multi_tx_10_1","Files":[{"Name":"multi_tx_10_1.gno","Body":"package multi_tx_10_1\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"5tWke7RoO66Y71Q1qpLQ0pWB0YmUlpbzsGrRAyLcmcUUAwQ2VyOTx1AiyBirVJVzT4j4b41NUIwiJtvGVaDtmA=="}],"memo":"tx-1"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_10_0","Path":"gno.land/r/demo/multi_tx_10_0","Files":[{"Name":"multi_tx_10_0.gno","Body":"package multi_tx_10_0\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"GloaQ/MXKCkq1TXsrOV8X2xeeM2JbjhhV5BkeP8p8ppUnWj+WURq13bEpBQr1AGn8pPzQwxQewGG93bvPAT5cw=="}],"memo":"tx-0"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_10_1","Path":"gno.land/r/demo/multi_tx_10_1","Files":[{"Name":"multi_tx_10_1.gno","Body":"package multi_tx_10_1\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"yx0iRFHw0FfFMyZLO+hQlf5OMtw/Kc2vY+kpTRcXj7QiN3mLIA8lrVkvCg83jD4gc9CprvZCEgLVfDEKjYoTBQ=="}],"memo":"tx-1"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_11_0","Path":"gno.land/r/demo/multi_tx_11_0","Files":[{"Name":"multi_tx_11_0.gno","Body":"package multi_tx_11_0\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"kgJ/YlDcEBLqacRgX4CPu0eyaxUiReAgJvLmVMJ48C01eNAlKL56xIwC+lD4tJAq1aHGBKjgRktAmI04THC8Hw=="}],"memo":"tx-0"}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"G15AO2fAeyv33ZnLz2tBCnKf2KNxEYqV0OeRXGqJNFNSZsz6lsgRgCOOjYy0hIwNdRPPjX7VHJHUFUGZYruGKw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_12_0","Path":"gno.land/r/demo/multi_tx_12_0","Files":[{"Name":"multi_tx_12_0.gno","Body":"package multi_tx_12_0\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"0GNTLQZIGDEP/7pVUXBZ5iRdSGHfWwWbvHlRKYIX18g3YuGGmXOAa9d0P6MhCn/CwYc/jSHHdK6PWHowt90hyg=="}],"memo":"tx-0"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_13_0","Path":"gno.land/r/demo/multi_tx_13_0","Files":[{"Name":"multi_tx_13_0.gno","Body":"package multi_tx_13_0\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"zxFFp7PU2Ws3gmBjntjo4ie7E4rREgSnPER4LmLPl5dyZfswWNmFhk6MxEdIIydY1FUGX0VH216eMb6dtJH7Jw=="}],"memo":"tx-0"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"multi_tx_13_1","Path":"gno.land/r/demo/multi_tx_13_1","Files":[{"Name":"multi_tx_13_1.gno","Body":"package multi_tx_13_1\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"Tg29+CTMm8C8eig9KozkeRCEkOro5Nh73BB2eUgUobtGVQmBFbc54I48Gr6tg/YHJoHKf3i9ik6MoEMWkW/dyg=="}],"memo":"tx-1"}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"qfiIDLgTnrpLcvfLwN3Lx4aZy0aFfZO8bqrOp3Otv6xf2j0dBrl1C2FHYn/8xjFVX7olG+hLz/keZiFes60Xow=="}],"memo":"tx-0"}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"UstCslT4INcmBjY2qn6reqm8+G7v9OoADUef1rSeeF4nGwdEPnHC6ZpzcNkEK3j9W1khScOMSS+NatMPrknQQg=="}],"memo":"tx-1"}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"p/lPTVGlB3UvN0JVisphTcfyQSIEP9cjUKR8b59A8pk4f2HI4miELmQZNfqbfOljKyxHvLANCtutZVkBjc4k1Q=="}],"memo":"tx-2"}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"+L9fy6AEKxGwiZifXWUzOdyQhJQdFc8SgdUkPIJhyR5fCmU3xlmgP1OQWbA5a7iGz9nXBq9Mz9VNUcRulk7XsQ=="}],"memo":"tx-0"}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"8eshCXpZCXiG8KaGSb7EiMbrqHa1zz/CCQkt42HMgP16GeOwN40g2ZCG+b/HF5XYJb6eqY/fJPiXCN3OQmdW3g=="}],"memo":"tx-1"}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"zEYz4tt4OS4p7+1UoXpeQWUHB4LHAOa368OXah4UgO8C6InLoIX38ZgehJzSoa9kJcAry7jTc1AlTFUkE7w2JQ=="}],"memo":"tx-0"}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"MYLVPCQfzryCMfXFgcCL7MPC4P1XHQM8R/20v5XmyeF+2aupstAEqeZ7rfRmyyIFkzmeWc4pAJE4vHl6SsrS7g=="}],"memo":"tx-0"}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"lR3Z1GkGyaPlSuzfbUus0D/o1BNSOQsdIPrm/Ivlxg8CVzc+Do07ZRLrs2EqNY3nc7c1J3r9A7Fx8BVX8HInzw=="}],"memo":"tx-1"}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"X5IQQss0eaGmdioOTmIHBVuvMx7D8JKEbOJd6D1f0xBt0aXJgL4/xftVE8IlandFz7oYQWnHWMHGl5eS92YDPQ=="}],"memo":"tx-0"}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"wFMIEvH/2NrrPv2qc/LLyNGVKzKy5SExBN9ccAno8NAwotZ+PEQGG2mcWWzU4m3G1RR+LJ60zJQEKUHMwWK80A=="}],"memo":"tx-0"}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]},{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"KWbuIAXaVQg+nGLCZdT1NRLBDW5fwOjdQaNvDY0pno8sjV9mIOHBwnHqxPwpmOxTvtdMNYeFkBUR+PRentT7Kg=="}],"memo":"tx-0"}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"JKwI1YEIDyDKdY5K8CMdtrMgkxFGxzoyB5KiWa8lWnIk3eisBnP4VJtKMYI7sXeMJEgZ2xpO5GM2S14r44o26A=="}],"memo":"tx-0"}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"uztsk2C/bRlmkAKdEh8yZm6vbpFRGBSmJ25svQzGMAx6kdmtQ71CbYJ+/TZ4gjlhYWElcVp+sNp5TlrS0Pzmzg=="}],"memo":"tx-0"}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"S7AONBx1jr9NI7Zu3IX+iCKgjqK2nqC2ICjUyI4YHmwpipiExUYodTIu6gUw15JCSYa4t6dSJodqc3r7/7MIqg=="}],"memo":"tx-4"}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"k8xFtNn1VLcop8AJIDdLoYzf+DKHkFe33xKKHyEOnjVtgpx63KE8e6vEvgl0Z7XPVV8i7tEsZ+oOGD+K58cq+g=="}],"memo":"tx-3"}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"NHDjbE9r5VAhv9M8aBL+bLNl5UeU7n6zQJKSU+D+ivt36pfrp8J6MzOF5HfaRQWrMHcQJqx003t9HVg7kACsGA=="}],"memo":"tx-0"}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"Tg0+HzmAquELZm4bTG/rE7oRo7ups/i7ZMNlyZywLQ99KTbfYQzCg8n5cbZ5PmkBv4s62WZ26O/CY7AgQvPL9A=="}],"memo":"tx-1"}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"afBxCOtPjmM2TfWjbd79jSIT2cvf27Ek2T6D3DYXLew/FvYkSBE3xPROR5Sf2gEl7zZEoegDa3gmszrIq9QxxA=="}],"memo":"tx-0"}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"ipcbY4Yc2+xHv518Fm21Jv+xGBI+ONYK3vjVFv0q3Vx4XU5zF4qs7fDBkTLrDEXUl3W15zk3Gacv4O3qBTES7Q=="}],"memo":"tx-0"}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"nhW2nAkD/IlWsNVejb9aUC/yXG9ewxKhFCxFmNjhz8cupLk+pPxRZK1Euw63apGRyM3GO1kYYvOPcBW7yVXjOg=="}],"memo":"tx-0"}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"R4ocAtboyAZ79v1jQ0RZ5LOhv/iujYjyA+cNg4l4HrxeQv2N5O6PxyE4WepcpMPUebfbv+jr0hyQ5s+HjFDs/g=="}],"memo":"tx-1"}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"p45iEBdZhzS4IHmQcTbQr8EHDB1ktmPasiOPjG+JEBIcZ6JkxcKOOHiG81vifVt6plOrQGPcSlYUe4hSAbsapA=="}],"memo":"tx-2"}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"wZYTnQkLZHjL+DoyiYz+YjXTcOdsiC/VpDUPKtfx2vdZfH/Q5d6ocpzzeC6wd3znUh7gZV4FBb+WsWBYG7BozA=="}],"memo":"tx-0"}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"ICUGju7dmpVbtoZOUqPN+Fb2YTgoXD3mK+8HEcQ+peU+0f189sayQCwNb3LJa1JQzuKMp+a1Br7276rtQ4jBjg=="}],"memo":"tx-1"}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"gnodao","Path":"gno.land/r/demo/gnodao_v03","Files":[{"Name":"gnodao.gno","Body":"package gnodao\n\nimport (\n\t\"fmt\"\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype VoteOption uint32\n\nconst (\n\tYES          VoteOption = 0 // Indicates approval of the proposal in its current form.\n\tNO           VoteOption = 1 // Indicates disapproval of the proposal in its current form.\n\tNO_WITH_VETO VoteOption = 2 // Indicates stronger opposition to the proposal than simply voting No. Not available for SuperMajority-typed proposals as a simple No of 1/3 out of total votes would result in the same outcome.\n\tABSTAIN      VoteOption = 3 // Indicates that the voter is impartial to the outcome of the proposal. Although Abstain votes are counted towards the quorum, they're excluded when calculating the ratio of other voting options above.\n)\n\n// GNODAO VOTE\ntype Vote struct {\n\taddress   std.Address // address of the voter\n\ttimestamp uint64      // block timestamp of the vote\n\toption    VoteOption  // vote option\n}\n\ntype DAO struct {\n\tid               uint64\n\turi              string       // DAO homepage link\n\tmetadata         string       // DAO metadata reference link\n\tfunds            uint64       // DAO managing funds\n\tdepositHistory   []string     // deposit history - reserved for later use\n\tspendHistory     []string     // spend history - reserved for later use\n\tpermissions      []string     // permissions managed on DAO - reserved for later use\n\tpermMap          *avl.MutTree // permission map - reserved for later use\n\tvotingPowers     *avl.MutTree\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalStatus uint32\n\nconst (\n\tNIL           ProposalStatus = 0\n\tVOTING_PERIOD ProposalStatus = 1\n\tPASSED        ProposalStatus = 2\n\tREJECTED      ProposalStatus = 3\n\tFAILED        ProposalStatus = 4\n)\n\nfunc (s ProposalStatus) String() string {\n\tswitch s {\n\tcase NIL:\n\t\treturn \"Nil\"\n\tcase VOTING_PERIOD:\n\t\treturn \"VotingPeriod\"\n\tcase PASSED:\n\t\treturn \"Passed\"\n\tcase REJECTED:\n\t\treturn \"Rejected\"\n\tcase FAILED:\n\t\treturn \"Failed\"\n\t}\n\treturn \"\"\n}\n\ntype VotingPower struct {\n\taddress string\n\tpower   uint64\n}\n\ntype Proposal struct {\n\tdaoId        uint64         // dao id of the proposal\n\tid           uint64         // unique id assigned for each proposal\n\ttitle        string         // proposal title\n\tsummary      string         // proposal summary\n\tspendAmount  uint64         // amount of tokens to spend as part the proposal\n\tspender      std.Address    // address to receive spending tokens\n\tvpUpdates    []VotingPower  // updates on voting power - optional\n\tnewMetadata  string         // new metadata for the DAO - optional\n\tnewURI       string         // new URI for the DAO - optional\n\tsubmitTime   uint64         // proposal submission time\n\tvoteEndTime  uint64         // vote end time for the proposal\n\tstatus       ProposalStatus // StatusNil | StatusVotingPeriod | StatusPassed | StatusRejected | StatusFailed\n\tvotes        *avl.MutTree   // votes on the proposal\n\tvotingPowers []uint64       // voting power sum per voting option\n}\n\n// GNODAO STATE\nvar daos []DAO\nvar proposals [][]Proposal\n\nfunc getDAOVotingPower(daoId uint64, address string) uint64 {\n\tif len(daos) \u003c= int(daoId) {\n\t\treturn 0\n\t}\n\tres, ok := daos[daoId].votingPowers.Get(address)\n\tif ok {\n\t\treturn res.(uint64)\n\t}\n\treturn 0\n}\n\nfunc IsDAOMember(daoId uint64, address std.Address) bool {\n\treturn getDAOVotingPower(daoId, address.String()) \u003e 0\n}\n\nfunc getVote(daoId, proposalId uint64, address std.Address) (Vote, bool) {\n\tif int(daoId) \u003e= len(daos) {\n\t\treturn Vote{}, false\n\t}\n\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\treturn Vote{}, false\n\t}\n\n\tvote, ok := proposals[daoId][proposalId].votes.Get(address.String())\n\tif ok {\n\t\treturn vote.(Vote), true\n\t}\n\treturn Vote{}, false\n}\n\nfunc parseVotingPowers(daoMembers, votingPowers string) []VotingPower {\n\tparsedVPs := []VotingPower{}\n\tif len(daoMembers) == 0 {\n\t\treturn parsedVPs\n\t}\n\tmemberAddrs := strings.Split(daoMembers, \",\")\n\tmemberPowers := strings.Split(votingPowers, \",\")\n\tif len(memberAddrs) != len(memberPowers) {\n\t\tpanic(\"mismatch between members and voting powers count\")\n\t}\n\tfor i, memberAddr := range memberAddrs {\n\t\tpower, err := strconv.Atoi(memberPowers[i])\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tparsedVPs = append(parsedVPs, VotingPower{\n\t\t\taddress: memberAddr,\n\t\t\tpower:   uint64(power),\n\t\t})\n\t}\n\treturn parsedVPs\n}\n\n// GNODAO FUNCTIONS\nfunc CreateDAO(\n\turi string,\n\tmetadata string,\n\tdaoMembers string,\n\tvotingPowers string,\n\tvotingPeriod uint64,\n\tvoteQuorum uint64,\n\tthreshold uint64,\n\tvetoThreshold uint64,\n) {\n\tdaoId := uint64(len(daos))\n\tdaos = append(daos, DAO{\n\t\tid:               daoId,\n\t\turi:              uri,\n\t\tmetadata:         metadata,\n\t\tfunds:            0,\n\t\tdepositHistory:   []string{},\n\t\tspendHistory:     []string{},\n\t\tpermissions:      []string{},\n\t\tpermMap:          avl.NewMutTree(),\n\t\tvotingPowers:     avl.NewMutTree(),\n\t\ttotalVotingPower: 0,\n\t\tvotingPeriod:     votingPeriod,\n\t\tvoteQuorum:       voteQuorum,\n\t\tthreshold:        threshold,\n\t\tvetoThreshold:    vetoThreshold,\n\t})\n\n\tparsedVPs := parseVotingPowers(daoMembers, votingPowers)\n\ttotalVotingPower := uint64(0)\n\tfor _, vp := range parsedVPs {\n\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\ttotalVotingPower += vp.power\n\t}\n\tdaos[daoId].totalVotingPower = totalVotingPower\n\tproposals = append(proposals, []Proposal{})\n\t// TODO: emit events\n}\n\nfunc CreateProposal(\n\tdaoId uint64,\n\ttitle, summary string,\n\tspendAmount uint64, spender std.Address,\n\tdaoMembers string,\n\tvpUpdates string,\n\tnewMetadata string,\n\tnewURI string,\n) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a dao member\")\n\t}\n\n\tparsedVPUpdates := parseVotingPowers(daoMembers, vpUpdates)\n\tproposals[daoId] = append(proposals[daoId], Proposal{\n\t\tdaoId:        daoId,\n\t\tid:           uint64(len(proposals[daoId])),\n\t\ttitle:        title,\n\t\tsummary:      summary,\n\t\tspendAmount:  spendAmount,\n\t\tspender:      spender,\n\t\tvpUpdates:    parsedVPUpdates,\n\t\tnewMetadata:  newMetadata,\n\t\tnewURI:       newURI,\n\t\tsubmitTime:   uint64(time.Now().Unix()),\n\t\tvoteEndTime:  uint64(time.Now().Unix()) + daos[daoId].votingPeriod,\n\t\tstatus:       VOTING_PERIOD,\n\t\tvotes:        avl.NewMutTree(),\n\t\tvotingPowers: []uint64{0, 0, 0, 0}, // initiate as zero for 4 vote types\n\t})\n}\n\nfunc VoteProposal(daoId, proposalId uint64, option VoteOption) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// if invalid proposal, panic\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\n\t// if vote end time is reached panic\n\tif time.Now().Unix() \u003e int64(proposals[daoId][proposalId].voteEndTime) {\n\t\tpanic(\"vote end time reached\")\n\t}\n\n\t// Original vote cancel\n\tcallerVotingPower := getDAOVotingPower(daoId, caller.String())\n\tvote, ok := getVote(daoId, proposalId, caller)\n\tif ok {\n\t\tif proposals[daoId][proposalId].votingPowers[int(vote.option)] \u003e callerVotingPower {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] -= callerVotingPower\n\t\t} else {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] = 0\n\t\t}\n\t}\n\n\t// Create a vote\n\tproposals[daoId][proposalId].votes.Set(caller.String(), Vote{\n\t\taddress:   caller,\n\t\ttimestamp: uint64(time.Now().Unix()),\n\t\toption:    option,\n\t})\n\n\t// Voting power by option update for new vote\n\tproposals[daoId][proposalId].votingPowers[int(option)] += callerVotingPower\n}\n\n// TODO: handle voting power change during voting period for other proposal\n// TODO: experiment with gas limit\nfunc TallyAndExecute(daoId, proposalId uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// validation for proposalId\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\tdao := daos[daoId]\n\tproposal := proposals[daoId][proposalId]\n\tvotingPowers := proposal.votingPowers\n\n\tif time.Now().Unix() \u003c int64(proposal.voteEndTime) {\n\t\tpanic(\"proposal is in voting period\")\n\t}\n\n\t// reference logic for tally - https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/keeper/tally.go\n\ttotalVotes := votingPowers[YES] + votingPowers[NO] + votingPowers[NO_WITH_VETO] + votingPowers[ABSTAIN]\n\tif totalVotes \u003c dao.totalVotingPower*dao.voteQuorum/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If no one votes (everyone abstains), proposal rejected\n\tif totalVotes == votingPowers[ABSTAIN] {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/3 of voters veto, proposal rejected\n\tvetoThreshold := dao.vetoThreshold\n\tif votingPowers[NO_WITH_VETO] \u003e totalVotes*vetoThreshold/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote Yes, proposal passes\n\tthreshold := dao.threshold\n\tif votingPowers[YES] \u003e (totalVotes-votingPowers[ABSTAIN])*threshold/100 {\n\t\tproposals[daoId][proposalId].status = PASSED\n\n\t\t// TODO: spend coins when spendAmount is positive \u0026 spender is a valid address\n\t\tif proposal.spendAmount \u003e 0 {\n\t\t\tif daos[daoId].funds \u003e= proposal.spendAmount {\n\t\t\t\tdaos[daoId].funds -= proposal.spendAmount\n\t\t\t} else {\n\t\t\t\tproposals[daoId][proposalId].status = FAILED\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tif proposal.newMetadata != \"\" {\n\t\t\tdaos[daoId].metadata = proposal.newMetadata\n\t\t}\n\n\t\tif proposal.newURI != \"\" {\n\t\t\tdaos[daoId].uri = proposal.newURI\n\t\t}\n\n\t\tfor _, vp := range proposal.vpUpdates {\n\t\t\tdaos[daoId].totalVotingPower -= getDAOVotingPower(daoId, vp.address)\n\t\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\t\tdaos[daoId].totalVotingPower += vp.power\n\t\t}\n\n\t\t// TODO: contract does not own account that can hold coins - this is one of limitations\n\t\t// TODO: Adena Wallet from OnBloc - investigate on how they manage coins (swap - custody?)\n\t\t// Manual sending for funds (Address \u003c-\u003e Address) - Miloš Živković\n\t\t// https://github.com/gnolang/gno/blob/e392ab51bc05a5efbceaa8dbe395bac2e01ad808/tm2/pkg/crypto/keys/client/send.go#L109-L119\n\t\treturn\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote No, proposal rejected\n\tproposals[daoId][proposalId].status = REJECTED\n}\n\nfunc DepositDAO(daoId uint64, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// TODO: send coins from caller to DAO\n\t// TODO: verify received amount\n\t// daos[daoId].depositHistory = append(daos[daoId].depositHistory, Deposit{\n\t// \taddress: caller,\n\t// \tamount:  amount,\n\t// })\n}\n\nfunc GetDAO(daoId uint64) DAO {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\treturn daos[daoId]\n}\n\nfunc GetDAOs(startAfter, limit uint64) []DAO {\n\tmax := uint64(len(daos))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn daos[startAfter:max]\n}\n\nfunc GetProposal(daoId, proposalId uint64) Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\treturn proposals[daoId][proposalId]\n}\n\nfunc GetProposals(daoId, startAfter, limit uint64) []Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tmax := uint64(len(proposals[daoId]))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn proposals[daoId][startAfter:max]\n}\n\nfunc RenderVote(daoId, proposalId uint64, address std.Address) string {\n\tvote, found := getVote(daoId, proposalId, address)\n\tif !found {\n\t\treturn \"\"\n\t}\n\n\treturn fmt.Sprintf(`{\n\t\"address\": \"%s\",\n\t\"timestamp\": %d,\n\t\"option\": \"%s\"\n}`, vote.address.String(), vote.timestamp, vote.option.String())\n}\n\ntype DAOEncode struct {\n\tid               uint64\n\turi              string // DAO homepage link\n\tmetadata         string // DAO metadata reference link\n\tfunds            uint64 // DAO managing funds\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalEncode struct {\n\tdaoId        uint64\n\tid           uint64\n\ttitle        string\n\tsummary      string\n\tspendAmount  uint64\n\tspender      std.Address\n\tvpUpdates    []VotingPower\n\tnewMetadata  string\n\tnewURI       string\n\tsubmitTime   uint64\n\tvoteEndTime  uint64\n\tstatus       ProposalStatus\n\tvotingPowers []uint64\n}\n\nfunc GetDAOEncodeObject(dao DAO) DAOEncode {\n\treturn DAOEncode{\n\t\tid:               dao.id,\n\t\turi:              dao.uri,\n\t\tmetadata:         dao.metadata,\n\t\tfunds:            dao.funds,\n\t\ttotalVotingPower: dao.totalVotingPower,\n\t\tvotingPeriod:     dao.votingPeriod,\n\t\tvoteQuorum:       dao.voteQuorum,\n\t\tthreshold:        dao.threshold,\n\t\tvetoThreshold:    dao.vetoThreshold,\n\t}\n}\n\nfunc GetProposalEncodeObject(p Proposal) DAOEncode {\n\treturn DAOEncode{\n\t\tdaoId:        p.daoId,\n\t\tid:           p.id,\n\t\ttitle:        p.title,\n\t\tsummary:      p.summary,\n\t\tspendAmount:  p.spendAmount,\n\t\tspender:      p.spender,\n\t\tvpUpdates:    p.vpUpdates,\n\t\tnewMetadata:  p.newMetadata,\n\t\tnewURI:       p.newURI,\n\t\tsubmitTime:   p.submitTime,\n\t\tvoteEndTime:  p.voteEndTime,\n\t\tstatus:       p.status,\n\t\tvotingPowers: p.votingPowers,\n\t}\n}\n\nfunc RenderDAO(daoId uint64) string {\n\tdaoEncode := GetDAOEncodeObject(GetDAO(daoId))\n\n\treturn fmt.Sprintf(`{\n\t\"id\": %d,\n\t\"uri\": \"%s\",\n\t\"metadata\": \"%s\",\n\t\"funds\" %d,\n\t\"totalVotingPower\" %d,\n\t\"votingPeriod\" %d,\n\t\"voteQuorum\" %d,\n\t\"threshold\" %d,\n\t\"vetoThreshold\" %d\n}`, daoEncode.id, daoEncode.uri, daoEncode.metadata, daoEncode.funds, daoEncode.totalVotingPower, daoEncode.votingPeriod, daoEncode.voteQuorum, daoEncode.threshold, daoEncode.vetoThreshold)\n}\n\nfunc RenderDAOs(startAfter, limit uint64) string {\n\tdaos := GetDAOs(startAfter, limit)\n\tdaoEncodes := []DAOEncode{}\n\trendered := \"[\"\n\tfor index, dao := range daos {\n\t\trendered += RenderDAO(dao.id)\n\t\tif index != len(daos)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n\nfunc RenderProposal(daoId, proposalId uint64) string {\n\tp := GetProposalEncodeObject(GetProposal(daoId, proposalId))\n\tvpUpdatesRendered := \"[\"\n\tfor index, vpUpdate := range p.vpUpdates {\n\t\tvpUpdatesRendered += fmt.Sprintf(`{\n\t\"address\" \"%s\",\n\t\"power\": %d\n}`, vpUpdate.address.String(), vpUpdate.power)\n\t\tif index != len(p.vpUpdates)-1 {\n\t\t\tvpUpdatesRendered += \",\\n\"\n\t\t}\n\t}\n\tvpUpdatesRendered += \"]\"\n\n\tvotingPowersBySumRendered = fmt.Sprintf(`[\n\t%d, %d, %d, %d\n]`, p.votingPowers[0], p.votingPowers[1], p.votingPowers[2], p.votingPowers[3])\n\n\treturn fmt.Sprintf(`{\n\t\"daoId\": %d,\n\t\"id\": %d,\n\t\"title\": \"%s\",\n\t\"summary\": \"%s\",\n\t\"spendAmount\": %d,\n\t\"spender\": \"%s\",\n\t\"newMetadata\": \"%s\",\n\t\"newURI\": \"%s\",\n\t\"submitTime\": %d,\n\t\"voteEndTime\": %d,\n\t\"status\": \"%s\",\n\t\"vpUpdates\": %s,\n\t\"votingPowers\": %s\n}`, p.daoId, p.id, p.title, p.summary, p.spendAmount, p.spender, p.newMetadata, p.newURI, p.submitTime, p.voteEndTime, p.status.String(), vpUpdatesRendered, votingPowersBySumRendered)\n}\n\nfunc RenderProposals(daoId, startAfter, limit uint64) string {\n\tproposals := GetProposals(daoId, startAfter, limit)\n\trendered := \"[\"\n\tfor index, proposal := range proposals {\n\t\trendered += RenderProposal(proposal.daoId, proposal.id)\n\t\tif index != len(proposals)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n\nfunc Render(path string) string {\n\treturn \"\"\n}\n"},{"Name":"gnodao_test.gno","Body":"package gnodao\n\nimport (\n\t\"fmt\"\n\t\"std\"\n\t\"testing\"\n\t\"time\"\n)\n\nvar caller std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnabcde\"\nvar caller1 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\"\nvar caller2 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\"\nvar daoMembers = []std.Address{\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnccccc\",\n}\nvar votingPowers = []VotingPower{\n\t{\n\t\taddress: daoMembers[0].String(),\n\t\tpower:   1,\n\t},\n\t{\n\t\taddress: daoMembers[1].String(),\n\t\tpower:   2,\n\t},\n\t{\n\t\taddress: daoMembers[2].String(),\n\t\tpower:   3,\n\t},\n}\n\nfunc assertPanic(t *testing.T, f func()) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t}\n\t}()\n\tf()\n}\n\nfunc TestIsDAOMember(t *testing.T) {\n\tdaos = []DAO{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\n\t// TODO: what package is ideal to use for checks?\n\tif IsDAOMember(0, caller) != false {\n\t\tt.Errorf(\"Should not be false\")\n\t}\n\tif IsDAOMember(0, caller1) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n\tif IsDAOMember(0, caller2) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n}\n\nfunc TestCreateDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\tif len(daos) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tif len(proposals) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tdao := daos[0]\n\tif dao.id != 0 {\n\t\tt.Errorf(\"first DAO id should be 0\")\n\t}\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"dao uri not set properly\")\n\t}\n\tif dao.metadata != \"https://metadata.gnodao1.org\" {\n\t\tt.Errorf(\"dao metadata not set properly\")\n\t}\n\tif dao.funds != 0 {\n\t\tt.Errorf(\"dao funds not set properly\")\n\t}\n\tif len(dao.depositHistory) != 0 {\n\t\tt.Errorf(\"dao deposit history not set properly\")\n\t}\n\tif len(dao.spendHistory) != 0 {\n\t\tt.Errorf(\"dao spend history not set properly\")\n\t}\n\tif len(dao.permissions) != 0 {\n\t\tt.Errorf(\"dao permissions not set properly\")\n\t}\n\tif dao.permMap == nil {\n\t\tt.Errorf(\"dao permission map not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 0 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller1.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller2.String()) != 2 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif dao.totalVotingPower != 6 {\n\t\tt.Errorf(\"totalVotingPower not set properly\")\n\t}\n\tif dao.votingPeriod != 86400*2 {\n\t\tt.Errorf(\"votingPeriod not set properly\")\n\t}\n\tif dao.voteQuorum != 30 {\n\t\tt.Errorf(\"voteQuorum not set properly\")\n\t}\n\tif dao.threshold != 10 {\n\t\tt.Errorf(\"threshold not set properly\")\n\t}\n\tif dao.vetoThreshold != 10 {\n\t\tt.Errorf(\"vetoThreshold not set properly\")\n\t}\n}\n\nfunc TestCreateProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\t})\n\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tproposal := proposals[0][0]\n\tif proposal.daoId != 0 {\n\t\tt.Errorf(\"proposal daoId should be 0\")\n\t}\n\tif proposal.id != 0 {\n\t\tt.Errorf(\"proposal id should be 0\")\n\t}\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"proposal title not set properly\")\n\t}\n\tif proposal.summary != \"Proposal to bootstrap DAO fund.\" {\n\t\tt.Errorf(\"proposal summary not set properly\")\n\t}\n\tif proposal.spendAmount != 0 {\n\t\tt.Errorf(\"proposal spendAmount not set properly\")\n\t}\n\tif proposal.spender != caller {\n\t\tt.Errorf(\"proposal spender not set properly\")\n\t}\n\tif len(proposal.vpUpdates) != 0 {\n\t\tt.Errorf(\"proposal vpUpdates not set properly\")\n\t}\n\tif proposal.newMetadata != \"\" {\n\t\tt.Errorf(\"proposal newMetadata not set properly\")\n\t}\n\tif proposal.newURI != \"\" {\n\t\tt.Errorf(\"proposal newURI not set properly\")\n\t}\n\tif proposal.submitTime != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"proposal submitTime not set properly\")\n\t}\n\tif proposal.voteEndTime != uint64(time.Now().Unix())+daos[0].votingPeriod {\n\t\tt.Errorf(\"proposal voteEndTime not set properly\")\n\t}\n\tif proposal.status != VOTING_PERIOD {\n\t\tt.Errorf(\"proposal status not set properly\")\n\t}\n\tif proposal.votes == nil {\n\t\tt.Errorf(\"proposal votes not set properly\")\n\t}\n\tif len(proposal.votingPowers) != 4 {\n\t\tt.Errorf(\"proposal votingPowers not set properly\")\n\t}\n}\n\nfunc TestVoteProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(1, 0, YES)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(0, 1, YES)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tVoteProposal(0, 0, YES)\n\t})\n\n\t// vote and check result is set properly\n\tstd.TestSetOrigCaller(caller1)\n\tVoteProposal(0, 0, YES)\n\tvote, found := getVote(0, 0, caller1)\n\tif !found {\n\t\tt.Errorf(\"proposal vote not set\")\n\t}\n\tif vote.address != caller1 {\n\t\tt.Errorf(\"vote address not set properly\")\n\t}\n\tif vote.timestamp != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"vote timestamp not set properly\")\n\t}\n\tif vote.option != YES {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 1 {\n\t\tt.Errorf(\"votePowers by vote option not set properly\")\n\t}\n\n\t// vote again with different option and check result\n\tVoteProposal(0, 0, NO)\n\tvote, found = getVote(0, 0, caller1)\n\tif vote.option != NO {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 0 {\n\t\tt.Errorf(\"votePowers for YES not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(NO)] != 1 {\n\t\tt.Errorf(\"votePowers for NO not set properly\")\n\t}\n\n\t// test vote end time already reached\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\t\tVoteProposal(0, 0, YES)\n\t})\n}\n\nfunc TestTallyAndExecute(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{\n\t\t{\n\t\t\taddress: caller.String(),\n\t\t\tpower:   1,\n\t\t},\n\t}, \"newMetadata.com\", \"newURI.com\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(1, 0)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 1)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tTallyAndExecute(0, 0)\n\t})\n\tassertPanic(t, func() { // vote end time not pass\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 0)\n\t})\n\n\t// vote end time to be reached\n\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\n\t// quorum not reached\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for vote quorum\")\n\t}\n\n\t// everyone abstains\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for all abstains\")\n\t}\n\n\t// more than 1/3 vote with NO_WITH_VETO\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower / 2\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = daos[0].totalVotingPower / 2\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for NO_WITH_VETO\")\n\t}\n\n\t// all YES vote\n\tproposals[0][0].votingPowers[ABSTAIN] = 0\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = 0\n\tproposals[0][0].votingPowers[YES] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != PASSED {\n\t\tt.Errorf(\"proposal should be PASSED\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif daos[0].metadata != \"newMetadata.com\" {\n\t\tt.Errorf(\"metadata not set properly\")\n\t}\n\tif daos[0].uri != \"newURI.com\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestDepositDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when not a dao member\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tDepositDAO(0, 100)\n\t})\n\n\t// not panics\n\tstd.TestSetOrigCaller(caller1)\n\tDepositDAO(0, 100)\n}\n\nfunc TestGetDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tGetDAO(100)\n\t})\n\n\t// success when valid dao id\n\tdao := GetDAO(0)\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestGetDAOs(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tgotDaos := GetDAOs(0, 10)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tCreateDAO(\"https://gnodao2.org\", \"https://metadata.gnodao2.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tgotDaos = GetDAOs(0, 0)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 10)\n\tif len(gotDaos) != 2 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 1)\n\tif len(gotDaos) != 1 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n}\n\nfunc TestGetProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tGetProposal(1, 0)\n\t})\n\n\t// panic when invalid proposal id\n\tassertPanic(t, func() {\n\t\tGetProposal(0, 1)\n\t})\n\n\t// success when valid dao id and proposal id\n\tproposal := GetProposal(0, 0)\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"title not set properly\")\n\t}\n}\n\nfunc TestGetProposals(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tassertPanic(t, func() { // invalid dao id\n\t\tGetProposals(0, 0, 10)\n\t})\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"proposal #1\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\tCreateProposal(0, \"proposal #2\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\tgotProposals := GetProposals(0, 0, 0)\n\tif len(gotProposals) != 0 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 10)\n\tif len(gotProposals) != 2 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 1)\n\tif len(gotProposals) != 1 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n}\n\nfunc TestRender(t *testing.T) {\n\tif Render(\"\") != \"\" {\n\t\tt.Errorf(\"Render function should empty\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"YbJIXWkeSJt+qQWmjM/qPevDh434ejHALkHeZ7h1N8tlEu1g8ZFWw7dH7e5WMyFE2M04WAMwBLLQVeVlQVd11g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"gnodao","Path":"gno.land/r/demo/gnodao_v03","Files":[{"Name":"gnodao.gno","Body":"package gnodao\n\nimport (\n\t\"gno.land/p/demo/avl\"\n\tfmt \"gno.land/p/demo/ufmt\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype VoteOption uint32\n\nconst (\n\tYES          VoteOption = 0 // Indicates approval of the proposal in its current form.\n\tNO           VoteOption = 1 // Indicates disapproval of the proposal in its current form.\n\tNO_WITH_VETO VoteOption = 2 // Indicates stronger opposition to the proposal than simply voting No. Not available for SuperMajority-typed proposals as a simple No of 1/3 out of total votes would result in the same outcome.\n\tABSTAIN      VoteOption = 3 // Indicates that the voter is impartial to the outcome of the proposal. Although Abstain votes are counted towards the quorum, they're excluded when calculating the ratio of other voting options above.\n)\n\n// GNODAO VOTE\ntype Vote struct {\n\taddress   std.Address // address of the voter\n\ttimestamp uint64      // block timestamp of the vote\n\toption    VoteOption  // vote option\n}\n\ntype DAO struct {\n\tid               uint64\n\turi              string       // DAO homepage link\n\tmetadata         string       // DAO metadata reference link\n\tfunds            uint64       // DAO managing funds\n\tdepositHistory   []string     // deposit history - reserved for later use\n\tspendHistory     []string     // spend history - reserved for later use\n\tpermissions      []string     // permissions managed on DAO - reserved for later use\n\tpermMap          *avl.MutTree // permission map - reserved for later use\n\tvotingPowers     *avl.MutTree\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalStatus uint32\n\nconst (\n\tNIL           ProposalStatus = 0\n\tVOTING_PERIOD ProposalStatus = 1\n\tPASSED        ProposalStatus = 2\n\tREJECTED      ProposalStatus = 3\n\tFAILED        ProposalStatus = 4\n)\n\nfunc (s ProposalStatus) String() string {\n\tswitch s {\n\tcase NIL:\n\t\treturn \"Nil\"\n\tcase VOTING_PERIOD:\n\t\treturn \"VotingPeriod\"\n\tcase PASSED:\n\t\treturn \"Passed\"\n\tcase REJECTED:\n\t\treturn \"Rejected\"\n\tcase FAILED:\n\t\treturn \"Failed\"\n\t}\n\treturn \"\"\n}\n\ntype VotingPower struct {\n\taddress string\n\tpower   uint64\n}\n\ntype Proposal struct {\n\tdaoId        uint64         // dao id of the proposal\n\tid           uint64         // unique id assigned for each proposal\n\ttitle        string         // proposal title\n\tsummary      string         // proposal summary\n\tspendAmount  uint64         // amount of tokens to spend as part the proposal\n\tspender      std.Address    // address to receive spending tokens\n\tvpUpdates    []VotingPower  // updates on voting power - optional\n\tnewMetadata  string         // new metadata for the DAO - optional\n\tnewURI       string         // new URI for the DAO - optional\n\tsubmitTime   uint64         // proposal submission time\n\tvoteEndTime  uint64         // vote end time for the proposal\n\tstatus       ProposalStatus // StatusNil | StatusVotingPeriod | StatusPassed | StatusRejected | StatusFailed\n\tvotes        *avl.MutTree   // votes on the proposal\n\tvotingPowers []uint64       // voting power sum per voting option\n}\n\n// GNODAO STATE\nvar daos []DAO\nvar proposals [][]Proposal\n\nfunc getDAOVotingPower(daoId uint64, address string) uint64 {\n\tif len(daos) \u003c= int(daoId) {\n\t\treturn 0\n\t}\n\tres, ok := daos[daoId].votingPowers.Get(address)\n\tif ok {\n\t\treturn res.(uint64)\n\t}\n\treturn 0\n}\n\nfunc IsDAOMember(daoId uint64, address std.Address) bool {\n\treturn getDAOVotingPower(daoId, address.String()) \u003e 0\n}\n\nfunc getVote(daoId, proposalId uint64, address std.Address) (Vote, bool) {\n\tif int(daoId) \u003e= len(daos) {\n\t\treturn Vote{}, false\n\t}\n\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\treturn Vote{}, false\n\t}\n\n\tvote, ok := proposals[daoId][proposalId].votes.Get(address.String())\n\tif ok {\n\t\treturn vote.(Vote), true\n\t}\n\treturn Vote{}, false\n}\n\nfunc parseVotingPowers(daoMembers, votingPowers string) []VotingPower {\n\tparsedVPs := []VotingPower{}\n\tif len(daoMembers) == 0 {\n\t\treturn parsedVPs\n\t}\n\tmemberAddrs := strings.Split(daoMembers, \",\")\n\tmemberPowers := strings.Split(votingPowers, \",\")\n\tif len(memberAddrs) != len(memberPowers) {\n\t\tpanic(\"mismatch between members and voting powers count\")\n\t}\n\tfor i, memberAddr := range memberAddrs {\n\t\tpower, err := strconv.Atoi(memberPowers[i])\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tparsedVPs = append(parsedVPs, VotingPower{\n\t\t\taddress: memberAddr,\n\t\t\tpower:   uint64(power),\n\t\t})\n\t}\n\treturn parsedVPs\n}\n\n// GNODAO FUNCTIONS\nfunc CreateDAO(\n\turi string,\n\tmetadata string,\n\tdaoMembers string,\n\tvotingPowers string,\n\tvotingPeriod uint64,\n\tvoteQuorum uint64,\n\tthreshold uint64,\n\tvetoThreshold uint64,\n) {\n\tdaoId := uint64(len(daos))\n\tdaos = append(daos, DAO{\n\t\tid:               daoId,\n\t\turi:              uri,\n\t\tmetadata:         metadata,\n\t\tfunds:            0,\n\t\tdepositHistory:   []string{},\n\t\tspendHistory:     []string{},\n\t\tpermissions:      []string{},\n\t\tpermMap:          avl.NewMutTree(),\n\t\tvotingPowers:     avl.NewMutTree(),\n\t\ttotalVotingPower: 0,\n\t\tvotingPeriod:     votingPeriod,\n\t\tvoteQuorum:       voteQuorum,\n\t\tthreshold:        threshold,\n\t\tvetoThreshold:    vetoThreshold,\n\t})\n\n\tparsedVPs := parseVotingPowers(daoMembers, votingPowers)\n\ttotalVotingPower := uint64(0)\n\tfor _, vp := range parsedVPs {\n\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\ttotalVotingPower += vp.power\n\t}\n\tdaos[daoId].totalVotingPower = totalVotingPower\n\tproposals = append(proposals, []Proposal{})\n\t// TODO: emit events\n}\n\nfunc CreateProposal(\n\tdaoId uint64,\n\ttitle, summary string,\n\tspendAmount uint64, spender std.Address,\n\tdaoMembers string,\n\tvpUpdates string,\n\tnewMetadata string,\n\tnewURI string,\n) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a dao member\")\n\t}\n\n\tparsedVPUpdates := parseVotingPowers(daoMembers, vpUpdates)\n\tproposals[daoId] = append(proposals[daoId], Proposal{\n\t\tdaoId:        daoId,\n\t\tid:           uint64(len(proposals[daoId])),\n\t\ttitle:        title,\n\t\tsummary:      summary,\n\t\tspendAmount:  spendAmount,\n\t\tspender:      spender,\n\t\tvpUpdates:    parsedVPUpdates,\n\t\tnewMetadata:  newMetadata,\n\t\tnewURI:       newURI,\n\t\tsubmitTime:   uint64(time.Now().Unix()),\n\t\tvoteEndTime:  uint64(time.Now().Unix()) + daos[daoId].votingPeriod,\n\t\tstatus:       VOTING_PERIOD,\n\t\tvotes:        avl.NewMutTree(),\n\t\tvotingPowers: []uint64{0, 0, 0, 0}, // initiate as zero for 4 vote types\n\t})\n}\n\nfunc VoteProposal(daoId, proposalId uint64, option VoteOption) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// if invalid proposal, panic\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\n\t// if vote end time is reached panic\n\tif time.Now().Unix() \u003e int64(proposals[daoId][proposalId].voteEndTime) {\n\t\tpanic(\"vote end time reached\")\n\t}\n\n\t// Original vote cancel\n\tcallerVotingPower := getDAOVotingPower(daoId, caller.String())\n\tvote, ok := getVote(daoId, proposalId, caller)\n\tif ok {\n\t\tif proposals[daoId][proposalId].votingPowers[int(vote.option)] \u003e callerVotingPower {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] -= callerVotingPower\n\t\t} else {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] = 0\n\t\t}\n\t}\n\n\t// Create a vote\n\tproposals[daoId][proposalId].votes.Set(caller.String(), Vote{\n\t\taddress:   caller,\n\t\ttimestamp: uint64(time.Now().Unix()),\n\t\toption:    option,\n\t})\n\n\t// Voting power by option update for new vote\n\tproposals[daoId][proposalId].votingPowers[int(option)] += callerVotingPower\n}\n\n// TODO: handle voting power change during voting period for other proposal\n// TODO: experiment with gas limit\nfunc TallyAndExecute(daoId, proposalId uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// validation for proposalId\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\tdao := daos[daoId]\n\tproposal := proposals[daoId][proposalId]\n\tvotingPowers := proposal.votingPowers\n\n\tif time.Now().Unix() \u003c int64(proposal.voteEndTime) {\n\t\tpanic(\"proposal is in voting period\")\n\t}\n\n\t// reference logic for tally - https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/keeper/tally.go\n\ttotalVotes := votingPowers[YES] + votingPowers[NO] + votingPowers[NO_WITH_VETO] + votingPowers[ABSTAIN]\n\tif totalVotes \u003c dao.totalVotingPower*dao.voteQuorum/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If no one votes (everyone abstains), proposal rejected\n\tif totalVotes == votingPowers[ABSTAIN] {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/3 of voters veto, proposal rejected\n\tvetoThreshold := dao.vetoThreshold\n\tif votingPowers[NO_WITH_VETO] \u003e totalVotes*vetoThreshold/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote Yes, proposal passes\n\tthreshold := dao.threshold\n\tif votingPowers[YES] \u003e (totalVotes-votingPowers[ABSTAIN])*threshold/100 {\n\t\tproposals[daoId][proposalId].status = PASSED\n\n\t\t// TODO: spend coins when spendAmount is positive \u0026 spender is a valid address\n\t\tif proposal.spendAmount \u003e 0 {\n\t\t\tif daos[daoId].funds \u003e= proposal.spendAmount {\n\t\t\t\tdaos[daoId].funds -= proposal.spendAmount\n\t\t\t} else {\n\t\t\t\tproposals[daoId][proposalId].status = FAILED\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tif proposal.newMetadata != \"\" {\n\t\t\tdaos[daoId].metadata = proposal.newMetadata\n\t\t}\n\n\t\tif proposal.newURI != \"\" {\n\t\t\tdaos[daoId].uri = proposal.newURI\n\t\t}\n\n\t\tfor _, vp := range proposal.vpUpdates {\n\t\t\tdaos[daoId].totalVotingPower -= getDAOVotingPower(daoId, vp.address)\n\t\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\t\tdaos[daoId].totalVotingPower += vp.power\n\t\t}\n\n\t\t// TODO: contract does not own account that can hold coins - this is one of limitations\n\t\t// TODO: Adena Wallet from OnBloc - investigate on how they manage coins (swap - custody?)\n\t\t// Manual sending for funds (Address \u003c-\u003e Address) - Miloš Živković\n\t\t// https://github.com/gnolang/gno/blob/e392ab51bc05a5efbceaa8dbe395bac2e01ad808/tm2/pkg/crypto/keys/client/send.go#L109-L119\n\t\treturn\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote No, proposal rejected\n\tproposals[daoId][proposalId].status = REJECTED\n}\n\nfunc DepositDAO(daoId uint64, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// TODO: send coins from caller to DAO\n\t// TODO: verify received amount\n\t// daos[daoId].depositHistory = append(daos[daoId].depositHistory, Deposit{\n\t// \taddress: caller,\n\t// \tamount:  amount,\n\t// })\n}\n\nfunc GetDAO(daoId uint64) DAO {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\treturn daos[daoId]\n}\n\nfunc GetDAOs(startAfter, limit uint64) []DAO {\n\tmax := uint64(len(daos))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn daos[startAfter:max]\n}\n\nfunc GetProposal(daoId, proposalId uint64) Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\treturn proposals[daoId][proposalId]\n}\n\nfunc GetProposals(daoId, startAfter, limit uint64) []Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tmax := uint64(len(proposals[daoId]))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn proposals[daoId][startAfter:max]\n}\n\nfunc RenderVote(daoId, proposalId uint64, address std.Address) string {\n\tvote, found := getVote(daoId, proposalId, address)\n\tif !found {\n\t\treturn \"\"\n\t}\n\n\treturn fmt.Sprintf(`{\n\t\"address\": \"%s\",\n\t\"timestamp\": %d,\n\t\"option\": \"%s\"\n}`, vote.address.String(), vote.timestamp, vote.option.String())\n}\n\ntype DAOEncode struct {\n\tid               uint64\n\turi              string // DAO homepage link\n\tmetadata         string // DAO metadata reference link\n\tfunds            uint64 // DAO managing funds\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalEncode struct {\n\tdaoId        uint64\n\tid           uint64\n\ttitle        string\n\tsummary      string\n\tspendAmount  uint64\n\tspender      std.Address\n\tvpUpdates    []VotingPower\n\tnewMetadata  string\n\tnewURI       string\n\tsubmitTime   uint64\n\tvoteEndTime  uint64\n\tstatus       ProposalStatus\n\tvotingPowers []uint64\n}\n\nfunc GetDAOEncodeObject(dao DAO) DAOEncode {\n\treturn DAOEncode{\n\t\tid:               dao.id,\n\t\turi:              dao.uri,\n\t\tmetadata:         dao.metadata,\n\t\tfunds:            dao.funds,\n\t\ttotalVotingPower: dao.totalVotingPower,\n\t\tvotingPeriod:     dao.votingPeriod,\n\t\tvoteQuorum:       dao.voteQuorum,\n\t\tthreshold:        dao.threshold,\n\t\tvetoThreshold:    dao.vetoThreshold,\n\t}\n}\n\nfunc GetProposalEncodeObject(p Proposal) DAOEncode {\n\treturn DAOEncode{\n\t\tdaoId:        p.daoId,\n\t\tid:           p.id,\n\t\ttitle:        p.title,\n\t\tsummary:      p.summary,\n\t\tspendAmount:  p.spendAmount,\n\t\tspender:      p.spender,\n\t\tvpUpdates:    p.vpUpdates,\n\t\tnewMetadata:  p.newMetadata,\n\t\tnewURI:       p.newURI,\n\t\tsubmitTime:   p.submitTime,\n\t\tvoteEndTime:  p.voteEndTime,\n\t\tstatus:       p.status,\n\t\tvotingPowers: p.votingPowers,\n\t}\n}\n\nfunc RenderDAO(daoId uint64) string {\n\tdaoEncode := GetDAOEncodeObject(GetDAO(daoId))\n\n\treturn fmt.Sprintf(`{\n\t\"id\": %d,\n\t\"uri\": \"%s\",\n\t\"metadata\": \"%s\",\n\t\"funds\" %d,\n\t\"totalVotingPower\" %d,\n\t\"votingPeriod\" %d,\n\t\"voteQuorum\" %d,\n\t\"threshold\" %d,\n\t\"vetoThreshold\" %d\n}`, daoEncode.id, daoEncode.uri, daoEncode.metadata, daoEncode.funds, daoEncode.totalVotingPower, daoEncode.votingPeriod, daoEncode.voteQuorum, daoEncode.threshold, daoEncode.vetoThreshold)\n}\n\nfunc RenderDAOs(startAfter, limit uint64) string {\n\tdaos := GetDAOs(startAfter, limit)\n\tdaoEncodes := []DAOEncode{}\n\trendered := \"[\"\n\tfor index, dao := range daos {\n\t\trendered += RenderDAO(dao.id)\n\t\tif index != len(daos)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n\nfunc RenderProposal(daoId, proposalId uint64) string {\n\tp := GetProposalEncodeObject(GetProposal(daoId, proposalId))\n\tvpUpdatesRendered := \"[\"\n\tfor index, vpUpdate := range p.vpUpdates {\n\t\tvpUpdatesRendered += fmt.Sprintf(`{\n\t\"address\" \"%s\",\n\t\"power\": %d\n}`, vpUpdate.address.String(), vpUpdate.power)\n\t\tif index != len(p.vpUpdates)-1 {\n\t\t\tvpUpdatesRendered += \",\\n\"\n\t\t}\n\t}\n\tvpUpdatesRendered += \"]\"\n\n\tvotingPowersBySumRendered = fmt.Sprintf(`[\n\t%d, %d, %d, %d\n]`, p.votingPowers[0], p.votingPowers[1], p.votingPowers[2], p.votingPowers[3])\n\n\treturn fmt.Sprintf(`{\n\t\"daoId\": %d,\n\t\"id\": %d,\n\t\"title\": \"%s\",\n\t\"summary\": \"%s\",\n\t\"spendAmount\": %d,\n\t\"spender\": \"%s\",\n\t\"newMetadata\": \"%s\",\n\t\"newURI\": \"%s\",\n\t\"submitTime\": %d,\n\t\"voteEndTime\": %d,\n\t\"status\": \"%s\",\n\t\"vpUpdates\": %s,\n\t\"votingPowers\": %s\n}`, p.daoId, p.id, p.title, p.summary, p.spendAmount, p.spender, p.newMetadata, p.newURI, p.submitTime, p.voteEndTime, p.status.String(), vpUpdatesRendered, votingPowersBySumRendered)\n}\n\nfunc RenderProposals(daoId, startAfter, limit uint64) string {\n\tproposals := GetProposals(daoId, startAfter, limit)\n\trendered := \"[\"\n\tfor index, proposal := range proposals {\n\t\trendered += RenderProposal(proposal.daoId, proposal.id)\n\t\tif index != len(proposals)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n\nfunc Render(path string) string {\n\treturn \"\"\n}\n"},{"Name":"gnodao_test.gno","Body":"package gnodao\n\nimport (\n\t\"fmt\"\n\t\"std\"\n\t\"testing\"\n\t\"time\"\n)\n\nvar caller std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnabcde\"\nvar caller1 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\"\nvar caller2 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\"\nvar daoMembers = []std.Address{\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnccccc\",\n}\nvar votingPowers = []VotingPower{\n\t{\n\t\taddress: daoMembers[0].String(),\n\t\tpower:   1,\n\t},\n\t{\n\t\taddress: daoMembers[1].String(),\n\t\tpower:   2,\n\t},\n\t{\n\t\taddress: daoMembers[2].String(),\n\t\tpower:   3,\n\t},\n}\n\nfunc assertPanic(t *testing.T, f func()) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t}\n\t}()\n\tf()\n}\n\nfunc TestIsDAOMember(t *testing.T) {\n\tdaos = []DAO{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\n\t// TODO: what package is ideal to use for checks?\n\tif IsDAOMember(0, caller) != false {\n\t\tt.Errorf(\"Should not be false\")\n\t}\n\tif IsDAOMember(0, caller1) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n\tif IsDAOMember(0, caller2) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n}\n\nfunc TestCreateDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\tif len(daos) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tif len(proposals) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tdao := daos[0]\n\tif dao.id != 0 {\n\t\tt.Errorf(\"first DAO id should be 0\")\n\t}\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"dao uri not set properly\")\n\t}\n\tif dao.metadata != \"https://metadata.gnodao1.org\" {\n\t\tt.Errorf(\"dao metadata not set properly\")\n\t}\n\tif dao.funds != 0 {\n\t\tt.Errorf(\"dao funds not set properly\")\n\t}\n\tif len(dao.depositHistory) != 0 {\n\t\tt.Errorf(\"dao deposit history not set properly\")\n\t}\n\tif len(dao.spendHistory) != 0 {\n\t\tt.Errorf(\"dao spend history not set properly\")\n\t}\n\tif len(dao.permissions) != 0 {\n\t\tt.Errorf(\"dao permissions not set properly\")\n\t}\n\tif dao.permMap == nil {\n\t\tt.Errorf(\"dao permission map not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 0 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller1.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller2.String()) != 2 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif dao.totalVotingPower != 6 {\n\t\tt.Errorf(\"totalVotingPower not set properly\")\n\t}\n\tif dao.votingPeriod != 86400*2 {\n\t\tt.Errorf(\"votingPeriod not set properly\")\n\t}\n\tif dao.voteQuorum != 30 {\n\t\tt.Errorf(\"voteQuorum not set properly\")\n\t}\n\tif dao.threshold != 10 {\n\t\tt.Errorf(\"threshold not set properly\")\n\t}\n\tif dao.vetoThreshold != 10 {\n\t\tt.Errorf(\"vetoThreshold not set properly\")\n\t}\n}\n\nfunc TestCreateProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\t})\n\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tproposal := proposals[0][0]\n\tif proposal.daoId != 0 {\n\t\tt.Errorf(\"proposal daoId should be 0\")\n\t}\n\tif proposal.id != 0 {\n\t\tt.Errorf(\"proposal id should be 0\")\n\t}\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"proposal title not set properly\")\n\t}\n\tif proposal.summary != \"Proposal to bootstrap DAO fund.\" {\n\t\tt.Errorf(\"proposal summary not set properly\")\n\t}\n\tif proposal.spendAmount != 0 {\n\t\tt.Errorf(\"proposal spendAmount not set properly\")\n\t}\n\tif proposal.spender != caller {\n\t\tt.Errorf(\"proposal spender not set properly\")\n\t}\n\tif len(proposal.vpUpdates) != 0 {\n\t\tt.Errorf(\"proposal vpUpdates not set properly\")\n\t}\n\tif proposal.newMetadata != \"\" {\n\t\tt.Errorf(\"proposal newMetadata not set properly\")\n\t}\n\tif proposal.newURI != \"\" {\n\t\tt.Errorf(\"proposal newURI not set properly\")\n\t}\n\tif proposal.submitTime != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"proposal submitTime not set properly\")\n\t}\n\tif proposal.voteEndTime != uint64(time.Now().Unix())+daos[0].votingPeriod {\n\t\tt.Errorf(\"proposal voteEndTime not set properly\")\n\t}\n\tif proposal.status != VOTING_PERIOD {\n\t\tt.Errorf(\"proposal status not set properly\")\n\t}\n\tif proposal.votes == nil {\n\t\tt.Errorf(\"proposal votes not set properly\")\n\t}\n\tif len(proposal.votingPowers) != 4 {\n\t\tt.Errorf(\"proposal votingPowers not set properly\")\n\t}\n}\n\nfunc TestVoteProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(1, 0, YES)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(0, 1, YES)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tVoteProposal(0, 0, YES)\n\t})\n\n\t// vote and check result is set properly\n\tstd.TestSetOrigCaller(caller1)\n\tVoteProposal(0, 0, YES)\n\tvote, found := getVote(0, 0, caller1)\n\tif !found {\n\t\tt.Errorf(\"proposal vote not set\")\n\t}\n\tif vote.address != caller1 {\n\t\tt.Errorf(\"vote address not set properly\")\n\t}\n\tif vote.timestamp != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"vote timestamp not set properly\")\n\t}\n\tif vote.option != YES {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 1 {\n\t\tt.Errorf(\"votePowers by vote option not set properly\")\n\t}\n\n\t// vote again with different option and check result\n\tVoteProposal(0, 0, NO)\n\tvote, found = getVote(0, 0, caller1)\n\tif vote.option != NO {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 0 {\n\t\tt.Errorf(\"votePowers for YES not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(NO)] != 1 {\n\t\tt.Errorf(\"votePowers for NO not set properly\")\n\t}\n\n\t// test vote end time already reached\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\t\tVoteProposal(0, 0, YES)\n\t})\n}\n\nfunc TestTallyAndExecute(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{\n\t\t{\n\t\t\taddress: caller.String(),\n\t\t\tpower:   1,\n\t\t},\n\t}, \"newMetadata.com\", \"newURI.com\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(1, 0)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 1)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tTallyAndExecute(0, 0)\n\t})\n\tassertPanic(t, func() { // vote end time not pass\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 0)\n\t})\n\n\t// vote end time to be reached\n\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\n\t// quorum not reached\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for vote quorum\")\n\t}\n\n\t// everyone abstains\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for all abstains\")\n\t}\n\n\t// more than 1/3 vote with NO_WITH_VETO\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower / 2\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = daos[0].totalVotingPower / 2\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for NO_WITH_VETO\")\n\t}\n\n\t// all YES vote\n\tproposals[0][0].votingPowers[ABSTAIN] = 0\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = 0\n\tproposals[0][0].votingPowers[YES] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != PASSED {\n\t\tt.Errorf(\"proposal should be PASSED\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif daos[0].metadata != \"newMetadata.com\" {\n\t\tt.Errorf(\"metadata not set properly\")\n\t}\n\tif daos[0].uri != \"newURI.com\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestDepositDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when not a dao member\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tDepositDAO(0, 100)\n\t})\n\n\t// not panics\n\tstd.TestSetOrigCaller(caller1)\n\tDepositDAO(0, 100)\n}\n\nfunc TestGetDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tGetDAO(100)\n\t})\n\n\t// success when valid dao id\n\tdao := GetDAO(0)\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestGetDAOs(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tgotDaos := GetDAOs(0, 10)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tCreateDAO(\"https://gnodao2.org\", \"https://metadata.gnodao2.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tgotDaos = GetDAOs(0, 0)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 10)\n\tif len(gotDaos) != 2 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 1)\n\tif len(gotDaos) != 1 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n}\n\nfunc TestGetProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tGetProposal(1, 0)\n\t})\n\n\t// panic when invalid proposal id\n\tassertPanic(t, func() {\n\t\tGetProposal(0, 1)\n\t})\n\n\t// success when valid dao id and proposal id\n\tproposal := GetProposal(0, 0)\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"title not set properly\")\n\t}\n}\n\nfunc TestGetProposals(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tassertPanic(t, func() { // invalid dao id\n\t\tGetProposals(0, 0, 10)\n\t})\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"proposal #1\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\tCreateProposal(0, \"proposal #2\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\tgotProposals := GetProposals(0, 0, 0)\n\tif len(gotProposals) != 0 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 10)\n\tif len(gotProposals) != 2 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 1)\n\tif len(gotProposals) != 1 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n}\n\nfunc TestRender(t *testing.T) {\n\tif Render(\"\") != \"\" {\n\t\tt.Errorf(\"Render function should empty\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"YW680FeP29HNqqesaSK+QdK8IEAu5YuHPSWfENpryGkTMsvpK3OhOImEJeeIpPHX/huq4HRteJhXFa3aI4bC3g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"gnodao","Path":"gno.land/r/demo/gnodao_v03","Files":[{"Name":"gnodao.gno","Body":"package gnodao\n\nimport (\n\t\"gno.land/p/demo/avl\"\n\tfmt \"gno.land/p/demo/ufmt\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype VoteOption uint32\n\nconst (\n\tYES          VoteOption = 0 // Indicates approval of the proposal in its current form.\n\tNO           VoteOption = 1 // Indicates disapproval of the proposal in its current form.\n\tNO_WITH_VETO VoteOption = 2 // Indicates stronger opposition to the proposal than simply voting No. Not available for SuperMajority-typed proposals as a simple No of 1/3 out of total votes would result in the same outcome.\n\tABSTAIN      VoteOption = 3 // Indicates that the voter is impartial to the outcome of the proposal. Although Abstain votes are counted towards the quorum, they're excluded when calculating the ratio of other voting options above.\n)\n\n// GNODAO VOTE\ntype Vote struct {\n\taddress   std.Address // address of the voter\n\ttimestamp uint64      // block timestamp of the vote\n\toption    VoteOption  // vote option\n}\n\ntype DAO struct {\n\tid               uint64\n\turi              string       // DAO homepage link\n\tmetadata         string       // DAO metadata reference link\n\tfunds            uint64       // DAO managing funds\n\tdepositHistory   []string     // deposit history - reserved for later use\n\tspendHistory     []string     // spend history - reserved for later use\n\tpermissions      []string     // permissions managed on DAO - reserved for later use\n\tpermMap          *avl.MutTree // permission map - reserved for later use\n\tvotingPowers     *avl.MutTree\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalStatus uint32\n\nconst (\n\tNIL           ProposalStatus = 0\n\tVOTING_PERIOD ProposalStatus = 1\n\tPASSED        ProposalStatus = 2\n\tREJECTED      ProposalStatus = 3\n\tFAILED        ProposalStatus = 4\n)\n\nfunc (s ProposalStatus) String() string {\n\tswitch s {\n\tcase NIL:\n\t\treturn \"Nil\"\n\tcase VOTING_PERIOD:\n\t\treturn \"VotingPeriod\"\n\tcase PASSED:\n\t\treturn \"Passed\"\n\tcase REJECTED:\n\t\treturn \"Rejected\"\n\tcase FAILED:\n\t\treturn \"Failed\"\n\t}\n\treturn \"\"\n}\n\ntype VotingPower struct {\n\taddress string\n\tpower   uint64\n}\n\ntype Proposal struct {\n\tdaoId        uint64         // dao id of the proposal\n\tid           uint64         // unique id assigned for each proposal\n\ttitle        string         // proposal title\n\tsummary      string         // proposal summary\n\tspendAmount  uint64         // amount of tokens to spend as part the proposal\n\tspender      std.Address    // address to receive spending tokens\n\tvpUpdates    []VotingPower  // updates on voting power - optional\n\tnewMetadata  string         // new metadata for the DAO - optional\n\tnewURI       string         // new URI for the DAO - optional\n\tsubmitTime   uint64         // proposal submission time\n\tvoteEndTime  uint64         // vote end time for the proposal\n\tstatus       ProposalStatus // StatusNil | StatusVotingPeriod | StatusPassed | StatusRejected | StatusFailed\n\tvotes        *avl.MutTree   // votes on the proposal\n\tvotingPowers []uint64       // voting power sum per voting option\n}\n\n// GNODAO STATE\nvar daos []DAO\nvar proposals [][]Proposal\n\nfunc getDAOVotingPower(daoId uint64, address string) uint64 {\n\tif len(daos) \u003c= int(daoId) {\n\t\treturn 0\n\t}\n\tres, ok := daos[daoId].votingPowers.Get(address)\n\tif ok {\n\t\treturn res.(uint64)\n\t}\n\treturn 0\n}\n\nfunc IsDAOMember(daoId uint64, address std.Address) bool {\n\treturn getDAOVotingPower(daoId, address.String()) \u003e 0\n}\n\nfunc getVote(daoId, proposalId uint64, address std.Address) (Vote, bool) {\n\tif int(daoId) \u003e= len(daos) {\n\t\treturn Vote{}, false\n\t}\n\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\treturn Vote{}, false\n\t}\n\n\tvote, ok := proposals[daoId][proposalId].votes.Get(address.String())\n\tif ok {\n\t\treturn vote.(Vote), true\n\t}\n\treturn Vote{}, false\n}\n\nfunc parseVotingPowers(daoMembers, votingPowers string) []VotingPower {\n\tparsedVPs := []VotingPower{}\n\tif len(daoMembers) == 0 {\n\t\treturn parsedVPs\n\t}\n\tmemberAddrs := strings.Split(daoMembers, \",\")\n\tmemberPowers := strings.Split(votingPowers, \",\")\n\tif len(memberAddrs) != len(memberPowers) {\n\t\tpanic(\"mismatch between members and voting powers count\")\n\t}\n\tfor i, memberAddr := range memberAddrs {\n\t\tpower, err := strconv.Atoi(memberPowers[i])\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tparsedVPs = append(parsedVPs, VotingPower{\n\t\t\taddress: memberAddr,\n\t\t\tpower:   uint64(power),\n\t\t})\n\t}\n\treturn parsedVPs\n}\n\n// GNODAO FUNCTIONS\nfunc CreateDAO(\n\turi string,\n\tmetadata string,\n\tdaoMembers string,\n\tvotingPowers string,\n\tvotingPeriod uint64,\n\tvoteQuorum uint64,\n\tthreshold uint64,\n\tvetoThreshold uint64,\n) {\n\tdaoId := uint64(len(daos))\n\tdaos = append(daos, DAO{\n\t\tid:               daoId,\n\t\turi:              uri,\n\t\tmetadata:         metadata,\n\t\tfunds:            0,\n\t\tdepositHistory:   []string{},\n\t\tspendHistory:     []string{},\n\t\tpermissions:      []string{},\n\t\tpermMap:          avl.NewMutTree(),\n\t\tvotingPowers:     avl.NewMutTree(),\n\t\ttotalVotingPower: 0,\n\t\tvotingPeriod:     votingPeriod,\n\t\tvoteQuorum:       voteQuorum,\n\t\tthreshold:        threshold,\n\t\tvetoThreshold:    vetoThreshold,\n\t})\n\n\tparsedVPs := parseVotingPowers(daoMembers, votingPowers)\n\ttotalVotingPower := uint64(0)\n\tfor _, vp := range parsedVPs {\n\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\ttotalVotingPower += vp.power\n\t}\n\tdaos[daoId].totalVotingPower = totalVotingPower\n\tproposals = append(proposals, []Proposal{})\n\t// TODO: emit events\n}\n\nfunc CreateProposal(\n\tdaoId uint64,\n\ttitle, summary string,\n\tspendAmount uint64, spender std.Address,\n\tdaoMembers string,\n\tvpUpdates string,\n\tnewMetadata string,\n\tnewURI string,\n) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a dao member\")\n\t}\n\n\tparsedVPUpdates := parseVotingPowers(daoMembers, vpUpdates)\n\tproposals[daoId] = append(proposals[daoId], Proposal{\n\t\tdaoId:        daoId,\n\t\tid:           uint64(len(proposals[daoId])),\n\t\ttitle:        title,\n\t\tsummary:      summary,\n\t\tspendAmount:  spendAmount,\n\t\tspender:      spender,\n\t\tvpUpdates:    parsedVPUpdates,\n\t\tnewMetadata:  newMetadata,\n\t\tnewURI:       newURI,\n\t\tsubmitTime:   uint64(time.Now().Unix()),\n\t\tvoteEndTime:  uint64(time.Now().Unix()) + daos[daoId].votingPeriod,\n\t\tstatus:       VOTING_PERIOD,\n\t\tvotes:        avl.NewMutTree(),\n\t\tvotingPowers: []uint64{0, 0, 0, 0}, // initiate as zero for 4 vote types\n\t})\n}\n\nfunc VoteProposal(daoId, proposalId uint64, option VoteOption) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// if invalid proposal, panic\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\n\t// if vote end time is reached panic\n\tif time.Now().Unix() \u003e int64(proposals[daoId][proposalId].voteEndTime) {\n\t\tpanic(\"vote end time reached\")\n\t}\n\n\t// Original vote cancel\n\tcallerVotingPower := getDAOVotingPower(daoId, caller.String())\n\tvote, ok := getVote(daoId, proposalId, caller)\n\tif ok {\n\t\tif proposals[daoId][proposalId].votingPowers[int(vote.option)] \u003e callerVotingPower {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] -= callerVotingPower\n\t\t} else {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] = 0\n\t\t}\n\t}\n\n\t// Create a vote\n\tproposals[daoId][proposalId].votes.Set(caller.String(), Vote{\n\t\taddress:   caller,\n\t\ttimestamp: uint64(time.Now().Unix()),\n\t\toption:    option,\n\t})\n\n\t// Voting power by option update for new vote\n\tproposals[daoId][proposalId].votingPowers[int(option)] += callerVotingPower\n}\n\n// TODO: handle voting power change during voting period for other proposal\n// TODO: experiment with gas limit\nfunc TallyAndExecute(daoId, proposalId uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// validation for proposalId\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\tdao := daos[daoId]\n\tproposal := proposals[daoId][proposalId]\n\tvotingPowers := proposal.votingPowers\n\n\tif time.Now().Unix() \u003c int64(proposal.voteEndTime) {\n\t\tpanic(\"proposal is in voting period\")\n\t}\n\n\t// reference logic for tally - https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/keeper/tally.go\n\ttotalVotes := votingPowers[YES] + votingPowers[NO] + votingPowers[NO_WITH_VETO] + votingPowers[ABSTAIN]\n\tif totalVotes \u003c dao.totalVotingPower*dao.voteQuorum/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If no one votes (everyone abstains), proposal rejected\n\tif totalVotes == votingPowers[ABSTAIN] {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/3 of voters veto, proposal rejected\n\tvetoThreshold := dao.vetoThreshold\n\tif votingPowers[NO_WITH_VETO] \u003e totalVotes*vetoThreshold/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote Yes, proposal passes\n\tthreshold := dao.threshold\n\tif votingPowers[YES] \u003e (totalVotes-votingPowers[ABSTAIN])*threshold/100 {\n\t\tproposals[daoId][proposalId].status = PASSED\n\n\t\t// TODO: spend coins when spendAmount is positive \u0026 spender is a valid address\n\t\tif proposal.spendAmount \u003e 0 {\n\t\t\tif daos[daoId].funds \u003e= proposal.spendAmount {\n\t\t\t\tdaos[daoId].funds -= proposal.spendAmount\n\t\t\t} else {\n\t\t\t\tproposals[daoId][proposalId].status = FAILED\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tif proposal.newMetadata != \"\" {\n\t\t\tdaos[daoId].metadata = proposal.newMetadata\n\t\t}\n\n\t\tif proposal.newURI != \"\" {\n\t\t\tdaos[daoId].uri = proposal.newURI\n\t\t}\n\n\t\tfor _, vp := range proposal.vpUpdates {\n\t\t\tdaos[daoId].totalVotingPower -= getDAOVotingPower(daoId, vp.address)\n\t\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\t\tdaos[daoId].totalVotingPower += vp.power\n\t\t}\n\n\t\t// TODO: contract does not own account that can hold coins - this is one of limitations\n\t\t// TODO: Adena Wallet from OnBloc - investigate on how they manage coins (swap - custody?)\n\t\t// Manual sending for funds (Address \u003c-\u003e Address) - Miloš Živković\n\t\t// https://github.com/gnolang/gno/blob/e392ab51bc05a5efbceaa8dbe395bac2e01ad808/tm2/pkg/crypto/keys/client/send.go#L109-L119\n\t\treturn\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote No, proposal rejected\n\tproposals[daoId][proposalId].status = REJECTED\n}\n\nfunc DepositDAO(daoId uint64, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// TODO: send coins from caller to DAO\n\t// TODO: verify received amount\n\t// daos[daoId].depositHistory = append(daos[daoId].depositHistory, Deposit{\n\t// \taddress: caller,\n\t// \tamount:  amount,\n\t// })\n}\n\nfunc GetDAO(daoId uint64) DAO {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\treturn daos[daoId]\n}\n\nfunc GetDAOs(startAfter, limit uint64) []DAO {\n\tmax := uint64(len(daos))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn daos[startAfter:max]\n}\n\nfunc GetProposal(daoId, proposalId uint64) Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\treturn proposals[daoId][proposalId]\n}\n\nfunc GetProposals(daoId, startAfter, limit uint64) []Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tmax := uint64(len(proposals[daoId]))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn proposals[daoId][startAfter:max]\n}\n\nfunc RenderVote(daoId, proposalId uint64, address std.Address) string {\n\tvote, found := getVote(daoId, proposalId, address)\n\tif !found {\n\t\treturn \"\"\n\t}\n\n\treturn fmt.Sprintf(`{\n\t\"address\": \"%s\",\n\t\"timestamp\": %d,\n\t\"option\": %d\n}`, vote.address.String(), vote.timestamp, vote.option)\n}\n\ntype DAOEncode struct {\n\tid               uint64\n\turi              string // DAO homepage link\n\tmetadata         string // DAO metadata reference link\n\tfunds            uint64 // DAO managing funds\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalEncode struct {\n\tdaoId        uint64\n\tid           uint64\n\ttitle        string\n\tsummary      string\n\tspendAmount  uint64\n\tspender      std.Address\n\tvpUpdates    []VotingPower\n\tnewMetadata  string\n\tnewURI       string\n\tsubmitTime   uint64\n\tvoteEndTime  uint64\n\tstatus       ProposalStatus\n\tvotingPowers []uint64\n}\n\nfunc GetDAOEncodeObject(dao DAO) DAOEncode {\n\treturn DAOEncode{\n\t\tid:               dao.id,\n\t\turi:              dao.uri,\n\t\tmetadata:         dao.metadata,\n\t\tfunds:            dao.funds,\n\t\ttotalVotingPower: dao.totalVotingPower,\n\t\tvotingPeriod:     dao.votingPeriod,\n\t\tvoteQuorum:       dao.voteQuorum,\n\t\tthreshold:        dao.threshold,\n\t\tvetoThreshold:    dao.vetoThreshold,\n\t}\n}\n\nfunc GetProposalEncodeObject(p Proposal) DAOEncode {\n\treturn DAOEncode{\n\t\tdaoId:        p.daoId,\n\t\tid:           p.id,\n\t\ttitle:        p.title,\n\t\tsummary:      p.summary,\n\t\tspendAmount:  p.spendAmount,\n\t\tspender:      p.spender,\n\t\tvpUpdates:    p.vpUpdates,\n\t\tnewMetadata:  p.newMetadata,\n\t\tnewURI:       p.newURI,\n\t\tsubmitTime:   p.submitTime,\n\t\tvoteEndTime:  p.voteEndTime,\n\t\tstatus:       p.status,\n\t\tvotingPowers: p.votingPowers,\n\t}\n}\n\nfunc RenderDAO(daoId uint64) string {\n\tdaoEncode := GetDAOEncodeObject(GetDAO(daoId))\n\n\treturn fmt.Sprintf(`{\n\t\"id\": %d,\n\t\"uri\": \"%s\",\n\t\"metadata\": \"%s\",\n\t\"funds\" %d,\n\t\"totalVotingPower\" %d,\n\t\"votingPeriod\" %d,\n\t\"voteQuorum\" %d,\n\t\"threshold\" %d,\n\t\"vetoThreshold\" %d\n}`, daoEncode.id, daoEncode.uri, daoEncode.metadata, daoEncode.funds, daoEncode.totalVotingPower, daoEncode.votingPeriod, daoEncode.voteQuorum, daoEncode.threshold, daoEncode.vetoThreshold)\n}\n\nfunc RenderDAOs(startAfter, limit uint64) string {\n\tdaos := GetDAOs(startAfter, limit)\n\tdaoEncodes := []DAOEncode{}\n\trendered := \"[\"\n\tfor index, dao := range daos {\n\t\trendered += RenderDAO(dao.id)\n\t\tif index != len(daos)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n\nfunc RenderProposal(daoId, proposalId uint64) string {\n\tp := GetProposalEncodeObject(GetProposal(daoId, proposalId))\n\tvpUpdatesRendered := \"[\"\n\tfor index, vpUpdate := range p.vpUpdates {\n\t\tvpUpdatesRendered += fmt.Sprintf(`{\n\t\"address\" \"%s\",\n\t\"power\": %d\n}`, vpUpdate.address.String(), vpUpdate.power)\n\t\tif index != len(p.vpUpdates)-1 {\n\t\t\tvpUpdatesRendered += \",\\n\"\n\t\t}\n\t}\n\tvpUpdatesRendered += \"]\"\n\n\tvotingPowersBySumRendered = fmt.Sprintf(`[\n\t%d, %d, %d, %d\n]`, p.votingPowers[0], p.votingPowers[1], p.votingPowers[2], p.votingPowers[3])\n\n\treturn fmt.Sprintf(`{\n\t\"daoId\": %d,\n\t\"id\": %d,\n\t\"title\": \"%s\",\n\t\"summary\": \"%s\",\n\t\"spendAmount\": %d,\n\t\"spender\": \"%s\",\n\t\"newMetadata\": \"%s\",\n\t\"newURI\": \"%s\",\n\t\"submitTime\": %d,\n\t\"voteEndTime\": %d,\n\t\"status\": \"%s\",\n\t\"vpUpdates\": %s,\n\t\"votingPowers\": %s\n}`, p.daoId, p.id, p.title, p.summary, p.spendAmount, p.spender, p.newMetadata, p.newURI, p.submitTime, p.voteEndTime, p.status.String(), vpUpdatesRendered, votingPowersBySumRendered)\n}\n\nfunc RenderProposals(daoId, startAfter, limit uint64) string {\n\tproposals := GetProposals(daoId, startAfter, limit)\n\trendered := \"[\"\n\tfor index, proposal := range proposals {\n\t\trendered += RenderProposal(proposal.daoId, proposal.id)\n\t\tif index != len(proposals)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n\nfunc Render(path string) string {\n\treturn \"\"\n}\n"},{"Name":"gnodao_test.gno","Body":"package gnodao\n\nimport (\n\t\"fmt\"\n\t\"std\"\n\t\"testing\"\n\t\"time\"\n)\n\nvar caller std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnabcde\"\nvar caller1 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\"\nvar caller2 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\"\nvar daoMembers = []std.Address{\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnccccc\",\n}\nvar votingPowers = []VotingPower{\n\t{\n\t\taddress: daoMembers[0].String(),\n\t\tpower:   1,\n\t},\n\t{\n\t\taddress: daoMembers[1].String(),\n\t\tpower:   2,\n\t},\n\t{\n\t\taddress: daoMembers[2].String(),\n\t\tpower:   3,\n\t},\n}\n\nfunc assertPanic(t *testing.T, f func()) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t}\n\t}()\n\tf()\n}\n\nfunc TestIsDAOMember(t *testing.T) {\n\tdaos = []DAO{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\n\t// TODO: what package is ideal to use for checks?\n\tif IsDAOMember(0, caller) != false {\n\t\tt.Errorf(\"Should not be false\")\n\t}\n\tif IsDAOMember(0, caller1) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n\tif IsDAOMember(0, caller2) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n}\n\nfunc TestCreateDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\tif len(daos) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tif len(proposals) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tdao := daos[0]\n\tif dao.id != 0 {\n\t\tt.Errorf(\"first DAO id should be 0\")\n\t}\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"dao uri not set properly\")\n\t}\n\tif dao.metadata != \"https://metadata.gnodao1.org\" {\n\t\tt.Errorf(\"dao metadata not set properly\")\n\t}\n\tif dao.funds != 0 {\n\t\tt.Errorf(\"dao funds not set properly\")\n\t}\n\tif len(dao.depositHistory) != 0 {\n\t\tt.Errorf(\"dao deposit history not set properly\")\n\t}\n\tif len(dao.spendHistory) != 0 {\n\t\tt.Errorf(\"dao spend history not set properly\")\n\t}\n\tif len(dao.permissions) != 0 {\n\t\tt.Errorf(\"dao permissions not set properly\")\n\t}\n\tif dao.permMap == nil {\n\t\tt.Errorf(\"dao permission map not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 0 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller1.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller2.String()) != 2 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif dao.totalVotingPower != 6 {\n\t\tt.Errorf(\"totalVotingPower not set properly\")\n\t}\n\tif dao.votingPeriod != 86400*2 {\n\t\tt.Errorf(\"votingPeriod not set properly\")\n\t}\n\tif dao.voteQuorum != 30 {\n\t\tt.Errorf(\"voteQuorum not set properly\")\n\t}\n\tif dao.threshold != 10 {\n\t\tt.Errorf(\"threshold not set properly\")\n\t}\n\tif dao.vetoThreshold != 10 {\n\t\tt.Errorf(\"vetoThreshold not set properly\")\n\t}\n}\n\nfunc TestCreateProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\t})\n\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tproposal := proposals[0][0]\n\tif proposal.daoId != 0 {\n\t\tt.Errorf(\"proposal daoId should be 0\")\n\t}\n\tif proposal.id != 0 {\n\t\tt.Errorf(\"proposal id should be 0\")\n\t}\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"proposal title not set properly\")\n\t}\n\tif proposal.summary != \"Proposal to bootstrap DAO fund.\" {\n\t\tt.Errorf(\"proposal summary not set properly\")\n\t}\n\tif proposal.spendAmount != 0 {\n\t\tt.Errorf(\"proposal spendAmount not set properly\")\n\t}\n\tif proposal.spender != caller {\n\t\tt.Errorf(\"proposal spender not set properly\")\n\t}\n\tif len(proposal.vpUpdates) != 0 {\n\t\tt.Errorf(\"proposal vpUpdates not set properly\")\n\t}\n\tif proposal.newMetadata != \"\" {\n\t\tt.Errorf(\"proposal newMetadata not set properly\")\n\t}\n\tif proposal.newURI != \"\" {\n\t\tt.Errorf(\"proposal newURI not set properly\")\n\t}\n\tif proposal.submitTime != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"proposal submitTime not set properly\")\n\t}\n\tif proposal.voteEndTime != uint64(time.Now().Unix())+daos[0].votingPeriod {\n\t\tt.Errorf(\"proposal voteEndTime not set properly\")\n\t}\n\tif proposal.status != VOTING_PERIOD {\n\t\tt.Errorf(\"proposal status not set properly\")\n\t}\n\tif proposal.votes == nil {\n\t\tt.Errorf(\"proposal votes not set properly\")\n\t}\n\tif len(proposal.votingPowers) != 4 {\n\t\tt.Errorf(\"proposal votingPowers not set properly\")\n\t}\n}\n\nfunc TestVoteProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(1, 0, YES)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(0, 1, YES)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tVoteProposal(0, 0, YES)\n\t})\n\n\t// vote and check result is set properly\n\tstd.TestSetOrigCaller(caller1)\n\tVoteProposal(0, 0, YES)\n\tvote, found := getVote(0, 0, caller1)\n\tif !found {\n\t\tt.Errorf(\"proposal vote not set\")\n\t}\n\tif vote.address != caller1 {\n\t\tt.Errorf(\"vote address not set properly\")\n\t}\n\tif vote.timestamp != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"vote timestamp not set properly\")\n\t}\n\tif vote.option != YES {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 1 {\n\t\tt.Errorf(\"votePowers by vote option not set properly\")\n\t}\n\n\t// vote again with different option and check result\n\tVoteProposal(0, 0, NO)\n\tvote, found = getVote(0, 0, caller1)\n\tif vote.option != NO {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 0 {\n\t\tt.Errorf(\"votePowers for YES not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(NO)] != 1 {\n\t\tt.Errorf(\"votePowers for NO not set properly\")\n\t}\n\n\t// test vote end time already reached\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\t\tVoteProposal(0, 0, YES)\n\t})\n}\n\nfunc TestTallyAndExecute(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{\n\t\t{\n\t\t\taddress: caller.String(),\n\t\t\tpower:   1,\n\t\t},\n\t}, \"newMetadata.com\", \"newURI.com\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(1, 0)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 1)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tTallyAndExecute(0, 0)\n\t})\n\tassertPanic(t, func() { // vote end time not pass\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 0)\n\t})\n\n\t// vote end time to be reached\n\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\n\t// quorum not reached\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for vote quorum\")\n\t}\n\n\t// everyone abstains\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for all abstains\")\n\t}\n\n\t// more than 1/3 vote with NO_WITH_VETO\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower / 2\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = daos[0].totalVotingPower / 2\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for NO_WITH_VETO\")\n\t}\n\n\t// all YES vote\n\tproposals[0][0].votingPowers[ABSTAIN] = 0\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = 0\n\tproposals[0][0].votingPowers[YES] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != PASSED {\n\t\tt.Errorf(\"proposal should be PASSED\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif daos[0].metadata != \"newMetadata.com\" {\n\t\tt.Errorf(\"metadata not set properly\")\n\t}\n\tif daos[0].uri != \"newURI.com\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestDepositDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when not a dao member\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tDepositDAO(0, 100)\n\t})\n\n\t// not panics\n\tstd.TestSetOrigCaller(caller1)\n\tDepositDAO(0, 100)\n}\n\nfunc TestGetDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tGetDAO(100)\n\t})\n\n\t// success when valid dao id\n\tdao := GetDAO(0)\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestGetDAOs(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tgotDaos := GetDAOs(0, 10)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tCreateDAO(\"https://gnodao2.org\", \"https://metadata.gnodao2.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tgotDaos = GetDAOs(0, 0)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 10)\n\tif len(gotDaos) != 2 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 1)\n\tif len(gotDaos) != 1 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n}\n\nfunc TestGetProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tGetProposal(1, 0)\n\t})\n\n\t// panic when invalid proposal id\n\tassertPanic(t, func() {\n\t\tGetProposal(0, 1)\n\t})\n\n\t// success when valid dao id and proposal id\n\tproposal := GetProposal(0, 0)\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"title not set properly\")\n\t}\n}\n\nfunc TestGetProposals(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tassertPanic(t, func() { // invalid dao id\n\t\tGetProposals(0, 0, 10)\n\t})\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"proposal #1\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\tCreateProposal(0, \"proposal #2\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\tgotProposals := GetProposals(0, 0, 0)\n\tif len(gotProposals) != 0 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 10)\n\tif len(gotProposals) != 2 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 1)\n\tif len(gotProposals) != 1 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n}\n\nfunc TestRender(t *testing.T) {\n\tif Render(\"\") != \"\" {\n\t\tt.Errorf(\"Render function should empty\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"0mc/KSbt9evHiOFDQE6PL1OUimZBDFuAudMCZGRjcxEgV0YN1x8wUE6fudF4emfe0loYuRQEhzU+L/GsaR2rEw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"gnodao","Path":"gno.land/r/demo/gnodao_v03","Files":[{"Name":"gnodao.gno","Body":"package gnodao\n\nimport (\n\t\"gno.land/p/demo/avl\"\n\tfmt \"gno.land/p/demo/ufmt\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype VoteOption uint32\n\nconst (\n\tYES          VoteOption = 0 // Indicates approval of the proposal in its current form.\n\tNO           VoteOption = 1 // Indicates disapproval of the proposal in its current form.\n\tNO_WITH_VETO VoteOption = 2 // Indicates stronger opposition to the proposal than simply voting No. Not available for SuperMajority-typed proposals as a simple No of 1/3 out of total votes would result in the same outcome.\n\tABSTAIN      VoteOption = 3 // Indicates that the voter is impartial to the outcome of the proposal. Although Abstain votes are counted towards the quorum, they're excluded when calculating the ratio of other voting options above.\n)\n\n// GNODAO VOTE\ntype Vote struct {\n\taddress   std.Address // address of the voter\n\ttimestamp uint64      // block timestamp of the vote\n\toption    VoteOption  // vote option\n}\n\ntype DAO struct {\n\tid               uint64\n\turi              string       // DAO homepage link\n\tmetadata         string       // DAO metadata reference link\n\tfunds            uint64       // DAO managing funds\n\tdepositHistory   []string     // deposit history - reserved for later use\n\tspendHistory     []string     // spend history - reserved for later use\n\tpermissions      []string     // permissions managed on DAO - reserved for later use\n\tpermMap          *avl.MutTree // permission map - reserved for later use\n\tvotingPowers     *avl.MutTree\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalStatus uint32\n\nconst (\n\tNIL           ProposalStatus = 0\n\tVOTING_PERIOD ProposalStatus = 1\n\tPASSED        ProposalStatus = 2\n\tREJECTED      ProposalStatus = 3\n\tFAILED        ProposalStatus = 4\n)\n\nfunc (s ProposalStatus) String() string {\n\tswitch s {\n\tcase NIL:\n\t\treturn \"Nil\"\n\tcase VOTING_PERIOD:\n\t\treturn \"VotingPeriod\"\n\tcase PASSED:\n\t\treturn \"Passed\"\n\tcase REJECTED:\n\t\treturn \"Rejected\"\n\tcase FAILED:\n\t\treturn \"Failed\"\n\t}\n\treturn \"\"\n}\n\ntype VotingPower struct {\n\taddress string\n\tpower   uint64\n}\n\ntype Proposal struct {\n\tdaoId        uint64         // dao id of the proposal\n\tid           uint64         // unique id assigned for each proposal\n\ttitle        string         // proposal title\n\tsummary      string         // proposal summary\n\tspendAmount  uint64         // amount of tokens to spend as part the proposal\n\tspender      std.Address    // address to receive spending tokens\n\tvpUpdates    []VotingPower  // updates on voting power - optional\n\tnewMetadata  string         // new metadata for the DAO - optional\n\tnewURI       string         // new URI for the DAO - optional\n\tsubmitTime   uint64         // proposal submission time\n\tvoteEndTime  uint64         // vote end time for the proposal\n\tstatus       ProposalStatus // StatusNil | StatusVotingPeriod | StatusPassed | StatusRejected | StatusFailed\n\tvotes        *avl.MutTree   // votes on the proposal\n\tvotingPowers []uint64       // voting power sum per voting option\n}\n\n// GNODAO STATE\nvar daos []DAO\nvar proposals [][]Proposal\n\nfunc getDAOVotingPower(daoId uint64, address string) uint64 {\n\tif len(daos) \u003c= int(daoId) {\n\t\treturn 0\n\t}\n\tres, ok := daos[daoId].votingPowers.Get(address)\n\tif ok {\n\t\treturn res.(uint64)\n\t}\n\treturn 0\n}\n\nfunc IsDAOMember(daoId uint64, address std.Address) bool {\n\treturn getDAOVotingPower(daoId, address.String()) \u003e 0\n}\n\nfunc getVote(daoId, proposalId uint64, address std.Address) (Vote, bool) {\n\tif int(daoId) \u003e= len(daos) {\n\t\treturn Vote{}, false\n\t}\n\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\treturn Vote{}, false\n\t}\n\n\tvote, ok := proposals[daoId][proposalId].votes.Get(address.String())\n\tif ok {\n\t\treturn vote.(Vote), true\n\t}\n\treturn Vote{}, false\n}\n\nfunc parseVotingPowers(daoMembers, votingPowers string) []VotingPower {\n\tparsedVPs := []VotingPower{}\n\tif len(daoMembers) == 0 {\n\t\treturn parsedVPs\n\t}\n\tmemberAddrs := strings.Split(daoMembers, \",\")\n\tmemberPowers := strings.Split(votingPowers, \",\")\n\tif len(memberAddrs) != len(memberPowers) {\n\t\tpanic(\"mismatch between members and voting powers count\")\n\t}\n\tfor i, memberAddr := range memberAddrs {\n\t\tpower, err := strconv.Atoi(memberPowers[i])\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tparsedVPs = append(parsedVPs, VotingPower{\n\t\t\taddress: memberAddr,\n\t\t\tpower:   uint64(power),\n\t\t})\n\t}\n\treturn parsedVPs\n}\n\n// GNODAO FUNCTIONS\nfunc CreateDAO(\n\turi string,\n\tmetadata string,\n\tdaoMembers string,\n\tvotingPowers string,\n\tvotingPeriod uint64,\n\tvoteQuorum uint64,\n\tthreshold uint64,\n\tvetoThreshold uint64,\n) {\n\tdaoId := uint64(len(daos))\n\tdaos = append(daos, DAO{\n\t\tid:               daoId,\n\t\turi:              uri,\n\t\tmetadata:         metadata,\n\t\tfunds:            0,\n\t\tdepositHistory:   []string{},\n\t\tspendHistory:     []string{},\n\t\tpermissions:      []string{},\n\t\tpermMap:          avl.NewMutTree(),\n\t\tvotingPowers:     avl.NewMutTree(),\n\t\ttotalVotingPower: 0,\n\t\tvotingPeriod:     votingPeriod,\n\t\tvoteQuorum:       voteQuorum,\n\t\tthreshold:        threshold,\n\t\tvetoThreshold:    vetoThreshold,\n\t})\n\n\tparsedVPs := parseVotingPowers(daoMembers, votingPowers)\n\ttotalVotingPower := uint64(0)\n\tfor _, vp := range parsedVPs {\n\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\ttotalVotingPower += vp.power\n\t}\n\tdaos[daoId].totalVotingPower = totalVotingPower\n\tproposals = append(proposals, []Proposal{})\n\t// TODO: emit events\n}\n\nfunc CreateProposal(\n\tdaoId uint64,\n\ttitle, summary string,\n\tspendAmount uint64, spender std.Address,\n\tdaoMembers string,\n\tvpUpdates string,\n\tnewMetadata string,\n\tnewURI string,\n) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a dao member\")\n\t}\n\n\tparsedVPUpdates := parseVotingPowers(daoMembers, vpUpdates)\n\tproposals[daoId] = append(proposals[daoId], Proposal{\n\t\tdaoId:        daoId,\n\t\tid:           uint64(len(proposals[daoId])),\n\t\ttitle:        title,\n\t\tsummary:      summary,\n\t\tspendAmount:  spendAmount,\n\t\tspender:      spender,\n\t\tvpUpdates:    parsedVPUpdates,\n\t\tnewMetadata:  newMetadata,\n\t\tnewURI:       newURI,\n\t\tsubmitTime:   uint64(time.Now().Unix()),\n\t\tvoteEndTime:  uint64(time.Now().Unix()) + daos[daoId].votingPeriod,\n\t\tstatus:       VOTING_PERIOD,\n\t\tvotes:        avl.NewMutTree(),\n\t\tvotingPowers: []uint64{0, 0, 0, 0}, // initiate as zero for 4 vote types\n\t})\n}\n\nfunc VoteProposal(daoId, proposalId uint64, option VoteOption) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// if invalid proposal, panic\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\n\t// if vote end time is reached panic\n\tif time.Now().Unix() \u003e int64(proposals[daoId][proposalId].voteEndTime) {\n\t\tpanic(\"vote end time reached\")\n\t}\n\n\t// Original vote cancel\n\tcallerVotingPower := getDAOVotingPower(daoId, caller.String())\n\tvote, ok := getVote(daoId, proposalId, caller)\n\tif ok {\n\t\tif proposals[daoId][proposalId].votingPowers[int(vote.option)] \u003e callerVotingPower {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] -= callerVotingPower\n\t\t} else {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] = 0\n\t\t}\n\t}\n\n\t// Create a vote\n\tproposals[daoId][proposalId].votes.Set(caller.String(), Vote{\n\t\taddress:   caller,\n\t\ttimestamp: uint64(time.Now().Unix()),\n\t\toption:    option,\n\t})\n\n\t// Voting power by option update for new vote\n\tproposals[daoId][proposalId].votingPowers[int(option)] += callerVotingPower\n}\n\n// TODO: handle voting power change during voting period for other proposal\n// TODO: experiment with gas limit\nfunc TallyAndExecute(daoId, proposalId uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// validation for proposalId\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\tdao := daos[daoId]\n\tproposal := proposals[daoId][proposalId]\n\tvotingPowers := proposal.votingPowers\n\n\tif time.Now().Unix() \u003c int64(proposal.voteEndTime) {\n\t\tpanic(\"proposal is in voting period\")\n\t}\n\n\t// reference logic for tally - https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/keeper/tally.go\n\ttotalVotes := votingPowers[YES] + votingPowers[NO] + votingPowers[NO_WITH_VETO] + votingPowers[ABSTAIN]\n\tif totalVotes \u003c dao.totalVotingPower*dao.voteQuorum/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If no one votes (everyone abstains), proposal rejected\n\tif totalVotes == votingPowers[ABSTAIN] {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/3 of voters veto, proposal rejected\n\tvetoThreshold := dao.vetoThreshold\n\tif votingPowers[NO_WITH_VETO] \u003e totalVotes*vetoThreshold/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote Yes, proposal passes\n\tthreshold := dao.threshold\n\tif votingPowers[YES] \u003e (totalVotes-votingPowers[ABSTAIN])*threshold/100 {\n\t\tproposals[daoId][proposalId].status = PASSED\n\n\t\t// TODO: spend coins when spendAmount is positive \u0026 spender is a valid address\n\t\tif proposal.spendAmount \u003e 0 {\n\t\t\tif daos[daoId].funds \u003e= proposal.spendAmount {\n\t\t\t\tdaos[daoId].funds -= proposal.spendAmount\n\t\t\t} else {\n\t\t\t\tproposals[daoId][proposalId].status = FAILED\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tif proposal.newMetadata != \"\" {\n\t\t\tdaos[daoId].metadata = proposal.newMetadata\n\t\t}\n\n\t\tif proposal.newURI != \"\" {\n\t\t\tdaos[daoId].uri = proposal.newURI\n\t\t}\n\n\t\tfor _, vp := range proposal.vpUpdates {\n\t\t\tdaos[daoId].totalVotingPower -= getDAOVotingPower(daoId, vp.address)\n\t\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\t\tdaos[daoId].totalVotingPower += vp.power\n\t\t}\n\n\t\t// TODO: contract does not own account that can hold coins - this is one of limitations\n\t\t// TODO: Adena Wallet from OnBloc - investigate on how they manage coins (swap - custody?)\n\t\t// Manual sending for funds (Address \u003c-\u003e Address) - Miloš Živković\n\t\t// https://github.com/gnolang/gno/blob/e392ab51bc05a5efbceaa8dbe395bac2e01ad808/tm2/pkg/crypto/keys/client/send.go#L109-L119\n\t\treturn\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote No, proposal rejected\n\tproposals[daoId][proposalId].status = REJECTED\n}\n\nfunc DepositDAO(daoId uint64, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// TODO: send coins from caller to DAO\n\t// TODO: verify received amount\n\t// daos[daoId].depositHistory = append(daos[daoId].depositHistory, Deposit{\n\t// \taddress: caller,\n\t// \tamount:  amount,\n\t// })\n}\n\nfunc GetDAO(daoId uint64) DAO {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\treturn daos[daoId]\n}\n\nfunc GetDAOs(startAfter, limit uint64) []DAO {\n\tmax := uint64(len(daos))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn daos[startAfter:max]\n}\n\nfunc GetProposal(daoId, proposalId uint64) Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\treturn proposals[daoId][proposalId]\n}\n\nfunc GetProposals(daoId, startAfter, limit uint64) []Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tmax := uint64(len(proposals[daoId]))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn proposals[daoId][startAfter:max]\n}\n\nfunc RenderVote(daoId, proposalId uint64, address std.Address) string {\n\tvote, found := getVote(daoId, proposalId, address)\n\tif !found {\n\t\treturn \"\"\n\t}\n\n\treturn fmt.Sprintf(`{\n\t\"address\": \"%s\",\n\t\"timestamp\": %d,\n\t\"option\": %d\n}`, vote.address.String(), vote.timestamp, vote.option)\n}\n\ntype DAOEncode struct {\n\tid               uint64\n\turi              string // DAO homepage link\n\tmetadata         string // DAO metadata reference link\n\tfunds            uint64 // DAO managing funds\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalEncode struct {\n\tdaoId        uint64\n\tid           uint64\n\ttitle        string\n\tsummary      string\n\tspendAmount  uint64\n\tspender      std.Address\n\tvpUpdates    []VotingPower\n\tnewMetadata  string\n\tnewURI       string\n\tsubmitTime   uint64\n\tvoteEndTime  uint64\n\tstatus       ProposalStatus\n\tvotingPowers []uint64\n}\n\nfunc GetDAOEncodeObject(dao DAO) DAOEncode {\n\treturn DAOEncode{\n\t\tid:               dao.id,\n\t\turi:              dao.uri,\n\t\tmetadata:         dao.metadata,\n\t\tfunds:            dao.funds,\n\t\ttotalVotingPower: dao.totalVotingPower,\n\t\tvotingPeriod:     dao.votingPeriod,\n\t\tvoteQuorum:       dao.voteQuorum,\n\t\tthreshold:        dao.threshold,\n\t\tvetoThreshold:    dao.vetoThreshold,\n\t}\n}\n\nfunc GetProposalEncodeObject(p Proposal) ProposalEncode {\n\treturn ProposalEncode{\n\t\tdaoId:        p.daoId,\n\t\tid:           p.id,\n\t\ttitle:        p.title,\n\t\tsummary:      p.summary,\n\t\tspendAmount:  p.spendAmount,\n\t\tspender:      p.spender,\n\t\tvpUpdates:    p.vpUpdates,\n\t\tnewMetadata:  p.newMetadata,\n\t\tnewURI:       p.newURI,\n\t\tsubmitTime:   p.submitTime,\n\t\tvoteEndTime:  p.voteEndTime,\n\t\tstatus:       p.status,\n\t\tvotingPowers: p.votingPowers,\n\t}\n}\n\nfunc RenderDAO(daoId uint64) string {\n\tdaoEncode := GetDAOEncodeObject(GetDAO(daoId))\n\n\treturn fmt.Sprintf(`{\n\t\"id\": %d,\n\t\"uri\": \"%s\",\n\t\"metadata\": \"%s\",\n\t\"funds\" %d,\n\t\"totalVotingPower\" %d,\n\t\"votingPeriod\" %d,\n\t\"voteQuorum\" %d,\n\t\"threshold\" %d,\n\t\"vetoThreshold\" %d\n}`, daoEncode.id, daoEncode.uri, daoEncode.metadata, daoEncode.funds, daoEncode.totalVotingPower, daoEncode.votingPeriod, daoEncode.voteQuorum, daoEncode.threshold, daoEncode.vetoThreshold)\n}\n\nfunc RenderDAOs(startAfter, limit uint64) string {\n\tdaos := GetDAOs(startAfter, limit)\n\tdaoEncodes := []DAOEncode{}\n\trendered := \"[\"\n\tfor index, dao := range daos {\n\t\trendered += RenderDAO(dao.id)\n\t\tif index != len(daos)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n\nfunc RenderProposal(daoId, proposalId uint64) string {\n\tp := GetProposalEncodeObject(GetProposal(daoId, proposalId))\n\tvpUpdatesRendered := \"[\"\n\tfor index, vpUpdate := range p.vpUpdates {\n\t\tvpUpdatesRendered += fmt.Sprintf(`{\n\t\"address\" \"%s\",\n\t\"power\": %d\n}`, vpUpdate.address.String(), vpUpdate.power)\n\t\tif index != len(p.vpUpdates)-1 {\n\t\t\tvpUpdatesRendered += \",\\n\"\n\t\t}\n\t}\n\tvpUpdatesRendered += \"]\"\n\n\tvotingPowersBySumRendered = fmt.Sprintf(`[\n\t%d, %d, %d, %d\n]`, p.votingPowers[0], p.votingPowers[1], p.votingPowers[2], p.votingPowers[3])\n\n\treturn fmt.Sprintf(`{\n\t\"daoId\": %d,\n\t\"id\": %d,\n\t\"title\": \"%s\",\n\t\"summary\": \"%s\",\n\t\"spendAmount\": %d,\n\t\"spender\": \"%s\",\n\t\"newMetadata\": \"%s\",\n\t\"newURI\": \"%s\",\n\t\"submitTime\": %d,\n\t\"voteEndTime\": %d,\n\t\"status\": \"%s\",\n\t\"vpUpdates\": %s,\n\t\"votingPowers\": %s\n}`, p.daoId, p.id, p.title, p.summary, p.spendAmount, p.spender, p.newMetadata, p.newURI, p.submitTime, p.voteEndTime, p.status.String(), vpUpdatesRendered, votingPowersBySumRendered)\n}\n\nfunc RenderProposals(daoId, startAfter, limit uint64) string {\n\tproposals := GetProposals(daoId, startAfter, limit)\n\trendered := \"[\"\n\tfor index, proposal := range proposals {\n\t\trendered += RenderProposal(proposal.daoId, proposal.id)\n\t\tif index != len(proposals)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n\nfunc Render(path string) string {\n\treturn \"\"\n}\n"},{"Name":"gnodao_test.gno","Body":"package gnodao\n\nimport (\n\t\"fmt\"\n\t\"std\"\n\t\"testing\"\n\t\"time\"\n)\n\nvar caller std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnabcde\"\nvar caller1 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\"\nvar caller2 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\"\nvar daoMembers = []std.Address{\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnccccc\",\n}\nvar votingPowers = []VotingPower{\n\t{\n\t\taddress: daoMembers[0].String(),\n\t\tpower:   1,\n\t},\n\t{\n\t\taddress: daoMembers[1].String(),\n\t\tpower:   2,\n\t},\n\t{\n\t\taddress: daoMembers[2].String(),\n\t\tpower:   3,\n\t},\n}\n\nfunc assertPanic(t *testing.T, f func()) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t}\n\t}()\n\tf()\n}\n\nfunc TestIsDAOMember(t *testing.T) {\n\tdaos = []DAO{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\n\t// TODO: what package is ideal to use for checks?\n\tif IsDAOMember(0, caller) != false {\n\t\tt.Errorf(\"Should not be false\")\n\t}\n\tif IsDAOMember(0, caller1) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n\tif IsDAOMember(0, caller2) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n}\n\nfunc TestCreateDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\tif len(daos) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tif len(proposals) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tdao := daos[0]\n\tif dao.id != 0 {\n\t\tt.Errorf(\"first DAO id should be 0\")\n\t}\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"dao uri not set properly\")\n\t}\n\tif dao.metadata != \"https://metadata.gnodao1.org\" {\n\t\tt.Errorf(\"dao metadata not set properly\")\n\t}\n\tif dao.funds != 0 {\n\t\tt.Errorf(\"dao funds not set properly\")\n\t}\n\tif len(dao.depositHistory) != 0 {\n\t\tt.Errorf(\"dao deposit history not set properly\")\n\t}\n\tif len(dao.spendHistory) != 0 {\n\t\tt.Errorf(\"dao spend history not set properly\")\n\t}\n\tif len(dao.permissions) != 0 {\n\t\tt.Errorf(\"dao permissions not set properly\")\n\t}\n\tif dao.permMap == nil {\n\t\tt.Errorf(\"dao permission map not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 0 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller1.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller2.String()) != 2 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif dao.totalVotingPower != 6 {\n\t\tt.Errorf(\"totalVotingPower not set properly\")\n\t}\n\tif dao.votingPeriod != 86400*2 {\n\t\tt.Errorf(\"votingPeriod not set properly\")\n\t}\n\tif dao.voteQuorum != 30 {\n\t\tt.Errorf(\"voteQuorum not set properly\")\n\t}\n\tif dao.threshold != 10 {\n\t\tt.Errorf(\"threshold not set properly\")\n\t}\n\tif dao.vetoThreshold != 10 {\n\t\tt.Errorf(\"vetoThreshold not set properly\")\n\t}\n}\n\nfunc TestCreateProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\t})\n\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tproposal := proposals[0][0]\n\tif proposal.daoId != 0 {\n\t\tt.Errorf(\"proposal daoId should be 0\")\n\t}\n\tif proposal.id != 0 {\n\t\tt.Errorf(\"proposal id should be 0\")\n\t}\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"proposal title not set properly\")\n\t}\n\tif proposal.summary != \"Proposal to bootstrap DAO fund.\" {\n\t\tt.Errorf(\"proposal summary not set properly\")\n\t}\n\tif proposal.spendAmount != 0 {\n\t\tt.Errorf(\"proposal spendAmount not set properly\")\n\t}\n\tif proposal.spender != caller {\n\t\tt.Errorf(\"proposal spender not set properly\")\n\t}\n\tif len(proposal.vpUpdates) != 0 {\n\t\tt.Errorf(\"proposal vpUpdates not set properly\")\n\t}\n\tif proposal.newMetadata != \"\" {\n\t\tt.Errorf(\"proposal newMetadata not set properly\")\n\t}\n\tif proposal.newURI != \"\" {\n\t\tt.Errorf(\"proposal newURI not set properly\")\n\t}\n\tif proposal.submitTime != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"proposal submitTime not set properly\")\n\t}\n\tif proposal.voteEndTime != uint64(time.Now().Unix())+daos[0].votingPeriod {\n\t\tt.Errorf(\"proposal voteEndTime not set properly\")\n\t}\n\tif proposal.status != VOTING_PERIOD {\n\t\tt.Errorf(\"proposal status not set properly\")\n\t}\n\tif proposal.votes == nil {\n\t\tt.Errorf(\"proposal votes not set properly\")\n\t}\n\tif len(proposal.votingPowers) != 4 {\n\t\tt.Errorf(\"proposal votingPowers not set properly\")\n\t}\n}\n\nfunc TestVoteProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(1, 0, YES)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(0, 1, YES)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tVoteProposal(0, 0, YES)\n\t})\n\n\t// vote and check result is set properly\n\tstd.TestSetOrigCaller(caller1)\n\tVoteProposal(0, 0, YES)\n\tvote, found := getVote(0, 0, caller1)\n\tif !found {\n\t\tt.Errorf(\"proposal vote not set\")\n\t}\n\tif vote.address != caller1 {\n\t\tt.Errorf(\"vote address not set properly\")\n\t}\n\tif vote.timestamp != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"vote timestamp not set properly\")\n\t}\n\tif vote.option != YES {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 1 {\n\t\tt.Errorf(\"votePowers by vote option not set properly\")\n\t}\n\n\t// vote again with different option and check result\n\tVoteProposal(0, 0, NO)\n\tvote, found = getVote(0, 0, caller1)\n\tif vote.option != NO {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 0 {\n\t\tt.Errorf(\"votePowers for YES not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(NO)] != 1 {\n\t\tt.Errorf(\"votePowers for NO not set properly\")\n\t}\n\n\t// test vote end time already reached\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\t\tVoteProposal(0, 0, YES)\n\t})\n}\n\nfunc TestTallyAndExecute(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{\n\t\t{\n\t\t\taddress: caller.String(),\n\t\t\tpower:   1,\n\t\t},\n\t}, \"newMetadata.com\", \"newURI.com\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(1, 0)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 1)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tTallyAndExecute(0, 0)\n\t})\n\tassertPanic(t, func() { // vote end time not pass\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 0)\n\t})\n\n\t// vote end time to be reached\n\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\n\t// quorum not reached\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for vote quorum\")\n\t}\n\n\t// everyone abstains\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for all abstains\")\n\t}\n\n\t// more than 1/3 vote with NO_WITH_VETO\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower / 2\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = daos[0].totalVotingPower / 2\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for NO_WITH_VETO\")\n\t}\n\n\t// all YES vote\n\tproposals[0][0].votingPowers[ABSTAIN] = 0\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = 0\n\tproposals[0][0].votingPowers[YES] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != PASSED {\n\t\tt.Errorf(\"proposal should be PASSED\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif daos[0].metadata != \"newMetadata.com\" {\n\t\tt.Errorf(\"metadata not set properly\")\n\t}\n\tif daos[0].uri != \"newURI.com\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestDepositDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when not a dao member\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tDepositDAO(0, 100)\n\t})\n\n\t// not panics\n\tstd.TestSetOrigCaller(caller1)\n\tDepositDAO(0, 100)\n}\n\nfunc TestGetDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tGetDAO(100)\n\t})\n\n\t// success when valid dao id\n\tdao := GetDAO(0)\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestGetDAOs(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tgotDaos := GetDAOs(0, 10)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tCreateDAO(\"https://gnodao2.org\", \"https://metadata.gnodao2.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tgotDaos = GetDAOs(0, 0)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 10)\n\tif len(gotDaos) != 2 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 1)\n\tif len(gotDaos) != 1 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n}\n\nfunc TestGetProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tGetProposal(1, 0)\n\t})\n\n\t// panic when invalid proposal id\n\tassertPanic(t, func() {\n\t\tGetProposal(0, 1)\n\t})\n\n\t// success when valid dao id and proposal id\n\tproposal := GetProposal(0, 0)\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"title not set properly\")\n\t}\n}\n\nfunc TestGetProposals(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tassertPanic(t, func() { // invalid dao id\n\t\tGetProposals(0, 0, 10)\n\t})\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"proposal #1\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\tCreateProposal(0, \"proposal #2\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\tgotProposals := GetProposals(0, 0, 0)\n\tif len(gotProposals) != 0 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 10)\n\tif len(gotProposals) != 2 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 1)\n\tif len(gotProposals) != 1 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n}\n\nfunc TestRender(t *testing.T) {\n\tif Render(\"\") != \"\" {\n\t\tt.Errorf(\"Render function should empty\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"+Ge5hzdnaNIDM9b5yFZWZg8e6g8epMRB5tX0OnYzK68fwXyejrQVQFNmvk/LtWSPGdYgpOjQNqP7LxZlkKzkuQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"gnodao","Path":"gno.land/r/demo/gnodao_v03","Files":[{"Name":"gnodao.gno","Body":"package gnodao\n\nimport (\n\t\"gno.land/p/demo/avl\"\n\tfmt \"gno.land/p/demo/ufmt\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype VoteOption uint32\n\nconst (\n\tYES          VoteOption = 0 // Indicates approval of the proposal in its current form.\n\tNO           VoteOption = 1 // Indicates disapproval of the proposal in its current form.\n\tNO_WITH_VETO VoteOption = 2 // Indicates stronger opposition to the proposal than simply voting No. Not available for SuperMajority-typed proposals as a simple No of 1/3 out of total votes would result in the same outcome.\n\tABSTAIN      VoteOption = 3 // Indicates that the voter is impartial to the outcome of the proposal. Although Abstain votes are counted towards the quorum, they're excluded when calculating the ratio of other voting options above.\n)\n\n// GNODAO VOTE\ntype Vote struct {\n\taddress   std.Address // address of the voter\n\ttimestamp uint64      // block timestamp of the vote\n\toption    VoteOption  // vote option\n}\n\ntype DAO struct {\n\tid               uint64\n\turi              string       // DAO homepage link\n\tmetadata         string       // DAO metadata reference link\n\tfunds            uint64       // DAO managing funds\n\tdepositHistory   []string     // deposit history - reserved for later use\n\tspendHistory     []string     // spend history - reserved for later use\n\tpermissions      []string     // permissions managed on DAO - reserved for later use\n\tpermMap          *avl.MutTree // permission map - reserved for later use\n\tvotingPowers     *avl.MutTree\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalStatus uint32\n\nconst (\n\tNIL           ProposalStatus = 0\n\tVOTING_PERIOD ProposalStatus = 1\n\tPASSED        ProposalStatus = 2\n\tREJECTED      ProposalStatus = 3\n\tFAILED        ProposalStatus = 4\n)\n\nfunc (s ProposalStatus) String() string {\n\tswitch s {\n\tcase NIL:\n\t\treturn \"Nil\"\n\tcase VOTING_PERIOD:\n\t\treturn \"VotingPeriod\"\n\tcase PASSED:\n\t\treturn \"Passed\"\n\tcase REJECTED:\n\t\treturn \"Rejected\"\n\tcase FAILED:\n\t\treturn \"Failed\"\n\t}\n\treturn \"\"\n}\n\ntype VotingPower struct {\n\taddress string\n\tpower   uint64\n}\n\ntype Proposal struct {\n\tdaoId        uint64         // dao id of the proposal\n\tid           uint64         // unique id assigned for each proposal\n\ttitle        string         // proposal title\n\tsummary      string         // proposal summary\n\tspendAmount  uint64         // amount of tokens to spend as part the proposal\n\tspender      std.Address    // address to receive spending tokens\n\tvpUpdates    []VotingPower  // updates on voting power - optional\n\tnewMetadata  string         // new metadata for the DAO - optional\n\tnewURI       string         // new URI for the DAO - optional\n\tsubmitTime   uint64         // proposal submission time\n\tvoteEndTime  uint64         // vote end time for the proposal\n\tstatus       ProposalStatus // StatusNil | StatusVotingPeriod | StatusPassed | StatusRejected | StatusFailed\n\tvotes        *avl.MutTree   // votes on the proposal\n\tvotingPowers []uint64       // voting power sum per voting option\n}\n\n// GNODAO STATE\nvar daos []DAO\nvar proposals [][]Proposal\n\nfunc getDAOVotingPower(daoId uint64, address string) uint64 {\n\tif len(daos) \u003c= int(daoId) {\n\t\treturn 0\n\t}\n\tres, ok := daos[daoId].votingPowers.Get(address)\n\tif ok {\n\t\treturn res.(uint64)\n\t}\n\treturn 0\n}\n\nfunc IsDAOMember(daoId uint64, address std.Address) bool {\n\treturn getDAOVotingPower(daoId, address.String()) \u003e 0\n}\n\nfunc getVote(daoId, proposalId uint64, address std.Address) (Vote, bool) {\n\tif int(daoId) \u003e= len(daos) {\n\t\treturn Vote{}, false\n\t}\n\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\treturn Vote{}, false\n\t}\n\n\tvote, ok := proposals[daoId][proposalId].votes.Get(address.String())\n\tif ok {\n\t\treturn vote.(Vote), true\n\t}\n\treturn Vote{}, false\n}\n\nfunc parseVotingPowers(daoMembers, votingPowers string) []VotingPower {\n\tparsedVPs := []VotingPower{}\n\tif len(daoMembers) == 0 {\n\t\treturn parsedVPs\n\t}\n\tmemberAddrs := strings.Split(daoMembers, \",\")\n\tmemberPowers := strings.Split(votingPowers, \",\")\n\tif len(memberAddrs) != len(memberPowers) {\n\t\tpanic(\"mismatch between members and voting powers count\")\n\t}\n\tfor i, memberAddr := range memberAddrs {\n\t\tpower, err := strconv.Atoi(memberPowers[i])\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tparsedVPs = append(parsedVPs, VotingPower{\n\t\t\taddress: memberAddr,\n\t\t\tpower:   uint64(power),\n\t\t})\n\t}\n\treturn parsedVPs\n}\n\n// GNODAO FUNCTIONS\nfunc CreateDAO(\n\turi string,\n\tmetadata string,\n\tdaoMembers string,\n\tvotingPowers string,\n\tvotingPeriod uint64,\n\tvoteQuorum uint64,\n\tthreshold uint64,\n\tvetoThreshold uint64,\n) {\n\tdaoId := uint64(len(daos))\n\tdaos = append(daos, DAO{\n\t\tid:               daoId,\n\t\turi:              uri,\n\t\tmetadata:         metadata,\n\t\tfunds:            0,\n\t\tdepositHistory:   []string{},\n\t\tspendHistory:     []string{},\n\t\tpermissions:      []string{},\n\t\tpermMap:          avl.NewMutTree(),\n\t\tvotingPowers:     avl.NewMutTree(),\n\t\ttotalVotingPower: 0,\n\t\tvotingPeriod:     votingPeriod,\n\t\tvoteQuorum:       voteQuorum,\n\t\tthreshold:        threshold,\n\t\tvetoThreshold:    vetoThreshold,\n\t})\n\n\tparsedVPs := parseVotingPowers(daoMembers, votingPowers)\n\ttotalVotingPower := uint64(0)\n\tfor _, vp := range parsedVPs {\n\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\ttotalVotingPower += vp.power\n\t}\n\tdaos[daoId].totalVotingPower = totalVotingPower\n\tproposals = append(proposals, []Proposal{})\n\t// TODO: emit events\n}\n\nfunc CreateProposal(\n\tdaoId uint64,\n\ttitle, summary string,\n\tspendAmount uint64, spender std.Address,\n\tdaoMembers string,\n\tvpUpdates string,\n\tnewMetadata string,\n\tnewURI string,\n) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a dao member\")\n\t}\n\n\tparsedVPUpdates := parseVotingPowers(daoMembers, vpUpdates)\n\tproposals[daoId] = append(proposals[daoId], Proposal{\n\t\tdaoId:        daoId,\n\t\tid:           uint64(len(proposals[daoId])),\n\t\ttitle:        title,\n\t\tsummary:      summary,\n\t\tspendAmount:  spendAmount,\n\t\tspender:      spender,\n\t\tvpUpdates:    parsedVPUpdates,\n\t\tnewMetadata:  newMetadata,\n\t\tnewURI:       newURI,\n\t\tsubmitTime:   uint64(time.Now().Unix()),\n\t\tvoteEndTime:  uint64(time.Now().Unix()) + daos[daoId].votingPeriod,\n\t\tstatus:       VOTING_PERIOD,\n\t\tvotes:        avl.NewMutTree(),\n\t\tvotingPowers: []uint64{0, 0, 0, 0}, // initiate as zero for 4 vote types\n\t})\n}\n\nfunc VoteProposal(daoId, proposalId uint64, option VoteOption) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// if invalid proposal, panic\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\n\t// if vote end time is reached panic\n\tif time.Now().Unix() \u003e int64(proposals[daoId][proposalId].voteEndTime) {\n\t\tpanic(\"vote end time reached\")\n\t}\n\n\t// Original vote cancel\n\tcallerVotingPower := getDAOVotingPower(daoId, caller.String())\n\tvote, ok := getVote(daoId, proposalId, caller)\n\tif ok {\n\t\tif proposals[daoId][proposalId].votingPowers[int(vote.option)] \u003e callerVotingPower {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] -= callerVotingPower\n\t\t} else {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] = 0\n\t\t}\n\t}\n\n\t// Create a vote\n\tproposals[daoId][proposalId].votes.Set(caller.String(), Vote{\n\t\taddress:   caller,\n\t\ttimestamp: uint64(time.Now().Unix()),\n\t\toption:    option,\n\t})\n\n\t// Voting power by option update for new vote\n\tproposals[daoId][proposalId].votingPowers[int(option)] += callerVotingPower\n}\n\n// TODO: handle voting power change during voting period for other proposal\n// TODO: experiment with gas limit\nfunc TallyAndExecute(daoId, proposalId uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// validation for proposalId\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\tdao := daos[daoId]\n\tproposal := proposals[daoId][proposalId]\n\tvotingPowers := proposal.votingPowers\n\n\tif time.Now().Unix() \u003c int64(proposal.voteEndTime) {\n\t\tpanic(\"proposal is in voting period\")\n\t}\n\n\t// reference logic for tally - https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/keeper/tally.go\n\ttotalVotes := votingPowers[YES] + votingPowers[NO] + votingPowers[NO_WITH_VETO] + votingPowers[ABSTAIN]\n\tif totalVotes \u003c dao.totalVotingPower*dao.voteQuorum/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If no one votes (everyone abstains), proposal rejected\n\tif totalVotes == votingPowers[ABSTAIN] {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/3 of voters veto, proposal rejected\n\tvetoThreshold := dao.vetoThreshold\n\tif votingPowers[NO_WITH_VETO] \u003e totalVotes*vetoThreshold/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote Yes, proposal passes\n\tthreshold := dao.threshold\n\tif votingPowers[YES] \u003e (totalVotes-votingPowers[ABSTAIN])*threshold/100 {\n\t\tproposals[daoId][proposalId].status = PASSED\n\n\t\t// TODO: spend coins when spendAmount is positive \u0026 spender is a valid address\n\t\tif proposal.spendAmount \u003e 0 {\n\t\t\tif daos[daoId].funds \u003e= proposal.spendAmount {\n\t\t\t\tdaos[daoId].funds -= proposal.spendAmount\n\t\t\t} else {\n\t\t\t\tproposals[daoId][proposalId].status = FAILED\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tif proposal.newMetadata != \"\" {\n\t\t\tdaos[daoId].metadata = proposal.newMetadata\n\t\t}\n\n\t\tif proposal.newURI != \"\" {\n\t\t\tdaos[daoId].uri = proposal.newURI\n\t\t}\n\n\t\tfor _, vp := range proposal.vpUpdates {\n\t\t\tdaos[daoId].totalVotingPower -= getDAOVotingPower(daoId, vp.address)\n\t\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\t\tdaos[daoId].totalVotingPower += vp.power\n\t\t}\n\n\t\t// TODO: contract does not own account that can hold coins - this is one of limitations\n\t\t// TODO: Adena Wallet from OnBloc - investigate on how they manage coins (swap - custody?)\n\t\t// Manual sending for funds (Address \u003c-\u003e Address) - Miloš Živković\n\t\t// https://github.com/gnolang/gno/blob/e392ab51bc05a5efbceaa8dbe395bac2e01ad808/tm2/pkg/crypto/keys/client/send.go#L109-L119\n\t\treturn\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote No, proposal rejected\n\tproposals[daoId][proposalId].status = REJECTED\n}\n\nfunc DepositDAO(daoId uint64, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// TODO: send coins from caller to DAO\n\t// TODO: verify received amount\n\t// daos[daoId].depositHistory = append(daos[daoId].depositHistory, Deposit{\n\t// \taddress: caller,\n\t// \tamount:  amount,\n\t// })\n}\n\nfunc GetDAO(daoId uint64) DAO {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\treturn daos[daoId]\n}\n\nfunc GetDAOs(startAfter, limit uint64) []DAO {\n\tmax := uint64(len(daos))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn daos[startAfter:max]\n}\n\nfunc GetProposal(daoId, proposalId uint64) Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\treturn proposals[daoId][proposalId]\n}\n\nfunc GetProposals(daoId, startAfter, limit uint64) []Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tmax := uint64(len(proposals[daoId]))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn proposals[daoId][startAfter:max]\n}\n\nfunc RenderVote(daoId, proposalId uint64, address std.Address) string {\n\tvote, found := getVote(daoId, proposalId, address)\n\tif !found {\n\t\treturn \"\"\n\t}\n\n\treturn fmt.Sprintf(`{\n\t\"address\": \"%s\",\n\t\"timestamp\": %d,\n\t\"option\": %d\n}`, vote.address.String(), vote.timestamp, vote.option)\n}\n\ntype DAOEncode struct {\n\tid               uint64\n\turi              string // DAO homepage link\n\tmetadata         string // DAO metadata reference link\n\tfunds            uint64 // DAO managing funds\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalEncode struct {\n\tdaoId        uint64\n\tid           uint64\n\ttitle        string\n\tsummary      string\n\tspendAmount  uint64\n\tspender      std.Address\n\tvpUpdates    []VotingPower\n\tnewMetadata  string\n\tnewURI       string\n\tsubmitTime   uint64\n\tvoteEndTime  uint64\n\tstatus       ProposalStatus\n\tvotingPowers []uint64\n}\n\nfunc GetDAOEncodeObject(dao DAO) DAOEncode {\n\treturn DAOEncode{\n\t\tid:               dao.id,\n\t\turi:              dao.uri,\n\t\tmetadata:         dao.metadata,\n\t\tfunds:            dao.funds,\n\t\ttotalVotingPower: dao.totalVotingPower,\n\t\tvotingPeriod:     dao.votingPeriod,\n\t\tvoteQuorum:       dao.voteQuorum,\n\t\tthreshold:        dao.threshold,\n\t\tvetoThreshold:    dao.vetoThreshold,\n\t}\n}\n\nfunc GetProposalEncodeObject(p Proposal) ProposalEncode {\n\treturn ProposalEncode{\n\t\tdaoId:        p.daoId,\n\t\tid:           p.id,\n\t\ttitle:        p.title,\n\t\tsummary:      p.summary,\n\t\tspendAmount:  p.spendAmount,\n\t\tspender:      p.spender,\n\t\tvpUpdates:    p.vpUpdates,\n\t\tnewMetadata:  p.newMetadata,\n\t\tnewURI:       p.newURI,\n\t\tsubmitTime:   p.submitTime,\n\t\tvoteEndTime:  p.voteEndTime,\n\t\tstatus:       p.status,\n\t\tvotingPowers: p.votingPowers,\n\t}\n}\n\nfunc RenderDAO(daoId uint64) string {\n\tdaoEncode := GetDAOEncodeObject(GetDAO(daoId))\n\n\treturn fmt.Sprintf(`{\n\t\"id\": %d,\n\t\"uri\": \"%s\",\n\t\"metadata\": \"%s\",\n\t\"funds\" %d,\n\t\"totalVotingPower\" %d,\n\t\"votingPeriod\" %d,\n\t\"voteQuorum\" %d,\n\t\"threshold\" %d,\n\t\"vetoThreshold\" %d\n}`, daoEncode.id, daoEncode.uri, daoEncode.metadata, daoEncode.funds, daoEncode.totalVotingPower, daoEncode.votingPeriod, daoEncode.voteQuorum, daoEncode.threshold, daoEncode.vetoThreshold)\n}\n\nfunc RenderDAOs(startAfter, limit uint64) string {\n\tdaos := GetDAOs(startAfter, limit)\n\tdaoEncodes := []DAOEncode{}\n\trendered := \"[\"\n\tfor index, dao := range daos {\n\t\trendered += RenderDAO(dao.id)\n\t\tif index != len(daos)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n\nfunc RenderProposal(daoId, proposalId uint64) string {\n\tp := GetProposalEncodeObject(GetProposal(daoId, proposalId))\n\tvpUpdatesRendered := \"[\"\n\tfor index, vpUpdate := range p.vpUpdates {\n\t\tvpUpdatesRendered += fmt.Sprintf(`{\n\t\"address\": \"%s\",\n\t\"power\": %d\n}`, vpUpdate.address, vpUpdate.power)\n\t\tif index != len(p.vpUpdates)-1 {\n\t\t\tvpUpdatesRendered += \",\\n\"\n\t\t}\n\t}\n\tvpUpdatesRendered += \"]\"\n\n\tvotingPowersBySumRendered = fmt.Sprintf(`[\n\t%d, %d, %d, %d\n]`, p.votingPowers[0], p.votingPowers[1], p.votingPowers[2], p.votingPowers[3])\n\n\treturn fmt.Sprintf(`{\n\t\"daoId\": %d,\n\t\"id\": %d,\n\t\"title\": \"%s\",\n\t\"summary\": \"%s\",\n\t\"spendAmount\": %d,\n\t\"spender\": \"%s\",\n\t\"newMetadata\": \"%s\",\n\t\"newURI\": \"%s\",\n\t\"submitTime\": %d,\n\t\"voteEndTime\": %d,\n\t\"status\": \"%s\",\n\t\"vpUpdates\": %s,\n\t\"votingPowers\": %s\n}`, p.daoId, p.id, p.title, p.summary, p.spendAmount, p.spender, p.newMetadata, p.newURI, p.submitTime, p.voteEndTime, p.status.String(), vpUpdatesRendered, votingPowersBySumRendered)\n}\n\nfunc RenderProposals(daoId, startAfter, limit uint64) string {\n\tproposals := GetProposals(daoId, startAfter, limit)\n\trendered := \"[\"\n\tfor index, proposal := range proposals {\n\t\trendered += RenderProposal(proposal.daoId, proposal.id)\n\t\tif index != len(proposals)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n\nfunc Render(path string) string {\n\treturn \"\"\n}\n"},{"Name":"gnodao_test.gno","Body":"package gnodao\n\nimport (\n\t\"fmt\"\n\t\"std\"\n\t\"testing\"\n\t\"time\"\n)\n\nvar caller std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnabcde\"\nvar caller1 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\"\nvar caller2 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\"\nvar daoMembers = []std.Address{\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnccccc\",\n}\nvar votingPowers = []VotingPower{\n\t{\n\t\taddress: daoMembers[0].String(),\n\t\tpower:   1,\n\t},\n\t{\n\t\taddress: daoMembers[1].String(),\n\t\tpower:   2,\n\t},\n\t{\n\t\taddress: daoMembers[2].String(),\n\t\tpower:   3,\n\t},\n}\n\nfunc assertPanic(t *testing.T, f func()) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t}\n\t}()\n\tf()\n}\n\nfunc TestIsDAOMember(t *testing.T) {\n\tdaos = []DAO{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\n\t// TODO: what package is ideal to use for checks?\n\tif IsDAOMember(0, caller) != false {\n\t\tt.Errorf(\"Should not be false\")\n\t}\n\tif IsDAOMember(0, caller1) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n\tif IsDAOMember(0, caller2) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n}\n\nfunc TestCreateDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\tif len(daos) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tif len(proposals) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tdao := daos[0]\n\tif dao.id != 0 {\n\t\tt.Errorf(\"first DAO id should be 0\")\n\t}\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"dao uri not set properly\")\n\t}\n\tif dao.metadata != \"https://metadata.gnodao1.org\" {\n\t\tt.Errorf(\"dao metadata not set properly\")\n\t}\n\tif dao.funds != 0 {\n\t\tt.Errorf(\"dao funds not set properly\")\n\t}\n\tif len(dao.depositHistory) != 0 {\n\t\tt.Errorf(\"dao deposit history not set properly\")\n\t}\n\tif len(dao.spendHistory) != 0 {\n\t\tt.Errorf(\"dao spend history not set properly\")\n\t}\n\tif len(dao.permissions) != 0 {\n\t\tt.Errorf(\"dao permissions not set properly\")\n\t}\n\tif dao.permMap == nil {\n\t\tt.Errorf(\"dao permission map not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 0 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller1.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller2.String()) != 2 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif dao.totalVotingPower != 6 {\n\t\tt.Errorf(\"totalVotingPower not set properly\")\n\t}\n\tif dao.votingPeriod != 86400*2 {\n\t\tt.Errorf(\"votingPeriod not set properly\")\n\t}\n\tif dao.voteQuorum != 30 {\n\t\tt.Errorf(\"voteQuorum not set properly\")\n\t}\n\tif dao.threshold != 10 {\n\t\tt.Errorf(\"threshold not set properly\")\n\t}\n\tif dao.vetoThreshold != 10 {\n\t\tt.Errorf(\"vetoThreshold not set properly\")\n\t}\n}\n\nfunc TestCreateProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\t})\n\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tproposal := proposals[0][0]\n\tif proposal.daoId != 0 {\n\t\tt.Errorf(\"proposal daoId should be 0\")\n\t}\n\tif proposal.id != 0 {\n\t\tt.Errorf(\"proposal id should be 0\")\n\t}\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"proposal title not set properly\")\n\t}\n\tif proposal.summary != \"Proposal to bootstrap DAO fund.\" {\n\t\tt.Errorf(\"proposal summary not set properly\")\n\t}\n\tif proposal.spendAmount != 0 {\n\t\tt.Errorf(\"proposal spendAmount not set properly\")\n\t}\n\tif proposal.spender != caller {\n\t\tt.Errorf(\"proposal spender not set properly\")\n\t}\n\tif len(proposal.vpUpdates) != 0 {\n\t\tt.Errorf(\"proposal vpUpdates not set properly\")\n\t}\n\tif proposal.newMetadata != \"\" {\n\t\tt.Errorf(\"proposal newMetadata not set properly\")\n\t}\n\tif proposal.newURI != \"\" {\n\t\tt.Errorf(\"proposal newURI not set properly\")\n\t}\n\tif proposal.submitTime != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"proposal submitTime not set properly\")\n\t}\n\tif proposal.voteEndTime != uint64(time.Now().Unix())+daos[0].votingPeriod {\n\t\tt.Errorf(\"proposal voteEndTime not set properly\")\n\t}\n\tif proposal.status != VOTING_PERIOD {\n\t\tt.Errorf(\"proposal status not set properly\")\n\t}\n\tif proposal.votes == nil {\n\t\tt.Errorf(\"proposal votes not set properly\")\n\t}\n\tif len(proposal.votingPowers) != 4 {\n\t\tt.Errorf(\"proposal votingPowers not set properly\")\n\t}\n}\n\nfunc TestVoteProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(1, 0, YES)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(0, 1, YES)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tVoteProposal(0, 0, YES)\n\t})\n\n\t// vote and check result is set properly\n\tstd.TestSetOrigCaller(caller1)\n\tVoteProposal(0, 0, YES)\n\tvote, found := getVote(0, 0, caller1)\n\tif !found {\n\t\tt.Errorf(\"proposal vote not set\")\n\t}\n\tif vote.address != caller1 {\n\t\tt.Errorf(\"vote address not set properly\")\n\t}\n\tif vote.timestamp != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"vote timestamp not set properly\")\n\t}\n\tif vote.option != YES {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 1 {\n\t\tt.Errorf(\"votePowers by vote option not set properly\")\n\t}\n\n\t// vote again with different option and check result\n\tVoteProposal(0, 0, NO)\n\tvote, found = getVote(0, 0, caller1)\n\tif vote.option != NO {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 0 {\n\t\tt.Errorf(\"votePowers for YES not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(NO)] != 1 {\n\t\tt.Errorf(\"votePowers for NO not set properly\")\n\t}\n\n\t// test vote end time already reached\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\t\tVoteProposal(0, 0, YES)\n\t})\n}\n\nfunc TestTallyAndExecute(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{\n\t\t{\n\t\t\taddress: caller.String(),\n\t\t\tpower:   1,\n\t\t},\n\t}, \"newMetadata.com\", \"newURI.com\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(1, 0)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 1)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tTallyAndExecute(0, 0)\n\t})\n\tassertPanic(t, func() { // vote end time not pass\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 0)\n\t})\n\n\t// vote end time to be reached\n\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\n\t// quorum not reached\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for vote quorum\")\n\t}\n\n\t// everyone abstains\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for all abstains\")\n\t}\n\n\t// more than 1/3 vote with NO_WITH_VETO\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower / 2\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = daos[0].totalVotingPower / 2\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for NO_WITH_VETO\")\n\t}\n\n\t// all YES vote\n\tproposals[0][0].votingPowers[ABSTAIN] = 0\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = 0\n\tproposals[0][0].votingPowers[YES] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != PASSED {\n\t\tt.Errorf(\"proposal should be PASSED\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif daos[0].metadata != \"newMetadata.com\" {\n\t\tt.Errorf(\"metadata not set properly\")\n\t}\n\tif daos[0].uri != \"newURI.com\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestDepositDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when not a dao member\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tDepositDAO(0, 100)\n\t})\n\n\t// not panics\n\tstd.TestSetOrigCaller(caller1)\n\tDepositDAO(0, 100)\n}\n\nfunc TestGetDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tGetDAO(100)\n\t})\n\n\t// success when valid dao id\n\tdao := GetDAO(0)\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestGetDAOs(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tgotDaos := GetDAOs(0, 10)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tCreateDAO(\"https://gnodao2.org\", \"https://metadata.gnodao2.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tgotDaos = GetDAOs(0, 0)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 10)\n\tif len(gotDaos) != 2 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 1)\n\tif len(gotDaos) != 1 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n}\n\nfunc TestGetProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tGetProposal(1, 0)\n\t})\n\n\t// panic when invalid proposal id\n\tassertPanic(t, func() {\n\t\tGetProposal(0, 1)\n\t})\n\n\t// success when valid dao id and proposal id\n\tproposal := GetProposal(0, 0)\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"title not set properly\")\n\t}\n}\n\nfunc TestGetProposals(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tassertPanic(t, func() { // invalid dao id\n\t\tGetProposals(0, 0, 10)\n\t})\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"proposal #1\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\tCreateProposal(0, \"proposal #2\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\tgotProposals := GetProposals(0, 0, 0)\n\tif len(gotProposals) != 0 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 10)\n\tif len(gotProposals) != 2 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 1)\n\tif len(gotProposals) != 1 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n}\n\nfunc TestRender(t *testing.T) {\n\tif Render(\"\") != \"\" {\n\t\tt.Errorf(\"Render function should empty\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"5SNWV6QjCur6Bof6f5D9aruN7kXi/e3XIgPZ4mEV6bMbFVtfCzAbNcwRtPCzvwcutOU+IiOChJzRsyflxW8FJA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"gnodao","Path":"gno.land/r/demo/gnodao_v03","Files":[{"Name":"gnodao.gno","Body":"package gnodao\n\nimport (\n\t\"gno.land/p/demo/avl\"\n\tfmt \"gno.land/p/demo/ufmt\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype VoteOption uint32\n\nconst (\n\tYES          VoteOption = 0 // Indicates approval of the proposal in its current form.\n\tNO           VoteOption = 1 // Indicates disapproval of the proposal in its current form.\n\tNO_WITH_VETO VoteOption = 2 // Indicates stronger opposition to the proposal than simply voting No. Not available for SuperMajority-typed proposals as a simple No of 1/3 out of total votes would result in the same outcome.\n\tABSTAIN      VoteOption = 3 // Indicates that the voter is impartial to the outcome of the proposal. Although Abstain votes are counted towards the quorum, they're excluded when calculating the ratio of other voting options above.\n)\n\n// GNODAO VOTE\ntype Vote struct {\n\taddress   std.Address // address of the voter\n\ttimestamp uint64      // block timestamp of the vote\n\toption    VoteOption  // vote option\n}\n\ntype DAO struct {\n\tid               uint64\n\turi              string       // DAO homepage link\n\tmetadata         string       // DAO metadata reference link\n\tfunds            uint64       // DAO managing funds\n\tdepositHistory   []string     // deposit history - reserved for later use\n\tspendHistory     []string     // spend history - reserved for later use\n\tpermissions      []string     // permissions managed on DAO - reserved for later use\n\tpermMap          *avl.MutTree // permission map - reserved for later use\n\tvotingPowers     *avl.MutTree\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalStatus uint32\n\nconst (\n\tNIL           ProposalStatus = 0\n\tVOTING_PERIOD ProposalStatus = 1\n\tPASSED        ProposalStatus = 2\n\tREJECTED      ProposalStatus = 3\n\tFAILED        ProposalStatus = 4\n)\n\nfunc (s ProposalStatus) String() string {\n\tswitch s {\n\tcase NIL:\n\t\treturn \"Nil\"\n\tcase VOTING_PERIOD:\n\t\treturn \"VotingPeriod\"\n\tcase PASSED:\n\t\treturn \"Passed\"\n\tcase REJECTED:\n\t\treturn \"Rejected\"\n\tcase FAILED:\n\t\treturn \"Failed\"\n\t}\n\treturn \"\"\n}\n\ntype VotingPower struct {\n\taddress string\n\tpower   uint64\n}\n\ntype Proposal struct {\n\tdaoId        uint64         // dao id of the proposal\n\tid           uint64         // unique id assigned for each proposal\n\ttitle        string         // proposal title\n\tsummary      string         // proposal summary\n\tspendAmount  uint64         // amount of tokens to spend as part the proposal\n\tspender      std.Address    // address to receive spending tokens\n\tvpUpdates    []VotingPower  // updates on voting power - optional\n\tnewMetadata  string         // new metadata for the DAO - optional\n\tnewURI       string         // new URI for the DAO - optional\n\tsubmitTime   uint64         // proposal submission time\n\tvoteEndTime  uint64         // vote end time for the proposal\n\tstatus       ProposalStatus // StatusNil | StatusVotingPeriod | StatusPassed | StatusRejected | StatusFailed\n\tvotes        *avl.MutTree   // votes on the proposal\n\tvotingPowers []uint64       // voting power sum per voting option\n}\n\n// GNODAO STATE\nvar daos []DAO\nvar proposals [][]Proposal\n\nfunc getDAOVotingPower(daoId uint64, address string) uint64 {\n\tif len(daos) \u003c= int(daoId) {\n\t\treturn 0\n\t}\n\tres, ok := daos[daoId].votingPowers.Get(address)\n\tif ok {\n\t\treturn res.(uint64)\n\t}\n\treturn 0\n}\n\nfunc IsDAOMember(daoId uint64, address std.Address) bool {\n\treturn getDAOVotingPower(daoId, address.String()) \u003e 0\n}\n\nfunc getVote(daoId, proposalId uint64, address std.Address) (Vote, bool) {\n\tif int(daoId) \u003e= len(daos) {\n\t\treturn Vote{}, false\n\t}\n\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\treturn Vote{}, false\n\t}\n\n\tvote, ok := proposals[daoId][proposalId].votes.Get(address.String())\n\tif ok {\n\t\treturn vote.(Vote), true\n\t}\n\treturn Vote{}, false\n}\n\nfunc parseVotingPowers(daoMembers, votingPowers string) []VotingPower {\n\tparsedVPs := []VotingPower{}\n\tif len(daoMembers) == 0 {\n\t\treturn parsedVPs\n\t}\n\tmemberAddrs := strings.Split(daoMembers, \",\")\n\tmemberPowers := strings.Split(votingPowers, \",\")\n\tif len(memberAddrs) != len(memberPowers) {\n\t\tpanic(\"mismatch between members and voting powers count\")\n\t}\n\tfor i, memberAddr := range memberAddrs {\n\t\tpower, err := strconv.Atoi(memberPowers[i])\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tparsedVPs = append(parsedVPs, VotingPower{\n\t\t\taddress: memberAddr,\n\t\t\tpower:   uint64(power),\n\t\t})\n\t}\n\treturn parsedVPs\n}\n\n// GNODAO FUNCTIONS\nfunc CreateDAO(\n\turi string,\n\tmetadata string,\n\tdaoMembers string,\n\tvotingPowers string,\n\tvotingPeriod uint64,\n\tvoteQuorum uint64,\n\tthreshold uint64,\n\tvetoThreshold uint64,\n) {\n\tdaoId := uint64(len(daos))\n\tdaos = append(daos, DAO{\n\t\tid:               daoId,\n\t\turi:              uri,\n\t\tmetadata:         metadata,\n\t\tfunds:            0,\n\t\tdepositHistory:   []string{},\n\t\tspendHistory:     []string{},\n\t\tpermissions:      []string{},\n\t\tpermMap:          avl.NewMutTree(),\n\t\tvotingPowers:     avl.NewMutTree(),\n\t\ttotalVotingPower: 0,\n\t\tvotingPeriod:     votingPeriod,\n\t\tvoteQuorum:       voteQuorum,\n\t\tthreshold:        threshold,\n\t\tvetoThreshold:    vetoThreshold,\n\t})\n\n\tparsedVPs := parseVotingPowers(daoMembers, votingPowers)\n\ttotalVotingPower := uint64(0)\n\tfor _, vp := range parsedVPs {\n\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\ttotalVotingPower += vp.power\n\t}\n\tdaos[daoId].totalVotingPower = totalVotingPower\n\tproposals = append(proposals, []Proposal{})\n\t// TODO: emit events\n}\n\nfunc CreateProposal(\n\tdaoId uint64,\n\ttitle, summary string,\n\tspendAmount uint64, spender std.Address,\n\tdaoMembers string,\n\tvpUpdates string,\n\tnewMetadata string,\n\tnewURI string,\n) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a dao member\")\n\t}\n\n\tparsedVPUpdates := parseVotingPowers(daoMembers, vpUpdates)\n\tproposals[daoId] = append(proposals[daoId], Proposal{\n\t\tdaoId:        daoId,\n\t\tid:           uint64(len(proposals[daoId])),\n\t\ttitle:        title,\n\t\tsummary:      summary,\n\t\tspendAmount:  spendAmount,\n\t\tspender:      spender,\n\t\tvpUpdates:    parsedVPUpdates,\n\t\tnewMetadata:  newMetadata,\n\t\tnewURI:       newURI,\n\t\tsubmitTime:   uint64(time.Now().Unix()),\n\t\tvoteEndTime:  uint64(time.Now().Unix()) + daos[daoId].votingPeriod,\n\t\tstatus:       VOTING_PERIOD,\n\t\tvotes:        avl.NewMutTree(),\n\t\tvotingPowers: []uint64{0, 0, 0, 0}, // initiate as zero for 4 vote types\n\t})\n}\n\nfunc VoteProposal(daoId, proposalId uint64, option VoteOption) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// if invalid proposal, panic\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\n\t// if vote end time is reached panic\n\tif time.Now().Unix() \u003e int64(proposals[daoId][proposalId].voteEndTime) {\n\t\tpanic(\"vote end time reached\")\n\t}\n\n\t// Original vote cancel\n\tcallerVotingPower := getDAOVotingPower(daoId, caller.String())\n\tvote, ok := getVote(daoId, proposalId, caller)\n\tif ok {\n\t\tif proposals[daoId][proposalId].votingPowers[int(vote.option)] \u003e callerVotingPower {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] -= callerVotingPower\n\t\t} else {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] = 0\n\t\t}\n\t}\n\n\t// Create a vote\n\tproposals[daoId][proposalId].votes.Set(caller.String(), Vote{\n\t\taddress:   caller,\n\t\ttimestamp: uint64(time.Now().Unix()),\n\t\toption:    option,\n\t})\n\n\t// Voting power by option update for new vote\n\tproposals[daoId][proposalId].votingPowers[int(option)] += callerVotingPower\n}\n\n// TODO: handle voting power change during voting period for other proposal\n// TODO: experiment with gas limit\nfunc TallyAndExecute(daoId, proposalId uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// validation for proposalId\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\tdao := daos[daoId]\n\tproposal := proposals[daoId][proposalId]\n\tvotingPowers := proposal.votingPowers\n\n\tif time.Now().Unix() \u003c int64(proposal.voteEndTime) {\n\t\tpanic(\"proposal is in voting period\")\n\t}\n\n\t// reference logic for tally - https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/keeper/tally.go\n\ttotalVotes := votingPowers[YES] + votingPowers[NO] + votingPowers[NO_WITH_VETO] + votingPowers[ABSTAIN]\n\tif totalVotes \u003c dao.totalVotingPower*dao.voteQuorum/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If no one votes (everyone abstains), proposal rejected\n\tif totalVotes == votingPowers[ABSTAIN] {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/3 of voters veto, proposal rejected\n\tvetoThreshold := dao.vetoThreshold\n\tif votingPowers[NO_WITH_VETO] \u003e totalVotes*vetoThreshold/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote Yes, proposal passes\n\tthreshold := dao.threshold\n\tif votingPowers[YES] \u003e (totalVotes-votingPowers[ABSTAIN])*threshold/100 {\n\t\tproposals[daoId][proposalId].status = PASSED\n\n\t\t// TODO: spend coins when spendAmount is positive \u0026 spender is a valid address\n\t\tif proposal.spendAmount \u003e 0 {\n\t\t\tif daos[daoId].funds \u003e= proposal.spendAmount {\n\t\t\t\tdaos[daoId].funds -= proposal.spendAmount\n\t\t\t} else {\n\t\t\t\tproposals[daoId][proposalId].status = FAILED\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tif proposal.newMetadata != \"\" {\n\t\t\tdaos[daoId].metadata = proposal.newMetadata\n\t\t}\n\n\t\tif proposal.newURI != \"\" {\n\t\t\tdaos[daoId].uri = proposal.newURI\n\t\t}\n\n\t\tfor _, vp := range proposal.vpUpdates {\n\t\t\tdaos[daoId].totalVotingPower -= getDAOVotingPower(daoId, vp.address)\n\t\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\t\tdaos[daoId].totalVotingPower += vp.power\n\t\t}\n\n\t\t// TODO: contract does not own account that can hold coins - this is one of limitations\n\t\t// TODO: Adena Wallet from OnBloc - investigate on how they manage coins (swap - custody?)\n\t\t// Manual sending for funds (Address \u003c-\u003e Address) - Miloš Živković\n\t\t// https://github.com/gnolang/gno/blob/e392ab51bc05a5efbceaa8dbe395bac2e01ad808/tm2/pkg/crypto/keys/client/send.go#L109-L119\n\t\treturn\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote No, proposal rejected\n\tproposals[daoId][proposalId].status = REJECTED\n}\n\nfunc DepositDAO(daoId uint64, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// TODO: send coins from caller to DAO\n\t// TODO: verify received amount\n\t// daos[daoId].depositHistory = append(daos[daoId].depositHistory, Deposit{\n\t// \taddress: caller,\n\t// \tamount:  amount,\n\t// })\n}\n\nfunc GetDAO(daoId uint64) DAO {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\treturn daos[daoId]\n}\n\nfunc GetDAOs(startAfter, limit uint64) []DAO {\n\tmax := uint64(len(daos))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn daos[startAfter:max]\n}\n\nfunc GetProposal(daoId, proposalId uint64) Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\treturn proposals[daoId][proposalId]\n}\n\nfunc GetProposals(daoId, startAfter, limit uint64) []Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tmax := uint64(len(proposals[daoId]))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn proposals[daoId][startAfter:max]\n}\n\nfunc RenderVote(daoId, proposalId uint64, address std.Address) string {\n\tvote, found := getVote(daoId, proposalId, address)\n\tif !found {\n\t\treturn \"\"\n\t}\n\n\treturn fmt.Sprintf(`{\n\t\"address\": \"%s\",\n\t\"timestamp\": %d,\n\t\"option\": %d\n}`, vote.address.String(), vote.timestamp, vote.option)\n}\n\ntype DAOEncode struct {\n\tid               uint64\n\turi              string // DAO homepage link\n\tmetadata         string // DAO metadata reference link\n\tfunds            uint64 // DAO managing funds\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalEncode struct {\n\tdaoId        uint64\n\tid           uint64\n\ttitle        string\n\tsummary      string\n\tspendAmount  uint64\n\tspender      std.Address\n\tvpUpdates    []VotingPower\n\tnewMetadata  string\n\tnewURI       string\n\tsubmitTime   uint64\n\tvoteEndTime  uint64\n\tstatus       ProposalStatus\n\tvotingPowers []uint64\n}\n\nfunc GetDAOEncodeObject(dao DAO) DAOEncode {\n\treturn DAOEncode{\n\t\tid:               dao.id,\n\t\turi:              dao.uri,\n\t\tmetadata:         dao.metadata,\n\t\tfunds:            dao.funds,\n\t\ttotalVotingPower: dao.totalVotingPower,\n\t\tvotingPeriod:     dao.votingPeriod,\n\t\tvoteQuorum:       dao.voteQuorum,\n\t\tthreshold:        dao.threshold,\n\t\tvetoThreshold:    dao.vetoThreshold,\n\t}\n}\n\nfunc GetProposalEncodeObject(p Proposal) ProposalEncode {\n\treturn ProposalEncode{\n\t\tdaoId:        p.daoId,\n\t\tid:           p.id,\n\t\ttitle:        p.title,\n\t\tsummary:      p.summary,\n\t\tspendAmount:  p.spendAmount,\n\t\tspender:      p.spender,\n\t\tvpUpdates:    p.vpUpdates,\n\t\tnewMetadata:  p.newMetadata,\n\t\tnewURI:       p.newURI,\n\t\tsubmitTime:   p.submitTime,\n\t\tvoteEndTime:  p.voteEndTime,\n\t\tstatus:       p.status,\n\t\tvotingPowers: p.votingPowers,\n\t}\n}\n\nfunc RenderDAO(daoId uint64) string {\n\tdaoEncode := GetDAOEncodeObject(GetDAO(daoId))\n\n\treturn fmt.Sprintf(`{\n\t\"id\": %d,\n\t\"uri\": \"%s\",\n\t\"metadata\": \"%s\",\n\t\"funds\" %d,\n\t\"totalVotingPower\" %d,\n\t\"votingPeriod\" %d,\n\t\"voteQuorum\" %d,\n\t\"threshold\" %d,\n\t\"vetoThreshold\" %d\n}`, daoEncode.id, daoEncode.uri, daoEncode.metadata, daoEncode.funds, daoEncode.totalVotingPower, daoEncode.votingPeriod, daoEncode.voteQuorum, daoEncode.threshold, daoEncode.vetoThreshold)\n}\n\nfunc RenderDAOs(startAfter, limit uint64) string {\n\tdaos := GetDAOs(startAfter, limit)\n\tdaoEncodes := []DAOEncode{}\n\trendered := \"[\"\n\tfor index, dao := range daos {\n\t\trendered += RenderDAO(dao.id)\n\t\tif index != len(daos)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n\nfunc RenderProposal(daoId, proposalId uint64) string {\n\tp := GetProposalEncodeObject(GetProposal(daoId, proposalId))\n\tvpUpdatesRendered := \"[\"\n\tfor index, vpUpdate := range p.vpUpdates {\n\t\tvpUpdatesRendered += fmt.Sprintf(`{\n\t\"address\": \"%s\",\n\t\"power\": %d\n}`, vpUpdate.address, vpUpdate.power)\n\t\tif index != len(p.vpUpdates)-1 {\n\t\t\tvpUpdatesRendered += \",\\n\"\n\t\t}\n\t}\n\tvpUpdatesRendered += \"]\"\n\n\tvotingPowersBySumRendered := fmt.Sprintf(`[\n\t%d, %d, %d, %d\n]`, p.votingPowers[0], p.votingPowers[1], p.votingPowers[2], p.votingPowers[3])\n\n\treturn fmt.Sprintf(`{\n\t\"daoId\": %d,\n\t\"id\": %d,\n\t\"title\": \"%s\",\n\t\"summary\": \"%s\",\n\t\"spendAmount\": %d,\n\t\"spender\": \"%s\",\n\t\"newMetadata\": \"%s\",\n\t\"newURI\": \"%s\",\n\t\"submitTime\": %d,\n\t\"voteEndTime\": %d,\n\t\"status\": \"%s\",\n\t\"vpUpdates\": %s,\n\t\"votingPowers\": %s\n}`, p.daoId, p.id, p.title, p.summary, p.spendAmount, p.spender, p.newMetadata, p.newURI, p.submitTime, p.voteEndTime, p.status.String(), vpUpdatesRendered, votingPowersBySumRendered)\n}\n\nfunc RenderProposals(daoId, startAfter, limit uint64) string {\n\tproposals := GetProposals(daoId, startAfter, limit)\n\trendered := \"[\"\n\tfor index, proposal := range proposals {\n\t\trendered += RenderProposal(proposal.daoId, proposal.id)\n\t\tif index != len(proposals)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n\nfunc Render(path string) string {\n\treturn \"\"\n}\n"},{"Name":"gnodao_test.gno","Body":"package gnodao\n\nimport (\n\t\"fmt\"\n\t\"std\"\n\t\"testing\"\n\t\"time\"\n)\n\nvar caller std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnabcde\"\nvar caller1 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\"\nvar caller2 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\"\nvar daoMembers = []std.Address{\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnccccc\",\n}\nvar votingPowers = []VotingPower{\n\t{\n\t\taddress: daoMembers[0].String(),\n\t\tpower:   1,\n\t},\n\t{\n\t\taddress: daoMembers[1].String(),\n\t\tpower:   2,\n\t},\n\t{\n\t\taddress: daoMembers[2].String(),\n\t\tpower:   3,\n\t},\n}\n\nfunc assertPanic(t *testing.T, f func()) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t}\n\t}()\n\tf()\n}\n\nfunc TestIsDAOMember(t *testing.T) {\n\tdaos = []DAO{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\n\t// TODO: what package is ideal to use for checks?\n\tif IsDAOMember(0, caller) != false {\n\t\tt.Errorf(\"Should not be false\")\n\t}\n\tif IsDAOMember(0, caller1) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n\tif IsDAOMember(0, caller2) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n}\n\nfunc TestCreateDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\tif len(daos) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tif len(proposals) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tdao := daos[0]\n\tif dao.id != 0 {\n\t\tt.Errorf(\"first DAO id should be 0\")\n\t}\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"dao uri not set properly\")\n\t}\n\tif dao.metadata != \"https://metadata.gnodao1.org\" {\n\t\tt.Errorf(\"dao metadata not set properly\")\n\t}\n\tif dao.funds != 0 {\n\t\tt.Errorf(\"dao funds not set properly\")\n\t}\n\tif len(dao.depositHistory) != 0 {\n\t\tt.Errorf(\"dao deposit history not set properly\")\n\t}\n\tif len(dao.spendHistory) != 0 {\n\t\tt.Errorf(\"dao spend history not set properly\")\n\t}\n\tif len(dao.permissions) != 0 {\n\t\tt.Errorf(\"dao permissions not set properly\")\n\t}\n\tif dao.permMap == nil {\n\t\tt.Errorf(\"dao permission map not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 0 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller1.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller2.String()) != 2 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif dao.totalVotingPower != 6 {\n\t\tt.Errorf(\"totalVotingPower not set properly\")\n\t}\n\tif dao.votingPeriod != 86400*2 {\n\t\tt.Errorf(\"votingPeriod not set properly\")\n\t}\n\tif dao.voteQuorum != 30 {\n\t\tt.Errorf(\"voteQuorum not set properly\")\n\t}\n\tif dao.threshold != 10 {\n\t\tt.Errorf(\"threshold not set properly\")\n\t}\n\tif dao.vetoThreshold != 10 {\n\t\tt.Errorf(\"vetoThreshold not set properly\")\n\t}\n}\n\nfunc TestCreateProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\t})\n\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tproposal := proposals[0][0]\n\tif proposal.daoId != 0 {\n\t\tt.Errorf(\"proposal daoId should be 0\")\n\t}\n\tif proposal.id != 0 {\n\t\tt.Errorf(\"proposal id should be 0\")\n\t}\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"proposal title not set properly\")\n\t}\n\tif proposal.summary != \"Proposal to bootstrap DAO fund.\" {\n\t\tt.Errorf(\"proposal summary not set properly\")\n\t}\n\tif proposal.spendAmount != 0 {\n\t\tt.Errorf(\"proposal spendAmount not set properly\")\n\t}\n\tif proposal.spender != caller {\n\t\tt.Errorf(\"proposal spender not set properly\")\n\t}\n\tif len(proposal.vpUpdates) != 0 {\n\t\tt.Errorf(\"proposal vpUpdates not set properly\")\n\t}\n\tif proposal.newMetadata != \"\" {\n\t\tt.Errorf(\"proposal newMetadata not set properly\")\n\t}\n\tif proposal.newURI != \"\" {\n\t\tt.Errorf(\"proposal newURI not set properly\")\n\t}\n\tif proposal.submitTime != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"proposal submitTime not set properly\")\n\t}\n\tif proposal.voteEndTime != uint64(time.Now().Unix())+daos[0].votingPeriod {\n\t\tt.Errorf(\"proposal voteEndTime not set properly\")\n\t}\n\tif proposal.status != VOTING_PERIOD {\n\t\tt.Errorf(\"proposal status not set properly\")\n\t}\n\tif proposal.votes == nil {\n\t\tt.Errorf(\"proposal votes not set properly\")\n\t}\n\tif len(proposal.votingPowers) != 4 {\n\t\tt.Errorf(\"proposal votingPowers not set properly\")\n\t}\n}\n\nfunc TestVoteProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(1, 0, YES)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(0, 1, YES)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tVoteProposal(0, 0, YES)\n\t})\n\n\t// vote and check result is set properly\n\tstd.TestSetOrigCaller(caller1)\n\tVoteProposal(0, 0, YES)\n\tvote, found := getVote(0, 0, caller1)\n\tif !found {\n\t\tt.Errorf(\"proposal vote not set\")\n\t}\n\tif vote.address != caller1 {\n\t\tt.Errorf(\"vote address not set properly\")\n\t}\n\tif vote.timestamp != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"vote timestamp not set properly\")\n\t}\n\tif vote.option != YES {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 1 {\n\t\tt.Errorf(\"votePowers by vote option not set properly\")\n\t}\n\n\t// vote again with different option and check result\n\tVoteProposal(0, 0, NO)\n\tvote, found = getVote(0, 0, caller1)\n\tif vote.option != NO {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 0 {\n\t\tt.Errorf(\"votePowers for YES not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(NO)] != 1 {\n\t\tt.Errorf(\"votePowers for NO not set properly\")\n\t}\n\n\t// test vote end time already reached\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\t\tVoteProposal(0, 0, YES)\n\t})\n}\n\nfunc TestTallyAndExecute(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{\n\t\t{\n\t\t\taddress: caller.String(),\n\t\t\tpower:   1,\n\t\t},\n\t}, \"newMetadata.com\", \"newURI.com\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(1, 0)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 1)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tTallyAndExecute(0, 0)\n\t})\n\tassertPanic(t, func() { // vote end time not pass\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 0)\n\t})\n\n\t// vote end time to be reached\n\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\n\t// quorum not reached\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for vote quorum\")\n\t}\n\n\t// everyone abstains\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for all abstains\")\n\t}\n\n\t// more than 1/3 vote with NO_WITH_VETO\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower / 2\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = daos[0].totalVotingPower / 2\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for NO_WITH_VETO\")\n\t}\n\n\t// all YES vote\n\tproposals[0][0].votingPowers[ABSTAIN] = 0\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = 0\n\tproposals[0][0].votingPowers[YES] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != PASSED {\n\t\tt.Errorf(\"proposal should be PASSED\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif daos[0].metadata != \"newMetadata.com\" {\n\t\tt.Errorf(\"metadata not set properly\")\n\t}\n\tif daos[0].uri != \"newURI.com\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestDepositDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when not a dao member\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tDepositDAO(0, 100)\n\t})\n\n\t// not panics\n\tstd.TestSetOrigCaller(caller1)\n\tDepositDAO(0, 100)\n}\n\nfunc TestGetDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tGetDAO(100)\n\t})\n\n\t// success when valid dao id\n\tdao := GetDAO(0)\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestGetDAOs(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tgotDaos := GetDAOs(0, 10)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tCreateDAO(\"https://gnodao2.org\", \"https://metadata.gnodao2.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tgotDaos = GetDAOs(0, 0)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 10)\n\tif len(gotDaos) != 2 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 1)\n\tif len(gotDaos) != 1 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n}\n\nfunc TestGetProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tGetProposal(1, 0)\n\t})\n\n\t// panic when invalid proposal id\n\tassertPanic(t, func() {\n\t\tGetProposal(0, 1)\n\t})\n\n\t// success when valid dao id and proposal id\n\tproposal := GetProposal(0, 0)\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"title not set properly\")\n\t}\n}\n\nfunc TestGetProposals(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tassertPanic(t, func() { // invalid dao id\n\t\tGetProposals(0, 0, 10)\n\t})\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"proposal #1\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\tCreateProposal(0, \"proposal #2\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\tgotProposals := GetProposals(0, 0, 0)\n\tif len(gotProposals) != 0 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 10)\n\tif len(gotProposals) != 2 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 1)\n\tif len(gotProposals) != 1 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n}\n\nfunc TestRender(t *testing.T) {\n\tif Render(\"\") != \"\" {\n\t\tt.Errorf(\"Render function should empty\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"+VOnnsdiXauc709MhleCG6l8ySuNbfla45QIgPcDAVBbNu/MGTuIAVOzgiaAs6XeKcQulLRVHSs6m9HXTAUE8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/gnodao_v03","func":"CreateDAO","args":["https://gnodao1.org","https://metadata.gnodao1.org","g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","1","40","30","10","10"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"xrZ+R4CqR72KcZle/JzEK89rthGwPhoZ+aEhtURgZMcGN1uDCwXmlS31rZx75OV9Z8gYbTGz5TobfwN+L+LDdw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/gnodao_v03","func":"CreateProposal","args":["0","First proposal","First proposal summary","0","g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","","","https://metadata.gnodao1.com","https://gnodao1.com"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"O6tES5KWgBma6/pyUm22vujcPvPlPfAPq0kcMLI/1JRCmAMQZaIk7VEDckMzt3/+zL6aPNnHpgrOUkJfGMWedQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/gnodao_v03","func":"VoteProposal","args":["0","1","0"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"Ysw3ZMpkZppFFnORJOoWtsGcj3YRbHaIsjrMc4Re6Xp2/NKjjdDCJuErWukO1QQqlvyKUVCZp9E8NUTR87FSpA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"gnodao","Path":"gno.land/r/demo/gnodao_v04","Files":[{"Name":"gnodao.gno","Body":"package gnodao\n\nimport (\n\t\"gno.land/p/demo/avl\"\n\tfmt \"gno.land/p/demo/ufmt\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype VoteOption uint32\n\nconst (\n\tYES          VoteOption = 0 // Indicates approval of the proposal in its current form.\n\tNO           VoteOption = 1 // Indicates disapproval of the proposal in its current form.\n\tNO_WITH_VETO VoteOption = 2 // Indicates stronger opposition to the proposal than simply voting No. Not available for SuperMajority-typed proposals as a simple No of 1/3 out of total votes would result in the same outcome.\n\tABSTAIN      VoteOption = 3 // Indicates that the voter is impartial to the outcome of the proposal. Although Abstain votes are counted towards the quorum, they're excluded when calculating the ratio of other voting options above.\n)\n\n// GNODAO VOTE\ntype Vote struct {\n\taddress   std.Address // address of the voter\n\ttimestamp uint64      // block timestamp of the vote\n\toption    VoteOption  // vote option\n}\n\ntype DAO struct {\n\tid               uint64\n\turi              string       // DAO homepage link\n\tmetadata         string       // DAO metadata reference link\n\tfunds            uint64       // DAO managing funds\n\tdepositHistory   []string     // deposit history - reserved for later use\n\tspendHistory     []string     // spend history - reserved for later use\n\tpermissions      []string     // permissions managed on DAO - reserved for later use\n\tpermMap          *avl.MutTree // permission map - reserved for later use\n\tvotingPowers     *avl.MutTree\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalStatus uint32\n\nconst (\n\tNIL           ProposalStatus = 0\n\tVOTING_PERIOD ProposalStatus = 1\n\tPASSED        ProposalStatus = 2\n\tREJECTED      ProposalStatus = 3\n\tFAILED        ProposalStatus = 4\n)\n\nfunc (s ProposalStatus) String() string {\n\tswitch s {\n\tcase NIL:\n\t\treturn \"Nil\"\n\tcase VOTING_PERIOD:\n\t\treturn \"VotingPeriod\"\n\tcase PASSED:\n\t\treturn \"Passed\"\n\tcase REJECTED:\n\t\treturn \"Rejected\"\n\tcase FAILED:\n\t\treturn \"Failed\"\n\t}\n\treturn \"\"\n}\n\ntype VotingPower struct {\n\taddress string\n\tpower   uint64\n}\n\ntype Proposal struct {\n\tdaoId        uint64         // dao id of the proposal\n\tid           uint64         // unique id assigned for each proposal\n\ttitle        string         // proposal title\n\tsummary      string         // proposal summary\n\tspendAmount  uint64         // amount of tokens to spend as part the proposal\n\tspender      std.Address    // address to receive spending tokens\n\tvpUpdates    []VotingPower  // updates on voting power - optional\n\tnewMetadata  string         // new metadata for the DAO - optional\n\tnewURI       string         // new URI for the DAO - optional\n\tsubmitTime   uint64         // proposal submission time\n\tvoteEndTime  uint64         // vote end time for the proposal\n\tstatus       ProposalStatus // StatusNil | StatusVotingPeriod | StatusPassed | StatusRejected | StatusFailed\n\tvotes        *avl.MutTree   // votes on the proposal\n\tvotingPowers []uint64       // voting power sum per voting option\n}\n\n// GNODAO STATE\nvar daos []DAO\nvar proposals [][]Proposal\n\nfunc getDAOVotingPower(daoId uint64, address string) uint64 {\n\tif len(daos) \u003c= int(daoId) {\n\t\treturn 0\n\t}\n\tres, ok := daos[daoId].votingPowers.Get(address)\n\tif ok {\n\t\treturn res.(uint64)\n\t}\n\treturn 0\n}\n\nfunc IsDAOMember(daoId uint64, address std.Address) bool {\n\treturn getDAOVotingPower(daoId, address.String()) \u003e 0\n}\n\nfunc getVote(daoId, proposalId uint64, address std.Address) (Vote, bool) {\n\tif int(daoId) \u003e= len(daos) {\n\t\treturn Vote{}, false\n\t}\n\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\treturn Vote{}, false\n\t}\n\n\tvote, ok := proposals[daoId][proposalId].votes.Get(address.String())\n\tif ok {\n\t\treturn vote.(Vote), true\n\t}\n\treturn Vote{}, false\n}\n\nfunc parseVotingPowers(daoMembers, votingPowers string) []VotingPower {\n\tparsedVPs := []VotingPower{}\n\tif len(daoMembers) == 0 {\n\t\treturn parsedVPs\n\t}\n\tmemberAddrs := strings.Split(daoMembers, \",\")\n\tmemberPowers := strings.Split(votingPowers, \",\")\n\tif len(memberAddrs) != len(memberPowers) {\n\t\tpanic(\"mismatch between members and voting powers count\")\n\t}\n\tfor i, memberAddr := range memberAddrs {\n\t\tpower, err := strconv.Atoi(memberPowers[i])\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tparsedVPs = append(parsedVPs, VotingPower{\n\t\t\taddress: memberAddr,\n\t\t\tpower:   uint64(power),\n\t\t})\n\t}\n\treturn parsedVPs\n}\n\n// GNODAO FUNCTIONS\nfunc CreateDAO(\n\turi string,\n\tmetadata string,\n\tdaoMembers string,\n\tvotingPowers string,\n\tvotingPeriod uint64,\n\tvoteQuorum uint64,\n\tthreshold uint64,\n\tvetoThreshold uint64,\n) {\n\tdaoId := uint64(len(daos))\n\tdaos = append(daos, DAO{\n\t\tid:               daoId,\n\t\turi:              uri,\n\t\tmetadata:         metadata,\n\t\tfunds:            0,\n\t\tdepositHistory:   []string{},\n\t\tspendHistory:     []string{},\n\t\tpermissions:      []string{},\n\t\tpermMap:          avl.NewMutTree(),\n\t\tvotingPowers:     avl.NewMutTree(),\n\t\ttotalVotingPower: 0,\n\t\tvotingPeriod:     votingPeriod,\n\t\tvoteQuorum:       voteQuorum,\n\t\tthreshold:        threshold,\n\t\tvetoThreshold:    vetoThreshold,\n\t})\n\n\tparsedVPs := parseVotingPowers(daoMembers, votingPowers)\n\ttotalVotingPower := uint64(0)\n\tfor _, vp := range parsedVPs {\n\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\ttotalVotingPower += vp.power\n\t}\n\tdaos[daoId].totalVotingPower = totalVotingPower\n\tproposals = append(proposals, []Proposal{})\n\t// TODO: emit events\n}\n\nfunc CreateProposal(\n\tdaoId uint64,\n\ttitle, summary string,\n\tspendAmount uint64, spender std.Address,\n\tdaoMembers string,\n\tvpUpdates string,\n\tnewMetadata string,\n\tnewURI string,\n) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a dao member\")\n\t}\n\n\tparsedVPUpdates := parseVotingPowers(daoMembers, vpUpdates)\n\tproposals[daoId] = append(proposals[daoId], Proposal{\n\t\tdaoId:        daoId,\n\t\tid:           uint64(len(proposals[daoId])),\n\t\ttitle:        title,\n\t\tsummary:      summary,\n\t\tspendAmount:  spendAmount,\n\t\tspender:      spender,\n\t\tvpUpdates:    parsedVPUpdates,\n\t\tnewMetadata:  newMetadata,\n\t\tnewURI:       newURI,\n\t\tsubmitTime:   uint64(time.Now().Unix()),\n\t\tvoteEndTime:  uint64(time.Now().Unix()) + daos[daoId].votingPeriod,\n\t\tstatus:       VOTING_PERIOD,\n\t\tvotes:        avl.NewMutTree(),\n\t\tvotingPowers: []uint64{0, 0, 0, 0}, // initiate as zero for 4 vote types\n\t})\n}\n\nfunc VoteProposal(daoId, proposalId uint64, option VoteOption) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// if invalid proposal, panic\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\n\t// if vote end time is reached panic\n\tif time.Now().Unix() \u003e int64(proposals[daoId][proposalId].voteEndTime) {\n\t\tpanic(\"vote end time reached\")\n\t}\n\n\t// Original vote cancel\n\tcallerVotingPower := getDAOVotingPower(daoId, caller.String())\n\tvote, ok := getVote(daoId, proposalId, caller)\n\tif ok {\n\t\tif proposals[daoId][proposalId].votingPowers[int(vote.option)] \u003e callerVotingPower {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] -= callerVotingPower\n\t\t} else {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] = 0\n\t\t}\n\t}\n\n\t// Create a vote\n\tproposals[daoId][proposalId].votes.Set(caller.String(), Vote{\n\t\taddress:   caller,\n\t\ttimestamp: uint64(time.Now().Unix()),\n\t\toption:    option,\n\t})\n\n\t// Voting power by option update for new vote\n\tproposals[daoId][proposalId].votingPowers[int(option)] += callerVotingPower\n}\n\n// TODO: handle voting power change during voting period for other proposal\n// TODO: experiment with gas limit\nfunc TallyAndExecute(daoId, proposalId uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// validation for proposalId\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\tdao := daos[daoId]\n\tproposal := proposals[daoId][proposalId]\n\tvotingPowers := proposal.votingPowers\n\n\tif time.Now().Unix() \u003c int64(proposal.voteEndTime) {\n\t\tpanic(\"proposal is in voting period\")\n\t}\n\n\t// reference logic for tally - https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/keeper/tally.go\n\ttotalVotes := votingPowers[YES] + votingPowers[NO] + votingPowers[NO_WITH_VETO] + votingPowers[ABSTAIN]\n\tif totalVotes \u003c dao.totalVotingPower*dao.voteQuorum/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If no one votes (everyone abstains), proposal rejected\n\tif totalVotes == votingPowers[ABSTAIN] {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/3 of voters veto, proposal rejected\n\tvetoThreshold := dao.vetoThreshold\n\tif votingPowers[NO_WITH_VETO] \u003e totalVotes*vetoThreshold/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote Yes, proposal passes\n\tthreshold := dao.threshold\n\tif votingPowers[YES] \u003e (totalVotes-votingPowers[ABSTAIN])*threshold/100 {\n\t\tproposals[daoId][proposalId].status = PASSED\n\n\t\t// TODO: spend coins when spendAmount is positive \u0026 spender is a valid address\n\t\tif proposal.spendAmount \u003e 0 {\n\t\t\tif daos[daoId].funds \u003e= proposal.spendAmount {\n\t\t\t\tdaos[daoId].funds -= proposal.spendAmount\n\t\t\t} else {\n\t\t\t\tproposals[daoId][proposalId].status = FAILED\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tif proposal.newMetadata != \"\" {\n\t\t\tdaos[daoId].metadata = proposal.newMetadata\n\t\t}\n\n\t\tif proposal.newURI != \"\" {\n\t\t\tdaos[daoId].uri = proposal.newURI\n\t\t}\n\n\t\tfor _, vp := range proposal.vpUpdates {\n\t\t\tdaos[daoId].totalVotingPower -= getDAOVotingPower(daoId, vp.address)\n\t\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\t\tdaos[daoId].totalVotingPower += vp.power\n\t\t}\n\n\t\t// TODO: contract does not own account that can hold coins - this is one of limitations\n\t\t// TODO: Adena Wallet from OnBloc - investigate on how they manage coins (swap - custody?)\n\t\t// Manual sending for funds (Address \u003c-\u003e Address) - Miloš Živković\n\t\t// https://github.com/gnolang/gno/blob/e392ab51bc05a5efbceaa8dbe395bac2e01ad808/tm2/pkg/crypto/keys/client/send.go#L109-L119\n\t\treturn\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote No, proposal rejected\n\tproposals[daoId][proposalId].status = REJECTED\n}\n\nfunc DepositDAO(daoId uint64, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// TODO: send coins from caller to DAO\n\t// TODO: verify received amount\n\t// daos[daoId].depositHistory = append(daos[daoId].depositHistory, Deposit{\n\t// \taddress: caller,\n\t// \tamount:  amount,\n\t// })\n}\n\nfunc GetDAO(daoId uint64) DAO {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\treturn daos[daoId]\n}\n\nfunc GetDAOs(startAfter, limit uint64) []DAO {\n\tmax := uint64(len(daos))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn daos[startAfter:max]\n}\n\nfunc GetProposal(daoId, proposalId uint64) Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\treturn proposals[daoId][proposalId]\n}\n\nfunc GetProposals(daoId, startAfter, limit uint64) []Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tmax := uint64(len(proposals[daoId]))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn proposals[daoId][startAfter:max]\n}\n\nfunc RenderVote(daoId, proposalId uint64, address std.Address) string {\n\tvote, found := getVote(daoId, proposalId, address)\n\tif !found {\n\t\treturn \"\"\n\t}\n\n\treturn fmt.Sprintf(`{\n\t\"address\": \"%s\",\n\t\"timestamp\": %d,\n\t\"option\": %d\n}`, vote.address.String(), vote.timestamp, vote.option)\n}\n\ntype DAOEncode struct {\n\tid               uint64\n\turi              string // DAO homepage link\n\tmetadata         string // DAO metadata reference link\n\tfunds            uint64 // DAO managing funds\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalEncode struct {\n\tdaoId        uint64\n\tid           uint64\n\ttitle        string\n\tsummary      string\n\tspendAmount  uint64\n\tspender      std.Address\n\tvpUpdates    []VotingPower\n\tnewMetadata  string\n\tnewURI       string\n\tsubmitTime   uint64\n\tvoteEndTime  uint64\n\tstatus       ProposalStatus\n\tvotingPowers []uint64\n}\n\nfunc GetDAOEncodeObject(dao DAO) DAOEncode {\n\treturn DAOEncode{\n\t\tid:               dao.id,\n\t\turi:              dao.uri,\n\t\tmetadata:         dao.metadata,\n\t\tfunds:            dao.funds,\n\t\ttotalVotingPower: dao.totalVotingPower,\n\t\tvotingPeriod:     dao.votingPeriod,\n\t\tvoteQuorum:       dao.voteQuorum,\n\t\tthreshold:        dao.threshold,\n\t\tvetoThreshold:    dao.vetoThreshold,\n\t}\n}\n\nfunc GetProposalEncodeObject(p Proposal) ProposalEncode {\n\treturn ProposalEncode{\n\t\tdaoId:        p.daoId,\n\t\tid:           p.id,\n\t\ttitle:        p.title,\n\t\tsummary:      p.summary,\n\t\tspendAmount:  p.spendAmount,\n\t\tspender:      p.spender,\n\t\tvpUpdates:    p.vpUpdates,\n\t\tnewMetadata:  p.newMetadata,\n\t\tnewURI:       p.newURI,\n\t\tsubmitTime:   p.submitTime,\n\t\tvoteEndTime:  p.voteEndTime,\n\t\tstatus:       p.status,\n\t\tvotingPowers: p.votingPowers,\n\t}\n}\n\nfunc RenderDAO(daoId uint64) string {\n\tdaoEncode := GetDAOEncodeObject(GetDAO(daoId))\n\n\treturn fmt.Sprintf(`{\n\t\"id\": %d,\n\t\"uri\": \"%s\",\n\t\"metadata\": \"%s\",\n\t\"funds\" %d,\n\t\"totalVotingPower\" %d,\n\t\"votingPeriod\" %d,\n\t\"voteQuorum\" %d,\n\t\"threshold\" %d,\n\t\"vetoThreshold\" %d\n}`, daoEncode.id, daoEncode.uri, daoEncode.metadata, daoEncode.funds, daoEncode.totalVotingPower, daoEncode.votingPeriod, daoEncode.voteQuorum, daoEncode.threshold, daoEncode.vetoThreshold)\n}\n\nfunc RenderDAOs(startAfter, limit uint64) string {\n\tdaos := GetDAOs(startAfter, limit)\n\tdaoEncodes := []DAOEncode{}\n\trendered := \"[\"\n\tfor index, dao := range daos {\n\t\trendered += RenderDAO(dao.id)\n\t\tif index != len(daos)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n\nfunc RenderProposal(daoId, proposalId uint64) string {\n\tp := GetProposalEncodeObject(GetProposal(daoId, proposalId))\n\tvpUpdatesRendered := \"[\"\n\tfor index, vpUpdate := range p.vpUpdates {\n\t\tvpUpdatesRendered += fmt.Sprintf(`{\n\t\"address\": \"%s\",\n\t\"power\": %d\n}`, vpUpdate.address, vpUpdate.power)\n\t\tif index != len(p.vpUpdates)-1 {\n\t\t\tvpUpdatesRendered += \",\\n\"\n\t\t}\n\t}\n\tvpUpdatesRendered += \"]\"\n\n\tvotingPowersBySumRendered := fmt.Sprintf(`[%d, %d, %d, %d]`, p.votingPowers[0], p.votingPowers[1], p.votingPowers[2], p.votingPowers[3])\n\n\treturn fmt.Sprintf(`{\n\t\"daoId\": %d,\n\t\"id\": %d,\n\t\"title\": \"%s\",\n\t\"summary\": \"%s\",\n\t\"spendAmount\": %d,\n\t\"spender\": \"%s\",\n\t\"newMetadata\": \"%s\",\n\t\"newURI\": \"%s\",\n\t\"submitTime\": %d,\n\t\"voteEndTime\": %d,\n\t\"status\": %d,\n\t\"vpUpdates\": %s,\n\t\"votingPowers\": %s\n}`, p.daoId, p.id, p.title, p.summary, p.spendAmount, p.spender.String(), p.newMetadata, p.newURI, p.submitTime, p.voteEndTime, p.status, vpUpdatesRendered, votingPowersBySumRendered)\n}\n\nfunc RenderProposals(daoId, startAfter, limit uint64) string {\n\tproposals := GetProposals(daoId, startAfter, limit)\n\trendered := \"[\"\n\tfor index, proposal := range proposals {\n\t\trendered += RenderProposal(proposal.daoId, proposal.id)\n\t\tif index != len(proposals)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n\nfunc Render(path string) string {\n\treturn \"\"\n}\n"},{"Name":"gnodao_test.gno","Body":"package gnodao\n\nimport (\n\t\"fmt\"\n\t\"std\"\n\t\"testing\"\n\t\"time\"\n)\n\nvar caller std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnabcde\"\nvar caller1 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\"\nvar caller2 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\"\nvar daoMembers = []std.Address{\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnccccc\",\n}\nvar votingPowers = []VotingPower{\n\t{\n\t\taddress: daoMembers[0].String(),\n\t\tpower:   1,\n\t},\n\t{\n\t\taddress: daoMembers[1].String(),\n\t\tpower:   2,\n\t},\n\t{\n\t\taddress: daoMembers[2].String(),\n\t\tpower:   3,\n\t},\n}\n\nfunc assertPanic(t *testing.T, f func()) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t}\n\t}()\n\tf()\n}\n\nfunc TestIsDAOMember(t *testing.T) {\n\tdaos = []DAO{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\n\t// TODO: what package is ideal to use for checks?\n\tif IsDAOMember(0, caller) != false {\n\t\tt.Errorf(\"Should not be false\")\n\t}\n\tif IsDAOMember(0, caller1) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n\tif IsDAOMember(0, caller2) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n}\n\nfunc TestCreateDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\tif len(daos) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tif len(proposals) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tdao := daos[0]\n\tif dao.id != 0 {\n\t\tt.Errorf(\"first DAO id should be 0\")\n\t}\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"dao uri not set properly\")\n\t}\n\tif dao.metadata != \"https://metadata.gnodao1.org\" {\n\t\tt.Errorf(\"dao metadata not set properly\")\n\t}\n\tif dao.funds != 0 {\n\t\tt.Errorf(\"dao funds not set properly\")\n\t}\n\tif len(dao.depositHistory) != 0 {\n\t\tt.Errorf(\"dao deposit history not set properly\")\n\t}\n\tif len(dao.spendHistory) != 0 {\n\t\tt.Errorf(\"dao spend history not set properly\")\n\t}\n\tif len(dao.permissions) != 0 {\n\t\tt.Errorf(\"dao permissions not set properly\")\n\t}\n\tif dao.permMap == nil {\n\t\tt.Errorf(\"dao permission map not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 0 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller1.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller2.String()) != 2 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif dao.totalVotingPower != 6 {\n\t\tt.Errorf(\"totalVotingPower not set properly\")\n\t}\n\tif dao.votingPeriod != 86400*2 {\n\t\tt.Errorf(\"votingPeriod not set properly\")\n\t}\n\tif dao.voteQuorum != 30 {\n\t\tt.Errorf(\"voteQuorum not set properly\")\n\t}\n\tif dao.threshold != 10 {\n\t\tt.Errorf(\"threshold not set properly\")\n\t}\n\tif dao.vetoThreshold != 10 {\n\t\tt.Errorf(\"vetoThreshold not set properly\")\n\t}\n}\n\nfunc TestCreateProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\t})\n\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tproposal := proposals[0][0]\n\tif proposal.daoId != 0 {\n\t\tt.Errorf(\"proposal daoId should be 0\")\n\t}\n\tif proposal.id != 0 {\n\t\tt.Errorf(\"proposal id should be 0\")\n\t}\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"proposal title not set properly\")\n\t}\n\tif proposal.summary != \"Proposal to bootstrap DAO fund.\" {\n\t\tt.Errorf(\"proposal summary not set properly\")\n\t}\n\tif proposal.spendAmount != 0 {\n\t\tt.Errorf(\"proposal spendAmount not set properly\")\n\t}\n\tif proposal.spender != caller {\n\t\tt.Errorf(\"proposal spender not set properly\")\n\t}\n\tif len(proposal.vpUpdates) != 0 {\n\t\tt.Errorf(\"proposal vpUpdates not set properly\")\n\t}\n\tif proposal.newMetadata != \"\" {\n\t\tt.Errorf(\"proposal newMetadata not set properly\")\n\t}\n\tif proposal.newURI != \"\" {\n\t\tt.Errorf(\"proposal newURI not set properly\")\n\t}\n\tif proposal.submitTime != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"proposal submitTime not set properly\")\n\t}\n\tif proposal.voteEndTime != uint64(time.Now().Unix())+daos[0].votingPeriod {\n\t\tt.Errorf(\"proposal voteEndTime not set properly\")\n\t}\n\tif proposal.status != VOTING_PERIOD {\n\t\tt.Errorf(\"proposal status not set properly\")\n\t}\n\tif proposal.votes == nil {\n\t\tt.Errorf(\"proposal votes not set properly\")\n\t}\n\tif len(proposal.votingPowers) != 4 {\n\t\tt.Errorf(\"proposal votingPowers not set properly\")\n\t}\n}\n\nfunc TestVoteProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(1, 0, YES)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(0, 1, YES)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tVoteProposal(0, 0, YES)\n\t})\n\n\t// vote and check result is set properly\n\tstd.TestSetOrigCaller(caller1)\n\tVoteProposal(0, 0, YES)\n\tvote, found := getVote(0, 0, caller1)\n\tif !found {\n\t\tt.Errorf(\"proposal vote not set\")\n\t}\n\tif vote.address != caller1 {\n\t\tt.Errorf(\"vote address not set properly\")\n\t}\n\tif vote.timestamp != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"vote timestamp not set properly\")\n\t}\n\tif vote.option != YES {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 1 {\n\t\tt.Errorf(\"votePowers by vote option not set properly\")\n\t}\n\n\t// vote again with different option and check result\n\tVoteProposal(0, 0, NO)\n\tvote, found = getVote(0, 0, caller1)\n\tif vote.option != NO {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 0 {\n\t\tt.Errorf(\"votePowers for YES not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(NO)] != 1 {\n\t\tt.Errorf(\"votePowers for NO not set properly\")\n\t}\n\n\t// test vote end time already reached\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\t\tVoteProposal(0, 0, YES)\n\t})\n}\n\nfunc TestTallyAndExecute(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{\n\t\t{\n\t\t\taddress: caller.String(),\n\t\t\tpower:   1,\n\t\t},\n\t}, \"newMetadata.com\", \"newURI.com\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(1, 0)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 1)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tTallyAndExecute(0, 0)\n\t})\n\tassertPanic(t, func() { // vote end time not pass\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 0)\n\t})\n\n\t// vote end time to be reached\n\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\n\t// quorum not reached\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for vote quorum\")\n\t}\n\n\t// everyone abstains\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for all abstains\")\n\t}\n\n\t// more than 1/3 vote with NO_WITH_VETO\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower / 2\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = daos[0].totalVotingPower / 2\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for NO_WITH_VETO\")\n\t}\n\n\t// all YES vote\n\tproposals[0][0].votingPowers[ABSTAIN] = 0\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = 0\n\tproposals[0][0].votingPowers[YES] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != PASSED {\n\t\tt.Errorf(\"proposal should be PASSED\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif daos[0].metadata != \"newMetadata.com\" {\n\t\tt.Errorf(\"metadata not set properly\")\n\t}\n\tif daos[0].uri != \"newURI.com\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestDepositDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when not a dao member\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tDepositDAO(0, 100)\n\t})\n\n\t// not panics\n\tstd.TestSetOrigCaller(caller1)\n\tDepositDAO(0, 100)\n}\n\nfunc TestGetDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tGetDAO(100)\n\t})\n\n\t// success when valid dao id\n\tdao := GetDAO(0)\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestGetDAOs(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tgotDaos := GetDAOs(0, 10)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tCreateDAO(\"https://gnodao2.org\", \"https://metadata.gnodao2.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tgotDaos = GetDAOs(0, 0)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 10)\n\tif len(gotDaos) != 2 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 1)\n\tif len(gotDaos) != 1 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n}\n\nfunc TestGetProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tGetProposal(1, 0)\n\t})\n\n\t// panic when invalid proposal id\n\tassertPanic(t, func() {\n\t\tGetProposal(0, 1)\n\t})\n\n\t// success when valid dao id and proposal id\n\tproposal := GetProposal(0, 0)\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"title not set properly\")\n\t}\n}\n\nfunc TestGetProposals(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tassertPanic(t, func() { // invalid dao id\n\t\tGetProposals(0, 0, 10)\n\t})\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"proposal #1\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\tCreateProposal(0, \"proposal #2\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\tgotProposals := GetProposals(0, 0, 0)\n\tif len(gotProposals) != 0 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 10)\n\tif len(gotProposals) != 2 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 1)\n\tif len(gotProposals) != 1 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n}\n\nfunc TestRender(t *testing.T) {\n\tif Render(\"\") != \"\" {\n\t\tt.Errorf(\"Render function should empty\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"1g+2PsmqpHqCBIABC4NXOb6aP7+tJtGhM1yoL1pSuOQg0H05hty9N1fo4CqGJfiKCOkfPU3hDqs1beGP0FhE8w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/gnodao_v04","func":"CreateDAO","args":["https://gnodao1.org","https://metadata.gnodao1.org","g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","1","40","30","10","10"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"YbzjbyIEi6uzsZnFJe0JWXNzw/wpuotE+AEvRRFyY/h9BaYlhgJ8gTKH0zh9VyJ01qu5aPsqyt3YvlVC2kks9g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/gnodao_v04","func":"CreateProposal","args":["0","First proposal","First proposal summary","0","g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","","","https://metadata.gnodao1.com","https://gnodao1.com"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"bnEHxTMOY2PxZNZ95sawhMU0LrQT3c/Mx7aaQc7qfnYK17BSpDuPAt1NnFTxTxpyY2Cchc3QdfEPM0yKda/YJw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/gnodao_v04","func":"VoteProposal","args":["0","0","0"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"T6ex67rTqTAXUEl2pTIfXEQAvf/uMDVerdM5SpbAwkp4eRCHBWyYYX+HZ/iQRBLqPeQujPMrZsMRxN/0HbqZ7Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/gnodao_v04","func":"TallyAndExecute","args":["0","1"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"d3JLuPYRQhUF/zr2ZWlo2Hq1QIVKfsPzufuV/O2RNQYWTyxjcWhmSYrQjAMuXj5UuCjUCIxWuoA7feohZCyGZA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/gnodao_v04","func":"TallyAndExecute","args":["0","0"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"BcNTByekKF2WFR4OZk5uqHETQLL2/U9L9rKc2ua+dw45pGyUXh13uGKwfkL3LcOSrVB8ppBeuDXoXsrJdk9trg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"gnodao","Path":"gno.land/r/demo/gnodao_v04","Files":[{"Name":"gnodao.gno","Body":"package gnodao\n\nimport (\n\t\"gno.land/p/demo/avl\"\n\tfmt \"gno.land/p/demo/ufmt\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype VoteOption uint32\n\nconst (\n\tYES          VoteOption = 0 // Indicates approval of the proposal in its current form.\n\tNO           VoteOption = 1 // Indicates disapproval of the proposal in its current form.\n\tNO_WITH_VETO VoteOption = 2 // Indicates stronger opposition to the proposal than simply voting No. Not available for SuperMajority-typed proposals as a simple No of 1/3 out of total votes would result in the same outcome.\n\tABSTAIN      VoteOption = 3 // Indicates that the voter is impartial to the outcome of the proposal. Although Abstain votes are counted towards the quorum, they're excluded when calculating the ratio of other voting options above.\n)\n\n// GNODAO VOTE\ntype Vote struct {\n\taddress   std.Address // address of the voter\n\ttimestamp uint64      // block timestamp of the vote\n\toption    VoteOption  // vote option\n}\n\ntype DAO struct {\n\tid               uint64\n\turi              string       // DAO homepage link\n\tmetadata         string       // DAO metadata reference link\n\tfunds            uint64       // DAO managing funds\n\tdepositHistory   []string     // deposit history - reserved for later use\n\tspendHistory     []string     // spend history - reserved for later use\n\tpermissions      []string     // permissions managed on DAO - reserved for later use\n\tpermMap          *avl.MutTree // permission map - reserved for later use\n\tvotingPowers     *avl.MutTree\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalStatus uint32\n\nconst (\n\tNIL           ProposalStatus = 0\n\tVOTING_PERIOD ProposalStatus = 1\n\tPASSED        ProposalStatus = 2\n\tREJECTED      ProposalStatus = 3\n\tFAILED        ProposalStatus = 4\n)\n\nfunc (s ProposalStatus) String() string {\n\tswitch s {\n\tcase NIL:\n\t\treturn \"Nil\"\n\tcase VOTING_PERIOD:\n\t\treturn \"VotingPeriod\"\n\tcase PASSED:\n\t\treturn \"Passed\"\n\tcase REJECTED:\n\t\treturn \"Rejected\"\n\tcase FAILED:\n\t\treturn \"Failed\"\n\t}\n\treturn \"\"\n}\n\ntype VotingPower struct {\n\taddress string\n\tpower   uint64\n}\n\ntype Proposal struct {\n\tdaoId        uint64         // dao id of the proposal\n\tid           uint64         // unique id assigned for each proposal\n\ttitle        string         // proposal title\n\tsummary      string         // proposal summary\n\tspendAmount  uint64         // amount of tokens to spend as part the proposal\n\tspender      std.Address    // address to receive spending tokens\n\tvpUpdates    []VotingPower  // updates on voting power - optional\n\tnewMetadata  string         // new metadata for the DAO - optional\n\tnewURI       string         // new URI for the DAO - optional\n\tsubmitTime   uint64         // proposal submission time\n\tvoteEndTime  uint64         // vote end time for the proposal\n\tstatus       ProposalStatus // StatusNil | StatusVotingPeriod | StatusPassed | StatusRejected | StatusFailed\n\tvotes        *avl.MutTree   // votes on the proposal\n\tvotingPowers []uint64       // voting power sum per voting option\n}\n\n// GNODAO STATE\nvar daos []DAO\nvar proposals [][]Proposal\n\nfunc getDAOVotingPower(daoId uint64, address string) uint64 {\n\tif len(daos) \u003c= int(daoId) {\n\t\treturn 0\n\t}\n\tres, ok := daos[daoId].votingPowers.Get(address)\n\tif ok {\n\t\treturn res.(uint64)\n\t}\n\treturn 0\n}\n\nfunc IsDAOMember(daoId uint64, address std.Address) bool {\n\treturn getDAOVotingPower(daoId, address.String()) \u003e 0\n}\n\nfunc getVote(daoId, proposalId uint64, address std.Address) (Vote, bool) {\n\tif int(daoId) \u003e= len(daos) {\n\t\treturn Vote{}, false\n\t}\n\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\treturn Vote{}, false\n\t}\n\n\tvote, ok := proposals[daoId][proposalId].votes.Get(address.String())\n\tif ok {\n\t\treturn vote.(Vote), true\n\t}\n\treturn Vote{}, false\n}\n\nfunc parseVotingPowers(daoMembers, votingPowers string) []VotingPower {\n\tparsedVPs := []VotingPower{}\n\tif len(daoMembers) == 0 {\n\t\treturn parsedVPs\n\t}\n\tmemberAddrs := strings.Split(daoMembers, \",\")\n\tmemberPowers := strings.Split(votingPowers, \",\")\n\tif len(memberAddrs) != len(memberPowers) {\n\t\tpanic(\"mismatch between members and voting powers count\")\n\t}\n\tfor i, memberAddr := range memberAddrs {\n\t\tpower, err := strconv.Atoi(memberPowers[i])\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tparsedVPs = append(parsedVPs, VotingPower{\n\t\t\taddress: memberAddr,\n\t\t\tpower:   uint64(power),\n\t\t})\n\t}\n\treturn parsedVPs\n}\n\n// GNODAO FUNCTIONS\nfunc CreateDAO(\n\turi string,\n\tmetadata string,\n\tdaoMembers string,\n\tvotingPowers string,\n\tvotingPeriod uint64,\n\tvoteQuorum uint64,\n\tthreshold uint64,\n\tvetoThreshold uint64,\n) {\n\tdaoId := uint64(len(daos))\n\tdaos = append(daos, DAO{\n\t\tid:               daoId,\n\t\turi:              uri,\n\t\tmetadata:         metadata,\n\t\tfunds:            0,\n\t\tdepositHistory:   []string{},\n\t\tspendHistory:     []string{},\n\t\tpermissions:      []string{},\n\t\tpermMap:          avl.NewMutTree(),\n\t\tvotingPowers:     avl.NewMutTree(),\n\t\ttotalVotingPower: 0,\n\t\tvotingPeriod:     votingPeriod,\n\t\tvoteQuorum:       voteQuorum,\n\t\tthreshold:        threshold,\n\t\tvetoThreshold:    vetoThreshold,\n\t})\n\n\tparsedVPs := parseVotingPowers(daoMembers, votingPowers)\n\ttotalVotingPower := uint64(0)\n\tfor _, vp := range parsedVPs {\n\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\ttotalVotingPower += vp.power\n\t}\n\tdaos[daoId].totalVotingPower = totalVotingPower\n\tproposals = append(proposals, []Proposal{})\n\t// TODO: emit events\n}\n\nfunc CreateProposal(\n\tdaoId uint64,\n\ttitle, summary string,\n\tspendAmount uint64, spender std.Address,\n\tdaoMembers string,\n\tvpUpdates string,\n\tnewMetadata string,\n\tnewURI string,\n) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a dao member\")\n\t}\n\n\tparsedVPUpdates := parseVotingPowers(daoMembers, vpUpdates)\n\tproposals[daoId] = append(proposals[daoId], Proposal{\n\t\tdaoId:        daoId,\n\t\tid:           uint64(len(proposals[daoId])),\n\t\ttitle:        title,\n\t\tsummary:      summary,\n\t\tspendAmount:  spendAmount,\n\t\tspender:      spender,\n\t\tvpUpdates:    parsedVPUpdates,\n\t\tnewMetadata:  newMetadata,\n\t\tnewURI:       newURI,\n\t\tsubmitTime:   uint64(time.Now().Unix()),\n\t\tvoteEndTime:  uint64(time.Now().Unix()) + daos[daoId].votingPeriod,\n\t\tstatus:       VOTING_PERIOD,\n\t\tvotes:        avl.NewMutTree(),\n\t\tvotingPowers: []uint64{0, 0, 0, 0}, // initiate as zero for 4 vote types\n\t})\n}\n\nfunc VoteProposal(daoId, proposalId uint64, option VoteOption) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// if invalid proposal, panic\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\n\t// if vote end time is reached panic\n\tif time.Now().Unix() \u003e int64(proposals[daoId][proposalId].voteEndTime) {\n\t\tpanic(\"vote end time reached\")\n\t}\n\n\t// Original vote cancel\n\tcallerVotingPower := getDAOVotingPower(daoId, caller.String())\n\tvote, ok := getVote(daoId, proposalId, caller)\n\tif ok {\n\t\tif proposals[daoId][proposalId].votingPowers[int(vote.option)] \u003e callerVotingPower {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] -= callerVotingPower\n\t\t} else {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] = 0\n\t\t}\n\t}\n\n\t// Create a vote\n\tproposals[daoId][proposalId].votes.Set(caller.String(), Vote{\n\t\taddress:   caller,\n\t\ttimestamp: uint64(time.Now().Unix()),\n\t\toption:    option,\n\t})\n\n\t// Voting power by option update for new vote\n\tproposals[daoId][proposalId].votingPowers[int(option)] += callerVotingPower\n}\n\n// TODO: handle voting power change during voting period for other proposal\n// TODO: experiment with gas limit\nfunc TallyAndExecute(daoId, proposalId uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// validation for proposalId\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\tdao := daos[daoId]\n\tproposal := proposals[daoId][proposalId]\n\tvotingPowers := proposal.votingPowers\n\n\tif time.Now().Unix() \u003c int64(proposal.voteEndTime) {\n\t\tpanic(\"proposal is in voting period\")\n\t}\n\n\t// reference logic for tally - https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/keeper/tally.go\n\ttotalVotes := votingPowers[YES] + votingPowers[NO] + votingPowers[NO_WITH_VETO] + votingPowers[ABSTAIN]\n\tif totalVotes \u003c dao.totalVotingPower*dao.voteQuorum/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If no one votes (everyone abstains), proposal rejected\n\tif totalVotes == votingPowers[ABSTAIN] {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/3 of voters veto, proposal rejected\n\tvetoThreshold := dao.vetoThreshold\n\tif votingPowers[NO_WITH_VETO] \u003e totalVotes*vetoThreshold/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote Yes, proposal passes\n\tthreshold := dao.threshold\n\tif votingPowers[YES] \u003e (totalVotes-votingPowers[ABSTAIN])*threshold/100 {\n\t\tproposals[daoId][proposalId].status = PASSED\n\n\t\t// TODO: spend coins when spendAmount is positive \u0026 spender is a valid address\n\t\tif proposal.spendAmount \u003e 0 {\n\t\t\tif daos[daoId].funds \u003e= proposal.spendAmount {\n\t\t\t\tdaos[daoId].funds -= proposal.spendAmount\n\t\t\t} else {\n\t\t\t\tproposals[daoId][proposalId].status = FAILED\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tif proposal.newMetadata != \"\" {\n\t\t\tdaos[daoId].metadata = proposal.newMetadata\n\t\t}\n\n\t\tif proposal.newURI != \"\" {\n\t\t\tdaos[daoId].uri = proposal.newURI\n\t\t}\n\n\t\tfor _, vp := range proposal.vpUpdates {\n\t\t\tdaos[daoId].totalVotingPower -= getDAOVotingPower(daoId, vp.address)\n\t\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\t\tdaos[daoId].totalVotingPower += vp.power\n\t\t}\n\n\t\t// TODO: contract does not own account that can hold coins - this is one of limitations\n\t\t// TODO: Adena Wallet from OnBloc - investigate on how they manage coins (swap - custody?)\n\t\t// Manual sending for funds (Address \u003c-\u003e Address) - Miloš Živković\n\t\t// https://github.com/gnolang/gno/blob/e392ab51bc05a5efbceaa8dbe395bac2e01ad808/tm2/pkg/crypto/keys/client/send.go#L109-L119\n\t\treturn\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote No, proposal rejected\n\tproposals[daoId][proposalId].status = REJECTED\n}\n\nfunc DepositDAO(daoId uint64, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// TODO: send coins from caller to DAO\n\t// TODO: verify received amount\n\t// daos[daoId].depositHistory = append(daos[daoId].depositHistory, Deposit{\n\t// \taddress: caller,\n\t// \tamount:  amount,\n\t// })\n}\n\nfunc GetDAO(daoId uint64) DAO {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\treturn daos[daoId]\n}\n\nfunc GetDAOs(startAfter, limit uint64) []DAO {\n\tmax := uint64(len(daos))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn daos[startAfter:max]\n}\n\nfunc GetProposal(daoId, proposalId uint64) Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\treturn proposals[daoId][proposalId]\n}\n\nfunc GetProposals(daoId, startAfter, limit uint64) []Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tmax := uint64(len(proposals[daoId]))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn proposals[daoId][startAfter:max]\n}\n\nfunc RenderVote(daoId, proposalId uint64, address std.Address) string {\n\tvote, found := getVote(daoId, proposalId, address)\n\tif !found {\n\t\treturn \"\"\n\t}\n\n\treturn fmt.Sprintf(`{\n\t\"address\": \"%s\",\n\t\"timestamp\": %d,\n\t\"option\": %d\n}`, vote.address.String(), vote.timestamp, vote.option)\n}\n\ntype DAOEncode struct {\n\tid               uint64\n\turi              string // DAO homepage link\n\tmetadata         string // DAO metadata reference link\n\tfunds            uint64 // DAO managing funds\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalEncode struct {\n\tdaoId        uint64\n\tid           uint64\n\ttitle        string\n\tsummary      string\n\tspendAmount  uint64\n\tspender      std.Address\n\tvpUpdates    []VotingPower\n\tnewMetadata  string\n\tnewURI       string\n\tsubmitTime   uint64\n\tvoteEndTime  uint64\n\tstatus       ProposalStatus\n\tvotingPowers []uint64\n}\n\nfunc GetDAOEncodeObject(dao DAO) DAOEncode {\n\treturn DAOEncode{\n\t\tid:               dao.id,\n\t\turi:              dao.uri,\n\t\tmetadata:         dao.metadata,\n\t\tfunds:            dao.funds,\n\t\ttotalVotingPower: dao.totalVotingPower,\n\t\tvotingPeriod:     dao.votingPeriod,\n\t\tvoteQuorum:       dao.voteQuorum,\n\t\tthreshold:        dao.threshold,\n\t\tvetoThreshold:    dao.vetoThreshold,\n\t}\n}\n\nfunc GetProposalEncodeObject(p Proposal) ProposalEncode {\n\treturn ProposalEncode{\n\t\tdaoId:        p.daoId,\n\t\tid:           p.id,\n\t\ttitle:        p.title,\n\t\tsummary:      p.summary,\n\t\tspendAmount:  p.spendAmount,\n\t\tspender:      p.spender,\n\t\tvpUpdates:    p.vpUpdates,\n\t\tnewMetadata:  p.newMetadata,\n\t\tnewURI:       p.newURI,\n\t\tsubmitTime:   p.submitTime,\n\t\tvoteEndTime:  p.voteEndTime,\n\t\tstatus:       p.status,\n\t\tvotingPowers: p.votingPowers,\n\t}\n}\n\nfunc RenderDAO(daoId uint64) string {\n\tdaoEncode := GetDAOEncodeObject(GetDAO(daoId))\n\n\treturn fmt.Sprintf(`{\n\t\"id\": %d,\n\t\"uri\": \"%s\",\n\t\"metadata\": \"%s\",\n\t\"funds\" %d,\n\t\"totalVotingPower\" %d,\n\t\"votingPeriod\" %d,\n\t\"voteQuorum\" %d,\n\t\"threshold\" %d,\n\t\"vetoThreshold\" %d\n}`, daoEncode.id, daoEncode.uri, daoEncode.metadata, daoEncode.funds, daoEncode.totalVotingPower, daoEncode.votingPeriod, daoEncode.voteQuorum, daoEncode.threshold, daoEncode.vetoThreshold)\n}\n\nfunc RenderDAOMembers(daoId uint64, offset int, count int) string {\n\tdao := GetDAO(daoId)\n\tvotingPowers := []VotingPower{}\n\tdao.votingPowers.IterateByOffset(offset, count, func(key string, value interface{}) bool {\n\t\tpower := value.(uint64)\n\t\tvotingPowers = append(votingPowers, VotingPower{\n\t\t\taddress: key,\n\t\t\tpower:   power,\n\t\t})\n\t\treturn false\n\t})\n\n\trendered := \"[\"\n\tfor index, vpUpdate := range p.vpUpdates {\n\t\trendered += fmt.Sprintf(`{\n\t\"address\": \"%s\",\n\t\"power\": %d\n}`, vpUpdate.address, vpUpdate.power)\n\t\tif index != len(p.vpUpdates)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n\nfunc RenderDAOs(startAfter, limit uint64) string {\n\tdaos := GetDAOs(startAfter, limit)\n\tdaoEncodes := []DAOEncode{}\n\trendered := \"[\"\n\tfor index, dao := range daos {\n\t\trendered += RenderDAO(dao.id)\n\t\tif index != len(daos)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n\nfunc RenderProposal(daoId, proposalId uint64) string {\n\tp := GetProposalEncodeObject(GetProposal(daoId, proposalId))\n\tvpUpdatesRendered := \"[\"\n\tfor index, vpUpdate := range p.vpUpdates {\n\t\tvpUpdatesRendered += fmt.Sprintf(`{\n\t\"address\": \"%s\",\n\t\"power\": %d\n}`, vpUpdate.address, vpUpdate.power)\n\t\tif index != len(p.vpUpdates)-1 {\n\t\t\tvpUpdatesRendered += \",\\n\"\n\t\t}\n\t}\n\tvpUpdatesRendered += \"]\"\n\n\tvotingPowersBySumRendered := fmt.Sprintf(`[%d, %d, %d, %d]`, p.votingPowers[0], p.votingPowers[1], p.votingPowers[2], p.votingPowers[3])\n\n\treturn fmt.Sprintf(`{\n\t\"daoId\": %d,\n\t\"id\": %d,\n\t\"title\": \"%s\",\n\t\"summary\": \"%s\",\n\t\"spendAmount\": %d,\n\t\"spender\": \"%s\",\n\t\"newMetadata\": \"%s\",\n\t\"newURI\": \"%s\",\n\t\"submitTime\": %d,\n\t\"voteEndTime\": %d,\n\t\"status\": %d,\n\t\"vpUpdates\": %s,\n\t\"votingPowers\": %s\n}`, p.daoId, p.id, p.title, p.summary, p.spendAmount, p.spender.String(), p.newMetadata, p.newURI, p.submitTime, p.voteEndTime, p.status, vpUpdatesRendered, votingPowersBySumRendered)\n}\n\nfunc RenderProposals(daoId, startAfter, limit uint64) string {\n\tproposals := GetProposals(daoId, startAfter, limit)\n\trendered := \"[\"\n\tfor index, proposal := range proposals {\n\t\trendered += RenderProposal(proposal.daoId, proposal.id)\n\t\tif index != len(proposals)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n\nfunc Render(path string) string {\n\treturn \"\"\n}\n"},{"Name":"gnodao_test.gno","Body":"package gnodao\n\nimport (\n\t\"fmt\"\n\t\"std\"\n\t\"testing\"\n\t\"time\"\n)\n\nvar caller std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnabcde\"\nvar caller1 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\"\nvar caller2 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\"\nvar daoMembers = []std.Address{\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnccccc\",\n}\nvar votingPowers = []VotingPower{\n\t{\n\t\taddress: daoMembers[0].String(),\n\t\tpower:   1,\n\t},\n\t{\n\t\taddress: daoMembers[1].String(),\n\t\tpower:   2,\n\t},\n\t{\n\t\taddress: daoMembers[2].String(),\n\t\tpower:   3,\n\t},\n}\n\nfunc assertPanic(t *testing.T, f func()) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t}\n\t}()\n\tf()\n}\n\nfunc TestIsDAOMember(t *testing.T) {\n\tdaos = []DAO{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\n\t// TODO: what package is ideal to use for checks?\n\tif IsDAOMember(0, caller) != false {\n\t\tt.Errorf(\"Should not be false\")\n\t}\n\tif IsDAOMember(0, caller1) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n\tif IsDAOMember(0, caller2) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n}\n\nfunc TestCreateDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\tif len(daos) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tif len(proposals) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tdao := daos[0]\n\tif dao.id != 0 {\n\t\tt.Errorf(\"first DAO id should be 0\")\n\t}\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"dao uri not set properly\")\n\t}\n\tif dao.metadata != \"https://metadata.gnodao1.org\" {\n\t\tt.Errorf(\"dao metadata not set properly\")\n\t}\n\tif dao.funds != 0 {\n\t\tt.Errorf(\"dao funds not set properly\")\n\t}\n\tif len(dao.depositHistory) != 0 {\n\t\tt.Errorf(\"dao deposit history not set properly\")\n\t}\n\tif len(dao.spendHistory) != 0 {\n\t\tt.Errorf(\"dao spend history not set properly\")\n\t}\n\tif len(dao.permissions) != 0 {\n\t\tt.Errorf(\"dao permissions not set properly\")\n\t}\n\tif dao.permMap == nil {\n\t\tt.Errorf(\"dao permission map not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 0 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller1.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller2.String()) != 2 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif dao.totalVotingPower != 6 {\n\t\tt.Errorf(\"totalVotingPower not set properly\")\n\t}\n\tif dao.votingPeriod != 86400*2 {\n\t\tt.Errorf(\"votingPeriod not set properly\")\n\t}\n\tif dao.voteQuorum != 30 {\n\t\tt.Errorf(\"voteQuorum not set properly\")\n\t}\n\tif dao.threshold != 10 {\n\t\tt.Errorf(\"threshold not set properly\")\n\t}\n\tif dao.vetoThreshold != 10 {\n\t\tt.Errorf(\"vetoThreshold not set properly\")\n\t}\n}\n\nfunc TestCreateProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\t})\n\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tproposal := proposals[0][0]\n\tif proposal.daoId != 0 {\n\t\tt.Errorf(\"proposal daoId should be 0\")\n\t}\n\tif proposal.id != 0 {\n\t\tt.Errorf(\"proposal id should be 0\")\n\t}\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"proposal title not set properly\")\n\t}\n\tif proposal.summary != \"Proposal to bootstrap DAO fund.\" {\n\t\tt.Errorf(\"proposal summary not set properly\")\n\t}\n\tif proposal.spendAmount != 0 {\n\t\tt.Errorf(\"proposal spendAmount not set properly\")\n\t}\n\tif proposal.spender != caller {\n\t\tt.Errorf(\"proposal spender not set properly\")\n\t}\n\tif len(proposal.vpUpdates) != 0 {\n\t\tt.Errorf(\"proposal vpUpdates not set properly\")\n\t}\n\tif proposal.newMetadata != \"\" {\n\t\tt.Errorf(\"proposal newMetadata not set properly\")\n\t}\n\tif proposal.newURI != \"\" {\n\t\tt.Errorf(\"proposal newURI not set properly\")\n\t}\n\tif proposal.submitTime != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"proposal submitTime not set properly\")\n\t}\n\tif proposal.voteEndTime != uint64(time.Now().Unix())+daos[0].votingPeriod {\n\t\tt.Errorf(\"proposal voteEndTime not set properly\")\n\t}\n\tif proposal.status != VOTING_PERIOD {\n\t\tt.Errorf(\"proposal status not set properly\")\n\t}\n\tif proposal.votes == nil {\n\t\tt.Errorf(\"proposal votes not set properly\")\n\t}\n\tif len(proposal.votingPowers) != 4 {\n\t\tt.Errorf(\"proposal votingPowers not set properly\")\n\t}\n}\n\nfunc TestVoteProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(1, 0, YES)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(0, 1, YES)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tVoteProposal(0, 0, YES)\n\t})\n\n\t// vote and check result is set properly\n\tstd.TestSetOrigCaller(caller1)\n\tVoteProposal(0, 0, YES)\n\tvote, found := getVote(0, 0, caller1)\n\tif !found {\n\t\tt.Errorf(\"proposal vote not set\")\n\t}\n\tif vote.address != caller1 {\n\t\tt.Errorf(\"vote address not set properly\")\n\t}\n\tif vote.timestamp != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"vote timestamp not set properly\")\n\t}\n\tif vote.option != YES {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 1 {\n\t\tt.Errorf(\"votePowers by vote option not set properly\")\n\t}\n\n\t// vote again with different option and check result\n\tVoteProposal(0, 0, NO)\n\tvote, found = getVote(0, 0, caller1)\n\tif vote.option != NO {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 0 {\n\t\tt.Errorf(\"votePowers for YES not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(NO)] != 1 {\n\t\tt.Errorf(\"votePowers for NO not set properly\")\n\t}\n\n\t// test vote end time already reached\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\t\tVoteProposal(0, 0, YES)\n\t})\n}\n\nfunc TestTallyAndExecute(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{\n\t\t{\n\t\t\taddress: caller.String(),\n\t\t\tpower:   1,\n\t\t},\n\t}, \"newMetadata.com\", \"newURI.com\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(1, 0)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 1)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tTallyAndExecute(0, 0)\n\t})\n\tassertPanic(t, func() { // vote end time not pass\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 0)\n\t})\n\n\t// vote end time to be reached\n\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\n\t// quorum not reached\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for vote quorum\")\n\t}\n\n\t// everyone abstains\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for all abstains\")\n\t}\n\n\t// more than 1/3 vote with NO_WITH_VETO\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower / 2\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = daos[0].totalVotingPower / 2\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for NO_WITH_VETO\")\n\t}\n\n\t// all YES vote\n\tproposals[0][0].votingPowers[ABSTAIN] = 0\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = 0\n\tproposals[0][0].votingPowers[YES] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != PASSED {\n\t\tt.Errorf(\"proposal should be PASSED\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif daos[0].metadata != \"newMetadata.com\" {\n\t\tt.Errorf(\"metadata not set properly\")\n\t}\n\tif daos[0].uri != \"newURI.com\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestDepositDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when not a dao member\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tDepositDAO(0, 100)\n\t})\n\n\t// not panics\n\tstd.TestSetOrigCaller(caller1)\n\tDepositDAO(0, 100)\n}\n\nfunc TestGetDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tGetDAO(100)\n\t})\n\n\t// success when valid dao id\n\tdao := GetDAO(0)\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestGetDAOs(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tgotDaos := GetDAOs(0, 10)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tCreateDAO(\"https://gnodao2.org\", \"https://metadata.gnodao2.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tgotDaos = GetDAOs(0, 0)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 10)\n\tif len(gotDaos) != 2 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 1)\n\tif len(gotDaos) != 1 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n}\n\nfunc TestGetProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tGetProposal(1, 0)\n\t})\n\n\t// panic when invalid proposal id\n\tassertPanic(t, func() {\n\t\tGetProposal(0, 1)\n\t})\n\n\t// success when valid dao id and proposal id\n\tproposal := GetProposal(0, 0)\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"title not set properly\")\n\t}\n}\n\nfunc TestGetProposals(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tassertPanic(t, func() { // invalid dao id\n\t\tGetProposals(0, 0, 10)\n\t})\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"proposal #1\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\tCreateProposal(0, \"proposal #2\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\tgotProposals := GetProposals(0, 0, 0)\n\tif len(gotProposals) != 0 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 10)\n\tif len(gotProposals) != 2 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 1)\n\tif len(gotProposals) != 1 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n}\n\nfunc TestRender(t *testing.T) {\n\tif Render(\"\") != \"\" {\n\t\tt.Errorf(\"Render function should empty\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"1daX0oSd1bUhp/WcrNuS7eoE9dtHnx/iPkcLtIIV8JFBthMF0IEEO0c98qR6jPjKBW46T3eWsmNfa5MLmRWZQA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"gnodao","Path":"gno.land/r/demo/gnodao_v05","Files":[{"Name":"gnodao.gno","Body":"package gnodao\n\nimport (\n\t\"gno.land/p/demo/avl\"\n\tfmt \"gno.land/p/demo/ufmt\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype VoteOption uint32\n\nconst (\n\tYES          VoteOption = 0 // Indicates approval of the proposal in its current form.\n\tNO           VoteOption = 1 // Indicates disapproval of the proposal in its current form.\n\tNO_WITH_VETO VoteOption = 2 // Indicates stronger opposition to the proposal than simply voting No. Not available for SuperMajority-typed proposals as a simple No of 1/3 out of total votes would result in the same outcome.\n\tABSTAIN      VoteOption = 3 // Indicates that the voter is impartial to the outcome of the proposal. Although Abstain votes are counted towards the quorum, they're excluded when calculating the ratio of other voting options above.\n)\n\n// GNODAO VOTE\ntype Vote struct {\n\taddress   std.Address // address of the voter\n\ttimestamp uint64      // block timestamp of the vote\n\toption    VoteOption  // vote option\n}\n\ntype DAO struct {\n\tid               uint64\n\turi              string       // DAO homepage link\n\tmetadata         string       // DAO metadata reference link\n\tfunds            uint64       // DAO managing funds\n\tdepositHistory   []string     // deposit history - reserved for later use\n\tspendHistory     []string     // spend history - reserved for later use\n\tpermissions      []string     // permissions managed on DAO - reserved for later use\n\tpermMap          *avl.MutTree // permission map - reserved for later use\n\tvotingPowers     *avl.MutTree\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalStatus uint32\n\nconst (\n\tNIL           ProposalStatus = 0\n\tVOTING_PERIOD ProposalStatus = 1\n\tPASSED        ProposalStatus = 2\n\tREJECTED      ProposalStatus = 3\n\tFAILED        ProposalStatus = 4\n)\n\nfunc (s ProposalStatus) String() string {\n\tswitch s {\n\tcase NIL:\n\t\treturn \"Nil\"\n\tcase VOTING_PERIOD:\n\t\treturn \"VotingPeriod\"\n\tcase PASSED:\n\t\treturn \"Passed\"\n\tcase REJECTED:\n\t\treturn \"Rejected\"\n\tcase FAILED:\n\t\treturn \"Failed\"\n\t}\n\treturn \"\"\n}\n\ntype VotingPower struct {\n\taddress string\n\tpower   uint64\n}\n\ntype Proposal struct {\n\tdaoId        uint64         // dao id of the proposal\n\tid           uint64         // unique id assigned for each proposal\n\ttitle        string         // proposal title\n\tsummary      string         // proposal summary\n\tspendAmount  uint64         // amount of tokens to spend as part the proposal\n\tspender      std.Address    // address to receive spending tokens\n\tvpUpdates    []VotingPower  // updates on voting power - optional\n\tnewMetadata  string         // new metadata for the DAO - optional\n\tnewURI       string         // new URI for the DAO - optional\n\tsubmitTime   uint64         // proposal submission time\n\tvoteEndTime  uint64         // vote end time for the proposal\n\tstatus       ProposalStatus // StatusNil | StatusVotingPeriod | StatusPassed | StatusRejected | StatusFailed\n\tvotes        *avl.MutTree   // votes on the proposal\n\tvotingPowers []uint64       // voting power sum per voting option\n}\n\n// GNODAO STATE\nvar daos []DAO\nvar proposals [][]Proposal\n\nfunc getDAOVotingPower(daoId uint64, address string) uint64 {\n\tif len(daos) \u003c= int(daoId) {\n\t\treturn 0\n\t}\n\tres, ok := daos[daoId].votingPowers.Get(address)\n\tif ok {\n\t\treturn res.(uint64)\n\t}\n\treturn 0\n}\n\nfunc IsDAOMember(daoId uint64, address std.Address) bool {\n\treturn getDAOVotingPower(daoId, address.String()) \u003e 0\n}\n\nfunc getVote(daoId, proposalId uint64, address std.Address) (Vote, bool) {\n\tif int(daoId) \u003e= len(daos) {\n\t\treturn Vote{}, false\n\t}\n\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\treturn Vote{}, false\n\t}\n\n\tvote, ok := proposals[daoId][proposalId].votes.Get(address.String())\n\tif ok {\n\t\treturn vote.(Vote), true\n\t}\n\treturn Vote{}, false\n}\n\nfunc parseVotingPowers(daoMembers, votingPowers string) []VotingPower {\n\tparsedVPs := []VotingPower{}\n\tif len(daoMembers) == 0 {\n\t\treturn parsedVPs\n\t}\n\tmemberAddrs := strings.Split(daoMembers, \",\")\n\tmemberPowers := strings.Split(votingPowers, \",\")\n\tif len(memberAddrs) != len(memberPowers) {\n\t\tpanic(\"mismatch between members and voting powers count\")\n\t}\n\tfor i, memberAddr := range memberAddrs {\n\t\tpower, err := strconv.Atoi(memberPowers[i])\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tparsedVPs = append(parsedVPs, VotingPower{\n\t\t\taddress: memberAddr,\n\t\t\tpower:   uint64(power),\n\t\t})\n\t}\n\treturn parsedVPs\n}\n\n// GNODAO FUNCTIONS\nfunc CreateDAO(\n\turi string,\n\tmetadata string,\n\tdaoMembers string,\n\tvotingPowers string,\n\tvotingPeriod uint64,\n\tvoteQuorum uint64,\n\tthreshold uint64,\n\tvetoThreshold uint64,\n) {\n\tdaoId := uint64(len(daos))\n\tdaos = append(daos, DAO{\n\t\tid:               daoId,\n\t\turi:              uri,\n\t\tmetadata:         metadata,\n\t\tfunds:            0,\n\t\tdepositHistory:   []string{},\n\t\tspendHistory:     []string{},\n\t\tpermissions:      []string{},\n\t\tpermMap:          avl.NewMutTree(),\n\t\tvotingPowers:     avl.NewMutTree(),\n\t\ttotalVotingPower: 0,\n\t\tvotingPeriod:     votingPeriod,\n\t\tvoteQuorum:       voteQuorum,\n\t\tthreshold:        threshold,\n\t\tvetoThreshold:    vetoThreshold,\n\t})\n\n\tparsedVPs := parseVotingPowers(daoMembers, votingPowers)\n\ttotalVotingPower := uint64(0)\n\tfor _, vp := range parsedVPs {\n\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\ttotalVotingPower += vp.power\n\t}\n\tdaos[daoId].totalVotingPower = totalVotingPower\n\tproposals = append(proposals, []Proposal{})\n\t// TODO: emit events\n}\n\nfunc CreateProposal(\n\tdaoId uint64,\n\ttitle, summary string,\n\tspendAmount uint64, spender std.Address,\n\tdaoMembers string,\n\tvpUpdates string,\n\tnewMetadata string,\n\tnewURI string,\n) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a dao member\")\n\t}\n\n\tparsedVPUpdates := parseVotingPowers(daoMembers, vpUpdates)\n\tproposals[daoId] = append(proposals[daoId], Proposal{\n\t\tdaoId:        daoId,\n\t\tid:           uint64(len(proposals[daoId])),\n\t\ttitle:        title,\n\t\tsummary:      summary,\n\t\tspendAmount:  spendAmount,\n\t\tspender:      spender,\n\t\tvpUpdates:    parsedVPUpdates,\n\t\tnewMetadata:  newMetadata,\n\t\tnewURI:       newURI,\n\t\tsubmitTime:   uint64(time.Now().Unix()),\n\t\tvoteEndTime:  uint64(time.Now().Unix()) + daos[daoId].votingPeriod,\n\t\tstatus:       VOTING_PERIOD,\n\t\tvotes:        avl.NewMutTree(),\n\t\tvotingPowers: []uint64{0, 0, 0, 0}, // initiate as zero for 4 vote types\n\t})\n}\n\nfunc VoteProposal(daoId, proposalId uint64, option VoteOption) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// if invalid proposal, panic\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\n\t// if vote end time is reached panic\n\tif time.Now().Unix() \u003e int64(proposals[daoId][proposalId].voteEndTime) {\n\t\tpanic(\"vote end time reached\")\n\t}\n\n\t// Original vote cancel\n\tcallerVotingPower := getDAOVotingPower(daoId, caller.String())\n\tvote, ok := getVote(daoId, proposalId, caller)\n\tif ok {\n\t\tif proposals[daoId][proposalId].votingPowers[int(vote.option)] \u003e callerVotingPower {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] -= callerVotingPower\n\t\t} else {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] = 0\n\t\t}\n\t}\n\n\t// Create a vote\n\tproposals[daoId][proposalId].votes.Set(caller.String(), Vote{\n\t\taddress:   caller,\n\t\ttimestamp: uint64(time.Now().Unix()),\n\t\toption:    option,\n\t})\n\n\t// Voting power by option update for new vote\n\tproposals[daoId][proposalId].votingPowers[int(option)] += callerVotingPower\n}\n\n// TODO: handle voting power change during voting period for other proposal\n// TODO: experiment with gas limit\nfunc TallyAndExecute(daoId, proposalId uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// validation for proposalId\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\tdao := daos[daoId]\n\tproposal := proposals[daoId][proposalId]\n\tvotingPowers := proposal.votingPowers\n\n\tif time.Now().Unix() \u003c int64(proposal.voteEndTime) {\n\t\tpanic(\"proposal is in voting period\")\n\t}\n\n\t// reference logic for tally - https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/keeper/tally.go\n\ttotalVotes := votingPowers[YES] + votingPowers[NO] + votingPowers[NO_WITH_VETO] + votingPowers[ABSTAIN]\n\tif totalVotes \u003c dao.totalVotingPower*dao.voteQuorum/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If no one votes (everyone abstains), proposal rejected\n\tif totalVotes == votingPowers[ABSTAIN] {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/3 of voters veto, proposal rejected\n\tvetoThreshold := dao.vetoThreshold\n\tif votingPowers[NO_WITH_VETO] \u003e totalVotes*vetoThreshold/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote Yes, proposal passes\n\tthreshold := dao.threshold\n\tif votingPowers[YES] \u003e (totalVotes-votingPowers[ABSTAIN])*threshold/100 {\n\t\tproposals[daoId][proposalId].status = PASSED\n\n\t\t// TODO: spend coins when spendAmount is positive \u0026 spender is a valid address\n\t\tif proposal.spendAmount \u003e 0 {\n\t\t\tif daos[daoId].funds \u003e= proposal.spendAmount {\n\t\t\t\tdaos[daoId].funds -= proposal.spendAmount\n\t\t\t} else {\n\t\t\t\tproposals[daoId][proposalId].status = FAILED\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tif proposal.newMetadata != \"\" {\n\t\t\tdaos[daoId].metadata = proposal.newMetadata\n\t\t}\n\n\t\tif proposal.newURI != \"\" {\n\t\t\tdaos[daoId].uri = proposal.newURI\n\t\t}\n\n\t\tfor _, vp := range proposal.vpUpdates {\n\t\t\tdaos[daoId].totalVotingPower -= getDAOVotingPower(daoId, vp.address)\n\t\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\t\tdaos[daoId].totalVotingPower += vp.power\n\t\t}\n\n\t\t// TODO: contract does not own account that can hold coins - this is one of limitations\n\t\t// TODO: Adena Wallet from OnBloc - investigate on how they manage coins (swap - custody?)\n\t\t// Manual sending for funds (Address \u003c-\u003e Address) - Miloš Živković\n\t\t// https://github.com/gnolang/gno/blob/e392ab51bc05a5efbceaa8dbe395bac2e01ad808/tm2/pkg/crypto/keys/client/send.go#L109-L119\n\t\treturn\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote No, proposal rejected\n\tproposals[daoId][proposalId].status = REJECTED\n}\n\nfunc DepositDAO(daoId uint64, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// TODO: send coins from caller to DAO\n\t// TODO: verify received amount\n\t// daos[daoId].depositHistory = append(daos[daoId].depositHistory, Deposit{\n\t// \taddress: caller,\n\t// \tamount:  amount,\n\t// })\n}\n\nfunc GetDAO(daoId uint64) DAO {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\treturn daos[daoId]\n}\n\nfunc GetDAOs(startAfter, limit uint64) []DAO {\n\tmax := uint64(len(daos))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn daos[startAfter:max]\n}\n\nfunc GetProposal(daoId, proposalId uint64) Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\treturn proposals[daoId][proposalId]\n}\n\nfunc GetProposals(daoId, startAfter, limit uint64) []Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tmax := uint64(len(proposals[daoId]))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn proposals[daoId][startAfter:max]\n}\n\nfunc RenderVote(daoId, proposalId uint64, address std.Address) string {\n\tvote, found := getVote(daoId, proposalId, address)\n\tif !found {\n\t\treturn \"\"\n\t}\n\n\treturn fmt.Sprintf(`{\n\t\"address\": \"%s\",\n\t\"timestamp\": %d,\n\t\"option\": %d\n}`, vote.address.String(), vote.timestamp, vote.option)\n}\n\ntype DAOEncode struct {\n\tid               uint64\n\turi              string // DAO homepage link\n\tmetadata         string // DAO metadata reference link\n\tfunds            uint64 // DAO managing funds\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalEncode struct {\n\tdaoId        uint64\n\tid           uint64\n\ttitle        string\n\tsummary      string\n\tspendAmount  uint64\n\tspender      std.Address\n\tvpUpdates    []VotingPower\n\tnewMetadata  string\n\tnewURI       string\n\tsubmitTime   uint64\n\tvoteEndTime  uint64\n\tstatus       ProposalStatus\n\tvotingPowers []uint64\n}\n\nfunc GetDAOEncodeObject(dao DAO) DAOEncode {\n\treturn DAOEncode{\n\t\tid:               dao.id,\n\t\turi:              dao.uri,\n\t\tmetadata:         dao.metadata,\n\t\tfunds:            dao.funds,\n\t\ttotalVotingPower: dao.totalVotingPower,\n\t\tvotingPeriod:     dao.votingPeriod,\n\t\tvoteQuorum:       dao.voteQuorum,\n\t\tthreshold:        dao.threshold,\n\t\tvetoThreshold:    dao.vetoThreshold,\n\t}\n}\n\nfunc GetProposalEncodeObject(p Proposal) ProposalEncode {\n\treturn ProposalEncode{\n\t\tdaoId:        p.daoId,\n\t\tid:           p.id,\n\t\ttitle:        p.title,\n\t\tsummary:      p.summary,\n\t\tspendAmount:  p.spendAmount,\n\t\tspender:      p.spender,\n\t\tvpUpdates:    p.vpUpdates,\n\t\tnewMetadata:  p.newMetadata,\n\t\tnewURI:       p.newURI,\n\t\tsubmitTime:   p.submitTime,\n\t\tvoteEndTime:  p.voteEndTime,\n\t\tstatus:       p.status,\n\t\tvotingPowers: p.votingPowers,\n\t}\n}\n\nfunc RenderDAO(daoId uint64) string {\n\tdaoEncode := GetDAOEncodeObject(GetDAO(daoId))\n\n\treturn fmt.Sprintf(`{\n\t\"id\": %d,\n\t\"uri\": \"%s\",\n\t\"metadata\": \"%s\",\n\t\"funds\" %d,\n\t\"totalVotingPower\" %d,\n\t\"votingPeriod\" %d,\n\t\"voteQuorum\" %d,\n\t\"threshold\" %d,\n\t\"vetoThreshold\" %d\n}`, daoEncode.id, daoEncode.uri, daoEncode.metadata, daoEncode.funds, daoEncode.totalVotingPower, daoEncode.votingPeriod, daoEncode.voteQuorum, daoEncode.threshold, daoEncode.vetoThreshold)\n}\n\nfunc RenderDAOMembers(daoId uint64, offset int, count int) string {\n\tdao := GetDAO(daoId)\n\tvotingPowers := []VotingPower{}\n\tdao.votingPowers.IterateByOffset(offset, count, func(key string, value interface{}) bool {\n\t\tpower := value.(uint64)\n\t\tvotingPowers = append(votingPowers, VotingPower{\n\t\t\taddress: key,\n\t\t\tpower:   power,\n\t\t})\n\t\treturn false\n\t})\n\n\trendered := \"[\"\n\tfor index, vpUpdate := range p.vpUpdates {\n\t\trendered += fmt.Sprintf(`{\n\t\"address\": \"%s\",\n\t\"power\": %d\n}`, vpUpdate.address, vpUpdate.power)\n\t\tif index != len(p.vpUpdates)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n\nfunc RenderDAOs(startAfter, limit uint64) string {\n\tdaos := GetDAOs(startAfter, limit)\n\tdaoEncodes := []DAOEncode{}\n\trendered := \"[\"\n\tfor index, dao := range daos {\n\t\trendered += RenderDAO(dao.id)\n\t\tif index != len(daos)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n\nfunc RenderProposal(daoId, proposalId uint64) string {\n\tp := GetProposalEncodeObject(GetProposal(daoId, proposalId))\n\tvpUpdatesRendered := \"[\"\n\tfor index, vpUpdate := range p.vpUpdates {\n\t\tvpUpdatesRendered += fmt.Sprintf(`{\n\t\"address\": \"%s\",\n\t\"power\": %d\n}`, vpUpdate.address, vpUpdate.power)\n\t\tif index != len(p.vpUpdates)-1 {\n\t\t\tvpUpdatesRendered += \",\\n\"\n\t\t}\n\t}\n\tvpUpdatesRendered += \"]\"\n\n\tvotingPowersBySumRendered := fmt.Sprintf(`[%d, %d, %d, %d]`, p.votingPowers[0], p.votingPowers[1], p.votingPowers[2], p.votingPowers[3])\n\n\treturn fmt.Sprintf(`{\n\t\"daoId\": %d,\n\t\"id\": %d,\n\t\"title\": \"%s\",\n\t\"summary\": \"%s\",\n\t\"spendAmount\": %d,\n\t\"spender\": \"%s\",\n\t\"newMetadata\": \"%s\",\n\t\"newURI\": \"%s\",\n\t\"submitTime\": %d,\n\t\"voteEndTime\": %d,\n\t\"status\": %d,\n\t\"vpUpdates\": %s,\n\t\"votingPowers\": %s\n}`, p.daoId, p.id, p.title, p.summary, p.spendAmount, p.spender.String(), p.newMetadata, p.newURI, p.submitTime, p.voteEndTime, p.status, vpUpdatesRendered, votingPowersBySumRendered)\n}\n\nfunc RenderProposals(daoId, startAfter, limit uint64) string {\n\tproposals := GetProposals(daoId, startAfter, limit)\n\trendered := \"[\"\n\tfor index, proposal := range proposals {\n\t\trendered += RenderProposal(proposal.daoId, proposal.id)\n\t\tif index != len(proposals)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n\nfunc Render(path string) string {\n\treturn \"\"\n}\n"},{"Name":"gnodao_test.gno","Body":"package gnodao\n\nimport (\n\t\"fmt\"\n\t\"std\"\n\t\"testing\"\n\t\"time\"\n)\n\nvar caller std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnabcde\"\nvar caller1 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\"\nvar caller2 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\"\nvar daoMembers = []std.Address{\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnccccc\",\n}\nvar votingPowers = []VotingPower{\n\t{\n\t\taddress: daoMembers[0].String(),\n\t\tpower:   1,\n\t},\n\t{\n\t\taddress: daoMembers[1].String(),\n\t\tpower:   2,\n\t},\n\t{\n\t\taddress: daoMembers[2].String(),\n\t\tpower:   3,\n\t},\n}\n\nfunc assertPanic(t *testing.T, f func()) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t}\n\t}()\n\tf()\n}\n\nfunc TestIsDAOMember(t *testing.T) {\n\tdaos = []DAO{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\n\t// TODO: what package is ideal to use for checks?\n\tif IsDAOMember(0, caller) != false {\n\t\tt.Errorf(\"Should not be false\")\n\t}\n\tif IsDAOMember(0, caller1) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n\tif IsDAOMember(0, caller2) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n}\n\nfunc TestCreateDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\tif len(daos) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tif len(proposals) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tdao := daos[0]\n\tif dao.id != 0 {\n\t\tt.Errorf(\"first DAO id should be 0\")\n\t}\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"dao uri not set properly\")\n\t}\n\tif dao.metadata != \"https://metadata.gnodao1.org\" {\n\t\tt.Errorf(\"dao metadata not set properly\")\n\t}\n\tif dao.funds != 0 {\n\t\tt.Errorf(\"dao funds not set properly\")\n\t}\n\tif len(dao.depositHistory) != 0 {\n\t\tt.Errorf(\"dao deposit history not set properly\")\n\t}\n\tif len(dao.spendHistory) != 0 {\n\t\tt.Errorf(\"dao spend history not set properly\")\n\t}\n\tif len(dao.permissions) != 0 {\n\t\tt.Errorf(\"dao permissions not set properly\")\n\t}\n\tif dao.permMap == nil {\n\t\tt.Errorf(\"dao permission map not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 0 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller1.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller2.String()) != 2 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif dao.totalVotingPower != 6 {\n\t\tt.Errorf(\"totalVotingPower not set properly\")\n\t}\n\tif dao.votingPeriod != 86400*2 {\n\t\tt.Errorf(\"votingPeriod not set properly\")\n\t}\n\tif dao.voteQuorum != 30 {\n\t\tt.Errorf(\"voteQuorum not set properly\")\n\t}\n\tif dao.threshold != 10 {\n\t\tt.Errorf(\"threshold not set properly\")\n\t}\n\tif dao.vetoThreshold != 10 {\n\t\tt.Errorf(\"vetoThreshold not set properly\")\n\t}\n}\n\nfunc TestCreateProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\t})\n\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tproposal := proposals[0][0]\n\tif proposal.daoId != 0 {\n\t\tt.Errorf(\"proposal daoId should be 0\")\n\t}\n\tif proposal.id != 0 {\n\t\tt.Errorf(\"proposal id should be 0\")\n\t}\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"proposal title not set properly\")\n\t}\n\tif proposal.summary != \"Proposal to bootstrap DAO fund.\" {\n\t\tt.Errorf(\"proposal summary not set properly\")\n\t}\n\tif proposal.spendAmount != 0 {\n\t\tt.Errorf(\"proposal spendAmount not set properly\")\n\t}\n\tif proposal.spender != caller {\n\t\tt.Errorf(\"proposal spender not set properly\")\n\t}\n\tif len(proposal.vpUpdates) != 0 {\n\t\tt.Errorf(\"proposal vpUpdates not set properly\")\n\t}\n\tif proposal.newMetadata != \"\" {\n\t\tt.Errorf(\"proposal newMetadata not set properly\")\n\t}\n\tif proposal.newURI != \"\" {\n\t\tt.Errorf(\"proposal newURI not set properly\")\n\t}\n\tif proposal.submitTime != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"proposal submitTime not set properly\")\n\t}\n\tif proposal.voteEndTime != uint64(time.Now().Unix())+daos[0].votingPeriod {\n\t\tt.Errorf(\"proposal voteEndTime not set properly\")\n\t}\n\tif proposal.status != VOTING_PERIOD {\n\t\tt.Errorf(\"proposal status not set properly\")\n\t}\n\tif proposal.votes == nil {\n\t\tt.Errorf(\"proposal votes not set properly\")\n\t}\n\tif len(proposal.votingPowers) != 4 {\n\t\tt.Errorf(\"proposal votingPowers not set properly\")\n\t}\n}\n\nfunc TestVoteProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(1, 0, YES)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(0, 1, YES)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tVoteProposal(0, 0, YES)\n\t})\n\n\t// vote and check result is set properly\n\tstd.TestSetOrigCaller(caller1)\n\tVoteProposal(0, 0, YES)\n\tvote, found := getVote(0, 0, caller1)\n\tif !found {\n\t\tt.Errorf(\"proposal vote not set\")\n\t}\n\tif vote.address != caller1 {\n\t\tt.Errorf(\"vote address not set properly\")\n\t}\n\tif vote.timestamp != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"vote timestamp not set properly\")\n\t}\n\tif vote.option != YES {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 1 {\n\t\tt.Errorf(\"votePowers by vote option not set properly\")\n\t}\n\n\t// vote again with different option and check result\n\tVoteProposal(0, 0, NO)\n\tvote, found = getVote(0, 0, caller1)\n\tif vote.option != NO {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 0 {\n\t\tt.Errorf(\"votePowers for YES not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(NO)] != 1 {\n\t\tt.Errorf(\"votePowers for NO not set properly\")\n\t}\n\n\t// test vote end time already reached\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\t\tVoteProposal(0, 0, YES)\n\t})\n}\n\nfunc TestTallyAndExecute(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{\n\t\t{\n\t\t\taddress: caller.String(),\n\t\t\tpower:   1,\n\t\t},\n\t}, \"newMetadata.com\", \"newURI.com\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(1, 0)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 1)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tTallyAndExecute(0, 0)\n\t})\n\tassertPanic(t, func() { // vote end time not pass\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 0)\n\t})\n\n\t// vote end time to be reached\n\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\n\t// quorum not reached\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for vote quorum\")\n\t}\n\n\t// everyone abstains\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for all abstains\")\n\t}\n\n\t// more than 1/3 vote with NO_WITH_VETO\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower / 2\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = daos[0].totalVotingPower / 2\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for NO_WITH_VETO\")\n\t}\n\n\t// all YES vote\n\tproposals[0][0].votingPowers[ABSTAIN] = 0\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = 0\n\tproposals[0][0].votingPowers[YES] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != PASSED {\n\t\tt.Errorf(\"proposal should be PASSED\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif daos[0].metadata != \"newMetadata.com\" {\n\t\tt.Errorf(\"metadata not set properly\")\n\t}\n\tif daos[0].uri != \"newURI.com\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestDepositDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when not a dao member\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tDepositDAO(0, 100)\n\t})\n\n\t// not panics\n\tstd.TestSetOrigCaller(caller1)\n\tDepositDAO(0, 100)\n}\n\nfunc TestGetDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tGetDAO(100)\n\t})\n\n\t// success when valid dao id\n\tdao := GetDAO(0)\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestGetDAOs(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tgotDaos := GetDAOs(0, 10)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tCreateDAO(\"https://gnodao2.org\", \"https://metadata.gnodao2.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tgotDaos = GetDAOs(0, 0)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 10)\n\tif len(gotDaos) != 2 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 1)\n\tif len(gotDaos) != 1 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n}\n\nfunc TestGetProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tGetProposal(1, 0)\n\t})\n\n\t// panic when invalid proposal id\n\tassertPanic(t, func() {\n\t\tGetProposal(0, 1)\n\t})\n\n\t// success when valid dao id and proposal id\n\tproposal := GetProposal(0, 0)\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"title not set properly\")\n\t}\n}\n\nfunc TestGetProposals(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tassertPanic(t, func() { // invalid dao id\n\t\tGetProposals(0, 0, 10)\n\t})\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"proposal #1\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\tCreateProposal(0, \"proposal #2\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\tgotProposals := GetProposals(0, 0, 0)\n\tif len(gotProposals) != 0 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 10)\n\tif len(gotProposals) != 2 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 1)\n\tif len(gotProposals) != 1 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n}\n\nfunc TestRender(t *testing.T) {\n\tif Render(\"\") != \"\" {\n\t\tt.Errorf(\"Render function should empty\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"XCl5ZghNiDjQKm8mJugZnD+TvzIIAHYAYRFIaG45BOZ2pBQJSFrGHMdXgxAJuryG8f/rSah2YVXCgQyLgASgeA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"gnodao","Path":"gno.land/r/demo/gnodao_v05","Files":[{"Name":"gnodao.gno","Body":"package gnodao\n\nimport (\n\t\"gno.land/p/demo/avl\"\n\tfmt \"gno.land/p/demo/ufmt\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype VoteOption uint32\n\nconst (\n\tYES          VoteOption = 0 // Indicates approval of the proposal in its current form.\n\tNO           VoteOption = 1 // Indicates disapproval of the proposal in its current form.\n\tNO_WITH_VETO VoteOption = 2 // Indicates stronger opposition to the proposal than simply voting No. Not available for SuperMajority-typed proposals as a simple No of 1/3 out of total votes would result in the same outcome.\n\tABSTAIN      VoteOption = 3 // Indicates that the voter is impartial to the outcome of the proposal. Although Abstain votes are counted towards the quorum, they're excluded when calculating the ratio of other voting options above.\n)\n\n// GNODAO VOTE\ntype Vote struct {\n\taddress   std.Address // address of the voter\n\ttimestamp uint64      // block timestamp of the vote\n\toption    VoteOption  // vote option\n}\n\ntype DAO struct {\n\tid               uint64\n\turi              string       // DAO homepage link\n\tmetadata         string       // DAO metadata reference link\n\tfunds            uint64       // DAO managing funds\n\tdepositHistory   []string     // deposit history - reserved for later use\n\tspendHistory     []string     // spend history - reserved for later use\n\tpermissions      []string     // permissions managed on DAO - reserved for later use\n\tpermMap          *avl.MutTree // permission map - reserved for later use\n\tvotingPowers     *avl.MutTree\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalStatus uint32\n\nconst (\n\tNIL           ProposalStatus = 0\n\tVOTING_PERIOD ProposalStatus = 1\n\tPASSED        ProposalStatus = 2\n\tREJECTED      ProposalStatus = 3\n\tFAILED        ProposalStatus = 4\n)\n\nfunc (s ProposalStatus) String() string {\n\tswitch s {\n\tcase NIL:\n\t\treturn \"Nil\"\n\tcase VOTING_PERIOD:\n\t\treturn \"VotingPeriod\"\n\tcase PASSED:\n\t\treturn \"Passed\"\n\tcase REJECTED:\n\t\treturn \"Rejected\"\n\tcase FAILED:\n\t\treturn \"Failed\"\n\t}\n\treturn \"\"\n}\n\ntype VotingPower struct {\n\taddress string\n\tpower   uint64\n}\n\ntype Proposal struct {\n\tdaoId        uint64         // dao id of the proposal\n\tid           uint64         // unique id assigned for each proposal\n\ttitle        string         // proposal title\n\tsummary      string         // proposal summary\n\tspendAmount  uint64         // amount of tokens to spend as part the proposal\n\tspender      std.Address    // address to receive spending tokens\n\tvpUpdates    []VotingPower  // updates on voting power - optional\n\tnewMetadata  string         // new metadata for the DAO - optional\n\tnewURI       string         // new URI for the DAO - optional\n\tsubmitTime   uint64         // proposal submission time\n\tvoteEndTime  uint64         // vote end time for the proposal\n\tstatus       ProposalStatus // StatusNil | StatusVotingPeriod | StatusPassed | StatusRejected | StatusFailed\n\tvotes        *avl.MutTree   // votes on the proposal\n\tvotingPowers []uint64       // voting power sum per voting option\n}\n\n// GNODAO STATE\nvar daos []DAO\nvar proposals [][]Proposal\n\nfunc getDAOVotingPower(daoId uint64, address string) uint64 {\n\tif len(daos) \u003c= int(daoId) {\n\t\treturn 0\n\t}\n\tres, ok := daos[daoId].votingPowers.Get(address)\n\tif ok {\n\t\treturn res.(uint64)\n\t}\n\treturn 0\n}\n\nfunc IsDAOMember(daoId uint64, address std.Address) bool {\n\treturn getDAOVotingPower(daoId, address.String()) \u003e 0\n}\n\nfunc getVote(daoId, proposalId uint64, address std.Address) (Vote, bool) {\n\tif int(daoId) \u003e= len(daos) {\n\t\treturn Vote{}, false\n\t}\n\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\treturn Vote{}, false\n\t}\n\n\tvote, ok := proposals[daoId][proposalId].votes.Get(address.String())\n\tif ok {\n\t\treturn vote.(Vote), true\n\t}\n\treturn Vote{}, false\n}\n\nfunc parseVotingPowers(daoMembers, votingPowers string) []VotingPower {\n\tparsedVPs := []VotingPower{}\n\tif len(daoMembers) == 0 {\n\t\treturn parsedVPs\n\t}\n\tmemberAddrs := strings.Split(daoMembers, \",\")\n\tmemberPowers := strings.Split(votingPowers, \",\")\n\tif len(memberAddrs) != len(memberPowers) {\n\t\tpanic(\"mismatch between members and voting powers count\")\n\t}\n\tfor i, memberAddr := range memberAddrs {\n\t\tpower, err := strconv.Atoi(memberPowers[i])\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tparsedVPs = append(parsedVPs, VotingPower{\n\t\t\taddress: memberAddr,\n\t\t\tpower:   uint64(power),\n\t\t})\n\t}\n\treturn parsedVPs\n}\n\n// GNODAO FUNCTIONS\nfunc CreateDAO(\n\turi string,\n\tmetadata string,\n\tdaoMembers string,\n\tvotingPowers string,\n\tvotingPeriod uint64,\n\tvoteQuorum uint64,\n\tthreshold uint64,\n\tvetoThreshold uint64,\n) {\n\tdaoId := uint64(len(daos))\n\tdaos = append(daos, DAO{\n\t\tid:               daoId,\n\t\turi:              uri,\n\t\tmetadata:         metadata,\n\t\tfunds:            0,\n\t\tdepositHistory:   []string{},\n\t\tspendHistory:     []string{},\n\t\tpermissions:      []string{},\n\t\tpermMap:          avl.NewMutTree(),\n\t\tvotingPowers:     avl.NewMutTree(),\n\t\ttotalVotingPower: 0,\n\t\tvotingPeriod:     votingPeriod,\n\t\tvoteQuorum:       voteQuorum,\n\t\tthreshold:        threshold,\n\t\tvetoThreshold:    vetoThreshold,\n\t})\n\n\tparsedVPs := parseVotingPowers(daoMembers, votingPowers)\n\ttotalVotingPower := uint64(0)\n\tfor _, vp := range parsedVPs {\n\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\ttotalVotingPower += vp.power\n\t}\n\tdaos[daoId].totalVotingPower = totalVotingPower\n\tproposals = append(proposals, []Proposal{})\n\t// TODO: emit events\n}\n\nfunc CreateProposal(\n\tdaoId uint64,\n\ttitle, summary string,\n\tspendAmount uint64, spender std.Address,\n\tdaoMembers string,\n\tvpUpdates string,\n\tnewMetadata string,\n\tnewURI string,\n) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a dao member\")\n\t}\n\n\tparsedVPUpdates := parseVotingPowers(daoMembers, vpUpdates)\n\tproposals[daoId] = append(proposals[daoId], Proposal{\n\t\tdaoId:        daoId,\n\t\tid:           uint64(len(proposals[daoId])),\n\t\ttitle:        title,\n\t\tsummary:      summary,\n\t\tspendAmount:  spendAmount,\n\t\tspender:      spender,\n\t\tvpUpdates:    parsedVPUpdates,\n\t\tnewMetadata:  newMetadata,\n\t\tnewURI:       newURI,\n\t\tsubmitTime:   uint64(time.Now().Unix()),\n\t\tvoteEndTime:  uint64(time.Now().Unix()) + daos[daoId].votingPeriod,\n\t\tstatus:       VOTING_PERIOD,\n\t\tvotes:        avl.NewMutTree(),\n\t\tvotingPowers: []uint64{0, 0, 0, 0}, // initiate as zero for 4 vote types\n\t})\n}\n\nfunc VoteProposal(daoId, proposalId uint64, option VoteOption) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// if invalid proposal, panic\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\n\t// if vote end time is reached panic\n\tif time.Now().Unix() \u003e int64(proposals[daoId][proposalId].voteEndTime) {\n\t\tpanic(\"vote end time reached\")\n\t}\n\n\t// Original vote cancel\n\tcallerVotingPower := getDAOVotingPower(daoId, caller.String())\n\tvote, ok := getVote(daoId, proposalId, caller)\n\tif ok {\n\t\tif proposals[daoId][proposalId].votingPowers[int(vote.option)] \u003e callerVotingPower {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] -= callerVotingPower\n\t\t} else {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] = 0\n\t\t}\n\t}\n\n\t// Create a vote\n\tproposals[daoId][proposalId].votes.Set(caller.String(), Vote{\n\t\taddress:   caller,\n\t\ttimestamp: uint64(time.Now().Unix()),\n\t\toption:    option,\n\t})\n\n\t// Voting power by option update for new vote\n\tproposals[daoId][proposalId].votingPowers[int(option)] += callerVotingPower\n}\n\n// TODO: handle voting power change during voting period for other proposal\n// TODO: experiment with gas limit\nfunc TallyAndExecute(daoId, proposalId uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// validation for proposalId\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\tdao := daos[daoId]\n\tproposal := proposals[daoId][proposalId]\n\tvotingPowers := proposal.votingPowers\n\n\tif time.Now().Unix() \u003c int64(proposal.voteEndTime) {\n\t\tpanic(\"proposal is in voting period\")\n\t}\n\n\t// reference logic for tally - https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/keeper/tally.go\n\ttotalVotes := votingPowers[YES] + votingPowers[NO] + votingPowers[NO_WITH_VETO] + votingPowers[ABSTAIN]\n\tif totalVotes \u003c dao.totalVotingPower*dao.voteQuorum/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If no one votes (everyone abstains), proposal rejected\n\tif totalVotes == votingPowers[ABSTAIN] {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/3 of voters veto, proposal rejected\n\tvetoThreshold := dao.vetoThreshold\n\tif votingPowers[NO_WITH_VETO] \u003e totalVotes*vetoThreshold/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote Yes, proposal passes\n\tthreshold := dao.threshold\n\tif votingPowers[YES] \u003e (totalVotes-votingPowers[ABSTAIN])*threshold/100 {\n\t\tproposals[daoId][proposalId].status = PASSED\n\n\t\t// TODO: spend coins when spendAmount is positive \u0026 spender is a valid address\n\t\tif proposal.spendAmount \u003e 0 {\n\t\t\tif daos[daoId].funds \u003e= proposal.spendAmount {\n\t\t\t\tdaos[daoId].funds -= proposal.spendAmount\n\t\t\t} else {\n\t\t\t\tproposals[daoId][proposalId].status = FAILED\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tif proposal.newMetadata != \"\" {\n\t\t\tdaos[daoId].metadata = proposal.newMetadata\n\t\t}\n\n\t\tif proposal.newURI != \"\" {\n\t\t\tdaos[daoId].uri = proposal.newURI\n\t\t}\n\n\t\tfor _, vp := range proposal.vpUpdates {\n\t\t\tdaos[daoId].totalVotingPower -= getDAOVotingPower(daoId, vp.address)\n\t\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\t\tdaos[daoId].totalVotingPower += vp.power\n\t\t}\n\n\t\t// TODO: contract does not own account that can hold coins - this is one of limitations\n\t\t// TODO: Adena Wallet from OnBloc - investigate on how they manage coins (swap - custody?)\n\t\t// Manual sending for funds (Address \u003c-\u003e Address) - Miloš Živković\n\t\t// https://github.com/gnolang/gno/blob/e392ab51bc05a5efbceaa8dbe395bac2e01ad808/tm2/pkg/crypto/keys/client/send.go#L109-L119\n\t\treturn\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote No, proposal rejected\n\tproposals[daoId][proposalId].status = REJECTED\n}\n\nfunc DepositDAO(daoId uint64, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// TODO: send coins from caller to DAO\n\t// TODO: verify received amount\n\t// daos[daoId].depositHistory = append(daos[daoId].depositHistory, Deposit{\n\t// \taddress: caller,\n\t// \tamount:  amount,\n\t// })\n}\n\nfunc GetDAO(daoId uint64) DAO {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\treturn daos[daoId]\n}\n\nfunc GetDAOs(startAfter, limit uint64) []DAO {\n\tmax := uint64(len(daos))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn daos[startAfter:max]\n}\n\nfunc GetProposal(daoId, proposalId uint64) Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\treturn proposals[daoId][proposalId]\n}\n\nfunc GetProposals(daoId, startAfter, limit uint64) []Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tmax := uint64(len(proposals[daoId]))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn proposals[daoId][startAfter:max]\n}\n\nfunc RenderVote(daoId, proposalId uint64, address std.Address) string {\n\tvote, found := getVote(daoId, proposalId, address)\n\tif !found {\n\t\treturn \"\"\n\t}\n\n\treturn fmt.Sprintf(`{\n\t\"address\": \"%s\",\n\t\"timestamp\": %d,\n\t\"option\": %d\n}`, vote.address.String(), vote.timestamp, vote.option)\n}\n\ntype DAOEncode struct {\n\tid               uint64\n\turi              string // DAO homepage link\n\tmetadata         string // DAO metadata reference link\n\tfunds            uint64 // DAO managing funds\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalEncode struct {\n\tdaoId        uint64\n\tid           uint64\n\ttitle        string\n\tsummary      string\n\tspendAmount  uint64\n\tspender      std.Address\n\tvpUpdates    []VotingPower\n\tnewMetadata  string\n\tnewURI       string\n\tsubmitTime   uint64\n\tvoteEndTime  uint64\n\tstatus       ProposalStatus\n\tvotingPowers []uint64\n}\n\nfunc GetDAOEncodeObject(dao DAO) DAOEncode {\n\treturn DAOEncode{\n\t\tid:               dao.id,\n\t\turi:              dao.uri,\n\t\tmetadata:         dao.metadata,\n\t\tfunds:            dao.funds,\n\t\ttotalVotingPower: dao.totalVotingPower,\n\t\tvotingPeriod:     dao.votingPeriod,\n\t\tvoteQuorum:       dao.voteQuorum,\n\t\tthreshold:        dao.threshold,\n\t\tvetoThreshold:    dao.vetoThreshold,\n\t}\n}\n\nfunc GetProposalEncodeObject(p Proposal) ProposalEncode {\n\treturn ProposalEncode{\n\t\tdaoId:        p.daoId,\n\t\tid:           p.id,\n\t\ttitle:        p.title,\n\t\tsummary:      p.summary,\n\t\tspendAmount:  p.spendAmount,\n\t\tspender:      p.spender,\n\t\tvpUpdates:    p.vpUpdates,\n\t\tnewMetadata:  p.newMetadata,\n\t\tnewURI:       p.newURI,\n\t\tsubmitTime:   p.submitTime,\n\t\tvoteEndTime:  p.voteEndTime,\n\t\tstatus:       p.status,\n\t\tvotingPowers: p.votingPowers,\n\t}\n}\n\nfunc RenderDAO(daoId uint64) string {\n\tdaoEncode := GetDAOEncodeObject(GetDAO(daoId))\n\n\treturn fmt.Sprintf(`{\n\t\"id\": %d,\n\t\"uri\": \"%s\",\n\t\"metadata\": \"%s\",\n\t\"funds\" %d,\n\t\"totalVotingPower\" %d,\n\t\"votingPeriod\" %d,\n\t\"voteQuorum\" %d,\n\t\"threshold\" %d,\n\t\"vetoThreshold\" %d\n}`, daoEncode.id, daoEncode.uri, daoEncode.metadata, daoEncode.funds, daoEncode.totalVotingPower, daoEncode.votingPeriod, daoEncode.voteQuorum, daoEncode.threshold, daoEncode.vetoThreshold)\n}\n\nfunc RenderDAOMembers(daoId uint64, start string, end string) string {\n\tdao := GetDAO(daoId)\n\tvotingPowers := []VotingPower{}\n\tdao.votingPowers.Iterate(start, end, func(key string, value interface{}) bool {\n\t\tpower := value.(uint64)\n\t\tvotingPowers = append(votingPowers, VotingPower{\n\t\t\taddress: key,\n\t\t\tpower:   power,\n\t\t})\n\t\treturn false\n\t})\n\n\trendered := \"[\"\n\tfor index, vpUpdate := range p.vpUpdates {\n\t\trendered += fmt.Sprintf(`{\n\t\"address\": \"%s\",\n\t\"power\": %d\n}`, vpUpdate.address, vpUpdate.power)\n\t\tif index != len(p.vpUpdates)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n\nfunc RenderDAOs(startAfter, limit uint64) string {\n\tdaos := GetDAOs(startAfter, limit)\n\tdaoEncodes := []DAOEncode{}\n\trendered := \"[\"\n\tfor index, dao := range daos {\n\t\trendered += RenderDAO(dao.id)\n\t\tif index != len(daos)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n\nfunc RenderProposal(daoId, proposalId uint64) string {\n\tp := GetProposalEncodeObject(GetProposal(daoId, proposalId))\n\tvpUpdatesRendered := \"[\"\n\tfor index, vpUpdate := range p.vpUpdates {\n\t\tvpUpdatesRendered += fmt.Sprintf(`{\n\t\"address\": \"%s\",\n\t\"power\": %d\n}`, vpUpdate.address, vpUpdate.power)\n\t\tif index != len(p.vpUpdates)-1 {\n\t\t\tvpUpdatesRendered += \",\\n\"\n\t\t}\n\t}\n\tvpUpdatesRendered += \"]\"\n\n\tvotingPowersBySumRendered := fmt.Sprintf(`[%d, %d, %d, %d]`, p.votingPowers[0], p.votingPowers[1], p.votingPowers[2], p.votingPowers[3])\n\n\treturn fmt.Sprintf(`{\n\t\"daoId\": %d,\n\t\"id\": %d,\n\t\"title\": \"%s\",\n\t\"summary\": \"%s\",\n\t\"spendAmount\": %d,\n\t\"spender\": \"%s\",\n\t\"newMetadata\": \"%s\",\n\t\"newURI\": \"%s\",\n\t\"submitTime\": %d,\n\t\"voteEndTime\": %d,\n\t\"status\": %d,\n\t\"vpUpdates\": %s,\n\t\"votingPowers\": %s\n}`, p.daoId, p.id, p.title, p.summary, p.spendAmount, p.spender.String(), p.newMetadata, p.newURI, p.submitTime, p.voteEndTime, p.status, vpUpdatesRendered, votingPowersBySumRendered)\n}\n\nfunc RenderProposals(daoId, startAfter, limit uint64) string {\n\tproposals := GetProposals(daoId, startAfter, limit)\n\trendered := \"[\"\n\tfor index, proposal := range proposals {\n\t\trendered += RenderProposal(proposal.daoId, proposal.id)\n\t\tif index != len(proposals)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n\nfunc Render(path string) string {\n\treturn \"\"\n}\n"},{"Name":"gnodao_test.gno","Body":"package gnodao\n\nimport (\n\t\"fmt\"\n\t\"std\"\n\t\"testing\"\n\t\"time\"\n)\n\nvar caller std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnabcde\"\nvar caller1 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\"\nvar caller2 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\"\nvar daoMembers = []std.Address{\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnccccc\",\n}\nvar votingPowers = []VotingPower{\n\t{\n\t\taddress: daoMembers[0].String(),\n\t\tpower:   1,\n\t},\n\t{\n\t\taddress: daoMembers[1].String(),\n\t\tpower:   2,\n\t},\n\t{\n\t\taddress: daoMembers[2].String(),\n\t\tpower:   3,\n\t},\n}\n\nfunc assertPanic(t *testing.T, f func()) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t}\n\t}()\n\tf()\n}\n\nfunc TestIsDAOMember(t *testing.T) {\n\tdaos = []DAO{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\n\t// TODO: what package is ideal to use for checks?\n\tif IsDAOMember(0, caller) != false {\n\t\tt.Errorf(\"Should not be false\")\n\t}\n\tif IsDAOMember(0, caller1) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n\tif IsDAOMember(0, caller2) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n}\n\nfunc TestCreateDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\tif len(daos) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tif len(proposals) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tdao := daos[0]\n\tif dao.id != 0 {\n\t\tt.Errorf(\"first DAO id should be 0\")\n\t}\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"dao uri not set properly\")\n\t}\n\tif dao.metadata != \"https://metadata.gnodao1.org\" {\n\t\tt.Errorf(\"dao metadata not set properly\")\n\t}\n\tif dao.funds != 0 {\n\t\tt.Errorf(\"dao funds not set properly\")\n\t}\n\tif len(dao.depositHistory) != 0 {\n\t\tt.Errorf(\"dao deposit history not set properly\")\n\t}\n\tif len(dao.spendHistory) != 0 {\n\t\tt.Errorf(\"dao spend history not set properly\")\n\t}\n\tif len(dao.permissions) != 0 {\n\t\tt.Errorf(\"dao permissions not set properly\")\n\t}\n\tif dao.permMap == nil {\n\t\tt.Errorf(\"dao permission map not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 0 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller1.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller2.String()) != 2 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif dao.totalVotingPower != 6 {\n\t\tt.Errorf(\"totalVotingPower not set properly\")\n\t}\n\tif dao.votingPeriod != 86400*2 {\n\t\tt.Errorf(\"votingPeriod not set properly\")\n\t}\n\tif dao.voteQuorum != 30 {\n\t\tt.Errorf(\"voteQuorum not set properly\")\n\t}\n\tif dao.threshold != 10 {\n\t\tt.Errorf(\"threshold not set properly\")\n\t}\n\tif dao.vetoThreshold != 10 {\n\t\tt.Errorf(\"vetoThreshold not set properly\")\n\t}\n}\n\nfunc TestCreateProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\t})\n\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tproposal := proposals[0][0]\n\tif proposal.daoId != 0 {\n\t\tt.Errorf(\"proposal daoId should be 0\")\n\t}\n\tif proposal.id != 0 {\n\t\tt.Errorf(\"proposal id should be 0\")\n\t}\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"proposal title not set properly\")\n\t}\n\tif proposal.summary != \"Proposal to bootstrap DAO fund.\" {\n\t\tt.Errorf(\"proposal summary not set properly\")\n\t}\n\tif proposal.spendAmount != 0 {\n\t\tt.Errorf(\"proposal spendAmount not set properly\")\n\t}\n\tif proposal.spender != caller {\n\t\tt.Errorf(\"proposal spender not set properly\")\n\t}\n\tif len(proposal.vpUpdates) != 0 {\n\t\tt.Errorf(\"proposal vpUpdates not set properly\")\n\t}\n\tif proposal.newMetadata != \"\" {\n\t\tt.Errorf(\"proposal newMetadata not set properly\")\n\t}\n\tif proposal.newURI != \"\" {\n\t\tt.Errorf(\"proposal newURI not set properly\")\n\t}\n\tif proposal.submitTime != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"proposal submitTime not set properly\")\n\t}\n\tif proposal.voteEndTime != uint64(time.Now().Unix())+daos[0].votingPeriod {\n\t\tt.Errorf(\"proposal voteEndTime not set properly\")\n\t}\n\tif proposal.status != VOTING_PERIOD {\n\t\tt.Errorf(\"proposal status not set properly\")\n\t}\n\tif proposal.votes == nil {\n\t\tt.Errorf(\"proposal votes not set properly\")\n\t}\n\tif len(proposal.votingPowers) != 4 {\n\t\tt.Errorf(\"proposal votingPowers not set properly\")\n\t}\n}\n\nfunc TestVoteProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(1, 0, YES)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(0, 1, YES)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tVoteProposal(0, 0, YES)\n\t})\n\n\t// vote and check result is set properly\n\tstd.TestSetOrigCaller(caller1)\n\tVoteProposal(0, 0, YES)\n\tvote, found := getVote(0, 0, caller1)\n\tif !found {\n\t\tt.Errorf(\"proposal vote not set\")\n\t}\n\tif vote.address != caller1 {\n\t\tt.Errorf(\"vote address not set properly\")\n\t}\n\tif vote.timestamp != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"vote timestamp not set properly\")\n\t}\n\tif vote.option != YES {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 1 {\n\t\tt.Errorf(\"votePowers by vote option not set properly\")\n\t}\n\n\t// vote again with different option and check result\n\tVoteProposal(0, 0, NO)\n\tvote, found = getVote(0, 0, caller1)\n\tif vote.option != NO {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 0 {\n\t\tt.Errorf(\"votePowers for YES not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(NO)] != 1 {\n\t\tt.Errorf(\"votePowers for NO not set properly\")\n\t}\n\n\t// test vote end time already reached\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\t\tVoteProposal(0, 0, YES)\n\t})\n}\n\nfunc TestTallyAndExecute(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{\n\t\t{\n\t\t\taddress: caller.String(),\n\t\t\tpower:   1,\n\t\t},\n\t}, \"newMetadata.com\", \"newURI.com\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(1, 0)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 1)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tTallyAndExecute(0, 0)\n\t})\n\tassertPanic(t, func() { // vote end time not pass\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 0)\n\t})\n\n\t// vote end time to be reached\n\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\n\t// quorum not reached\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for vote quorum\")\n\t}\n\n\t// everyone abstains\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for all abstains\")\n\t}\n\n\t// more than 1/3 vote with NO_WITH_VETO\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower / 2\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = daos[0].totalVotingPower / 2\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for NO_WITH_VETO\")\n\t}\n\n\t// all YES vote\n\tproposals[0][0].votingPowers[ABSTAIN] = 0\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = 0\n\tproposals[0][0].votingPowers[YES] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != PASSED {\n\t\tt.Errorf(\"proposal should be PASSED\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif daos[0].metadata != \"newMetadata.com\" {\n\t\tt.Errorf(\"metadata not set properly\")\n\t}\n\tif daos[0].uri != \"newURI.com\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestDepositDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when not a dao member\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tDepositDAO(0, 100)\n\t})\n\n\t// not panics\n\tstd.TestSetOrigCaller(caller1)\n\tDepositDAO(0, 100)\n}\n\nfunc TestGetDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tGetDAO(100)\n\t})\n\n\t// success when valid dao id\n\tdao := GetDAO(0)\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestGetDAOs(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tgotDaos := GetDAOs(0, 10)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tCreateDAO(\"https://gnodao2.org\", \"https://metadata.gnodao2.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tgotDaos = GetDAOs(0, 0)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 10)\n\tif len(gotDaos) != 2 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 1)\n\tif len(gotDaos) != 1 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n}\n\nfunc TestGetProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tGetProposal(1, 0)\n\t})\n\n\t// panic when invalid proposal id\n\tassertPanic(t, func() {\n\t\tGetProposal(0, 1)\n\t})\n\n\t// success when valid dao id and proposal id\n\tproposal := GetProposal(0, 0)\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"title not set properly\")\n\t}\n}\n\nfunc TestGetProposals(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tassertPanic(t, func() { // invalid dao id\n\t\tGetProposals(0, 0, 10)\n\t})\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"proposal #1\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\tCreateProposal(0, \"proposal #2\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\tgotProposals := GetProposals(0, 0, 0)\n\tif len(gotProposals) != 0 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 10)\n\tif len(gotProposals) != 2 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 1)\n\tif len(gotProposals) != 1 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n}\n\nfunc TestRender(t *testing.T) {\n\tif Render(\"\") != \"\" {\n\t\tt.Errorf(\"Render function should empty\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"9PEb9r5To3HGOKFUXFVcbY0NRi+HEUV3k4kpmmkkTjkQTfJRFzAy/nqqmwAsNd54WyGf6aFeV77VJy2Bm/KIrw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"gnodao","Path":"gno.land/r/demo/gnodao_v05","Files":[{"Name":"gnodao.gno","Body":"package gnodao\n\nimport (\n\t\"gno.land/p/demo/avl\"\n\tfmt \"gno.land/p/demo/ufmt\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype VoteOption uint32\n\nconst (\n\tYES          VoteOption = 0 // Indicates approval of the proposal in its current form.\n\tNO           VoteOption = 1 // Indicates disapproval of the proposal in its current form.\n\tNO_WITH_VETO VoteOption = 2 // Indicates stronger opposition to the proposal than simply voting No. Not available for SuperMajority-typed proposals as a simple No of 1/3 out of total votes would result in the same outcome.\n\tABSTAIN      VoteOption = 3 // Indicates that the voter is impartial to the outcome of the proposal. Although Abstain votes are counted towards the quorum, they're excluded when calculating the ratio of other voting options above.\n)\n\n// GNODAO VOTE\ntype Vote struct {\n\taddress   std.Address // address of the voter\n\ttimestamp uint64      // block timestamp of the vote\n\toption    VoteOption  // vote option\n}\n\ntype DAO struct {\n\tid               uint64\n\turi              string       // DAO homepage link\n\tmetadata         string       // DAO metadata reference link\n\tfunds            uint64       // DAO managing funds\n\tdepositHistory   []string     // deposit history - reserved for later use\n\tspendHistory     []string     // spend history - reserved for later use\n\tpermissions      []string     // permissions managed on DAO - reserved for later use\n\tpermMap          *avl.MutTree // permission map - reserved for later use\n\tvotingPowers     *avl.MutTree\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalStatus uint32\n\nconst (\n\tNIL           ProposalStatus = 0\n\tVOTING_PERIOD ProposalStatus = 1\n\tPASSED        ProposalStatus = 2\n\tREJECTED      ProposalStatus = 3\n\tFAILED        ProposalStatus = 4\n)\n\nfunc (s ProposalStatus) String() string {\n\tswitch s {\n\tcase NIL:\n\t\treturn \"Nil\"\n\tcase VOTING_PERIOD:\n\t\treturn \"VotingPeriod\"\n\tcase PASSED:\n\t\treturn \"Passed\"\n\tcase REJECTED:\n\t\treturn \"Rejected\"\n\tcase FAILED:\n\t\treturn \"Failed\"\n\t}\n\treturn \"\"\n}\n\ntype VotingPower struct {\n\taddress string\n\tpower   uint64\n}\n\ntype Proposal struct {\n\tdaoId        uint64         // dao id of the proposal\n\tid           uint64         // unique id assigned for each proposal\n\ttitle        string         // proposal title\n\tsummary      string         // proposal summary\n\tspendAmount  uint64         // amount of tokens to spend as part the proposal\n\tspender      std.Address    // address to receive spending tokens\n\tvpUpdates    []VotingPower  // updates on voting power - optional\n\tnewMetadata  string         // new metadata for the DAO - optional\n\tnewURI       string         // new URI for the DAO - optional\n\tsubmitTime   uint64         // proposal submission time\n\tvoteEndTime  uint64         // vote end time for the proposal\n\tstatus       ProposalStatus // StatusNil | StatusVotingPeriod | StatusPassed | StatusRejected | StatusFailed\n\tvotes        *avl.MutTree   // votes on the proposal\n\tvotingPowers []uint64       // voting power sum per voting option\n}\n\n// GNODAO STATE\nvar daos []DAO\nvar proposals [][]Proposal\n\nfunc getDAOVotingPower(daoId uint64, address string) uint64 {\n\tif len(daos) \u003c= int(daoId) {\n\t\treturn 0\n\t}\n\tres, ok := daos[daoId].votingPowers.Get(address)\n\tif ok {\n\t\treturn res.(uint64)\n\t}\n\treturn 0\n}\n\nfunc IsDAOMember(daoId uint64, address std.Address) bool {\n\treturn getDAOVotingPower(daoId, address.String()) \u003e 0\n}\n\nfunc getVote(daoId, proposalId uint64, address std.Address) (Vote, bool) {\n\tif int(daoId) \u003e= len(daos) {\n\t\treturn Vote{}, false\n\t}\n\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\treturn Vote{}, false\n\t}\n\n\tvote, ok := proposals[daoId][proposalId].votes.Get(address.String())\n\tif ok {\n\t\treturn vote.(Vote), true\n\t}\n\treturn Vote{}, false\n}\n\nfunc parseVotingPowers(daoMembers, votingPowers string) []VotingPower {\n\tparsedVPs := []VotingPower{}\n\tif len(daoMembers) == 0 {\n\t\treturn parsedVPs\n\t}\n\tmemberAddrs := strings.Split(daoMembers, \",\")\n\tmemberPowers := strings.Split(votingPowers, \",\")\n\tif len(memberAddrs) != len(memberPowers) {\n\t\tpanic(\"mismatch between members and voting powers count\")\n\t}\n\tfor i, memberAddr := range memberAddrs {\n\t\tpower, err := strconv.Atoi(memberPowers[i])\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tparsedVPs = append(parsedVPs, VotingPower{\n\t\t\taddress: memberAddr,\n\t\t\tpower:   uint64(power),\n\t\t})\n\t}\n\treturn parsedVPs\n}\n\n// GNODAO FUNCTIONS\nfunc CreateDAO(\n\turi string,\n\tmetadata string,\n\tdaoMembers string,\n\tvotingPowers string,\n\tvotingPeriod uint64,\n\tvoteQuorum uint64,\n\tthreshold uint64,\n\tvetoThreshold uint64,\n) {\n\tdaoId := uint64(len(daos))\n\tdaos = append(daos, DAO{\n\t\tid:               daoId,\n\t\turi:              uri,\n\t\tmetadata:         metadata,\n\t\tfunds:            0,\n\t\tdepositHistory:   []string{},\n\t\tspendHistory:     []string{},\n\t\tpermissions:      []string{},\n\t\tpermMap:          avl.NewMutTree(),\n\t\tvotingPowers:     avl.NewMutTree(),\n\t\ttotalVotingPower: 0,\n\t\tvotingPeriod:     votingPeriod,\n\t\tvoteQuorum:       voteQuorum,\n\t\tthreshold:        threshold,\n\t\tvetoThreshold:    vetoThreshold,\n\t})\n\n\tparsedVPs := parseVotingPowers(daoMembers, votingPowers)\n\ttotalVotingPower := uint64(0)\n\tfor _, vp := range parsedVPs {\n\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\ttotalVotingPower += vp.power\n\t}\n\tdaos[daoId].totalVotingPower = totalVotingPower\n\tproposals = append(proposals, []Proposal{})\n\t// TODO: emit events\n}\n\nfunc CreateProposal(\n\tdaoId uint64,\n\ttitle, summary string,\n\tspendAmount uint64, spender std.Address,\n\tdaoMembers string,\n\tvpUpdates string,\n\tnewMetadata string,\n\tnewURI string,\n) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a dao member\")\n\t}\n\n\tparsedVPUpdates := parseVotingPowers(daoMembers, vpUpdates)\n\tproposals[daoId] = append(proposals[daoId], Proposal{\n\t\tdaoId:        daoId,\n\t\tid:           uint64(len(proposals[daoId])),\n\t\ttitle:        title,\n\t\tsummary:      summary,\n\t\tspendAmount:  spendAmount,\n\t\tspender:      spender,\n\t\tvpUpdates:    parsedVPUpdates,\n\t\tnewMetadata:  newMetadata,\n\t\tnewURI:       newURI,\n\t\tsubmitTime:   uint64(time.Now().Unix()),\n\t\tvoteEndTime:  uint64(time.Now().Unix()) + daos[daoId].votingPeriod,\n\t\tstatus:       VOTING_PERIOD,\n\t\tvotes:        avl.NewMutTree(),\n\t\tvotingPowers: []uint64{0, 0, 0, 0}, // initiate as zero for 4 vote types\n\t})\n}\n\nfunc VoteProposal(daoId, proposalId uint64, option VoteOption) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// if invalid proposal, panic\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\n\t// if vote end time is reached panic\n\tif time.Now().Unix() \u003e int64(proposals[daoId][proposalId].voteEndTime) {\n\t\tpanic(\"vote end time reached\")\n\t}\n\n\t// Original vote cancel\n\tcallerVotingPower := getDAOVotingPower(daoId, caller.String())\n\tvote, ok := getVote(daoId, proposalId, caller)\n\tif ok {\n\t\tif proposals[daoId][proposalId].votingPowers[int(vote.option)] \u003e callerVotingPower {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] -= callerVotingPower\n\t\t} else {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] = 0\n\t\t}\n\t}\n\n\t// Create a vote\n\tproposals[daoId][proposalId].votes.Set(caller.String(), Vote{\n\t\taddress:   caller,\n\t\ttimestamp: uint64(time.Now().Unix()),\n\t\toption:    option,\n\t})\n\n\t// Voting power by option update for new vote\n\tproposals[daoId][proposalId].votingPowers[int(option)] += callerVotingPower\n}\n\n// TODO: handle voting power change during voting period for other proposal\n// TODO: experiment with gas limit\nfunc TallyAndExecute(daoId, proposalId uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// validation for proposalId\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\tdao := daos[daoId]\n\tproposal := proposals[daoId][proposalId]\n\tvotingPowers := proposal.votingPowers\n\n\tif time.Now().Unix() \u003c int64(proposal.voteEndTime) {\n\t\tpanic(\"proposal is in voting period\")\n\t}\n\n\t// reference logic for tally - https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/keeper/tally.go\n\ttotalVotes := votingPowers[YES] + votingPowers[NO] + votingPowers[NO_WITH_VETO] + votingPowers[ABSTAIN]\n\tif totalVotes \u003c dao.totalVotingPower*dao.voteQuorum/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If no one votes (everyone abstains), proposal rejected\n\tif totalVotes == votingPowers[ABSTAIN] {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/3 of voters veto, proposal rejected\n\tvetoThreshold := dao.vetoThreshold\n\tif votingPowers[NO_WITH_VETO] \u003e totalVotes*vetoThreshold/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote Yes, proposal passes\n\tthreshold := dao.threshold\n\tif votingPowers[YES] \u003e (totalVotes-votingPowers[ABSTAIN])*threshold/100 {\n\t\tproposals[daoId][proposalId].status = PASSED\n\n\t\t// TODO: spend coins when spendAmount is positive \u0026 spender is a valid address\n\t\tif proposal.spendAmount \u003e 0 {\n\t\t\tif daos[daoId].funds \u003e= proposal.spendAmount {\n\t\t\t\tdaos[daoId].funds -= proposal.spendAmount\n\t\t\t} else {\n\t\t\t\tproposals[daoId][proposalId].status = FAILED\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tif proposal.newMetadata != \"\" {\n\t\t\tdaos[daoId].metadata = proposal.newMetadata\n\t\t}\n\n\t\tif proposal.newURI != \"\" {\n\t\t\tdaos[daoId].uri = proposal.newURI\n\t\t}\n\n\t\tfor _, vp := range proposal.vpUpdates {\n\t\t\tdaos[daoId].totalVotingPower -= getDAOVotingPower(daoId, vp.address)\n\t\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\t\tdaos[daoId].totalVotingPower += vp.power\n\t\t}\n\n\t\t// TODO: contract does not own account that can hold coins - this is one of limitations\n\t\t// TODO: Adena Wallet from OnBloc - investigate on how they manage coins (swap - custody?)\n\t\t// Manual sending for funds (Address \u003c-\u003e Address) - Miloš Živković\n\t\t// https://github.com/gnolang/gno/blob/e392ab51bc05a5efbceaa8dbe395bac2e01ad808/tm2/pkg/crypto/keys/client/send.go#L109-L119\n\t\treturn\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote No, proposal rejected\n\tproposals[daoId][proposalId].status = REJECTED\n}\n\nfunc DepositDAO(daoId uint64, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// TODO: send coins from caller to DAO\n\t// TODO: verify received amount\n\t// daos[daoId].depositHistory = append(daos[daoId].depositHistory, Deposit{\n\t// \taddress: caller,\n\t// \tamount:  amount,\n\t// })\n}\n\nfunc GetDAO(daoId uint64) DAO {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\treturn daos[daoId]\n}\n\nfunc GetDAOs(startAfter, limit uint64) []DAO {\n\tmax := uint64(len(daos))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn daos[startAfter:max]\n}\n\nfunc GetProposal(daoId, proposalId uint64) Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\treturn proposals[daoId][proposalId]\n}\n\nfunc GetProposals(daoId, startAfter, limit uint64) []Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tmax := uint64(len(proposals[daoId]))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn proposals[daoId][startAfter:max]\n}\n\nfunc RenderVote(daoId, proposalId uint64, address std.Address) string {\n\tvote, found := getVote(daoId, proposalId, address)\n\tif !found {\n\t\treturn \"\"\n\t}\n\n\treturn fmt.Sprintf(`{\n\t\"address\": \"%s\",\n\t\"timestamp\": %d,\n\t\"option\": %d\n}`, vote.address.String(), vote.timestamp, vote.option)\n}\n\ntype DAOEncode struct {\n\tid               uint64\n\turi              string // DAO homepage link\n\tmetadata         string // DAO metadata reference link\n\tfunds            uint64 // DAO managing funds\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalEncode struct {\n\tdaoId        uint64\n\tid           uint64\n\ttitle        string\n\tsummary      string\n\tspendAmount  uint64\n\tspender      std.Address\n\tvpUpdates    []VotingPower\n\tnewMetadata  string\n\tnewURI       string\n\tsubmitTime   uint64\n\tvoteEndTime  uint64\n\tstatus       ProposalStatus\n\tvotingPowers []uint64\n}\n\nfunc GetDAOEncodeObject(dao DAO) DAOEncode {\n\treturn DAOEncode{\n\t\tid:               dao.id,\n\t\turi:              dao.uri,\n\t\tmetadata:         dao.metadata,\n\t\tfunds:            dao.funds,\n\t\ttotalVotingPower: dao.totalVotingPower,\n\t\tvotingPeriod:     dao.votingPeriod,\n\t\tvoteQuorum:       dao.voteQuorum,\n\t\tthreshold:        dao.threshold,\n\t\tvetoThreshold:    dao.vetoThreshold,\n\t}\n}\n\nfunc GetProposalEncodeObject(p Proposal) ProposalEncode {\n\treturn ProposalEncode{\n\t\tdaoId:        p.daoId,\n\t\tid:           p.id,\n\t\ttitle:        p.title,\n\t\tsummary:      p.summary,\n\t\tspendAmount:  p.spendAmount,\n\t\tspender:      p.spender,\n\t\tvpUpdates:    p.vpUpdates,\n\t\tnewMetadata:  p.newMetadata,\n\t\tnewURI:       p.newURI,\n\t\tsubmitTime:   p.submitTime,\n\t\tvoteEndTime:  p.voteEndTime,\n\t\tstatus:       p.status,\n\t\tvotingPowers: p.votingPowers,\n\t}\n}\n\nfunc RenderDAO(daoId uint64) string {\n\tdaoEncode := GetDAOEncodeObject(GetDAO(daoId))\n\n\treturn fmt.Sprintf(`{\n\t\"id\": %d,\n\t\"uri\": \"%s\",\n\t\"metadata\": \"%s\",\n\t\"funds\" %d,\n\t\"totalVotingPower\" %d,\n\t\"votingPeriod\" %d,\n\t\"voteQuorum\" %d,\n\t\"threshold\" %d,\n\t\"vetoThreshold\" %d\n}`, daoEncode.id, daoEncode.uri, daoEncode.metadata, daoEncode.funds, daoEncode.totalVotingPower, daoEncode.votingPeriod, daoEncode.voteQuorum, daoEncode.threshold, daoEncode.vetoThreshold)\n}\n\nfunc RenderDAOMembers(daoId uint64, start string, end string) string {\n\tdao := GetDAO(daoId)\n\tvotingPowers := []VotingPower{}\n\tdao.votingPowers.Iterate(start, end, func(tree *avl.MutTree) bool {\n\t\tpower := tree.Value().(uint64)\n\t\tvotingPowers = append(votingPowers, VotingPower{\n\t\t\taddress: tree.Key(),\n\t\t\tpower:   power,\n\t\t})\n\t\treturn false\n\t})\n\n\trendered := \"[\"\n\tfor index, vpUpdate := range p.vpUpdates {\n\t\trendered += fmt.Sprintf(`{\n\t\"address\": \"%s\",\n\t\"power\": %d\n}`, vpUpdate.address, vpUpdate.power)\n\t\tif index != len(p.vpUpdates)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n\nfunc RenderDAOs(startAfter, limit uint64) string {\n\tdaos := GetDAOs(startAfter, limit)\n\tdaoEncodes := []DAOEncode{}\n\trendered := \"[\"\n\tfor index, dao := range daos {\n\t\trendered += RenderDAO(dao.id)\n\t\tif index != len(daos)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n\nfunc RenderProposal(daoId, proposalId uint64) string {\n\tp := GetProposalEncodeObject(GetProposal(daoId, proposalId))\n\tvpUpdatesRendered := \"[\"\n\tfor index, vpUpdate := range p.vpUpdates {\n\t\tvpUpdatesRendered += fmt.Sprintf(`{\n\t\"address\": \"%s\",\n\t\"power\": %d\n}`, vpUpdate.address, vpUpdate.power)\n\t\tif index != len(p.vpUpdates)-1 {\n\t\t\tvpUpdatesRendered += \",\\n\"\n\t\t}\n\t}\n\tvpUpdatesRendered += \"]\"\n\n\tvotingPowersBySumRendered := fmt.Sprintf(`[%d, %d, %d, %d]`, p.votingPowers[0], p.votingPowers[1], p.votingPowers[2], p.votingPowers[3])\n\n\treturn fmt.Sprintf(`{\n\t\"daoId\": %d,\n\t\"id\": %d,\n\t\"title\": \"%s\",\n\t\"summary\": \"%s\",\n\t\"spendAmount\": %d,\n\t\"spender\": \"%s\",\n\t\"newMetadata\": \"%s\",\n\t\"newURI\": \"%s\",\n\t\"submitTime\": %d,\n\t\"voteEndTime\": %d,\n\t\"status\": %d,\n\t\"vpUpdates\": %s,\n\t\"votingPowers\": %s\n}`, p.daoId, p.id, p.title, p.summary, p.spendAmount, p.spender.String(), p.newMetadata, p.newURI, p.submitTime, p.voteEndTime, p.status, vpUpdatesRendered, votingPowersBySumRendered)\n}\n\nfunc RenderProposals(daoId, startAfter, limit uint64) string {\n\tproposals := GetProposals(daoId, startAfter, limit)\n\trendered := \"[\"\n\tfor index, proposal := range proposals {\n\t\trendered += RenderProposal(proposal.daoId, proposal.id)\n\t\tif index != len(proposals)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n\nfunc Render(path string) string {\n\treturn \"\"\n}\n"},{"Name":"gnodao_test.gno","Body":"package gnodao\n\nimport (\n\t\"fmt\"\n\t\"std\"\n\t\"testing\"\n\t\"time\"\n)\n\nvar caller std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnabcde\"\nvar caller1 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\"\nvar caller2 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\"\nvar daoMembers = []std.Address{\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnccccc\",\n}\nvar votingPowers = []VotingPower{\n\t{\n\t\taddress: daoMembers[0].String(),\n\t\tpower:   1,\n\t},\n\t{\n\t\taddress: daoMembers[1].String(),\n\t\tpower:   2,\n\t},\n\t{\n\t\taddress: daoMembers[2].String(),\n\t\tpower:   3,\n\t},\n}\n\nfunc assertPanic(t *testing.T, f func()) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t}\n\t}()\n\tf()\n}\n\nfunc TestIsDAOMember(t *testing.T) {\n\tdaos = []DAO{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\n\t// TODO: what package is ideal to use for checks?\n\tif IsDAOMember(0, caller) != false {\n\t\tt.Errorf(\"Should not be false\")\n\t}\n\tif IsDAOMember(0, caller1) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n\tif IsDAOMember(0, caller2) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n}\n\nfunc TestCreateDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\tif len(daos) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tif len(proposals) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tdao := daos[0]\n\tif dao.id != 0 {\n\t\tt.Errorf(\"first DAO id should be 0\")\n\t}\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"dao uri not set properly\")\n\t}\n\tif dao.metadata != \"https://metadata.gnodao1.org\" {\n\t\tt.Errorf(\"dao metadata not set properly\")\n\t}\n\tif dao.funds != 0 {\n\t\tt.Errorf(\"dao funds not set properly\")\n\t}\n\tif len(dao.depositHistory) != 0 {\n\t\tt.Errorf(\"dao deposit history not set properly\")\n\t}\n\tif len(dao.spendHistory) != 0 {\n\t\tt.Errorf(\"dao spend history not set properly\")\n\t}\n\tif len(dao.permissions) != 0 {\n\t\tt.Errorf(\"dao permissions not set properly\")\n\t}\n\tif dao.permMap == nil {\n\t\tt.Errorf(\"dao permission map not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 0 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller1.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller2.String()) != 2 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif dao.totalVotingPower != 6 {\n\t\tt.Errorf(\"totalVotingPower not set properly\")\n\t}\n\tif dao.votingPeriod != 86400*2 {\n\t\tt.Errorf(\"votingPeriod not set properly\")\n\t}\n\tif dao.voteQuorum != 30 {\n\t\tt.Errorf(\"voteQuorum not set properly\")\n\t}\n\tif dao.threshold != 10 {\n\t\tt.Errorf(\"threshold not set properly\")\n\t}\n\tif dao.vetoThreshold != 10 {\n\t\tt.Errorf(\"vetoThreshold not set properly\")\n\t}\n}\n\nfunc TestCreateProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\t})\n\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tproposal := proposals[0][0]\n\tif proposal.daoId != 0 {\n\t\tt.Errorf(\"proposal daoId should be 0\")\n\t}\n\tif proposal.id != 0 {\n\t\tt.Errorf(\"proposal id should be 0\")\n\t}\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"proposal title not set properly\")\n\t}\n\tif proposal.summary != \"Proposal to bootstrap DAO fund.\" {\n\t\tt.Errorf(\"proposal summary not set properly\")\n\t}\n\tif proposal.spendAmount != 0 {\n\t\tt.Errorf(\"proposal spendAmount not set properly\")\n\t}\n\tif proposal.spender != caller {\n\t\tt.Errorf(\"proposal spender not set properly\")\n\t}\n\tif len(proposal.vpUpdates) != 0 {\n\t\tt.Errorf(\"proposal vpUpdates not set properly\")\n\t}\n\tif proposal.newMetadata != \"\" {\n\t\tt.Errorf(\"proposal newMetadata not set properly\")\n\t}\n\tif proposal.newURI != \"\" {\n\t\tt.Errorf(\"proposal newURI not set properly\")\n\t}\n\tif proposal.submitTime != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"proposal submitTime not set properly\")\n\t}\n\tif proposal.voteEndTime != uint64(time.Now().Unix())+daos[0].votingPeriod {\n\t\tt.Errorf(\"proposal voteEndTime not set properly\")\n\t}\n\tif proposal.status != VOTING_PERIOD {\n\t\tt.Errorf(\"proposal status not set properly\")\n\t}\n\tif proposal.votes == nil {\n\t\tt.Errorf(\"proposal votes not set properly\")\n\t}\n\tif len(proposal.votingPowers) != 4 {\n\t\tt.Errorf(\"proposal votingPowers not set properly\")\n\t}\n}\n\nfunc TestVoteProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(1, 0, YES)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(0, 1, YES)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tVoteProposal(0, 0, YES)\n\t})\n\n\t// vote and check result is set properly\n\tstd.TestSetOrigCaller(caller1)\n\tVoteProposal(0, 0, YES)\n\tvote, found := getVote(0, 0, caller1)\n\tif !found {\n\t\tt.Errorf(\"proposal vote not set\")\n\t}\n\tif vote.address != caller1 {\n\t\tt.Errorf(\"vote address not set properly\")\n\t}\n\tif vote.timestamp != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"vote timestamp not set properly\")\n\t}\n\tif vote.option != YES {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 1 {\n\t\tt.Errorf(\"votePowers by vote option not set properly\")\n\t}\n\n\t// vote again with different option and check result\n\tVoteProposal(0, 0, NO)\n\tvote, found = getVote(0, 0, caller1)\n\tif vote.option != NO {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 0 {\n\t\tt.Errorf(\"votePowers for YES not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(NO)] != 1 {\n\t\tt.Errorf(\"votePowers for NO not set properly\")\n\t}\n\n\t// test vote end time already reached\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\t\tVoteProposal(0, 0, YES)\n\t})\n}\n\nfunc TestTallyAndExecute(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{\n\t\t{\n\t\t\taddress: caller.String(),\n\t\t\tpower:   1,\n\t\t},\n\t}, \"newMetadata.com\", \"newURI.com\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(1, 0)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 1)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tTallyAndExecute(0, 0)\n\t})\n\tassertPanic(t, func() { // vote end time not pass\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 0)\n\t})\n\n\t// vote end time to be reached\n\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\n\t// quorum not reached\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for vote quorum\")\n\t}\n\n\t// everyone abstains\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for all abstains\")\n\t}\n\n\t// more than 1/3 vote with NO_WITH_VETO\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower / 2\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = daos[0].totalVotingPower / 2\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for NO_WITH_VETO\")\n\t}\n\n\t// all YES vote\n\tproposals[0][0].votingPowers[ABSTAIN] = 0\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = 0\n\tproposals[0][0].votingPowers[YES] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != PASSED {\n\t\tt.Errorf(\"proposal should be PASSED\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif daos[0].metadata != \"newMetadata.com\" {\n\t\tt.Errorf(\"metadata not set properly\")\n\t}\n\tif daos[0].uri != \"newURI.com\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestDepositDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when not a dao member\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tDepositDAO(0, 100)\n\t})\n\n\t// not panics\n\tstd.TestSetOrigCaller(caller1)\n\tDepositDAO(0, 100)\n}\n\nfunc TestGetDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tGetDAO(100)\n\t})\n\n\t// success when valid dao id\n\tdao := GetDAO(0)\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestGetDAOs(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tgotDaos := GetDAOs(0, 10)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tCreateDAO(\"https://gnodao2.org\", \"https://metadata.gnodao2.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tgotDaos = GetDAOs(0, 0)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 10)\n\tif len(gotDaos) != 2 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 1)\n\tif len(gotDaos) != 1 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n}\n\nfunc TestGetProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tGetProposal(1, 0)\n\t})\n\n\t// panic when invalid proposal id\n\tassertPanic(t, func() {\n\t\tGetProposal(0, 1)\n\t})\n\n\t// success when valid dao id and proposal id\n\tproposal := GetProposal(0, 0)\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"title not set properly\")\n\t}\n}\n\nfunc TestGetProposals(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tassertPanic(t, func() { // invalid dao id\n\t\tGetProposals(0, 0, 10)\n\t})\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"proposal #1\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\tCreateProposal(0, \"proposal #2\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\tgotProposals := GetProposals(0, 0, 0)\n\tif len(gotProposals) != 0 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 10)\n\tif len(gotProposals) != 2 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 1)\n\tif len(gotProposals) != 1 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n}\n\nfunc TestRender(t *testing.T) {\n\tif Render(\"\") != \"\" {\n\t\tt.Errorf(\"Render function should empty\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"p4BZTCO8I4oX+zMNxX6dHB3/c0AEwWLdILvXl6wKk/wtbYOFvnptl5bIwOBLjFgD/iv4i+9x2fp80vnaaq+Pug=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"gnodao","Path":"gno.land/r/demo/gnodao_v05","Files":[{"Name":"gnodao.gno","Body":"package gnodao\n\nimport (\n\t\"gno.land/p/demo/avl\"\n\tfmt \"gno.land/p/demo/ufmt\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype VoteOption uint32\n\nconst (\n\tYES          VoteOption = 0 // Indicates approval of the proposal in its current form.\n\tNO           VoteOption = 1 // Indicates disapproval of the proposal in its current form.\n\tNO_WITH_VETO VoteOption = 2 // Indicates stronger opposition to the proposal than simply voting No. Not available for SuperMajority-typed proposals as a simple No of 1/3 out of total votes would result in the same outcome.\n\tABSTAIN      VoteOption = 3 // Indicates that the voter is impartial to the outcome of the proposal. Although Abstain votes are counted towards the quorum, they're excluded when calculating the ratio of other voting options above.\n)\n\n// GNODAO VOTE\ntype Vote struct {\n\taddress   std.Address // address of the voter\n\ttimestamp uint64      // block timestamp of the vote\n\toption    VoteOption  // vote option\n}\n\ntype DAO struct {\n\tid               uint64\n\turi              string       // DAO homepage link\n\tmetadata         string       // DAO metadata reference link\n\tfunds            uint64       // DAO managing funds\n\tdepositHistory   []string     // deposit history - reserved for later use\n\tspendHistory     []string     // spend history - reserved for later use\n\tpermissions      []string     // permissions managed on DAO - reserved for later use\n\tpermMap          *avl.MutTree // permission map - reserved for later use\n\tvotingPowers     *avl.MutTree\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalStatus uint32\n\nconst (\n\tNIL           ProposalStatus = 0\n\tVOTING_PERIOD ProposalStatus = 1\n\tPASSED        ProposalStatus = 2\n\tREJECTED      ProposalStatus = 3\n\tFAILED        ProposalStatus = 4\n)\n\nfunc (s ProposalStatus) String() string {\n\tswitch s {\n\tcase NIL:\n\t\treturn \"Nil\"\n\tcase VOTING_PERIOD:\n\t\treturn \"VotingPeriod\"\n\tcase PASSED:\n\t\treturn \"Passed\"\n\tcase REJECTED:\n\t\treturn \"Rejected\"\n\tcase FAILED:\n\t\treturn \"Failed\"\n\t}\n\treturn \"\"\n}\n\ntype VotingPower struct {\n\taddress string\n\tpower   uint64\n}\n\ntype Proposal struct {\n\tdaoId        uint64         // dao id of the proposal\n\tid           uint64         // unique id assigned for each proposal\n\ttitle        string         // proposal title\n\tsummary      string         // proposal summary\n\tspendAmount  uint64         // amount of tokens to spend as part the proposal\n\tspender      std.Address    // address to receive spending tokens\n\tvpUpdates    []VotingPower  // updates on voting power - optional\n\tnewMetadata  string         // new metadata for the DAO - optional\n\tnewURI       string         // new URI for the DAO - optional\n\tsubmitTime   uint64         // proposal submission time\n\tvoteEndTime  uint64         // vote end time for the proposal\n\tstatus       ProposalStatus // StatusNil | StatusVotingPeriod | StatusPassed | StatusRejected | StatusFailed\n\tvotes        *avl.MutTree   // votes on the proposal\n\tvotingPowers []uint64       // voting power sum per voting option\n}\n\n// GNODAO STATE\nvar daos []DAO\nvar proposals [][]Proposal\n\nfunc getDAOVotingPower(daoId uint64, address string) uint64 {\n\tif len(daos) \u003c= int(daoId) {\n\t\treturn 0\n\t}\n\tres, ok := daos[daoId].votingPowers.Get(address)\n\tif ok {\n\t\treturn res.(uint64)\n\t}\n\treturn 0\n}\n\nfunc IsDAOMember(daoId uint64, address std.Address) bool {\n\treturn getDAOVotingPower(daoId, address.String()) \u003e 0\n}\n\nfunc getVote(daoId, proposalId uint64, address std.Address) (Vote, bool) {\n\tif int(daoId) \u003e= len(daos) {\n\t\treturn Vote{}, false\n\t}\n\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\treturn Vote{}, false\n\t}\n\n\tvote, ok := proposals[daoId][proposalId].votes.Get(address.String())\n\tif ok {\n\t\treturn vote.(Vote), true\n\t}\n\treturn Vote{}, false\n}\n\nfunc parseVotingPowers(daoMembers, votingPowers string) []VotingPower {\n\tparsedVPs := []VotingPower{}\n\tif len(daoMembers) == 0 {\n\t\treturn parsedVPs\n\t}\n\tmemberAddrs := strings.Split(daoMembers, \",\")\n\tmemberPowers := strings.Split(votingPowers, \",\")\n\tif len(memberAddrs) != len(memberPowers) {\n\t\tpanic(\"mismatch between members and voting powers count\")\n\t}\n\tfor i, memberAddr := range memberAddrs {\n\t\tpower, err := strconv.Atoi(memberPowers[i])\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tparsedVPs = append(parsedVPs, VotingPower{\n\t\t\taddress: memberAddr,\n\t\t\tpower:   uint64(power),\n\t\t})\n\t}\n\treturn parsedVPs\n}\n\n// GNODAO FUNCTIONS\nfunc CreateDAO(\n\turi string,\n\tmetadata string,\n\tdaoMembers string,\n\tvotingPowers string,\n\tvotingPeriod uint64,\n\tvoteQuorum uint64,\n\tthreshold uint64,\n\tvetoThreshold uint64,\n) {\n\tdaoId := uint64(len(daos))\n\tdaos = append(daos, DAO{\n\t\tid:               daoId,\n\t\turi:              uri,\n\t\tmetadata:         metadata,\n\t\tfunds:            0,\n\t\tdepositHistory:   []string{},\n\t\tspendHistory:     []string{},\n\t\tpermissions:      []string{},\n\t\tpermMap:          avl.NewMutTree(),\n\t\tvotingPowers:     avl.NewMutTree(),\n\t\ttotalVotingPower: 0,\n\t\tvotingPeriod:     votingPeriod,\n\t\tvoteQuorum:       voteQuorum,\n\t\tthreshold:        threshold,\n\t\tvetoThreshold:    vetoThreshold,\n\t})\n\n\tparsedVPs := parseVotingPowers(daoMembers, votingPowers)\n\ttotalVotingPower := uint64(0)\n\tfor _, vp := range parsedVPs {\n\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\ttotalVotingPower += vp.power\n\t}\n\tdaos[daoId].totalVotingPower = totalVotingPower\n\tproposals = append(proposals, []Proposal{})\n\t// TODO: emit events\n}\n\nfunc CreateProposal(\n\tdaoId uint64,\n\ttitle, summary string,\n\tspendAmount uint64, spender std.Address,\n\tdaoMembers string,\n\tvpUpdates string,\n\tnewMetadata string,\n\tnewURI string,\n) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a dao member\")\n\t}\n\n\tparsedVPUpdates := parseVotingPowers(daoMembers, vpUpdates)\n\tproposals[daoId] = append(proposals[daoId], Proposal{\n\t\tdaoId:        daoId,\n\t\tid:           uint64(len(proposals[daoId])),\n\t\ttitle:        title,\n\t\tsummary:      summary,\n\t\tspendAmount:  spendAmount,\n\t\tspender:      spender,\n\t\tvpUpdates:    parsedVPUpdates,\n\t\tnewMetadata:  newMetadata,\n\t\tnewURI:       newURI,\n\t\tsubmitTime:   uint64(time.Now().Unix()),\n\t\tvoteEndTime:  uint64(time.Now().Unix()) + daos[daoId].votingPeriod,\n\t\tstatus:       VOTING_PERIOD,\n\t\tvotes:        avl.NewMutTree(),\n\t\tvotingPowers: []uint64{0, 0, 0, 0}, // initiate as zero for 4 vote types\n\t})\n}\n\nfunc VoteProposal(daoId, proposalId uint64, option VoteOption) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// if invalid proposal, panic\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\n\t// if vote end time is reached panic\n\tif time.Now().Unix() \u003e int64(proposals[daoId][proposalId].voteEndTime) {\n\t\tpanic(\"vote end time reached\")\n\t}\n\n\t// Original vote cancel\n\tcallerVotingPower := getDAOVotingPower(daoId, caller.String())\n\tvote, ok := getVote(daoId, proposalId, caller)\n\tif ok {\n\t\tif proposals[daoId][proposalId].votingPowers[int(vote.option)] \u003e callerVotingPower {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] -= callerVotingPower\n\t\t} else {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] = 0\n\t\t}\n\t}\n\n\t// Create a vote\n\tproposals[daoId][proposalId].votes.Set(caller.String(), Vote{\n\t\taddress:   caller,\n\t\ttimestamp: uint64(time.Now().Unix()),\n\t\toption:    option,\n\t})\n\n\t// Voting power by option update for new vote\n\tproposals[daoId][proposalId].votingPowers[int(option)] += callerVotingPower\n}\n\n// TODO: handle voting power change during voting period for other proposal\n// TODO: experiment with gas limit\nfunc TallyAndExecute(daoId, proposalId uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// validation for proposalId\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\tdao := daos[daoId]\n\tproposal := proposals[daoId][proposalId]\n\tvotingPowers := proposal.votingPowers\n\n\tif time.Now().Unix() \u003c int64(proposal.voteEndTime) {\n\t\tpanic(\"proposal is in voting period\")\n\t}\n\n\t// reference logic for tally - https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/keeper/tally.go\n\ttotalVotes := votingPowers[YES] + votingPowers[NO] + votingPowers[NO_WITH_VETO] + votingPowers[ABSTAIN]\n\tif totalVotes \u003c dao.totalVotingPower*dao.voteQuorum/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If no one votes (everyone abstains), proposal rejected\n\tif totalVotes == votingPowers[ABSTAIN] {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/3 of voters veto, proposal rejected\n\tvetoThreshold := dao.vetoThreshold\n\tif votingPowers[NO_WITH_VETO] \u003e totalVotes*vetoThreshold/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote Yes, proposal passes\n\tthreshold := dao.threshold\n\tif votingPowers[YES] \u003e (totalVotes-votingPowers[ABSTAIN])*threshold/100 {\n\t\tproposals[daoId][proposalId].status = PASSED\n\n\t\t// TODO: spend coins when spendAmount is positive \u0026 spender is a valid address\n\t\tif proposal.spendAmount \u003e 0 {\n\t\t\tif daos[daoId].funds \u003e= proposal.spendAmount {\n\t\t\t\tdaos[daoId].funds -= proposal.spendAmount\n\t\t\t} else {\n\t\t\t\tproposals[daoId][proposalId].status = FAILED\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tif proposal.newMetadata != \"\" {\n\t\t\tdaos[daoId].metadata = proposal.newMetadata\n\t\t}\n\n\t\tif proposal.newURI != \"\" {\n\t\t\tdaos[daoId].uri = proposal.newURI\n\t\t}\n\n\t\tfor _, vp := range proposal.vpUpdates {\n\t\t\tdaos[daoId].totalVotingPower -= getDAOVotingPower(daoId, vp.address)\n\t\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\t\tdaos[daoId].totalVotingPower += vp.power\n\t\t}\n\n\t\t// TODO: contract does not own account that can hold coins - this is one of limitations\n\t\t// TODO: Adena Wallet from OnBloc - investigate on how they manage coins (swap - custody?)\n\t\t// Manual sending for funds (Address \u003c-\u003e Address) - Miloš Živković\n\t\t// https://github.com/gnolang/gno/blob/e392ab51bc05a5efbceaa8dbe395bac2e01ad808/tm2/pkg/crypto/keys/client/send.go#L109-L119\n\t\treturn\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote No, proposal rejected\n\tproposals[daoId][proposalId].status = REJECTED\n}\n\nfunc DepositDAO(daoId uint64, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// TODO: send coins from caller to DAO\n\t// TODO: verify received amount\n\t// daos[daoId].depositHistory = append(daos[daoId].depositHistory, Deposit{\n\t// \taddress: caller,\n\t// \tamount:  amount,\n\t// })\n}\n\nfunc GetDAO(daoId uint64) DAO {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\treturn daos[daoId]\n}\n\nfunc GetDAOs(startAfter, limit uint64) []DAO {\n\tmax := uint64(len(daos))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn daos[startAfter:max]\n}\n\nfunc GetProposal(daoId, proposalId uint64) Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\treturn proposals[daoId][proposalId]\n}\n\nfunc GetProposals(daoId, startAfter, limit uint64) []Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tmax := uint64(len(proposals[daoId]))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn proposals[daoId][startAfter:max]\n}\n\nfunc RenderVote(daoId, proposalId uint64, address std.Address) string {\n\tvote, found := getVote(daoId, proposalId, address)\n\tif !found {\n\t\treturn \"\"\n\t}\n\n\treturn fmt.Sprintf(`{\n\t\"address\": \"%s\",\n\t\"timestamp\": %d,\n\t\"option\": %d\n}`, vote.address.String(), vote.timestamp, vote.option)\n}\n\ntype DAOEncode struct {\n\tid               uint64\n\turi              string // DAO homepage link\n\tmetadata         string // DAO metadata reference link\n\tfunds            uint64 // DAO managing funds\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalEncode struct {\n\tdaoId        uint64\n\tid           uint64\n\ttitle        string\n\tsummary      string\n\tspendAmount  uint64\n\tspender      std.Address\n\tvpUpdates    []VotingPower\n\tnewMetadata  string\n\tnewURI       string\n\tsubmitTime   uint64\n\tvoteEndTime  uint64\n\tstatus       ProposalStatus\n\tvotingPowers []uint64\n}\n\nfunc GetDAOEncodeObject(dao DAO) DAOEncode {\n\treturn DAOEncode{\n\t\tid:               dao.id,\n\t\turi:              dao.uri,\n\t\tmetadata:         dao.metadata,\n\t\tfunds:            dao.funds,\n\t\ttotalVotingPower: dao.totalVotingPower,\n\t\tvotingPeriod:     dao.votingPeriod,\n\t\tvoteQuorum:       dao.voteQuorum,\n\t\tthreshold:        dao.threshold,\n\t\tvetoThreshold:    dao.vetoThreshold,\n\t}\n}\n\nfunc GetProposalEncodeObject(p Proposal) ProposalEncode {\n\treturn ProposalEncode{\n\t\tdaoId:        p.daoId,\n\t\tid:           p.id,\n\t\ttitle:        p.title,\n\t\tsummary:      p.summary,\n\t\tspendAmount:  p.spendAmount,\n\t\tspender:      p.spender,\n\t\tvpUpdates:    p.vpUpdates,\n\t\tnewMetadata:  p.newMetadata,\n\t\tnewURI:       p.newURI,\n\t\tsubmitTime:   p.submitTime,\n\t\tvoteEndTime:  p.voteEndTime,\n\t\tstatus:       p.status,\n\t\tvotingPowers: p.votingPowers,\n\t}\n}\n\nfunc RenderDAO(daoId uint64) string {\n\tdaoEncode := GetDAOEncodeObject(GetDAO(daoId))\n\n\treturn fmt.Sprintf(`{\n\t\"id\": %d,\n\t\"uri\": \"%s\",\n\t\"metadata\": \"%s\",\n\t\"funds\" %d,\n\t\"totalVotingPower\" %d,\n\t\"votingPeriod\" %d,\n\t\"voteQuorum\" %d,\n\t\"threshold\" %d,\n\t\"vetoThreshold\" %d\n}`, daoEncode.id, daoEncode.uri, daoEncode.metadata, daoEncode.funds, daoEncode.totalVotingPower, daoEncode.votingPeriod, daoEncode.voteQuorum, daoEncode.threshold, daoEncode.vetoThreshold)\n}\n\nfunc RenderDAOMembers(daoId uint64, start string, end string) string {\n\tdao := GetDAO(daoId)\n\tvotingPowers := []VotingPower{}\n\tdao.votingPowers.Iterate(start, end, func(tree *avl.Tree) bool {\n\t\tpower := tree.Value().(uint64)\n\t\tvotingPowers = append(votingPowers, VotingPower{\n\t\t\taddress: tree.Key(),\n\t\t\tpower:   power,\n\t\t})\n\t\treturn false\n\t})\n\n\trendered := \"[\"\n\tfor index, vpUpdate := range p.vpUpdates {\n\t\trendered += fmt.Sprintf(`{\n\t\"address\": \"%s\",\n\t\"power\": %d\n}`, vpUpdate.address, vpUpdate.power)\n\t\tif index != len(p.vpUpdates)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n\nfunc RenderDAOs(startAfter, limit uint64) string {\n\tdaos := GetDAOs(startAfter, limit)\n\tdaoEncodes := []DAOEncode{}\n\trendered := \"[\"\n\tfor index, dao := range daos {\n\t\trendered += RenderDAO(dao.id)\n\t\tif index != len(daos)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n\nfunc RenderProposal(daoId, proposalId uint64) string {\n\tp := GetProposalEncodeObject(GetProposal(daoId, proposalId))\n\tvpUpdatesRendered := \"[\"\n\tfor index, vpUpdate := range p.vpUpdates {\n\t\tvpUpdatesRendered += fmt.Sprintf(`{\n\t\"address\": \"%s\",\n\t\"power\": %d\n}`, vpUpdate.address, vpUpdate.power)\n\t\tif index != len(p.vpUpdates)-1 {\n\t\t\tvpUpdatesRendered += \",\\n\"\n\t\t}\n\t}\n\tvpUpdatesRendered += \"]\"\n\n\tvotingPowersBySumRendered := fmt.Sprintf(`[%d, %d, %d, %d]`, p.votingPowers[0], p.votingPowers[1], p.votingPowers[2], p.votingPowers[3])\n\n\treturn fmt.Sprintf(`{\n\t\"daoId\": %d,\n\t\"id\": %d,\n\t\"title\": \"%s\",\n\t\"summary\": \"%s\",\n\t\"spendAmount\": %d,\n\t\"spender\": \"%s\",\n\t\"newMetadata\": \"%s\",\n\t\"newURI\": \"%s\",\n\t\"submitTime\": %d,\n\t\"voteEndTime\": %d,\n\t\"status\": %d,\n\t\"vpUpdates\": %s,\n\t\"votingPowers\": %s\n}`, p.daoId, p.id, p.title, p.summary, p.spendAmount, p.spender.String(), p.newMetadata, p.newURI, p.submitTime, p.voteEndTime, p.status, vpUpdatesRendered, votingPowersBySumRendered)\n}\n\nfunc RenderProposals(daoId, startAfter, limit uint64) string {\n\tproposals := GetProposals(daoId, startAfter, limit)\n\trendered := \"[\"\n\tfor index, proposal := range proposals {\n\t\trendered += RenderProposal(proposal.daoId, proposal.id)\n\t\tif index != len(proposals)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n\nfunc Render(path string) string {\n\treturn \"\"\n}\n"},{"Name":"gnodao_test.gno","Body":"package gnodao\n\nimport (\n\t\"fmt\"\n\t\"std\"\n\t\"testing\"\n\t\"time\"\n)\n\nvar caller std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnabcde\"\nvar caller1 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\"\nvar caller2 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\"\nvar daoMembers = []std.Address{\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnccccc\",\n}\nvar votingPowers = []VotingPower{\n\t{\n\t\taddress: daoMembers[0].String(),\n\t\tpower:   1,\n\t},\n\t{\n\t\taddress: daoMembers[1].String(),\n\t\tpower:   2,\n\t},\n\t{\n\t\taddress: daoMembers[2].String(),\n\t\tpower:   3,\n\t},\n}\n\nfunc assertPanic(t *testing.T, f func()) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t}\n\t}()\n\tf()\n}\n\nfunc TestIsDAOMember(t *testing.T) {\n\tdaos = []DAO{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\n\t// TODO: what package is ideal to use for checks?\n\tif IsDAOMember(0, caller) != false {\n\t\tt.Errorf(\"Should not be false\")\n\t}\n\tif IsDAOMember(0, caller1) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n\tif IsDAOMember(0, caller2) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n}\n\nfunc TestCreateDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\tif len(daos) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tif len(proposals) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tdao := daos[0]\n\tif dao.id != 0 {\n\t\tt.Errorf(\"first DAO id should be 0\")\n\t}\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"dao uri not set properly\")\n\t}\n\tif dao.metadata != \"https://metadata.gnodao1.org\" {\n\t\tt.Errorf(\"dao metadata not set properly\")\n\t}\n\tif dao.funds != 0 {\n\t\tt.Errorf(\"dao funds not set properly\")\n\t}\n\tif len(dao.depositHistory) != 0 {\n\t\tt.Errorf(\"dao deposit history not set properly\")\n\t}\n\tif len(dao.spendHistory) != 0 {\n\t\tt.Errorf(\"dao spend history not set properly\")\n\t}\n\tif len(dao.permissions) != 0 {\n\t\tt.Errorf(\"dao permissions not set properly\")\n\t}\n\tif dao.permMap == nil {\n\t\tt.Errorf(\"dao permission map not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 0 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller1.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller2.String()) != 2 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif dao.totalVotingPower != 6 {\n\t\tt.Errorf(\"totalVotingPower not set properly\")\n\t}\n\tif dao.votingPeriod != 86400*2 {\n\t\tt.Errorf(\"votingPeriod not set properly\")\n\t}\n\tif dao.voteQuorum != 30 {\n\t\tt.Errorf(\"voteQuorum not set properly\")\n\t}\n\tif dao.threshold != 10 {\n\t\tt.Errorf(\"threshold not set properly\")\n\t}\n\tif dao.vetoThreshold != 10 {\n\t\tt.Errorf(\"vetoThreshold not set properly\")\n\t}\n}\n\nfunc TestCreateProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\t})\n\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tproposal := proposals[0][0]\n\tif proposal.daoId != 0 {\n\t\tt.Errorf(\"proposal daoId should be 0\")\n\t}\n\tif proposal.id != 0 {\n\t\tt.Errorf(\"proposal id should be 0\")\n\t}\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"proposal title not set properly\")\n\t}\n\tif proposal.summary != \"Proposal to bootstrap DAO fund.\" {\n\t\tt.Errorf(\"proposal summary not set properly\")\n\t}\n\tif proposal.spendAmount != 0 {\n\t\tt.Errorf(\"proposal spendAmount not set properly\")\n\t}\n\tif proposal.spender != caller {\n\t\tt.Errorf(\"proposal spender not set properly\")\n\t}\n\tif len(proposal.vpUpdates) != 0 {\n\t\tt.Errorf(\"proposal vpUpdates not set properly\")\n\t}\n\tif proposal.newMetadata != \"\" {\n\t\tt.Errorf(\"proposal newMetadata not set properly\")\n\t}\n\tif proposal.newURI != \"\" {\n\t\tt.Errorf(\"proposal newURI not set properly\")\n\t}\n\tif proposal.submitTime != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"proposal submitTime not set properly\")\n\t}\n\tif proposal.voteEndTime != uint64(time.Now().Unix())+daos[0].votingPeriod {\n\t\tt.Errorf(\"proposal voteEndTime not set properly\")\n\t}\n\tif proposal.status != VOTING_PERIOD {\n\t\tt.Errorf(\"proposal status not set properly\")\n\t}\n\tif proposal.votes == nil {\n\t\tt.Errorf(\"proposal votes not set properly\")\n\t}\n\tif len(proposal.votingPowers) != 4 {\n\t\tt.Errorf(\"proposal votingPowers not set properly\")\n\t}\n}\n\nfunc TestVoteProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(1, 0, YES)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(0, 1, YES)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tVoteProposal(0, 0, YES)\n\t})\n\n\t// vote and check result is set properly\n\tstd.TestSetOrigCaller(caller1)\n\tVoteProposal(0, 0, YES)\n\tvote, found := getVote(0, 0, caller1)\n\tif !found {\n\t\tt.Errorf(\"proposal vote not set\")\n\t}\n\tif vote.address != caller1 {\n\t\tt.Errorf(\"vote address not set properly\")\n\t}\n\tif vote.timestamp != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"vote timestamp not set properly\")\n\t}\n\tif vote.option != YES {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 1 {\n\t\tt.Errorf(\"votePowers by vote option not set properly\")\n\t}\n\n\t// vote again with different option and check result\n\tVoteProposal(0, 0, NO)\n\tvote, found = getVote(0, 0, caller1)\n\tif vote.option != NO {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 0 {\n\t\tt.Errorf(\"votePowers for YES not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(NO)] != 1 {\n\t\tt.Errorf(\"votePowers for NO not set properly\")\n\t}\n\n\t// test vote end time already reached\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\t\tVoteProposal(0, 0, YES)\n\t})\n}\n\nfunc TestTallyAndExecute(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{\n\t\t{\n\t\t\taddress: caller.String(),\n\t\t\tpower:   1,\n\t\t},\n\t}, \"newMetadata.com\", \"newURI.com\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(1, 0)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 1)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tTallyAndExecute(0, 0)\n\t})\n\tassertPanic(t, func() { // vote end time not pass\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 0)\n\t})\n\n\t// vote end time to be reached\n\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\n\t// quorum not reached\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for vote quorum\")\n\t}\n\n\t// everyone abstains\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for all abstains\")\n\t}\n\n\t// more than 1/3 vote with NO_WITH_VETO\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower / 2\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = daos[0].totalVotingPower / 2\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for NO_WITH_VETO\")\n\t}\n\n\t// all YES vote\n\tproposals[0][0].votingPowers[ABSTAIN] = 0\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = 0\n\tproposals[0][0].votingPowers[YES] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != PASSED {\n\t\tt.Errorf(\"proposal should be PASSED\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif daos[0].metadata != \"newMetadata.com\" {\n\t\tt.Errorf(\"metadata not set properly\")\n\t}\n\tif daos[0].uri != \"newURI.com\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestDepositDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when not a dao member\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tDepositDAO(0, 100)\n\t})\n\n\t// not panics\n\tstd.TestSetOrigCaller(caller1)\n\tDepositDAO(0, 100)\n}\n\nfunc TestGetDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tGetDAO(100)\n\t})\n\n\t// success when valid dao id\n\tdao := GetDAO(0)\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestGetDAOs(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tgotDaos := GetDAOs(0, 10)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tCreateDAO(\"https://gnodao2.org\", \"https://metadata.gnodao2.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tgotDaos = GetDAOs(0, 0)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 10)\n\tif len(gotDaos) != 2 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 1)\n\tif len(gotDaos) != 1 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n}\n\nfunc TestGetProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tGetProposal(1, 0)\n\t})\n\n\t// panic when invalid proposal id\n\tassertPanic(t, func() {\n\t\tGetProposal(0, 1)\n\t})\n\n\t// success when valid dao id and proposal id\n\tproposal := GetProposal(0, 0)\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"title not set properly\")\n\t}\n}\n\nfunc TestGetProposals(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tassertPanic(t, func() { // invalid dao id\n\t\tGetProposals(0, 0, 10)\n\t})\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"proposal #1\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\tCreateProposal(0, \"proposal #2\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\tgotProposals := GetProposals(0, 0, 0)\n\tif len(gotProposals) != 0 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 10)\n\tif len(gotProposals) != 2 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 1)\n\tif len(gotProposals) != 1 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n}\n\nfunc TestRender(t *testing.T) {\n\tif Render(\"\") != \"\" {\n\t\tt.Errorf(\"Render function should empty\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"B11lUSXcUHGLcwPcPqU46LvUKFi35R9vTleS5qrICKgKbhGVSZCAROnepkxVU8e1td07kRX2POvPMLI82YCSxQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"gnodao","Path":"gno.land/r/demo/gnodao_v05","Files":[{"Name":"gnodao.gno","Body":"package gnodao\n\nimport (\n\t\"gno.land/p/demo/avl\"\n\tfmt \"gno.land/p/demo/ufmt\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype VoteOption uint32\n\nconst (\n\tYES          VoteOption = 0 // Indicates approval of the proposal in its current form.\n\tNO           VoteOption = 1 // Indicates disapproval of the proposal in its current form.\n\tNO_WITH_VETO VoteOption = 2 // Indicates stronger opposition to the proposal than simply voting No. Not available for SuperMajority-typed proposals as a simple No of 1/3 out of total votes would result in the same outcome.\n\tABSTAIN      VoteOption = 3 // Indicates that the voter is impartial to the outcome of the proposal. Although Abstain votes are counted towards the quorum, they're excluded when calculating the ratio of other voting options above.\n)\n\n// GNODAO VOTE\ntype Vote struct {\n\taddress   std.Address // address of the voter\n\ttimestamp uint64      // block timestamp of the vote\n\toption    VoteOption  // vote option\n}\n\ntype DAO struct {\n\tid               uint64\n\turi              string       // DAO homepage link\n\tmetadata         string       // DAO metadata reference link\n\tfunds            uint64       // DAO managing funds\n\tdepositHistory   []string     // deposit history - reserved for later use\n\tspendHistory     []string     // spend history - reserved for later use\n\tpermissions      []string     // permissions managed on DAO - reserved for later use\n\tpermMap          *avl.MutTree // permission map - reserved for later use\n\tvotingPowers     *avl.MutTree\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalStatus uint32\n\nconst (\n\tNIL           ProposalStatus = 0\n\tVOTING_PERIOD ProposalStatus = 1\n\tPASSED        ProposalStatus = 2\n\tREJECTED      ProposalStatus = 3\n\tFAILED        ProposalStatus = 4\n)\n\nfunc (s ProposalStatus) String() string {\n\tswitch s {\n\tcase NIL:\n\t\treturn \"Nil\"\n\tcase VOTING_PERIOD:\n\t\treturn \"VotingPeriod\"\n\tcase PASSED:\n\t\treturn \"Passed\"\n\tcase REJECTED:\n\t\treturn \"Rejected\"\n\tcase FAILED:\n\t\treturn \"Failed\"\n\t}\n\treturn \"\"\n}\n\ntype VotingPower struct {\n\taddress string\n\tpower   uint64\n}\n\ntype Proposal struct {\n\tdaoId        uint64         // dao id of the proposal\n\tid           uint64         // unique id assigned for each proposal\n\ttitle        string         // proposal title\n\tsummary      string         // proposal summary\n\tspendAmount  uint64         // amount of tokens to spend as part the proposal\n\tspender      std.Address    // address to receive spending tokens\n\tvpUpdates    []VotingPower  // updates on voting power - optional\n\tnewMetadata  string         // new metadata for the DAO - optional\n\tnewURI       string         // new URI for the DAO - optional\n\tsubmitTime   uint64         // proposal submission time\n\tvoteEndTime  uint64         // vote end time for the proposal\n\tstatus       ProposalStatus // StatusNil | StatusVotingPeriod | StatusPassed | StatusRejected | StatusFailed\n\tvotes        *avl.MutTree   // votes on the proposal\n\tvotingPowers []uint64       // voting power sum per voting option\n}\n\n// GNODAO STATE\nvar daos []DAO\nvar proposals [][]Proposal\n\nfunc getDAOVotingPower(daoId uint64, address string) uint64 {\n\tif len(daos) \u003c= int(daoId) {\n\t\treturn 0\n\t}\n\tres, ok := daos[daoId].votingPowers.Get(address)\n\tif ok {\n\t\treturn res.(uint64)\n\t}\n\treturn 0\n}\n\nfunc IsDAOMember(daoId uint64, address std.Address) bool {\n\treturn getDAOVotingPower(daoId, address.String()) \u003e 0\n}\n\nfunc getVote(daoId, proposalId uint64, address std.Address) (Vote, bool) {\n\tif int(daoId) \u003e= len(daos) {\n\t\treturn Vote{}, false\n\t}\n\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\treturn Vote{}, false\n\t}\n\n\tvote, ok := proposals[daoId][proposalId].votes.Get(address.String())\n\tif ok {\n\t\treturn vote.(Vote), true\n\t}\n\treturn Vote{}, false\n}\n\nfunc parseVotingPowers(daoMembers, votingPowers string) []VotingPower {\n\tparsedVPs := []VotingPower{}\n\tif len(daoMembers) == 0 {\n\t\treturn parsedVPs\n\t}\n\tmemberAddrs := strings.Split(daoMembers, \",\")\n\tmemberPowers := strings.Split(votingPowers, \",\")\n\tif len(memberAddrs) != len(memberPowers) {\n\t\tpanic(\"mismatch between members and voting powers count\")\n\t}\n\tfor i, memberAddr := range memberAddrs {\n\t\tpower, err := strconv.Atoi(memberPowers[i])\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tparsedVPs = append(parsedVPs, VotingPower{\n\t\t\taddress: memberAddr,\n\t\t\tpower:   uint64(power),\n\t\t})\n\t}\n\treturn parsedVPs\n}\n\n// GNODAO FUNCTIONS\nfunc CreateDAO(\n\turi string,\n\tmetadata string,\n\tdaoMembers string,\n\tvotingPowers string,\n\tvotingPeriod uint64,\n\tvoteQuorum uint64,\n\tthreshold uint64,\n\tvetoThreshold uint64,\n) {\n\tdaoId := uint64(len(daos))\n\tdaos = append(daos, DAO{\n\t\tid:               daoId,\n\t\turi:              uri,\n\t\tmetadata:         metadata,\n\t\tfunds:            0,\n\t\tdepositHistory:   []string{},\n\t\tspendHistory:     []string{},\n\t\tpermissions:      []string{},\n\t\tpermMap:          avl.NewMutTree(),\n\t\tvotingPowers:     avl.NewMutTree(),\n\t\ttotalVotingPower: 0,\n\t\tvotingPeriod:     votingPeriod,\n\t\tvoteQuorum:       voteQuorum,\n\t\tthreshold:        threshold,\n\t\tvetoThreshold:    vetoThreshold,\n\t})\n\n\tparsedVPs := parseVotingPowers(daoMembers, votingPowers)\n\ttotalVotingPower := uint64(0)\n\tfor _, vp := range parsedVPs {\n\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\ttotalVotingPower += vp.power\n\t}\n\tdaos[daoId].totalVotingPower = totalVotingPower\n\tproposals = append(proposals, []Proposal{})\n\t// TODO: emit events\n}\n\nfunc CreateProposal(\n\tdaoId uint64,\n\ttitle, summary string,\n\tspendAmount uint64, spender std.Address,\n\tdaoMembers string,\n\tvpUpdates string,\n\tnewMetadata string,\n\tnewURI string,\n) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a dao member\")\n\t}\n\n\tparsedVPUpdates := parseVotingPowers(daoMembers, vpUpdates)\n\tproposals[daoId] = append(proposals[daoId], Proposal{\n\t\tdaoId:        daoId,\n\t\tid:           uint64(len(proposals[daoId])),\n\t\ttitle:        title,\n\t\tsummary:      summary,\n\t\tspendAmount:  spendAmount,\n\t\tspender:      spender,\n\t\tvpUpdates:    parsedVPUpdates,\n\t\tnewMetadata:  newMetadata,\n\t\tnewURI:       newURI,\n\t\tsubmitTime:   uint64(time.Now().Unix()),\n\t\tvoteEndTime:  uint64(time.Now().Unix()) + daos[daoId].votingPeriod,\n\t\tstatus:       VOTING_PERIOD,\n\t\tvotes:        avl.NewMutTree(),\n\t\tvotingPowers: []uint64{0, 0, 0, 0}, // initiate as zero for 4 vote types\n\t})\n}\n\nfunc VoteProposal(daoId, proposalId uint64, option VoteOption) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// if invalid proposal, panic\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\n\t// if vote end time is reached panic\n\tif time.Now().Unix() \u003e int64(proposals[daoId][proposalId].voteEndTime) {\n\t\tpanic(\"vote end time reached\")\n\t}\n\n\t// Original vote cancel\n\tcallerVotingPower := getDAOVotingPower(daoId, caller.String())\n\tvote, ok := getVote(daoId, proposalId, caller)\n\tif ok {\n\t\tif proposals[daoId][proposalId].votingPowers[int(vote.option)] \u003e callerVotingPower {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] -= callerVotingPower\n\t\t} else {\n\t\t\tproposals[daoId][proposalId].votingPowers[int(vote.option)] = 0\n\t\t}\n\t}\n\n\t// Create a vote\n\tproposals[daoId][proposalId].votes.Set(caller.String(), Vote{\n\t\taddress:   caller,\n\t\ttimestamp: uint64(time.Now().Unix()),\n\t\toption:    option,\n\t})\n\n\t// Voting power by option update for new vote\n\tproposals[daoId][proposalId].votingPowers[int(option)] += callerVotingPower\n}\n\n// TODO: handle voting power change during voting period for other proposal\n// TODO: experiment with gas limit\nfunc TallyAndExecute(daoId, proposalId uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// validation for proposalId\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\tdao := daos[daoId]\n\tproposal := proposals[daoId][proposalId]\n\tvotingPowers := proposal.votingPowers\n\n\tif time.Now().Unix() \u003c int64(proposal.voteEndTime) {\n\t\tpanic(\"proposal is in voting period\")\n\t}\n\n\t// reference logic for tally - https://github.com/cosmos/cosmos-sdk/blob/main/x/gov/keeper/tally.go\n\ttotalVotes := votingPowers[YES] + votingPowers[NO] + votingPowers[NO_WITH_VETO] + votingPowers[ABSTAIN]\n\tif totalVotes \u003c dao.totalVotingPower*dao.voteQuorum/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If no one votes (everyone abstains), proposal rejected\n\tif totalVotes == votingPowers[ABSTAIN] {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/3 of voters veto, proposal rejected\n\tvetoThreshold := dao.vetoThreshold\n\tif votingPowers[NO_WITH_VETO] \u003e totalVotes*vetoThreshold/100 {\n\t\tproposals[daoId][proposalId].status = REJECTED\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote Yes, proposal passes\n\tthreshold := dao.threshold\n\tif votingPowers[YES] \u003e (totalVotes-votingPowers[ABSTAIN])*threshold/100 {\n\t\tproposals[daoId][proposalId].status = PASSED\n\n\t\t// TODO: spend coins when spendAmount is positive \u0026 spender is a valid address\n\t\tif proposal.spendAmount \u003e 0 {\n\t\t\tif daos[daoId].funds \u003e= proposal.spendAmount {\n\t\t\t\tdaos[daoId].funds -= proposal.spendAmount\n\t\t\t} else {\n\t\t\t\tproposals[daoId][proposalId].status = FAILED\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tif proposal.newMetadata != \"\" {\n\t\t\tdaos[daoId].metadata = proposal.newMetadata\n\t\t}\n\n\t\tif proposal.newURI != \"\" {\n\t\t\tdaos[daoId].uri = proposal.newURI\n\t\t}\n\n\t\tfor _, vp := range proposal.vpUpdates {\n\t\t\tdaos[daoId].totalVotingPower -= getDAOVotingPower(daoId, vp.address)\n\t\t\tdaos[daoId].votingPowers.Set(vp.address, vp.power)\n\t\t\tdaos[daoId].totalVotingPower += vp.power\n\t\t}\n\n\t\t// TODO: contract does not own account that can hold coins - this is one of limitations\n\t\t// TODO: Adena Wallet from OnBloc - investigate on how they manage coins (swap - custody?)\n\t\t// Manual sending for funds (Address \u003c-\u003e Address) - Miloš Živković\n\t\t// https://github.com/gnolang/gno/blob/e392ab51bc05a5efbceaa8dbe395bac2e01ad808/tm2/pkg/crypto/keys/client/send.go#L109-L119\n\t\treturn\n\t}\n\n\t// If more than 1/2 of non-abstaining voters vote No, proposal rejected\n\tproposals[daoId][proposalId].status = REJECTED\n}\n\nfunc DepositDAO(daoId uint64, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\n\t// if sender is not a dao member, revert\n\tisCallerDaoMember := IsDAOMember(daoId, caller)\n\tif !isCallerDaoMember {\n\t\tpanic(\"caller is not a gnodao member\")\n\t}\n\n\t// TODO: send coins from caller to DAO\n\t// TODO: verify received amount\n\t// daos[daoId].depositHistory = append(daos[daoId].depositHistory, Deposit{\n\t// \taddress: caller,\n\t// \tamount:  amount,\n\t// })\n}\n\nfunc GetDAO(daoId uint64) DAO {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\treturn daos[daoId]\n}\n\nfunc GetDAOs(startAfter, limit uint64) []DAO {\n\tmax := uint64(len(daos))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn daos[startAfter:max]\n}\n\nfunc GetProposal(daoId, proposalId uint64) Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tif int(proposalId) \u003e= len(proposals[daoId]) {\n\t\tpanic(\"invalid proposal id\")\n\t}\n\treturn proposals[daoId][proposalId]\n}\n\nfunc GetProposals(daoId, startAfter, limit uint64) []Proposal {\n\tif int(daoId) \u003e= len(daos) {\n\t\tpanic(\"invalid dao id\")\n\t}\n\tmax := uint64(len(proposals[daoId]))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn proposals[daoId][startAfter:max]\n}\n\nfunc RenderVote(daoId, proposalId uint64, address std.Address) string {\n\tvote, found := getVote(daoId, proposalId, address)\n\tif !found {\n\t\treturn \"\"\n\t}\n\n\treturn fmt.Sprintf(`{\n\t\"address\": \"%s\",\n\t\"timestamp\": %d,\n\t\"option\": %d\n}`, vote.address.String(), vote.timestamp, vote.option)\n}\n\ntype DAOEncode struct {\n\tid               uint64\n\turi              string // DAO homepage link\n\tmetadata         string // DAO metadata reference link\n\tfunds            uint64 // DAO managing funds\n\ttotalVotingPower uint64\n\tvotingPeriod     uint64\n\tvoteQuorum       uint64\n\tthreshold        uint64\n\tvetoThreshold    uint64\n}\n\ntype ProposalEncode struct {\n\tdaoId        uint64\n\tid           uint64\n\ttitle        string\n\tsummary      string\n\tspendAmount  uint64\n\tspender      std.Address\n\tvpUpdates    []VotingPower\n\tnewMetadata  string\n\tnewURI       string\n\tsubmitTime   uint64\n\tvoteEndTime  uint64\n\tstatus       ProposalStatus\n\tvotingPowers []uint64\n}\n\nfunc GetDAOEncodeObject(dao DAO) DAOEncode {\n\treturn DAOEncode{\n\t\tid:               dao.id,\n\t\turi:              dao.uri,\n\t\tmetadata:         dao.metadata,\n\t\tfunds:            dao.funds,\n\t\ttotalVotingPower: dao.totalVotingPower,\n\t\tvotingPeriod:     dao.votingPeriod,\n\t\tvoteQuorum:       dao.voteQuorum,\n\t\tthreshold:        dao.threshold,\n\t\tvetoThreshold:    dao.vetoThreshold,\n\t}\n}\n\nfunc GetProposalEncodeObject(p Proposal) ProposalEncode {\n\treturn ProposalEncode{\n\t\tdaoId:        p.daoId,\n\t\tid:           p.id,\n\t\ttitle:        p.title,\n\t\tsummary:      p.summary,\n\t\tspendAmount:  p.spendAmount,\n\t\tspender:      p.spender,\n\t\tvpUpdates:    p.vpUpdates,\n\t\tnewMetadata:  p.newMetadata,\n\t\tnewURI:       p.newURI,\n\t\tsubmitTime:   p.submitTime,\n\t\tvoteEndTime:  p.voteEndTime,\n\t\tstatus:       p.status,\n\t\tvotingPowers: p.votingPowers,\n\t}\n}\n\nfunc RenderDAO(daoId uint64) string {\n\tdaoEncode := GetDAOEncodeObject(GetDAO(daoId))\n\n\treturn fmt.Sprintf(`{\n\t\"id\": %d,\n\t\"uri\": \"%s\",\n\t\"metadata\": \"%s\",\n\t\"funds\" %d,\n\t\"totalVotingPower\" %d,\n\t\"votingPeriod\" %d,\n\t\"voteQuorum\" %d,\n\t\"threshold\" %d,\n\t\"vetoThreshold\" %d\n}`, daoEncode.id, daoEncode.uri, daoEncode.metadata, daoEncode.funds, daoEncode.totalVotingPower, daoEncode.votingPeriod, daoEncode.voteQuorum, daoEncode.threshold, daoEncode.vetoThreshold)\n}\n\nfunc RenderDAOMembers(daoId uint64, start string, end string) string {\n\tdao := GetDAO(daoId)\n\tvotingPowers := []VotingPower{}\n\tdao.votingPowers.Iterate(start, end, func(tree *avl.Tree) bool {\n\t\tpower := tree.Value().(uint64)\n\t\tvotingPowers = append(votingPowers, VotingPower{\n\t\t\taddress: tree.Key(),\n\t\t\tpower:   power,\n\t\t})\n\t\treturn false\n\t})\n\n\trendered := \"[\"\n\tfor index, votingPower := range votingPowers {\n\t\trendered += fmt.Sprintf(`{\n\t\"address\": \"%s\",\n\t\"power\": %d\n}`, votingPower.address, votingPower.power)\n\t\tif index != len(votingPowers)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n\nfunc RenderDAOs(startAfter, limit uint64) string {\n\tdaos := GetDAOs(startAfter, limit)\n\tdaoEncodes := []DAOEncode{}\n\trendered := \"[\"\n\tfor index, dao := range daos {\n\t\trendered += RenderDAO(dao.id)\n\t\tif index != len(daos)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n\nfunc RenderProposal(daoId, proposalId uint64) string {\n\tp := GetProposalEncodeObject(GetProposal(daoId, proposalId))\n\tvpUpdatesRendered := \"[\"\n\tfor index, vpUpdate := range p.vpUpdates {\n\t\tvpUpdatesRendered += fmt.Sprintf(`{\n\t\"address\": \"%s\",\n\t\"power\": %d\n}`, vpUpdate.address, vpUpdate.power)\n\t\tif index != len(p.vpUpdates)-1 {\n\t\t\tvpUpdatesRendered += \",\\n\"\n\t\t}\n\t}\n\tvpUpdatesRendered += \"]\"\n\n\tvotingPowersBySumRendered := fmt.Sprintf(`[%d, %d, %d, %d]`, p.votingPowers[0], p.votingPowers[1], p.votingPowers[2], p.votingPowers[3])\n\n\treturn fmt.Sprintf(`{\n\t\"daoId\": %d,\n\t\"id\": %d,\n\t\"title\": \"%s\",\n\t\"summary\": \"%s\",\n\t\"spendAmount\": %d,\n\t\"spender\": \"%s\",\n\t\"newMetadata\": \"%s\",\n\t\"newURI\": \"%s\",\n\t\"submitTime\": %d,\n\t\"voteEndTime\": %d,\n\t\"status\": %d,\n\t\"vpUpdates\": %s,\n\t\"votingPowers\": %s\n}`, p.daoId, p.id, p.title, p.summary, p.spendAmount, p.spender.String(), p.newMetadata, p.newURI, p.submitTime, p.voteEndTime, p.status, vpUpdatesRendered, votingPowersBySumRendered)\n}\n\nfunc RenderProposals(daoId, startAfter, limit uint64) string {\n\tproposals := GetProposals(daoId, startAfter, limit)\n\trendered := \"[\"\n\tfor index, proposal := range proposals {\n\t\trendered += RenderProposal(proposal.daoId, proposal.id)\n\t\tif index != len(proposals)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n\nfunc Render(path string) string {\n\treturn \"\"\n}\n"},{"Name":"gnodao_test.gno","Body":"package gnodao\n\nimport (\n\t\"fmt\"\n\t\"std\"\n\t\"testing\"\n\t\"time\"\n)\n\nvar caller std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnabcde\"\nvar caller1 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\"\nvar caller2 std.Address = \"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\"\nvar daoMembers = []std.Address{\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnaaaaa\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnbbbbb\",\n\t\"g1rel7980x4y257yh30umy3jx223efwakvnccccc\",\n}\nvar votingPowers = []VotingPower{\n\t{\n\t\taddress: daoMembers[0].String(),\n\t\tpower:   1,\n\t},\n\t{\n\t\taddress: daoMembers[1].String(),\n\t\tpower:   2,\n\t},\n\t{\n\t\taddress: daoMembers[2].String(),\n\t\tpower:   3,\n\t},\n}\n\nfunc assertPanic(t *testing.T, f func()) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t}\n\t}()\n\tf()\n}\n\nfunc TestIsDAOMember(t *testing.T) {\n\tdaos = []DAO{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\n\t// TODO: what package is ideal to use for checks?\n\tif IsDAOMember(0, caller) != false {\n\t\tt.Errorf(\"Should not be false\")\n\t}\n\tif IsDAOMember(0, caller1) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n\tif IsDAOMember(0, caller2) != true {\n\t\tt.Errorf(\"Should be true\")\n\t}\n}\n\nfunc TestCreateDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\n\t\t\"https://gnodao1.org\",\n\t\t\"https://metadata.gnodao1.org\",\n\t\tvotingPowers,\n\t\t86400*2,\n\t\t30,\n\t\t10,\n\t\t10,\n\t)\n\tif len(daos) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tif len(proposals) != 1 {\n\t\tt.Errorf(\"Number of daos be 1\")\n\t}\n\tdao := daos[0]\n\tif dao.id != 0 {\n\t\tt.Errorf(\"first DAO id should be 0\")\n\t}\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"dao uri not set properly\")\n\t}\n\tif dao.metadata != \"https://metadata.gnodao1.org\" {\n\t\tt.Errorf(\"dao metadata not set properly\")\n\t}\n\tif dao.funds != 0 {\n\t\tt.Errorf(\"dao funds not set properly\")\n\t}\n\tif len(dao.depositHistory) != 0 {\n\t\tt.Errorf(\"dao deposit history not set properly\")\n\t}\n\tif len(dao.spendHistory) != 0 {\n\t\tt.Errorf(\"dao spend history not set properly\")\n\t}\n\tif len(dao.permissions) != 0 {\n\t\tt.Errorf(\"dao permissions not set properly\")\n\t}\n\tif dao.permMap == nil {\n\t\tt.Errorf(\"dao permission map not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 0 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller1.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif getDAOVotingPower(0, caller2.String()) != 2 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif dao.totalVotingPower != 6 {\n\t\tt.Errorf(\"totalVotingPower not set properly\")\n\t}\n\tif dao.votingPeriod != 86400*2 {\n\t\tt.Errorf(\"votingPeriod not set properly\")\n\t}\n\tif dao.voteQuorum != 30 {\n\t\tt.Errorf(\"voteQuorum not set properly\")\n\t}\n\tif dao.threshold != 10 {\n\t\tt.Errorf(\"threshold not set properly\")\n\t}\n\tif dao.vetoThreshold != 10 {\n\t\tt.Errorf(\"vetoThreshold not set properly\")\n\t}\n}\n\nfunc TestCreateProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\t})\n\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tproposal := proposals[0][0]\n\tif proposal.daoId != 0 {\n\t\tt.Errorf(\"proposal daoId should be 0\")\n\t}\n\tif proposal.id != 0 {\n\t\tt.Errorf(\"proposal id should be 0\")\n\t}\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"proposal title not set properly\")\n\t}\n\tif proposal.summary != \"Proposal to bootstrap DAO fund.\" {\n\t\tt.Errorf(\"proposal summary not set properly\")\n\t}\n\tif proposal.spendAmount != 0 {\n\t\tt.Errorf(\"proposal spendAmount not set properly\")\n\t}\n\tif proposal.spender != caller {\n\t\tt.Errorf(\"proposal spender not set properly\")\n\t}\n\tif len(proposal.vpUpdates) != 0 {\n\t\tt.Errorf(\"proposal vpUpdates not set properly\")\n\t}\n\tif proposal.newMetadata != \"\" {\n\t\tt.Errorf(\"proposal newMetadata not set properly\")\n\t}\n\tif proposal.newURI != \"\" {\n\t\tt.Errorf(\"proposal newURI not set properly\")\n\t}\n\tif proposal.submitTime != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"proposal submitTime not set properly\")\n\t}\n\tif proposal.voteEndTime != uint64(time.Now().Unix())+daos[0].votingPeriod {\n\t\tt.Errorf(\"proposal voteEndTime not set properly\")\n\t}\n\tif proposal.status != VOTING_PERIOD {\n\t\tt.Errorf(\"proposal status not set properly\")\n\t}\n\tif proposal.votes == nil {\n\t\tt.Errorf(\"proposal votes not set properly\")\n\t}\n\tif len(proposal.votingPowers) != 4 {\n\t\tt.Errorf(\"proposal votingPowers not set properly\")\n\t}\n}\n\nfunc TestVoteProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"\", \"\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(1, 0, YES)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tVoteProposal(0, 1, YES)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tVoteProposal(0, 0, YES)\n\t})\n\n\t// vote and check result is set properly\n\tstd.TestSetOrigCaller(caller1)\n\tVoteProposal(0, 0, YES)\n\tvote, found := getVote(0, 0, caller1)\n\tif !found {\n\t\tt.Errorf(\"proposal vote not set\")\n\t}\n\tif vote.address != caller1 {\n\t\tt.Errorf(\"vote address not set properly\")\n\t}\n\tif vote.timestamp != uint64(time.Now().Unix()) {\n\t\tt.Errorf(\"vote timestamp not set properly\")\n\t}\n\tif vote.option != YES {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 1 {\n\t\tt.Errorf(\"votePowers by vote option not set properly\")\n\t}\n\n\t// vote again with different option and check result\n\tVoteProposal(0, 0, NO)\n\tvote, found = getVote(0, 0, caller1)\n\tif vote.option != NO {\n\t\tt.Errorf(\"vote option not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(YES)] != 0 {\n\t\tt.Errorf(\"votePowers for YES not set properly\")\n\t}\n\tif proposals[0][0].votingPowers[int(NO)] != 1 {\n\t\tt.Errorf(\"votePowers for NO not set properly\")\n\t}\n\n\t// test vote end time already reached\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\t\tVoteProposal(0, 0, YES)\n\t})\n}\n\nfunc TestTallyAndExecute(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{\n\t\t{\n\t\t\taddress: caller.String(),\n\t\t\tpower:   1,\n\t\t},\n\t}, \"newMetadata.com\", \"newURI.com\")\n\tassertPanic(t, func() { // invalid dao id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(1, 0)\n\t})\n\tassertPanic(t, func() { // invalid proposal id\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 1)\n\t})\n\tassertPanic(t, func() { // not dao member\n\t\tstd.TestSetOrigCaller(caller)\n\t\tTallyAndExecute(0, 0)\n\t})\n\tassertPanic(t, func() { // vote end time not pass\n\t\tstd.TestSetOrigCaller(caller1)\n\t\tTallyAndExecute(0, 0)\n\t})\n\n\t// vote end time to be reached\n\tproposals[0][0].voteEndTime = uint64(time.Now().Unix()) - 1\n\n\t// quorum not reached\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for vote quorum\")\n\t}\n\n\t// everyone abstains\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for all abstains\")\n\t}\n\n\t// more than 1/3 vote with NO_WITH_VETO\n\tproposals[0][0].votingPowers[ABSTAIN] = daos[0].totalVotingPower / 2\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = daos[0].totalVotingPower / 2\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != REJECTED {\n\t\tt.Errorf(\"proposal should be REJECTED for NO_WITH_VETO\")\n\t}\n\n\t// all YES vote\n\tproposals[0][0].votingPowers[ABSTAIN] = 0\n\tproposals[0][0].votingPowers[NO_WITH_VETO] = 0\n\tproposals[0][0].votingPowers[YES] = daos[0].totalVotingPower\n\tstd.TestSetOrigCaller(caller1)\n\tTallyAndExecute(0, 0)\n\tif proposals[0][0].status != PASSED {\n\t\tt.Errorf(\"proposal should be PASSED\")\n\t}\n\tif getDAOVotingPower(0, caller.String()) != 1 {\n\t\tt.Errorf(\"voting power not set properly\")\n\t}\n\tif daos[0].metadata != \"newMetadata.com\" {\n\t\tt.Errorf(\"metadata not set properly\")\n\t}\n\tif daos[0].uri != \"newURI.com\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestDepositDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when not a dao member\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tDepositDAO(0, 100)\n\t})\n\n\t// not panics\n\tstd.TestSetOrigCaller(caller1)\n\tDepositDAO(0, 100)\n}\n\nfunc TestGetDAO(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tstd.TestSetOrigCaller(caller)\n\t\tGetDAO(100)\n\t})\n\n\t// success when valid dao id\n\tdao := GetDAO(0)\n\tif dao.uri != \"https://gnodao1.org\" {\n\t\tt.Errorf(\"uri not set properly\")\n\t}\n}\n\nfunc TestGetDAOs(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tgotDaos := GetDAOs(0, 10)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tCreateDAO(\"https://gnodao2.org\", \"https://metadata.gnodao2.org\", votingPowers, 86400*2, 30, 10, 10)\n\n\tgotDaos = GetDAOs(0, 0)\n\tif len(gotDaos) != 0 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 10)\n\tif len(gotDaos) != 2 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n\n\tgotDaos = GetDAOs(0, 1)\n\tif len(gotDaos) != 1 {\n\t\tt.Errorf(\"invalid number of daos\")\n\t}\n}\n\nfunc TestGetProposal(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"DAO fund bootstrap proposal\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\t// panic when invalid dao id\n\tassertPanic(t, func() {\n\t\tGetProposal(1, 0)\n\t})\n\n\t// panic when invalid proposal id\n\tassertPanic(t, func() {\n\t\tGetProposal(0, 1)\n\t})\n\n\t// success when valid dao id and proposal id\n\tproposal := GetProposal(0, 0)\n\tif proposal.title != \"DAO fund bootstrap proposal\" {\n\t\tt.Errorf(\"title not set properly\")\n\t}\n}\n\nfunc TestGetProposals(t *testing.T) {\n\tdaos = []DAO{}\n\tproposals = [][]Proposal{}\n\tassertPanic(t, func() { // invalid dao id\n\t\tGetProposals(0, 0, 10)\n\t})\n\tCreateDAO(\"https://gnodao1.org\", \"https://metadata.gnodao1.org\", votingPowers, 86400*2, 30, 10, 10)\n\tstd.TestSetOrigCaller(caller1)\n\tCreateProposal(0, \"proposal #1\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\tCreateProposal(0, \"proposal #2\", \"Proposal to bootstrap DAO fund.\", 0, caller, []VotingPower{}, \"newMetadata.com\", \"newURI.com\")\n\n\tgotProposals := GetProposals(0, 0, 0)\n\tif len(gotProposals) != 0 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 10)\n\tif len(gotProposals) != 2 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n\n\tgotProposals = GetProposals(0, 0, 1)\n\tif len(gotProposals) != 1 {\n\t\tt.Errorf(\"invalid number of proposals\")\n\t}\n}\n\nfunc TestRender(t *testing.T) {\n\tif Render(\"\") != \"\" {\n\t\tt.Errorf(\"Render function should empty\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"not89ccAZHrAtyucor6fYR1SWOMEO8oqg0e3Fc+OHWVMptBjHLXrF9pJBRrqmCTvgWhB2Emm5OhGGrg2rsuz7Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/gnodao_v05","func":"CreateProposal","args":["0","First proposal","First proposal summary","0","g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","","","https://metadata.gnodao1.com","https://gnodao1.com"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"0oy0BpR8+I0VZzlCnHnY2C8TvCJ+rN42eyj2/Y2k9CVhyjOdXpCWCg0y/75EzD1TbIHg6jO8PjzjSyCCOr/69w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/gnodao_v05","func":"CreateDAO","args":["https://gnodao1.org","https://metadata.gnodao1.org","g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","1","40","30","10","10"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"N6GPqFXv3NQ68YSf+FIhTIFISnAX/Mq6bWRlu/2jHUt40jv7uoGlojI46+hGV3jrVEJm+M/tHVgArAR/ZtlJAA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","to_address":"g1k8p7x84gjcy0recfkzvfgljxyyxdlgu02y6w50","amount":"307999998ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al7LV/X++mUIljzenR1OaxKfue7hfo6UsvOhGCdDtiid"},"signature":"+AK5arCYoWCEKnU940/gbgRDueJMc9xTaxIYHLTOWk0cM2UECAcQd9vQ1SaQggbZQp7bdzlVO1yY3fWaujRKEw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"SfcjBcy+AYYFShihDP9H57yzBzQYuGYBE0P2lFoAQGctHK/ufEw/yb4592b7/bU6t6uTffhUyMSA09mlJOeiwQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"LccXkKeIJpIHdfHJIAweKYnfM9H4E6lo3Xe7/sMxrTsNCLJm3NCGBNhntHUmuKnrJRoKiFL+IsHWC0AMahxiUw=="}],"memo":"tx-0"}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"+3x0k9M/MCrMam9WD7z4VVDw4qUjJrqWVa4jeTYtcQkHtUqv0OYWDwwmN0+t2MefJsNmsAJpK58ZwLL7RMRQhw=="}],"memo":"tx-1"}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"tDWdW50sFKg2g5Pf7lMrBHICJEhATDts6kge2q40o7BkOEYAVDQ/gpy0BIBTaE7UZgO/MBFAvvm6FAXzQ8ljLA=="}],"memo":"tx-2"}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1hxecqgcv4f0p7s7ap6t20vaeeuvqgvl9qtchr6","to_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","amount":"1000000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuJxl7LShR2+FGthhNED94mz+IowgGHOGEXtOnrBkqq5"},"signature":"sOjVmriRIVKzMvUywWrLAhKBjV1GClxmhNOBJ3G4z30bnrc67mXBdiheD1Wl+OHjAH75nwEs71QEJrLI8NmM8g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1k8p7x84gjcy0recfkzvfgljxyyxdlgu02y6w50","to_address":"g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","amount":"600000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6sURdF72+imW+kYkFKR0lhx1XEPwHnXhsbvPzBpctfC"},"signature":"lmFwAbmHQLN/eiSu0c1dYIY97235Ug+ve8k8YC6SwhwVnXBZbdypkw+/1vGe4uvqlRdXEoZ3GnK/ohW2Fg+ZSg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","package":{"Name":"nft","Path":"gno.land/r/disperze/nft","Files":[{"Name":"collection.gno","Body":"package nft\n\nimport (\n\t\"errors\"\n\t\"strconv\"\n\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/grc/grc721\"\n)\n\ntype CollectionID string\n\ntype Collection struct {\n\tname      string\n\tsymbol    string\n\turi       string\n\tminter    std.Address\n\tsupply    int\n\ttokens    *avl.Tree // grc721.TokenID -\u003e *NFToken{}\n\toperators *avl.Tree // owner std.Address -\u003e operator std.Address\n\towners    *avl.Tree // owner std.Address -\u003e (grc721.TokenID -\u003e nil)\n}\n\nfunc newCollection(name, symbol, uri string, minter std.Address) *Collection {\n\treturn \u0026Collection{\n\t\tname:   name,\n\t\tsymbol: symbol,\n\t\turi:    uri,\n\t\tminter: minter,\n\t}\n}\n\nfunc (c CollectionID) String() string {\n\treturn string(c)\n}\n\nfunc (c *Collection) validate() error {\n\tif len(c.name) \u003c 3 || len(c.name) \u003e 50 {\n\t\treturn errors.New(\"name is not in the expected format\")\n\t}\n\n\tif len(c.symbol) \u003c 3 || len(c.symbol) \u003e 12 {\n\t\treturn errors.New(\"symbol is not in expected format\")\n\t}\n\n\tif !isValidAddr(c.minter) {\n\t\treturn errors.New(\"minter is not a valid\")\n\t}\n\n\treturn nil\n}\n\nfunc (c *Collection) incrTotalSupply() {\n\tc.supply++\n}\n\nfunc (c *Collection) decrTotalSupply() {\n\tc.supply--\n}\n\nfunc (c *Collection) addOwnerToken(tid grc721.TokenID, owner std.Address) {\n\tnfts := c.ownerStore(owner)\n\tnfts, _ = nfts.Set(string(tid), \"\")\n\tc.owners, _ = c.owners.Set(owner.String(), nfts)\n}\n\nfunc (c *Collection) delOwnerToken(tid grc721.TokenID, owner std.Address) {\n\t_, nfts, exist := c.owners.Get(owner.String())\n\tif !exist {\n\t\tpanic(\"unexpected error\")\n\t}\n\tnfts, _, _, _ = nfts.(*avl.Tree).Remove(string(tid))\n\tc.owners, _ = c.owners.Set(owner.String(), nfts)\n}\n\nfunc (c *Collection) ownerStore(addr std.Address) *avl.Tree {\n\tif !c.owners.Has(addr.String()) {\n\t\tvar tree *avl.Tree\n\t\tc.owners, _ = c.owners.Set(addr.String(), tree)\n\n\t\treturn tree\n\t}\n\n\t_, tree, _ := c.owners.Get(addr.String())\n\treturn tree.(*avl.Tree)\n}\n\nfunc (c *Collection) getToken(tid grc721.TokenID) *NFToken {\n\t_, token, ok := c.tokens.Get(string(tid))\n\tif !ok {\n\t\tpanic(\"token does not exist\")\n\t}\n\n\treturn token.(*NFToken)\n}\n\nfunc (c *Collection) addToken(tid grc721.TokenID, token *NFToken) {\n\tc.tokens, _ = c.tokens.Set(string(tid), token)\n}\n\nfunc (c *Collection) getOperator(owner std.Address) (std.Address, bool) {\n\t_, operator, ok := c.operators.Get(owner.String())\n\tif !ok {\n\t\treturn \"\", false\n\t}\n\n\treturn operator.(std.Address), true\n}\n\nfunc (c *Collection) setOperator(sender, operator std.Address) {\n\tc.operators, _ = c.operators.Set(sender.String(), operator)\n}\n\nfunc (c *Collection) delOperator(sender std.Address) bool {\n\tnewOperators, _, _, removed := c.operators.Remove(sender.String())\n\tif removed {\n\t\tc.operators = newOperators\n\t}\n\n\treturn removed\n}\n\nfunc (c *Collection) Render() string {\n\tpanic(\"unimplemented\")\n}\n\nfunc (c *Collection) GetInfo() CollectionInfo {\n\treturn CollectionInfo{\n\t\tName:   c.name,\n\t\tSymbol: c.symbol,\n\t\tUri:    c.uri,\n\t\tSupply: c.supply,\n\t}\n}\n\nfunc getCollection(cid CollectionID) *Collection {\n\tcollectionI, exists := collections.Get(cid.String())\n\tif !exists {\n\t\tpanic(\"collection does not exist\")\n\t}\n\n\treturn collectionI.(*Collection)\n}\n\nfunc nextCollectionID() CollectionID {\n\tcollectionCtr++\n\ts := strconv.Itoa(collectionCtr)\n\treturn CollectionID(s)\n}\n"},{"Name":"contract.gno","Body":"package nft\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/grc/grc721\"\n)\n\nfunc CreateCollection(name, symbol, uri string, minter std.Address) CollectionID {\n\tcollection := newCollection(name, symbol, uri, minter)\n\tnoError(collection.validate())\n\tcid := nextCollectionID()\n\tcollections.Set(string(cid), collection)\n\treturn cid\n}\n\nfunc Mint(cid CollectionID, tid grc721.TokenID, to std.Address, uri string) {\n\ttoken := newToken(to, uri)\n\tnoError(token.validate())\n\n\tc := getCollection(cid)\n\tif c.minter != getCaller() {\n\t\tpanic(\"unauthorized\")\n\t}\n\n\tif c.tokens.Has(string(tid)) {\n\t\tpanic(\"token already exists\")\n\t}\n\n\tc.addToken(tid, token)\n\tc.addOwnerToken(tid, to)\n\tc.incrTotalSupply()\n}\n\nfunc TransferFrom(cid CollectionID, from, to std.Address, tid grc721.TokenID) {\n\tc := getCollection(cid)\n\tcaller := getCaller()\n\ttoken := c.getToken(tid)\n\n\tif from != token.owner {\n\t\tpanic(\"from is not the current owner\")\n\t}\n\n\tif !isValidAddr(to) {\n\t\tpanic(\"recipient address is invalid or empty\")\n\t}\n\n\tif !canSend(caller, token, c) {\n\t\tpanic(\"unauthorized\")\n\t}\n\n\tc.delOwnerToken(tid, token.owner)\n\ttoken.owner = to\n\tc.addOwnerToken(tid, to)\n\n\t// reset approval\n\ttoken.approved = \"\"\n}\n\nfunc Approve(cid CollectionID, approved std.Address, tid grc721.TokenID) {\n\tc := getCollection(cid)\n\tcaller := getCaller()\n\ttoken := c.getToken(tid)\n\n\tif !canChangeApprovals(caller, token, c) {\n\t\tpanic(\"unauthorized\")\n\t}\n\n\ttoken.approved = approved\n}\n\nfunc ApproveAll(cid CollectionID, operator std.Address) {\n\tif operator == \"\" {\n\t\tpanic(\"operator cannot be empty\")\n\t}\n\n\tc := getCollection(cid)\n\tcaller := getCaller()\n\tc.setOperator(caller, operator)\n}\n\nfunc Revoke(cid CollectionID, tid grc721.TokenID) {\n\tc := getCollection(cid)\n\tcaller := getCaller()\n\ttoken := c.getToken(tid)\n\n\tif !canChangeApprovals(caller, token, c) {\n\t\tpanic(\"unauthorized\")\n\t}\n\n\ttoken.approved = \"\"\n}\n\nfunc RevokeAll(cid CollectionID) {\n\tc := getCollection(cid)\n\tcaller := getCaller()\n\tremoved := c.delOperator(caller)\n\tif !removed {\n\t\tpanic(\"no operator found\")\n\t}\n}\n\nfunc Burn(cid CollectionID, tid grc721.TokenID) {\n\tcaller := getCaller()\n\tc := getCollection(cid)\n\ttoken := c.getToken(tid)\n\n\tif !canSend(caller, token, c) {\n\t\tpanic(\"unauthorized\")\n\t}\n\n\tc.decrTotalSupply()\n\tc.delOwnerToken(tid, token.owner)\n\tc.tokens.Remove(string(tid))\n}\n\n// Query\n\nfunc BalanceOf(cid CollectionID, owner std.Address) (count int64) {\n\tc := getCollection(cid)\n\t_, nfts, exist := c.owners.Get(owner.String())\n\tif !exist {\n\t\treturn 0\n\t}\n\n\ttotal := int64(0)\n\tnfts.(*avl.Tree).Iterate(\"\", \"\", func(t *avl.Tree) bool {\n\t\ttotal++\n\t\treturn false\n\t})\n\n\treturn total\n}\n\nfunc OwnerOf(cid CollectionID, tid grc721.TokenID) std.Address {\n\tc := getCollection(cid)\n\ttoken := c.getToken(tid)\n\treturn token.owner\n}\n\nfunc GetCollection(cid CollectionID) CollectionInfo {\n\tc := getCollection(cid)\n\treturn c.GetInfo()\n}\n\nfunc GetNftInfo(cid CollectionID, tid grc721.TokenID) NftInfo {\n\tc := getCollection(cid)\n\ttoken := c.getToken(tid)\n\n\treturn token.GetInfo()\n}\n\nfunc GetMinter(cid CollectionID) std.Address {\n\tc := getCollection(cid)\n\treturn c.minter\n}\n\nfunc TokensOf(cid CollectionID, owner std.Address, start grc721.TokenID, limit int) string {\n\tif limit \u003c= 0 {\n\t\tpanic(\"limit must be greater than 0\")\n\t}\n\n\tc := getCollection(cid)\n\t_, nfts, exist := c.owners.Get(owner.String())\n\tif !exist {\n\t\treturn \"\"\n\t}\n\n\tcount := 0\n\ttokens, separator := \"\", \"\"\n\tnfts.(*avl.Tree).Iterate(string(start), \"\", func(t *avl.Tree) bool {\n\t\ttokens += separator + t.Key()\n\t\tcount++\n\t\tif count == limit {\n\t\t\treturn true\n\t\t}\n\t\tseparator = \",\"\n\t\treturn false\n\t})\n\n\treturn tokens\n}\n\nfunc AllTokens(cid CollectionID, start grc721.TokenID, limit int) string {\n\tc := getCollection(cid)\n\tcount := 0\n\ttokens, separator := \"\", \"\"\n\tc.tokens.Iterate(string(start), \"\", func(t *avl.Tree) bool {\n\t\ttokens += separator + t.Key()\n\n\t\tcount++\n\t\tif count == limit {\n\t\t\treturn true\n\t\t}\n\t\tseparator = \",\"\n\t\treturn false\n\t})\n\n\treturn tokens\n}\n\nfunc GetApproval(cid CollectionID, tid grc721.TokenID) std.Address {\n\tc := getCollection(cid)\n\ttoken := c.getToken(tid)\n\treturn token.approved\n}\n\nfunc GetOperator(cid CollectionID, owner std.Address) std.Address {\n\tc := getCollection(cid)\n\toperator, ok := c.getOperator(owner)\n\tif !ok {\n\t\treturn \"\"\n\t}\n\n\treturn operator\n}\n"},{"Name":"render.gno","Body":"package nft\n\nimport \"strconv\"\n\nfunc Render(path string) string {\n\tout := \"# NFT\"\n\tout += \"\\nTotal Collections: \" + strconv.Itoa(collectionCtr)\n\n\treturn out\n}\n"},{"Name":"store.gno","Body":"package nft\n\nimport (\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tcollections   = avl.NewMutTree()\n\tcollectionCtr int // increments Collection.id\n)\n"},{"Name":"token.gno","Body":"package nft\n\nimport (\n\t\"errors\"\n\n\t\"std\"\n)\n\ntype NFToken struct {\n\towner    std.Address\n\tapproved std.Address\n\turi      string\n}\n\nfunc newToken(owner std.Address, uri string) *NFToken {\n\treturn \u0026NFToken{\n\t\towner: owner,\n\t\turi:   uri,\n\t}\n}\n\nfunc (t *NFToken) validate() error {\n\tif !isValidAddr(t.owner) {\n\t\treturn errors.New(\"owner is not a valid address\")\n\t}\n\n\treturn nil\n}\n\nfunc (t *NFToken) Render() string {\n\tpanic(\"unimplemented\")\n}\n\nfunc (t *NFToken) GetInfo() NftInfo {\n\treturn NftInfo{\n\t\tUri: t.uri,\n\t}\n}\n"},{"Name":"types.gno","Body":"package nft\n\n// public types\n\ntype CollectionInfo struct {\n\tName   string\n\tSymbol string\n\tUri    string\n\tSupply int\n}\n\ntype NftInfo struct {\n\tUri string\n}\n"},{"Name":"utils.gno","Body":"package nft\n\nimport (\n\t\"std\"\n)\n\nfunc getCaller() std.Address {\n\treturn std.GetCallerAt(3)\n}\n\nfunc canSend(sender std.Address, token *NFToken, c *Collection) bool {\n\tif sender != token.owner \u0026\u0026 sender != token.approved {\n\t\t_, operator, ok := c.operators.Get(token.owner.String())\n\t\tif !ok || sender != operator.(std.Address) {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}\n\nfunc canChangeApprovals(sender std.Address, token *NFToken, c *Collection) bool {\n\tif sender != token.owner {\n\t\t_, operator, ok := c.operators.Get(token.owner.String())\n\t\tif !ok || sender != operator.(std.Address) {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}\n\nfunc noError(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc isValidAddr(addr std.Address) bool {\n\tif addr == \"\" {\n\t\treturn false\n\t}\n\n\tprefix, bytes, ok := std.DecodeBech32(addr)\n\tif prefix != \"g\" || len(bytes) != 20 || !ok {\n\t\treturn false\n\t}\n\n\treturn true\n}\n\nfunc normalizeAddr(addr std.Address) (std.Address, bool) {\n\tprefix, bytes, ok := std.DecodeBech32(addr)\n\tif !ok {\n\t\treturn \"\", false\n\t}\n\n\treturn std.Address(std.EncodeBech32(prefix, bytes)), true\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al7LV/X++mUIljzenR1OaxKfue7hfo6UsvOhGCdDtiid"},"signature":"WNIMMw43xDBQU+dw+K0hLjqfXXsKPsYg9vaH2Hf9pk1IvG2IJ8cKRwuQfjxZzC8gsfgq7gqGDNxKEggPBhpAzw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","package":{"Name":"domains","Path":"gno.land/r/disperze/domains","Files":[{"Name":"contract.gno","Body":"package domains\n\nimport (\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/grc/grc721\"\n\t\"gno.land/r/disperze/nft\"\n\t\"std\"\n)\n\nfunc RegisterTLD(tld string, cid nft.CollectionID, issuer std.Address) {\n\tcaller := getCaller()\n\tif caller != admin {\n\t\tpanic(\"unauthorized\")\n\t}\n\n\tg := newTLDomain(tld, cid, issuer)\n\tcheckNoError(g.validate())\n\ttlds.Set(tld, g)\n}\n\nfunc RegisterDomain(tid grc721.TokenID, domain string) {\n\ttld := parseTLD(domain)\n\tcaller := getCaller()\n\tif caller != tld.issuer {\n\t\tpanic(\"unauthorized\")\n\t}\n\n\tname, _ := parseDomain(domain)\n\tif tld.isRegDomain(name) {\n\t\tpanic(\"domain already exists\")\n\t}\n\n\td := newDomain(name, tid)\n\tcheckNoError(d.validate())\n\ttld.addDomain(d)\n\n\t// Set default first domain\n\towner := nft.OwnerOf(tld.cid, tid)\n\ttld.setDefaultResolver(owner, domain)\n}\n\nfunc SetRecord(domain, key, value string) {\n\tkeyR, ok := keys[key]\n\tif !ok {\n\t\tpanic(\"key not allowed\")\n\t}\n\tcheckNoError(keyR.typ.validate(value))\n\ttld := parseTLD(domain)\n\td := tld.getDomain(domain)\n\tcaller := getCaller()\n\towner := nft.OwnerOf(tld.cid, d.tid)\n\tif caller != owner {\n\t\tpanic(\"unauthorized\")\n\t}\n\n\td.setRecord(keyR.index, value)\n}\n\nfunc SetDomain(domain string) {\n\ttld := parseTLD(domain)\n\td := tld.getDomain(domain)\n\tcaller := getCaller()\n\towner := nft.OwnerOf(tld.cid, d.tid)\n\tif caller != owner {\n\t\tpanic(\"unauthorized\")\n\t}\n\n\ttld.setResolver(caller, domain)\n}\n\n// Admin oper.\n\nfunc AddRecordType(id, newKey, rType string) {\n\tcaller := getCaller()\n\tif caller != admin {\n\t\tpanic(\"unauthorized\")\n\t}\n\n\tif _, ok := keys[newKey]; ok {\n\t\tpanic(\"key already exists\")\n\t}\n\n\tdata, exists := defaultTypes[rType]\n\tif !exists {\n\t\tpanic(\"record type not found\")\n\t}\n\n\tkeys[newKey] = Record{index: id, typ: data}\n}\n\nfunc UpdateAdmin(newAdmin std.Address) {\n\tif newAdmin == \"\" {\n\t\tpanic(\"invalid address\")\n\t}\n\n\tcaller := getCaller()\n\tif caller != admin {\n\t\tpanic(\"unauthorized\")\n\t}\n\n\tadmin = newAdmin\n}\n\nfunc Initialize(addr std.Address) {\n\tif initiated {\n\t\tpanic(\"already initiated\")\n\t}\n\n\tadmin = addr\n\tinitiated = true\n}\n\n// query\n\nfunc GetTLD(tld string) TLDResponse {\n\tt := getTLD(tld)\n\n\treturn TLDResponse{\n\t\tTld:    t.tld,\n\t\tCID:    t.cid,\n\t\tIssuer: t.issuer,\n\t\tTotal:  t.domains.Size(),\n\t}\n}\n\nfunc GetDomain(domain string) DomainResponse {\n\ttld := parseTLD(domain)\n\td := tld.getDomain(domain)\n\n\treturn DomainResponse{\n\t\tName:  d.name,\n\t\tTld:   tld.tld,\n\t\tTID:   d.tid,\n\t\tOwner: nft.OwnerOf(tld.cid, d.tid),\n\t}\n}\n\nfunc DomainExists(domain string) bool {\n\tdomain, tld := parseDomain(strings.ToLower(domain))\n\tt := getTLD(tld)\n\n\treturn t.domains.Has(domain)\n}\n\nfunc Resolve(domain string) std.Address {\n\tt := parseTLD(domain)\n\n\treturn nft.OwnerOf(t.cid, t.getDomain(domain).tid)\n}\n\nfunc GetName(tld string, address std.Address) string {\n\tt := getTLD(tld)\n\n\treturn t.resolve(address)\n}\n\nfunc GetRecord(domain, key string) string {\n\ttld := parseTLD(domain)\n\tkeyR, ok := keys[key]\n\tif !ok {\n\t\tpanic(\"key not allowed\")\n\t}\n\n\td := tld.getDomain(domain)\n\treturn d.getRecord(keyR.index)\n}\n\nfunc GetAllRecords(domain string) map[string]string {\n\ttld := parseTLD(domain)\n\td := tld.getDomain(domain)\n\n\treverseKeys := make(map[string]string, len(keys))\n\tfor k, v := range keys {\n\t\treverseKeys[v.index] = k\n\t}\n\n\trecords := make(map[string]string, len(keys))\n\td.records.Iterate(\"\", \"\", func(t *avl.Tree) bool {\n\t\trecords[reverseKeys[t.Key()]] = t.Value().(string)\n\t\treturn false\n\t})\n\n\t// set defaults values\n\tfor k := range keys {\n\t\tif _, ok := records[k]; !ok {\n\t\t\trecords[k] = \"\"\n\t\t}\n\t}\n\n\treturn records\n}\n"},{"Name":"domain.gno","Body":"package domains\n\nimport (\n\t\"errors\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/grc/grc721\"\n\t\"gno.land/r/disperze/nft\"\n\t\"std\"\n)\n\ntype Domain struct {\n\ttid     grc721.TokenID\n\tname    string\n\trecords *avl.Tree\n}\n\nfunc newDomain(name string, nftID grc721.TokenID) *Domain {\n\treturn \u0026Domain{\n\t\ttid:  nftID,\n\t\tname: name,\n\t}\n}\n\nfunc (d *Domain) getRecord(keyID string) string {\n\t_, value, exists := d.records.Get(keyID)\n\tif !exists {\n\t\treturn \"\"\n\t}\n\n\treturn value.(string)\n}\n\nfunc (d *Domain) setRecord(keyID, value string) {\n\td.records, _ = d.records.Set(keyID, value)\n}\n\nfunc (d *Domain) validate() error {\n\tif d.name == \"\" {\n\t\treturn errors.New(\"domain cannot be empty\")\n\t}\n\n\treturn nil\n}\n\ntype TLDomain struct {\n\ttld      string\n\tcid      nft.CollectionID // tld nft collectionID\n\tissuer   std.Address\n\tdomains  *avl.Tree // tld -\u003e Domain\n\tresolver *avl.Tree // address -\u003e domain name\n}\n\nfunc newTLDomain(ext string, cid nft.CollectionID, issuer std.Address) *TLDomain {\n\treturn \u0026TLDomain{\n\t\ttld:    ext,\n\t\tcid:    cid,\n\t\tissuer: issuer,\n\t}\n}\n\nfunc (t *TLDomain) isRegDomain(name string) bool {\n\treturn t.domains.Has(name)\n}\n\nfunc (t *TLDomain) getDomain(domain string) *Domain {\n\tname, tld := parseDomain(domain)\n\tif tld != t.tld {\n\t\tpanic(\"invalid tld\")\n\t}\n\n\t_, data, exists := t.domains.Get(name)\n\tif !exists {\n\t\tpanic(\"domain not found\")\n\t}\n\n\treturn data.(*Domain)\n}\n\nfunc (t *TLDomain) addDomain(domain *Domain) {\n\tt.domains, _ = t.domains.Set(domain.name, domain)\n}\n\nfunc (t *TLDomain) resolve(address std.Address) string {\n\t_, value, exists := t.resolver.Get(address.String())\n\tif !exists {\n\t\treturn \"\"\n\t}\n\n\treturn value.(string)\n}\n\nfunc (t *TLDomain) setDefaultResolver(owner std.Address, domain string) {\n\tif !t.resolver.Has(owner.String()) {\n\t\tt.setResolver(owner, domain)\n\t}\n}\n\nfunc (t *TLDomain) setResolver(owner std.Address, domain string) {\n\tt.resolver, _ = t.resolver.Set(owner.String(), domain)\n}\n\nfunc (t *TLDomain) validate() error {\n\tif t.cid == \"\" {\n\t\treturn errors.New(\"collection ID cannot be empty\")\n\t}\n\n\tif len(t.tld) == 0 || len(t.tld) \u003e 10 {\n\t\treturn errors.New(\"invalid tld length\")\n\t}\n\n\tfor _, r := range t.tld {\n\t\tif r \u003c 'a' || r \u003e 'z' {\n\t\t\tpanic(\"invalid tld format\")\n\t\t}\n\t}\n\n\tif !isValidAddr(t.issuer) {\n\t\treturn errors.New(\"invalid issuer address\")\n\t}\n\n\treturn nil\n}\n\nfunc parseTLD(domain string) *TLDomain {\n\t_, tld := parseDomain(domain)\n\n\treturn getTLD(tld)\n}\n\nfunc getTLD(tld string) *TLDomain {\n\tdata, exists := tlds.Get(tld)\n\tif !exists {\n\t\tpanic(\"tld not found\")\n\t}\n\n\treturn data.(*TLDomain)\n}\n\nfunc parseDomain(domain string) (string, string) {\n\tparts := strings.Split(domain, \".\")\n\tif len(parts) != 2 {\n\t\tpanic(\"invalid domain\")\n\t}\n\n\treturn parts[0], parts[1]\n}\n"},{"Name":"params.gno","Body":"package domains\n\nimport (\n\t\"std\"\n)\n\nvar (\n\tinitiated = false\n\tadmin     std.Address\n\n\tdefaultTypes = map[string]RecordType{\n\t\t\"bech32\": Bech32Type{},\n\t\t\"url\":    URLType{},\n\t\t\"ip\":     IPType{},\n\t\t\"email\":  EmailType{},\n\t\t\"text\":   TextType{},\n\t\t\"name\":   UserNameType{},\n\t}\n\tkeys = map[string]Record{\n\t\t\"fullname\": {index: \"1\", typ: defaultTypes[\"text\"]},\n\t\t\"bio\":      {index: \"2\", typ: defaultTypes[\"text\"]},\n\t\t\"ip\":       {index: \"3\", typ: defaultTypes[\"ip\"]},\n\t\t\"twitter\":  {index: \"4\", typ: defaultTypes[\"name\"]},\n\t\t\"github\":   {index: \"5\", typ: defaultTypes[\"name\"]},\n\t\t\"discord\":  {index: \"6\", typ: defaultTypes[\"name\"]},\n\t\t\"telegram\": {index: \"7\", typ: defaultTypes[\"name\"]},\n\t\t\"email\":    {index: \"8\", typ: defaultTypes[\"email\"]},\n\t\t\"picture\":  {index: \"9\", typ: defaultTypes[\"url\"]},\n\t\t\"site\":     {index: \"10\", typ: defaultTypes[\"url\"]},\n\t}\n)\n"},{"Name":"record.gno","Body":"package domains\n\nimport (\n\t\"errors\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"std\"\n)\n\ntype Record struct {\n\tindex string\n\ttyp   RecordType\n}\n\ntype RecordType interface {\n\tvalidate(string) error\n}\n\ntype URLType struct {\n}\n\nfunc (URLType) validate(value string) error {\n\treturn nil\n}\n\ntype IPType struct {\n}\n\nfunc (IPType) validate(value string) error {\n\tparts := strings.Split(value, \".\")\n\tif len(parts) != 4 {\n\t\treturn errors.New(\"invalid ip address\")\n\t}\n\n\tfor _, part := range parts {\n\t\tnum, err := strconv.Atoi(part)\n\t\tif err != nil {\n\t\t\treturn errors.New(\"invalid ip address\")\n\t\t}\n\n\t\tif num \u003c 0 || num \u003e 255 {\n\t\t\treturn errors.New(\"invalid ip address\")\n\t\t}\n\t}\n\treturn nil\n}\n\ntype Bech32Type struct {\n}\n\nfunc (Bech32Type) validate(value string) error {\n\t_, _, ok := std.DecodeBech32(std.Address(value))\n\tif !ok {\n\t\treturn errors.New(\"invalid bech32 address\")\n\t}\n\n\treturn nil\n}\n\ntype EmailType struct {\n}\n\nfunc (EmailType) validate(value string) error {\n\treturn nil\n}\n\ntype TextType struct {\n}\n\nfunc (TextType) validate(value string) error {\n\tif len(value) \u003e 4096 {\n\t\treturn errors.New(\"text is too long\")\n\t}\n\n\treturn nil\n}\n\ntype UserNameType struct {\n}\n\nfunc (UserNameType) validate(value string) error {\n\tif len(value) \u003e 255 {\n\t\treturn errors.New(\"name is too long\")\n\t}\n\n\t// for _, r := range value {\n\t// \tif r != '#' \u0026\u0026 r != '-' \u0026\u0026 r != '_' \u0026\u0026 (r \u003c 'A' || r \u003e 'Z') \u0026\u0026 (r \u003c 'a' || r \u003e 'z') \u0026\u0026 (r \u003c '0' || r \u003e '9') {\n\t// \t\treturn errors.New(\"invalid name\")\n\t// \t}\n\t// }\n\n\treturn nil\n}\n"},{"Name":"render.gno","Body":"package domains\n\nimport \"strconv\"\n\nfunc Render(path string) string {\n\tout := \"# GNO Domains\"\n\tout += \"\\nTLD count: \" + strconv.Itoa(tlds.Size())\n\n\treturn out\n}\n"},{"Name":"store.gno","Body":"package domains\n\nimport (\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\ttlds = *avl.NewMutTree()\n)\n"},{"Name":"types.gno","Body":"package domains\n\nimport (\n\t\"gno.land/p/demo/grc/grc721\"\n\t\"gno.land/r/disperze/nft\"\n\t\"std\"\n)\n\ntype DomainResponse struct {\n\tName  string\n\tTld   string\n\tTID   grc721.TokenID\n\tOwner std.Address\n}\n\ntype TLDResponse struct {\n\tTld    string\n\tCID    nft.CollectionID\n\tIssuer std.Address\n\tTotal  int\n}\n"},{"Name":"utils.gno","Body":"package domains\n\nimport (\n\t\"std\"\n)\n\nfunc getCaller() std.Address {\n\treturn std.GetCallerAt(3)\n}\n\nfunc checkNoError(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc isValidAddr(addr std.Address) bool {\n\tif addr == \"\" {\n\t\treturn false\n\t}\n\n\tprefix, bytes, ok := std.DecodeBech32(addr)\n\tif prefix != \"g\" || len(bytes) != 20 || !ok {\n\t\treturn false\n\t}\n\n\treturn true\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al7LV/X++mUIljzenR1OaxKfue7hfo6UsvOhGCdDtiid"},"signature":"q49tbVgJLLnWwN8zpeFQTtJ5cIqU3Ni7pP9uGWiOzVQzMXG6XI95G3xVIGRLt+XPrlj4UCw4/E89kpJBVrRj7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","package":{"Name":"register","Path":"gno.land/r/disperze/register","Files":[{"Name":"contract.gno","Body":"package register\n\nimport (\n\t\"strings\"\n\t\"unicode/utf8\"\n\n\t\"gno.land/p/demo/grc/grc721\"\n\t\"gno.land/r/disperze/domains\"\n\t\"gno.land/r/disperze/nft\"\n\t\"std\"\n)\n\nfunc Register(domain string, to std.Address) grc721.TokenID {\n\tstd.AssertOriginCall()\n\tsender := std.GetOrigCaller()\n\tparts := strings.Split(domain, \".\")\n\tif len(parts) != 2 {\n\t\tpanic(\"invalid domain\")\n\t}\n\t_tld := tld\n\tif parts[1] != _tld {\n\t\tpanic(\"invalid domain\")\n\t}\n\n\tname := strings.ToLower(parts[0])\n\tif !canRegister(sender, name) {\n\t\tpanic(\"cannot register\")\n\t}\n\n\tdomainN := name + \".\" + _tld\n\ttid := nextNftID(domain)\n\tt := domains.GetTLD(_tld)\n\tnft.Mint(t.CID, tid, to, \"\")\n\tdomains.RegisterDomain(tid, domainN)\n\n\treturn tid\n}\n\n// gno:admin\nfunc UpdatePrice(price uint64, len int) {\n\tstd.AssertOriginCall()\n\tsender := std.GetOrigCaller()\n\tif sender != admin {\n\t\tpanic(\"unauthorized\")\n\t}\n\n\tupdated := false\n\tfor i, p := range prices {\n\t\tif len == p.length {\n\t\t\tprices[i].amount = price\n\t\t\tupdated = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif !updated {\n\t\tprices = append(prices, \u0026Price{len, price})\n\t}\n}\n\n// gno:admin\nfunc Withdraw(to std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetOrigCaller()\n\tif caller != admin {\n\t\tpanic(\"unauthorized\")\n\t}\n\n\tpkgAddr := std.GetOrigPkgAddr()\n\tbank := std.GetBanker(std.BankerTypeRealmSend)\n\tbalance := bank.GetCoins(pkgAddr)\n\tbank.SendCoins(pkgAddr, to, balance)\n}\n\n// gno:admin\nfunc Initialize(addr std.Address, _denom, _tld string) {\n\tif initiated {\n\t\tpanic(\"already initiated\")\n\t}\n\n\tif addr != \"\" {\n\t\tadmin = addr\n\t}\n\n\tif _denom != \"\" {\n\t\tdenom = _denom\n\t}\n\n\tif _tld != \"\" {\n\t\ttld = _tld\n\t}\n\n\tinitiated = true\n}\n\n// gno:query\nfunc GetPrice(domain string) uint64 {\n\tparts := strings.Split(domain, \".\")\n\tif len(parts) != 2 {\n\t\tpanic(\"invalid domain\")\n\t}\n\n\tif parts[1] != tld {\n\t\tpanic(\"invalid domain\")\n\t}\n\tname := parts[0]\n\treturn getPrice(name)\n}\n\nfunc canRegister(addr std.Address, name string) bool {\n\tif addr == admin {\n\t\treturn true\n\t}\n\tprice := getPrice(name)\n\tamount := std.GetOrigSend().AmountOf(denom)\n\n\treturn amount \u003e= int64(price)\n}\n\nfunc getPrice(name string) uint64 {\n\tlen := utf8.RuneCountInString(name)\n\tfor _, price := range prices {\n\t\tif len \u003c= price.length {\n\t\t\treturn price.amount\n\t\t}\n\t}\n\n\tpanic(\"invalid length\")\n}\n"},{"Name":"params.gno","Body":"package register\n\nimport (\n\t\"std\"\n)\n\nvar (\n\tinitiated = false\n\n\tnftPrefix = \"GND-\"\n\tadmin     = std.Address(\"\")\n\ttld       = \"gno\"\n\tdenom     = \"ugnot\"\n\tprices    = []*Price{\n\t\t{1, 50000000},\n\t\t{3, 30000000},\n\t\t{256, 10000000},\n\t}\n)\n\ntype Price struct {\n\tlength int\n\tamount uint64\n}\n"},{"Name":"store.gno","Body":"package register\n\nimport (\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc721\"\n)\n\nvar (\n\tctr     = 0\n\tdelimit = \"|\"\n)\n\nfunc nextNftID(options ...string) grc721.TokenID {\n\tctr++\n\tid := nftPrefix + strconv.Itoa(ctr)\n\tif len(options) \u003e 0 {\n\t\tid += delimit + strings.Join(options, delimit)\n\t}\n\treturn grc721.TokenID(id)\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al7LV/X++mUIljzenR1OaxKfue7hfo6UsvOhGCdDtiid"},"signature":"jrhALs1JllmD98pPmm3FVL8QOJ1d6YdBW7RFv+Jjy6wRG/GL/2UsLn/DVyZ10cXU17G/Eyp9sfKWZQZz83INnw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","send":"","pkg_path":"gno.land/r/disperze/nft","func":"CreateCollection","args":["GNO Domains","GND","","g15sxw45zntn8teq5ma7c6cg63m3e2d58r6lunjg"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al7LV/X++mUIljzenR1OaxKfue7hfo6UsvOhGCdDtiid"},"signature":"D/evnYG25j4IsZ2k/urAJg3CaeOXJjEX3ipkec0n8oE4w/Rj9AwCQ1PKylNI9lPepAC7NUGDxI0hIWu9WBN1sw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","send":"","pkg_path":"gno.land/r/disperze/domains","func":"Initialize","args":["g1k8p7x84gjcy0recfkzvfgljxyyxdlgu02y6w50"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al7LV/X++mUIljzenR1OaxKfue7hfo6UsvOhGCdDtiid"},"signature":"gaId6+hprOUzJtiMOsnJkKjzexjohCSis2TRtGvYKXt1DJHeQKyDKkENlhqGhU4707Z0zJnOZv+Jfp7d2NT7Eg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k8p7x84gjcy0recfkzvfgljxyyxdlgu02y6w50","send":"","pkg_path":"gno.land/r/disperze/domains","func":"RegisterTLD","args":["gno","1","g15sxw45zntn8teq5ma7c6cg63m3e2d58r6lunjg"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6sURdF72+imW+kYkFKR0lhx1XEPwHnXhsbvPzBpctfC"},"signature":"m4CPDJKt3cB5v16pl4MCBvAyvjBq1X/d/UtryOKOlphXYktILnt3S+zgYZZ9wpKImg4eExqKwiU5rVuYTYVtjw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","send":"","pkg_path":"gno.land/r/disperze/register","func":"Initialize","args":["g1k8p7x84gjcy0recfkzvfgljxyyxdlgu02y6w50","ugnot","gno"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al7LV/X++mUIljzenR1OaxKfue7hfo6UsvOhGCdDtiid"},"signature":"mlD4AWQyMMPiVil+9VAzHqLR/xVh20ooVvzWZQaSF9V+H/NS5YphE2HPwdjC+Dc3Ic/ibvhbkUx7qCs2uXQ5og=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","send":"34001000ugnot","pkg_path":"gno.land/r/disperze/register","func":"Register","args":["⚛️.gno","g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al7LV/X++mUIljzenR1OaxKfue7hfo6UsvOhGCdDtiid"},"signature":"vSqHIURb72ZwNO+RjfFF5GE1W1nu+h+XKQYm/XwMxPkMWLv+LJPrmOY58lWwxHc9y3WTYMTY7y942hY0Z/YsOA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","send":"54001000ugnot","pkg_path":"gno.land/r/disperze/register","func":"Register","args":["刀.gno","g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al7LV/X++mUIljzenR1OaxKfue7hfo6UsvOhGCdDtiid"},"signature":"l8jTYx0C8iZGiRuFwG68KkQflcShb946VOirI+gsII9EjoDZKXRmE9gFdDPW8rUlIxypPBucOeG0nFJIEFXm0w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","send":"14001000ugnot","pkg_path":"gno.land/r/disperze/register","func":"Register","args":["meta.gno","g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al7LV/X++mUIljzenR1OaxKfue7hfo6UsvOhGCdDtiid"},"signature":"ox7YDMhG0HhvGj2ii+IZuUlRBWfrx8QjinXy4Xwaqj93N3BE6v9YQd2v6tQsL1e90ESorDNI1sqiD+VdI4s2dw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","send":"34001000ugnot","pkg_path":"gno.land/r/disperze/register","func":"Register","args":["сэм.gno","g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al7LV/X++mUIljzenR1OaxKfue7hfo6UsvOhGCdDtiid"},"signature":"az6TWHyjFXiCOoKVw2iPCdyydz4ryb7PjZ8AQO41B3VSmfzAsTr6QfFb49Bu6wZsRwXNDOyfKL6k2ojpWAM08A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","send":"54001000ugnot","pkg_path":"gno.land/r/disperze/register","func":"Register","args":["💎.gno","g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al7LV/X++mUIljzenR1OaxKfue7hfo6UsvOhGCdDtiid"},"signature":"/GjXgQYldA6n0T/BVulN1f5RLP5Bl6v27jJ+YT4XH2AarUz11yNNCAe/wUcHIFPf1Lp2+i1Jb/vTh7AypIQV+Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","send":"54001000ugnot","pkg_path":"gno.land/r/disperze/register","func":"Register","args":["🚀.gno","g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al7LV/X++mUIljzenR1OaxKfue7hfo6UsvOhGCdDtiid"},"signature":"/uUG+h/ECvnD46zkQVLuIcZwzUdy6CBxGUuIxFo5ZoRi/wqjBYr5tF1mwI1FJq2aqgOcidfC7GEbXuPq7PmITA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","send":"54001000ugnot","pkg_path":"gno.land/r/disperze/register","func":"Register","args":["샘.gno","g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al7LV/X++mUIljzenR1OaxKfue7hfo6UsvOhGCdDtiid"},"signature":"mxpgLY+M8VQw6U3pcmGPjy0PK8DvOZUdAwnGfw6YdO1sd0wxOQ2d2eWE/c6/FThjjWrHh+Yrd0JiinU0R0oMZg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","send":"34001000ugnot","pkg_path":"gno.land/r/disperze/register","func":"Register","args":["sam.gno","g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al7LV/X++mUIljzenR1OaxKfue7hfo6UsvOhGCdDtiid"},"signature":"voskvM2hxab4KDrSYIAnIwEpFHwGT8U0o9om/NTCAmsxZEUQWnJMeExpFPx730If/xE81OFshWLIJhg0z5pAqw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","send":"54001000ugnot","pkg_path":"gno.land/r/disperze/register","func":"Register","args":["🦄.gno","g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al7LV/X++mUIljzenR1OaxKfue7hfo6UsvOhGCdDtiid"},"signature":"h4hINS5d79xqxDCUxutT4BJr1Yv5z3Rm3aJ2EUptVjY2Lqb6AC/y9yPYWAvVJPUW80F8+rG5PR8b9h9CiMvWrA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1kxa74mz8hul5tge3rvyep6epzhkf99x29zac7g","to_address":"g1fzjcyrhv7rtrpwhsd0mhl9n7ahxm0v34p9w5kn","amount":"1100000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/rLJAbJ6FDKQm3GA5RLimerzN2dJSqFzOpUECkD7J3O"},"signature":"zkBJeSutdTxlI71I//ltN0qhaMV0d8ixgx/HaqfGUzwqKt1mmX6ANcvYV+nLwebGRfavLeaJuy9hPyZf+2S2RQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fzjcyrhv7rtrpwhsd0mhl9n7ahxm0v34p9w5kn","to_address":"g1kxa74mz8hul5tge3rvyep6epzhkf99x29zac7g","amount":"500000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7BGCHnC+0EaBkHciQ6D+fFVnlumBrn4QABY4FhxNlab"},"signature":"qVW5q3Nmv//VVWLHrCnyKtdvEfOqsApFI1gWPAF/GQlAOyqYIsuXTtsRpd3Ze+snEFTRNJpFDFYs6evTAsZrfQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16ff9f5tzxezge79fx74hxm0lpagl2us8g5nz0e","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"VlI9Vuf1O8NwovtxUXP8gcOn7BDUX+TDpsZVX8jgyFQCcDBEM4UQWgR0UIlplZ88NO2NilUwxU3ot500W/wV5Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1c4dtkmn6t6dnrd9gjmkt8arq2csnh6j99qnuat","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"H16W01eTfrrFxUsc+zVJ0ju68QMKGrF8Yuh0rA683wJQqDQnByZaqksisdtmbCFJqjReZG9QupEfosL5EzxosQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"7o5ZttAoREZyJFCb99Xx8BYR8/dNJFiy9Cah8guL5xAFpQKNUXxov1R513X03t4CUk/sXZqiTiWbfc9ynP7oaw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"2000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"5qZn4EAIPuW/bz62AIKaObPdS6l2pYcls8gFhxq908VYHKbVlY4VB1AX0MWuXsa9NMPP6Y87L0C67TGtCoEGeg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"6845776ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"K4E+COqAecWVYKVXfDc7rYrsfKoQELzgqOLHNnqtVSsM7xcG+VPf/lh32++bduy2o/SMrxq/uD+i/xNQH4B5gg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","572087"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"duiAtpsg6qDkPw1M+aArtYc4HKRvLfEg2nNNRARCF+Qv26TC2bC5qPjcQUhf0mGS8Q02//be0JgEtu47Wa33Gg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"ui_dao_112","Path":"gno.land/r/demo/ui_dao_112","Files":[{"Name":"ui_dao_112.gno","Body":"package%20ui_dao_50%0A%0Aimport%20(%0A%09%22encoding%2Fbase64%22%0A%09%22std%22%0A%09%22strings%22%0A%09%22time%22%0A%0A%09dao_core%20%22gno.land%2Fp%2Fdemo%2Fdaodao%2Fcore%22%0A%09dao_interfaces%20%22gno.land%2Fp%2Fdemo%2Fdaodao%2Finterfaces%22%0A%09%22gno.land%2Fp%2Fdemo%2Fdaodao%2Fproposal_single%22%0A%09%22gno.land%2Fp%2Fdemo%2Fdaodao%2Fvoting_group%22%0A%09%22gno.land%2Fr%2Fdemo%2Fgroups%22%0A%09modboards%20%22gno.land%2Fr%2Fdemo%2Fmodboards%22%0A)%0A%0Avar%20(%0A%09daoCore%20%20%20%20%20%20%20dao_core.IDAOCore%0A%09registry%20%20%20%20%20%20%3D%20dao_interfaces.NewMessagesRegistry()%0A%09mainBoardName%20%3D%20%22ui_dao_50%22%0A%09groupID%20%20%20%20%20%20%20groups.GroupID%0A)%0A%0Afunc%20init()%20%7B%0A%09groupID%20%3D%20groups.CreateGroup(mainBoardName)%0A%09groups.AddMember(groupID%2C%20%22g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv%22%2C%201%2C%20%22%22)%0A%09registry.Register(groups.NewAddMemberHandler())%0A%09registry.Register(groups.NewDeleteMemberHandler())%0A%0A%09daoCore%20%3D%20dao_core.NewDAOCore(dao_voting_group.NewGRC4Voting(groupID)%2C%20nil)%0A%0A%09tt%20%3A%3D%20dao_interfaces.Percent(1500)%20%2F%2F%2015%25%0A%09tq%20%3A%3D%20dao_interfaces.Percent(5000)%20%2F%2F%2050%25%0A%09proposalMod%20%3A%3D%20dao_proposal_single.NewDAOProposalSingle(daoCore%2C%20%26dao_proposal_single.DAOProposalSingleOpts%7B%0A%09%09MaxVotingPeriod%3A%20time.Second%20*%2086400%2C%0A%09%09Threshold%3A%20dao_interfaces.Threshold%7BThresholdQuorum%3A%20%26dao_interfaces.ThresholdQuorum%7B%0A%09%09%09Threshold%3A%20dao_interfaces.PercentageThreshold%7BPercent%3A%20%26tt%7D%2C%0A%09%09%09Quorum%3A%20%20%20%20dao_interfaces.PercentageThreshold%7BPercent%3A%20%26tq%7D%2C%0A%09%09%7D%7D%2C%0A%09%09Registry%3A%20registry%2C%0A%09%7D)%0A%09%2F%2F%20TODO%3A%20add%20a%20router%20to%20support%20multiple%20proposal%20modules%0A%09registry.Register(dao_proposal_single.NewUpdateSettingsHandler(proposalMod))%0A%09daoCore.AddProposalModule(proposalMod)%0A%0A%09registry.Register(modboards.NewCreateBoardHandler())%0A%09registry.Register(modboards.NewDeletePostHandler())%0A%09modboards.CreateBoard(mainBoardName)%0A%7D%0A%0Afunc%20Render(path%20string)%20string%20%7B%0A%09return%20%22%5B%5Bboard%5D(%2Fr%2Fdemo%2Fmodboards%3A%22%20%2B%20mainBoardName%20%2B%20%22)%5D%0A%0A%22%20%2B%20daoCore.Render(path)%0A%7D%0A%0Afunc%20GetCore()%20dao_core.IDAOCore%20%7B%0A%09return%20daoCore%0A%7D%0A%0Afunc%20Vote(moduleIndex%20int%2C%20proposalID%20int%2C%20vote%20dao_interfaces.Vote%2C%20rationale%20string)%20%7B%0A%09dao_core.GetProposalModule(daoCore%2C%20moduleIndex).Vote(proposalID%2C%20vote%2C%20rationale)%0A%7D%0A%0Afunc%20Execute(moduleIndex%20int%2C%20proposalID%20int)%20%7B%0A%09dao_core.GetProposalModule(daoCore%2C%20moduleIndex).Execute(proposalID)%0A%7D%0A%0Afunc%20Propose(moduleIndex%20int%2C%20title%20string%2C%20description%20string%2C%20b64Messages%20string)%20%7B%0A%09mod%20%3A%3D%20dao_core.GetProposalModule(daoCore%2C%20moduleIndex)%0A%09var%20messages%20%5B%5Ddao_interfaces.ExecutableMessage%0A%09if%20len(b64Messages)%20!%3D%200%20%7B%0A%09%09rawMessages%20%3A%3D%20strings.Split(b64Messages%2C%20%22%2C%22)%0A%09%09for%20_%2C%20rawMessage%20%3A%3D%20range%20rawMessages%20%7B%0A%09%09%09message%20%3A%3D%20registry.FromBase64String(rawMessage)%0A%09%09%09messages%20%3D%20append(messages%2C%20message)%0A%09%09%7D%0A%09%7D%0A%09mod.Propose(title%2C%20description%2C%20messages)%0A%7D%0A%0Afunc%20GetBinaryMembers()%20string%20%7B%0A%09members%20%3A%3D%20groups.GetMembers(groupID)%0A%09ss%20%3A%3D%20%5B%5Dstring%7B%7D%0A%09for%20_%2C%20member%20%3A%3D%20range%20members%20%7B%0A%09%09ss%20%3D%20append(ss%2C%20base64.RawURLEncoding.EncodeToString(member.Bytes()))%0A%09%7D%0A%09return%20strings.Join(ss%2C%20%22%2C%22)%0A%7D"}]},"deposit":""}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"oTtsEsGELNdNCWuqzJiptZkhE4zvac9pNJafiwsYblN/FnBVHLXDY5dETUTDarA4qZMjjuMCuRsdDUI45IEavA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"ui_dao_113","Path":"gno.land/r/demo/ui_dao_112","Files":[{"Name":"ui_dao_113.gno","Body":"package ui_dao_113"}]},"deposit":""}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"amg3YgcQTiuNSi5dQostWa5lJjjvPwU0+kyLirSE1GEOApn/fLZ04ZeeS0Jk4BDaK6xmQ9svEy4G/txBzzop8g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"ui_dao_113","Path":"gno.land/r/demo/ui_dao_112","Files":[{"Name":"ui_dao_113.gno","Body":"package ui_dao_50\n\nimport (\n\t\"encoding/base64\"\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\tdao_core \"gno.land/p/demo/daodao/core\"\n\tdao_interfaces \"gno.land/p/demo/daodao/interfaces\"\n\t\"gno.land/p/demo/daodao/proposal_single\"\n\t\"gno.land/p/demo/daodao/voting_group\"\n\t\"gno.land/r/demo/groups\"\n\tmodboards \"gno.land/r/demo/modboards\"\n)\n\nvar (\n\tdaoCore       dao_core.IDAOCore\n\tregistry      = dao_interfaces.NewMessagesRegistry()\n\tmainBoardName = \"ui_dao_50\"\n\tgroupID       groups.GroupID\n)\n\n"}]},"deposit":""}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"6tH1x6vuq/v3Rp2Q4lpiqkmXuiMtWYZCxA6BcEvdQJwSfQhSk/YL/feB6UG03WWF7nAlzW7UaEa6f5rw6mdesQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"ui_dao_113","Path":"gno.land/r/demo/ui_dao_112","Files":[{"Name":"ui_dao_113.gno","Body":"package ui_dao_50\n\nimport (\n\t\"encoding/base64\"\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\tdao_core \"gno.land/p/demo/daodao/core\"\n\tdao_interfaces \"gno.land/p/demo/daodao/interfaces\"\n\t\"gno.land/p/demo/daodao/proposal_single\"\n\t\"gno.land/p/demo/daodao/voting_group\"\n\t\"gno.land/r/demo/groups\"\n\tmodboards \"gno.land/r/demo/modboards\"\n)\n\nvar (\n\tdaoCore       dao_core.IDAOCore\n\tregistry      = dao_interfaces.NewMessagesRegistry()\n\tmainBoardName = \"ui_dao_50\"\n\tgroupID       groups.GroupID\n)\n\nfunc init() {\n\tgroupID = groups.CreateGroup(mainBoardName)\n\tgroups.AddMember(groupID, \"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv\", 1, \"\")\n\tregistry.Register(groups.NewAddMemberHandler())\n\tregistry.Register(groups.NewDeleteMemberHandler())\n\n\tdaoCore = dao_core.NewDAOCore(dao_voting_group.NewGRC4Voting(groupID), nil)\n\n\ttt := dao_interfaces.Percent(1500) // 15%\n\ttq := dao_interfaces.Percent(5000) // 50%\n\tproposalMod := dao_proposal_single.NewDAOProposalSingle(daoCore, dao_proposal_single.DAOProposalSingleOpts{\n\t\tMaxVotingPeriod: time.Second * 86400,\n\t\tThreshold: dao_interfaces.Threshold{ThresholdQuorum: dao_interfaces.ThresholdQuorum{\n\t\t\tThreshold: dao_interfaces.PercentageThreshold{Percent: tt},\n\t\t\tQuorum:    dao_interfaces.PercentageThreshold{Percent: tq},\n\t\t}},\n\t\tRegistry: registry,\n\t})\n\t// TODO: add a router to support multiple proposal modules\n\tregistry.Register(dao_proposal_single.NewUpdateSettingsHandler(proposalMod))\n\tdaoCore.AddProposalModule(proposalMod)\n\n\tregistry.Register(modboards.NewCreateBoardHandler())\n\tregistry.Register(modboards.NewDeletePostHandler())\n\tmodboards.CreateBoard(mainBoardName)\n}\n\nfunc Render(path string) string {\n\treturn \"[[board](/r/demo/modboards:\" + mainBoardName + \")]\n\n\" + daoCore.Render(path)\n}\n\nfunc GetCore() dao_core.IDAOCore {\n\treturn daoCore\n}\n\nfunc Vote(moduleIndex int, proposalID int, vote dao_interfaces.Vote, rationale string) {\n\tdao_core.GetProposalModule(daoCore, moduleIndex).Vote(proposalID, vote, rationale)\n}\n\nfunc Execute(moduleIndex int, proposalID int) {\n\tdao_core.GetProposalModule(daoCore, moduleIndex).Execute(proposalID)\n}\n\nfunc Propose(moduleIndex int, title string, description string, b64Messages string) {\n\tmod := dao_core.GetProposalModule(daoCore, moduleIndex)\n\tvar messages []dao_interfaces.ExecutableMessage\n\tif len(b64Messages) != 0 {\n\t\trawMessages := strings.Split(b64Messages, \",\")\n\t\tfor _, rawMessage := range rawMessages {\n\t\t\tmessage := registry.FromBase64String(rawMessage)\n\t\t\tmessages = append(messages, message)\n\t\t}\n\t}\n\tmod.Propose(title, description, messages)\n}\n\nfunc GetBinaryMembers() string {\n\tmembers := groups.GetMembers(groupID)\n\tss := []string{}\n\tfor _, member := range members {\n\t\tss = append(ss, base64.RawURLEncoding.EncodeToString(member.Bytes()))\n\t}\n\treturn strings.Join(ss, \",\")\n}"}]},"deposit":""}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"WVWkVi4ncVHXTTVwIUeQA5McSWLHIiwm6PzqvjHYxLFqAetotkRCp6pwOXxx8tBqUuwd3Ifeg+M52Bxc7BJ6Ow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"1gggg","Path":"gno.land/r/demo/1gggg","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"pc/ePtI202uVFO1MRnbyLBdQQ8UfvYZQdWGVeHDqnQpzteIYbc6oVbqyTPaCcxyiXKHOpjuxlxyfCG9rcnmwuw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"gggg12","Path":"gno.land/r/demo/gggg12","Files":[{"Name":"gggg12.gno","Body":"package gggg12\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"nncq7Zt+vvfMVCUupDnUrstczLh4HBHXJsD90fmGokhbWoWOM8gHKnKQLiHolgGt1j2TKzFemTYhpDg0SKgcqQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"2500000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"kBB9o+dpBZJo28D/Om/3fB2+iAgIQfHXhyLkbPm+/ohB708ZywmoPyOok+TpPV3ZLaY7H2GacPKQSmIFHRUrdA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","15"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"13Qk+Y/GGobuYU8qMQeJ/dqJpju6ZI4qQkwdVl/jaIQELjCMNN/fI4rAYaUUwNRrZRkpXFPz4nF8v/wyloMqeA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"ui_dao_100","Path":"gno.land/r/demo/ui_dao_100","Files":[{"Name":"ui_dao_100.gno","Body":"package ui_dao_100\n\nimport (\n\t\"encoding/base64\"\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\tdao_core \"gno.land/p/demo/daodao/core\"\n\tdao_interfaces \"gno.land/p/demo/daodao/interfaces\"\n\t\"gno.land/p/demo/daodao/proposal_single\"\n\t\"gno.land/p/demo/daodao/voting_group\"\n\t\"gno.land/r/demo/groups\"\n\tmodboards \"gno.land/r/demo/modboards\"\n)\n\nvar (\n\tdaoCore       dao_core.IDAOCore\n\tregistry      = dao_interfaces.NewMessagesRegistry()\n\tmainBoardName = \"ui_dao_50\"\n\tgroupID       groups.GroupID\n)\n\nfunc init() {\n\tgroupID = groups.CreateGroup(mainBoardName)\n\tgroups.AddMember(groupID, \"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv\", 1, \"\")\n\tregistry.Register(groups.NewAddMemberHandler())\n\tregistry.Register(groups.NewDeleteMemberHandler())\n\n\tdaoCore = dao_core.NewDAOCore(dao_voting_group.NewGRC4Voting(groupID), nil)\n\n\ttt := dao_interfaces.Percent(1500) // 15%\n\ttq := dao_interfaces.Percent(5000) // 50%\n\tproposalMod := dao_proposal_single.NewDAOProposalSingle(daoCore, dao_proposal_single.DAOProposalSingleOpts{\n\t\tMaxVotingPeriod: time.Second * 86400,\n\t\tThreshold: dao_interfaces.Threshold{ThresholdQuorum: dao_interfaces.ThresholdQuorum{\n\t\t\tThreshold: dao_interfaces.PercentageThreshold{Percent: tt},\n\t\t\tQuorum:    dao_interfaces.PercentageThreshold{Percent: tq},\n\t\t}},\n\t\tRegistry: registry,\n\t})\n\t// TODO: add a router to support multiple proposal modules\n\tregistry.Register(dao_proposal_single.NewUpdateSettingsHandler(proposalMod))\n\tdaoCore.AddProposalModule(proposalMod)\n\n\tregistry.Register(modboards.NewCreateBoardHandler())\n\tregistry.Register(modboards.NewDeletePostHandler())\n\tmodboards.CreateBoard(mainBoardName)\n}\n\nfunc Render(path string) string {\n\treturn \"[[board](/r/demo/modboards:\" + mainBoardName + \")]\n\n\" + daoCore.Render(path)\n}\n\nfunc GetCore() dao_core.IDAOCore {\n\treturn daoCore\n}\n\nfunc Vote(moduleIndex int, proposalID int, vote dao_interfaces.Vote, rationale string) {\n\tdao_core.GetProposalModule(daoCore, moduleIndex).Vote(proposalID, vote, rationale)\n}\n\nfunc Execute(moduleIndex int, proposalID int) {\n\tdao_core.GetProposalModule(daoCore, moduleIndex).Execute(proposalID)\n}\n\nfunc Propose(moduleIndex int, title string, description string, b64Messages string) {\n\tmod := dao_core.GetProposalModule(daoCore, moduleIndex)\n\tvar messages []dao_interfaces.ExecutableMessage\n\tif len(b64Messages) != 0 {\n\t\trawMessages := strings.Split(b64Messages, \",\")\n\t\tfor _, rawMessage := range rawMessages {\n\t\t\tmessage := registry.FromBase64String(rawMessage)\n\t\t\tmessages = append(messages, message)\n\t\t}\n\t}\n\tmod.Propose(title, description, messages)\n}\n\nfunc GetBinaryMembers() string {\n\tmembers := groups.GetMembers(groupID)\n\tss := []string{}\n\tfor _, member := range members {\n\t\tss = append(ss, base64.RawURLEncoding.EncodeToString(member.Bytes()))\n\t}\n\treturn strings.Join(ss, \",\")\n}"}]},"deposit":""}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"9+u/g08qZ8c7DAHVxonTUuxQgJHWG4JOsuzZrs5Xx2EjBEIC7f3x+LFUl2zZ+CwOEgR9jQhbjcOE9BgpJIWXSQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"uOBMER47cvgyvLeP1cWiUDmxIsImHiAF7UNGsHi64yJJ9dEB57Bfv9h8aFMQIoZ6Ml3kHWhqKThmI+YHAidDdw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"+XZZtNpiLu+ppfjcpIG7dQLbNt8Eewb5kpVRHu472jwrxyHYUyZsBNXTm7hm3h8XKPLeuf6OXn8xHZysgUL/ZA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1l47x640c4petu4chfjge3qg2uplakx78hkxqxc","1234"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"QhNbwoyrcQpqa+i3v2hnbLDroCR2lRkVXvlvDgvPxgV0ZHmbvfzPG1/ZdjYCRUAOK7Kxsrh4cy1eNyRKET4tiQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1234"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"ldaRL7A6H/kcMCw1c+2+uNe4mq46y99mcJiUz+sgC/VWbByuITpCBSfjCWUzXpmZqSRwNEqUJJc1khgXBfftkg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1l47x640c4petu4chfjge3qg2uplakx78hkxqxd","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"12345600ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3+XBwhRNxB98UM5CE/sbFKQFUNrwd3wclkoRFngQHN4"},"signature":"F1E4Z8+GR5AWgdW1jdwSDrojqBGOO/xL4FJfMjRRC5hOwwQ6/Flxpb2EWeQT1BSTAkonKVkA4zQ94IFp5FEExA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"100ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"mTbpO0RR4drB6Dtt+7M7McGUjZhjlPEYDwl24ZuzfUAuvT4ze/5o/FzOk0P3/zUhx04IQNzHD2fHRoZjs/vVwQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1234"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"xCREDlUWIIiE5TPh+rAcvldEz2B/h4bNIRXWipTAKt59faDQ8tafAY6R38shNnAlt3Wh3oCMFkh44Wd2K7/XXQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g19lg9unc822k0ng9x3a2a4pgs9tm5tvne4cy4ju","7542"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"qN+mzrie0Y+tNQebaf60ZRNvv0SgB0Hr5fw965k0aAk8QOIqwPaP+IGo8MPxM5/mM13PANi+Lspt1kSJcNzxaQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"84000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"PiLTvT5973q8YJqQH0abr+23g6yTgiwncvUN10nMLGtMwiWfL+hyYzzEmGjzhjP1dwuDg51Oql7YE28cpTUXTg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArADVPfUBrZVmlqmZWPWucRTe9gkJ9wJFyTszJoU5Ebi"},"signature":"oVnXMlQHKINxpXV1uXWAXmyGHnSJy4tkKPWFlOWfAT8qFDIjjKZ2luzU339wYwqmJCxUxrNmj5W334hcwUpDnA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"ggggg2","Path":"gno.land/r/demo/ggggg2","Files":[{"Name":"ggggg2.gno","Body":"package ggggg2\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"bzbJCgt0iTRZ5qZfs/ltau+lOxKhAcXow1CUuOGsitRxwMC5beCBxTFg85cPUzspDSGhOIiLEfe1Z9kav4yUDg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","15"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"F0JD5/yR546ZN2TcEeI5p5V9yQr9daor/Ylt8E7h52M+9xr5urkBTAixN6o45ukTOsI0H3b0SFk4gimIx1Ebsw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/dao_realm","func":"Propose","args":["0","Mint 50 Tori to g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","","AAhNaW50VG9yaQAoZzEwOGNzem1jdnM0cjNrNjdrN2g1enVobTRlbDNxaGxyeHpoc2h0dgAAAAAC-vCA"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"tYuPBwQ5X4Dsj72iwp3N6U11ppp14fV9YklKw4iA0O8DFH9RaWUY6qRWBPRf1BAR4KqaU/bEzqeCoee7P5L9ug=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/dao_realm","func":"Vote","args":["0","0","0","Me like it"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"pigLHKsUJt+oeWvxSiiU5BRi4sxAtA5z5qoS12m+ZX96DlMhZm2ZZmVgTd/FhJuzr6L1P8IZ14mg0hT8W7YqAQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/dao_realm","func":"Vote","args":["0","0","0","Me like it"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"61z76DwnsrShniqczj/Jl58qTbhVPdDIhxBCstxW/vcgwGQs0VSpdOzN+RcjQenfx1It9ckJgjR3sGLdH86HJg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/dao_realm","func":"Vote","args":["0","0","2","Me like it"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"dbhlQlanTrQDNQcGJyR5V4RsCzkNhgR6H3+nkCla8DgGidgzqXiWrBBqGfT0EeD2D4S0bu91FlXBLMjJUxWPXQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"100ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"mkDjiIU9DN8o/R6l9mZOsJ3CA80IOjrpzF6MTeDkjGRvt4v2PeIdDIuxgmPd3tjdRS6FU2u1hmt4iczk2Gc/2g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"112ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"0FppV2CQOohnbMGO2/jrGtHyfXNbCfvCRxIXWTu3r/hTQa6BRTYawQBx8lU9McW5b+bGE4DJLI5vuZOi1WyH9g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"sLOVo8+JE+0DlKPN9Sp5adUxkXR8FzhyVjmFqT5Dnkl0qrtFFZepqc/7R427eTyXlZDWfy0wBw1BrO+Dp6Fe9A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qv3dqyw46fut94z9t90jka58saw2e7l99nzqtr","to_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","amount":"1000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3Tw76GV0BAtfeMytcN0YmNQsmhocbe7kMs7sCF8SJVx"},"signature":"YFUSPLNPUVoP9J9RRrYaPTsMdHpxmy13a1ASVqsnsVE3iEHfy28yHX5O/NTL/MgwX+kfPpTJoHWIfzMNjjeRmQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"ui_dao_01","Path":"gno.land/r/demo/hello","Files":[{"Name":"hello.gno","Body":"package hello \n\nfunc main() {\n\t//  \n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"1IeytpvnDai+yEYP+VR6H5AAVrNmhmK5VL01PhAH9V8j+X9IK2fbJeNIhA4JzR1P0cJYo/8F3iIg95oIF9o3ig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello0001","Path":"gno.land/r/demo/hello0001","Files":[{"Name":"hello.gno","Body":"package hello \n\nfunc main() {\n\t//  \n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"TlFyEjFYm9dCL8O/nbLxBdDI/BoA/+3P99FppcfkzFdm8jEhZQYswpENBLKj+qsTmPKNlb4lWYeJX9Tiviwalg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello0001","Path":"gno.land/r/demo/hello0001","Files":[{"Name":"hello0001.gno","Body":"package hello0001 \n\nfunc main() {\n\t//  \n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"Th2JKoyeCgdZKuqf3oIqS0WXqRVbYAB0CRwLXypzhzgwXyniCXJL1tca55R9SG1ypkD2OM1t8Z7Bich4T0yehQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello0002","Path":"gno.land/r/demo/hello0002","Files":[{"Name":"hello0002.gno","Body":"package hello0002\n\nfunc main() {\n    // %26\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"ycNz0pQxQ0tQceRP4bv+ZDKy+rqlI7lx2ZkuVM1YADUlTiNtuUsurvfS8WkQKHA82Ts3VijNuJzPs/nl/m4HQg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello0002","Path":"gno.land/r/demo/hello0002","Files":[{"Name":"hello0002.gno","Body":"package hello0002\n\nfunc main() {\n    // \\u0026\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"b7gW5f7f90LJmi9ddSthaBMWmRkVQncYGGQp0o4PMQ5qRgw/z7QROc8coh6ixFWXoCA3DLsbNkdQB/LYpHVysg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello0003","Path":"gno.land/r/demo/hello0003","Files":[{"Name":"hello0003.gno","Body":"package hello0003\n\nfunc main() {\n    // \\u0026\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"DTqlGj6oI5rfAOS1jbKFbi/YbyI9ppS6HRsSp+ga5Gd8IaAVtWYm5dey34tBsYLe3KlX3BNKovjgPLLqsgfCtQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"special1","Path":"gno.land/p/sc01","Files":[{"Name":"special.gno","Body":"package special1\n\nfunc main() {\n\t// \u0026\n\tprintln(\"STRING\")\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"rxlbcYnUBmLlq2OeSnEOIxPpiHVyz7pShIEMBFomrMdkh3QkJlyQtOEH5YfC2Q3vQCl9ZxbbCXpXCDoYiTcAqg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","package":{"Name":"sc1","Path":"gno.land/r/demo/sc1","Files":[{"Name":"sc1.gno","Body":"package sc1\n\nfunc main() {\n\t// \n\tprintln(\"STRING\")\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"tihr+Q/pkg7jotsgoVPsBmEQ+GSMVSA1ET+1awNPm9cw2BWanTNgeMpyqcz/O+KTb1XbjQn8kTkvmZnTBMqEkQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","package":{"Name":"sc2","Path":"gno.land/r/demo/sc2","Files":[{"Name":"sc2.gno","Body":"package sc2\n\nfunc main() {\n\t// 😀\n\tprintln(\"STRING\")\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"1Q+sZ8IFKaTMr990uBDN73gPBOv07YKg/R+3G1P9/7FbvYbyMIsTOYyVMBuNagvU31omCdtROVeWEDp+ajMDOw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"special1","Path":"gno.land/p/sc02","Files":[{"Name":"special.gno","Body":"package special1\n\nfunc main() {\n\t// \u0026\n\t// 😀\n\tprintln(\"STRING\")\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"izchg4B2Lj6RxLjNdmnJ+nESvBrABBCwaR0TVcNT1et2kw6rRp516ZTWzx4jq3Hc8nOOSYP7rVIuC5QKd4Iryw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"special1","Path":"gno.land/p/sc03","Files":[{"Name":"special.gno","Body":"package special1\n\nfunc main() {\n\t// \u0026\n\t// \\u1f600\n\tprintln(\"STRING\")\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"UIyRK+NGIdjxuCw5WJb3D9q/Mir9dvtqFBSRLNBHfmUuSJZ7/Z4OmQaMbJABjkCC+tyc6AfS/BQCX92+YxVHcQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello0005","Path":"gno.land/r/demo/hello0005","Files":[{"Name":"hello0005.gno","Body":"package hello0005\n\nfunc main() {\n    // ὠ0\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"SL6OITUCs/bmAs/UOrLXSJHk30IrOEHtaEqNoJvJxo5sEq06MYz1LU8BvHzAfudpLP7iBMVKfbBwkFnVy1XtSw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"special1","Path":"gno.land/p/sc01","Files":[{"Name":"special.gno","Body":"package special1\n\nfunc main() {\n\t// \u0026\n\tprintln(\"STRING\")\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"Oh62Fy0rWfU58ucb2Y1CAnKFwmIDf4eDjs/0E61RV09w1/CM8ETm7N6f8BDnngDp36pATdQRMKl2fE6ohSjcCw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"echo","Path":"gno.land/r/echo","Files":[{"Name":"special.gno","Body":"package echo\n\nfunc Echo(s string) string {\n\tprintln(s)\n\treturn s\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"1GqLA/uJtYrEDZNpZlkNu3Q4sHSdFG3B8wXHnjEAZ2JYOAoSUerqkbGe5cfm9QxVqo1RgbUtGfdigZYMB0q8/w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/echo","func":"Echo","args":["123"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"u8pC0fpoixB82Xfek7sQstqmkYAtW+jD6Pmsnq9ZjyFfi+urV7HUzXPBVHYeKjPWy3u+LuUHE1FB4HEzyCgBuQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/echo","func":"Echo","args":["\\\\1"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"8ROhyz9mfXfyl0W0KAZCUeF7APNzh5hmBD4Sk1ER9Vs70XBZzT+4sVbX1QT9r3+RrMiZFg6TuYXFIJTfKCwXXw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/echo","func":"Echo","args":["\\\\1"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"KC9R4RN/QUgRsOfHJVovC7eHzqQWoFUIq8RkF+yzHHdFaCBET8zboknD+4SIPosIm4IgMhk7+gvLN5p/t5oFpA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/echo","func":"Echo","args":["\\0026"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"iTpFBXXYZ62o6CLlmJ6QI5FNZLs+ZWgpz5mZOKQocQ5GNIr3Hf3eMAPoDZJvGmqcff0A3NU6ZVDmFdIn6cWF+w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/echo","func":"Echo","args":["!0026"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"AuH2bW1plctQw2fVAgn/8e746C6qBtEVNF6+7EDryFl/jqDHV8/a5C3apVT5rOyh4P3ssIUDdrfwvPl51T0sKw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/echo","func":"Echo","args":["\"0026"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"aa6rzkx0+BfFY+zc+D+TNF+5wWEVerw7tU4u3NHs/CxXzIvNSyFVctKcVOBblIqKI1238MQ9Mv6ZCcm9lPQM/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/echo","func":"Echo","args":["1"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"Npfux/9kq0fUHg+UMedCyAoL0T0RFuYMOQKZm09FMIV9p0eHVAcUlxqeE8VrCIsV7Ei1sOfIxC+yr5ZI+3Hzmw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/echo","func":"Echo","args":["!@#$%^*()"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"oK48IWt2EZ1iUDmpLS2JgWtIVtNPi38qWk9JeXU7UEhMOSDciTvyZWrVkOvmYnqLdQo5mGEQSgG0Wq5eBcljCg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/echo","func":"Echo","args":["!@#$%^*()%26"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"tUbNCN/EOTm7w4aAiWRkrK7cwyUYvk9LIfx+QI8t8CkkLU8LUTBUIpBtm3iQ7S/VVd9PEULYFGLv8KVC1OfxqA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/echo","func":"Echo","args":["[]"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"5yGztv9/p2ABLVbwwlcxG+08Tv91jAyu+IVrpFTLNtsqHmuwvEVOpchGMBi2ZQ9lQK/EppkdwMsZR7k+9trgWg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello0006","Path":"gno.land/r/demo/hello0006","Files":[{"Name":"hello0006.gno","Body":"package hello0006\n\nfunc main() {\n\t// \\u0026\n\tprintln(\"STRING\")\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"0DpV5l0pwNQRjSCwCOa5wu6PL0+k2qFuDRkVKoK134UX1A469FmwJYpCGxQ2EL3HJ0bqlG4r7CmPwS68t5k1xA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g10aht2myd7zgtx6euu3f76plkf05walezyq9nld","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"x0UFHCNGY7IN+HXpyYI0X3aaKt4RrG4VT8m30fVTACkDOmeywG9JmiBmGj89g+pwIb4HY4xz/Rt6q5c3P2HiyA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello0007","Path":"gno.land/r/demo/hello0007","Files":[{"Name":"hello0007.gno","Body":"package hello0007\n\nfunc main() {\n\t// \\u0026\n\tprintln(\"STRING\")\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"0dkrX4I5tKEQQWt9Dsw91aWYofCMn0IfDEPBfFt2oY9oddfQBm9gi5U+jMMHdKDYDyXJga3pAOf2wOnAScF29Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","package":{"Name":"hello","Path":"gno.land/r/demo/hello","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"yfGlUgxkj9uKwlo1eTNs2OHrpbjSOGYBMrYj95zf+VtChiEZd+0TdG2t+gUd9W5ZnkvL1GV2zi29Z/hKYs2q4w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","package":{"Name":"hello","Path":"gno.land/r/demo/hello","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"ISYZLkdkivarAaSsuzVcA1iaRNPWgbUUDftd5ME4CuoOrWsIkkqIb8QPgYlReputQEdLzvwE3vulantGUzIa2Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","package":{"Name":"hello31","Path":"gno.land/r/demo/hello","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"tLskmsz/Kt2ihSXa0PVG2eOXsieAQD4pdVyME76m3cpwOxqfvI6MpV6BfhAeYblYLbPZuAperL+mhgiFfVOczQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","package":{"Name":"hello","Path":"gno.land/r/demo/hello","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"+KSTBvzMgjVMXW4vCGHJcnV82tZl90f5CS3YArfQS1ls25+XDQdij292mez4NmVzUKqBLd2MrvFjlAsi/flaBA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","package":{"Name":"hello123123","Path":"gno.land/r/demo/hello123123","Files":[{"Name":"hello123123.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"tWyIVdfMcpPmj3OZ0W/62vtbIoCI29Ea2U+AcYrzAYk9diN2Cy5B6N6D0Bw9yS+RDdNTQ7zm50CmRI31lCHI8g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","package":{"Name":"hello_123123","Path":"gno.land/r/demo/hello_123123","Files":[{"Name":"hello_123123.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"8FHoIvvrZ68V4scy+lRPFpfUSu908QQdeaXanJlO14EqJpI7rihI8mBtT3okpc5IfCJNmlukE4e205LLBoD5EQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","package":{"Name":"great_ui_dao","Path":"gno.land/r/demo/great_ui_dao","Files":[{"Name":"great_ui_dao.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"nYoin5g40pLfjrvDQhdet8pBIl7yXaddb2LTnyRSCMtSEwQzsCASj7lgUBolsD5+XXhB35CRzJ1G47kiQ2geHA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","package":{"Name":"Hello19910","Path":"gno.land/r/demo/Hello19910","Files":[{"Name":"Hello19910.gno","Body":"package hello19910\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"3/swswv0ZddfnPV0vY/yB/G/Kej48Bogx3M3m8cvGyhbehOkvUmWEhP3F4MLhWqjOMT4hgJtoToSoOPwxMosbw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/echo","func":"Echo","args":["1"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"n6zOFQd5XbaFDq/UORc22XzR+xND4yHiEuBIQY+HTspu/JVhQ2zMa84wxUBp1SWaOhaElsmEIPWNHMK3DJtE0g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/echo","func":"Echo","args":["3"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"bpyyatkoO4yG/nvzmjuKM2sezU11R7N15N4qMx6YfFRCkLp5b1YNm1lSg5ys2yN1NSP4yHI1A6R58PICs5VaRw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/echo","func":"Echo","args":["5"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"ma3ar7f8P6VpukcbqgGeApv+mvd1j09v9est+NPMO2whH14/MFOgRoxhSRxXJbfjykv1204O6xJ4CceSd2wsXQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1znecfm3eq8zujwfv26cekqvp9dncknwvu0s5y9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"e48FrIYAyc/20wdqyaYqwKKLpEnqxecKI5bH7Zzdc4cD7fEkZaBRY61PCzeVNb/7TD2llci1WyaQRUqW05Lu9Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello0009","Path":"gno.land/r/demo/hello0009","Files":[{"Name":"hello0009.gno","Body":"package hello0009\n\nfunc main() {\n\t// \u0026\n\tprintln(\"STRING\")\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"todrObOGLLgETe/rjAB3qvmB6NJkS9oDtyJCpK4iS8Br+CL3/uaDnzV+4CCTp068eM86eOPrkVFo5unZ3Q9ehw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello0010","Path":"gno.land/r/demo/hello0010","Files":[{"Name":"hello0010.gno","Body":"package hello0010\n\nfunc main() {\n\t// \u0026\u003e_\u003c\n\tprintln(\"STRING\")\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"DBlZOifTPZz6UMujsWevQPsM8WVCiv9yYZBFaqIhemoxBZX7kkDeLq7aRvb3t/dM2GGgXbYlgIonxY/7ebQ7Ag=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/echo","func":"Echo","args":["aaa"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"8XjamyeH+tXNPlhlINf8PZd7CS/8OUZjFQH/B/iwE+QjkopVi7CkrQTVOHwMioaRIPE0c5ebacdIQg7+LBANeg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/echo","func":"Echo","args":["\u0026"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"tl7DSWlvDj/kpiudkFe6lCasLBlhYNuXuplbtF25J/E8JP0uyjtU84mgFHo3AW/ID0uOUnrZT4HCqxG3kw+seQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/echo","func":"Echo","args":["\u003e"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"TW6979flayeQimhxcpxGvzHRLLRExYh25k+pCF859cMzJKLFQDM3Zt/K9cVg6/mDGBQ2+RVtTXyaoJIXEbArFw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/echo","func":"Echo","args":["123"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"Hcy6dauzF3ZFaN667VO3nW9oB9Y3M4pDcbsWy8QZ8iw9qxolUOSNY7SU9jGmi4TBBCZ8hVtFwDHEbE1yf9hfsQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/echo","func":"Echo","args":["\u0026\u003e\u003c"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"hRxe9RtCJMvENbmhiI5BxUHszW66so1Wf2z+fUeCXBNwqyPy5qkup5Krtw/VpVLSohtArX+AYWKlhFb+BPn7fQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/echo","func":"Echo","args":["\u0026\u003e_\u003c"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"gnRxqfC9cWyEjK2E6tW9qwWDvX1TEaKmNcEdFoibxogI2tHclMtltz/WUrYrbXVDNNSKnws9JwCYAFZ6P2BD8w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/echo","func":"Echo","args":["\u003e\u003c"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"xFWdFYYeMBzpr7Pz/FsnkwjodTEsiAPow8PwLeY+ZQtaSs/DMaSlrGnIlUQ64BI4146m5ozaL/9bC5TbP3jfEA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/echo","func":"Echo","args":["\u0026\u0026\u003e\u003e\u003c\u003c"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"k7C6BprqPsS9nHpKx5Y9B7qlcZdzm8/BfWACxYeoFH84BB11tGl1tIavdqFKzSCZ5kgU1UBLovOxMbkZTvIR9A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/echo","func":"Echo","args":["\u0026"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"tXwcbr4NlE4IRyVRGeahzSA9E3OObquQs6u6Uihy7ZJ98tI0H8ZBaELWtiOQRFu2qE9SUoklwByO3dCtIeBWsQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","send":"","pkg_path":"gno.land/r/demo/hellotest123","func":"hellotest123","args":[""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"FDrFrD0RO3WptBQcaJcuFiVmgIoxmPIik9ZmidXgUkQ1LD0NKkBPn5AN85ElOpt8OFg3+LL+oqBgSm0x/MUBIw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","package":{"Name":"hello_12399","Path":"gno.land/r/demo/hello_12399","Files":[{"Name":"hello_12399.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"56EsBUu/SwShdZaVJhE4fqNZt5wI8SXdOyg2S91K1eMfLXd0VgMNPGDgJuDnSiEW3FEsSVxsmJsByzNyuLdBxQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","package":{"Name":"hello_12399","Path":"gno.land/r/demo/hello_12399","Files":[{"Name":"hello_12399.gno","Body":"package hello_12399\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"GduMYwEivTOzWauZBzoHj5gBKHJGjmXj3iC9p9/TK0c8QWlwPm1+u/fkVGHDXOpT/huh+8lXdQZo0LHbu/1naA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","package":{"Name":"hello_12399","Path":"gno.land/r/demo/hello_12399","Files":[{"Name":"hello_12399.gno","Body":"package hello_12399\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"Vel1V0Zf0iaFH/zoxSJHAtCdiwvj3qpefHCo5S9fapReJHoA3mTFG2M8s2OznHI3/KGB8kp5RrJg6mizARNE4Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","package":{"Name":"hello_1234900","Path":"gno.land/r/demo/hello_1234900","Files":[{"Name":"hello_1234900.gno","Body":"package hello_1234900\n\nfunc main() {\n\t // \u0026\n\tprintln(\"STRING\")\n}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"CgklyrbCEi7wg98eNEOJKXleXnvn0pYYRuBDDq9vV1cXXChuH78XZ5nRxRPZmR/3dOERC4dVHh3NbI1E61imcg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","package":{"Name":"hello_1234900","Path":"gno.land/r/demo/hello_1234900","Files":[{"Name":"hello_1234900.gno","Body":"package hello_1234900\n\nfunc main() {\n\t // \u0026\n\tprintln(\"STRING\")\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"83IVK+KXfmyRwFGgtDUp9CP9UPBbxdQRV9Fva8t3ahETn5Y3Y/TO+tE8IkCyc0x1whtYQRfviZ2tqZXeYRulcg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","package":{"Name":"blibla_blu12","Path":"gno.land/r/demo/blibla_blu12","Files":[{"Name":"blibla_blu12.gno","Body":"package blibla_blu12\n\nimport (\n\t\"encoding/base64\"\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\tdao_core \"gno.land/p/demo/daodao/core\"\n\tdao_interfaces \"gno.land/p/demo/daodao/interfaces\"\n\t\"gno.land/p/demo/daodao/proposal_single\"\n\t\"gno.land/p/demo/daodao/voting_group\"\n\t\"gno.land/r/demo/groups\"\n\tmodboards \"gno.land/r/demo/modboards\"\n)\n\nvar (\n\tdaoCore       dao_core.IDAOCore\n\tregistry      = dao_interfaces.NewMessagesRegistry()\n\tmainBoardName = \"blibla_blu\"\n\tgroupID       groups.GroupID\n)\n\nfunc init() {\n\tgroupID = groups.CreateGroup(mainBoardName)\n\tgroups.AddMember(groupID, \"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv\", 1, \"\");\n\tregistry.Register(groups.NewAddMemberHandler())\n\tregistry.Register(groups.NewDeleteMemberHandler())\n\n\tdaoCore = dao_core.NewDAOCore(dao_voting_group.NewGRC4Voting(groupID), nil)\n\n\ttt := dao_interfaces.Percent(1500) // 15%\n\ttq := dao_interfaces.Percent(5000) // 50%\n\tproposalMod := dao_proposal_single.NewDAOProposalSingle(daoCore, \u0026dao_proposal_single.DAOProposalSingleOpts{\n\t\tMaxVotingPeriod: time.Second * 86400,\n\t\tThreshold: dao_interfaces.Threshold{ThresholdQuorum: \u0026dao_interfaces.ThresholdQuorum{\n\t\t\tThreshold: dao_interfaces.PercentageThreshold{Percent: \u0026tt},\n\t\t\tQuorum:    dao_interfaces.PercentageThreshold{Percent: \u0026tq},\n\t\t}},\n\t\tRegistry: registry,\n\t})\n\t// TODO: add a router to support multiple proposal modules\n\tregistry.Register(dao_proposal_single.NewUpdateSettingsHandler(proposalMod))\n\tdaoCore.AddProposalModule(proposalMod)\n\n\tregistry.Register(modboards.NewCreateBoardHandler())\n\tregistry.Register(modboards.NewDeletePostHandler())\n\tmodboards.CreateBoard(mainBoardName)\n}\n\nfunc Render(path string) string {\n\treturn \"[[board](/r/demo/modboards:\" + mainBoardName + \")]\\n\\n\" + daoCore.Render(path)\n}\n\nfunc GetCore() dao_core.IDAOCore {\n\treturn daoCore\n}\n\nfunc Vote(moduleIndex int, proposalID int, vote dao_interfaces.Vote, rationale string) {\n\tdao_core.GetProposalModule(daoCore, moduleIndex).Vote(proposalID, vote, rationale)\n}\n\nfunc Execute(moduleIndex int, proposalID int) {\n\tdao_core.GetProposalModule(daoCore, moduleIndex).Execute(proposalID)\n}\n\nfunc Propose(moduleIndex int, title string, description string, b64Messages string) {\n\tmod := dao_core.GetProposalModule(daoCore, moduleIndex)\n\tvar messages []dao_interfaces.ExecutableMessage\n\tif len(b64Messages) != 0 {\n\t\trawMessages := strings.Split(b64Messages, \",\")\n\t\tfor _, rawMessage := range rawMessages {\n\t\t\tmessage := registry.FromBase64String(rawMessage)\n\t\t\tmessages = append(messages, message)\n\t\t}\n\t}\n\tmod.Propose(title, description, messages)\n}\n\nfunc GetBinaryMembers() string {\n\tmembers := groups.GetMembers(groupID)\n\tss := []string{}\n\tfor _, member := range members {\n\t\tss = append(ss, base64.RawURLEncoding.EncodeToString(member.Bytes()))\n\t}\n\treturn strings.Join(ss, \",\")\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"evH8V1rCyWw6nNSFEiq+/6XNkNvY6kl5Slylof0EIyQ1hC5wHUyyKQkypLE4I6LNJQf8JTlzzU7X3MVPuiCwcw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"ui_dao_77","Path":"gno.land/r/demo/ui_dao_77","Files":[{"Name":"ui_dao_77.gno","Body":"package ui_dao_77\n\nimport (\n\t\"encoding/base64\"\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\tdao_core \"gno.land/p/demo/daodao/core\"\n\tdao_interfaces \"gno.land/p/demo/daodao/interfaces\"\n\t\"gno.land/p/demo/daodao/proposal_single\"\n\t\"gno.land/p/demo/daodao/voting_group\"\n\t\"gno.land/r/demo/groups\"\n\tmodboards \"gno.land/r/demo/modboards\"\n)\n\nvar (\n\tdaoCore       dao_core.IDAOCore\n\tregistry      = dao_interfaces.NewMessagesRegistry()\n\tmainBoardName = \"ui_dao_50\"\n\tgroupID       groups.GroupID\n)\n\nfunc init() {\n\tgroupID = groups.CreateGroup(mainBoardName)\n\tgroups.AddMember(groupID, \"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv\", 1, \"\")\n\tregistry.Register(groups.NewAddMemberHandler())\n\tregistry.Register(groups.NewDeleteMemberHandler())\n\n\tdaoCore = dao_core.NewDAOCore(dao_voting_group.NewGRC4Voting(groupID), nil)\n\n\ttt := dao_interfaces.Percent(1500) // 15%\n\ttq := dao_interfaces.Percent(5000) // 50%\n\tproposalMod := dao_proposal_single.NewDAOProposalSingle(daoCore, \u0026dao_proposal_single.DAOProposalSingleOpts{\n\t\tMaxVotingPeriod: time.Second * 86400,\n\t\tThreshold: dao_interfaces.Threshold{ThresholdQuorum: \u0026dao_interfaces.ThresholdQuorum{\n\t\t\tThreshold: dao_interfaces.PercentageThreshold{Percent: \u0026tt},\n\t\t\tQuorum:    dao_interfaces.PercentageThreshold{Percent: \u0026tq},\n\t\t}},\n\t\tRegistry: registry,\n\t})\n\t// TODO: add a router to support multiple proposal modules\n\tregistry.Register(dao_proposal_single.NewUpdateSettingsHandler(proposalMod))\n\tdaoCore.AddProposalModule(proposalMod)\n\n\tregistry.Register(modboards.NewCreateBoardHandler())\n\tregistry.Register(modboards.NewDeletePostHandler())\n\tmodboards.CreateBoard(mainBoardName)\n}\n\nfunc Render(path string) string {\n\treturn \"[[board](/r/demo/modboards:\" + mainBoardName + \")]\n\n\" + daoCore.Render(path)\n}\n\nfunc GetCore() dao_core.IDAOCore {\n\treturn daoCore\n}\n\nfunc Vote(moduleIndex int, proposalID int, vote dao_interfaces.Vote, rationale string) {\n\tdao_core.GetProposalModule(daoCore, moduleIndex).Vote(proposalID, vote, rationale)\n}\n\nfunc Execute(moduleIndex int, proposalID int) {\n\tdao_core.GetProposalModule(daoCore, moduleIndex).Execute(proposalID)\n}\n\nfunc Propose(moduleIndex int, title string, description string, b64Messages string) {\n\tmod := dao_core.GetProposalModule(daoCore, moduleIndex)\n\tvar messages []dao_interfaces.ExecutableMessage\n\tif len(b64Messages) != 0 {\n\t\trawMessages := strings.Split(b64Messages, \",\")\n\t\tfor _, rawMessage := range rawMessages {\n\t\t\tmessage := registry.FromBase64String(rawMessage)\n\t\t\tmessages = append(messages, message)\n\t\t}\n\t}\n\tmod.Propose(title, description, messages)\n}\n\nfunc GetBinaryMembers() string {\n\tmembers := groups.GetMembers(groupID)\n\tss := []string{}\n\tfor _, member := range members {\n\t\tss = append(ss, base64.RawURLEncoding.EncodeToString(member.Bytes()))\n\t}\n\treturn strings.Join(ss, \",\")\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"icwYp0lqzeY+zK6MkgFNSNpo5pI74Mq9IkatHeI02Fdv3EyKPN3YPVLDe0vQwCvfHjLOSBz0H1eUx0ot12fNCQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/echo","func":"Echo","args":["123"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"8FPIZ98kIV1uQ7Rzq8hgcw9lTAtFgeHFsymhvne6MA8fq6mibdbx1tfQrNONS4xmEZn14TvyffXiWGPmOEmI9g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/echo","func":"Echo","args":["ldJl9foMmxf2XMcVB08Y5mfLAsC7M6lF0Cm3PXxsyKxusXWm2oxsQHzckxJNBEQZ5W3CFfegaGQu585gaykd6dkTTHhLSSbqPaUR"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"/zefyhhLSIaQDfFqnCreUu25y9fn3U8ArwyetVcgdfRaTluJ0GLh49fT1DMvXvBg/GuQaCxUrgZxet5ZooMsag=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/echo","func":"Echo","args":["2ep3dSejDXMlDEwq0eWfzMjzUkDgUbBVLHwjK3dPUlg2nzx1o8gvyqkQweWYVqaahCwZhYv1AJH1GQGIMvBypGOEUgxESRRy8qgOVgfyA54OLjs7xy1ERRBPTMmHUlDXqCL6m1Ghyhg2r58mTLXl3PHUXEOpiBzFg8jwWzxF5OykTvBFaUYsqgRLXdgpiC7J7Vkf0Jc8CQ03wZx6c48AZVHm7igF1r0bTIpt3diBtefqPHNyN4z8mNWfQVfsKGPAkDCgIC0ORvk8D5l1ZPQ4pGs4cnCKIs4B4VrWCmV0Xokekz3Gc74G854zIPCwEiIhwlFchQZanQcdLG18z89eob3avquPjNL5R3CrRXbOFiUufhGuIr3PZdkD6ygLaikMs5f5Lq1ooaQqMk9hZxz2dNZ94K9Qs0zVZX92HlUvoqnBHtis7XPiOCTvSMyOwvRgxaQqAMWEQOEOCx6yPc2bRGAuFPmx8EaVBY3TGNsUolkXjgoYmK3ERTZ5fPq5d3b63fkvaHA54OxVCSnxRh58WtYYT31joFw5z1poPM95fTLLMKpSaGsCJ5mtP6cbXBA0yyrJz0l8MGkCtpP0KzRN9VOCsPUZFVqQ51XSeRAB31YcLWSZx4Q4o6d6GKSPKVVqZR9nVToTJLSn4zDuxgKJGevaLRhLqQ3Hg7tj6FecXWti1Uni4KOPzjVGBFXGErFLK1uo6ltrihG2pMTrExH9MKHII2Ued18KNIMQGhMhHjGKLFPnjqKcrkqkduODC6e6OFtdXiWc6oqnWOxoySJJfuKYX5eKMDbkzGksPsRvziy22JfxBUQo4fLJ4xnhdxjwooHZtx34F6OOWWbqxzXQapcHNj5vTUqbJsWj74XmxRASInShpFNoWvtlsPgUFM3hZ8g8eghPri4HzGAGVbA8qfjli5D3B6X5EeZouYz73FeWqxpnelf51GQyzwpjjfsvypTr35ELHPegzuPlmuYfU1mIqZ682oyyqtKsTt7S"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"YR313eljJnt8ygZutgzsuqYSlLSlBJfsd37tGqulr71eogvpb1fLe4Zy3kXFc6hTIaUTGwTIrrJ9dRfDDx6pAA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/echo","func":"Echo","args":[""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"OGItvcAQspcpr0tFxmEccxfe+qR1KA4tm24xlZt1Ogh6qmkOr2uOrkDnw0iGII4OqAlPBEdxeVP/9Al4xaya7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/echo","func":"Echo","args":[""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"RzqCWWoTfYEOelz0yylhxEf2goyWgZElNqsxB1Hssa88ngXkAjWP3TAE+4Vcy/zbeg/V7umeZtwOUj2J6SROKQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"gggaag","Path":"gno.land/r/demo/gggaag","Files":[{"Name":"gggaag.gno","Body":"package gggaag\n\nfunc Hello() string {\n//\u003e\u003c\u003e\u003c\u003e\u003c@@$$!!@@^\u0026\u0026$!@#%\u0026*@!#$^\u0026*\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"fe2sx7HhJQl0AK0fiTK/JAeYyhtwmp76WYhK5xrWTFx49aUbJvfGC+eMGp5gxqoCQw4u83O9F0WsLDTq1sMIMA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","241"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"pfEHAUcEyvYKU7wtHt+7Ri870QS+IcWDZ2WXLelDwMcnFOTTsRH7Wylop3mzP3iJR34oDUVuMeKEAn6Wfbd+ew=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"114000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"LxtxQytEW7Tyl4XbfaG3qJDzHUxJKi3qKk4NlUEJgdolImqZh/AbL/CSGThlCqvtiEwnh3GfZdPlP1lZiMKy6Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","15"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"AE7mrBR7dMrnbZoit/BM2xfTEXwPEO24R1adtGluKqZL0xCMJfcUxyPk1JzspiRt3n5itW+Ju76x0EEYHsMTWQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","","14444"]},{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","","14444"]},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"5000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"sEeCzAX9+p7c/LxnrAIiL++y2mo3urLzLQy7KRxgF9Z9p1VtXRk2p6xOMLcInOzNUrUB0Josq2VgtMicjV7w8A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qv3dqyw46fut94z9t90jka58saw2e7l99nzqtr","to_address":"g1jpwwug0890h3nmxfuq5j7papsxsjy4l2fts4zk","amount":"400000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3Tw76GV0BAtfeMytcN0YmNQsmhocbe7kMs7sCF8SJVx"},"signature":"uSP/bn01OxdzqgYes8ul/36ETwlqNrefETOHE/aps0Yz1gZx4s0aCrFf2kF7az1hLixlmUr4XcCykq3k7y4G8g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jpwwug0890h3nmxfuq5j7papsxsjy4l2fts4zk","to_address":"g1r6stetgcn7mk5am9mc4g83dhhtxafhue0n87yl","amount":"100000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzJIf6QGVzZCHiK8qZ8X+a7y4093cxnTQnoZh7Bs9ZOq"},"signature":"WFjyMDSxvTIBHbPzMOHPcZbbcuv9SceDUoc03JWZpgA4X7FEF06/po69814/IELA1HpeoP1eTw8VBCvCxpc1qg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/tong","func":"Mint","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","12"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"zrI7ULcDoRFiRl+aIq2iDARFJ1Y0XxIi7iUMJKUYz1lSPMQFhJZ2CGq/Pi+zCwF7qtOVc1NDyOhOBRaQUAjWow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"escrow","Path":"gno.land/r/demo/escrow_01","Files":[{"Name":"escrow.gno","Body":"package escrow\n\nimport (\n\tfmt \"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/foo20\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Config struct {\n\tdaoAdmin string\n}\n\ntype ContractStatus uint32\n\nconst (\n\tCREATED   ContractStatus = 1\n\tACCEPTED  ContractStatus = 2\n\tCANCELED  ContractStatus = 3\n\tPAUSED    ContractStatus = 4\n\tCOMPLETED ContractStatus = 5\n)\n\ntype Contract struct {\n\tid             uint64\n\tsender         string\n\treceiver       string\n\tescrowToken    string // grc20 token\n\tescrowAmount   uint64\n\tstatus         ContractStatus\n\texpireAt       uint64\n\tclientFeedback string\n\tsellerFeedback string\n}\n\n// GNODAO STATE\nvar config Config\nvar contracts []Contract\n\n// GNODAO FUNCTIONS\nfunc UpdateConfig(daoAdmin string) {\n\tif daoAdmin == \"\" {\n\t\tconfig.daoAdmin = daoAdmin\n\t\treturn\n\t}\n\tcaller := std.GetOrigCaller()\n\tif config.daoAdmin != caller.String() {\n\t\tpanic(\"not allowed to update daoAdmin\")\n\t}\n\n\tconfig.daoAdmin = daoAdmin\n}\n\nfunc CreateContract(\n\treceiver string,\n\tescrowToken string, // grc20 token\n\tescrowAmount uint64,\n\tduration uint64,\n) {\n\tcaller := std.GetOrigCaller()\n\tif duration == 0 {\n\t\tpanic(\"invalid duration\")\n\t}\n\tif escrowToken == \"\" {\n\t\tpanic(\"invalid escrow token\")\n\t}\n\tif escrowAmount == 0 {\n\t\tpanic(\"invalid escrow amount\")\n\t}\n\n\tcontractId := uint64(len(contracts))\n\tcontracts = append(contracts, Contract{\n\t\tid:           contractId,\n\t\tsender:       caller.String(),\n\t\treceiver:     receiver,\n\t\tescrowToken:  escrowToken,\n\t\tescrowAmount: escrowAmount,\n\t\tstatus:       CREATED,\n\t\texpireAt:     time.Now().Unix() + duration,\n\t})\n\tfoo20.TransferFrom(sender, config.daoAdmin, escrowAmount)\n}\n\nfunc CancelContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != CREATED {\n\t\tpanic(\"contract can only be cancelled at CREATED status\")\n\t}\n\n\tif contract.sender != caller.String() {\n\t\tpanic(\"not authorized to cancel the contract\")\n\t}\n\n\tcontracts[contractId].status = CANCELED\n\n\t// return grc20 tokens back to sender\n\t// TODO: resolve caller problem\n\tfoo20.Transfer(sender, contract.escrowAmount)\n}\n\nfunc AcceptContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != CREATED {\n\t\tpanic(\"contract can only be accepted at CREATED status\")\n\t}\n\n\tif contract.expireAt \u003c time.Now().Unix() {\n\t\tpanic(\"contract already expired\")\n\t}\n\n\tif contract.receiver != caller.String() {\n\t\tpanic(\"only associated receiver is allowed to accept\")\n\t}\n\tcontracts[contractId].status = ACCEPTED\n}\n\nfunc PauseContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != ACCEPTED {\n\t\tpanic(\"contract can only be paused at ACCEPTED status\")\n\t}\n\n\tif contract.sender != caller.String() \u0026\u0026 contract.receiver != caller.String() {\n\t\tpanic(\"only contract sender or receiver can pause\")\n\t}\n\tcontracts[contractId].status = PAUSED\n}\n\nfunc CompleteContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != ACCEPTED {\n\t\tpanic(\"contract can only be completed at ACCEPTED status\")\n\t}\n\n\tif contract.sender != caller.String() {\n\t\tpanic(\"only contract sender can complete\")\n\t}\n\n\t// send tokens to receiver\n\t// TODO: resolve caller problem\n\tfoo20.Transfer(receiver, contract.escrowAmount)\n\tcontracts[contractId].status = COMPLETED\n}\n\nfunc CompleteContractByDAO(contractId uint64, sellerAmount uint64) {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != PAUSED {\n\t\tpanic(\"contract can only be processed by DAO at PAUSED status\")\n\t}\n\n\tif config.daoAdmin != caller.String() {\n\t\tpanic(\"only dao admin is allowed for this operation\")\n\t}\n\n\tclientAmount := contract.escrowAmount - sellerAmount\n\tcontracts[contractId].status = COMPLETED\n\n\t// send tokens for client and seller\n\t// TODO: resolve caller problem\n\tfoo20.Transfer(contract.receiver, sellerAmount)\n\tfoo20.Transfer(contract.sender, clientAmount)\n}\n\nfunc GiveFeedback(contractId uint64, feedback string) {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != COMPLETED {\n\t\tpanic(\"feedback can only be given after complete\")\n\t}\n\n\tif contract.sender == caller.String() {\n\t\tcontracts[contractId].clientFeedback = feedback\n\t} else if contract.receiver == caller.String() {\n\t\tcontracts[contractId].sellerFeedback = feedback\n\t} else {\n\t\tpanic(\"only contract participants can leave feedback\")\n\t}\n}\n\nfunc GetContracts(startAfter, limit uint64) []DAO {\n\tmax := uint64(len(contracts))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn contracts[startAfter:max]\n}\n\nfunc RenderConfig() string {\n\treturn fmt.Sprintf(`{\n\t\t\"daoAdmin\": %s\n}`, config.daoAdmin)\n}\n\nfunc RenderContract(contractId uint64) string {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tc := contracts[contractId]\n\treturn fmt.Sprintf(`{\n\t\t\"id\": %d,\n\t\t\"sender\": \"%s\",\n\t\t\"receiver\": \"%s\",\n\t\t\"escrowToken\": \"%s\",\n\t\t\"escrowAmount\": %d,\n\t\t\"status\": %d,\n\t\t\"expireAt\": %d\n}`, c.id, c.sender, c.receiver, c.escrowToken, c.escrowAmount, c.status, c.expireAt)\n}\n\nfunc RenderContracts(startAfter uint64, limit uint64) string {\n\tcontracts := GetContracts(startAfter, limit)\n\trendered := \"[\"\n\tfor index, proposal := range contracts {\n\t\trendered += RenderContract(proposal.daoId, proposal.id)\n\t\tif index != len(contracts)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"yB3kB16BWq5acSFZD+X+yBZjZC+oPTdWb4VNoxYtvMcR9ViPN0jQvCHtPYl4I9soyicgI+wCc/pkEEMmTLnhlA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"escrow","Path":"gno.land/r/demo/escrow_01","Files":[{"Name":"escrow.gno","Body":"package escrow\n\nimport (\n\tfmt \"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/foo20\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Config struct {\n\tdaoAdmin string\n}\n\ntype ContractStatus uint32\n\nconst (\n\tCREATED   ContractStatus = 1\n\tACCEPTED  ContractStatus = 2\n\tCANCELED  ContractStatus = 3\n\tPAUSED    ContractStatus = 4\n\tCOMPLETED ContractStatus = 5\n)\n\ntype Contract struct {\n\tid             uint64\n\tsender         string\n\treceiver       string\n\tescrowToken    string // grc20 token\n\tescrowAmount   uint64\n\tstatus         ContractStatus\n\texpireAt       uint64\n\tclientFeedback string\n\tsellerFeedback string\n}\n\n// GNODAO STATE\nvar config Config\nvar contracts []Contract\n\n// GNODAO FUNCTIONS\nfunc UpdateConfig(daoAdmin string) {\n\tif daoAdmin == \"\" {\n\t\tconfig.daoAdmin = daoAdmin\n\t\treturn\n\t}\n\tcaller := std.GetOrigCaller()\n\tif config.daoAdmin != caller.String() {\n\t\tpanic(\"not allowed to update daoAdmin\")\n\t}\n\n\tconfig.daoAdmin = daoAdmin\n}\n\nfunc CreateContract(\n\treceiver string,\n\tescrowToken string, // grc20 token\n\tescrowAmount uint64,\n\tduration uint64,\n) {\n\tcaller := std.GetOrigCaller()\n\tif duration == 0 {\n\t\tpanic(\"invalid duration\")\n\t}\n\tif escrowToken == \"\" {\n\t\tpanic(\"invalid escrow token\")\n\t}\n\tif escrowAmount == 0 {\n\t\tpanic(\"invalid escrow amount\")\n\t}\n\n\tcontractId := uint64(len(contracts))\n\tcontracts = append(contracts, Contract{\n\t\tid:           contractId,\n\t\tsender:       caller.String(),\n\t\treceiver:     receiver,\n\t\tescrowToken:  escrowToken,\n\t\tescrowAmount: escrowAmount,\n\t\tstatus:       CREATED,\n\t\texpireAt:     time.Now().Unix() + duration,\n\t})\n\tfoo20.TransferFrom(sender, config.daoAdmin, escrowAmount)\n}\n\nfunc CancelContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != CREATED {\n\t\tpanic(\"contract can only be cancelled at CREATED status\")\n\t}\n\n\tif contract.sender != caller.String() {\n\t\tpanic(\"not authorized to cancel the contract\")\n\t}\n\n\tcontracts[contractId].status = CANCELED\n\n\t// return grc20 tokens back to sender\n\t// TODO: resolve caller problem\n\tfoo20.Transfer(sender, contract.escrowAmount)\n}\n\nfunc AcceptContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != CREATED {\n\t\tpanic(\"contract can only be accepted at CREATED status\")\n\t}\n\n\tif contract.expireAt \u003c time.Now().Unix() {\n\t\tpanic(\"contract already expired\")\n\t}\n\n\tif contract.receiver != caller.String() {\n\t\tpanic(\"only associated receiver is allowed to accept\")\n\t}\n\tcontracts[contractId].status = ACCEPTED\n}\n\nfunc PauseContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != ACCEPTED {\n\t\tpanic(\"contract can only be paused at ACCEPTED status\")\n\t}\n\n\tif contract.sender != caller.String() \u0026\u0026 contract.receiver != caller.String() {\n\t\tpanic(\"only contract sender or receiver can pause\")\n\t}\n\tcontracts[contractId].status = PAUSED\n}\n\nfunc CompleteContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != ACCEPTED {\n\t\tpanic(\"contract can only be completed at ACCEPTED status\")\n\t}\n\n\tif contract.sender != caller.String() {\n\t\tpanic(\"only contract sender can complete\")\n\t}\n\n\t// send tokens to receiver\n\t// TODO: resolve caller problem\n\tfoo20.Transfer(receiver, contract.escrowAmount)\n\tcontracts[contractId].status = COMPLETED\n}\n\nfunc CompleteContractByDAO(contractId uint64, sellerAmount uint64) {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != PAUSED {\n\t\tpanic(\"contract can only be processed by DAO at PAUSED status\")\n\t}\n\n\tif config.daoAdmin != caller.String() {\n\t\tpanic(\"only dao admin is allowed for this operation\")\n\t}\n\n\tclientAmount := contract.escrowAmount - sellerAmount\n\tcontracts[contractId].status = COMPLETED\n\n\t// send tokens for client and seller\n\t// TODO: resolve caller problem\n\tfoo20.Transfer(contract.receiver, sellerAmount)\n\tfoo20.Transfer(contract.sender, clientAmount)\n}\n\nfunc GiveFeedback(contractId uint64, feedback string) {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != COMPLETED {\n\t\tpanic(\"feedback can only be given after complete\")\n\t}\n\n\tif contract.sender == caller.String() {\n\t\tcontracts[contractId].clientFeedback = feedback\n\t} else if contract.receiver == caller.String() {\n\t\tcontracts[contractId].sellerFeedback = feedback\n\t} else {\n\t\tpanic(\"only contract participants can leave feedback\")\n\t}\n}\n\nfunc GetContracts(startAfter, limit uint64) []Contract {\n\tmax := uint64(len(contracts))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn contracts[startAfter:max]\n}\n\nfunc RenderConfig() string {\n\treturn fmt.Sprintf(`{\n\t\t\"daoAdmin\": %s\n}`, config.daoAdmin)\n}\n\nfunc RenderContract(contractId uint64) string {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tc := contracts[contractId]\n\treturn fmt.Sprintf(`{\n\t\t\"id\": %d,\n\t\t\"sender\": \"%s\",\n\t\t\"receiver\": \"%s\",\n\t\t\"escrowToken\": \"%s\",\n\t\t\"escrowAmount\": %d,\n\t\t\"status\": %d,\n\t\t\"expireAt\": %d\n}`, c.id, c.sender, c.receiver, c.escrowToken, c.escrowAmount, c.status, c.expireAt)\n}\n\nfunc RenderContracts(startAfter uint64, limit uint64) string {\n\tcontracts := GetContracts(startAfter, limit)\n\trendered := \"[\"\n\tfor index, proposal := range contracts {\n\t\trendered += RenderContract(proposal.daoId, proposal.id)\n\t\tif index != len(contracts)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"8QEhh4hiZ1jmMHMQzZ0bt0d8d7WqD0XCSLiQhuGaCMs33V3T/ad9bUlHpNk5nzRdMrA5IuzF23KJJia6D0ZRMA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"escrow","Path":"gno.land/r/demo/escrow_01","Files":[{"Name":"escrow.gno","Body":"package escrow\n\nimport (\n\tfmt \"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/foo20\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Config struct {\n\tdaoAdmin string\n}\n\ntype ContractStatus uint32\n\nconst (\n\tCREATED   ContractStatus = 1\n\tACCEPTED  ContractStatus = 2\n\tCANCELED  ContractStatus = 3\n\tPAUSED    ContractStatus = 4\n\tCOMPLETED ContractStatus = 5\n)\n\ntype Contract struct {\n\tid             uint64\n\tsender         string\n\treceiver       string\n\tescrowToken    string // grc20 token\n\tescrowAmount   uint64\n\tstatus         ContractStatus\n\texpireAt       uint64\n\tclientFeedback string\n\tsellerFeedback string\n}\n\n// GNODAO STATE\nvar config Config\nvar contracts []Contract\n\n// GNODAO FUNCTIONS\nfunc UpdateConfig(daoAdmin string) {\n\tif daoAdmin == \"\" {\n\t\tconfig.daoAdmin = daoAdmin\n\t\treturn\n\t}\n\tcaller := std.GetOrigCaller()\n\tif config.daoAdmin != caller.String() {\n\t\tpanic(\"not allowed to update daoAdmin\")\n\t}\n\n\tconfig.daoAdmin = daoAdmin\n}\n\nfunc CreateContract(\n\treceiver string,\n\tescrowToken string, // grc20 token\n\tescrowAmount uint64,\n\tduration uint64,\n) {\n\tcaller := std.GetOrigCaller()\n\tif duration == 0 {\n\t\tpanic(\"invalid duration\")\n\t}\n\tif escrowToken == \"\" {\n\t\tpanic(\"invalid escrow token\")\n\t}\n\tif escrowAmount == 0 {\n\t\tpanic(\"invalid escrow amount\")\n\t}\n\n\tcontractId := uint64(len(contracts))\n\tcontracts = append(contracts, Contract{\n\t\tid:           contractId,\n\t\tsender:       caller.String(),\n\t\treceiver:     receiver,\n\t\tescrowToken:  escrowToken,\n\t\tescrowAmount: escrowAmount,\n\t\tstatus:       CREATED,\n\t\texpireAt:     uint64(time.Now().Unix()) + duration,\n\t})\n\tfoo20.TransferFrom(sender, config.daoAdmin, escrowAmount)\n}\n\nfunc CancelContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != CREATED {\n\t\tpanic(\"contract can only be cancelled at CREATED status\")\n\t}\n\n\tif contract.sender != caller.String() {\n\t\tpanic(\"not authorized to cancel the contract\")\n\t}\n\n\tcontracts[contractId].status = CANCELED\n\n\t// return grc20 tokens back to sender\n\t// TODO: resolve caller problem\n\tfoo20.Transfer(sender, contract.escrowAmount)\n}\n\nfunc AcceptContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != CREATED {\n\t\tpanic(\"contract can only be accepted at CREATED status\")\n\t}\n\n\tif contract.expireAt \u003c time.Now().Unix() {\n\t\tpanic(\"contract already expired\")\n\t}\n\n\tif contract.receiver != caller.String() {\n\t\tpanic(\"only associated receiver is allowed to accept\")\n\t}\n\tcontracts[contractId].status = ACCEPTED\n}\n\nfunc PauseContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != ACCEPTED {\n\t\tpanic(\"contract can only be paused at ACCEPTED status\")\n\t}\n\n\tif contract.sender != caller.String() \u0026\u0026 contract.receiver != caller.String() {\n\t\tpanic(\"only contract sender or receiver can pause\")\n\t}\n\tcontracts[contractId].status = PAUSED\n}\n\nfunc CompleteContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != ACCEPTED {\n\t\tpanic(\"contract can only be completed at ACCEPTED status\")\n\t}\n\n\tif contract.sender != caller.String() {\n\t\tpanic(\"only contract sender can complete\")\n\t}\n\n\t// send tokens to receiver\n\t// TODO: resolve caller problem\n\tfoo20.Transfer(receiver, contract.escrowAmount)\n\tcontracts[contractId].status = COMPLETED\n}\n\nfunc CompleteContractByDAO(contractId uint64, sellerAmount uint64) {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != PAUSED {\n\t\tpanic(\"contract can only be processed by DAO at PAUSED status\")\n\t}\n\n\tif config.daoAdmin != caller.String() {\n\t\tpanic(\"only dao admin is allowed for this operation\")\n\t}\n\n\tclientAmount := contract.escrowAmount - sellerAmount\n\tcontracts[contractId].status = COMPLETED\n\n\t// send tokens for client and seller\n\t// TODO: resolve caller problem\n\tfoo20.Transfer(contract.receiver, sellerAmount)\n\tfoo20.Transfer(contract.sender, clientAmount)\n}\n\nfunc GiveFeedback(contractId uint64, feedback string) {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != COMPLETED {\n\t\tpanic(\"feedback can only be given after complete\")\n\t}\n\n\tif contract.sender == caller.String() {\n\t\tcontracts[contractId].clientFeedback = feedback\n\t} else if contract.receiver == caller.String() {\n\t\tcontracts[contractId].sellerFeedback = feedback\n\t} else {\n\t\tpanic(\"only contract participants can leave feedback\")\n\t}\n}\n\nfunc GetContracts(startAfter, limit uint64) []Contract {\n\tmax := uint64(len(contracts))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn contracts[startAfter:max]\n}\n\nfunc RenderConfig() string {\n\treturn fmt.Sprintf(`{\n\t\t\"daoAdmin\": %s\n}`, config.daoAdmin)\n}\n\nfunc RenderContract(contractId uint64) string {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tc := contracts[contractId]\n\treturn fmt.Sprintf(`{\n\t\t\"id\": %d,\n\t\t\"sender\": \"%s\",\n\t\t\"receiver\": \"%s\",\n\t\t\"escrowToken\": \"%s\",\n\t\t\"escrowAmount\": %d,\n\t\t\"status\": %d,\n\t\t\"expireAt\": %d\n}`, c.id, c.sender, c.receiver, c.escrowToken, c.escrowAmount, c.status, c.expireAt)\n}\n\nfunc RenderContracts(startAfter uint64, limit uint64) string {\n\tcontracts := GetContracts(startAfter, limit)\n\trendered := \"[\"\n\tfor index, proposal := range contracts {\n\t\trendered += RenderContract(proposal.daoId, proposal.id)\n\t\tif index != len(contracts)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"Xz86vrh3IVWzEtrxzoOVxqXUuTJK/42oi+Sy8Q6z6/w7uL+RPmdvbXLKNf39L4vYYfGlDbgcucmdx9sXWOR4QQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"escrow","Path":"gno.land/r/demo/escrow_01","Files":[{"Name":"escrow.gno","Body":"package escrow\n\nimport (\n\tfmt \"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/foo20\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Config struct {\n\tdaoAdmin string\n}\n\ntype ContractStatus uint32\n\nconst (\n\tCREATED   ContractStatus = 1\n\tACCEPTED  ContractStatus = 2\n\tCANCELED  ContractStatus = 3\n\tPAUSED    ContractStatus = 4\n\tCOMPLETED ContractStatus = 5\n)\n\ntype Contract struct {\n\tid             uint64\n\tsender         string\n\treceiver       string\n\tescrowToken    string // grc20 token\n\tescrowAmount   uint64\n\tstatus         ContractStatus\n\texpireAt       uint64\n\tclientFeedback string\n\tsellerFeedback string\n}\n\n// GNODAO STATE\nvar config Config\nvar contracts []Contract\n\n// GNODAO FUNCTIONS\nfunc UpdateConfig(daoAdmin string) {\n\tif daoAdmin == \"\" {\n\t\tconfig.daoAdmin = daoAdmin\n\t\treturn\n\t}\n\tcaller := std.GetOrigCaller()\n\tif config.daoAdmin != caller.String() {\n\t\tpanic(\"not allowed to update daoAdmin\")\n\t}\n\n\tconfig.daoAdmin = daoAdmin\n}\n\nfunc CreateContract(\n\treceiver string,\n\tescrowToken string, // grc20 token\n\tescrowAmount uint64,\n\tduration uint64,\n) {\n\tcaller := std.GetOrigCaller()\n\tif duration == 0 {\n\t\tpanic(\"invalid duration\")\n\t}\n\tif escrowToken == \"\" {\n\t\tpanic(\"invalid escrow token\")\n\t}\n\tif escrowAmount == 0 {\n\t\tpanic(\"invalid escrow amount\")\n\t}\n\n\tcontractId := uint64(len(contracts))\n\tcontracts = append(contracts, Contract{\n\t\tid:           contractId,\n\t\tsender:       caller.String(),\n\t\treceiver:     receiver,\n\t\tescrowToken:  escrowToken,\n\t\tescrowAmount: escrowAmount,\n\t\tstatus:       CREATED,\n\t\texpireAt:     uint64(time.Now().Unix()) + duration,\n\t})\n\tfoo20.TransferFrom(caller.String(), config.daoAdmin, escrowAmount)\n}\n\nfunc CancelContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != CREATED {\n\t\tpanic(\"contract can only be cancelled at CREATED status\")\n\t}\n\n\tif contract.sender != caller.String() {\n\t\tpanic(\"not authorized to cancel the contract\")\n\t}\n\n\tcontracts[contractId].status = CANCELED\n\n\t// return grc20 tokens back to sender\n\t// TODO: resolve caller problem\n\tfoo20.Transfer(sender, contract.escrowAmount)\n}\n\nfunc AcceptContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != CREATED {\n\t\tpanic(\"contract can only be accepted at CREATED status\")\n\t}\n\n\tif contract.expireAt \u003c time.Now().Unix() {\n\t\tpanic(\"contract already expired\")\n\t}\n\n\tif contract.receiver != caller.String() {\n\t\tpanic(\"only associated receiver is allowed to accept\")\n\t}\n\tcontracts[contractId].status = ACCEPTED\n}\n\nfunc PauseContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != ACCEPTED {\n\t\tpanic(\"contract can only be paused at ACCEPTED status\")\n\t}\n\n\tif contract.sender != caller.String() \u0026\u0026 contract.receiver != caller.String() {\n\t\tpanic(\"only contract sender or receiver can pause\")\n\t}\n\tcontracts[contractId].status = PAUSED\n}\n\nfunc CompleteContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != ACCEPTED {\n\t\tpanic(\"contract can only be completed at ACCEPTED status\")\n\t}\n\n\tif contract.sender != caller.String() {\n\t\tpanic(\"only contract sender can complete\")\n\t}\n\n\t// send tokens to receiver\n\t// TODO: resolve caller problem\n\tfoo20.Transfer(receiver, contract.escrowAmount)\n\tcontracts[contractId].status = COMPLETED\n}\n\nfunc CompleteContractByDAO(contractId uint64, sellerAmount uint64) {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != PAUSED {\n\t\tpanic(\"contract can only be processed by DAO at PAUSED status\")\n\t}\n\n\tif config.daoAdmin != caller.String() {\n\t\tpanic(\"only dao admin is allowed for this operation\")\n\t}\n\n\tclientAmount := contract.escrowAmount - sellerAmount\n\tcontracts[contractId].status = COMPLETED\n\n\t// send tokens for client and seller\n\t// TODO: resolve caller problem\n\tfoo20.Transfer(contract.receiver, sellerAmount)\n\tfoo20.Transfer(contract.sender, clientAmount)\n}\n\nfunc GiveFeedback(contractId uint64, feedback string) {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != COMPLETED {\n\t\tpanic(\"feedback can only be given after complete\")\n\t}\n\n\tif contract.sender == caller.String() {\n\t\tcontracts[contractId].clientFeedback = feedback\n\t} else if contract.receiver == caller.String() {\n\t\tcontracts[contractId].sellerFeedback = feedback\n\t} else {\n\t\tpanic(\"only contract participants can leave feedback\")\n\t}\n}\n\nfunc GetContracts(startAfter, limit uint64) []Contract {\n\tmax := uint64(len(contracts))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn contracts[startAfter:max]\n}\n\nfunc RenderConfig() string {\n\treturn fmt.Sprintf(`{\n\t\t\"daoAdmin\": %s\n}`, config.daoAdmin)\n}\n\nfunc RenderContract(contractId uint64) string {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tc := contracts[contractId]\n\treturn fmt.Sprintf(`{\n\t\t\"id\": %d,\n\t\t\"sender\": \"%s\",\n\t\t\"receiver\": \"%s\",\n\t\t\"escrowToken\": \"%s\",\n\t\t\"escrowAmount\": %d,\n\t\t\"status\": %d,\n\t\t\"expireAt\": %d\n}`, c.id, c.sender, c.receiver, c.escrowToken, c.escrowAmount, c.status, c.expireAt)\n}\n\nfunc RenderContracts(startAfter uint64, limit uint64) string {\n\tcontracts := GetContracts(startAfter, limit)\n\trendered := \"[\"\n\tfor index, proposal := range contracts {\n\t\trendered += RenderContract(proposal.daoId, proposal.id)\n\t\tif index != len(contracts)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"wTcnTyDXYFazwhu/plYpfGQaD3+UfGA5A1DK70a+CxNm8YY8eQFE8+KWCyPVLUKuNM84+zDljiWy8Aua+UpRdg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"escrow","Path":"gno.land/r/demo/escrow_01","Files":[{"Name":"escrow.gno","Body":"package escrow\n\nimport (\n\tfmt \"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/foo20\"\n\t\"gno.land/r/demo/users\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Config struct {\n\tdaoAdmin string\n}\n\ntype ContractStatus uint32\n\nconst (\n\tCREATED   ContractStatus = 1\n\tACCEPTED  ContractStatus = 2\n\tCANCELED  ContractStatus = 3\n\tPAUSED    ContractStatus = 4\n\tCOMPLETED ContractStatus = 5\n)\n\ntype Contract struct {\n\tid             uint64\n\tsender         string\n\treceiver       string\n\tescrowToken    string // grc20 token\n\tescrowAmount   uint64\n\tstatus         ContractStatus\n\texpireAt       uint64\n\tclientFeedback string\n\tsellerFeedback string\n}\n\n// GNODAO STATE\nvar config Config\nvar contracts []Contract\n\n// GNODAO FUNCTIONS\nfunc UpdateConfig(daoAdmin string) {\n\tif daoAdmin == \"\" {\n\t\tconfig.daoAdmin = daoAdmin\n\t\treturn\n\t}\n\tcaller := std.GetOrigCaller()\n\tif config.daoAdmin != caller.String() {\n\t\tpanic(\"not allowed to update daoAdmin\")\n\t}\n\n\tconfig.daoAdmin = daoAdmin\n}\n\nfunc CreateContract(\n\treceiver string,\n\tescrowToken string, // grc20 token\n\tescrowAmount uint64,\n\tduration uint64,\n) {\n\tcaller := std.GetOrigCaller()\n\tif duration == 0 {\n\t\tpanic(\"invalid duration\")\n\t}\n\tif escrowToken == \"\" {\n\t\tpanic(\"invalid escrow token\")\n\t}\n\tif escrowAmount == 0 {\n\t\tpanic(\"invalid escrow amount\")\n\t}\n\n\tcontractId := uint64(len(contracts))\n\tcontracts = append(contracts, Contract{\n\t\tid:           contractId,\n\t\tsender:       caller.String(),\n\t\treceiver:     receiver,\n\t\tescrowToken:  escrowToken,\n\t\tescrowAmount: escrowAmount,\n\t\tstatus:       CREATED,\n\t\texpireAt:     uint64(time.Now().Unix()) + duration,\n\t})\n\tfoo20.TransferFrom(\n\t\tusers.AddressOrName(caller.String()),\n\t\tusers.AddressOrName(config.daoAdmin),\n\t\tescrowAmount)\n}\n\nfunc CancelContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != CREATED {\n\t\tpanic(\"contract can only be cancelled at CREATED status\")\n\t}\n\n\tif contract.sender != caller.String() {\n\t\tpanic(\"not authorized to cancel the contract\")\n\t}\n\n\tcontracts[contractId].status = CANCELED\n\n\t// return grc20 tokens back to sender\n\t// TODO: resolve caller problem\n\tfoo20.Transfer(sender, contract.escrowAmount)\n}\n\nfunc AcceptContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != CREATED {\n\t\tpanic(\"contract can only be accepted at CREATED status\")\n\t}\n\n\tif contract.expireAt \u003c time.Now().Unix() {\n\t\tpanic(\"contract already expired\")\n\t}\n\n\tif contract.receiver != caller.String() {\n\t\tpanic(\"only associated receiver is allowed to accept\")\n\t}\n\tcontracts[contractId].status = ACCEPTED\n}\n\nfunc PauseContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != ACCEPTED {\n\t\tpanic(\"contract can only be paused at ACCEPTED status\")\n\t}\n\n\tif contract.sender != caller.String() \u0026\u0026 contract.receiver != caller.String() {\n\t\tpanic(\"only contract sender or receiver can pause\")\n\t}\n\tcontracts[contractId].status = PAUSED\n}\n\nfunc CompleteContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != ACCEPTED {\n\t\tpanic(\"contract can only be completed at ACCEPTED status\")\n\t}\n\n\tif contract.sender != caller.String() {\n\t\tpanic(\"only contract sender can complete\")\n\t}\n\n\t// send tokens to receiver\n\t// TODO: resolve caller problem\n\tfoo20.Transfer(receiver, contract.escrowAmount)\n\tcontracts[contractId].status = COMPLETED\n}\n\nfunc CompleteContractByDAO(contractId uint64, sellerAmount uint64) {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != PAUSED {\n\t\tpanic(\"contract can only be processed by DAO at PAUSED status\")\n\t}\n\n\tif config.daoAdmin != caller.String() {\n\t\tpanic(\"only dao admin is allowed for this operation\")\n\t}\n\n\tclientAmount := contract.escrowAmount - sellerAmount\n\tcontracts[contractId].status = COMPLETED\n\n\t// send tokens for client and seller\n\t// TODO: resolve caller problem\n\tfoo20.Transfer(contract.receiver, sellerAmount)\n\tfoo20.Transfer(contract.sender, clientAmount)\n}\n\nfunc GiveFeedback(contractId uint64, feedback string) {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != COMPLETED {\n\t\tpanic(\"feedback can only be given after complete\")\n\t}\n\n\tif contract.sender == caller.String() {\n\t\tcontracts[contractId].clientFeedback = feedback\n\t} else if contract.receiver == caller.String() {\n\t\tcontracts[contractId].sellerFeedback = feedback\n\t} else {\n\t\tpanic(\"only contract participants can leave feedback\")\n\t}\n}\n\nfunc GetContracts(startAfter, limit uint64) []Contract {\n\tmax := uint64(len(contracts))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn contracts[startAfter:max]\n}\n\nfunc RenderConfig() string {\n\treturn fmt.Sprintf(`{\n\t\t\"daoAdmin\": %s\n}`, config.daoAdmin)\n}\n\nfunc RenderContract(contractId uint64) string {\n\tcaller := std.GetOrigCaller()\n\tif contractId \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tc := contracts[contractId]\n\treturn fmt.Sprintf(`{\n\t\t\"id\": %d,\n\t\t\"sender\": \"%s\",\n\t\t\"receiver\": \"%s\",\n\t\t\"escrowToken\": \"%s\",\n\t\t\"escrowAmount\": %d,\n\t\t\"status\": %d,\n\t\t\"expireAt\": %d\n}`, c.id, c.sender, c.receiver, c.escrowToken, c.escrowAmount, c.status, c.expireAt)\n}\n\nfunc RenderContracts(startAfter uint64, limit uint64) string {\n\tcontracts := GetContracts(startAfter, limit)\n\trendered := \"[\"\n\tfor index, proposal := range contracts {\n\t\trendered += RenderContract(proposal.daoId, proposal.id)\n\t\tif index != len(contracts)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"DtSTwIyDyN1QUVmrOYexjXF5DbNBBEzu+lTDa7G7QO925KRlKR0IXCYpI/jnhvAS65GDe0+qjjoJX/a5TeckXA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"escrow","Path":"gno.land/r/demo/escrow_01","Files":[{"Name":"escrow.gno","Body":"package escrow\n\nimport (\n\tfmt \"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/foo20\"\n\t\"gno.land/r/demo/users\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Config struct {\n\tdaoAdmin string\n}\n\ntype ContractStatus uint32\n\nconst (\n\tCREATED   ContractStatus = 1\n\tACCEPTED  ContractStatus = 2\n\tCANCELED  ContractStatus = 3\n\tPAUSED    ContractStatus = 4\n\tCOMPLETED ContractStatus = 5\n)\n\ntype Contract struct {\n\tid             uint64\n\tsender         string\n\treceiver       string\n\tescrowToken    string // grc20 token\n\tescrowAmount   uint64\n\tstatus         ContractStatus\n\texpireAt       uint64\n\tclientFeedback string\n\tsellerFeedback string\n}\n\n// GNODAO STATE\nvar config Config\nvar contracts []Contract\n\n// GNODAO FUNCTIONS\nfunc UpdateConfig(daoAdmin string) {\n\tif daoAdmin == \"\" {\n\t\tconfig.daoAdmin = daoAdmin\n\t\treturn\n\t}\n\tcaller := std.GetOrigCaller()\n\tif config.daoAdmin != caller.String() {\n\t\tpanic(\"not allowed to update daoAdmin\")\n\t}\n\n\tconfig.daoAdmin = daoAdmin\n}\n\nfunc CreateContract(\n\treceiver string,\n\tescrowToken string, // grc20 token\n\tescrowAmount uint64,\n\tduration uint64,\n) {\n\tcaller := std.GetOrigCaller()\n\tif duration == 0 {\n\t\tpanic(\"invalid duration\")\n\t}\n\tif escrowToken == \"\" {\n\t\tpanic(\"invalid escrow token\")\n\t}\n\tif escrowAmount == 0 {\n\t\tpanic(\"invalid escrow amount\")\n\t}\n\n\tcontractId := uint64(len(contracts))\n\tcontracts = append(contracts, Contract{\n\t\tid:           contractId,\n\t\tsender:       caller.String(),\n\t\treceiver:     receiver,\n\t\tescrowToken:  escrowToken,\n\t\tescrowAmount: escrowAmount,\n\t\tstatus:       CREATED,\n\t\texpireAt:     uint64(time.Now().Unix()) + duration,\n\t})\n\tfoo20.TransferFrom(\n\t\tusers.AddressOrName(caller.String()),\n\t\tusers.AddressOrName(config.daoAdmin),\n\t\tescrowAmount)\n}\n\nfunc CancelContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != CREATED {\n\t\tpanic(\"contract can only be cancelled at CREATED status\")\n\t}\n\n\tif contract.sender != caller.String() {\n\t\tpanic(\"not authorized to cancel the contract\")\n\t}\n\n\tcontracts[contractId].status = CANCELED\n\n\t// return grc20 tokens back to sender\n\t// TODO: resolve caller problem\n\tfoo20.Transfer(\n\t\tusers.AddressOrName(contract.sender),\n\t\tcontract.escrowAmount)\n}\n\nfunc AcceptContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != CREATED {\n\t\tpanic(\"contract can only be accepted at CREATED status\")\n\t}\n\n\tif contract.expireAt \u003c time.Now().Unix() {\n\t\tpanic(\"contract already expired\")\n\t}\n\n\tif contract.receiver != caller.String() {\n\t\tpanic(\"only associated receiver is allowed to accept\")\n\t}\n\tcontracts[contractId].status = ACCEPTED\n}\n\nfunc PauseContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != ACCEPTED {\n\t\tpanic(\"contract can only be paused at ACCEPTED status\")\n\t}\n\n\tif contract.sender != caller.String() \u0026\u0026 contract.receiver != caller.String() {\n\t\tpanic(\"only contract sender or receiver can pause\")\n\t}\n\tcontracts[contractId].status = PAUSED\n}\n\nfunc CompleteContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != ACCEPTED {\n\t\tpanic(\"contract can only be completed at ACCEPTED status\")\n\t}\n\n\tif contract.sender != caller.String() {\n\t\tpanic(\"only contract sender can complete\")\n\t}\n\n\t// send tokens to receiver\n\t// TODO: resolve caller problem\n\tfoo20.Transfer(\n\t\tusers.AddressOrName(contract.receiver),\n\t\tcontract.escrowAmount)\n\tcontracts[contractId].status = COMPLETED\n}\n\nfunc CompleteContractByDAO(contractId uint64, sellerAmount uint64) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != PAUSED {\n\t\tpanic(\"contract can only be processed by DAO at PAUSED status\")\n\t}\n\n\tif config.daoAdmin != caller.String() {\n\t\tpanic(\"only dao admin is allowed for this operation\")\n\t}\n\n\tclientAmount := contract.escrowAmount - sellerAmount\n\tcontracts[contractId].status = COMPLETED\n\n\t// send tokens for client and seller\n\t// TODO: resolve caller problem\n\tfoo20.Transfer(\n\t\tusers.AddressOrName(contract.receiver),\n\t\tsellerAmount)\n\tfoo20.Transfer(\n\t\tusers.AddressOrName(contract.sender),\n\t\tclientAmount)\n}\n\nfunc GiveFeedback(contractId uint64, feedback string) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != COMPLETED {\n\t\tpanic(\"feedback can only be given after complete\")\n\t}\n\n\tif contract.sender == caller.String() {\n\t\tcontracts[contractId].clientFeedback = feedback\n\t} else if contract.receiver == caller.String() {\n\t\tcontracts[contractId].sellerFeedback = feedback\n\t} else {\n\t\tpanic(\"only contract participants can leave feedback\")\n\t}\n}\n\nfunc GetContracts(startAfter, limit uint64) []Contract {\n\tmax := uint64(len(contracts))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn contracts[startAfter:max]\n}\n\nfunc RenderConfig() string {\n\treturn fmt.Sprintf(`{\n\t\t\"daoAdmin\": %s\n}`, config.daoAdmin)\n}\n\nfunc RenderContract(contractId uint64) string {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tc := contracts[contractId]\n\treturn fmt.Sprintf(`{\n\t\t\"id\": %d,\n\t\t\"sender\": \"%s\",\n\t\t\"receiver\": \"%s\",\n\t\t\"escrowToken\": \"%s\",\n\t\t\"escrowAmount\": %d,\n\t\t\"status\": %d,\n\t\t\"expireAt\": %d\n}`, c.id, c.sender, c.receiver, c.escrowToken, c.escrowAmount, c.status, c.expireAt)\n}\n\nfunc RenderContracts(startAfter uint64, limit uint64) string {\n\tcontracts := GetContracts(startAfter, limit)\n\trendered := \"[\"\n\tfor index, proposal := range contracts {\n\t\trendered += RenderContract(proposal.daoId, proposal.id)\n\t\tif index != len(contracts)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"YrBZmsj803h+aGwSbf/6jUDlVgPNTo43+k+qFbG/O9gmaRwu9j972D+2huWaJ1Feq4en4L40ooSb0VRCrxKrEg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"escrow","Path":"gno.land/r/demo/escrow_01","Files":[{"Name":"escrow.gno","Body":"package escrow\n\nimport (\n\tfmt \"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/foo20\"\n\t\"gno.land/r/demo/users\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Config struct {\n\tdaoAdmin string\n}\n\ntype ContractStatus uint32\n\nconst (\n\tCREATED   ContractStatus = 1\n\tACCEPTED  ContractStatus = 2\n\tCANCELED  ContractStatus = 3\n\tPAUSED    ContractStatus = 4\n\tCOMPLETED ContractStatus = 5\n)\n\ntype Contract struct {\n\tid             uint64\n\tsender         string\n\treceiver       string\n\tescrowToken    string // grc20 token\n\tescrowAmount   uint64\n\tstatus         ContractStatus\n\texpireAt       uint64\n\tclientFeedback string\n\tsellerFeedback string\n}\n\n// GNODAO STATE\nvar config Config\nvar contracts []Contract\n\n// GNODAO FUNCTIONS\nfunc UpdateConfig(daoAdmin string) {\n\tif daoAdmin == \"\" {\n\t\tconfig.daoAdmin = daoAdmin\n\t\treturn\n\t}\n\tcaller := std.GetOrigCaller()\n\tif config.daoAdmin != caller.String() {\n\t\tpanic(\"not allowed to update daoAdmin\")\n\t}\n\n\tconfig.daoAdmin = daoAdmin\n}\n\nfunc CreateContract(\n\treceiver string,\n\tescrowToken string, // grc20 token\n\tescrowAmount uint64,\n\tduration uint64,\n) {\n\tcaller := std.GetOrigCaller()\n\tif duration == 0 {\n\t\tpanic(\"invalid duration\")\n\t}\n\tif escrowToken == \"\" {\n\t\tpanic(\"invalid escrow token\")\n\t}\n\tif escrowAmount == 0 {\n\t\tpanic(\"invalid escrow amount\")\n\t}\n\n\tcontractId := uint64(len(contracts))\n\tcontracts = append(contracts, Contract{\n\t\tid:           contractId,\n\t\tsender:       caller.String(),\n\t\treceiver:     receiver,\n\t\tescrowToken:  escrowToken,\n\t\tescrowAmount: escrowAmount,\n\t\tstatus:       CREATED,\n\t\texpireAt:     uint64(time.Now().Unix()) + duration,\n\t})\n\tfoo20.TransferFrom(\n\t\tusers.AddressOrName(caller.String()),\n\t\tusers.AddressOrName(config.daoAdmin),\n\t\tescrowAmount)\n}\n\nfunc CancelContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != CREATED {\n\t\tpanic(\"contract can only be cancelled at CREATED status\")\n\t}\n\n\tif contract.sender != caller.String() {\n\t\tpanic(\"not authorized to cancel the contract\")\n\t}\n\n\tcontracts[contractId].status = CANCELED\n\n\t// return grc20 tokens back to sender\n\t// TODO: resolve caller problem\n\tfoo20.Transfer(\n\t\tusers.AddressOrName(contract.sender),\n\t\tcontract.escrowAmount)\n}\n\nfunc AcceptContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != CREATED {\n\t\tpanic(\"contract can only be accepted at CREATED status\")\n\t}\n\n\tif contract.expireAt \u003c uint64(time.Now().Unix()) {\n\t\tpanic(\"contract already expired\")\n\t}\n\n\tif contract.receiver != caller.String() {\n\t\tpanic(\"only associated receiver is allowed to accept\")\n\t}\n\tcontracts[contractId].status = ACCEPTED\n}\n\nfunc PauseContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != ACCEPTED {\n\t\tpanic(\"contract can only be paused at ACCEPTED status\")\n\t}\n\n\tif contract.sender != caller.String() \u0026\u0026 contract.receiver != caller.String() {\n\t\tpanic(\"only contract sender or receiver can pause\")\n\t}\n\tcontracts[contractId].status = PAUSED\n}\n\nfunc CompleteContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != ACCEPTED {\n\t\tpanic(\"contract can only be completed at ACCEPTED status\")\n\t}\n\n\tif contract.sender != caller.String() {\n\t\tpanic(\"only contract sender can complete\")\n\t}\n\n\t// send tokens to receiver\n\t// TODO: resolve caller problem\n\tfoo20.Transfer(\n\t\tusers.AddressOrName(contract.receiver),\n\t\tcontract.escrowAmount)\n\tcontracts[contractId].status = COMPLETED\n}\n\nfunc CompleteContractByDAO(contractId uint64, sellerAmount uint64) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != PAUSED {\n\t\tpanic(\"contract can only be processed by DAO at PAUSED status\")\n\t}\n\n\tif config.daoAdmin != caller.String() {\n\t\tpanic(\"only dao admin is allowed for this operation\")\n\t}\n\n\tclientAmount := contract.escrowAmount - sellerAmount\n\tcontracts[contractId].status = COMPLETED\n\n\t// send tokens for client and seller\n\t// TODO: resolve caller problem\n\tfoo20.Transfer(\n\t\tusers.AddressOrName(contract.receiver),\n\t\tsellerAmount)\n\tfoo20.Transfer(\n\t\tusers.AddressOrName(contract.sender),\n\t\tclientAmount)\n}\n\nfunc GiveFeedback(contractId uint64, feedback string) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != COMPLETED {\n\t\tpanic(\"feedback can only be given after complete\")\n\t}\n\n\tif contract.sender == caller.String() {\n\t\tcontracts[contractId].clientFeedback = feedback\n\t} else if contract.receiver == caller.String() {\n\t\tcontracts[contractId].sellerFeedback = feedback\n\t} else {\n\t\tpanic(\"only contract participants can leave feedback\")\n\t}\n}\n\nfunc GetContracts(startAfter, limit uint64) []Contract {\n\tmax := uint64(len(contracts))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn contracts[startAfter:max]\n}\n\nfunc RenderConfig() string {\n\treturn fmt.Sprintf(`{\n\t\t\"daoAdmin\": %s\n}`, config.daoAdmin)\n}\n\nfunc RenderContract(contractId uint64) string {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tc := contracts[contractId]\n\treturn fmt.Sprintf(`{\n\t\t\"id\": %d,\n\t\t\"sender\": \"%s\",\n\t\t\"receiver\": \"%s\",\n\t\t\"escrowToken\": \"%s\",\n\t\t\"escrowAmount\": %d,\n\t\t\"status\": %d,\n\t\t\"expireAt\": %d\n}`, c.id, c.sender, c.receiver, c.escrowToken, c.escrowAmount, c.status, c.expireAt)\n}\n\nfunc RenderContracts(startAfter uint64, limit uint64) string {\n\tcontracts := GetContracts(startAfter, limit)\n\trendered := \"[\"\n\tfor index, proposal := range contracts {\n\t\trendered += RenderContract(proposal.daoId, proposal.id)\n\t\tif index != len(contracts)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"fmE9LBjJHmwW0APScbznW3GoFaJOcBn09mdrZwjrYHBWCyRUNw37tIgg2YE5CZcDSZ3/m3p5x+azQ0j1e8HqfQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"escrow","Path":"gno.land/r/demo/escrow_01","Files":[{"Name":"escrow.gno","Body":"package escrow\n\nimport (\n\tfmt \"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/foo20\"\n\t\"gno.land/r/demo/users\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Config struct {\n\tdaoAdmin string\n}\n\ntype ContractStatus uint32\n\nconst (\n\tCREATED   ContractStatus = 1\n\tACCEPTED  ContractStatus = 2\n\tCANCELED  ContractStatus = 3\n\tPAUSED    ContractStatus = 4\n\tCOMPLETED ContractStatus = 5\n)\n\ntype Contract struct {\n\tid             uint64\n\tsender         string\n\treceiver       string\n\tescrowToken    string // grc20 token\n\tescrowAmount   uint64\n\tstatus         ContractStatus\n\texpireAt       uint64\n\tclientFeedback string\n\tsellerFeedback string\n}\n\n// GNODAO STATE\nvar config Config\nvar contracts []Contract\n\n// GNODAO FUNCTIONS\nfunc UpdateConfig(daoAdmin string) {\n\tif daoAdmin == \"\" {\n\t\tconfig.daoAdmin = daoAdmin\n\t\treturn\n\t}\n\tcaller := std.GetOrigCaller()\n\tif config.daoAdmin != caller.String() {\n\t\tpanic(\"not allowed to update daoAdmin\")\n\t}\n\n\tconfig.daoAdmin = daoAdmin\n}\n\nfunc CreateContract(\n\treceiver string,\n\tescrowToken string, // grc20 token\n\tescrowAmount uint64,\n\tduration uint64,\n) {\n\tcaller := std.GetOrigCaller()\n\tif duration == 0 {\n\t\tpanic(\"invalid duration\")\n\t}\n\tif escrowToken == \"\" {\n\t\tpanic(\"invalid escrow token\")\n\t}\n\tif escrowAmount == 0 {\n\t\tpanic(\"invalid escrow amount\")\n\t}\n\n\tcontractId := uint64(len(contracts))\n\tcontracts = append(contracts, Contract{\n\t\tid:           contractId,\n\t\tsender:       caller.String(),\n\t\treceiver:     receiver,\n\t\tescrowToken:  escrowToken,\n\t\tescrowAmount: escrowAmount,\n\t\tstatus:       CREATED,\n\t\texpireAt:     uint64(time.Now().Unix()) + duration,\n\t})\n\tfoo20.TransferFrom(\n\t\tusers.AddressOrName(caller.String()),\n\t\tusers.AddressOrName(config.daoAdmin),\n\t\tescrowAmount)\n}\n\nfunc CancelContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != CREATED {\n\t\tpanic(\"contract can only be cancelled at CREATED status\")\n\t}\n\n\tif contract.sender != caller.String() {\n\t\tpanic(\"not authorized to cancel the contract\")\n\t}\n\n\tcontracts[contractId].status = CANCELED\n\n\t// return grc20 tokens back to sender\n\t// TODO: resolve caller problem\n\tfoo20.Transfer(\n\t\tusers.AddressOrName(contract.sender),\n\t\tcontract.escrowAmount)\n}\n\nfunc AcceptContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != CREATED {\n\t\tpanic(\"contract can only be accepted at CREATED status\")\n\t}\n\n\tif contract.expireAt \u003c uint64(time.Now().Unix()) {\n\t\tpanic(\"contract already expired\")\n\t}\n\n\tif contract.receiver != caller.String() {\n\t\tpanic(\"only associated receiver is allowed to accept\")\n\t}\n\tcontracts[contractId].status = ACCEPTED\n}\n\nfunc PauseContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != ACCEPTED {\n\t\tpanic(\"contract can only be paused at ACCEPTED status\")\n\t}\n\n\tif contract.sender != caller.String() \u0026\u0026 contract.receiver != caller.String() {\n\t\tpanic(\"only contract sender or receiver can pause\")\n\t}\n\tcontracts[contractId].status = PAUSED\n}\n\nfunc CompleteContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != ACCEPTED {\n\t\tpanic(\"contract can only be completed at ACCEPTED status\")\n\t}\n\n\tif contract.sender != caller.String() {\n\t\tpanic(\"only contract sender can complete\")\n\t}\n\n\t// send tokens to receiver\n\t// TODO: resolve caller problem\n\tfoo20.Transfer(\n\t\tusers.AddressOrName(contract.receiver),\n\t\tcontract.escrowAmount)\n\tcontracts[contractId].status = COMPLETED\n}\n\nfunc CompleteContractByDAO(contractId uint64, sellerAmount uint64) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != PAUSED {\n\t\tpanic(\"contract can only be processed by DAO at PAUSED status\")\n\t}\n\n\tif config.daoAdmin != caller.String() {\n\t\tpanic(\"only dao admin is allowed for this operation\")\n\t}\n\n\tclientAmount := contract.escrowAmount - sellerAmount\n\tcontracts[contractId].status = COMPLETED\n\n\t// send tokens for client and seller\n\t// TODO: resolve caller problem\n\tfoo20.Transfer(\n\t\tusers.AddressOrName(contract.receiver),\n\t\tsellerAmount)\n\tfoo20.Transfer(\n\t\tusers.AddressOrName(contract.sender),\n\t\tclientAmount)\n}\n\nfunc GiveFeedback(contractId uint64, feedback string) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != COMPLETED {\n\t\tpanic(\"feedback can only be given after complete\")\n\t}\n\n\tif contract.sender == caller.String() {\n\t\tcontracts[contractId].clientFeedback = feedback\n\t} else if contract.receiver == caller.String() {\n\t\tcontracts[contractId].sellerFeedback = feedback\n\t} else {\n\t\tpanic(\"only contract participants can leave feedback\")\n\t}\n}\n\nfunc GetContracts(startAfter, limit uint64) []Contract {\n\tmax := uint64(len(contracts))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn contracts[startAfter:max]\n}\n\nfunc RenderConfig() string {\n\treturn fmt.Sprintf(`{\n\t\t\"daoAdmin\": %s\n}`, config.daoAdmin)\n}\n\nfunc RenderContract(contractId uint64) string {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tc := contracts[contractId]\n\treturn fmt.Sprintf(`{\n\t\t\"id\": %d,\n\t\t\"sender\": \"%s\",\n\t\t\"receiver\": \"%s\",\n\t\t\"escrowToken\": \"%s\",\n\t\t\"escrowAmount\": %d,\n\t\t\"status\": %d,\n\t\t\"expireAt\": %d\n}`, c.id, c.sender, c.receiver, c.escrowToken, c.escrowAmount, c.status, c.expireAt)\n}\n\nfunc RenderContracts(startAfter uint64, limit uint64) string {\n\tcontracts := GetContracts(startAfter, limit)\n\trendered := \"[\"\n\tfor index, contract := range contracts {\n\t\trendered += RenderContract(contract.id)\n\t\tif index != len(contracts)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"OLGqtzMFpC0y5OCAkd3jUlZcaeXUG6kmNHtJvMe7OrNpwHVyrGvK73O/zK0l5nH5YYL0Df65cCTL7V5eyD+rVQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","send":"14001000ugnot","pkg_path":"gno.land/r/disperze/register","func":"Register","args":["atom.gno","g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al7LV/X++mUIljzenR1OaxKfue7hfo6UsvOhGCdDtiid"},"signature":"LZkooUZ37UCv2e8yEI9crkOwL1b8bByWn7VaZTh9uD5Nsa2L5fpEeEOZ/PsnToWKhbC2jdwyB96dFE7jpDyILA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"12000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"nPEub2u3R3e0JoDdG0EbGdPUmG5LAh7xUhbDvBmKZVNnbuw0W6a4SnFEHEnI1MlO8+otWr4LB59wfKT7f90KLQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","12"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"RakUKiH5gb4MLV9SOiXjBZEMexNpW4wT7QJ5QtwhJkMYdrbybEqKIIG55epO0pOvmtMhUBYoCAqzWB8ND2ENDQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","12"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"z/xsuWBf23IyDmDkynvNi3jVWzkzVlqLejX53GZp9volvDcI+O0iKbVoZUQyGIPdh61wRKmMF5WhgDltfJh8wA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"2500ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"zlpnjk1czEKkMbsA1KD/dAT73N2WRHs4JSbGNIZqtiRHN7pQqmOrW2R2cr8+wHWbiDINftqWKi8/j7oW8DBG6Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","15"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"M3oy1Xk/kDMgZDGK6RBIf/uhkv85KX7pSaf3TdXXr2M/RFxEqF4107OBAPdcivPo4v8P5Vepm+aC+7oe9elOVA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"haveaniceday","Path":"gno.land/r/demo/haveaniceday","Files":[{"Name":"haveaniceday.gno","Body":"package haveaniceday\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"1eGq3R4Zj05rvdhCpvOBsBkfZJ04fLP+BqBKKOUiwCtTmhtikNTIAb7GefnJPw06Nni3HtzF+das16zOiyQyfA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["4211","","HI"]},{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["4211","","Hello11"]},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"50000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"12gSwh8cjcG/A39x2ZdxsqlWvGjQk0OmoiwLaLIHQclA+gqKLbLxDhdLLf+RmYTT+rfEj8YoKuQVLGA/v8lE6A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","15"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"g2KTIjfAu1t104NjKUYWowie7C+H964ZzoQC/BGegoovEMb+6jSRjqu1qHhVYvZ2SrCLluiWZxuanTBQ9G7nmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","","HI11"]},{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","","Hello11"]},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"50000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"bOulmMuhCb8hqS3vz6/XjggirAEViytFcMA3Z4rag7wfIf3zWz8ZKIzrSwaiVu3Dz8PQIen+pIoGR9b68IZc+w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g19lg9unc822k0ng9x3a2a4pgs9tm5tvne4cy4ju","amount":"12000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"HT9i8V+oC1IcdpIIVB7gu4XfFeyhl6f6kiZ3uKFPyacT6lZxH2sXU4QrHS5ybY6sDLf51NREZ/eWQ1u7TRpdbg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15wwgankjr4t0wt9zs8ck4mdywy2yuwaspger63","amount":"10000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"C5PEPXmabdch6kIwNKmJZ0l8JLsNmt3EGUa7Z/5YReNR08o4SgDu0xRcjqsxM4zYRaFpzu/cm9hs5SD6c3lzJg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1v0v7nsc46errsdhynmhu8e7e2g7l76n2e3kz64","10000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"xeOQ0v4nFto9jQz5Gx5LlSe7wSDFNEhdilHHGa0gHtY3uJDx4tZriubYCWcrtnghX0dePDEoDS10AbEd7RXKUQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"123000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"pR+rb44Y8xzmD2qBWryVvWju9n64kGaDVOshy69P878Js88Kbw4RWCTvYPXUjJZG5cyeOB6N0vaDYSEqQyEuBg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"432000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"egRu9Iv4vhjSZptnX6WqLr87JS+4aDruCL120S8guVovnGzS6fllROyASKdLqa/mHWpBD5vnLyVx9p8oWb8eww=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1ycyclyqnc3msyfdjl94xrlqtjy6fp9fzep0ukn","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"2MpwfkZTHRPi3P0ppiFxyyPpKiSOodYRWvHFMqx4Kb5zunLMHqbZBNJC1GpYRVvy87RRzCe5OgmbVb1y/o7bCQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g14supzhx0v5sza947sdh4x74wnws9xvcfwdecef","amount":"2000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"vo+pS+g+gXjJ6xlhuZFm0Kzlea12r6F2+TpYGwMnBo5vJFtfgFSDGefs8jQFA+28qI5oeu1R/CAVBMaemQ8urQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1apl4u79zhexrxcf4h48y5qlyjncskdlrxtz6vg","4"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"kyeFDLwZvL08xZ1WOKokWbE3Fk6QKz7NcVxhrZdTaUwXG5EO+VOyZal4v6d3jy/zXb6bNonbYwtiCwNvoIlYjA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1dp9dk58hj3dsyrfh9nujrd548g8rnlea82p6ew","10"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"9EC0xZEzOe/mO/HKCfwZDeJ+lGBgVx/x5A1F9kr6XL0kwQ+t+QvNZQRuNewBAGkKlV6dq4emzIFtkJ59Gt0dEA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1apl4u79zhexrxcf4h48y5qlyjncskdlrxtz6vg","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"vUnDBG/uhTsnzgbX1hY3iIAgRtWusdXSJ7pY7o8okh1kCKfsMpamswDolHozfWkJbeTxMyM/VlK2uouz/pTnnQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"2500000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Z6fWb5g9kqTAL9bEayIkTzH7OY5ChMmxBqu8p7syePBx8LwpuN84RsWt/UohcWzAAdbEabxkA7rRXdkmsuk1sg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","15"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"7R7FoMSr65Xed+24RUCyaTKA5KvS9t3+Jux2R4XHi8pSRTlzNT1PbfCFZxD9BpeS43YPg/uDhpNcT7fpt7qw7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"gggg","Path":"gno.land/r/demo/gggg","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"MXW/HCFUNor+27bjnbY3WKlzgrrrtr0KjtRCpIXdA25Fmp7jC2Rlopxo1JA063Y1mLBtCCykijwcyhH8kvUIww=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"gggg412","Path":"gno.land/r/demo/gggg412","Files":[{"Name":"gggg412.gno","Body":"package gggg412\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"aJ6pVlBOawbhf2xIIayBr5FdhQ18rny4t6LrJNW3Xh9GtuhbD69RMwFgklutMTQOHZDBsxe//LLmu33IiY4qzQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","747"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"wdGMca6UP35K06pG8JJN1+ST0/o+Adpuo0f5LoucMaFxVe697Y/H7wSPaRR2yAw0JE18kdsJWcjMkiTGJMDJDg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"100ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"I3dMaU/nr1lfoTG86aEHLDWPpQm6CglCneFe71peEwcIPEiYrDS+nA4Zvmg5nEqU6peDMmaM3LokFY6lsFS/UA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","","HI1123"]},{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","","Hello1123"]},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"500ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"RNVsg3rnIxKWL1JS16DA3t7NnxaXwvaECv48iJHBf6InrxcjP7BUXM7h8xa1+ivWi0P25lpW831zdl/KxvJkLQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"gggg4412","Path":"gno.land/r/demo/gggg4412","Files":[{"Name":"gggg4412.gno","Body":"package gggg4412\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"ObHnggLjYFagZpUvMS/Qgbt4Ybofed1LA8CmWgAhK/RbevcwaPmwAediJgS8l6vw5EfK9AW6g2yVoVnU+Ut6+g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","15"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"ZI5TEpqSoDjR8nviOAU5rlw3/xt2dnJJDI7DkwjSyXYebEgbjL7bNgiq/AeQz1QZ3jO7SEs1PiMNavFmawyBQg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","15"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"wp4PveYUttnLBvqKHBKDO6AZvJh94MaawTl2/N3IIudkOkGjezpZ6D+yGXPmf1aPL82gHRhQ9K8dRT2wgjjS3A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","amount":"12ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"l4t/siEEYwxJ8G5Wg256V9wy5i4HSI+QOxhNpNUoARhYXm33OBbvmy/V9sTqGhYio8Nwcov/ss1R1yKG7DwrbQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"10ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"MuxzxAdCXWsSLtWjlftpYnhInKTANeVdw7yvqNUXt6RPCXFT9EePOOXH8MHXKeIyD9T3vySbodbZfnhUlAcoEg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tonga","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","15"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"icsqbdRSyuN1u+DXWnIgAAYfic2B71P2Yc90HhquHAApOii+C6wCXR48vRK2x/1khEQTm3bzuUBMLKWE1+SYXw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tonga","func":"TTransfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","15"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"KEpOgiYnR7hH2+ShBLS+k/N7xMRADTiDbXvNsOYWS797vi0S4473FrgshxAHnt4L3xlz4vR+slWrFr2gI0EiJg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"asdf","func":"asdf","args":["asdf"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"HVmPb8IRObTbGW+keMQUFy0aacgYBjOWYP9RlwTS6mE41wzcFTiK7Ioz70U0UtNN6en5SPUweOAtWSwbNVv+Mg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"491ataa"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"YT2rYl6F0bAFoZJJksrbBMaHq6YvCCnBr6tGyA36nlF3cm+hzghJ6oZuGZW2X7IsbG3sSIYiesIitWEUPve3tA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1asdfasdfadf4578"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"BjcSwnahemGLKmXpNaPsxGk7cNkIvW/oC9V/VWDYYDAxfGxEP6lSYdMX2xNHlUP71WOKO7cYdvMdr7ZCVoSuZw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","amount":"123ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"H3EMYeeKKTUZqYFOiCJsWrj5roJmSGekTOF5OcBtIYQKpvweymh9I7LGRvTInEsQUwYernWZMMF7WGaJ/cHWQA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo","func":"TTransfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","15"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"It7oIecJ7EKZ2A8GL3yImmAdjqVq9m5cX4WpJeAGi7Bg4TcPtZxdh88Ohm1L3ICOTZPRXtxBoRVPH/zbDfwlmg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000000000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"Jdui0CBqVUbC3s+R8FbsxbRlS/UZu3cvnIiH7bk0RzI3dt+WORceVEgtxTC/c5oS2ZlJJGv8/4HnCHts3sOP+g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1atom"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"UlR0St/a3ToO5k3DSJRLA/u8V0MmldnoPv9hixFBsSU3uSVQY6mtNOJkrkTKGJnDH0YXT30y8G1N0ssnGJV/8A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"hello0010","Path":"gno.land/r/demo/hello0010","Files":[{"Name":"hello0010.gno","Body":"package hello0010\n\nfunc main() {\n\t// \u0026\u003e_\u003c\n\tprintln(\"STRING\")\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"3+Ff4gVPz1hYeg/x/49bh13G5XRukp8P/7LqyAGy/0kvJ3RbGFUh08krmmPxB8FrG1olH1p85dA2SICuFtTiUQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"hello0010","Path":"gno.land/r/demo/hello0010","Files":[{"Name":"hello0010.gno","Body":""}]},"deposit":""}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"+uiwhRY4Hod7M73IvyfwcyTXRxRwVi0pDvUUbFLR7RM1TiMnhtDAR3pwEYbtapqKUKLKfvHwVChpT/fR/TO24w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"","Path":"gno.land/r/demo/hello0010","Files":[{"Name":"hello0010.gno","Body":""}]},"deposit":""}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"yU5/KhVt/xRUkCv1ahgk3yImypkEkvmRwaTHnSaRDiE7TxLN62OYgj1pFaQ+n7hlC59HHnzPYHpfprX1SGBL5A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"gggg","Path":"gno.land/r/demo/gggg","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"26YEN0nk5Z7J++6THJQwXng04wsQ0WCnIcIZMAZb3Ucr2+JVNkMEXWTL4F+8QUc7bI2AYsQqr/Yx20SErmkplw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"gggg1","Path":"gno.land/r/demo/gggga","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"hPqmY+7fagSAM9yHcNTv6pN/XYWp2azVis3Uoc/AS+Ac0lADHIseFfAACgvyf3oJlUr3Ieow2V9sZPxQRzVSsg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"gggg","Path":"gno.land/r/demo/gggg","Files":[{"Name":"","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"YZfq4B+qaqAbTp5mPWr6NeIGvUFXhW1QLwInGPw07vMMM3+QJB5JK3Ixn/5j5iCiKy9+FoOvTYyzkTM6/5m0Sw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"100000000000000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"YgHhPhBWGLEksCVopEpFn9ujsxESfEXLk6B+9uTQyZFt/ws7a9JG1+elSjmP2HAw+HZbuwD+YOXTNmrDyC1ZgQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","func":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"DyhM4EUf5/B1kM8ufeFdiXzR9jgCx+/OcHfSs2QsZhs9lwTdI3yffhjaocmnh2qRicctERywT3gDZB7LYkb6RA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"a","func":"a","args":["a"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"yAk/dxk4dle/2pMxxbvzp+48Qfc66ZqSKsYXICflFPEE+ABjpjhZYXSDe58VUNnLMUnWJKNRLElEq+PcJzvgRg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","func":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"5ba2NvMswinFYUe41gXsbVz01gEEu32yrzkO0i/Zeysd6/8rw/GT9BP9D9/Q3mkmJrIrSTM6HNSDptdQFeTMaw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"2","func":"1","args":["1"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"bpGGB2s26l3BQgYbo939uRYHNp4HJbiVIEVcunKu+sg4o5Tz4e5wUku015muwiugCurgK11zoXN0TLffp5dt2w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","15"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"aG7rmBvAGxQicLR1Ifvg+NTRh7EehkBKn1V/gyWIw4sibbh901rIFzkV4lsSbIy2SgbRJPsBYwUklkK9qpl+cw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"+7tLfV+486m8pgdFX0dYqMHEdPzU/HcGbVehMFH8SWxiHebC8r2VMKZX1NZL103KdUUG5QYcYCPYxZ8Gn3V8QA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"25ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"CfqTx820LEV68F08E2AXbDpth0qafJQtxVc/fkcNlXV80pAM4FBOqyh3rNjSmrYn0keUNdfySX9OB4Wu5+0u1g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","15"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"lfFkwk9xEzJ7wI0o7SXXM/qLbJnSUSCs4Mreq67o9PJy0hUrn9mjP9oDNV7/4lgUkgfGU+mTTtI74I5FgEtDDQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"gggg","Path":"gno.land/r/demo/gggg","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"czRPnDr8HRZGMGv7kiuEAFiWqorehY3Q1AiFcbbvvihzkcWGFSqp/8O/Op1OMU7gd4E7tsoucXGP0wb7C8s5bg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaagggg","Path":"gno.land/r/demo/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaagggg","Files":[{"Name":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaagggg.gno","Body":"package aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaagggg\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"HqEyXyA6/lEO+4dwQv+9iLFH2aajzFUYZaG1mAvObY4no5Q8+YLtIAjrCjR+K1Z4THMR+RZkLG8EwDiV31eZMg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","","H11I"]},{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","","He11llo"]},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"5ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"2j2lNw7uVqXPOWeT14+zCZgNWcebDDqwGGjClhN0gS4nI0gYgoXCGV8+IugdQkhXjctORX4Qkdnc+kHSC8iTNg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000000000uatom"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"y/oSsRohDVktzN7FhWEfw6R5VKOuTdE6l33Vi9wymLNVPFDmMNDzpqFoquCOkuPfSqMmAetfd7XHB4B2HjlKsw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","func":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"k0l0UYHy7/LinwXeb8/65E4wZtwpi9uPn5pkoOJ0G3krIS05kmwjK22LxfBhyTMleQzQ24yLLBB+NkKRQT6mxQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"24242424","func":"242424","args":["242424242424"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"QKAQzPGrAWUto5/wirHSMqs+KLKmcAdQoiLfr/g8pBwxXiVfrtvwJ4CObPgzVMyBOc8tEgeCtNt522nNAjftKg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"1000000000000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"XXBuvIMxavlFL6wMtQyXWiyUOgijSlxCEi1BL4ZIELguJrynBBUrOJ+XybueBFRtTq+n+Iz6XT/0v/OOhFTdMA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000000000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"7IlN4gU5y4cm14aiXDTdlwCL9QcLwlnkSAtMbPgehQ8/AeygBDRvLKftVrDiqagycuyZg14O6VCn87LmxcMT1g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000000123456ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"tDVoMYD+Lb2K8+FNnnzAUYZrevZNcJKHajSAipi1R6hKlfxgPmVWSMFE6nTvDCJCfFE4J97r9dq4utmIZjQrVA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"100000000000123456ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"tcwropuprl3TKB9RIrWWMwH397kVVvhxQ7ZEtiXpeHJ/WW8+lX6tsEgQgPyOVbXw70STnIqGMg8IW9jeuofW0Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000000123456ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"6VFyy5HupQI+k/Xlj40V/aoNpxZGPSnmzuq0TFgrndAxuApIfe5015ljRncQAbWpewbCIjUNG8nArc/R49mznw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"100000000000123456ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"3zGoA3YThisTw0iiR0u47zVa7+hKKPTMOLWh/6E7KLNrbPdb39t6ImVZMbdH7ht2vsjclKColdNl87hnE6JRwg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000000000123456ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"E5aNZg//K6IKbcTyMlPDgSj2gaCSUI8uJfTKObGI4nNeEdFfeSvC5R+bKzVKkLye0GWkTKXcyxiT4wmKPuIGIw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000000123456ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"UVqmyrCDJZObF5buEISNh/WfQUNW2GCX8dcAnM+tHUUt0C1AeXZGoWRi6JB2n6ephWB0z3O+kf4XtOR09Z7vpw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"100000000123456ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"wrLt7WokWDWJaZeB0DCEPAm5kiifC5EnXLPP1JHrESY4Zxz6GJs+urq0omyQ7d4QlDpKxt0SoMaAoGuPnFxthw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"10000000123456ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"IeoaDaEL0NDuguIbRWxqN0H7rRH8aoUuVbiNUEyNlU4dlL4LQga/6CvBcSA2+Z07yZiv6HsdGDpxgYGf+SIcdw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000123456ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"0KVD7kFeU2wYf4VNz1cbBD5ut1ov6f4ZD0BBnatOS7MUdWmzJKQNvebLfHE/QxODJc5bxqOpv0x5VjYDB21sAw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000000000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"TOXpTOFp+SHO+R64iz3+QrsMjAn5SlK+NxSqOnqMt4RENWWxef25X1F3KbRvIx/BcR0rdIx3w51Zz/D2mS1O6w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000000000012ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"mrndefIb3kk5NBtU8cXXfOY5BbOXLXm2nw7NLjSyFTxU7tnO6PANkAE0C1f0bnnCBKHS+F3hxdBibTZ7799HVw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000000001234ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Cayb8fGJELjHa5khObd+5mlKLu+K6hOZE1vzVvY1QEc2fkzggahjaf9Nu1pgH4HBIdMBJ45ULe9wwAxxBKlQ7A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000000123456ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"9XyH+RjqiQ4bP6U1ewuiCaqoAG7v4aBrALsv9EpORMUHZtEiylnip6EWAD9QZVGPn2mpyIlCpGUOHkAOV+hcfA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g1y7h659patawdy99mlufj9lp3t9cwpt8fq852zq","amount":"13000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"2QQp9ovd4yOTvQr6COnZEsyKX/QAoMnB6SnRxgfArtEgCxyUBiu8VUaJ5yJZdhvyo07hFB3zFtAk3nH7WwihnA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"250ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"4wnr2I2OoDbWsGlzvHOdSN/3IahK6ht1ZSyd9liMoPkkiNVYSoPIaAptHk/tF6MK716OHegngDUWy8a8R6Z7iA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"gggg","Path":"gno.land/r/demo/gggg","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"OB4kRoTET9rYQDyR2/1aAsSsNvuof1plRyr+OXT2sZck8zaLxJG3UO3V2FvRfjdqwEb7UxyZhF48VTCNo2G9Uw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"hahahoho","Path":"gno.land/r/demo/hahahoho","Files":[{"Name":"hahahoho.gno","Body":"package hahahoho\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"YvT6qE0k5KpO7wYYOelCy18q5FAwvXj5zhynx2tn6HZYjL9eT+xOAqoqeoLbaTQqV4qcoadu1mRDt82G05LFFA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","package":{"Name":"gggaag11","Path":"gno.land/r/demo/gggaag11","Files":[{"Name":"gggaag11.gno","Body":"package gggaag11\n\nfunc Hello() string {\n//\u003e\u003c\u003e\u003c\u003e\u003c@@$$!!@@^\u0026\u0026$!@#%\u0026*@!#$^\u0026*\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"rHKq8swzzKPEv66OM5ZdFzXOQz+TZdox+FkEj1aIA6sig2zd1JqPSXJW8z9zBAxRLFPyp8u7Wyk/i1roLWcFJg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"44444444444444444uatom"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"wVrcnehJvHyzMOIupk6Z61nE9XJGBhX4gsZ1Az71y3FNVSfSYwv5wg+uhymLZVBkxkEl8WTqjGcRXomH82yEUQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"12345678901324567890132456789012345678901324567890","func":"12345678901324567890132456789012345678901324567890","args":["12345678901324567890132456789012345678901324567890"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"/HnWcK/raB27xFVcbqY5ltVqiY0WKgngjn7Ws96R3CEubqAtImIVK4Xky6iXEjggr4K1HbvgR9Ym53gBDPWp5g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","998496"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"taGP+HLoRZmmFgFtoDcPaHhHswVrN2RHX7FFOU1a5SIEBhVImbzRgqAvLBLuEImfG2Y1+QfuHiDIQ2YIr+Ar3g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"100000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"x+8EV6B/Bix9U9CAOKPDe4cnf3hS0fsdEs5gW5A/p+Nc6bDOCHdPBeBc1fhkVfferKzD22busDIXFgb/Z8teTA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"rs97uUVdU9i1LRJli6G/HonBO3yymQto8wfPQU0XjnZagbOQPBPN5+bskSsiupjiL4MAYpSvpZ8W1ORmly818g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"313abcd"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"z1dNDqTJYNPuvycUO4hssmNLQJX5Pxnm8f3dWHSZjzUTlovS7kNsApOBdh2rxQc2ZLrHCTF2B+kKFZ+eRejYKQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"aRwpzpSAgPJQyAgTIEgJWVLX/0akhzEGBDi4g5X/xkFb+/q96Q3tDK7v6Y6+7pz/BvHNjbo4uLCBUUXYU2+GxQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000000000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"9cQCalYsGkoNj1HQOLjz2Y9djxkXc3S0m3CI3T9CXuJyE1LQNTmcmDfG0xjsBZ3Iuj+He6zHiHAA/8C8I/7BrA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"100000000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"9z/oAxL2GzL8CGrGOokqBaEamKLEje/pYZJSnFHwmRoEvIxuOZAb77z3fx8rR/OMdmjW0lVJ6Oy9Cb134rMGoQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"100000000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"PwSMzAVgu7Z62t3fa6uG56xjUc8UcxxkBuVGGB60GzlezXH8A9EsZ+jkwQETcCh073PjKoLTVlK3gSOLaalZLw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"43000000000000uabcd"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"dEP2KZhmcV1/uLIUXh2WcHQPvEonDpBliC6Qqn/KwQEnwoHRycMiV9mHCs2m4qC/VtQPHqFIlWAQE/yT0naOEg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"43000000000000000uabcd"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"KR+7fTJAzla6DUwFMj3qU/h3Vr/BrnP5iK9Ir+N4SKMynYHmXTgXqlA/49gPZjx54XTg0DgvXx/205zHxGPOWQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"44444444444444444uabcd"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"v+ZZW1iYvkwS6GySsv1dB/vR45KjnbDhQfucgF4b2Q11LtQHZExRMRlj5JeQB9Z1p8JlyXMxDp/htY2U8O5osA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"44444444444444440uabcd"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"22ovDynaHsiVMvZniRL2H8XIyxsJUIk+lCtSHBgnY1RwBbJlximEa4hZviUmUP/onrwX4cDMYRBaVSwpccrg1A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1234ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"XNjgIMMjUV64C3lsab24gctk14HCXi2uEa1Mmx5mUeU059F0rsJNzsymUYhKgDZkgC8zyz27+oH+BnjIv5i6fg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"123456ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"hHJxgghvabqQ3RgDqJVpXwmVmuzKN3o/q+oNdAw6I+MrbD+he8xRXsQaDeWqQN8dy5yY0J3W5Gy9rPmLUs63LA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000000000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"/0zdEX+9oBISnNesfBI6+Pl+WkW3dB/i2Wxfo9udE19NP4Lwp32kwxOgzlh0kS2X2pVjoY3yEhvB1q0MWgsexw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"10002345ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"l5Bck+sAv9PPdQQKDIviMUC9lDy+4fwpBj3PSqocEOEzGYzxTOsSQyzasqT5iEPa4w5CGefYAosuHnoyhEXu0g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1l47x640c4petu4chfjge3qg2uplakx78hkxqxd","1234"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"t5qTufKsiRYM7yxgpYNN+ritj8NvIuQY8EgQ2k64/U0ziOMQgcjn4CVd5p9ewkrsQT7WdKLfAelS3iC/hap9kg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1234"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"QICtXLuYznx3EGV4j+5t+JpnavylGUIzuSRSt7JYoGBVxgxg8fUwQxpQ8YqvptO2Yf0f27jtR+JE6Xz1ODxb+Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"i'm so happy","func":"hi everyone","args":["no you're not"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"W67oruBxAt6tXyeynQwScOIRAku3EBlMBiGSePcYQ6JFNvGfE+S+n3EXb5QMGNAzigQC7yOo/JD/ByWuIGVl8w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"10002345ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"7V1YA9LfdTDk+DdvG4d0rythqB4y2s8sN2L6LI/4k4QAzbsnAboC68d3qssPTygFDU2baHUwH0PYFu02UAp+mA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"123000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"FEQgPixtVUf8eUGfZ05UxMFS9skUWjrNVlXWQDtFrNZdScQZlmEQB3RFJObMW9OHwKGtlR3SZEm4kp9HygVB5A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","456"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"7VYfzoCtmqBT6O5VgKk6o6znduhgiFbHZVfVkKCjhIYE2vdotmQrys6g+oEEAHoyhqej2wztt2c7nbJbUtHR9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","789"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"TWcjfe4apsMHEJ6Monqll88mS8AvnwnsJSWCWHmN43RBKRib/Nt4V7Q7tLYnQp6De8wX9fH21C5uIluv8GezAA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","amount":"300000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"RGZqD6ZCVnz/9W9PTezDT0OnMLDDseUnSmd7b67Sbrk2pUko32iFB5joSUgUkcdByI/Vc+JzTw7nucJt0LiUNQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"123ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"pXx65kJE+QXT25nmO1cz91Dx/A3vWrgFNokpvhOuK2oRMLGnn6RFdqOxfJmMj0C5NZjIM+Ahv8LpvMPpoukJcA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1123456ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"wKAPTVbbok9fWxuLvu7I//hrC0pt0xYXZCop+N1UfSlMKExEbei4/9mixRr4XfxaV9FKIWkkflcmaeqEJ4g+ng=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args},{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","","Hello},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"50000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"zpB7aAI33P0BLQaTXDYcrDcmJ2QBDmYFJb+S34yvVN8x862Q/TxTLlrjROw/hjt2Q88jm4tqxtNHjELsk/PsMA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","func":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"KQd5/AM2gO8Aosu2cDDl8TZR1IF9JHdPOkmMDtGW8+8RqsBeWzqzWX/xAk+sIC+iryY7MlD/iPs7zX4qZ4Iwcw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","send":"14001000ugnot","pkg_path":"gno.land/r/disperze/register","func":"Register","args":["adena.gno","g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al7LV/X++mUIljzenR1OaxKfue7hfo6UsvOhGCdDtiid"},"signature":"9AITdJgP8sZUn66QjEsFqHxjt/HMBPQHXHrsItaq5zNdD/kHSWyUEqgxf8T4xcVZBfk9rZiWnjt/N9kstp7qcQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1234567890ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"MbWBYuagCSteCF1Z35VJOKjETpP2iEm1BJFpAWyY2ztK1JWv0eL6n7Zvt4kRkzgHAnkq6gNziwfqhFyWGaACFg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"100000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"sT0SVYna9rqxTWlq/ItFa8agWtYN8Mg08t61cGQ0taNb7FciO7DSUazR909YYlELWMHZz3g070lIkT3s9OaVDg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","amount":"4123ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"CCNqKTeRAtult2ioBrjbayZA5ZTmZL63hBdsX3xoylRx+lwb1U5bpatiaY0wj+OvTS/N6ngjWNqq1++5svaqAw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1l7nmtmzptycmt36lrju4ypum2yr5zx244c52r3","to_address":"g1y9termmsxwsx2x87ahcx6ym7xq7868lx97f4jc","amount":"100000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A98IFyM+yKsk0qIx5E0oc4bZxYWQ9WnMDU1kiclZmnpK"},"signature":"zO4HDmfmaHvtv4Zd3flR9TAjji4FkREW08cjixjsxvFffxxM1KU6UaHvUqcM3wMd44LxHPQdDiAEvmfsDVAQGw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/gnodao_v05","func":"CreateContract","args":["g1c5y8jpe585uezcvlmgdjmk5jt2glfw88wxa3xq","foo20","100","60"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"H48LM5XEE/dWN8EtADa6NwY+Ioo6J45KDqCR98y5Wu1U5RBmIqkbLaECNXchrcQkrIMYWEvaZaH8A5dFuHqA1g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/escrow_01","func":"CreateContract","args":["g1c5y8jpe585uezcvlmgdjmk5jt2glfw88wxa3xq","foo20","100","60"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"HEW1lzv0QQq1zlvCDllvKBIoP5FIb6xbi51ZQNnOkTddpV3hTwEzNwVcQyGWGkH5fHXz7IDBjADUh0rrkLf1GA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"escrow","Path":"gno.land/r/demo/escrow_02","Files":[{"Name":"escrow.gno","Body":"package escrow\n\nimport (\n\tfmt \"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/foo20\"\n\t\"gno.land/r/demo/users\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Config struct {\n\tdaoAdmin string\n}\n\ntype ContractStatus uint32\n\nconst (\n\tCREATED   ContractStatus = 1\n\tACCEPTED  ContractStatus = 2\n\tCANCELED  ContractStatus = 3\n\tPAUSED    ContractStatus = 4\n\tCOMPLETED ContractStatus = 5\n)\n\ntype Contract struct {\n\tid             uint64\n\tsender         string\n\treceiver       string\n\tescrowToken    string // grc20 token\n\tescrowAmount   uint64\n\tstatus         ContractStatus\n\texpireAt       uint64\n\tclientFeedback string\n\tsellerFeedback string\n}\n\n// GNODAO STATE\nvar config Config\nvar contracts []Contract\n\n// GNODAO FUNCTIONS\nfunc UpdateConfig(daoAdmin string) {\n\tif daoAdmin == \"\" {\n\t\tconfig.daoAdmin = daoAdmin\n\t\treturn\n\t}\n\tcaller := std.GetOrigCaller()\n\tif config.daoAdmin != caller.String() {\n\t\tpanic(\"not allowed to update daoAdmin\")\n\t}\n\n\tconfig.daoAdmin = daoAdmin\n}\n\nfunc CreateContract(\n\treceiver string,\n\tescrowToken string, // grc20 token\n\tescrowAmount uint64,\n\tduration uint64,\n) {\n\tcaller := std.GetOrigCaller()\n\tif duration == 0 {\n\t\tpanic(\"invalid duration\")\n\t}\n\tif escrowToken == \"\" {\n\t\tpanic(\"invalid escrow token\")\n\t}\n\tif escrowAmount == 0 {\n\t\tpanic(\"invalid escrow amount\")\n\t}\n\n\tcontractId := uint64(len(contracts))\n\tcontracts = append(contracts, Contract{\n\t\tid:           contractId,\n\t\tsender:       caller.String(),\n\t\treceiver:     receiver,\n\t\tescrowToken:  escrowToken,\n\t\tescrowAmount: escrowAmount,\n\t\tstatus:       CREATED,\n\t\texpireAt:     uint64(time.Now().Unix()) + duration,\n\t})\n\tfoo20.TransferFrom(\n\t\tusers.AddressOrName(caller.String()),\n\t\tusers.AddressOrName(config.daoAdmin),\n\t\tescrowAmount)\n}\n\nfunc CancelContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != CREATED {\n\t\tpanic(\"contract can only be cancelled at CREATED status\")\n\t}\n\n\tif contract.sender != caller.String() {\n\t\tpanic(\"not authorized to cancel the contract\")\n\t}\n\n\tcontracts[contractId].status = CANCELED\n\n\t// return grc20 tokens back to sender\n\t// TODO: resolve caller problem\n\tfoo20.Transfer(\n\t\tusers.AddressOrName(contract.sender),\n\t\tcontract.escrowAmount)\n}\n\nfunc AcceptContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != CREATED {\n\t\tpanic(\"contract can only be accepted at CREATED status\")\n\t}\n\n\tif contract.expireAt \u003c uint64(time.Now().Unix()) {\n\t\tpanic(\"contract already expired\")\n\t}\n\n\tif contract.receiver != caller.String() {\n\t\tpanic(\"only associated receiver is allowed to accept\")\n\t}\n\tcontracts[contractId].status = ACCEPTED\n}\n\nfunc PauseContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != ACCEPTED {\n\t\tpanic(\"contract can only be paused at ACCEPTED status\")\n\t}\n\n\tif contract.sender != caller.String() \u0026\u0026 contract.receiver != caller.String() {\n\t\tpanic(\"only contract sender or receiver can pause\")\n\t}\n\tcontracts[contractId].status = PAUSED\n}\n\nfunc CompleteContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != ACCEPTED {\n\t\tpanic(\"contract can only be completed at ACCEPTED status\")\n\t}\n\n\tif contract.sender != caller.String() {\n\t\tpanic(\"only contract sender can complete\")\n\t}\n\n\t// send tokens to receiver\n\t// TODO: resolve caller problem\n\tfoo20.Transfer(\n\t\tusers.AddressOrName(contract.receiver),\n\t\tcontract.escrowAmount)\n\tcontracts[contractId].status = COMPLETED\n}\n\nfunc CompleteContractByDAO(contractId uint64, sellerAmount uint64) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != PAUSED {\n\t\tpanic(\"contract can only be processed by DAO at PAUSED status\")\n\t}\n\n\tif config.daoAdmin != caller.String() {\n\t\tpanic(\"only dao admin is allowed for this operation\")\n\t}\n\n\tclientAmount := contract.escrowAmount - sellerAmount\n\tcontracts[contractId].status = COMPLETED\n\n\t// send tokens for client and seller\n\t// TODO: resolve caller problem\n\tfoo20.Transfer(\n\t\tusers.AddressOrName(contract.receiver),\n\t\tsellerAmount)\n\tfoo20.Transfer(\n\t\tusers.AddressOrName(contract.sender),\n\t\tclientAmount)\n}\n\nfunc GiveFeedback(contractId uint64, feedback string) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != COMPLETED {\n\t\tpanic(\"feedback can only be given after complete\")\n\t}\n\n\tif contract.sender == caller.String() {\n\t\tcontracts[contractId].clientFeedback = feedback\n\t} else if contract.receiver == caller.String() {\n\t\tcontracts[contractId].sellerFeedback = feedback\n\t} else {\n\t\tpanic(\"only contract participants can leave feedback\")\n\t}\n}\n\nfunc GetContracts(startAfter, limit uint64) []Contract {\n\tmax := uint64(len(contracts))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn contracts[startAfter:max]\n}\n\nfunc RenderConfig() string {\n\treturn fmt.Sprintf(`{\n\t\t\"daoAdmin\": %s\n}`, config.daoAdmin)\n}\n\nfunc RenderContract(contractId uint64) string {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tc := contracts[contractId]\n\treturn fmt.Sprintf(`{\n\t\t\"id\": %d,\n\t\t\"sender\": \"%s\",\n\t\t\"receiver\": \"%s\",\n\t\t\"escrowToken\": \"%s\",\n\t\t\"escrowAmount\": %d,\n\t\t\"status\": %d,\n\t\t\"expireAt\": %d\n}`, c.id, c.sender, c.receiver, c.escrowToken, c.escrowAmount, int(c.status), c.expireAt)\n}\n\nfunc RenderContracts(startAfter uint64, limit uint64) string {\n\tcontracts := GetContracts(startAfter, limit)\n\trendered := \"[\"\n\tfor index, contract := range contracts {\n\t\trendered += RenderContract(contract.id)\n\t\tif index != len(contracts)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"hl1ZmZndkINTAji3+M9CtFK8MQe/2G4Zh8gtsR3fKwI9E1qXQWff/GjzFikk9UMlyEwf+sT1BXup1HR2d1bAOA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/escrow_02","func":"CreateContract","args":["g1c5y8jpe585uezcvlmgdjmk5jt2glfw88wxa3xq","foo20","100","60"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"+3BpjhAWErbnIBqFP1dd+nmcpSCBHBTwp9yxsUR2gkhRvYc7rzXLd/WylBKKiBdWjqkyzP7BVhrpKZi3clgePA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/escrow_02","func":"UpdateConfig","args":["g1c5y8jpe585uezcvlmgdjmk5jt2glfw88wxa3xq"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"c6lgienn5JmYmeGQiaSMKQvDqqI6hLFtCXgx9niEmjhDSEyStjLrmrS8ObWfsQUGXliEFH3PQez2Py07fNgcNg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/escrow_02","func":"UpdateConfig","args":["g1c5y8jpe585uezcvlmgdjmk5jt2glfw88wxa3xq"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"NDLAYhgrEsshC/Chu4+dInb7bKpgmLWW8qYdwJ1XyRcFBVvpDbcKoRKDra/LBsDa06b9pzG88y9itdAozZv7og=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","package":{"Name":"escrow","Path":"gno.land/r/demo/escrow_03","Files":[{"Name":"escrow.gno","Body":"package escrow\n\nimport (\n\tfmt \"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/foo20\"\n\t\"gno.land/r/demo/users\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\ntype Config struct {\n\tdaoAdmin string\n}\n\ntype ContractStatus uint32\n\nconst (\n\tCREATED   ContractStatus = 1\n\tACCEPTED  ContractStatus = 2\n\tCANCELED  ContractStatus = 3\n\tPAUSED    ContractStatus = 4\n\tCOMPLETED ContractStatus = 5\n)\n\ntype Contract struct {\n\tid             uint64\n\tsender         string\n\treceiver       string\n\tescrowToken    string // grc20 token\n\tescrowAmount   uint64\n\tstatus         ContractStatus\n\texpireAt       uint64\n\tclientFeedback string\n\tsellerFeedback string\n}\n\n// GNODAO STATE\nvar config Config\nvar contracts []Contract\n\n// GNODAO FUNCTIONS\nfunc UpdateConfig(daoAdmin string) {\n\tif config.daoAdmin == \"\" {\n\t\tconfig.daoAdmin = daoAdmin\n\t\treturn\n\t}\n\tcaller := std.GetOrigCaller()\n\tif config.daoAdmin != caller.String() {\n\t\tpanic(\"not allowed to update daoAdmin\")\n\t}\n\n\tconfig.daoAdmin = daoAdmin\n}\n\nfunc CreateContract(\n\treceiver string,\n\tescrowToken string, // grc20 token\n\tescrowAmount uint64,\n\tduration uint64,\n) {\n\tcaller := std.GetOrigCaller()\n\tif duration == 0 {\n\t\tpanic(\"invalid duration\")\n\t}\n\tif escrowToken == \"\" {\n\t\tpanic(\"invalid escrow token\")\n\t}\n\tif escrowAmount == 0 {\n\t\tpanic(\"invalid escrow amount\")\n\t}\n\n\tcontractId := uint64(len(contracts))\n\tcontracts = append(contracts, Contract{\n\t\tid:           contractId,\n\t\tsender:       caller.String(),\n\t\treceiver:     receiver,\n\t\tescrowToken:  escrowToken,\n\t\tescrowAmount: escrowAmount,\n\t\tstatus:       CREATED,\n\t\texpireAt:     uint64(time.Now().Unix()) + duration,\n\t})\n\tfoo20.TransferFrom(\n\t\tusers.AddressOrName(caller.String()),\n\t\tusers.AddressOrName(config.daoAdmin),\n\t\tescrowAmount)\n}\n\nfunc CancelContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != CREATED {\n\t\tpanic(\"contract can only be cancelled at CREATED status\")\n\t}\n\n\tif contract.sender != caller.String() {\n\t\tpanic(\"not authorized to cancel the contract\")\n\t}\n\n\tcontracts[contractId].status = CANCELED\n\n\t// return grc20 tokens back to sender\n\t// TODO: resolve caller problem\n\tfoo20.Transfer(\n\t\tusers.AddressOrName(contract.sender),\n\t\tcontract.escrowAmount)\n}\n\nfunc AcceptContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != CREATED {\n\t\tpanic(\"contract can only be accepted at CREATED status\")\n\t}\n\n\tif contract.expireAt \u003c uint64(time.Now().Unix()) {\n\t\tpanic(\"contract already expired\")\n\t}\n\n\tif contract.receiver != caller.String() {\n\t\tpanic(\"only associated receiver is allowed to accept\")\n\t}\n\tcontracts[contractId].status = ACCEPTED\n}\n\nfunc PauseContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != ACCEPTED {\n\t\tpanic(\"contract can only be paused at ACCEPTED status\")\n\t}\n\n\tif contract.sender != caller.String() \u0026\u0026 contract.receiver != caller.String() {\n\t\tpanic(\"only contract sender or receiver can pause\")\n\t}\n\tcontracts[contractId].status = PAUSED\n}\n\nfunc CompleteContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != ACCEPTED {\n\t\tpanic(\"contract can only be completed at ACCEPTED status\")\n\t}\n\n\tif contract.sender != caller.String() {\n\t\tpanic(\"only contract sender can complete\")\n\t}\n\n\t// send tokens to receiver\n\t// TODO: resolve caller problem\n\tfoo20.Transfer(\n\t\tusers.AddressOrName(contract.receiver),\n\t\tcontract.escrowAmount)\n\tcontracts[contractId].status = COMPLETED\n}\n\nfunc CompleteContractByDAO(contractId uint64, sellerAmount uint64) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != PAUSED {\n\t\tpanic(\"contract can only be processed by DAO at PAUSED status\")\n\t}\n\n\tif config.daoAdmin != caller.String() {\n\t\tpanic(\"only dao admin is allowed for this operation\")\n\t}\n\n\tclientAmount := contract.escrowAmount - sellerAmount\n\tcontracts[contractId].status = COMPLETED\n\n\t// send tokens for client and seller\n\t// TODO: resolve caller problem\n\tfoo20.Transfer(\n\t\tusers.AddressOrName(contract.receiver),\n\t\tsellerAmount)\n\tfoo20.Transfer(\n\t\tusers.AddressOrName(contract.sender),\n\t\tclientAmount)\n}\n\nfunc GiveFeedback(contractId uint64, feedback string) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != COMPLETED {\n\t\tpanic(\"feedback can only be given after complete\")\n\t}\n\n\tif contract.sender == caller.String() {\n\t\tcontracts[contractId].clientFeedback = feedback\n\t} else if contract.receiver == caller.String() {\n\t\tcontracts[contractId].sellerFeedback = feedback\n\t} else {\n\t\tpanic(\"only contract participants can leave feedback\")\n\t}\n}\n\nfunc GetContracts(startAfter, limit uint64) []Contract {\n\tmax := uint64(len(contracts))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn contracts[startAfter:max]\n}\n\nfunc RenderConfig() string {\n\treturn fmt.Sprintf(`{\n\t\t\"daoAdmin\": \"%s\"\n}`, config.daoAdmin)\n}\n\nfunc RenderContract(contractId uint64) string {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tc := contracts[contractId]\n\treturn fmt.Sprintf(`{\n\t\t\"id\": %d,\n\t\t\"sender\": \"%s\",\n\t\t\"receiver\": \"%s\",\n\t\t\"escrowToken\": \"%s\",\n\t\t\"escrowAmount\": %d,\n\t\t\"status\": %d,\n\t\t\"expireAt\": %d\n}`, c.id, c.sender, c.receiver, c.escrowToken, c.escrowAmount, int(c.status), c.expireAt)\n}\n\nfunc RenderContracts(startAfter uint64, limit uint64) string {\n\tcontracts := GetContracts(startAfter, limit)\n\trendered := \"[\"\n\tfor index, contract := range contracts {\n\t\trendered += RenderContract(contract.id)\n\t\tif index != len(contracts)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"7V7QQYKtCKAcKqHSmussqfxlSFIyWDEi9hLIZnPJ8nNZEW9mD5fqDIRPR/b8Q+/Qws/ik2401seQl+KcY9jlUw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/escrow_03","func":"UpdateConfig","args":["g1c5y8jpe585uezcvlmgdjmk5jt2glfw88wxa3xq"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"xLZMbPDeOf8aUGqJI+tjoMKAAZXI03MhdQCE8Ne76Fpqg/iSUgBgOWrfNr2DCZzKrtQ7OymbxCfBWhydySe1Sw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/escrow_03","func":"CancelContract","args":["0"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"/7NgrB18sKiAAva+N9WNPsjCyA0CIPI8WBQsf6Jeu3JyPincyByq0RKtzg1twcJ7Ub9L/FHmNCeQ2uW7Y2Ndkw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/escrow_03","func":"CreateContract","args":["g1c5y8jpe585uezcvlmgdjmk5jt2glfw88wxa3xq","foo20","100","60"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"THUbE+querJh/+g7EoQAEAtAI79BiKsuUwur9A1HYL0ae2M607x/0T/lhiAV1QcYFIDhoLXrw2MhprE3fcrLrQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/escrow_03","func":"CancelContract","args":["0"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"X1w9W573AXPqFuw+bdH402cxCYilUVoLGBEyPlOH8A5RNUKRhNi/BqfEN0djD45fvzGl0E/z9w+M2b7plyTkAg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/escrow_03","func":"GiveFeedback","args":["0","Amazing work"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"+anrEiEDjDliAY7Yaga7zrdYbiao9lKPEM72LMHFZIF7DoAOAqEQBraZtCCHz9yclwadWix+EmqdmuUcjm95ig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/escrow_03","func":"CompleteContract","args":["0"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"j1KnvUNf2pzdXcgD4qbrPxQoyJq6H9JJ813gGa+TlrE/6g6YyX1EeRoWYtkJzUeomtDiA/ZDNGV9EFCL+S4gWw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x2xyqca98auaw9lnat2h9ycd4lx3w0jer9vjmt","send":"","pkg_path":"gno.land/r/demo/escrow_03","func":"CompleteContractByDAO","args":["0","50"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Are+rDOGtV7Emj56hi3og/kpmKmMo7qLGZ0Gr7YmuxAo"},"signature":"iWeFEPt19gbWNbj6heu4t3f60PXQZtzey9HwKvZp/O0W+wrvVNb4AZFCndJF98kFGa3WSNjdmuxHQAfr54/yVg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1uaptjzayzf3u63ata6eqjd24vks7pryk4e9paj","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"BFcOIg3CE5mKTMpe59B9Q8M1q0JkiLnBGfpRW2nORzkIBJQO2B7yElqKvYFN31Em53KXeltcVeJNiAPpIXXvCA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uaptjzayzf3u63ata6eqjd24vks7pryk4e9paj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["harry_board"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax82IAfCkBHoeNFYZrJdrsVeuTcI90HGmYfJmlD6jy4O"},"signature":"gTsB326/5oEgWJnYM34A34/yK9zYA4vkqzlOHMwzVWMruNcEcwXo+BYIWiUTiNKPAZnKM+03Vef1zGGvL0LIRA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uaptjzayzf3u63ata6eqjd24vks7pryk4e9paj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["harry_board"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax82IAfCkBHoeNFYZrJdrsVeuTcI90HGmYfJmlD6jy4O"},"signature":"pYJsaofvO/0bfKoIcwsN5pM5zHC9QB9XXUybm7YbsnVyXrZynHQu35eoxABkioi77Yrtvszy3+/WLuaDP/BSbQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uaptjzayzf3u63ata6eqjd24vks7pryk4e9paj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["harry_board"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax82IAfCkBHoeNFYZrJdrsVeuTcI90HGmYfJmlD6jy4O"},"signature":"J4RYJuqtoE6ghZjdqlKmA8CU4wdfdyypbmzcYsckWnU2K2pPJ/Lq/xNzwOYFfmEBUEMOmfGZckyCZ0wUIsUsGg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uaptjzayzf3u63ata6eqjd24vks7pryk4e9paj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["harry_board"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax82IAfCkBHoeNFYZrJdrsVeuTcI90HGmYfJmlD6jy4O"},"signature":"hsf07E9v65+xA0GfLJ0qn/+RWy/SzfBQFLoHdYto1vBrLuhVyGY3Gw7Dk25t9+I5yA/C68UGCuDOetNv2fjLLA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uaptjzayzf3u63ata6eqjd24vks7pryk4e9paj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["harry_board"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax82IAfCkBHoeNFYZrJdrsVeuTcI90HGmYfJmlD6jy4O"},"signature":"C3Y1t8E91BB8ZqR3mCgq36z3pvdNAoooF+5UMYsPqG960+DxM1+XK8xjkdiwtG/mGRRYdMrpBiGDtmLxgUCiNA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uaptjzayzf3u63ata6eqjd24vks7pryk4e9paj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["harry_board2"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax82IAfCkBHoeNFYZrJdrsVeuTcI90HGmYfJmlD6jy4O"},"signature":"5mUtd1K9louP0+GWEoo/7zs5Mxg0bi662RGF1M7FIz16ccFqWKco8Ph7IQaNLmU+5o3JtKSy0AnQa/Tvwyk+oA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1eev5t3sns3ewca050sx8swpesu444za4rkajj3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"eFKWBFmklAbDrPe0qkIlNWjmemfPJ3FElFKHd9KrMCFIOnwsRuLDB2hg+mbSpKtsZOKc9vRmUFrgxgeC6+qs0A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1rsnvnnvfeqty9j5qw6gayq9dml8aahmfs2fjv3","to_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","amount":"309999999ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtaIHCekGEz3GGfkqpXJ5PEnPPCDC9ySC9YaBkZvS/Rq"},"signature":"Y49vl+quY5wmEjsz7B/FM4IBXKiNIxg5KWGJGdtzc8NLhfp2pJ3O3NlGhu9DSO5qLsDvhdRTDGkKvwMbgpFquA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1rsnvnnvfeqty9j5qw6gayq9dml8aahmfs2fjv3","122"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"I8NwgvMFV20hLCwoivdk6/3/H6+Bhp7sdG7tzPEhT2Qcx2vgvq2HgYQJUCPO9RImgUJ7HpSL850qGtYE5tjAqw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1r8r79suzvajkh047qss09ce3akegaqars3j6uy","to_address":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","amount":"12300ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxBOIDQaEvDBJrHMopsYcZDKDwwRLQ3AqoHUYa6gDbYM"},"signature":"GiBdJGkgsx9SspY6W318qXv2yC5NuDP7+L5BJfi7nQRftfgS010qgGaR+grhXQHgFn74+HbSGylLlWFktOwAOQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1wtl83zme3e6tc0e4mne8lsv68c9dez2agjcklf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"mjZCLIzhDW+naR9mS+ZFyWRcoCvThCo4KdTHzp3jJiVQknCO3toBxOpJJqdpo3a1XcHj4JL8bAJofvJzK1mgLw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1wtl83zme3e6tc0e4mne8lsv68c9dez2agjcklf","to_address":"g1wtl83zme3e6tc0e4mne8lsv68c9dez2agjcklf","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/mVVDwJG6n57E53abA5q7D60qE8Oh9dJqQXIZVVE+Iv"},"signature":"WezU/EsM/VIlx5dl1Zr2vZ4H9oEp31ptsQ3hUoeODCp1NEdEL2ebEciQwiMyVnrYWMnzSj4mMIeOSA964g9V/A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1wtl83zme3e6tc0e4mne8lsv68c9dez2agjcklf","to_address":"g1wtl83zme3e6tc0e4mne8lsv68c9dez2agjcklf","amount":"11000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/mVVDwJG6n57E53abA5q7D60qE8Oh9dJqQXIZVVE+Iv"},"signature":"3uDKYB4m73jyYxiZKY6VAaqfCvFTo9iebo0iiBGYxeJSFhBd/Su9y9+sPHj0Edwgai4TufkeZgktS1vk46BoUA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wtl83zme3e6tc0e4mne8lsv68c9dez2agjcklf","send":"14001000ugnot","pkg_path":"gno.land/r/disperze/register","func":"Register","args":["8888.gno","g1wtl83zme3e6tc0e4mne8lsv68c9dez2agjcklf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/mVVDwJG6n57E53abA5q7D60qE8Oh9dJqQXIZVVE+Iv"},"signature":"9Uwn51+FVyPhXnL3CON2YVXWHxBJSqcQlDTGWOxjEb9qMgmZOjzuRWxDReEx0IGzMzJceX5JCl0Jbi+WOv4Bpg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wtl83zme3e6tc0e4mne8lsv68c9dez2agjcklf","send":"54001000ugnot","pkg_path":"gno.land/r/disperze/register","func":"Register","args":["x.gno","g1wtl83zme3e6tc0e4mne8lsv68c9dez2agjcklf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/mVVDwJG6n57E53abA5q7D60qE8Oh9dJqQXIZVVE+Iv"},"signature":"6Qz4nwrhsKmCLdiO7Cq0zQq/4Xa1V7OxV7Yl51JbNkRjH9IGsfw/i4wgnFI3PX7Vv1+NY/q+WfdnCM17bACTGg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","send":"","pkg_path":"gno.land/r/demo/foofootest12","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"VmdxCOIzGcLkmyalIGr1btKeRhgszHVrq//AQvfX7k1Jom+RZ9SWbDipXnco5dIDDt7lttw6EUV9OhDF92o5RA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1t4du52tfdfcnsrhlkfxhulr3r2a8a965zs07tx","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"WPEp7uqN7EogOyfyPqoQh6v4Liw24rldU3vpMxyj5TtEAlKyPmEZCbF46RJ3k/E2LPqk42t3h2CzhVguOYCYVA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","4"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"blC1mOo03aSKkNWuOeWp//2Ui4dNSP1WkcwBsHbvczl212l8hYYojPwfs82uW7gVUa1TiPWsSYiq8NVTeVZVag=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ms67dfhp3pctuxg6hkcjnjwn0cv5p83lx9duql","to_address":"g1njhka9ptwugvkphdtfcagw77vjymfggplue8u9","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxxqAHDaLcOVvA5RSbk0cJEJuWHh+T9khd/TceJgS3dv"},"signature":"xAFqfxtFZebNPPiqL39lW/cLtM6utlEWmeCzC5jxdaQrlsTCSwju+59A1sstivPa5LgWPfptlWu7awhh8pzQCQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14y3zlvu92f9hlcvupz5r4dmdeyfs6p2ex0s4u6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"A0e7QerrURVs9h5GTCz0prYuQs6ZwEiWq6bka8CK7pBosGr3fZH7S3PLr+AXbtoKbZ+T2U66Qbk+nD1pvRjMWg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1g9y3s3gg8fwha798tgg04tzksuuxdz6mgcj57f","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"6Sq9yDJ4L+hxWVsPeR6kUCqMuejhFSBy+tj0IlGZji1BD+7/ZrjM2u5/pTQsMyMlnxmxcvF9Ex7f6YSVEPvT7w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g9y3s3gg8fwha798tgg04tzksuuxdz6mgcj57f","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","glassrapidha",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxKsmOBfc8uGviBv3w9XxbqxV1HOtia9QRQlZPMnBMJI"},"signature":"m7nGk8VnNKmPYuktPQtkb1fLLPVWiKk9gNlYPmkdJcoYB6plhwHcZo+FhWDyStQ3KR8LIPUWE8h3dt6gkk+JZg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g9y3s3gg8fwha798tgg04tzksuuxdz6mgcj57f","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["glassrapidha"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxKsmOBfc8uGviBv3w9XxbqxV1HOtia9QRQlZPMnBMJI"},"signature":"hfeoZxCIZxw1c3xgyl2V9ScbL0QCt+RTQdR+/29OguU0rE+Rzj+VykzsHUHigdOeqRkT6EDCGq8wYk9Ts+T9Iw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g9y3s3gg8fwha798tgg04tzksuuxdz6mgcj57f","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1702","glassrapidha","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxKsmOBfc8uGviBv3w9XxbqxV1HOtia9QRQlZPMnBMJI"},"signature":"ZLDz1SXeQ1+06nAJxW98dpJ+ECSB/iNpNlqqYDJuvxI6N6dbFxD6sF8+ESDJpVJdQByP+IXlliXNakPnyzvW8w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g9y3s3gg8fwha798tgg04tzksuuxdz6mgcj57f","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1702","1","1","g1g9y3s3gg8fwha798tgg04tzksuuxdz6mgcj57f"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxKsmOBfc8uGviBv3w9XxbqxV1HOtia9QRQlZPMnBMJI"},"signature":"pdgN/9GphuMmczxYzMHqwFHv9/JzYytMuk0LpNEbfBkHHBu53AdS5acppEC2DUKzFvU7xUoaxU5uRLgNtr6prg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hyrlj2nlw0tn8ew0p75u2pp8vysp9f4cq62hya","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"M26TTe7BMyH0hWT03wnYGKlqAdQrNKXHepuicCSURNUH0Fp2rD7juK5kMmuIMIzerUqB07ir4Wgxo6YtsAjVLA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hyrlj2nlw0tn8ew0p75u2pp8vysp9f4cq62hya","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","anglefrostn8",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ark9tGzS/MwomAp9qNdyWSorXZTVyQ5EEPMx3LTTSvNF"},"signature":"3dj32aM7LvD64b3QASd1a17Zn0OUmNwU39Yh+MDmzxAD1t9cdXD7y64pBT9MJq7Jp7R+X/1OB/GE2Sy1CESLig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hyrlj2nlw0tn8ew0p75u2pp8vysp9f4cq62hya","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["anglefrostn8"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ark9tGzS/MwomAp9qNdyWSorXZTVyQ5EEPMx3LTTSvNF"},"signature":"+I5IwqH0ykAq4SHmTTv/Q0ySirYijMQqzzp7LBYqhn89siHAE1JOZCmRjuDn4GNHfJZWkL04/iXxLtLalZ4zew=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hyrlj2nlw0tn8ew0p75u2pp8vysp9f4cq62hya","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1703","anglefrostn8","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ark9tGzS/MwomAp9qNdyWSorXZTVyQ5EEPMx3LTTSvNF"},"signature":"9eZ0mkqtYTdnwiCubMCI3aSvOPQRaO/YLoUkxUzjBm1eiL3zZ3Xh6/i2oz0MTRBJS+pkRf64+AWrZzZglglLCg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hyrlj2nlw0tn8ew0p75u2pp8vysp9f4cq62hya","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1703","1","1","g1hyrlj2nlw0tn8ew0p75u2pp8vysp9f4cq62hya"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ark9tGzS/MwomAp9qNdyWSorXZTVyQ5EEPMx3LTTSvNF"},"signature":"sOw4/HSTwX+y3IGBx7ZJPfYMpAO34AbMiAWVqwJCJopjzQjG+IowY+akJeshCbR96wfy0cPwJ83lrX7LERYLuw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g192vjztkvcjgcqwuvtu7d74vrz8vvttmr8ts8ev","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"MTDszA+9OLp9oi4+JV6kvLxVxEryoPv6u7T0hItLRkltrnObIquGZWgN19ZeTIG2AwGd4GN6fKi01hm9ABAFqg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g192vjztkvcjgcqwuvtu7d74vrz8vvttmr8ts8ev","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","songequalcq",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0/rcxqhibpYNPJAZO8UepdSxekVFRLQtKZNS6bDi7+t"},"signature":"rcpMwRwnaL5JYvxFUrMeYZjXRnhQN/vzJvAtp5moYwooZaHWKJvmKGorXMWU1uCp2wOTdQo0IzPIWU3c5tdO1Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g192vjztkvcjgcqwuvtu7d74vrz8vvttmr8ts8ev","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["songequalcq"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0/rcxqhibpYNPJAZO8UepdSxekVFRLQtKZNS6bDi7+t"},"signature":"RvYwTbOFCaOkRXJiKj/7zokjIK2l55NwRJ9KZdHsy98xLEjqZ4PRiYrR7aq5Ga5wdu2fuK6fIPENCgcs/2a6vg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g192vjztkvcjgcqwuvtu7d74vrz8vvttmr8ts8ev","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1704","songequalcq","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0/rcxqhibpYNPJAZO8UepdSxekVFRLQtKZNS6bDi7+t"},"signature":"f3NezLqIh7AsbN80BTmsGszz4oIe5Py5ts2jTvc/oncVeKMi2cNcXrZ0WnYFAr+iBR6MihHTQMP93z5QL2At8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g192vjztkvcjgcqwuvtu7d74vrz8vvttmr8ts8ev","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1704","1","1","g192vjztkvcjgcqwuvtu7d74vrz8vvttmr8ts8ev"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0/rcxqhibpYNPJAZO8UepdSxekVFRLQtKZNS6bDi7+t"},"signature":"aX0joYPYIEBs7VqA9/WC+oi6pAXcu9buk2jRrJgxS/ZEkptzxyqIMPgTXG9OgGZph6c2zdspBrouFQWC3muNzw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hu6e7mjfwwp4x7ewrz55pmat66mcaya3wd6gxa","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"i9+I5ozTsOwuz1xMmMtBTRLk/4FGr+WwMCUdzsju7NpKiFodoJk2igmZIJjxM5uEKwtmOrcC+eUMlpcqdpWaYA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hu6e7mjfwwp4x7ewrz55pmat66mcaya3wd6gxa","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","firesolution4x",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiZ+oloNac6/6weYXtGKgDOlQsQC4KpYgl4wTK8tobJh"},"signature":"tiOLMSTHhA518457Pfr0DuUqreUycINt1OgLgPxz+DcH/w2zJUFFNB4knpwp2i8D72Ytlp48dH6dbm3YRxcn/w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hu6e7mjfwwp4x7ewrz55pmat66mcaya3wd6gxa","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["firesolution4x"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiZ+oloNac6/6weYXtGKgDOlQsQC4KpYgl4wTK8tobJh"},"signature":"gwUpLjt7YEHPv29eNO22QlLUzGZrcGUP0IZRmWXL1esU7QDqr5Yj3Ir/fRd6hWoHXYIQrekYUlOYF1phAUUbyg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hu6e7mjfwwp4x7ewrz55pmat66mcaya3wd6gxa","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1705","firesolution4x","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiZ+oloNac6/6weYXtGKgDOlQsQC4KpYgl4wTK8tobJh"},"signature":"HR1B8hqpp9Dq2ZQ3icF6eQL8NjNidTruuBtG8UAngKEpyz4f9vJOOMWXrhL39GLbUhuzfLCSOZSCaJNyKSpNqQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hu6e7mjfwwp4x7ewrz55pmat66mcaya3wd6gxa","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1705","1","1","g1hu6e7mjfwwp4x7ewrz55pmat66mcaya3wd6gxa"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiZ+oloNac6/6weYXtGKgDOlQsQC4KpYgl4wTK8tobJh"},"signature":"42SjfC3sNFdaq/ByC7LpLwLMmW/0ccsjEHDo5DscJ/Q2kPDjH2BM8LJLlQZH4Q2mErKbjg9bQNzXRqS1LHDNvQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jk55m4ry4gqa6mmegy9quywhlwtlj2aw3ljd6z","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"lvWOp/Dps9vZODX+OwMkjhTXRPiQt61tCFl70TMG5/lM/8e8RTSLFgyvDEWYzTFESWy4kBeYcSItVIwe8Fvr1Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jk55m4ry4gqa6mmegy9quywhlwtlj2aw3ljd6z","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","absentuniforma6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8iSQKqZrWE6rs1fcOGHkfQK0bOMbR7MyBbjT8ZVOE0j"},"signature":"b1+psg5kRlolo/PcT8P5oZGv7lftw2g0AmwTtUnetqZLgBnDzkFmNA8/1JkpRojhRmWU/f0OFoZDdoTTArjOtA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jk55m4ry4gqa6mmegy9quywhlwtlj2aw3ljd6z","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["absentuniforma6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8iSQKqZrWE6rs1fcOGHkfQK0bOMbR7MyBbjT8ZVOE0j"},"signature":"98mcDoyim1DvD4xQpidiPuJ/iwKEO/dGR7CfIaKgbuN1C8GbT64r9so0DJDatOkWQJvZg743ZvAjqYl+6EZQNA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jk55m4ry4gqa6mmegy9quywhlwtlj2aw3ljd6z","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1706","absentuniforma6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8iSQKqZrWE6rs1fcOGHkfQK0bOMbR7MyBbjT8ZVOE0j"},"signature":"0ZcvZUTlHUOPOfbXsSHPEC1ZmZ7wrMrKsZnpEWfISAIpto5ns2XWDxgWxSyMrS0RG2YY5dzBtqDChscCk7LHZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jk55m4ry4gqa6mmegy9quywhlwtlj2aw3ljd6z","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1706","1","1","g1jk55m4ry4gqa6mmegy9quywhlwtlj2aw3ljd6z"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8iSQKqZrWE6rs1fcOGHkfQK0bOMbR7MyBbjT8ZVOE0j"},"signature":"ov61Yvxgw5DxJyMlVozn8/pbKYMe+pQB11ugb9/PVOVBYAUQVdQd8IRQk+2iFAp5H0y0PUYy6sKvXuCeIKNxPg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1cdnk7gccn2jnrlhd6huxvs6wlkumzk6cdfgvzv","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"mdI4hROEdyH2xmnpt8PYq22nAw2PPEI6I/klchaVU0BEfCDnjw07lqU/dTlZnvfHSj5+3Zx9SWfNu5cg6t6lHw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cdnk7gccn2jnrlhd6huxvs6wlkumzk6cdfgvzv","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","settlesixnr",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlkJpdVCaq72xIP20pHwsc6QljCwb5amojPFujN5QTra"},"signature":"Qi0AS5oFXRds8vQPxsoeieaYQQ71FoDS9kaLnooGGdpH8jmZshUvYPpaY/SjrXWMnlu84uZmuo5JpmjYMV4oww=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cdnk7gccn2jnrlhd6huxvs6wlkumzk6cdfgvzv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["settlesixnr"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlkJpdVCaq72xIP20pHwsc6QljCwb5amojPFujN5QTra"},"signature":"CEUlj32dz5q5sokl7B1S5ar8X/corRs69YGZZfFnUF85kHmEhfcKJkSnGgU+KBUJmiLy9OVf+sKqhrvTUTJvIQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cdnk7gccn2jnrlhd6huxvs6wlkumzk6cdfgvzv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1707","settlesixnr","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlkJpdVCaq72xIP20pHwsc6QljCwb5amojPFujN5QTra"},"signature":"CxeZMd4Z40KI9Km1t5ykhs0pbSdDN+dUxo8Z8weU5I1o9Ook6xqcHDM14WvzT6+3JfQlN7JoYgBqBsVUdM0yqA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cdnk7gccn2jnrlhd6huxvs6wlkumzk6cdfgvzv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1707","1","1","g1cdnk7gccn2jnrlhd6huxvs6wlkumzk6cdfgvzv"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlkJpdVCaq72xIP20pHwsc6QljCwb5amojPFujN5QTra"},"signature":"WGjpxSnHfChS4ewwkyJ+POcw+o5Py0KKpWqKpOUnMgQGmjyD3sqtG4tDvfGvTuFZcPbvK1z2eUO4FhGSIx5KOA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1l26ra3x3t5wshs05t23l244tnyr6xvrdl8w4mj","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"4djUjPfiefL2euubGjvX3dkLenB7H4N4G3NeUjtQboBuCkxjaUTdi+nUaWkGTWJ1i34COsmKku1/zXzrfso2ZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1l26ra3x3t5wshs05t23l244tnyr6xvrdl8w4mj","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","itemalbumsh",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah2J8Tv3DlNKTgzVjJ+WFKbTt4kPlsZC/zjMsA3VSe8k"},"signature":"uyCPwDTJMuS3TJ557N/H/ItwAvzknOCSDCguiDArys5Ej1OFKfr8gHzM5aOFV/O1KpgYmTNKildwi9W5Z39aDQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1l26ra3x3t5wshs05t23l244tnyr6xvrdl8w4mj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["itemalbumsh"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah2J8Tv3DlNKTgzVjJ+WFKbTt4kPlsZC/zjMsA3VSe8k"},"signature":"Jc+nhnVjH0L+Ds+7orucG0nRgieetMskzZzGdOxC6Kx5Lhz8QPKZj8uCfoDGrNn2YXl8K8LhClKpR7qIJoboZA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1l26ra3x3t5wshs05t23l244tnyr6xvrdl8w4mj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1708","itemalbumsh","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah2J8Tv3DlNKTgzVjJ+WFKbTt4kPlsZC/zjMsA3VSe8k"},"signature":"uZKTiSOVtNRM+dPXeqWl6IOAGa2q0vRmj3XwSsiZgp1DtUWsonbY6EbScoSM8GkTr3cHa4YdY6hKICpmxe4TCg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1l26ra3x3t5wshs05t23l244tnyr6xvrdl8w4mj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1708","1","1","g1l26ra3x3t5wshs05t23l244tnyr6xvrdl8w4mj"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah2J8Tv3DlNKTgzVjJ+WFKbTt4kPlsZC/zjMsA3VSe8k"},"signature":"Ugksa5dOwVfid8TK6a7xJ7QIDeVTacW91nuLP5AXDdBzqhp6R3yF9tByM9zXcRrA6apHgYlj9TUUYWQAMkuwJA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jv9wsl83sh62avk36jld9lnlhy9nlnmlyvazxm","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"4BsuXbRlWl6u8DoAXNrM3mG7w/+8DpAdGnPTlK4zty1Ua2TYK6Ji1U67FRRCYKPUzsyPiFDIFFcfJ5ptjYSjBQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jv9wsl83sh62avk36jld9lnlhy9nlnmlyvazxm","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","vaultrhythm2a",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArrcxjCS9b2k2kAt0y5kDxkgCUkb+naaTKnkkQpNbPtX"},"signature":"5EkNQ97PP7LiiIlia8DcfMZnNY/fptiWTvvpdzRi1WBluJkpmHfC0+SJNNCRV4gcOVwo+G8nk6RbIs/QcujE2Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jv9wsl83sh62avk36jld9lnlhy9nlnmlyvazxm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["vaultrhythm2a"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArrcxjCS9b2k2kAt0y5kDxkgCUkb+naaTKnkkQpNbPtX"},"signature":"sPptmsXYIeTVrWxrFXVA1ht51QQ61g09qnLyA+2M5mh0D72hLon53wv1tbqRhrn25H8dgCzfiHQOhqpt1t1ESA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jv9wsl83sh62avk36jld9lnlhy9nlnmlyvazxm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1709","vaultrhythm2a","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArrcxjCS9b2k2kAt0y5kDxkgCUkb+naaTKnkkQpNbPtX"},"signature":"3iw3iYQo0Zzkbr5mm8lhyE2JCZC/uhye8U7Bxr59su9Qwbz7x9a84TAaKgmMa9rFCd1AKeUNNgLg591ZT4zZCg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jv9wsl83sh62avk36jld9lnlhy9nlnmlyvazxm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1709","1","1","g1jv9wsl83sh62avk36jld9lnlhy9nlnmlyvazxm"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArrcxjCS9b2k2kAt0y5kDxkgCUkb+naaTKnkkQpNbPtX"},"signature":"f97XIL/s8Wu6gznKrKuFePWrOZoHDuXn7meRtfVv8NUWITs91bQJsmtIMVchjZAurhFTOQo1IO2Mf+Yo4rlBqA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18554zr6nksh5c0c4dkft2dzs7cy4jf0yv5m6ap","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"pXSOpfapCgrm5a98vNLcCV9c/49R8ESsefU82bEsgu4QxFsslQ9ot9OLRRcayXQl+0pYOx07089jkFrt5LFufQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18554zr6nksh5c0c4dkft2dzs7cy4jf0yv5m6ap","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","crafteducate5c",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al1mgtsa/d5ZkvSvrX07tSUF4fyWyMCi6Onlq7K9IcMU"},"signature":"gBAVbCPjoiT7pFQVphl9GLCxHzy8IRFDXixCihfX62hF3+qvGgXvjVR+KsOXFO1mB0SEIi0xn9/z5iZfxq4Tbw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18554zr6nksh5c0c4dkft2dzs7cy4jf0yv5m6ap","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["crafteducate5c"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al1mgtsa/d5ZkvSvrX07tSUF4fyWyMCi6Onlq7K9IcMU"},"signature":"V5mIseeCwr1Er4l0cYDF9SHETgcvPhfkev/5n8xpQMoiL4V+Z8HbTbbDXwG/76FdaqjG3KRHjrp4Q2l9q5ewlg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18554zr6nksh5c0c4dkft2dzs7cy4jf0yv5m6ap","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1710","crafteducate5c","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al1mgtsa/d5ZkvSvrX07tSUF4fyWyMCi6Onlq7K9IcMU"},"signature":"7BR+V8w0DBRILtwMU5gm4/EVIPuH1wUHLzjOxi4U8E0Qr31gY8nec020Hd9x5p4vKI87pIV0cQUwqInicXsacA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18554zr6nksh5c0c4dkft2dzs7cy4jf0yv5m6ap","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1710","1","1","g18554zr6nksh5c0c4dkft2dzs7cy4jf0yv5m6ap"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al1mgtsa/d5ZkvSvrX07tSUF4fyWyMCi6Onlq7K9IcMU"},"signature":"KzI2etZsOdr/EwIF6zmJnzrdtEYWj/OfM/WnOWpzevZmtUn/tjWQQEZxEd9edkA6cC0k75XghgVm3Iu+t/cb7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1f8f45vsvqw637a3qdaj7548dgnu6ksvqlnza7j","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Rdp1RVp6O3FljonY9+zZ1DGAn1AIZO0EPBkhp1lMIE89XttAeekyxxMrFBRGxJIb3xTiNeQ6eU8MyI5JYl1UiQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1f8f45vsvqw637a3qdaj7548dgnu6ksvqlnza7j","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","cautionenough37",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A25bJK1335GgPISonAjQ6H+miezpioy/1Yl8lhMDHc3t"},"signature":"bbktte/kqQG9fBAmu0jCJai3LFtWl9FEONvRXK8wQS9cqpkDejB5BiICrdUAQ3Hl+8gKzO608GnonpXnrKD6UQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1f8f45vsvqw637a3qdaj7548dgnu6ksvqlnza7j","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["cautionenough37"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A25bJK1335GgPISonAjQ6H+miezpioy/1Yl8lhMDHc3t"},"signature":"x5OFoAnuF+B/2n7hA91Lkl+2SqbQ5fZsPLIC/6IdKIxASbXBzS/HIwVAKKeSZo57WTbbPFgN/VHu1peUBfNfjQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1f8f45vsvqw637a3qdaj7548dgnu6ksvqlnza7j","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1711","cautionenough37","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A25bJK1335GgPISonAjQ6H+miezpioy/1Yl8lhMDHc3t"},"signature":"wAhnRdPLAoulTprhnDOMP3VCkDd5gZb5p34VLRSUq8hOTjfHmQjq+dEo3aAtXCrp/92Hy0QaFzjGTXawkkKXKA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1f8f45vsvqw637a3qdaj7548dgnu6ksvqlnza7j","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1711","1","1","g1f8f45vsvqw637a3qdaj7548dgnu6ksvqlnza7j"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A25bJK1335GgPISonAjQ6H+miezpioy/1Yl8lhMDHc3t"},"signature":"/+8n6j2BYPfNPS/f/FGVwTY5WcgBtjKYyJiV+j6UlIt+akEBMd4sUlpwbym+GYibK+3NzWVISEbJDZKBTxpmfQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18kmwcqut37hhtq2tma93a80ahql43j9qnpu7uh","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"K0thyBKHAdXS8sHXhx/rerNsZy1rC1x7uezRZUXnphdqLaMDA0dH5bgBMvPtffALPyoq7cES3JD1OXLnhVDAKQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18kmwcqut37hhtq2tma93a80ahql43j9qnpu7uh","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","sidestemht",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay5tqF/mwG8QuPV7qgSxSTAmI0wezERSdKvmSORzvmTX"},"signature":"/ML4vz3woJbbf14lIme9BmgNVST8O/6DGvxlB0pEXGZooU91unEvCuDL18LIXGcdKJwTQhbERbLCvX6QJe8ybw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18kmwcqut37hhtq2tma93a80ahql43j9qnpu7uh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["sidestemht"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay5tqF/mwG8QuPV7qgSxSTAmI0wezERSdKvmSORzvmTX"},"signature":"CjrK7GIV0H1mGopyciPHqSGHA14iZ90cXivMZQWzq1ZMdmWlAa+w5LVDHoDhJoiflUL5sBM4ZfNOrmXa8rrpkA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18kmwcqut37hhtq2tma93a80ahql43j9qnpu7uh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1712","sidestemht","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay5tqF/mwG8QuPV7qgSxSTAmI0wezERSdKvmSORzvmTX"},"signature":"EwM7QSRqGE1SW7M6oSxmDMjIUVgei/06fiNWaxdIyd8RkvIodPdr8jpOCN8KmOQ9573jvekoMbOIwmG2lnjsQA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18kmwcqut37hhtq2tma93a80ahql43j9qnpu7uh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1712","1","1","g18kmwcqut37hhtq2tma93a80ahql43j9qnpu7uh"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay5tqF/mwG8QuPV7qgSxSTAmI0wezERSdKvmSORzvmTX"},"signature":"I9GONJ4ThFxU2r/fMCpvl1ylRrQXC3OcqcU350qWQPosbttDfS4s8fI7ArtOOZF9B4pz8awjeKgnWgA9cUvBzw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1w7ywrc726392xvhcj6m0qyhkp82kn05u59yht8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"iVvEdMv6mArn7jTGZUYa7PynU7p0wSDZklIw7QjruCs0r5KMr3PzzuKZOBZ5M4PfJx5QZXlY17JSVt7wP5rDyA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1w7ywrc726392xvhcj6m0qyhkp82kn05u59yht8","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","randomwater2x",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0YH3pmpTxVXxOVgJUo/UxYAnkoIdsvw1zTfAHJ9hjN1"},"signature":"Id7aJQTwqqt51Y7Uq+wbF1pTWYnXYtct1dg9XhAOvEA6jaQ+gh1Hq6rVcstcuh4hVchceMGvyRMYHm5qkVQAjw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1w7ywrc726392xvhcj6m0qyhkp82kn05u59yht8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["randomwater2x"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0YH3pmpTxVXxOVgJUo/UxYAnkoIdsvw1zTfAHJ9hjN1"},"signature":"Pk4YYciJS0QGa60whBmQsrZVAOQyTF4NEHnYWVBFWkxfRt2B0JqXtsouWsX2C1SrefmDXJIBYaqF+Hv6t8qBvA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1w7ywrc726392xvhcj6m0qyhkp82kn05u59yht8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1713","randomwater2x","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0YH3pmpTxVXxOVgJUo/UxYAnkoIdsvw1zTfAHJ9hjN1"},"signature":"yJE2FnahyVEa7Hg70i4gvztgvC/ipvOJn04p2rflI0Z3DeAu5SW0jcZI3Jlcqal+DKusABgaPzwBbtzpHwR7NA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1w7ywrc726392xvhcj6m0qyhkp82kn05u59yht8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1713","1","1","g1w7ywrc726392xvhcj6m0qyhkp82kn05u59yht8"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0YH3pmpTxVXxOVgJUo/UxYAnkoIdsvw1zTfAHJ9hjN1"},"signature":"0RhYA/Degll9zFSYQ1omFwct22vlfnJVSa8JMzAvhMFNpG3jgPCPHMHcsSDisbIuIg+i1QR7nVvI4gW4t4Hsgg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18amdc7n5z7qt6r7lkywzcf6lrhj4fdqw28z5wd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"22f1TAxDeN1V5W9BqcUWFbmcpUKZjO8wWgMeX2PvIlVyWGkGPZVbYBJGFQOlP0uZaVVRjE46R8oO+Ik0MwYYvg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18amdc7n5z7qt6r7lkywzcf6lrhj4fdqw28z5wd","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","figurerightt6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzUXIJ7XOY6AHXOM7XmtJ2+n3LzMlnxRtcCq9ZhIgv1i"},"signature":"s1B2fyRodjkIZAOjoR/h6laB0WRAXw/R3eC6nbLtMdwVQ4BOi8Qh9hxkN/zk6JtfhU/DRHQoelxllttui5Lnog=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18amdc7n5z7qt6r7lkywzcf6lrhj4fdqw28z5wd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["figurerightt6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzUXIJ7XOY6AHXOM7XmtJ2+n3LzMlnxRtcCq9ZhIgv1i"},"signature":"O4tDOymzhZKeKFeiWMLW7RQC09gOTO/MuT5Mxb/HC0AXDsjlM0USJWEMDme0x0Fuwh2DWvkqjf5JiOSPnkRq/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18amdc7n5z7qt6r7lkywzcf6lrhj4fdqw28z5wd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1714","figurerightt6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzUXIJ7XOY6AHXOM7XmtJ2+n3LzMlnxRtcCq9ZhIgv1i"},"signature":"Dsea6fMZnPoHQGw22YakTdWLaLfxVrWxS+a7Ey2YyJop9WZ7OvdlgAF88ZARAeFo8sl516IxMTapc7cDA/fZHw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18amdc7n5z7qt6r7lkywzcf6lrhj4fdqw28z5wd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1714","1","1","g18amdc7n5z7qt6r7lkywzcf6lrhj4fdqw28z5wd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzUXIJ7XOY6AHXOM7XmtJ2+n3LzMlnxRtcCq9ZhIgv1i"},"signature":"QRidzGeqk9emhxyvmms5DRgH2zWMgRNPogYPiCPyUJI6xruAyFLL29cVt3ff3lHsFa34rqaOqbNnjZidYpxsIA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1300j60jaylu80frvpy8m663fss7zjcu84xpws3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"/r44+I34lbDGjTZziinvyfDd54YCTB0ORejG5YlNW+4FUwQtSBE8GykHF0MSp5kIlPrduYKe2k1tAWglz8r1AA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1300j60jaylu80frvpy8m663fss7zjcu84xpws3","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","occurblanket80",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApLUnWOLVHTQnH64AXxjrkh9StMixnFIKcaRRo8OFZzy"},"signature":"mn7kQRA3R4gs4quusz/aydZTY6ky/LJ13aI8VCsKzxtM1jHh2qcu8L5JkrJMZN9MmpGUA1G0PTpcYiV1CydrOQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1300j60jaylu80frvpy8m663fss7zjcu84xpws3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["occurblanket80"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApLUnWOLVHTQnH64AXxjrkh9StMixnFIKcaRRo8OFZzy"},"signature":"DaTEnYJTgCRtu7VElUGWBh/hCxztS8bxgvBuTSoIBc4HpN886n06t2lYv20orHkSGdPZBNrAy6/JwiAuOLR+tg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1300j60jaylu80frvpy8m663fss7zjcu84xpws3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1715","occurblanket80","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApLUnWOLVHTQnH64AXxjrkh9StMixnFIKcaRRo8OFZzy"},"signature":"HN/+7SWW1oAGSvyE/avfiv9BBR+s0CA1A0PJNuzOfnIoqCWfSBibrHCgizS/R7hhGbPnpN3Qp/mLCfJ2s0AwFQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1300j60jaylu80frvpy8m663fss7zjcu84xpws3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1715","1","1","g1300j60jaylu80frvpy8m663fss7zjcu84xpws3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApLUnWOLVHTQnH64AXxjrkh9StMixnFIKcaRRo8OFZzy"},"signature":"nm3zkFUVJPatFpuraidISDbxUkFo1Zq4WqC/4UnG+WZcaGRixHwfE0zXUwbfoQLe7Ay7wicQjFH1xxSFK1lzSA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1a9sacu20pgerrtuje3jce6ldtss30lv2f0lnk4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"GZfNoO/wJXHrw1LeqzkEqSLogHi+72vPECs/ZWanKUELqDuJkHq/KYywhUjxoAkBNJVaZEz6vmfxr54KGetuWQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a9sacu20pgerrtuje3jce6ldtss30lv2f0lnk4","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","enterplayrr",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuT4D9Se+O0NaVcYHMK9hge5+tVeorVnxHHmGknuY46B"},"signature":"jnXRZ1GpFOh2ruq3OFJjfN1mRV2UZalLirzgVtXgO/NRLY+D41QkUKU5oUdjgCtGXXP7qUlFxvYDcrU7SQdjLA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a9sacu20pgerrtuje3jce6ldtss30lv2f0lnk4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["enterplayrr"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuT4D9Se+O0NaVcYHMK9hge5+tVeorVnxHHmGknuY46B"},"signature":"LHMwTiALezju2qDNWYHTYFGLNCoPNAvKWmSX/HurithTTeIjT7q1VUYaavjljMzwFrXoZDh92dnh8+aCFjC7UA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a9sacu20pgerrtuje3jce6ldtss30lv2f0lnk4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1716","enterplayrr","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuT4D9Se+O0NaVcYHMK9hge5+tVeorVnxHHmGknuY46B"},"signature":"I4CNBlD/ZwbzipKkbw5IAdX23g0w/i/kDoxqTkLh+fJLcDQVUm8nSraIfbRuTN+Uh72TfPUY+2NNpE9nuu1qbA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a9sacu20pgerrtuje3jce6ldtss30lv2f0lnk4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1716","1","1","g1a9sacu20pgerrtuje3jce6ldtss30lv2f0lnk4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuT4D9Se+O0NaVcYHMK9hge5+tVeorVnxHHmGknuY46B"},"signature":"F4Ztg+PdhoTmDi5tLpzmxvHsT+56DoCKqbH+kYxT9ZcG1zzI9sx/323PyAEpwn+AphksR8C/jiAV5w7ZljPoIw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1z0ly7n07rrgm4pleneyt3ftpc6x6d8rr32auvd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"B+CcqU/yeF4PB1AKQf2BX4Up15kKPGrDLTPVG6bp39Qb5TNwfzssKjn+WrNqJCMgmThayjlhH75CoYTZoTjcUA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1z0ly7n07rrgm4pleneyt3ftpc6x6d8rr32auvd","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","foiltonguem4",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiFSvLBYiDaU6inqiZJuxpdcQEp3JhToYeo2NHluKxPq"},"signature":"N/ZFlJf12DIoQCNZ5Rl3ZNTf0JCZ2m8IbGoxcsYSuSpraNUmo44k6OAw+ZVCzUGo35bz1uzzKWEAmBJkxrduWg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1z0ly7n07rrgm4pleneyt3ftpc6x6d8rr32auvd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["foiltonguem4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiFSvLBYiDaU6inqiZJuxpdcQEp3JhToYeo2NHluKxPq"},"signature":"CUa8gNO9ZT1ULqPdZ+QwRroLG1n9iMr2+MoMtyGdvxRdsC4ODtCmrhZ6/VS8GuohatnWvzrPZ+ytEDDoHt8ZYA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1z0ly7n07rrgm4pleneyt3ftpc6x6d8rr32auvd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1717","foiltonguem4","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiFSvLBYiDaU6inqiZJuxpdcQEp3JhToYeo2NHluKxPq"},"signature":"4Pe9VN7EaAPs6QMUIKltu4/bmFqZuQjDl9IEgiwPYvQbVHOwqIgew69uKcCe7Z0efMQy+32IOOmlas10CutslQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1z0ly7n07rrgm4pleneyt3ftpc6x6d8rr32auvd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1717","1","1","g1z0ly7n07rrgm4pleneyt3ftpc6x6d8rr32auvd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiFSvLBYiDaU6inqiZJuxpdcQEp3JhToYeo2NHluKxPq"},"signature":"DN9OZnqh3H/l+scEHJuHBkYTcV65CPqeee2vcnNNANdtyHyugUbIrndukz7UlDqlwWeE2B5SVJXhGQG9Qa+oug=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g13ud5hd4cutypy4yjt3c72swrped8k7c84pefpv","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"o3l87xuRpLf+ZDNqHAokvahJ62zn6kykUo7ljShxFPxIz1MmchRN2AhCm8h1UveSse0vJKpvsWQh3D1bdXKM3g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13ud5hd4cutypy4yjt3c72swrped8k7c84pefpv","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","salmoncargopy",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Amm2qQay5MEz0R4F7YgPSKkIsGOIDouOznytQieVhsuM"},"signature":"aw9/SNAuPpP4KAcY/L1Lh2yYKY+rH49VWGz1bhVcSdoEIdYQW6v5nDS/eRmGmW0Prg4QliGzsYAczOAJpiMjSA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13ud5hd4cutypy4yjt3c72swrped8k7c84pefpv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["salmoncargopy"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Amm2qQay5MEz0R4F7YgPSKkIsGOIDouOznytQieVhsuM"},"signature":"u+pikhY8WdZ7CrZM3aLl2p+cwfHSdiqXdtPlyi30PhMIK0W2n3RVf+oWJJydlqJeDLkdllA6sa08B8dIWqjXFA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13ud5hd4cutypy4yjt3c72swrped8k7c84pefpv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1718","salmoncargopy","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Amm2qQay5MEz0R4F7YgPSKkIsGOIDouOznytQieVhsuM"},"signature":"Wm5DJVVj5TftFJgCXj/IOrz+Gdnk1FEc+NBg7P3M9758fjhp1jX6koVf1tg7NEKp6BcwnLWHkEhBBCoFoBe8FA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13ud5hd4cutypy4yjt3c72swrped8k7c84pefpv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1718","1","1","g13ud5hd4cutypy4yjt3c72swrped8k7c84pefpv"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Amm2qQay5MEz0R4F7YgPSKkIsGOIDouOznytQieVhsuM"},"signature":"8lrXruwevG5fOcNv40Y7gz1Ppgf2KBpQV+RKFDKKckkZX6I6GfUi2SHMwNqRMRpWlqhvXdHZZZ5VS600BKvEfA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g10el8k5064r9guy44uq0vltld5ksvdk3lghmc04","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"lo1bXgSAZjoftcOxRzL30qW0tjTEtjj6z76G36ukaTNRrifr6mSgGukTI9Zu1E0j+qwWb5/jf3/aTzN6QoLHdw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10el8k5064r9guy44uq0vltld5ksvdk3lghmc04","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","casualusegu",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AodICYFpNNNMk4U3h+QxOKqDdZyb+hviry0gGLr8Is7P"},"signature":"VXUMMMTHMm1IS2zZ8Vn/enxrOKIsiEJkk3hMhtelYwMin8kmthPplZvRvWAp3GP7KpD5mVVkFtFD5Kn7ADVHlg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10el8k5064r9guy44uq0vltld5ksvdk3lghmc04","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["casualusegu"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AodICYFpNNNMk4U3h+QxOKqDdZyb+hviry0gGLr8Is7P"},"signature":"gk5QnsriXMTg1bOA+grjpfgqfQWURaes5nLSDb69Z5EIA6m+R6MNycCxIU6KsgnpQUIW98jB9nUbwiTmRl9toA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10el8k5064r9guy44uq0vltld5ksvdk3lghmc04","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1719","casualusegu","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AodICYFpNNNMk4U3h+QxOKqDdZyb+hviry0gGLr8Is7P"},"signature":"OYalmLp3+dvrCYlTzcsXzB3/pIn9dDMQiruEgeezDaFQUbsOIMuLH6vLGq+Hm5WNNEDKHylwkNS1pLfu5llxNw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10el8k5064r9guy44uq0vltld5ksvdk3lghmc04","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1719","1","1","g10el8k5064r9guy44uq0vltld5ksvdk3lghmc04"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AodICYFpNNNMk4U3h+QxOKqDdZyb+hviry0gGLr8Is7P"},"signature":"UoxjUkBaUSP48VPbc4uj7gPQ8qW/Pwj+vLsVnuostzcY5Bo0GFu8ZOeeZet5ThQ8yY2ZheUxpqN8NJNIfApRTA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1nxdsug3hzj0vdyj3mfseyd60y30jgwmvhh4jgp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"pR1RDVQoDAB4psmJpUdoHtWLmjL+gjdTqDYdwzpynbsKDjHHfR8LhpVaRwH/UmDAyLtpFG2h2GNzLPBNksFjGg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nxdsug3hzj0vdyj3mfseyd60y30jgwmvhh4jgp","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","guardnightvd",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A45cr1JwuXsMSod1xnQmxYqXs5zzVXmsHkzKckjVZBdB"},"signature":"Xsyqt7fD4O8B7NQlo+aXq9suOX0zhxZyiRwg3VSruZIOvQ63yrZFcLcyrQP+D8KiuY7g/xOzBgFANb2hSfSMRA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nxdsug3hzj0vdyj3mfseyd60y30jgwmvhh4jgp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["guardnightvd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A45cr1JwuXsMSod1xnQmxYqXs5zzVXmsHkzKckjVZBdB"},"signature":"KdoMcOEJdEebrAhVw6wRX6xgESNeCBbt1e4cwCb8vWh7hjxgXlddcBIB3suxH3zDIPgDR7dyhwjFAShP7c6gnw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nxdsug3hzj0vdyj3mfseyd60y30jgwmvhh4jgp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1720","guardnightvd","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A45cr1JwuXsMSod1xnQmxYqXs5zzVXmsHkzKckjVZBdB"},"signature":"MzvQQrzVtYO7046mDZvUKYCbS5BLgxV/ItnFn9TEmicxT1k5NhRPlZ8tr7M4OXHSHrtK8MeB/x1jlQGbdU4scQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nxdsug3hzj0vdyj3mfseyd60y30jgwmvhh4jgp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1720","1","1","g1nxdsug3hzj0vdyj3mfseyd60y30jgwmvhh4jgp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A45cr1JwuXsMSod1xnQmxYqXs5zzVXmsHkzKckjVZBdB"},"signature":"GKsC6UUAtXKOyrSHbNZRK2VbH545nA5482+x7r2bjV81TsyRs7rDnCK/ruBHipns9CUIMeQpqdmcy3UbyxWbJw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16egdpjc03r40nrewkyrakkhjpce0c4rdajxws6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"XWFDNkaA02mMhEhtBu9jpxCmi3zCilSzFISX7+kIunsZAf/kkoqIRExw3DpbG9I3HKWTYGiB5j3urPqgho+YVw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16egdpjc03r40nrewkyrakkhjpce0c4rdajxws6","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","justcable0n",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2OQpv33TSYZMAFa8yIxVReKNWBEvIKt5mW+SH2Cj4eE"},"signature":"8VZcII0t0C5DEKyaOFiNSD0qmV9j1t24+JaTjLd7g9ofzW1rebQX3KYlsbPJ2Y7jV488aNQJKy9pwXxdryIXDA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16egdpjc03r40nrewkyrakkhjpce0c4rdajxws6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["justcable0n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2OQpv33TSYZMAFa8yIxVReKNWBEvIKt5mW+SH2Cj4eE"},"signature":"Tf1ASPot/ttb9kWTLVh5fpJpoFm1JVQswv20qcFuszUNtgrfRkdP4AFfbkVk4WShoSAQq2Vt2ep3jfl4vz+Lcw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16egdpjc03r40nrewkyrakkhjpce0c4rdajxws6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1721","justcable0n","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2OQpv33TSYZMAFa8yIxVReKNWBEvIKt5mW+SH2Cj4eE"},"signature":"i5z2EroLI97OIx5gB6emHoKYzvt25/CJoRRlXhiK8sgPgZRKijHbMQe5/Z/oAqZPPCR81xLLI9zRyzQDX3pppQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16egdpjc03r40nrewkyrakkhjpce0c4rdajxws6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1721","1","1","g16egdpjc03r40nrewkyrakkhjpce0c4rdajxws6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2OQpv33TSYZMAFa8yIxVReKNWBEvIKt5mW+SH2Cj4eE"},"signature":"j+yTew0lUiMsmiytU2297ooNWKvLVZ1id7B8LjYwFFJOzRTjphwPodddrrx5tcG+3FRbtmfltlpJeRgSb76zhA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19yxsf7pdg3tlatp97f4skf9l0e0cmjq4jmf4rw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Berr/a7e3z9Sjhe8dGdUJZSV3SOO+e2qQ8t0ZAMdgq0pcvWMPT2w4jP4kKX3ufWo/tPzgx9HlJmtIW2JycqyBg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19yxsf7pdg3tlatp97f4skf9l0e0cmjq4jmf4rw","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","verylakela",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3mOJrLXYfT9DCVuReXIpGLbn8sFkbwENr8WG58+Vtwo"},"signature":"tUa3wWiSWwMXiwFgevbf9raiKM/XcFEnZTgLYRkMLSIFdwNK26Jjge4+7byNmP0y8isTrjShovKTcU+1YK5neA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19yxsf7pdg3tlatp97f4skf9l0e0cmjq4jmf4rw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["verylakela"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3mOJrLXYfT9DCVuReXIpGLbn8sFkbwENr8WG58+Vtwo"},"signature":"knz6cS6hkbK2P3UWAn6E0ITU1rm5f7HmgOwA9TIZVLgOU/50xx2FdNjh2gverzGUs8bOUMjkVcGjykJmAYP5Hw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19yxsf7pdg3tlatp97f4skf9l0e0cmjq4jmf4rw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1722","verylakela","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3mOJrLXYfT9DCVuReXIpGLbn8sFkbwENr8WG58+Vtwo"},"signature":"lcAnq+yCNEtn2XjzGR02dP2z00RE1uSMogd2KW1yDZZ9mJ+AwW1b7J0SacS/iG5nLogaGKkDWlmwj0IhYA9eEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19yxsf7pdg3tlatp97f4skf9l0e0cmjq4jmf4rw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1722","1","1","g19yxsf7pdg3tlatp97f4skf9l0e0cmjq4jmf4rw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3mOJrLXYfT9DCVuReXIpGLbn8sFkbwENr8WG58+Vtwo"},"signature":"fiQNc+4o7hFmWc3OVzywDQb0cIYEOGAK2VRVhM0HdAUXMZJHOf9IW7IKHO/eo0PPDf0YadAh3K9EgruaGbvyZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1kzt2gc7ng03s66k399s45spgezs5cel75x0fre","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kz+/lUo5YAbI63mS7LgtK7InWskEdF7GnIKFToTNSxJTfJu/xD1HK8pDyyF/SrQJAMuxnzXvcyB2TOZH+JnqGw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kzt2gc7ng03s66k399s45spgezs5cel75x0fre","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","actualmidnights6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+dkWBryqa3/EsAtv1plfYoTf5IXgY7iTiYI6PFxphm0"},"signature":"coeat3S504vrZ9UaBYKnmbbA6J70LoXPVOdntJqAoj1/vdfZq1HEGXLOtzyy1BBFDZoCw87XfypmPdcUbi+OdA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kzt2gc7ng03s66k399s45spgezs5cel75x0fre","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["actualmidnights6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+dkWBryqa3/EsAtv1plfYoTf5IXgY7iTiYI6PFxphm0"},"signature":"nYDKLcvgyWpPs88J5hd+aRdt7D+IFtyEZtur8ARYO9Fv/oOn5wusk9uRJlT0RVj7KAQNDWc9VO87SMEFRJxS5g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kzt2gc7ng03s66k399s45spgezs5cel75x0fre","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1723","actualmidnights6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+dkWBryqa3/EsAtv1plfYoTf5IXgY7iTiYI6PFxphm0"},"signature":"TY18HGWePi9TKtGI13tRPQBnK/EkDAFeFe5KQ8kL08Ua8WQG88UdiCt9dGQtLg+qb+LoUCDWR1ftPRNgFzeQoA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kzt2gc7ng03s66k399s45spgezs5cel75x0fre","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1723","1","1","g1kzt2gc7ng03s66k399s45spgezs5cel75x0fre"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+dkWBryqa3/EsAtv1plfYoTf5IXgY7iTiYI6PFxphm0"},"signature":"2v3ocfDru3YW+9RMI2b+AgurnH5gqB22EgSghOazRaB3zhbBFk24bqzLi8v3CxwV/Y98+WeMDKn2P7tHgx48wg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1slxxfwcucgyqaqdkyc2uffhmlsyzk0unpwhyl4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"hQOM+qt54l/vOFsJAQHL+7x4WdqykwyE6w2HMS/BF5IJJ9AGmplr9qZJTF6hsP4LRwWg5Bk7kLYdnAnwHR4qEg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1slxxfwcucgyqaqdkyc2uffhmlsyzk0unpwhyl4","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","themethreeqa",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjTT7moL2F8OR4yo0ULBg4aLiSqUqrUcJqAXC3G7mby8"},"signature":"c+KcM66Et1VBmCIX8cDCvK+n9PDgehjxwMk7V7ATb4hKPZCIZ8iORZfvFbentzKsa8IJnE8Ohk3rLPyI3KfZTA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1slxxfwcucgyqaqdkyc2uffhmlsyzk0unpwhyl4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["themethreeqa"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjTT7moL2F8OR4yo0ULBg4aLiSqUqrUcJqAXC3G7mby8"},"signature":"6pNEkiced/rIyBQkjbsvOZoVLaUO3jM8v7h08SiKvMBxAYQlp3om7+JlsHRrHVG0q9eUPNCWevb0d/Ej6RXKzQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1slxxfwcucgyqaqdkyc2uffhmlsyzk0unpwhyl4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1724","themethreeqa","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjTT7moL2F8OR4yo0ULBg4aLiSqUqrUcJqAXC3G7mby8"},"signature":"7MvXIoE77pYsSS8dLWi2rjmR7LOBjGuchue6Q5e3JKkF2gPuJ+T6s90KhDZRF9uXyaLIqLLZoRU4+Tlay5h8lw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1slxxfwcucgyqaqdkyc2uffhmlsyzk0unpwhyl4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1724","1","1","g1slxxfwcucgyqaqdkyc2uffhmlsyzk0unpwhyl4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjTT7moL2F8OR4yo0ULBg4aLiSqUqrUcJqAXC3G7mby8"},"signature":"LN8c4QqxkpPjVOyhgWhiB0y/UhH1wpOFmR64ZfP4yZFankJuOnsw3NtUDkFLcooeE8Uw8biM/DsMLdSbTqMD6w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ekpwaxamsa45frl4j6xrldaedzrcxsrldmh00d","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"oUNzXpcisLmIPAYXTMvkyCDsfAPa1k47+l4NKCqlNuwetM4UuIJVRk4O1JYrvFqrFiLw3M06VSo5AIXXX7JXMQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ekpwaxamsa45frl4j6xrldaedzrcxsrldmh00d","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","awayconvince5f",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/3485oaypGe9Q1uJEd+jddnESLk++/OfXyHlrG2Cqn/"},"signature":"xcumvLJ9ClqVoEeWv3FpozLDvh3Ec3swR8ruFWrZDD1QY8Zvs6b/8yjWCWNchn8QvRYv5FG7JXPaPXkvZBij8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ekpwaxamsa45frl4j6xrldaedzrcxsrldmh00d","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["awayconvince5f"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/3485oaypGe9Q1uJEd+jddnESLk++/OfXyHlrG2Cqn/"},"signature":"nwkWJj1zmsa0hAr49vG8yUY0VP5dK3pCijsqEW26k0ompdojK5zbsj/lgOsgG8caSpq7dG71yui5hPUUA22Lrg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ekpwaxamsa45frl4j6xrldaedzrcxsrldmh00d","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1725","awayconvince5f","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/3485oaypGe9Q1uJEd+jddnESLk++/OfXyHlrG2Cqn/"},"signature":"0fbqs6Jbt4yTXDV6pPmcYKI4fJ8TaUMTfn7CEFqnZ0Bu7H7ug9fm+QThujzr812w5NnxvtDiKvHAr1bM2G/qhw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ekpwaxamsa45frl4j6xrldaedzrcxsrldmh00d","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1725","1","1","g1ekpwaxamsa45frl4j6xrldaedzrcxsrldmh00d"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/3485oaypGe9Q1uJEd+jddnESLk++/OfXyHlrG2Cqn/"},"signature":"5SOcoAcU/qaEJrZe8iOEHefiT3l2mDXSgvbNIVwOA3sW1JcW30sjIftqlxY0gqj+0czMzo3lSCr/fzEZKlzYjQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1cz9zywu9tp5v3gwpezs3xuv3semf337g35nu8l","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"54/yWajc0pvQm1jZ2DCB6o+NShOQKeCUxtWcI5kbLnBdFzxeZNnrho3q1j2N2NKp8qAny45v9xCC2W8lGxUVSg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cz9zywu9tp5v3gwpezs3xuv3semf337g35nu8l","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","trainmutualv3",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwdZ3E042Y0qoP7rkRjGN+tOJyQqGympkSWl/RVKdf+q"},"signature":"bX/KrXcnkLaBnHYOV15TZRRJxfRxyDTY+/lDXsMsOSQLa+8VufisA407X1zJLmk557KYN/wG8mS63cxfkqQ+xA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cz9zywu9tp5v3gwpezs3xuv3semf337g35nu8l","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["trainmutualv3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwdZ3E042Y0qoP7rkRjGN+tOJyQqGympkSWl/RVKdf+q"},"signature":"GOsbpUvk260Uh6auhegjtrtncGRxOecLlWb3CuXQmTdGdBbRxosl0zAmJ+LduXhMRlguACC8o+uwjR0MQ5Sm/w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cz9zywu9tp5v3gwpezs3xuv3semf337g35nu8l","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1726","trainmutualv3","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwdZ3E042Y0qoP7rkRjGN+tOJyQqGympkSWl/RVKdf+q"},"signature":"4UKgFjG/HFQkVplD+/807C8hGkGlafmwQablumtyQe17jwt/dkQ/Nfsis0TsBb/xDB+XDIcUAm5NPABcilGvtQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cz9zywu9tp5v3gwpezs3xuv3semf337g35nu8l","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1726","1","1","g1cz9zywu9tp5v3gwpezs3xuv3semf337g35nu8l"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwdZ3E042Y0qoP7rkRjGN+tOJyQqGympkSWl/RVKdf+q"},"signature":"rnVXKfFrIxWx3YAjvB6SxAlZn69iY7TXwrXtYzctLEoyKAmbUn84VkGByInuIgoA35znESRlzXdFSRxGTfhR7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1te7hgfayfpcv64t2h9nl4ay5d9mljeymlrzv02","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"WDayaUnkXIPKlLpoatEm7XXWea7I9+f08YpQ4e5VBq8rOXQJjlrfdvRkhmd4bP8coi1zGHVMR/HIsC3UeUwC4Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1te7hgfayfpcv64t2h9nl4ay5d9mljeymlrzv02","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","absurdcherryv6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AthE9NLn0pwe3yefecJRq51Gn/3K7/wreELA4KEz7Ji9"},"signature":"glQqLNXncdg/pumhSph3ZUakNaEhot9bUYeH3zZVs48Ntu912rkLD+SGaocHC9p3Q4iF49uG0hLS8hCcW8AvNQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1te7hgfayfpcv64t2h9nl4ay5d9mljeymlrzv02","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["absurdcherryv6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AthE9NLn0pwe3yefecJRq51Gn/3K7/wreELA4KEz7Ji9"},"signature":"tSGNIYYlh4j6NiaQQTiibXvj92NNueLpfLtblXeCzZJcMApU98iib5WGw0LKWkL5RGM/YI7RgKekw8Y0QFkNMw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1te7hgfayfpcv64t2h9nl4ay5d9mljeymlrzv02","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1727","absurdcherryv6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AthE9NLn0pwe3yefecJRq51Gn/3K7/wreELA4KEz7Ji9"},"signature":"nKSVAija2IBCCqg0Aw+PBxsLQf5qVNugPg1ghV5XdWJETPlU84f0fgQN9SPlFocZfWmlrtvdXZFrz2piwSeSEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1te7hgfayfpcv64t2h9nl4ay5d9mljeymlrzv02","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1727","1","1","g1te7hgfayfpcv64t2h9nl4ay5d9mljeymlrzv02"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AthE9NLn0pwe3yefecJRq51Gn/3K7/wreELA4KEz7Ji9"},"signature":"Fn5YgK5sI+NYvOI69HL7oNsan979QNS6Fkry3HM4QYBHz4JEN+yCLQHXWoMknB8ppiy1yihBQb7qudWpe2qR7w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16gwzfczspcgp4ymsul665sqzg2yrdzf2q6hg2w","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"7/8T478HcgrajoPjNerGWbVAi1cV0/CKnaDGG+F7oR9+z8baU5eBg4NpatPl3QbVlujL6uO59mperHWUWJWtQg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16gwzfczspcgp4ymsul665sqzg2yrdzf2q6hg2w","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","illtribep4",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7eP6zL6o8TkkCxtgp72Vx3pprQKUPIp4Ta1q1Oe2Wuv"},"signature":"tNf9KotiRTQKPKhTpgM5KGptdsEeB9gIYDRoZLePFV8xcyaaz8A8RAKawi5fJX581sMtgZ4vUVC4375TbNkKAA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16gwzfczspcgp4ymsul665sqzg2yrdzf2q6hg2w","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["illtribep4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7eP6zL6o8TkkCxtgp72Vx3pprQKUPIp4Ta1q1Oe2Wuv"},"signature":"/6J4kp1tIQJLCjex1NxhG9EPI+CJ0SSle6ez6voPZXVX1ssueV17I4BrLu4mMN053Qnn1h0szXjao3hBwRcGXA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16gwzfczspcgp4ymsul665sqzg2yrdzf2q6hg2w","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1728","illtribep4","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7eP6zL6o8TkkCxtgp72Vx3pprQKUPIp4Ta1q1Oe2Wuv"},"signature":"vikTS5FkIiCzLs3fVWfAEtZ7wEbavoUd2mqqcwXXpJ1glNQvPguhENLNgp8lPnwnHWoSggTJIpaGdnyBF9mBWQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16gwzfczspcgp4ymsul665sqzg2yrdzf2q6hg2w","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1728","1","1","g16gwzfczspcgp4ymsul665sqzg2yrdzf2q6hg2w"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7eP6zL6o8TkkCxtgp72Vx3pprQKUPIp4Ta1q1Oe2Wuv"},"signature":"gvHLe1ylREjVQfXjOR4PZRNHbgTH6FOZ6HHxQ0WZpXIqHO15I+VF6R6DL4cjTaomvuKLlkA2zUpoMZJ0cK9DAQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1u07sqzryhs28tax5qac28qlz9d56r75m03lkns","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"XmSOig2iPnVgA9f44qZbPKy2JAyBfw8LfSjH2LEoA+E9OMWtuTCRj3wF42EEljE47hGKJJfjpW4IO50MVKIm6w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u07sqzryhs28tax5qac28qlz9d56r75m03lkns","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","purselion8t",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap5gkVf0lzlP2MkKdJm1dxU+FIGroDo9Q+ZjIQf6Ey9E"},"signature":"fTxTW8kgLt8k6y05gPgmCpaXu6RuBdr+jfp5y0CSSHc/b1GKFWbR5ZVu17KQnvfQEhf5BXpoIRtP//Ccd/TIzA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u07sqzryhs28tax5qac28qlz9d56r75m03lkns","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["purselion8t"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap5gkVf0lzlP2MkKdJm1dxU+FIGroDo9Q+ZjIQf6Ey9E"},"signature":"EaiK/kf4ltFPI9cbdO9io5HUNMz2B0miXk+xW0+PGgouYD9ZcPVRtAkKR6aDfREQNy0Y78/QSGF8yZRW8CmQIw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u07sqzryhs28tax5qac28qlz9d56r75m03lkns","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1729","purselion8t","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap5gkVf0lzlP2MkKdJm1dxU+FIGroDo9Q+ZjIQf6Ey9E"},"signature":"bTyuOfyunez2sM5FawJN3KmktA4GZPLokjkSUhVEheATiMUF8A02n80slC3HXZlNF4NUS30GWP+aeC0ZdmoKLw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u07sqzryhs28tax5qac28qlz9d56r75m03lkns","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1729","1","1","g1u07sqzryhs28tax5qac28qlz9d56r75m03lkns"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap5gkVf0lzlP2MkKdJm1dxU+FIGroDo9Q+ZjIQf6Ey9E"},"signature":"t03TG3MHlJ7rRJe/BLFovHilqH1CE4B7voZkw+ieFjxDWDTMTI6Q1OKky7EZFN5ErL2SXvDdiQfJ8niPeV5YBQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1twthefl06ndjtrjaz8jmpm3le8lfcdrfvlefr2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"/7BRsJ/SKZnZbxlB4NxdgNAjNKzFi0bHcxNKOr5O3EUbfxRWOPVlD79awQkcVylLoFLcXNpiFPVsioh+zTrn7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1twthefl06ndjtrjaz8jmpm3le8lfcdrfvlefr2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","headproudjt",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax9vo+Y5p1g5/4j71ssnP6ltTg3gKmBxA++xv3qASeIb"},"signature":"NFdp+Mm2PGTH6lxI1cQTZYeSekgquPgEvDI8KQ/B/sVKSPKoqxvZPiM1pTt1rQZsSCHqbKCJjXW2I6wFF3evUA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1twthefl06ndjtrjaz8jmpm3le8lfcdrfvlefr2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["headproudjt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax9vo+Y5p1g5/4j71ssnP6ltTg3gKmBxA++xv3qASeIb"},"signature":"C0VNwyxlVC/OCHm2Gp727bOBegO1s8Pc9bAVOvg9iuBmI/Z2501bsKrQG1MVIJH0DwcwQmwPBoGatdX79OpNaQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1twthefl06ndjtrjaz8jmpm3le8lfcdrfvlefr2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1730","headproudjt","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax9vo+Y5p1g5/4j71ssnP6ltTg3gKmBxA++xv3qASeIb"},"signature":"aFK0mFUWtxlWFFwjFLQmV3BDNVsWds1U8ehD69HwiEAVScEI1oaSLmaZfLAfCVTLnbWJAVZRBSqVuZNQOqZMeA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1twthefl06ndjtrjaz8jmpm3le8lfcdrfvlefr2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1730","1","1","g1twthefl06ndjtrjaz8jmpm3le8lfcdrfvlefr2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax9vo+Y5p1g5/4j71ssnP6ltTg3gKmBxA++xv3qASeIb"},"signature":"Fe9sjE7ttXR7xhoVPIb8ZghTL3WR7jkHJw6elBmyQWlqXFqFeVVeu/rzaTd9p/JYlnicQRHIkPOn1rFLbzVLLA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1f69s68a5mfu2p7grs9an9gnxv8jt5xezkh940a","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"G0sZipjHYrn69DM8HqJaorL1vr+2e8iNvuNKKAuDELp2UiI2gHqDjpjbeCBjS2Hn8R3W4ToXoZoJkAjqTfhRmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1f69s68a5mfu2p7grs9an9gnxv8jt5xezkh940a","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","truetrick2p",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/bUD9ZdDgdHV2M9df/+WsjhH2HbqQ0oGEPQRaTdPSFO"},"signature":"qf3pUkL/elvQ63iqEQB3fDfhvsa6BzTox4DmY6UzHs9a8V2Q24ToqDOovMITpHQCxn4Lam7KrvyqH1Ola5PpmQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1f69s68a5mfu2p7grs9an9gnxv8jt5xezkh940a","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["truetrick2p"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/bUD9ZdDgdHV2M9df/+WsjhH2HbqQ0oGEPQRaTdPSFO"},"signature":"jeYDheweD+3LLMg+xhqwg70SFxdUBXjns6FDnqtoTXE7nkJC5mLfzpNnFpBGKmn0aI7eIhDGGnok8BLoZr3XDA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1f69s68a5mfu2p7grs9an9gnxv8jt5xezkh940a","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1731","truetrick2p","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/bUD9ZdDgdHV2M9df/+WsjhH2HbqQ0oGEPQRaTdPSFO"},"signature":"7Kfldl2ROk12fVNq8bFsRGdJK1excMuCxH1gClpGVxV3h/r+iAB8y4Ec8rIgj5CYsiSNiW+Q1ni8M9gy9EXq4Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1f69s68a5mfu2p7grs9an9gnxv8jt5xezkh940a","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1731","1","1","g1f69s68a5mfu2p7grs9an9gnxv8jt5xezkh940a"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/bUD9ZdDgdHV2M9df/+WsjhH2HbqQ0oGEPQRaTdPSFO"},"signature":"ZizET4HfjxmyS2/SyfKSXy62PkedBS9Bj5T1hm0K/kRYbiGeocwrnM4OFBwPB5c8HRhat/HsV+b26l8QIvFUZg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1tcy2m47tlgrkt8cep9lkxk0u9t43fv4kz2apxt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"iqfGE1tL61LjSQf3bwZFD/0Fsb7PuCCFX48FImhHZyFkXk2R4wXmREG1Myzi1FgfFgJcHHSgnc3DJSiSQjtTZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tcy2m47tlgrkt8cep9lkxk0u9t43fv4kz2apxt","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","childprintkt",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/Xzge8RmG2y6bYx+24nOg/ocO00HSdDYT1agc/+0U3N"},"signature":"hUsAwih4CIKsdcriDBukWDtpns7n+U+cuRAFhpRrfO8ElRdklwfZIrZhdrljniu5SwqOzTCHVgQ0gQk9w9He/w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tcy2m47tlgrkt8cep9lkxk0u9t43fv4kz2apxt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["childprintkt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/Xzge8RmG2y6bYx+24nOg/ocO00HSdDYT1agc/+0U3N"},"signature":"WQ6JCAcX5xEgpzDU3uNNcG2jBw4IF5D+1geVoVD1geZQBYf5AppdzXmJYKM1QoFtlyma8DYD1V4k0Uf8JVqdSA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tcy2m47tlgrkt8cep9lkxk0u9t43fv4kz2apxt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1732","childprintkt","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/Xzge8RmG2y6bYx+24nOg/ocO00HSdDYT1agc/+0U3N"},"signature":"1amz4bUbit204PoalEx6W6i/vxlOSM0VHJNvv8ePpOZnv0etJvrVY+9J37COzKAKh1ssqWiWN0xz1rXAXLPr3A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tcy2m47tlgrkt8cep9lkxk0u9t43fv4kz2apxt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1732","1","1","g1tcy2m47tlgrkt8cep9lkxk0u9t43fv4kz2apxt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/Xzge8RmG2y6bYx+24nOg/ocO00HSdDYT1agc/+0U3N"},"signature":"jrnl2J1Yh3ZOzmtQ4P53sCuAUI1hngMAM3oP/ZXLwbgfZStNEDXCykhkS2oV28jCIG0eIzCPk8nsrFzT8jCWew=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1pwv7sa9gpr30eea6wfuv7l28v3uhgazqthyenx","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"2s/CrbyIW/048pqGOg4GBYv7yDijeG+b7GYdtE0VUWtn/x5I0R05ON2PWjzehtaP5MbaSkHq5LWJN0FMUJzdAg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pwv7sa9gpr30eea6wfuv7l28v3uhgazqthyenx","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","ensurebox0e",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApgNc7mdmhEd0eSEGiFZG/mQQu41FvOaUGurJDidvR8e"},"signature":"88nH2UGpAjz2DLihBKhMDwpQ8kTPzCV+320AysIv5Y1aiIYIrutdVniuWgeZs9ZZ31KHlZmBdWhnJUXEsz6/yQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pwv7sa9gpr30eea6wfuv7l28v3uhgazqthyenx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["ensurebox0e"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApgNc7mdmhEd0eSEGiFZG/mQQu41FvOaUGurJDidvR8e"},"signature":"cMAUKX+mUkPHJzgYWMS++KeFYd8SJYDNGsUvGozbi38GmzqmvDXCaeJUcHADBkXkcjmLZyJbzZGYNL078xDgjw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pwv7sa9gpr30eea6wfuv7l28v3uhgazqthyenx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1733","ensurebox0e","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApgNc7mdmhEd0eSEGiFZG/mQQu41FvOaUGurJDidvR8e"},"signature":"d9oPxSiHpcNOTQsDMwfaHw3dC0Bq/NvogWDCUCPNXXYmmQdsRRmMBeoS4wGxMufrL6qcCXgWigjsioJ3cKdREQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pwv7sa9gpr30eea6wfuv7l28v3uhgazqthyenx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1733","1","1","g1pwv7sa9gpr30eea6wfuv7l28v3uhgazqthyenx"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApgNc7mdmhEd0eSEGiFZG/mQQu41FvOaUGurJDidvR8e"},"signature":"ZFJ8WG7QJy1yz+CgRn/KAZD2V+BcOm/f3XQjDgEqqDAc6D7JJHl+ZHckSxbmOyy4qhIiOdL4Sq+Cx1pQxQZSRg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1cgqqk5myhksvhzc6g7vrkr7aredf9ec73w2t5h","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"T1Ntz7OlThqasCiUqnUVW30V7up3oalDEs+ZHW7DzBh9LZrWlvMwyyPNS9YRE78KiUIW4N/HR007GSPiXtMaFw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cgqqk5myhksvhzc6g7vrkr7aredf9ec73w2t5h","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","awakecapitalvh",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7IL3in5gyC1f+H5Xp4qNilNK9IhhNMTUu+QVE3aR5Sw"},"signature":"GLAxH7MbJaMxcAAbksCZcqBM5T7rHiQKWAHSQAkMtAkZOklIiehqsL+1PX/bH2aGfL0h2wC7d2380tdiw+d0Mw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cgqqk5myhksvhzc6g7vrkr7aredf9ec73w2t5h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["awakecapitalvh"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7IL3in5gyC1f+H5Xp4qNilNK9IhhNMTUu+QVE3aR5Sw"},"signature":"jhZ332s/GR/c9UOnqvV77sacRiMuk/SUyPU0Exk0fBlXA2lw4eHnrQy4QHaNOjw9It/SgcnNDAHLh1R/lphE8A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cgqqk5myhksvhzc6g7vrkr7aredf9ec73w2t5h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1734","awakecapitalvh","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7IL3in5gyC1f+H5Xp4qNilNK9IhhNMTUu+QVE3aR5Sw"},"signature":"o1Qdp3HsysvraeojunHCaR03RiRCWRnrbXLO933o7041Z1oc6X74bXJcODw9+HZLh1dYGI/UbjC4KxXbuTLakg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cgqqk5myhksvhzc6g7vrkr7aredf9ec73w2t5h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1734","1","1","g1cgqqk5myhksvhzc6g7vrkr7aredf9ec73w2t5h"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7IL3in5gyC1f+H5Xp4qNilNK9IhhNMTUu+QVE3aR5Sw"},"signature":"Nj9qDEf1YYWzCihqKQUqN6wS44XEx8X9ys+TLYeo2Co/LrYG/WziTGbGA34OqkS2ZyEKFjhMvo+Cn1W4z/tGLg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1qwtf29eprlkgzr3j7sd9yxg4ws8u2y3pmrff53","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"lDmK9FD0ct7D+rdiY+p3qHhDj65Yj0dbSxTB7SF0DuErCJuv9H3K0Rwf1N9ig+vgaIzhpRSoFHGL6qVjK7Hv7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qwtf29eprlkgzr3j7sd9yxg4ws8u2y3pmrff53","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","sortremovegz",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A08pYyWEAiYyajhnHuAaLmnE907mgURE3L3+i5PB+1l3"},"signature":"yG0qgkFxIIM62/V7IIdyWgaD7BP7tSIPzFm/zCyyrw1CsoZlKlKnOqLELQ5TFGuJ9lFT/NHQag/r8YDqKIZY5w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qwtf29eprlkgzr3j7sd9yxg4ws8u2y3pmrff53","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["sortremovegz"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A08pYyWEAiYyajhnHuAaLmnE907mgURE3L3+i5PB+1l3"},"signature":"vl75q8NuvETNybmyF9Bv/m2e3ZWRgP/behH8xhJSoZNcIogs3HMyV2WfI5vq6K10KLlSZywruy5B1uqEmFgUfA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qwtf29eprlkgzr3j7sd9yxg4ws8u2y3pmrff53","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1735","sortremovegz","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A08pYyWEAiYyajhnHuAaLmnE907mgURE3L3+i5PB+1l3"},"signature":"gUhjZepozA3SNwWZyp5FoDt3b/iH6pmHP+Sasv5dSF9Iyi0U3gEQ4txgHuxv84D0MKwM5g1X/vemilcCDyNQfg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qwtf29eprlkgzr3j7sd9yxg4ws8u2y3pmrff53","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1735","1","1","g1qwtf29eprlkgzr3j7sd9yxg4ws8u2y3pmrff53"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A08pYyWEAiYyajhnHuAaLmnE907mgURE3L3+i5PB+1l3"},"signature":"mX2klbZ/dUdXrVG+j9pZIm6jqf1Kl3ZJtFs0PNJjyuYgQa42Gf8sax1Q8k2aT1RTA/eut9xd3X/EZtyJZUWShg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1j7lqhxxphnamzq23dd3djv06ndy0pa7kd296fs","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"yewzI8zzCZbfIVXk20lj2TDEkWYXWnzWN/fbqKghS3BulTldI2NNW9XvbPc+G/Y9cYqi6KR1O0Hxsehw7GRiqg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j7lqhxxphnamzq23dd3djv06ndy0pa7kd296fs","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","dizzylessonmz",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag2SSIupMM48p+Y9iulMEKE0xhX71qry5aHze+Afbw6g"},"signature":"2z90CkXV/xe0hFhp0ErToxlzslwpUb8J2Xgm3p51yB1nI/OaIdUiB1+o0oc8/UeAguv0/njjQjLFz+9H4uWW0g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j7lqhxxphnamzq23dd3djv06ndy0pa7kd296fs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["dizzylessonmz"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag2SSIupMM48p+Y9iulMEKE0xhX71qry5aHze+Afbw6g"},"signature":"5vX4TOPHsDKsVwC0As83KvKZt/SY9oRi9eSLK6I5yFxSI50EGRBp9ZqIWM2oN37h0l4arEc267iZFgM72wQYCw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j7lqhxxphnamzq23dd3djv06ndy0pa7kd296fs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1736","dizzylessonmz","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag2SSIupMM48p+Y9iulMEKE0xhX71qry5aHze+Afbw6g"},"signature":"Z3b9T9yyvqQQOLuq24HrwoX1Noxo/WN1hKPS55FJUsFC0lD7gHygjpTDkYEdnNdSEMBr1hc9ZOZ1UImVJSGz1Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j7lqhxxphnamzq23dd3djv06ndy0pa7kd296fs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1736","1","1","g1j7lqhxxphnamzq23dd3djv06ndy0pa7kd296fs"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag2SSIupMM48p+Y9iulMEKE0xhX71qry5aHze+Afbw6g"},"signature":"dohQCLrpmj01kFNP7S3YIHpCob4tLdZ1h5T4HbOJWA4AZJxHxLxqF1D4TfHWAT9wm3SxWAX4/rMjz1K56j6gmA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19hvkedsvjcdl86cyjc65nlnlxyz8tge7cytdev","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"GaYr+tl30wT3JshA4Qg9LYVKzDZg+UeBhB0lhDJZ0v448QjtXk1AM1jx63FFroFIfTYwNYMmioxffVFm/ima9Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19hvkedsvjcdl86cyjc65nlnlxyz8tge7cytdev","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","balconyrunwayl8",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuASxQJnNmPYLT02vdjb0E3nMqXVNp4LFLpwi7xKWv6x"},"signature":"PE0e8ZP2X8q+Oq2f1LWNTkwTGAXXAp0mlyc0pIgNl9VzRhSvA7Tge4lIRMCWklflCS+Z6oW4/wX5wck9MjjKSw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19hvkedsvjcdl86cyjc65nlnlxyz8tge7cytdev","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["balconyrunwayl8"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuASxQJnNmPYLT02vdjb0E3nMqXVNp4LFLpwi7xKWv6x"},"signature":"smb3/KDdscS502Ftuv8zKrQyufrAqIsMXp5U0nRY6q00AqdBayHDrU5kAjeqBs5yqmlyd/+Po2SHJrk+QMOjIA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19hvkedsvjcdl86cyjc65nlnlxyz8tge7cytdev","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1737","balconyrunwayl8","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuASxQJnNmPYLT02vdjb0E3nMqXVNp4LFLpwi7xKWv6x"},"signature":"zrvgW5P4C+aBV4aGmP+2nOwDW55mQbga75UHUDYJp/1zcrt3RfwUqEixKhqRvBc4CBzb0AKm24BYAVWgurByFg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19hvkedsvjcdl86cyjc65nlnlxyz8tge7cytdev","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1737","1","1","g19hvkedsvjcdl86cyjc65nlnlxyz8tge7cytdev"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuASxQJnNmPYLT02vdjb0E3nMqXVNp4LFLpwi7xKWv6x"},"signature":"PSm0N7U4TTc0M1HWZS7h6iE2uzt1s+ahXrNdzakTMkpZoXAcFZpNteIT5AzLCwY3lYvDHOPejXJErW6jA5jPOA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1kyw9ngyz7wvnrxdn273l8q0z3nq2fyktqyuf24","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"bHZg99JRn7mozDywsCA/JOziTpruKtFjxA5J5btY9m1a1Y40BykGiYNMfwKKssffDl/3gv9Uh0gFVRcUsLDJPA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kyw9ngyz7wvnrxdn273l8q0z3nq2fyktqyuf24","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","measurecablenr",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A06WtEsfqPS9wNzhgw3ZidDYyG7KMuz+hs+fiXxNdFNO"},"signature":"C44V9954bhKvNM2Gll24V+m720EMuZyUisGrGPFBeDpdomtPAb9GKs/RAvqCg2o5vqe+qbTxJbHWROelYwFN9A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kyw9ngyz7wvnrxdn273l8q0z3nq2fyktqyuf24","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["measurecablenr"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A06WtEsfqPS9wNzhgw3ZidDYyG7KMuz+hs+fiXxNdFNO"},"signature":"Cec9AUi+sYreeskxm7SE10y7hZWAsFjV7Q8GNj47DnFx4+Gi4tvIvp75eVkDC0Z4zopNwXlb4gm5TJoP3W0r2g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kyw9ngyz7wvnrxdn273l8q0z3nq2fyktqyuf24","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1738","measurecablenr","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A06WtEsfqPS9wNzhgw3ZidDYyG7KMuz+hs+fiXxNdFNO"},"signature":"RPE+vjBMlruUVt6OTJDTXDhZPqSAh4f3fjXdsam8VkNEctRx8n/LDmoSu/wjdHUYwfWpfsRaRl21waBW8frjkQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kyw9ngyz7wvnrxdn273l8q0z3nq2fyktqyuf24","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1738","1","1","g1kyw9ngyz7wvnrxdn273l8q0z3nq2fyktqyuf24"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A06WtEsfqPS9wNzhgw3ZidDYyG7KMuz+hs+fiXxNdFNO"},"signature":"D4Ql4aCKui9ymaTAetrvtWbpGYKH7ZSnrkOLiOWNIwU4uod4L34q0oaEvhonvlNtpX9a8SNIWnTQHv158YgkvA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g170q9pk7ghrvjheg2dtkeav37pjg77z8wwstju6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Nr6veKcao7Xzn9GkqJnrKjgmnjpTqVY7I6Yu24M+evIwGbxm68mMqqCg+APv6gyKR4zhk4p9ksMo8OxMdTEkHg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g170q9pk7ghrvjheg2dtkeav37pjg77z8wwstju6","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","libertysloganjh",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Agjsfg/3huzsidUjmpmRlflOJcljPxmUadHOZMTjbY0T"},"signature":"Ny6vszHnW1YhCtsEe4Tfv0zPn/AOdUO2rSZJG3YeMQFjr70oa2m4exv+bAqcuwrV9yTMn8Tx8RJCSHoOoL9t7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g170q9pk7ghrvjheg2dtkeav37pjg77z8wwstju6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["libertysloganjh"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Agjsfg/3huzsidUjmpmRlflOJcljPxmUadHOZMTjbY0T"},"signature":"E0r9vWwM6Y2BuW7jmtrPRTfTyN7COvaHfeeDnTEH6cguuxPu5oa4/3SjlBhDSzBAD1SxGCgFKDh8S4u8CtoW+A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g170q9pk7ghrvjheg2dtkeav37pjg77z8wwstju6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1739","libertysloganjh","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Agjsfg/3huzsidUjmpmRlflOJcljPxmUadHOZMTjbY0T"},"signature":"WIqff1W0Qf9lnPkA8SIRVsH+HauiG4hCRWn0WAL62sZA0VRzf/c0Oa9mVYvSvmamABPpcJGcI5w1u6p2Fq0hiQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g170q9pk7ghrvjheg2dtkeav37pjg77z8wwstju6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1739","1","1","g170q9pk7ghrvjheg2dtkeav37pjg77z8wwstju6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Agjsfg/3huzsidUjmpmRlflOJcljPxmUadHOZMTjbY0T"},"signature":"PXga+koJDVLQX1eXK6E2jmwPDpZxwHdDi9P8lCkAaIwzrsn/9VR/YNoU8MJvzB5vZ3EKQ5VOW3avTxemEUpv0Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15j4gg5w8nvhpdn5fdcehyw8ma9yz6gyvjawu2z","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ecZGMbF4VAhZs6TRz+kkTNKSxdFhMPm3bL7K6X0HvL1GJXB4LlJoencSNm+ixFkYeD7QHrWJZmyp24HQb7+7yA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15j4gg5w8nvhpdn5fdcehyw8ma9yz6gyvjawu2z","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","incomematrixpd",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3EGUFn7RqAvHt49GMQATyiMfqXP91v8C5xvN8PXxXl9"},"signature":"yMFHnlrzskQoWkLOuLzf+xDX3gRPcnduBChdqy8+nAlMkHmfxO/kdZY5TJJuYOS8VHy0Z/a5cp59WtC/iyQxiw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15j4gg5w8nvhpdn5fdcehyw8ma9yz6gyvjawu2z","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["incomematrixpd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3EGUFn7RqAvHt49GMQATyiMfqXP91v8C5xvN8PXxXl9"},"signature":"tA5H2D6nz6S56NJDQID2iUVi2qFloq9B4kgEBtDh3DloyzTFehTWK9tM61mRixoTrxzzZvv8+7kYDn64OFXzuQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15j4gg5w8nvhpdn5fdcehyw8ma9yz6gyvjawu2z","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1740","incomematrixpd","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3EGUFn7RqAvHt49GMQATyiMfqXP91v8C5xvN8PXxXl9"},"signature":"MIZkVNKI6x5peRZHt9/lLnCiA0xu9gtuqNdBojeKL9AvitGdSNwYjWSS+jbrvDsaID6hoqeLVcj4AePUa1jLBw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15j4gg5w8nvhpdn5fdcehyw8ma9yz6gyvjawu2z","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1740","1","1","g15j4gg5w8nvhpdn5fdcehyw8ma9yz6gyvjawu2z"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3EGUFn7RqAvHt49GMQATyiMfqXP91v8C5xvN8PXxXl9"},"signature":"pvTnOySWHFhqZk4kvN6oTMx1jjdGEeb6HrT2TZYmAWhbuBLjUkgBoZdiTmYUhfur9sSH0Vmgn5CpWHCVTuIs8w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ruepmeupyt2s0ahv0km76c8d8ejy8wcnygls7y","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"jCxiRKnuPL4FSjOFb87as+5+APdAqCYbpA5mR2sYZqoPiGh2tmsgAVQeBPDVkLEcy8oIYb2svI0M/p2b5cbn3A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ruepmeupyt2s0ahv0km76c8d8ejy8wcnygls7y","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","pelicantunnels0",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JkukXjf/Ree92SyWPCP4zGg90SoqjZsJ9cNbiB0oK8"},"signature":"JuPzzcKfiTzYHLqJ54KqDnkxYxyaSuNwfI1l3N+ONDdb7kkldm+C97PBClLZ+8HPgcU8LQX7MZ6ikax4+GDv8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ruepmeupyt2s0ahv0km76c8d8ejy8wcnygls7y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["pelicantunnels0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JkukXjf/Ree92SyWPCP4zGg90SoqjZsJ9cNbiB0oK8"},"signature":"Rjy86qem8vb68pvVPgLJNJrQEMQ7XZqNybDhnO3P7KknD1pK2dorAzpjIwi30ph6f3yWKxVR2SOW7gmz1vbVPA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ruepmeupyt2s0ahv0km76c8d8ejy8wcnygls7y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1741","pelicantunnels0","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JkukXjf/Ree92SyWPCP4zGg90SoqjZsJ9cNbiB0oK8"},"signature":"yON//3nKQEVEIZPtZYsT3gGToXIMhZqwa0oUuFXBHqpHsP6oMkJFLTMhoGdrd6HFlRU80EGvErxrL2/c9iCzUA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ruepmeupyt2s0ahv0km76c8d8ejy8wcnygls7y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1741","1","1","g1ruepmeupyt2s0ahv0km76c8d8ejy8wcnygls7y"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JkukXjf/Ree92SyWPCP4zGg90SoqjZsJ9cNbiB0oK8"},"signature":"qyua00YNfWqxAA0MPGWwGqB3jR0vkEIxliGiRlK48CFF3H2gtMeM+8Ar8t/EjwXxKzmEmI6jx5H8QhMditaqvw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fgr6s5mh8spd56dxrpacpnclr5asf560sk3tkp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"RjsDT/Vv6iWFEALpB36h9MxOYbYkvQ8LTwEpC/qn+fpBRPcaGy3rIYtYJ12iKJ6pQ/7TmiB8kjx7Lgq0lGX0hA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fgr6s5mh8spd56dxrpacpnclr5asf560sk3tkp","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","gownquizd5",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwnDtXKkl7ofQzJw0lAO50BJcpBACHEVK/LahVxEXLwo"},"signature":"jHOeIHGUJEljMn8zyYFM02stvsiC/M40nKDJ1TdK+Px4oYR+qhyxfXL8BauCs4BKibWPP7yHArqRAyP5OQIpQA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fgr6s5mh8spd56dxrpacpnclr5asf560sk3tkp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["gownquizd5"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwnDtXKkl7ofQzJw0lAO50BJcpBACHEVK/LahVxEXLwo"},"signature":"7XdnG3YE6fXGTkjXoxpvAxllixqOa3Dux8+7ARdeOIQJPK1xQls7CJJvU0EyPUcSVkTLvY6tc/FZpR6e1WNymw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fgr6s5mh8spd56dxrpacpnclr5asf560sk3tkp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1742","gownquizd5","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwnDtXKkl7ofQzJw0lAO50BJcpBACHEVK/LahVxEXLwo"},"signature":"ouMD2ATBNmthBv7GqI6vLII0lgfqLwJgDEhW5nsBNXBgzqE8AE6xz7U6H+/4QZ3Ysm3LBmvgVCACB17vyca9eA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fgr6s5mh8spd56dxrpacpnclr5asf560sk3tkp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1742","1","1","g1fgr6s5mh8spd56dxrpacpnclr5asf560sk3tkp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwnDtXKkl7ofQzJw0lAO50BJcpBACHEVK/LahVxEXLwo"},"signature":"bLOIJgBe/M9dkBDffSP7AB8Vh4kd6C7e+07E5Djdkg4QVss2udKVkMJClQDM50Y1mjijKxUWpEeHLvIsomsd2w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1c78jqwl54asq2r4s4vr4gp2rw3l4tk6lrhn6ne","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ssh7mevHp/G6n7Hi22l2KMX/dY3kJwAESmvv3tyPrc83+oTfBdgBSgDr+yxuYEsXbh9Uf4vtaQSZKh40MvXyXg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c78jqwl54asq2r4s4vr4gp2rw3l4tk6lrhn6ne","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","panicallq2",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiEFT0pR7a70/cETDHXmPgVsj7nai/73J+UHAlOTb0lb"},"signature":"xwn/dXpwjWmGNcEi2vJb4sQN6od/ErfuIEeBfgVivZYBONLpd0FzPwGZVuFSQ4W8RhANcwF2VRiDNBZSOFkoBw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c78jqwl54asq2r4s4vr4gp2rw3l4tk6lrhn6ne","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["panicallq2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiEFT0pR7a70/cETDHXmPgVsj7nai/73J+UHAlOTb0lb"},"signature":"P/hy4E3PdxYnQ8fcSo3XwgiR1fDSQOu1tBHZYKj5TGpctZ3K6ECJ1/3gNNR0UvlFRtRV7gO2zUg+0UhnDHOLOA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c78jqwl54asq2r4s4vr4gp2rw3l4tk6lrhn6ne","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1743","panicallq2","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiEFT0pR7a70/cETDHXmPgVsj7nai/73J+UHAlOTb0lb"},"signature":"YkbzO400aXL7WqZz2IwtDHUZDT59Z3oR4D6Fo+IpP1lYPpnIgIC0c4rOYJlq5ye3CpUL6dFzcVdXo5koDL5gLA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c78jqwl54asq2r4s4vr4gp2rw3l4tk6lrhn6ne","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1743","1","1","g1c78jqwl54asq2r4s4vr4gp2rw3l4tk6lrhn6ne"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiEFT0pR7a70/cETDHXmPgVsj7nai/73J+UHAlOTb0lb"},"signature":"K3NIqOLshfRdPZk7l8luMqs6XZ9VHzK9P8UEZujusB15xhyxTU/pvsqMKSxqTPbomZOqAo9GdW5YFLykDhkdWw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1359sw0en4djx3ac9yzwu8c93nltuhfzpx45q8z","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"JuW8psxK22kcZ/Oy039tsmcaTA7UhTHUkF2wnYmsgOwmUk/3+lH3Kr1rRwQHz6fNyqk0aJ6Gasv9S/CKr/cRfg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1359sw0en4djx3ac9yzwu8c93nltuhfzpx45q8z","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","sponsorwomanx3",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyOLDJoiUtKplofxEDkVPTwe2MVS/AMtUuFHFuwuAvXF"},"signature":"156lER3XJHybHanFuU1Y6uFUl3hwDDV0xvmHtvVuxQN8fmHX+CL07TtKeFaTrO22jTppEhFZzBFv9uk9JhXVNA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1359sw0en4djx3ac9yzwu8c93nltuhfzpx45q8z","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["sponsorwomanx3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyOLDJoiUtKplofxEDkVPTwe2MVS/AMtUuFHFuwuAvXF"},"signature":"RTrFgjvNv2iD7t8fW+KLXsIkohfpr1yXiHic68BeQJd9BhdIly0ku+ndNDzYZxlKyYSYb8Qd3ewJOEXffUJEQg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1359sw0en4djx3ac9yzwu8c93nltuhfzpx45q8z","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1744","sponsorwomanx3","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyOLDJoiUtKplofxEDkVPTwe2MVS/AMtUuFHFuwuAvXF"},"signature":"fDX24lPDVWWquwYmZuQ//6nV/MPcRj/7iUdaZEKuQPE5iPuBBum6BJxOFSHhaprTSaq7KPmndX+MCuvKvpV/ew=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1359sw0en4djx3ac9yzwu8c93nltuhfzpx45q8z","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1744","1","1","g1359sw0en4djx3ac9yzwu8c93nltuhfzpx45q8z"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyOLDJoiUtKplofxEDkVPTwe2MVS/AMtUuFHFuwuAvXF"},"signature":"SYzwHf0B46DDWq0Mct9fWQdj1h+L/QOTLhwenPZYffA8NFaGT8tSrGMDF2Hc6PJjDz6uMZqNYIPIy9jvUl1g2A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1qce7ysqjry58vcvg79p3dg0qqwsxufs0l268cj","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"tCKfIYfGXhBliTRIhiiyAgApRH5MpSk0K5BPN/BPaz4y2ImATtj9oK+Ll1YQ6OE0AARyvophbNEjPUk6YUcKUQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qce7ysqjry58vcvg79p3dg0qqwsxufs0l268cj","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","preparewalnut8v",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArABSK877nzUvgTTmYBR1ux+eV+W58X5p6SU0SvuIv+T"},"signature":"y1I5Tx6mk/odbw122p38MHWkzIJZj04zgwqJk2xSCqVDGVOKkMggHqpo7ERGeUOQns80FnEa9WI8LE0h6VQBmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qce7ysqjry58vcvg79p3dg0qqwsxufs0l268cj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["preparewalnut8v"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArABSK877nzUvgTTmYBR1ux+eV+W58X5p6SU0SvuIv+T"},"signature":"SmUThinnupS4VwOj4c6NSmodma3fe7G86MFD14WL8Ok1YgD1pKW6phuANXPuX8bgzGDOhChe13OYmXZ6n1ZKmA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qce7ysqjry58vcvg79p3dg0qqwsxufs0l268cj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1745","preparewalnut8v","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArABSK877nzUvgTTmYBR1ux+eV+W58X5p6SU0SvuIv+T"},"signature":"0pl8swRdgFbWDAP6w5EMdzSZ/UgjpKjtT++8NAZfYx0Eb441gkNTtc45P8A9ZOpBka2+vAwMvZ/8Yf89Q+Umpw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qce7ysqjry58vcvg79p3dg0qqwsxufs0l268cj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1745","1","1","g1qce7ysqjry58vcvg79p3dg0qqwsxufs0l268cj"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArABSK877nzUvgTTmYBR1ux+eV+W58X5p6SU0SvuIv+T"},"signature":"42kRbgVAyMFlHLFvtlU7RCshRouSmYNmUQBnqbydTHAcvNGlG6m+e/HgJ8INH3/WXCBQzjxlPgsoAjm3mMThlw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1nadr2l9l4mg6qgz3tc2x3gg5pxxdwzpta5nfru","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"QWvzpcW2rxHdUoYrwQI9yLVkymPfcIwX3StKMMgTaestiGeZJfODorxWbsEVFwnwmsp0BYT3JW0sGZsbfpvoUg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nadr2l9l4mg6qgz3tc2x3gg5pxxdwzpta5nfru","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","birthsituate6q",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A05ftvuYqtc1+wuCtAylaRUHcyqYxq+FDprZI9PWDLSn"},"signature":"4tzXVbl+O3JpGQaeNDmcm5/2iP61gtBh/2vcqc8ekI1yTy5QBmXH5ZUwm9EX5HPTlBvo48ftEjlD8rsxY6gnQQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nadr2l9l4mg6qgz3tc2x3gg5pxxdwzpta5nfru","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["birthsituate6q"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A05ftvuYqtc1+wuCtAylaRUHcyqYxq+FDprZI9PWDLSn"},"signature":"UKeAhChKNLrUaNN6IBTpTMCen1RpeR0OtZrSO1TXPeN1kdB7Zp8jdk6e0JRaoIG089AcQ1T69EH8IEWgnEQckQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nadr2l9l4mg6qgz3tc2x3gg5pxxdwzpta5nfru","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1746","birthsituate6q","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A05ftvuYqtc1+wuCtAylaRUHcyqYxq+FDprZI9PWDLSn"},"signature":"+oTNwVSnIT1U2XcdVriMwNjhsY3g5KNzhI45TOq2SjYP+EszmGtzcKXzqibdH+eVEHSdB8VHU/m/jWGeYRcEIw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nadr2l9l4mg6qgz3tc2x3gg5pxxdwzpta5nfru","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1746","1","1","g1nadr2l9l4mg6qgz3tc2x3gg5pxxdwzpta5nfru"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A05ftvuYqtc1+wuCtAylaRUHcyqYxq+FDprZI9PWDLSn"},"signature":"a3yX2AIbPlG3u9lWak6s9nLjMCbI/7Ccq6oV6ckzEdIRXKk/ldpmvTWePUxCKBpYXB8Pok75MtHrF+A+KDxfZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1npugtpzw9rdcj463qs5q87kv3x03ujupqtdpga","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"hi7UEqyTfF+2jQqAW9K7UoIHqVvdSPVpasX5mKg3Eh9YyNHtsh8iSNuAUSDIkUvIsZIM/L2cESkfl/vojQTfVw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1npugtpzw9rdcj463qs5q87kv3x03ujupqtdpga","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","onlineprofitcj",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7bmvWiyXuNaJhoGaap5MtPG3KtDoFWT1USiTl+Uqmp8"},"signature":"N3iOtEe4yiEIOcm7NSVuipPSFezFBm4+hkn73Y0E8xg2kb3oZ9xAUxg1hpQY0datoG+ORbyJ05HtrcxrLdHGFQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1npugtpzw9rdcj463qs5q87kv3x03ujupqtdpga","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["onlineprofitcj"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7bmvWiyXuNaJhoGaap5MtPG3KtDoFWT1USiTl+Uqmp8"},"signature":"hks2dtwf6v8vF2ddiQW3Tgos9nyuGuam/iIXVC2q7AceNMdXrJiEIVLo2ns1kWiGy4iYSZVai/m+k2YYe4Wh7Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1npugtpzw9rdcj463qs5q87kv3x03ujupqtdpga","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1747","onlineprofitcj","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7bmvWiyXuNaJhoGaap5MtPG3KtDoFWT1USiTl+Uqmp8"},"signature":"MUYEjM5NVeeOzu6zkoLH0+JLFLvaPqwdGeorOspehpFNgmKnRxxk5NwpaiKsqGIDXfMVcEBpP8NUA4Z5KNm2iw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1npugtpzw9rdcj463qs5q87kv3x03ujupqtdpga","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1747","1","1","g1npugtpzw9rdcj463qs5q87kv3x03ujupqtdpga"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7bmvWiyXuNaJhoGaap5MtPG3KtDoFWT1USiTl+Uqmp8"},"signature":"c1dwLLhP3uz3ELLUBb4yrGY33a/5AP+tDeebuYOceF5BEjMMClD8C4vVg3OxoHWVEj6a/n6gIjm75ulkoGao1w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1336dn8tw9wjx4jlkq5wjrvnj9483nsrys8dvdn","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"oquhklM48wefU54KgFUypHeitVxQ3MiKeQHboYp40fMuWwTsmJHKgQPe38bOPbhj5YBobxWEvl6wGQhtD4XLow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1336dn8tw9wjx4jlkq5wjrvnj9483nsrys8dvdn","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","costsalutex4",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgfDEQl6oBJ5zBDO52//HMoBFLn/VMHx5avlAdvkPVQ6"},"signature":"dvyvsFrg4VxgMd16pSNpy3Kx2fOOhCP0IzL8ChPDXchB9LgRd6DK0Y4l5ftIJACDXwp9qw/gckC37nGmyDz8rw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1336dn8tw9wjx4jlkq5wjrvnj9483nsrys8dvdn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["costsalutex4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgfDEQl6oBJ5zBDO52//HMoBFLn/VMHx5avlAdvkPVQ6"},"signature":"ekuUMAnQwvmHIxOHSifVsS3fTpg2dl+5G/u38areADxWNFxFBxeoe7E59aJ8drPHyey/gD37ZHqEG2nR23m6ZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1336dn8tw9wjx4jlkq5wjrvnj9483nsrys8dvdn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1748","costsalutex4","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgfDEQl6oBJ5zBDO52//HMoBFLn/VMHx5avlAdvkPVQ6"},"signature":"h7yudpJyrQJ6RYZR9YJgbp71V7d1qm2ErK21zGNAJ4AdXMS+KbaOQXuySWUwKCqx0qPE5AVKoFNku+N8J7lNGA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1336dn8tw9wjx4jlkq5wjrvnj9483nsrys8dvdn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1748","1","1","g1336dn8tw9wjx4jlkq5wjrvnj9483nsrys8dvdn"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgfDEQl6oBJ5zBDO52//HMoBFLn/VMHx5avlAdvkPVQ6"},"signature":"/VgxarOzYOjY4rKBLTEUhfllpI4birwDmq1OwpPsUUAX7DMCUU97xxg9QxaLz/KcM5Z0vclkzsljkGzpRe6Nug=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1twahw57c5xx758dc60gdwl3h98037n8dl4dfwy","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"UjGduFrqUD0NaiXP0+N9e2a5thmD60B/gAd7niF7QrcRIqVmsznmgmtaPTJzYTK+F01AhuJXiRl6UmKh8wIPdg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1twahw57c5xx758dc60gdwl3h98037n8dl4dfwy","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","evidencerazor75",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3KXxfUTNzlk+bWHm/S7ZvUKlTP96Z9Uq0jEWRirWbaZ"},"signature":"7ttxrQ1iLS44hpn/dxp6h14HRSr1toM7U2yYqKQbqYA2KyhFvd5SDMEpNUThzpV9Z3iRYq2RF/luofuWdtcVMg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1twahw57c5xx758dc60gdwl3h98037n8dl4dfwy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["evidencerazor75"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3KXxfUTNzlk+bWHm/S7ZvUKlTP96Z9Uq0jEWRirWbaZ"},"signature":"/dgXvKaLdk+sDTXOHJ4UdzYp3UoPB+wkmtxWKRWfkkhG27NGMKn8U67Z6zyktV9kodY3PC58yAGAOkDGAbS9XA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1twahw57c5xx758dc60gdwl3h98037n8dl4dfwy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1749","evidencerazor75","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3KXxfUTNzlk+bWHm/S7ZvUKlTP96Z9Uq0jEWRirWbaZ"},"signature":"Q1pJenpGJPN5M3WF73ZSk0SMk/ptPU5Ly3mjfj4pNbVO3NoCQIuBBJ/w8GxAyowENMuvnoVdy5liP6bZNZSNDg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1twahw57c5xx758dc60gdwl3h98037n8dl4dfwy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1749","1","1","g1twahw57c5xx758dc60gdwl3h98037n8dl4dfwy"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3KXxfUTNzlk+bWHm/S7ZvUKlTP96Z9Uq0jEWRirWbaZ"},"signature":"R6EdO6KFtrCNsp9KtU1xHeJQ9aJaQ+K9LaUXqXeHZLsyYZLls7+wgN1m718JJkse3RqOUusvUkemdmZ+OOSALA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rutqjh236crp2sxtvtq56qh62z2rh3g8mqxcs4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"VBtXY3HEMOoO1hIGZZJEQNDQktTt83AIJjydZEbSbE0Ep0ur6mQwtnreHbmsIPtK81b4rF6Ovug4ZJ+jhpry3Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rutqjh236crp2sxtvtq56qh62z2rh3g8mqxcs4","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","myselfplasticp2",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+X0E6QaGV8iYe2Ebm1Vl38mkchl4e8QhCxkdLHGCpQt"},"signature":"3DTRMErAJyri6ERC1F6SLCL4W650utthkclS+ZoROMRFGjAR2EOB+ZsgRAxspJTZbn1TLY/2rJT/QW6LZo1O3Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rutqjh236crp2sxtvtq56qh62z2rh3g8mqxcs4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["myselfplasticp2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+X0E6QaGV8iYe2Ebm1Vl38mkchl4e8QhCxkdLHGCpQt"},"signature":"//oVspCztwT2tczqOnNT3FK3zYdPrwv6F4DtpZVrYH1rrzE4FktZDSE6zWmJFB5ZokFDbKYCrO3urVOaNEHbEw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rutqjh236crp2sxtvtq56qh62z2rh3g8mqxcs4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1750","myselfplasticp2","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+X0E6QaGV8iYe2Ebm1Vl38mkchl4e8QhCxkdLHGCpQt"},"signature":"GO5CwQvHItNPwgP0zSsdibatVxgSaK+gsgFq8ckzHBJY+TyNxcoTx05GhF8/HvVRcKzyRcF5lpt6Eq80g++73g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rutqjh236crp2sxtvtq56qh62z2rh3g8mqxcs4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1750","1","1","g1rutqjh236crp2sxtvtq56qh62z2rh3g8mqxcs4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+X0E6QaGV8iYe2Ebm1Vl38mkchl4e8QhCxkdLHGCpQt"},"signature":"UsdF4Sr5hy40obqs1it/5DSg6aMxKya5MZtKJjU60nExIjUcRVuzA9ZJvMXQdzdBYagADawUs9YpHWOSB6DQYA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1d7lturm8fvtaurmcehdxv595l9mdxzk3k4sh6c","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"KJCr1sGXJ+8inxC7xGGUHcHr4QfXAg/P4g7ZTVIxG45v1RDwbhyVgMsnmQZVMy1wAzYoW0HBOf4wA42qJ/NoIg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1d7lturm8fvtaurmcehdxv595l9mdxzk3k4sh6c","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","borderhomeau",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqF9mqtBBcXYdNaKaXeKtO9MNQ04kYI4A6EzrGplQkKV"},"signature":"ei4mZcluLqCpaoAoP+EcrFPkkg8dVGZ67s04wpt6d4IGT5MR/P72ZaRIBJXUyOGT7cIbGjlRRsZJCLpzy+F6TA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1d7lturm8fvtaurmcehdxv595l9mdxzk3k4sh6c","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["borderhomeau"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqF9mqtBBcXYdNaKaXeKtO9MNQ04kYI4A6EzrGplQkKV"},"signature":"jD4EJ1W0/yzCMhzpw79MTLVTGvOCx+wp1s5thWH6uK5wUW5iUfkdekcSBQPj+QbPS3lB4EO4bX/f8o4QItUJ7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1d7lturm8fvtaurmcehdxv595l9mdxzk3k4sh6c","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1751","borderhomeau","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqF9mqtBBcXYdNaKaXeKtO9MNQ04kYI4A6EzrGplQkKV"},"signature":"nexLXxKtvUd4OQ5g0Gu7Dp7yj5pJG/AnJRqpuiMEyNlF22x6IW6n65/8cSCvQFRiZeIXM5SuGr81DvC1118VEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1d7lturm8fvtaurmcehdxv595l9mdxzk3k4sh6c","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1751","1","1","g1d7lturm8fvtaurmcehdxv595l9mdxzk3k4sh6c"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqF9mqtBBcXYdNaKaXeKtO9MNQ04kYI4A6EzrGplQkKV"},"signature":"TfxE1+kf1qyS3t7LXI93MWsXcUGtlU2spUm/Scdy+rU+8DRytg+yUA4mSpRx9anEi3Ec+9Ur4wa9OsTSa2J1xA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1epks3gt4rrtyw4lkua4ra682cayl3yxk78hslk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"SBAsB19WndzwKwKXePJy7gmUk3dM7wd01pq4mg2HlwUmPBVu5noUijklbMB7zpO7pUnMhNeNTmKqGWTI/XBDlQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1epks3gt4rrtyw4lkua4ra682cayl3yxk78hslk","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","dryrivalyw",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsrF0SRQyXvAlTfb7UmSo2HTBwdgchPpjPlA8UqVWiHu"},"signature":"RDWJhzXeRnLK+LP+fVGI+8J7sxeIlMMVzAK/R8OedsxHBQEefw2iGrIrTR0uHYv3L6cgii/Z+6bqFzndnugzqA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1epks3gt4rrtyw4lkua4ra682cayl3yxk78hslk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["dryrivalyw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsrF0SRQyXvAlTfb7UmSo2HTBwdgchPpjPlA8UqVWiHu"},"signature":"WGiiAhbm5RQK9YaJlE5X6X5g3DsKYmzNTgDu0UfRYCZMGb2DS5tAGDfOb0p4sVuAnR+zAcDuTSu1Z2rfE9gk6w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1epks3gt4rrtyw4lkua4ra682cayl3yxk78hslk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1752","dryrivalyw","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsrF0SRQyXvAlTfb7UmSo2HTBwdgchPpjPlA8UqVWiHu"},"signature":"aH6wraPjvZxIEbraK0JcQTLGhSXhztUeb0ZT24Vth+Y++znktPCpGmWpDh0yL2PZJbKlohPsQpWCbQ3QcNKeHg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1epks3gt4rrtyw4lkua4ra682cayl3yxk78hslk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1752","1","1","g1epks3gt4rrtyw4lkua4ra682cayl3yxk78hslk"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsrF0SRQyXvAlTfb7UmSo2HTBwdgchPpjPlA8UqVWiHu"},"signature":"fcTaSXZKaydBxpttEnksf3saQ70dJaWXtufyXqHIEjoy2FVsBw1qcqGqjJFsSd8Z7ZsRWl9WFUV8NvWg3/o5Lw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1sc7k7zlp356nmm7rd2n7s9vwy5hkcdy3g663lu","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"dSPylh8wnjLvkicuLvP7n8cruQ/I42WxdRgRkBct5lRM8l72pLGvlp2nqcDhE2AVeDzxrb4mkVQSOQ6etsK8nA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sc7k7zlp356nmm7rd2n7s9vwy5hkcdy3g663lu","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","nosemimicnm",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzXjcY8Cel78NVdxznJ+8Riu86Fg+vYx9fl++Czp+4/U"},"signature":"4rFw2UY2pFzsiRTyol6H5mcm1GSTNodtBLy+3hgI4ZAOl+xJsMzP1WFmcvoCm1iFxjkpwk+0wrbVqKSRlRxVKw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sc7k7zlp356nmm7rd2n7s9vwy5hkcdy3g663lu","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["nosemimicnm"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzXjcY8Cel78NVdxznJ+8Riu86Fg+vYx9fl++Czp+4/U"},"signature":"ow06okycNnuwPPRCLcyRv3ajHVP7c5otFgB0csXgrhFb63FR3s5Es7V1rI6NbKsfyB8U4w2zpMOuwih7vUD/AQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sc7k7zlp356nmm7rd2n7s9vwy5hkcdy3g663lu","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1753","nosemimicnm","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzXjcY8Cel78NVdxznJ+8Riu86Fg+vYx9fl++Czp+4/U"},"signature":"kF+sNfqznvJK7bZzF8erSso0S8i0aP9HWJdNQzeF5RgvQUaQw+7AixbIBD4uDcfrEoMoC1bfKc1Ox8Ga/I4NXg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sc7k7zlp356nmm7rd2n7s9vwy5hkcdy3g663lu","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1753","1","1","g1sc7k7zlp356nmm7rd2n7s9vwy5hkcdy3g663lu"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzXjcY8Cel78NVdxznJ+8Riu86Fg+vYx9fl++Czp+4/U"},"signature":"8BaBf5BUWUrJv9c8RKovW0YX0rimXowkabKUl/Q3XDwpauVkS6QXa5dZk1dJdMLyPLBb1J8WU8h4kNV73vjcmw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g102ul4c3am9xyxe43xedxgceuqg4fxmv7ccd5w9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"wPiLNF0+PKaIn1C73mD0h2ykJhspVJEFRqYpt7x28Dg+oH8yyZe05wByo4IlgUgIV3FWPv2DuLwOZxUDqPqAjg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g102ul4c3am9xyxe43xedxgceuqg4fxmv7ccd5w9","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","groceryenoughyx",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Auj9ESfYfWBe1Cd6nOz/xKAzDlMjq11/N47HwGWy1LWr"},"signature":"dF914JrKbPrq4vEKYmoIVMksrIolUACFjUljABrTJXE4lyqGW6iHNb9wl3sNMsHtzG1IymBOO/fLVe+f63ijHQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g102ul4c3am9xyxe43xedxgceuqg4fxmv7ccd5w9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["groceryenoughyx"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Auj9ESfYfWBe1Cd6nOz/xKAzDlMjq11/N47HwGWy1LWr"},"signature":"7gdCCe1K/3pSoZYuBzqcTELtPqck/k7fUedNX92IpUlkE9qnJAcZsh+S5UCRFTAPBvMmk3GWjqPHtmlJfHXzVA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g102ul4c3am9xyxe43xedxgceuqg4fxmv7ccd5w9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1754","groceryenoughyx","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Auj9ESfYfWBe1Cd6nOz/xKAzDlMjq11/N47HwGWy1LWr"},"signature":"HYdargMpjlO6xi+HFb7mevqkEE6gXKaQLGjz3kSKmZ8S6NHweGEj45YzjDeOOW8yqcgtRcf8lOp5NTA7DnEmhA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g102ul4c3am9xyxe43xedxgceuqg4fxmv7ccd5w9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1754","1","1","g102ul4c3am9xyxe43xedxgceuqg4fxmv7ccd5w9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Auj9ESfYfWBe1Cd6nOz/xKAzDlMjq11/N47HwGWy1LWr"},"signature":"Q3+OJEbLdlstOVxBfRZf/nCmtpuNA6UeB747XQZ7RRoUo8WYnMCYCWbUqKfdlYW6OmDq9EzXNtIgknEwd/0Yrg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17dsezvfgzehv6d72myv7hggrfll3se22yy878l","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"tkSiVSLhwrdve8AwkkbC7a1CtTqNwdGvpBe6NO09A1wgxIUWuclVYCCecIihhB92hA21fJOOpy/oiIr369KeAg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17dsezvfgzehv6d72myv7hggrfll3se22yy878l","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","cinnamonmobilev6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsOvEFjugWg/A2XYEUqWpcHk5DeHrdGmIblilpCezdAP"},"signature":"wu9jDEPfOJeucgfk+mvq0QxBdknqiynaEshNiwEUaERns6XtCpTALteZNMi6YEylIeNht6meLIYfXPQnTVd1vA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17dsezvfgzehv6d72myv7hggrfll3se22yy878l","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["cinnamonmobilev6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsOvEFjugWg/A2XYEUqWpcHk5DeHrdGmIblilpCezdAP"},"signature":"lmKNxb3u+rXBHU7C+o3wTQalO1tsWtFVUjtfTam0uUg2VeD02xmowJGXgGCp2cFkoogj1+yFizZp/U1ZMOK2mQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17dsezvfgzehv6d72myv7hggrfll3se22yy878l","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1755","cinnamonmobilev6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsOvEFjugWg/A2XYEUqWpcHk5DeHrdGmIblilpCezdAP"},"signature":"ImudlJDYhUnolOK5bsNOp+BH+eyLz0d8juM6kryRJWdNUffUBb9blNkulpuoCnJ4Dql5D7phWYgxZMrxT9RgYA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17dsezvfgzehv6d72myv7hggrfll3se22yy878l","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1755","1","1","g17dsezvfgzehv6d72myv7hggrfll3se22yy878l"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsOvEFjugWg/A2XYEUqWpcHk5DeHrdGmIblilpCezdAP"},"signature":"z5ytzqPZXKqqX8G3s1rJbv9gOrIORDOoGA9DshjmhARtFmVXhhugWnUEKFR2upc4aMR7VOEE17iTuZxkdIYSeA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1sfueflg87ef28hc0v5qsh9lm7l77dqav9saalq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"7Yt/OV+lYXiaXThPl0CqSLnJWxtrNE+QQlCiFq73A1Fgy/oqT0gVtwjPoqQwqTrMjpriumDAmwBZus8rFiMtVQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sfueflg87ef28hc0v5qsh9lm7l77dqav9saalq","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","bundleaffair28",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7OGiM5nEmOJGjnhTRaU/mRDlEwFlwSb4Opu7yIc8aSW"},"signature":"lSNuDcMSuBX56LQ9lgtTRmcssmK8Cds6tiwtujSqDW8lOgwFt5cZFhkb1Gpoo2BNNkDvnb8cSZgLSmqg7QwDcQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sfueflg87ef28hc0v5qsh9lm7l77dqav9saalq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["bundleaffair28"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7OGiM5nEmOJGjnhTRaU/mRDlEwFlwSb4Opu7yIc8aSW"},"signature":"lk7EtZ4Tw4M8vtsVthebpmMvOvsVOkCd6pTjqiznbz0vDli598xnwc2GGbOPR6fUO+Ke9OF9cZzPV1BS2GYjhg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sfueflg87ef28hc0v5qsh9lm7l77dqav9saalq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1756","bundleaffair28","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7OGiM5nEmOJGjnhTRaU/mRDlEwFlwSb4Opu7yIc8aSW"},"signature":"rw7InqW7pOWVyxGxknI9dgBSjOm9makvKj5yQj+sJdEJBKxRbTDxCSlC3D3xKAbNE4Ry/vEaYpYC5I4eBw4wtQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sfueflg87ef28hc0v5qsh9lm7l77dqav9saalq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1756","1","1","g1sfueflg87ef28hc0v5qsh9lm7l77dqav9saalq"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7OGiM5nEmOJGjnhTRaU/mRDlEwFlwSb4Opu7yIc8aSW"},"signature":"J289Y2ry5CegyJOlcadLHQBX9sVWeouUr815Q2nJvKhXGzsTc58mJV9n98C3hbuHMgZE42bURJwXT5QaATteBA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1arg50ld50uvtm5d2xuksx3ut020z2wa0qur97n","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"CpXwP73wgvX0MY2AqgevdtJXOZJ4c9ieYFXRfjhvvmcw3L7jn8SsE8/NvRhbIFaE6GH18rYQE/B+7Qo5/Sm96g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1arg50ld50uvtm5d2xuksx3ut020z2wa0qur97n","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","decoratediamondtm",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A52scIdcJukQXD7A5ZiaWgVZBX/E1AbhVeysIVmdGaoN"},"signature":"3Cj7RkgiNHxP8yEVVrrp+G+1IQminMgHIRNqg0Xb3C1qDoa8RlMW0SVvT5R8uF+IuruTDwOK4JeZeep5TMn5sQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1arg50ld50uvtm5d2xuksx3ut020z2wa0qur97n","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["decoratediamondtm"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A52scIdcJukQXD7A5ZiaWgVZBX/E1AbhVeysIVmdGaoN"},"signature":"xgRxDWlaUXjCxyZcs1k5VxH05Ymf9ZOTI4EnZni9w0xzAYziKSBIFLn/kh4RIS2UiqSWI9X60p486joMXTf2oA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1arg50ld50uvtm5d2xuksx3ut020z2wa0qur97n","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1757","decoratediamondtm","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A52scIdcJukQXD7A5ZiaWgVZBX/E1AbhVeysIVmdGaoN"},"signature":"MYTqMuBORi6H4bbH/Q9Ka1aK0lLCfNSBkJNr92FA8V54iuHjRuhgojSTjac+HYeha9pSvnC4yCefm93HVOBrmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1arg50ld50uvtm5d2xuksx3ut020z2wa0qur97n","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1757","1","1","g1arg50ld50uvtm5d2xuksx3ut020z2wa0qur97n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A52scIdcJukQXD7A5ZiaWgVZBX/E1AbhVeysIVmdGaoN"},"signature":"XKVF9B3bSxEqOaVYpnW6ILVncOIbccrYdWEL/1+OaktdCYlkLmAMB6v/JSfGKqGQO1/0cQGjiEtziGbRI6rrBQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1p0entnm0rhs2ulrpxt32hn077xthauywqcay4u","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"RwdjzkpiOdDZCnreWT6Bctx6BShOAGXK1pQ4JNlh7oEdmbzYWGS6x9tIxXU/AMtVPhU/9ghUrQYO/6jKubGBEw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p0entnm0rhs2ulrpxt32hn077xthauywqcay4u","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","helmetinsect2u",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApTp6XWZaEFTqLPCB386WuomssTr8toA9jG2LQdPegtR"},"signature":"8mjQ48B7X+utx3Ntesye5FhPAbLiILI+eAd4bBcOs0JuEZkCw+PkQlhLmOTADwTQ8tWib6xIcCeEVnmu9sUd1A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p0entnm0rhs2ulrpxt32hn077xthauywqcay4u","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["helmetinsect2u"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApTp6XWZaEFTqLPCB386WuomssTr8toA9jG2LQdPegtR"},"signature":"DoS5rQSCQcJ2mTll0ymJJsJmoEZOEIIReDAnrCA8MzdNOAShsSBLIjFqcJ6B36o77tyIynnIJiZ0AwLCzO4+UA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p0entnm0rhs2ulrpxt32hn077xthauywqcay4u","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1758","helmetinsect2u","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApTp6XWZaEFTqLPCB386WuomssTr8toA9jG2LQdPegtR"},"signature":"Sr7WSoTP2P5PYuPLujf3Ll53umvA/whKIh2zmNGRt9NfYQ48Pg4D06GUT0yNS1+/LQ3Kqm/XPG9+1g6R1Hje5w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p0entnm0rhs2ulrpxt32hn077xthauywqcay4u","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1758","1","1","g1p0entnm0rhs2ulrpxt32hn077xthauywqcay4u"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApTp6XWZaEFTqLPCB386WuomssTr8toA9jG2LQdPegtR"},"signature":"t8jgXJ02pwpsRWOMK4YTDE+xIgIOPfRc3miq1IU3KOFmuZ6NUGdegHRldWwmmChYtaBPaG30jREyg9p+57Hw6w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lz8skx96vj3zfq6rnth4ndmm8ngd506qwfltj0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"QL0MYcntWVJJz4bks2pILRsNgzz/poKuhGWSskirSSAiozjzHErmfeDadYxH2JtFP/JV+7C2jCeapW46sAHdgg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lz8skx96vj3zfq6rnth4ndmm8ngd506qwfltj0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","gapluckyzf",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4X2AXlXxhcY04iFFZzyMHrS9Xbtj+t4FlWTH4oXzHtN"},"signature":"pj8gfgAfk0owZi/LTEaqSmxg92FNguP3yfIQ/m797cZ08tA7E+8FZBt3kZPtFHTIxPZMIsRCEsQJDTrLAQSRUA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lz8skx96vj3zfq6rnth4ndmm8ngd506qwfltj0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["gapluckyzf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4X2AXlXxhcY04iFFZzyMHrS9Xbtj+t4FlWTH4oXzHtN"},"signature":"nBl9Q+Ewq+BhjuUanvDaHLpasdIz3u6ofnr6OtexM6V1118C3/fi1sEuL8Fbgqj+8hGrsaFd8z9pKNJ8Q0A8ew=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lz8skx96vj3zfq6rnth4ndmm8ngd506qwfltj0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1759","gapluckyzf","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4X2AXlXxhcY04iFFZzyMHrS9Xbtj+t4FlWTH4oXzHtN"},"signature":"twL5Yd3cIbAzDYfqj+l1z2pz1l4yeK9WLI5+2QUk/mlcZiD3q3j3DzqHu1HbH+MIVPgE+xqMttktiXvhbkjokg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lz8skx96vj3zfq6rnth4ndmm8ngd506qwfltj0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1759","1","1","g1lz8skx96vj3zfq6rnth4ndmm8ngd506qwfltj0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4X2AXlXxhcY04iFFZzyMHrS9Xbtj+t4FlWTH4oXzHtN"},"signature":"MbeJvkGwv10p9+dB5viCjPPciArkGlnKghtTwGc+2Z49kLUwkQFqtYHIioIn6HYRqvzgiR3KjfjoxNZQT2IaFQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1cp8gk050w6075yhrjkl8y6tgc3553re2gmtf5n","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"OIM+iL2CvQ8oNjTp5SfpCI4cWnIKct0GgJX6F+JOq0dLmzagad2PlBYQJ+d2x7CXu4vhsDAyUJiRvBspcEtSnA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cp8gk050w6075yhrjkl8y6tgc3553re2gmtf5n","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","culturepoet75",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Agpp60+w9tuDKrQnQKN8X6g1PY6J80qIuXQTHTdlpJpB"},"signature":"Lr6BSkL+SkicWs749pbNzxsB34VlGsh50lVNrmUDQVRpWd9peb1iKIDPB0XPUqyKlep8Wr90CEPeMnW+fdKF6Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cp8gk050w6075yhrjkl8y6tgc3553re2gmtf5n","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["culturepoet75"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Agpp60+w9tuDKrQnQKN8X6g1PY6J80qIuXQTHTdlpJpB"},"signature":"lMq0R5j7u7v+m7m0NahVx+bmBeXW4fdKstqRe/FUXKYwgwIbRsUA6xhZibL4gunl/6gUOrJRbDkSIjgdFRNt+Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cp8gk050w6075yhrjkl8y6tgc3553re2gmtf5n","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1760","culturepoet75","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Agpp60+w9tuDKrQnQKN8X6g1PY6J80qIuXQTHTdlpJpB"},"signature":"sAFQHKLHzoqTS48K/8nwZ2qN8ZKHzrYP4aknTKdVk7NwRJwdP7Xkc3K51LRdwETYykEutmkbPaSkRSNL+SQD6w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cp8gk050w6075yhrjkl8y6tgc3553re2gmtf5n","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1760","1","1","g1cp8gk050w6075yhrjkl8y6tgc3553re2gmtf5n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Agpp60+w9tuDKrQnQKN8X6g1PY6J80qIuXQTHTdlpJpB"},"signature":"DIngYAZpjwR1UJsqkuEc6WUTOTfeAuk3/7LG3aZvp4hn/MkqIZLXyVbkgzQyRs40SqpRIa5bZ7v+Ujs6KIl20Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lrahp3j3xdr8fetvhushtu4spt3r9kdx3t5kel","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Vticrxmkj+ZfkpttdNuVNEHMNDODufja5VNqDxilRHd/bBXxwchj2fEqNzJuUC5ZjqGoSmH97DTO3d8IL/oDfg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lrahp3j3xdr8fetvhushtu4spt3r9kdx3t5kel","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","attackcatch8f",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8Y0MS8ykJlHANdOxUy6+q22Fp/1Xi6CvAC5CpzR+5l1"},"signature":"i4xuJsjLbmTS4n8FmOyDWjoUvZvAAkPUCnINdFxTJbJy5tSFHXEZrG9AzpEzYimmlOArrmel/OYURR1KCZEKcw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lrahp3j3xdr8fetvhushtu4spt3r9kdx3t5kel","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["attackcatch8f"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8Y0MS8ykJlHANdOxUy6+q22Fp/1Xi6CvAC5CpzR+5l1"},"signature":"Ioyu5DlhqSY0memRxXqDl3YVxUCJZzDtf5PgP3nqsjsJjRVV71kkcajMXg9+NxifkOKneE66olMFlfubgUnGrg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lrahp3j3xdr8fetvhushtu4spt3r9kdx3t5kel","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1761","attackcatch8f","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8Y0MS8ykJlHANdOxUy6+q22Fp/1Xi6CvAC5CpzR+5l1"},"signature":"FIRSF+L/MEPNlo3CmNaB0a/kQQ/d3r1T3Pl/l6HOQQd6GLARUNc7spq2mbQqV3jImSdpIz/Z3VU+pwWZsa7RPA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lrahp3j3xdr8fetvhushtu4spt3r9kdx3t5kel","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1761","1","1","g1lrahp3j3xdr8fetvhushtu4spt3r9kdx3t5kel"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8Y0MS8ykJlHANdOxUy6+q22Fp/1Xi6CvAC5CpzR+5l1"},"signature":"z4EaPPnqetNkH1+q6oXbJRj9fH5Cr0FlfyqBTmg9EC8uCVI7AsHScQjK7DnYxP27HI+qq1KOLbGrpF5pqmESpw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14whz0jh75tee5nwhcme7kjym8ct2gpmzum8qjy","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"cM/Hys85m403A98m2yLSkxx8VVYvEQC7agMB8I8RbR1F4G7kjp5l3ZasaKnp/VZ/ov8uX1Z8/8kb9HlFkzf3YQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14whz0jh75tee5nwhcme7kjym8ct2gpmzum8qjy","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","sugarcategorye5",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Auy4rubz3A/7kyKaZyq3amlq8F25eeMCMarA8xE8ydLe"},"signature":"7iYQCt7IKo8Tb6DDl5OsEcyC+3PQuj3AXdesLRxr1wpauxl3swFnNk3PwPapkOUCp5Qp0IsxB+aCCUryzjzl5Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14whz0jh75tee5nwhcme7kjym8ct2gpmzum8qjy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["sugarcategorye5"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Auy4rubz3A/7kyKaZyq3amlq8F25eeMCMarA8xE8ydLe"},"signature":"EWkeTiNaX7k5BlAo76nelQrCsP4w98uq5M3EBA6MVXZpr5Bn0ca4g78ESzBj05dOrPOhZrgIfNblFyKw/js4Kw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14whz0jh75tee5nwhcme7kjym8ct2gpmzum8qjy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1762","sugarcategorye5","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Auy4rubz3A/7kyKaZyq3amlq8F25eeMCMarA8xE8ydLe"},"signature":"uPAj1tccQP6/nimYPp74tyYxlHmEgKUdg7f/1Bu8fAICzespESXCpiWEZkUpcw7WfU/4BivmzW0bZjlP82xGMA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14whz0jh75tee5nwhcme7kjym8ct2gpmzum8qjy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1762","1","1","g14whz0jh75tee5nwhcme7kjym8ct2gpmzum8qjy"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Auy4rubz3A/7kyKaZyq3amlq8F25eeMCMarA8xE8ydLe"},"signature":"js++jEnhalxvyBhcS0dZZqpt+z/TSiicZwQEvehKtb5vL8TS68tCaJGqfpZWKLl0fJpVrH4Tv8AI3hiV9jpg6g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1mnpt36q5znust36ft6ldn3s93dr340zeffvgxv","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Bqc4G/E4E+CL2T8CiMLNAQltncnHi9QSDYrxsy9ce68ULP+VkygqZpA752f7lvTcY9UmQFzi+a33y8lj7NTeHw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mnpt36q5znust36ft6ldn3s93dr340zeffvgxv","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","crispcoursest",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgcTmEk/qA8L+waRrEBPjF+70/ZkmMIEEqAuYKRFVLlz"},"signature":"mGOPAI1z8EvHN4rj7UbshRPlb2RgHtrAIkKt5MZSjIdQcGp20aRRNieh5FBheb6Zmd2XDVOjXR+eX2dj3XU6DQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mnpt36q5znust36ft6ldn3s93dr340zeffvgxv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["crispcoursest"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgcTmEk/qA8L+waRrEBPjF+70/ZkmMIEEqAuYKRFVLlz"},"signature":"zuwCaH9IomtQz/C73fNK0FT0DEv4FY/Dg48EpabqV+EZJk1KJ8rXJ4QByCv1y6tChSA1fZVoVLaFqj47gXZKwg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mnpt36q5znust36ft6ldn3s93dr340zeffvgxv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1763","crispcoursest","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgcTmEk/qA8L+waRrEBPjF+70/ZkmMIEEqAuYKRFVLlz"},"signature":"NM9TOzVKV44DiQMrBH9Jj2BN1l9X1Hg4bDsI2srrvQ8R85Ivbu/HjEVEalQCmB14JNp6MupLwFusYeTKOUpfJA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mnpt36q5znust36ft6ldn3s93dr340zeffvgxv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1763","1","1","g1mnpt36q5znust36ft6ldn3s93dr340zeffvgxv"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgcTmEk/qA8L+waRrEBPjF+70/ZkmMIEEqAuYKRFVLlz"},"signature":"vNiCPpcSTpdxrF4OLr6pnZd/fPevRQlyxMq1z+HCOpkz4+OW4lX24AGTua6Ktc/SmC7AvqHfbiQ5CMc3hNUJhQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12s8z5v6kw2la3dxhj76d06u8xvkkx5jlkz4kah","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"bAw546b3lruBprsPUamNYlIehW+/2zL8gQeUaAcbD+B2yZSbL6VcbM8pedaqbtfQ81eB1gykpe5hqBMpqI6qqA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12s8z5v6kw2la3dxhj76d06u8xvkkx5jlkz4kah","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","usefulalsoa3",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5vMFyETQPt7645zEjVxjrkQFCbXdsdWt0YdAQn0YA8F"},"signature":"/ZqahfADCJUdSN6F4Bnvcd2tzPp1U4LXHHg/wuPhv4ddO7jnawc93OhyKJvAKRBMKTYtMhkUt0p1nRMXVa0K8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12s8z5v6kw2la3dxhj76d06u8xvkkx5jlkz4kah","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["usefulalsoa3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5vMFyETQPt7645zEjVxjrkQFCbXdsdWt0YdAQn0YA8F"},"signature":"+3xt5kkWFlVz9Kygh0KrLeQxlnLkqOMJ0i5tm0qAFroDbcIc6biCGIN7r9c8sqGry74utZqJkB2880Haw0v+kA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12s8z5v6kw2la3dxhj76d06u8xvkkx5jlkz4kah","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1764","usefulalsoa3","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5vMFyETQPt7645zEjVxjrkQFCbXdsdWt0YdAQn0YA8F"},"signature":"rkKOakNyWAFntbyoF5z9IiF93AVKTTubP6Jz/bjowR0eTcLwq42kS8Vj5GX4n8rSq/ZNp7hmBn5J25B0qtEpLw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12s8z5v6kw2la3dxhj76d06u8xvkkx5jlkz4kah","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1764","1","1","g12s8z5v6kw2la3dxhj76d06u8xvkkx5jlkz4kah"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5vMFyETQPt7645zEjVxjrkQFCbXdsdWt0YdAQn0YA8F"},"signature":"jI5gNsENeVIgwne1HhxgggtA0YuecXtW0xtHFzbdNnQM+Kj8CB+DQi3uaUTVpA+ufNFw6nrQPWYjN2Y/vjxstA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1na607e06jprr6zvzf2tv60z7k58fhlzxasn676","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"+ZFcaq6pO1wY1MLmkgeeOygzBfdyvNRyBVmb31vJT6t27LEpky6uUKuTpsPopSy3JWZNY7V9ypaJEMpMfVQanQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1na607e06jprr6zvzf2tv60z7k58fhlzxasn676","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","indicatethemer6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+mapPwZGe33HPDOuzpr+O0IRloc1Fms8VkRMCE4N2xI"},"signature":"MLIdirnbYxFbPch7q2xY19/52ainahmDfWDI5BxANe1J3gzFRoSeWtNAhnHD03uv/fJSAOCYfd4DEp7KeOO2hA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1na607e06jprr6zvzf2tv60z7k58fhlzxasn676","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["indicatethemer6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+mapPwZGe33HPDOuzpr+O0IRloc1Fms8VkRMCE4N2xI"},"signature":"AlPhWg3qw4N/YDjN4QhUn9xvroyUmh5ZfZ7lzNhP/+lM5zNuuhMO33hCNA0ov2qxRxL9+XcD1gfwcppfVOmYbA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1na607e06jprr6zvzf2tv60z7k58fhlzxasn676","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1765","indicatethemer6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+mapPwZGe33HPDOuzpr+O0IRloc1Fms8VkRMCE4N2xI"},"signature":"+/E3ZKkm9vUd0BhH73RZuU0SbsTICndefW25VoTuJ4k6tfj9VT2feTPazTGXCnd5yx/IAE9SGEUScuHzRT+4VA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1na607e06jprr6zvzf2tv60z7k58fhlzxasn676","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1765","1","1","g1na607e06jprr6zvzf2tv60z7k58fhlzxasn676"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+mapPwZGe33HPDOuzpr+O0IRloc1Fms8VkRMCE4N2xI"},"signature":"HHKs/vcYPBx5boJNSXxcQ1c3bzB2b4J5A9KZi/8ORJREYNAVtgXPw2PhoYsV2A5WAJva0w18Qqs9MixxO3dEhQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18f6hjusjwkuqgy4ed4wgr7m4cc9wdh7tfy93s6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"4j9z+8UXtFRjKvJmy4QjSr9NsNzAPExoeUW70PRupvgpjkUgFJ44OBgK61/1FJ+BRjs7ArcowXNVNWD8wzzf/g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18f6hjusjwkuqgy4ed4wgr7m4cc9wdh7tfy93s6","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","stamprequireqg",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtBpsoPY02mv2XbJlgiRCGFR2Q9nB9RHbkAaeJNlexYd"},"signature":"Yy+3sy+f3dZxGHXFM8VuR3AVPJCdlqbs5kWVutjqoNUm8fHGS/Ox3W9GeYbkifFrB1BOFAM5hu+qpEugsQC/OQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18f6hjusjwkuqgy4ed4wgr7m4cc9wdh7tfy93s6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["stamprequireqg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtBpsoPY02mv2XbJlgiRCGFR2Q9nB9RHbkAaeJNlexYd"},"signature":"m/ucUHkFu1E+EZCFoJYK84x49sUab4S5nQVGSXb4zHoq9T7ebqhf+xuYWZLJr+KvnWG2V4EZfEiLOWhsImS0HQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18f6hjusjwkuqgy4ed4wgr7m4cc9wdh7tfy93s6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1766","stamprequireqg","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtBpsoPY02mv2XbJlgiRCGFR2Q9nB9RHbkAaeJNlexYd"},"signature":"tAMPbEypCQRcY+8q4jh2OguUBwdjYk4uJVsmfiadVm8xEzao5SPPhs9oag1K7liZooVMy2lbPUhRB0FTrv6cWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18f6hjusjwkuqgy4ed4wgr7m4cc9wdh7tfy93s6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1766","1","1","g18f6hjusjwkuqgy4ed4wgr7m4cc9wdh7tfy93s6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtBpsoPY02mv2XbJlgiRCGFR2Q9nB9RHbkAaeJNlexYd"},"signature":"ts4UyGSf/n3ds+wBzECS2Ze68gXo5osTXbRxxcQnzBsphNx19l83+lCvLQO38d9v2w1Sb17kndjJ/OEYu5Gr3Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hxd6w7qyvh2e90eukc8qcy5xd0ly9vl7y330ns","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"EDTLSLfTW8YyUPdGXwWjc8OSn3fGUOcth7UnoimWL/lgCmlQ6zrHQ/FqFtUK/fppLDxcS18lHmhuBejjsuLY+g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hxd6w7qyvh2e90eukc8qcy5xd0ly9vl7y330ns","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","defensemarche9",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmtQTSQboV7dPy1f+qKw9zemh6CFhzbJzJaT/XQxjlAk"},"signature":"uriKYQD+EMJHvpQjhQFE9Gn24Q9iscAxIDYspbNCUCoD+T5oFVwHJwCV5QxlaWeFGhJK7hbfKqt1fzh6BtNT7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hxd6w7qyvh2e90eukc8qcy5xd0ly9vl7y330ns","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["defensemarche9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmtQTSQboV7dPy1f+qKw9zemh6CFhzbJzJaT/XQxjlAk"},"signature":"yW4428Xnk3Yi0yMKoYjVf6fudPMB53qqtexvx/iSNMhYjpixR4FQyPb5fMAHKAZT4b2nLJ6VUdyA9+aZfOmPiQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hxd6w7qyvh2e90eukc8qcy5xd0ly9vl7y330ns","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1767","defensemarche9","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmtQTSQboV7dPy1f+qKw9zemh6CFhzbJzJaT/XQxjlAk"},"signature":"RtcHwzwDrsqJTFKCgxoG08ZI05EnAUAaIf2yF6JL3rMJAlZUNCFWms/ye1QqQplyb/dP6+SlsuefIo/Pjf/Dsg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hxd6w7qyvh2e90eukc8qcy5xd0ly9vl7y330ns","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1767","1","1","g1hxd6w7qyvh2e90eukc8qcy5xd0ly9vl7y330ns"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmtQTSQboV7dPy1f+qKw9zemh6CFhzbJzJaT/XQxjlAk"},"signature":"cHBhsQVS17zxsGh+IijhtipvH3G7VcamKednyby7KAQaLy8Q+kqMiv7gjjjeQ/uAsXvYPAcBEo2evxQ7Vc0DtA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1dv9yhurp3cqq6dfvvmn0ayenfwhzu7wrsvykrk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"MUHqE/FauSLrihod097FmDqqO7BFGLqr5UMCLBFds04ZxE38W4DTwy7ybLIKT2VZ1KVtiVPBmDLW08Azkd0zaA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dv9yhurp3cqq6dfvvmn0ayenfwhzu7wrsvykrk","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","limbcraterq6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvogUu0Hyc7LAk4PD+uozj1xkykLTIEnKdGT1s9nl3Is"},"signature":"PY66XLqKsoNbTQnFdHyQ+mxaXdeyWHcdgPTdg4A2P5ZwDq7yYvnhJikwtildhuzafjJectOvtF3ouNrBykoHOw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dv9yhurp3cqq6dfvvmn0ayenfwhzu7wrsvykrk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["limbcraterq6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvogUu0Hyc7LAk4PD+uozj1xkykLTIEnKdGT1s9nl3Is"},"signature":"IKNtBcRqO7qrBtTyZztcfchZ5ZlpsQqNK/NFpumqOUB3n6pp+4UwPlkcYzoYkhlOlIYtvUOrfNNg7FeJQxodtg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dv9yhurp3cqq6dfvvmn0ayenfwhzu7wrsvykrk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1768","limbcraterq6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvogUu0Hyc7LAk4PD+uozj1xkykLTIEnKdGT1s9nl3Is"},"signature":"U/1n7BUTJa9+DFKD2guwYpIs+UjQ9uCmP/VGjh+AVWNffqI9aVfeVllw6uHHSn0T373UwRmSk0MbDAyuW0hdNQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dv9yhurp3cqq6dfvvmn0ayenfwhzu7wrsvykrk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1768","1","1","g1dv9yhurp3cqq6dfvvmn0ayenfwhzu7wrsvykrk"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvogUu0Hyc7LAk4PD+uozj1xkykLTIEnKdGT1s9nl3Is"},"signature":"7F2/nZucluTeZ1SmzGlcAivmb67KDqYsPb6S1fkMTT1a9ziuT3p+DDo/DATEZqAYTjCrgBfbwiigNSG1eTUQUA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ns5x9yeqqn5xle89xu352penj4n277s6c8v6hm","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"lAv8+8qWUYQk73lqPEAgK0Eh34bxb00HYfFZWYnh7zwXsXZDyETHsDNF/CrH4kYsvaDNtEGAxQfzFf+ls13Kzw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ns5x9yeqqn5xle89xu352penj4n277s6c8v6hm","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","uselesshurryxl",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjDRuZ7IA6kEWAQVMmGgPmxpPKP5CFljkmU+gm9+mOsd"},"signature":"KfOGDlczqjMkIqxV8ZiAd5cHOfv4Wf8MZjJYFa6OnvM478Bt9924NdDoU1a0n8LMClbgXhWVwdt5S1VBa0AtnA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ns5x9yeqqn5xle89xu352penj4n277s6c8v6hm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["uselesshurryxl"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjDRuZ7IA6kEWAQVMmGgPmxpPKP5CFljkmU+gm9+mOsd"},"signature":"sQzDpLmE+V69IsnyqVkNIyFEq8Dwr4y7YGBrb86RMF4qDJXOhasoDE4/p3YAV+QPoUO0BAzbtli7eYcikqj8Cw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ns5x9yeqqn5xle89xu352penj4n277s6c8v6hm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1769","uselesshurryxl","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjDRuZ7IA6kEWAQVMmGgPmxpPKP5CFljkmU+gm9+mOsd"},"signature":"ZQe673CVfMfXEaJ2zRE7Rlh5z4CYftKqB3oIqxjfwWdQqk4awG+iYF56WuDyZaZhsd2E1vToKp/yC6r5SKdUtg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ns5x9yeqqn5xle89xu352penj4n277s6c8v6hm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1769","1","1","g1ns5x9yeqqn5xle89xu352penj4n277s6c8v6hm"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjDRuZ7IA6kEWAQVMmGgPmxpPKP5CFljkmU+gm9+mOsd"},"signature":"E+C8Aa8Fl1KZ6KuuYyHEGnpGF7AsXngXxlCswS28Qm4luzJ8f+XOihFEmIvvWsqZdyLp9G52vRTzsVu87dspVA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1m6nrkavu8sgx48t0j74tfszl9nmuamcf9nsh6j","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"MPYT5rsvO6Kq2geeBEnsMuL5m6+br08XXQw5L6qIQuYkfHBytDjovZRQQ4uxdbOc15/QYJ4hVsndpfxbt2wYEg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m6nrkavu8sgx48t0j74tfszl9nmuamcf9nsh6j","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","finishviciousx4",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwKwAFzLi/aukNBZJAW11VRBW2y9WjsGl9pkFai4PxFW"},"signature":"yIb8IBvma13s3HYOFlELnJNVDM22pWxYdCkIugBiW8g58LdjtUO7Qobzio6AllIqYSRymxMj/bgmoU5YWCkyZw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m6nrkavu8sgx48t0j74tfszl9nmuamcf9nsh6j","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["finishviciousx4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwKwAFzLi/aukNBZJAW11VRBW2y9WjsGl9pkFai4PxFW"},"signature":"l7+DEkgXa3FfBSWRcqODuwG+47thMluHW17Jv72XYSwnbvrpLQ59J40G9dhyUTc8KQ06Wv/+F/1/Uq4VFrzaRw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m6nrkavu8sgx48t0j74tfszl9nmuamcf9nsh6j","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1770","finishviciousx4","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwKwAFzLi/aukNBZJAW11VRBW2y9WjsGl9pkFai4PxFW"},"signature":"+uiXKFinTe0xhNnR0j2pQ95dRKjRg2S/CUEbt+NS105ez1GRr5kTKK6DKol1sbIMAVWLoOSP0freidYLMWGoig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m6nrkavu8sgx48t0j74tfszl9nmuamcf9nsh6j","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1770","1","1","g1m6nrkavu8sgx48t0j74tfszl9nmuamcf9nsh6j"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwKwAFzLi/aukNBZJAW11VRBW2y9WjsGl9pkFai4PxFW"},"signature":"ucykeVR9Lfw3FXQ+yaOZ1FDZtS2jv7ogNfo2wx/gnxRtExNyt2uXGb1hibLkwrqEAWv5jJCDq4f/Uyhow+WVFQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1n4lqvctufcufzsm0g00vpv9rdhc0h4mu05f5jl","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"hGK0Lv4DkJTjq6bCz8P5oso328h+1bJKoLOd3ZR1A9gHvzVYJ26B9MUSOhJ/TJeS/owGac9D+66ymjYlSNai0g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n4lqvctufcufzsm0g00vpv9rdhc0h4mu05f5jl","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","readyscriptfz",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AveughziOul7YRXlH0CsZsUSwacAtLj4Oz894//DBfUl"},"signature":"pcV+SsqczfJO7wr2UzH+p/CFamVEM1Kun15QLUyDK5xfe/7CM6yvCXcVokX+QBcB997Rqute4G5QOVmdUgRSTQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n4lqvctufcufzsm0g00vpv9rdhc0h4mu05f5jl","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["readyscriptfz"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AveughziOul7YRXlH0CsZsUSwacAtLj4Oz894//DBfUl"},"signature":"x95D1jvOXjHE9ym5AGiouRdsqSIS3XrTo3LHOMY3/Ucpj1M/07zKZp9SVdt1KkGjTJ00awWYBMNmJI14MQ0fkg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n4lqvctufcufzsm0g00vpv9rdhc0h4mu05f5jl","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1771","readyscriptfz","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AveughziOul7YRXlH0CsZsUSwacAtLj4Oz894//DBfUl"},"signature":"OO4AmvROcteucL6g5Lhl9BlbOuGqUwPTDzvUWQpdNE19UZN+yPNtF6oOFHSY3+aHxKBNnpzH0dAO13SGx3ZElg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n4lqvctufcufzsm0g00vpv9rdhc0h4mu05f5jl","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1771","1","1","g1n4lqvctufcufzsm0g00vpv9rdhc0h4mu05f5jl"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AveughziOul7YRXlH0CsZsUSwacAtLj4Oz894//DBfUl"},"signature":"RD1w/0U5j0H16eYFxvB8kX/rpTD/jxXUQYr8URTP8X17j6W727uGa7nnvnane1qBQtrxwID7/OOCvnLKYDGmaA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ht7kp7ykhkpld2f2tak8fwpztfejknjul78y4u","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"qxOcemNSc2/2MM2mJl3sDmJXIjO83UBSKn4U5TYViTM4Pwo3AE2OCCxSKjdnFJm/dCDQfGTjco1i4Q/c/Fz1Lw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ht7kp7ykhkpld2f2tak8fwpztfejknjul78y4u","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","aisleseekld",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6t39xywoC4DHMBhW/e9Pquq8a7/Z/kMwnO6N2J43XB+"},"signature":"0PvaGOYeua6SrT/SOTyyqkqEot9ezJt8EvUkRgXGieUH6rKVDkzWar7Fe22Taqwe5nsfV4CZSXKwHtEisotetQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ht7kp7ykhkpld2f2tak8fwpztfejknjul78y4u","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["aisleseekld"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6t39xywoC4DHMBhW/e9Pquq8a7/Z/kMwnO6N2J43XB+"},"signature":"AQ0t7VO6yAeAcKyTYGW36vXmez1pBFYkYM1xDSTdWV0vga9cdLoATvBm9SMgMNQRaMqzK/nXOG0G1RYqasM4+g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ht7kp7ykhkpld2f2tak8fwpztfejknjul78y4u","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1772","aisleseekld","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6t39xywoC4DHMBhW/e9Pquq8a7/Z/kMwnO6N2J43XB+"},"signature":"fXDXPVVej7YUWMswtVVCIFcwOQKwPOsJ1J2YwRSz5+xWchs5NvfA1WF3QsUb8b2PNpuxt86+Bud0pWrg//AxBg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ht7kp7ykhkpld2f2tak8fwpztfejknjul78y4u","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1772","1","1","g1ht7kp7ykhkpld2f2tak8fwpztfejknjul78y4u"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6t39xywoC4DHMBhW/e9Pquq8a7/Z/kMwnO6N2J43XB+"},"signature":"//t0EREELsRLY2cyZ98PSNzYWaEA9hF80vJZEJ48IHlkwGNG/+RjfXGeYLCfp4ZtU5Emae7ksD4NFU+1r9Pv6w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1wzkuencpd5pt85fu2ld3gl2va2peqlh4hqpggu","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"IOh5DjL62OKM1+LfZJtJLPe3H7ZOWX9qtUZ6f5xzmVEMrfJxJrAQ+6k7q3EM77oY+YeXbGVJXrHg2oi5lmTvIA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wzkuencpd5pt85fu2ld3gl2va2peqlh4hqpggu","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","creekdesertt8",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Axf+dQHUAQZ1FbRmCacps5FOERa2mV/cw0oTXUL2sIVY"},"signature":"m/vMDpTP7HoKV4s4mwjSat5XpRoLfYFf0kyldCClWMxNfP0xE60hZpBX/H8lpfa9j7YI0S7ZE0jhGumC4j74DA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wzkuencpd5pt85fu2ld3gl2va2peqlh4hqpggu","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["creekdesertt8"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Axf+dQHUAQZ1FbRmCacps5FOERa2mV/cw0oTXUL2sIVY"},"signature":"KWFO5NrExf1MUNNRp0LE6IL5wb/esRzSHxoiKKpYHGkkw9x++xxEaYvFlJjbWPzpZq/KZlvLi5jfAnZWNx7+zQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wzkuencpd5pt85fu2ld3gl2va2peqlh4hqpggu","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1773","creekdesertt8","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Axf+dQHUAQZ1FbRmCacps5FOERa2mV/cw0oTXUL2sIVY"},"signature":"Wlzu/L1LFaA89JXDBSyYjzBGM3ynie8nusXDNqglaKIchx9KTqH0aSlrJ1QcalcPMYDc/WhZk4Bsw936kUQoJg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wzkuencpd5pt85fu2ld3gl2va2peqlh4hqpggu","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1773","1","1","g1wzkuencpd5pt85fu2ld3gl2va2peqlh4hqpggu"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Axf+dQHUAQZ1FbRmCacps5FOERa2mV/cw0oTXUL2sIVY"},"signature":"EfCSQFViKhBEhhv+dpeC9IQ74AEikFEWyAqdyt5L+aRpms4uazkxL+Pcz1/gXdtJQYwKSwOeenDqXa+3tRoLnw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1m632rw8452g5tv9xxyswz2calj7p8xxw0sj2jd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kelEDOAGQajvbISSArkHHMEnN7GPWobgH4gvTXQsgGJryvXF09ITPJoEnfIINcFtXzrZGesqvxzzmGZDxEgcSQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m632rw8452g5tv9xxyswz2calj7p8xxw0sj2jd","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","ethicsready5t",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Akf7UP9eaAWsUwz8vCgWKZyPCCItFXdJ++ei1X1HwQEB"},"signature":"TMynFetBKs/TnEwnM4SiGT9h/QZu8kADEliTk3t/9CA9jNBHHX1ovC5Gfn/+uvUwGZIbL4o+qzvxRE7zJ+94mA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m632rw8452g5tv9xxyswz2calj7p8xxw0sj2jd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["ethicsready5t"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Akf7UP9eaAWsUwz8vCgWKZyPCCItFXdJ++ei1X1HwQEB"},"signature":"88rS2CMuOxur7noCly0SpX62QkXoqJmJNWtLEzjAwvcn7ABi7nHaSIhV8Fxtl8a1ybXz4J7TI26nBjehiE2alw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m632rw8452g5tv9xxyswz2calj7p8xxw0sj2jd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1774","ethicsready5t","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Akf7UP9eaAWsUwz8vCgWKZyPCCItFXdJ++ei1X1HwQEB"},"signature":"ODmOlWqQKESmydzllo+iFUlXYOxLCLshVeqkEUxnQlUuTQD1wn2yolF52FimCPpB9PLv5sSZqrxJoGrl2wFRFw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m632rw8452g5tv9xxyswz2calj7p8xxw0sj2jd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1774","1","1","g1m632rw8452g5tv9xxyswz2calj7p8xxw0sj2jd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Akf7UP9eaAWsUwz8vCgWKZyPCCItFXdJ++ei1X1HwQEB"},"signature":"pBTXs1kE7gfWmVpxO2p0Fhg9K0nmcOYflzdiIAdFIoEpNNrYBH9pTfNJaPAB3/4G2fEJ7jgMayrlT040S7motg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rt4qw3cm9vc3xnwwyf48sqdyg8xzm9p0fhhedn","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Vjn1f9trTqfxv44uXSaTcBsAr0/2d1LqjxKoKMCtbmkT10dxffPNcEkIX+XJz4hmH4DdEZd+4WNbAUYr/ZIN0w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rt4qw3cm9vc3xnwwyf48sqdyg8xzm9p0fhhedn","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","shopeast3x",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay/AEbY9pEOV+mByLYF//19jsIPI8zbzRpR/yLifs1JG"},"signature":"ix4aR0+c4LdYQLWo275VI1MPPuUmoCVp48Z5xKhzVxo0RWMeavKq8BCsAPwjGKrEAsyYwOjFT16Q0sntDJ9czw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rt4qw3cm9vc3xnwwyf48sqdyg8xzm9p0fhhedn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["shopeast3x"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay/AEbY9pEOV+mByLYF//19jsIPI8zbzRpR/yLifs1JG"},"signature":"MNCTebVzaneFeHK+hdP6dNvX7X3j9JaacN3Sevkl8oNgy1xcf7y+nR492O7+/gpcOibKCbL2ZkRc3ovQlCo9CA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rt4qw3cm9vc3xnwwyf48sqdyg8xzm9p0fhhedn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1775","shopeast3x","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay/AEbY9pEOV+mByLYF//19jsIPI8zbzRpR/yLifs1JG"},"signature":"6DfsOWhBxlQhcfEpxpcNof7wpbcc2KpqgqNtEXahiXoj35LXnD6CtxalcUtQeRzRlD5lxzSL+1eoqg87J8teDg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rt4qw3cm9vc3xnwwyf48sqdyg8xzm9p0fhhedn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1775","1","1","g1rt4qw3cm9vc3xnwwyf48sqdyg8xzm9p0fhhedn"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay/AEbY9pEOV+mByLYF//19jsIPI8zbzRpR/yLifs1JG"},"signature":"FJHgECm4rbqgHi7WbFkx4yZJxc1ZB7Blno7WrVoohyM7Fva9z8+uw2JKHBOOMNHM9vsV+MANLDcCsv0Nzn+TUg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gh7slyrgtlqe93y08fu8f3wlh3gxe5wyz2lcfc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kv0wab1YKWjXOCVVUGYjTyOjQnofzyaKbKg/EY9wFfEkDE2MdOrnRTGy2M7N5/auqqKJcPOnyuiAaY2OZLxDDg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gh7slyrgtlqe93y08fu8f3wlh3gxe5wyz2lcfc","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","obviousmome9",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+0N6UKixXHSTXsPNf8j0HDcO3245A9AP4TUN3OMXIL2"},"signature":"Fo30tlbu0bTvDR+SYQhjKd/NbcPWhFwaNgQKbscjqTpyi6HN8B+masbvri+gfUXy9xMJ5FWq7jAPd44/n+SbVw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gh7slyrgtlqe93y08fu8f3wlh3gxe5wyz2lcfc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["obviousmome9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+0N6UKixXHSTXsPNf8j0HDcO3245A9AP4TUN3OMXIL2"},"signature":"OskHskZrfphvsyXbdQ5qMijvdVCrb9W313B2MDh1C6JRGam10AQ2ec/gNPwqSd7eUe+I+sr0Vk12ZIeHoh7lQQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gh7slyrgtlqe93y08fu8f3wlh3gxe5wyz2lcfc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1776","obviousmome9","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+0N6UKixXHSTXsPNf8j0HDcO3245A9AP4TUN3OMXIL2"},"signature":"PvJ3van6nH/QFRJGmUN1ukxLCCldFt5lbr6vMIxIYJgvGkYD8XL3GlpD50NtGld+ind1MhXiFcmbptY8TAKApQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gh7slyrgtlqe93y08fu8f3wlh3gxe5wyz2lcfc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1776","1","1","g1gh7slyrgtlqe93y08fu8f3wlh3gxe5wyz2lcfc"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+0N6UKixXHSTXsPNf8j0HDcO3245A9AP4TUN3OMXIL2"},"signature":"E7B463SQXtihOGTlh0RF7KL3R84uB+Kt2UVJ8MilucQyKR3gQmExg6q/NNZ/De6g3esy+Tm0rgdTJRyvSLEs9Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vmrw6ytv5yhsqj7uagp48hnr3ldx8dn360tzzg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kKH5v6yn3LMs6ZPr9eljyMgX8QfAeCqjBgZe0B2bIPER1oynBxqj0VTBeGJDc8VA8BO6TM+GuIsZ0qE1SGCEWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vmrw6ytv5yhsqj7uagp48hnr3ldx8dn360tzzg","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","birthleisuresq",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhqzKAvWsN2z6Lcs0Ngg0ltjbkqCyios4CzNqWQXrs8c"},"signature":"BX2SRIi2/+MzZ/gwfhPRye/QTSiDMGvMfvvnzjXXMkZFKdX+bMzn1jvJyXTWEcpG56lI4zwlFN4+BOcDGwapJQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vmrw6ytv5yhsqj7uagp48hnr3ldx8dn360tzzg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["birthleisuresq"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhqzKAvWsN2z6Lcs0Ngg0ltjbkqCyios4CzNqWQXrs8c"},"signature":"slLBGxOyJWIK/kGAs1D5ettpqoRPZKnVpxqaXh9i7J5tyDZZK2MqaSempsztxolr5+GNcyHQFn2e2/uVUG+gFQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vmrw6ytv5yhsqj7uagp48hnr3ldx8dn360tzzg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1777","birthleisuresq","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhqzKAvWsN2z6Lcs0Ngg0ltjbkqCyios4CzNqWQXrs8c"},"signature":"xOo8PT0zVsHbvL43+y9rj6cWJy0R85jaggUh+Kgw7gd7+pcu5b+xAD+EDwbWNyHt4EbptV4YhLaOkemwN3oPkA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vmrw6ytv5yhsqj7uagp48hnr3ldx8dn360tzzg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1777","1","1","g1vmrw6ytv5yhsqj7uagp48hnr3ldx8dn360tzzg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhqzKAvWsN2z6Lcs0Ngg0ltjbkqCyios4CzNqWQXrs8c"},"signature":"orhjmgiPUuEH+EMFXUhctGT/eYZzgNLfgLSCr3uR9MAxRnA7LKbH6IxOKpB4gTGGU31KOkmCizIo1dAo2FFzbw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1x80eszk0sslyqx47w9hhmyvfc22a4a68wd3xza","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Fk+9vj7er1gbSXD7Igk5NlkivzHhMpO7Ibt/MwJvePQqSoeQ4E5GGwFUPZaLF4pQ9CEzMVCFpTjnrMX1RXnXdg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x80eszk0sslyqx47w9hhmyvfc22a4a68wd3xza","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","buzzadmityq",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArOMtMf1X1ItN5DQioOdC6FqIUSzQaOxydWmUfi4Qppg"},"signature":"osurRDZPXQq3ElGTUnuQj3ne7TMoDQ8mMZ5MqPN+1ytlUQoWza5v/FaAyeaFLyImHC5+ynXh/21h6rj0Gv5NNA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x80eszk0sslyqx47w9hhmyvfc22a4a68wd3xza","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["buzzadmityq"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArOMtMf1X1ItN5DQioOdC6FqIUSzQaOxydWmUfi4Qppg"},"signature":"XdKZsxID6b5LwFHELHqHZZOx0pCPfMqOOsk5CfQ1M3Mbrs0Fx55WWsK9cHFNSi6hbodQMQhmT3wTjLByHzgHMQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x80eszk0sslyqx47w9hhmyvfc22a4a68wd3xza","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1778","buzzadmityq","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArOMtMf1X1ItN5DQioOdC6FqIUSzQaOxydWmUfi4Qppg"},"signature":"jL7zYKl1wJiRxzwyesMEehXcp+4nsDlokoJJRhffNtlGLJe9YWTuBinh0Aj7sXFmLN1qeDAaAl1Z94t9aYI0gg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x80eszk0sslyqx47w9hhmyvfc22a4a68wd3xza","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1778","1","1","g1x80eszk0sslyqx47w9hhmyvfc22a4a68wd3xza"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArOMtMf1X1ItN5DQioOdC6FqIUSzQaOxydWmUfi4Qppg"},"signature":"/FPI0sKfFVJ7QnK3tVSLFMd2VKw43YJ19zK4/MlT3SExds85GWSKocHEh2KC4AeaZyoaXfxXrwPB80r4gJ1/EA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1yy7vgxcq5xhyk8rfn04ljnejyljeufj72a6y88","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"MPhYub0nxkpduOKwx81VuaWLhKqqru/3TwoZ+s2dAe8Xsr4RjNTfE0MRIU8J3JFX9Nz7IItuj3NxoeQwLBSS8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yy7vgxcq5xhyk8rfn04ljnejyljeufj72a6y88","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","absorbridgeyk",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7aQroXOriQtYbW1FAR8lVJI/HkGBLDEnLGXsRVbDfep"},"signature":"4Bq5XfVjd1EnqByN6U+xCt/kor0mnYTySCZyWfvodDpmB4H5DOkKutCeyC3G5pmzK8lFXlG48T0+q7czvoWxSg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yy7vgxcq5xhyk8rfn04ljnejyljeufj72a6y88","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["absorbridgeyk"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7aQroXOriQtYbW1FAR8lVJI/HkGBLDEnLGXsRVbDfep"},"signature":"CK5Kvr7HOQ92hrsFCCbCZVBPcn6EBbG/AHSB5IHbW1NDB+MM9IaTuScEkd+vBd/Ff9r9VROkFoeNGSBzr/7mMQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yy7vgxcq5xhyk8rfn04ljnejyljeufj72a6y88","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1779","absorbridgeyk","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7aQroXOriQtYbW1FAR8lVJI/HkGBLDEnLGXsRVbDfep"},"signature":"CR5ZR/o3RcbnWrVabQeGksRniFA2wsAJmfJKWimOV3V6EJUo7XKsSAxiod/O2S9ShXamBhIvx0eqIS4KIWUdFA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yy7vgxcq5xhyk8rfn04ljnejyljeufj72a6y88","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1779","1","1","g1yy7vgxcq5xhyk8rfn04ljnejyljeufj72a6y88"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7aQroXOriQtYbW1FAR8lVJI/HkGBLDEnLGXsRVbDfep"},"signature":"liZ2h4R3Va91Xyw4ACO4JPQa764uuPjyNAlWcRkZYSlxhsGEPYtfwHt6mHP/zriHA23yzCSX+AM4drvgKSBVYg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1m0gv026gw6lu3gxvrka8px6vvj4q0gnm7t0dl5","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"mgUXSz6OGMOxr5Qbl4IEp9K3CD5GGGS4e3jN/RmWP/ddkdh1OItDamBz4eaZo1puvHFDGd91IJ4rTBFpgR8sQA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m0gv026gw6lu3gxvrka8px6vvj4q0gnm7t0dl5","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","tuberenderu3",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtkEeqAmJHcsOH3wAxizuFx60N0jssjsvdLEkbMnsl/2"},"signature":"mkuWf3MdIpTHU+oRhK9+3PzswfSc43Tf8AjXHT63JMRaXuOtIA2w1u1ruIo9nxsYQYs30BNQ35RERE8+itdjXQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m0gv026gw6lu3gxvrka8px6vvj4q0gnm7t0dl5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["tuberenderu3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtkEeqAmJHcsOH3wAxizuFx60N0jssjsvdLEkbMnsl/2"},"signature":"74Acfp1p8ftM75Lucj2+9gbHtmBfhpqGTPRhdVRfdP03ugtaeTp1bUVNTVwBuZiBJF07P2v4dMjIeoJ4S7UQmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m0gv026gw6lu3gxvrka8px6vvj4q0gnm7t0dl5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1780","tuberenderu3","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtkEeqAmJHcsOH3wAxizuFx60N0jssjsvdLEkbMnsl/2"},"signature":"qx6PHweIVkOn3CIGN0+Zs7mGTCl30y5xnvLKkjzE7gxbkObqYoEP/hFwCGscBxi4326InICXOTHAv/yCf6l6FA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m0gv026gw6lu3gxvrka8px6vvj4q0gnm7t0dl5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1780","1","1","g1m0gv026gw6lu3gxvrka8px6vvj4q0gnm7t0dl5"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtkEeqAmJHcsOH3wAxizuFx60N0jssjsvdLEkbMnsl/2"},"signature":"jSUvMrN7NG/wgopRTneoJ1kHoBojyXLG/AjXx7rl52lkiDeLgdhMqBG32zkyHOCeqIKP9gF9jfilAI6U8TUDGA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15ulfe8aczjn77zyv2hdj3vhl774j6p803640ug","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"bsguaFyU56mPMQi1cAQ0qkML6aros8z072/LFt+1Q30Z9XieyeqHLpvCaI3FM46vs73DCMF4qPwusOoIa/47qg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15ulfe8aczjn77zyv2hdj3vhl774j6p803640ug","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","namesponsor77",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgOg2dhmUEC2bx14Z2H6aPxG7Xt6n302QIpKntnV76jc"},"signature":"NAazS2WTJZPH6tu8w3XDDWE5L3WCamPFiAiyPINbpatrgI73k9VGXL8nl7cna2kr38Fb50n3eLZ5Z67SBdhdVw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15ulfe8aczjn77zyv2hdj3vhl774j6p803640ug","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["namesponsor77"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgOg2dhmUEC2bx14Z2H6aPxG7Xt6n302QIpKntnV76jc"},"signature":"SSDmw9AEzeXGpts1jINEzFiFOulpbftSrOxXE+S7od4c93xOakU4s+q1SYzyIe70zUhLcT40QSdm94AO+5oVUw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15ulfe8aczjn77zyv2hdj3vhl774j6p803640ug","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1781","namesponsor77","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgOg2dhmUEC2bx14Z2H6aPxG7Xt6n302QIpKntnV76jc"},"signature":"ouY39qvZ1j246WPbGeH81/zoMNr8003vB5Bbjv54UdZ1SeEOECIj8edNZT4vsfbL7LrYzxjLS7fMkWYh+XBwNQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15ulfe8aczjn77zyv2hdj3vhl774j6p803640ug","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1781","1","1","g15ulfe8aczjn77zyv2hdj3vhl774j6p803640ug"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgOg2dhmUEC2bx14Z2H6aPxG7Xt6n302QIpKntnV76jc"},"signature":"f99EML/Gch6Y5wmUzKzSTZPRxfhuw0Y7sH6Wbsrrrp1Tu8BZHpO2Uh+V3rhGWS/Fjwd3AietuyOns6cr/rouhw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17xts5x8xwk0v7pacu4j65gp5ukyhcwqp92cfp9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"9pwb3tnfpTqNGDbMj7H2eklmYLcQoTP2hPmsrNmd+mZMhkIzjZ0f1wdZRa2iJre43RP+F7SG/Omc6vBYqJ+W9g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17xts5x8xwk0v7pacu4j65gp5ukyhcwqp92cfp9","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mixgivev7",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmT3Pze/1qEw3/WkG1ivHvf0QdlQmw59Yn5Slj1HQjYS"},"signature":"AuXVDZPxKtzHfWZGlloFQe26Oy3MJC56AKxDRRoRIQEG30Y7V2Ua0kPOVy6+EK7iiX534tsq2xfc2wEiioLDCQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17xts5x8xwk0v7pacu4j65gp5ukyhcwqp92cfp9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["mixgivev7"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmT3Pze/1qEw3/WkG1ivHvf0QdlQmw59Yn5Slj1HQjYS"},"signature":"6IbVjnVhAMGFCT41bABFdcbRhKTTzXppFPoTv9Ow9yV+oXkAaVvnW79uo+tf5GxN6Pi+caTAJi5xBPUF97YPRw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17xts5x8xwk0v7pacu4j65gp5ukyhcwqp92cfp9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1782","mixgivev7","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmT3Pze/1qEw3/WkG1ivHvf0QdlQmw59Yn5Slj1HQjYS"},"signature":"touq85L+c4NcbfL9aDZQ3pb1nrTjW867KLd1zqTW1eRLFZXcj/khBgOm+uxuNJw4E2NvE0m6DHOC1dIZ5g4vxA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17xts5x8xwk0v7pacu4j65gp5ukyhcwqp92cfp9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1782","1","1","g17xts5x8xwk0v7pacu4j65gp5ukyhcwqp92cfp9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmT3Pze/1qEw3/WkG1ivHvf0QdlQmw59Yn5Slj1HQjYS"},"signature":"XZpLqeAba2uBUtA1h7znikcMeVhXWstIXjyXS9VjG/kn4RMQ0wd8srP/LvRWep5XgsqWcYZIDts1cRU/h4AzmA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1qg0kmhwhxmwa4gfcpw5dxzpf62v52nqzmna8gw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"R4y75YgAuR3VA5q3DWu8c4mMycmdHA1tQGbcNh+jP4Uemwtu4kZKWYWgguRB0e5IAzpAJkXULPM7BhNq+3XLvw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qg0kmhwhxmwa4gfcpw5dxzpf62v52nqzmna8gw","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","pitchislanda4",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7OusZVA9DVABHP3EVJpR80Eu/WXUkWp7KNLcbpbjZRy"},"signature":"06mn2ERuRSgJHwlMfvEd9jFkXZbz1dExpwhabAz6ywwuihpt+N+5PzohkNDG9cJ5I+xlw3m75RW/+tY5fns7iA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qg0kmhwhxmwa4gfcpw5dxzpf62v52nqzmna8gw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["pitchislanda4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7OusZVA9DVABHP3EVJpR80Eu/WXUkWp7KNLcbpbjZRy"},"signature":"mBfRW6/yryhQYzYhj/Ss4b6Sqb20LUp60r0eUn/3QGIj7xlWF946fNfxdqX5XBw0BhoTO58IkAZ8fkMMxUoXOw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qg0kmhwhxmwa4gfcpw5dxzpf62v52nqzmna8gw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1783","pitchislanda4","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7OusZVA9DVABHP3EVJpR80Eu/WXUkWp7KNLcbpbjZRy"},"signature":"B+COfmOpvNPY0emXFKvxb5lhOENMabKFv6CJ3W8qUs4XzZQPTx+RVpayhj/1kvwc2v1rs8RdXnsLxkHRbhDQLA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qg0kmhwhxmwa4gfcpw5dxzpf62v52nqzmna8gw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1783","1","1","g1qg0kmhwhxmwa4gfcpw5dxzpf62v52nqzmna8gw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7OusZVA9DVABHP3EVJpR80Eu/WXUkWp7KNLcbpbjZRy"},"signature":"+ASHUWre3tfEcNFiZ3sldxbR1UbsHwfYeCp4rbDBxulRPI5+4g1XDrQYPEmGEbbltbnLASXuXMnV3tw2mFXQ/g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1y94w5ymawg3twd8558nk0gplf9exhe3mps42zk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"1v8IAuQuN5xDQ3W5XCdVR3+sJIr8RpfqjM7jeGl8EgwNxmesWOs57pmRf1UD0/EXVuzPmk0aj2twPjH9xvS1AA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1y94w5ymawg3twd8558nk0gplf9exhe3mps42zk","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","deersuretw",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgXrERZXMJ2vNe/cBpP+2Loqx8Ui+8DPyZlBQKJYYtRK"},"signature":"i0F2z373ZjkWBp1nbzmaJ2IT3yTmg1l/Qmehbxol+6AARmxJatC8LAnNBk7Rg/cgKvwOmhu32Dxrgo/tJj2OXA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1y94w5ymawg3twd8558nk0gplf9exhe3mps42zk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["deersuretw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgXrERZXMJ2vNe/cBpP+2Loqx8Ui+8DPyZlBQKJYYtRK"},"signature":"5km36dU8CrvAk5k04fYikKHGLD5U5O/Op6pv1OXX6P0cpf32z0kvj6T0lPpJTViUHFlXv3ACzr37Od5IsVO+bQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1y94w5ymawg3twd8558nk0gplf9exhe3mps42zk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1784","deersuretw","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgXrERZXMJ2vNe/cBpP+2Loqx8Ui+8DPyZlBQKJYYtRK"},"signature":"awA0WQBswj6SEZ6v8W0HWYhJwb1Y40KNblB/Bd9vVBFDxFjNrEfC4mshAMaCdHLmbvYvOHd2gszPZoLzk/qT6g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1y94w5ymawg3twd8558nk0gplf9exhe3mps42zk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1784","1","1","g1y94w5ymawg3twd8558nk0gplf9exhe3mps42zk"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgXrERZXMJ2vNe/cBpP+2Loqx8Ui+8DPyZlBQKJYYtRK"},"signature":"QVG6y7+/25kvZn4RcXmTEXVemdMSFjmoFZAg2VZetz13DR5zPoGQi/rP8mciHTAsyd0/AIm5c8RI7ZUMKH5PYA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g13anan4yxgfrrgqe942dnc4wl40wntykj6hhesd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"MSRHEc2Pds+vkDV3gnOxylqUvdliQsahW0S6hK9kZgIzPlxye+Hu/arH3ZC9AJ4SE46rB3F8CtURtKQw/Ft12g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13anan4yxgfrrgqe942dnc4wl40wntykj6hhesd","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","puritywalkrg",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnBxj5Etqaqn0oDshHKibp5j0eDzIl4lAQVAC0SRzM0H"},"signature":"DaQFRvtBzoPT5xybug4qExilkqrRBw8KHjmRHERps2IGlxC4KpnP15FZUnuIF5Pk23UkYkgHP+2BFAqIFFAyeA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13anan4yxgfrrgqe942dnc4wl40wntykj6hhesd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["puritywalkrg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnBxj5Etqaqn0oDshHKibp5j0eDzIl4lAQVAC0SRzM0H"},"signature":"btTmu2784WAIkZNAzyecWbclRXl2xLNQH1/MwpO/DCNNw6OvaG+H6B7ua3MQvsKkS8CIWo8fH8Z+v28/Xjglyw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13anan4yxgfrrgqe942dnc4wl40wntykj6hhesd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1785","puritywalkrg","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnBxj5Etqaqn0oDshHKibp5j0eDzIl4lAQVAC0SRzM0H"},"signature":"6Xl9kxtOZlgrjxBgqYQWZR3T5ZSRQAu1+93AuVhlSOAfqWTK1nutKXpdxw2Q+2v85Gp+AB1Z1w/pHVco6lPkMQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13anan4yxgfrrgqe942dnc4wl40wntykj6hhesd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1785","1","1","g13anan4yxgfrrgqe942dnc4wl40wntykj6hhesd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnBxj5Etqaqn0oDshHKibp5j0eDzIl4lAQVAC0SRzM0H"},"signature":"/O4tX+3jvHHQIX1/H/td0BFri69vjk7E2TS9WjHSaREkC1YPQAnplrNUbd90Zn4X9QwAeFKWi95gYIf9SINm6A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1edmxswpydkns8drcxheumqd0hv2d90tht2j35w","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"5aid+hk+Hkmb8JxpcXtmIOp8F06LEJtxPZcfYKR6suF0WmCr7DlmYiXfUP7h4G5L5rVtIEKs6vSniXcBtLZTdg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1edmxswpydkns8drcxheumqd0hv2d90tht2j35w","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","waymarbles8",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwYblQiWyAgOARyvr6v7GBFStIqVCBIWOVAdig2X3j3+"},"signature":"ol3ghncTkLvx4JgrfJOU8WgLHyOcyomZFAckuok6+BYMhxKE9atadHdtO03Et2cOinht8tne0WFN4rOx6HVulQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1edmxswpydkns8drcxheumqd0hv2d90tht2j35w","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["waymarbles8"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwYblQiWyAgOARyvr6v7GBFStIqVCBIWOVAdig2X3j3+"},"signature":"sSZBX22ICY/kltnpCOutfY1PJAIOLiPGK86hIXYzQtM1+vr1zR2BlKY/baw1iLNbzMeug9qZTYeEZMt85exOhg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1edmxswpydkns8drcxheumqd0hv2d90tht2j35w","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1786","waymarbles8","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwYblQiWyAgOARyvr6v7GBFStIqVCBIWOVAdig2X3j3+"},"signature":"taUTDkrhiC+oRrlDrTkHjP2s4T4lju3p6ryUEwYfNmRWaTdj+xz4/gV92oBF46iRaywtljEwzodzozPARSZKJA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1edmxswpydkns8drcxheumqd0hv2d90tht2j35w","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1786","1","1","g1edmxswpydkns8drcxheumqd0hv2d90tht2j35w"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwYblQiWyAgOARyvr6v7GBFStIqVCBIWOVAdig2X3j3+"},"signature":"V9ED4Ki/bCU/UBVir/S1SDuDCJa16mSATk61/mNjBxFw+An0s52koKkUgMoGYhHOYd5XHXchesK0Ji9ROi+E8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rc7xjw4pj2qang2lee5p79qtpju9nm5s005znc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Iek6cfbIDgSTEIDj2Ha1SesBhU1teGPsU1tQT3vqQbxRu44OduaNGFWT/s9mbg1ZVfyX8GyHsVd8e74lHUtZFg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rc7xjw4pj2qang2lee5p79qtpju9nm5s005znc","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","hillpromotean",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiIwp5AbvxMwGzSZm6nWLu10KLWU1pgKuo8mLWjL032A"},"signature":"ynAQyGMuYmzwEbirIRyM+Ll0z/JHzjfZcWvxeLjgibVZdiIv1QaAhh8OKqtvJIVUdX2GNM78JYEZSAusja2t5w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rc7xjw4pj2qang2lee5p79qtpju9nm5s005znc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["hillpromotean"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiIwp5AbvxMwGzSZm6nWLu10KLWU1pgKuo8mLWjL032A"},"signature":"Q98rNM5nb9JtfpxVS4p1rTfoz/mxu/RhtvYPBD5s3IwAbIPpftd3AQsEcXSesZ368a9U0jSzFVLIW1b9yRq/zA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rc7xjw4pj2qang2lee5p79qtpju9nm5s005znc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1787","hillpromotean","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiIwp5AbvxMwGzSZm6nWLu10KLWU1pgKuo8mLWjL032A"},"signature":"rK1+ig8Ue2Ta1acx9mo0IQiv1AzfXd7Tnxv/gkqlMr97AtLD77PDaWJvdMnI0NUbaK4n1NnrbAEWJCYad7ywKw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rc7xjw4pj2qang2lee5p79qtpju9nm5s005znc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1787","1","1","g1rc7xjw4pj2qang2lee5p79qtpju9nm5s005znc"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiIwp5AbvxMwGzSZm6nWLu10KLWU1pgKuo8mLWjL032A"},"signature":"DcW0/uaRKV5c8DujH+nW2KmWEnzPvZGuBQ8eKYYafdZvqeXdrItFX7xc08hcbOYYgxSdGKttijguuc6p2oNV6w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1yg7ndqlxnexj5m8zdx3v4phkurksl3ycdy22jc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"EWx6YkGuLNXB9ihcDWiwTR5j+3luflnMMT8FmjjJvdEcu1T8/4SSQujx4SQL+ze2/sVWvVEnx03u8WqZSJbbMQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yg7ndqlxnexj5m8zdx3v4phkurksl3ycdy22jc","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","opinionreducej5",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1wH+8IONtCx8dGQ910uCP8xg6tCS8VE1B17t9JTw3DY"},"signature":"3uisH5SXXnWWSW1GlQSg2bHeUQL6IiGHRg5HZcNTIgJ9R9t3fsIwuVMX3LsPvQusq3DKVV/yHWYkQzNyGNFsXA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yg7ndqlxnexj5m8zdx3v4phkurksl3ycdy22jc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["opinionreducej5"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1wH+8IONtCx8dGQ910uCP8xg6tCS8VE1B17t9JTw3DY"},"signature":"s+pYQP5FqAi1R3iwfWASzYShQbAQ4h5qfsqEulD+2S4TAlJbjt92iCejwj3w3sRbnGYxkhesqDpnVbY9rr6QhQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yg7ndqlxnexj5m8zdx3v4phkurksl3ycdy22jc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1788","opinionreducej5","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1wH+8IONtCx8dGQ910uCP8xg6tCS8VE1B17t9JTw3DY"},"signature":"YoAMf9VF/riX41vZoXeDWKsl6J/mAHPp7E4/p19JWoglVv4yp9N7SMwLxdkrxFn0GrMVrOIwvAEfusPqtbuwng=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yg7ndqlxnexj5m8zdx3v4phkurksl3ycdy22jc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1788","1","1","g1yg7ndqlxnexj5m8zdx3v4phkurksl3ycdy22jc"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1wH+8IONtCx8dGQ910uCP8xg6tCS8VE1B17t9JTw3DY"},"signature":"MUjJUoVlYjWo9wyRczfDFzwinHwgQcy/tFm0RaCrfsRbpzxTjbQMMficsmbVkz85EGoCcoCm9GjhAWvu/jbDYQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1udzpx49szv0uwt4yenwamkntn5yscwjcv6drzq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"MsRYZC9pBpzwrcWBk79zOYcl4QQG9D4P0o8oOOaGhZhlMrvoRk80Sfi8T/NhsAGUAS6/1kVVfgw6aWi99q5luA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1udzpx49szv0uwt4yenwamkntn5yscwjcv6drzq","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","emptydepthuw",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArQWxxUVu5cq9q9S2NVMiq5m62Ox4PSn/vuZ0NNslNSU"},"signature":"eax+2EtMzpK8iln10RSKg/B3d1PmWns81wdE3dk2aJMdSerQ2WXO9sKxj9STTCAMtX5B5qJL3XNa53KrdgEfmA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1udzpx49szv0uwt4yenwamkntn5yscwjcv6drzq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["emptydepthuw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArQWxxUVu5cq9q9S2NVMiq5m62Ox4PSn/vuZ0NNslNSU"},"signature":"yidkGyKi+rVLSkW1L1f0SnE0Rx3PMaOqrWJJ7gW+qAM063iyZTnG2p7qnAG2QY/ojgHUd2hlWGikblczbZfM0Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1udzpx49szv0uwt4yenwamkntn5yscwjcv6drzq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1789","emptydepthuw","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArQWxxUVu5cq9q9S2NVMiq5m62Ox4PSn/vuZ0NNslNSU"},"signature":"GCMgA26VF89GbwSx10bcp9GmMufCnhIu83hukLjVqg9xRCMDqf9qquvmBgH6e0xvCTCX6srA8fs0bMGM/KxiHA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1udzpx49szv0uwt4yenwamkntn5yscwjcv6drzq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1789","1","1","g1udzpx49szv0uwt4yenwamkntn5yscwjcv6drzq"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArQWxxUVu5cq9q9S2NVMiq5m62Ox4PSn/vuZ0NNslNSU"},"signature":"f0d6nCl5Vz/jkrfBIZNtaZfI46266QvoozTUKKQsAGlsMv+wByXdV75l4OSidpaGPcoUq+BcLeJ/LAHAAVMsqQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1w9h2jk3h689wevn8d3y4h2ekm89fq9quswh42y","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"7A6X13Ns7YeecXlDQGSnM67tYoU2H83tsm5xjw2/h3I9Ub6MdZa+8FcxYt5qugfko+4qzhcNLBsA4pY2OtIPSg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1w9h2jk3h689wevn8d3y4h2ekm89fq9quswh42y","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","figureextendwe",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzfcFSzcCU83E25aZVx0xBl7cBXy9XVStNUK3Z5IgEwI"},"signature":"wwZavotD73gD7/ENoJ7EPKsJxLb8iPo2fKdqeE9CKsN26PXrsEYTWvBaKa67jHedB8S4tnrATyL8ife7lmqiHw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1w9h2jk3h689wevn8d3y4h2ekm89fq9quswh42y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["figureextendwe"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzfcFSzcCU83E25aZVx0xBl7cBXy9XVStNUK3Z5IgEwI"},"signature":"tiKkokrfUNg2+O5GQLingGhRiQSOCo2I/SQZJxgl3QRub9HoGNwfOl5TWHzrr/TiIjnt7JToxonv29HD0fHOtg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1w9h2jk3h689wevn8d3y4h2ekm89fq9quswh42y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1790","figureextendwe","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzfcFSzcCU83E25aZVx0xBl7cBXy9XVStNUK3Z5IgEwI"},"signature":"RZreMko1AovNX5VoJwLYF6DYuzyVakuu4gXLbbXl65BR0VHXr5rCRNAAnTnzU6DrRVCOWGg/c7OaCY9jxGIttg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1w9h2jk3h689wevn8d3y4h2ekm89fq9quswh42y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1790","1","1","g1w9h2jk3h689wevn8d3y4h2ekm89fq9quswh42y"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzfcFSzcCU83E25aZVx0xBl7cBXy9XVStNUK3Z5IgEwI"},"signature":"uFt6cGhBk17gvlnMo2apXRg0lED1XqLT6VxwD5dBdFtV85q92xixrehq4BoEeMK9+klhutuCzu+WpifEP8kD7w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1t85n886q5e2uqz0ew38kr9xndd3s0g7jvwvt95","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"6PL4MWFinhVa8tgQ1lOiIzLFESwgRKYKdeT4Pc8c2McyS8IuX2GxNiCywZEoMDQUJ8xwR55ocBH5Kalv5heXfQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t85n886q5e2uqz0ew38kr9xndd3s0g7jvwvt95","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","matchfirmuq",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aw3jtXmI0cgK/t6UPYb/V4PwEq51f7oycpUCjYH6eqp6"},"signature":"2ZzmVkrak5gLE6UNl98AVu/6n+Oy7OCbWwfhkgMIjXlrqXQMZ3qeNgX7ocqCQcbNjwVKYvrVip2GYAZRibm3bg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t85n886q5e2uqz0ew38kr9xndd3s0g7jvwvt95","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["matchfirmuq"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aw3jtXmI0cgK/t6UPYb/V4PwEq51f7oycpUCjYH6eqp6"},"signature":"nwyBtNz/YcLBOD2BJwB/OcQit4tYVeV1Uy9Iyl4P41glhIvt9pO3flziMd7zXiwYI9mE/2CIj6Pz2M4DPxcpOw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t85n886q5e2uqz0ew38kr9xndd3s0g7jvwvt95","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1791","matchfirmuq","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aw3jtXmI0cgK/t6UPYb/V4PwEq51f7oycpUCjYH6eqp6"},"signature":"vC0tPnlNRG4oS/tXvEgG2L7XRlE877c7eDNA15AE4DteBh7CpZkFf/+ZcgQ4WoFJMxwEVqeVpq3inSGeLNFwOw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t85n886q5e2uqz0ew38kr9xndd3s0g7jvwvt95","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1791","1","1","g1t85n886q5e2uqz0ew38kr9xndd3s0g7jvwvt95"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aw3jtXmI0cgK/t6UPYb/V4PwEq51f7oycpUCjYH6eqp6"},"signature":"01GrA03gR4pZkMJkCCm1wWEbGr+A2WwF1mgR0eoeKEgOLrTttit4AkhorGAxr1ZB74OwBuhGTdPmf6jq5c4stQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1dk7smqu62vljts7f9ldguyj08hyzcavpsg89yx","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ponyg/Onl2rVBAWzuxtgHwCsjFEPncC3HE95n0zmkkAxZSIVUrpSxEB4dk1GbawzdOEVXThQhxnpu/i3xNsvJw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dk7smqu62vljts7f9ldguyj08hyzcavpsg89yx","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","unitgospeljt",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ajfh1Q5PNd/QycOZZOnxeFG550pgCDWm7iuSCndi8uNz"},"signature":"xG70XixrhBFbxGQfreLgQw7eVv04sJC3LXTuMKnZAmMsH7TwHOHjMWLra03qEzMzx7dfGvQ4rg1EUsuPlmpFmA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dk7smqu62vljts7f9ldguyj08hyzcavpsg89yx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["unitgospeljt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ajfh1Q5PNd/QycOZZOnxeFG550pgCDWm7iuSCndi8uNz"},"signature":"EgfdH/uRT+OYuRGm51i3LRCDb43bShRsJ4jbCrGS7Dx6+nY2uZqb/9BAw9h2H4FjJM/y7aWVj4qOwQ085t+Cmw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dk7smqu62vljts7f9ldguyj08hyzcavpsg89yx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1792","unitgospeljt","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ajfh1Q5PNd/QycOZZOnxeFG550pgCDWm7iuSCndi8uNz"},"signature":"Vz5bex1hdd2ZaoMwqLdVL8r3n9UabJBDfpFETJ0N1iYiqB3pDmh4bQjfa3b89NkrT76+tHwgVjSO97Fq2A4RJA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dk7smqu62vljts7f9ldguyj08hyzcavpsg89yx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1792","1","1","g1dk7smqu62vljts7f9ldguyj08hyzcavpsg89yx"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ajfh1Q5PNd/QycOZZOnxeFG550pgCDWm7iuSCndi8uNz"},"signature":"35q5c6NMgpVf2Ov/FEUpvhf+2b/nst6pycHdOWJ3Q6NGFMxAKtwaAvt7GWoGqSusq2UA+QQ5yT/G0ubqojQFRA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1pepy0549zctspgfne4d70wjpq58cd06dznv0xw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ZQFAeyp7KoVbTIUxSyDcsguGREf8UD+nxyQs+Y5DUawgeoUMvC4fM4Tk1uC7zMtSog2QiQMhEDe0BRKGpSq/xg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pepy0549zctspgfne4d70wjpq58cd06dznv0xw","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","captainartsp",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoYAs5vB9iq2f+3/CvaX75n2OnZTc1Vja+XGbRbE2a8w"},"signature":"PfS54d3PeI5xfK9t0qp2+/ja4SlWRvdbbQezuvn7i9N4+PVMFQfEcheamJ2z36q/RFOCZCbI98CmdZFqNTTxyw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pepy0549zctspgfne4d70wjpq58cd06dznv0xw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["captainartsp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoYAs5vB9iq2f+3/CvaX75n2OnZTc1Vja+XGbRbE2a8w"},"signature":"A35hMYCGqvQ2V3HtRyR+/5/4IkU36rCc/V87wKE/cotgxMAcDlDuCnw1JAy+Uu6peIhOkp+v6/C6n5gI2zAzDQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pepy0549zctspgfne4d70wjpq58cd06dznv0xw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1793","captainartsp","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoYAs5vB9iq2f+3/CvaX75n2OnZTc1Vja+XGbRbE2a8w"},"signature":"+uQO0XY5ErMA/Kk7W6RP6EhxQJy6qYBvRScytXkgVP8FeJRNthRujvbHXYFknxqo7p8mMdteAg0nSMp/CoHjvg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pepy0549zctspgfne4d70wjpq58cd06dznv0xw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1793","1","1","g1pepy0549zctspgfne4d70wjpq58cd06dznv0xw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoYAs5vB9iq2f+3/CvaX75n2OnZTc1Vja+XGbRbE2a8w"},"signature":"WeFYVx2YBbyKg75lGyg6YOIsM/W2mKavx0RZxxCctxQij9h63zmAObZMgzOqwItQawB2PPDJFOIbRDNmiKbntg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1pjgz8gf3e8u0h9j3ddxsh6kxs7wqq4cw0h23w4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"roSTY+YSQ1C2AKr9vi6w3/H7Qpse0IrkBDJelRzuu90G/DSl8QeUNBFeOahiF6aPjvkf3vJJjtSX66c+mwn1BQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pjgz8gf3e8u0h9j3ddxsh6kxs7wqq4cw0h23w4","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","samelink0h",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/YfNqfRkeEpzIGsnPoDNyK8yzEpXKOvRNGfxUR8HsyA"},"signature":"/MDB2sCOmQoNgeaxIWcxGgWnJXtPrSAQon9kcjFEUMJxp3f64OM4135qxgcuqkHFLtrZBNp4fAfnCgQqD5m2FA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pjgz8gf3e8u0h9j3ddxsh6kxs7wqq4cw0h23w4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["samelink0h"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/YfNqfRkeEpzIGsnPoDNyK8yzEpXKOvRNGfxUR8HsyA"},"signature":"RCUezMd26bbw0lqrCDsstnElqqObxYVcomDOWWt5EUNk57Wg6Vjdyv3Rbnvm/EqpoKv1HBJmYG2eSWzYSnUBYA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pjgz8gf3e8u0h9j3ddxsh6kxs7wqq4cw0h23w4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1794","samelink0h","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/YfNqfRkeEpzIGsnPoDNyK8yzEpXKOvRNGfxUR8HsyA"},"signature":"Li6Ec3Ws9q9PtUt6Q4uA4+H40QmsZqJctMEbd8U7bOFZ+8G1gINSY2RG0WNKSddEF1xQqK08oAWOxejPSEcY9A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pjgz8gf3e8u0h9j3ddxsh6kxs7wqq4cw0h23w4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1794","1","1","g1pjgz8gf3e8u0h9j3ddxsh6kxs7wqq4cw0h23w4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/YfNqfRkeEpzIGsnPoDNyK8yzEpXKOvRNGfxUR8HsyA"},"signature":"W1GgszVH81p5BYZfut2ooqTfXtmV7YxAAyKCxL1b4p02tsK/FghL0OmbyBMPqiEH7bSKa8kebVwuTHMA7sPb/Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g13n575969ly9zu8vp66y4w89vstxqrsyc0hu855","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"8mAsxiuyM/+HYwrGFe0yDevaVs0cT52LnQ3gQmvG2eYQ9PGhozjkOoX8CsD13aGWIHWANqR8jJK2HAoGzqXbeQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13n575969ly9zu8vp66y4w89vstxqrsyc0hu855","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","duckeyezu",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsTYnJJ2TVy8y5QXFNZp4IW+j4BmLYhm6+ar/5eaDGwO"},"signature":"pypE45HhaQveZr/2FxpXbykWUco8CxQecOdDFTUfZmQc6pXc4a/vuzDDzvch6ouNAlX+UIUEl8l3ulljwrMLpA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13n575969ly9zu8vp66y4w89vstxqrsyc0hu855","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["duckeyezu"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsTYnJJ2TVy8y5QXFNZp4IW+j4BmLYhm6+ar/5eaDGwO"},"signature":"U+aO7U9zuJ2sbbX/1Y2jysTeEsU/WyXXcX+mCIufb4039U8o58+G0XnGAYsulsW2+RhS0G8JT60xII6uUSfbEw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13n575969ly9zu8vp66y4w89vstxqrsyc0hu855","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1795","duckeyezu","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsTYnJJ2TVy8y5QXFNZp4IW+j4BmLYhm6+ar/5eaDGwO"},"signature":"ZO/fOAPl4sk96sPr/7F3z3fZHGFzdNu0t0cL6msMa28iGgpqp6X/B3UxLRVzvIL0WPvPpgAP86cQLd+6QAO32A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13n575969ly9zu8vp66y4w89vstxqrsyc0hu855","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1795","1","1","g13n575969ly9zu8vp66y4w89vstxqrsyc0hu855"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsTYnJJ2TVy8y5QXFNZp4IW+j4BmLYhm6+ar/5eaDGwO"},"signature":"n/BsaTCNqLn31qujfyMJO/5a6suoyuSOwYpImEqbcP5gvQpro50WMo9NVCT8kg2NJvtZdzQe8/Ngj/z87kF+lw=="}],"memo":""}
