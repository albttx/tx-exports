{"msg":[{"@type":"/vm.m_call","caller":"g16687h7uv5eugze949eemawcqymkr4nxacnxp57","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["clicke949eema"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiAxQtp9s80tISxlmKr6KWWf3BzsNtwph62+Fjm9sbQC"},"signature":"O15semwndDcekMBpshkwhYbXh8ko4ulIkgWgaNqvRZxYdFN4rBAh86xllT+G0B3/fPuyeuIB4H3j6xtJqRRsVw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16687h7uv5eugze949eemawcqymkr4nxacnxp57","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1364","clicke949eema","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiAxQtp9s80tISxlmKr6KWWf3BzsNtwph62+Fjm9sbQC"},"signature":"Huk+j5ZWn8HQxn/byohp5L6JgGgDLLE9K0SJh6n/yfEV5VNSnjS8KAsbuDGrfP5rcT1dhIozv81jZBMbYoO8ZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16687h7uv5eugze949eemawcqymkr4nxacnxp57","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1364","1","1","g16687h7uv5eugze949eemawcqymkr4nxacnxp57"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiAxQtp9s80tISxlmKr6KWWf3BzsNtwph62+Fjm9sbQC"},"signature":"r2h1u1DOg98g3c6j23nEWvX685WIdQvGA+IUvSWphgtqmFvDRHElgkUU6lUYb3Mp3LpUSP60pK17Vo6HDLQbyA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g197n3e0n74ejjjkzvw7q4250xhxrsmv8dgnxfej","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"jaDNCQcbcDftmWMIkZ4lgEYqEzAsS7tjYYkeDf8alRkp2r5fMCsu50SYaervW/43nsnKNYBzaI1fKQ3P+lBtYA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g197n3e0n74ejjjkzvw7q4250xhxrsmv8dgnxfej","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","sheriffkzvw7q42",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkFq0VjUCRufHvpM/36mXp4rZe5nhbrhDUsjmxjqK7QT"},"signature":"XIpCcNauFrGVqB3TAfIz1m6pBX6zjL/wzMOibeGiFmwg9RYUznqXS8Ca55aT/y36eY/+I3o2Z/5U+9ATTGb6Dw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g197n3e0n74ejjjkzvw7q4250xhxrsmv8dgnxfej","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["sheriffkzvw7q42"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkFq0VjUCRufHvpM/36mXp4rZe5nhbrhDUsjmxjqK7QT"},"signature":"4qtd8LkVh/26CT3W6yRvAf+CtrQ4gLzJtH4vr1u/4xF8x/Oz0gEMeiVRHineaL/WxXlf2WrDqZbniz9hXQOP1g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g197n3e0n74ejjjkzvw7q4250xhxrsmv8dgnxfej","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1365","sheriffkzvw7q42","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkFq0VjUCRufHvpM/36mXp4rZe5nhbrhDUsjmxjqK7QT"},"signature":"TwY8sLW0fqZO9AtiS2P3SIhsociNDSQAHI0cBjAwYdxccx/Ulg+l3095PnjyAaFsji3CrHZJPYmaMroVyT474w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g197n3e0n74ejjjkzvw7q4250xhxrsmv8dgnxfej","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1365","1","1","g197n3e0n74ejjjkzvw7q4250xhxrsmv8dgnxfej"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkFq0VjUCRufHvpM/36mXp4rZe5nhbrhDUsjmxjqK7QT"},"signature":"7EsB8A/XsoRtkoKYmrwUcIXs1JTJQZxBeOORxcHAyNF1ZX9tv3GD+46w5SvmXDvcRJuWgaZBLFnM7JoN8dGw2Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14nh85uhxvgu786dvftcdvdzv8u7v5uajwem9j9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"t2uSvcR7jniJ+HP4XYINiqq3YyWAWHOa6H16EasFtPQGs4VzPqmyF84aALhMBomcFBCM2TOLSXIYHdDjkQzulQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14nh85uhxvgu786dvftcdvdzv8u7v5uajwem9j9","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","then6dvftcdv",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApBt63fERJUoWfLvhY4JIFlKZRhns1DT+bF9dFLK3Itz"},"signature":"sai7o5OH3LpcCHTXqsAxtbgVWrGD005JwPyn7uVvnHY9CAm+4EUwX4n0AwknRQLiT7kkyop3MG71v4ybxnOhmw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14nh85uhxvgu786dvftcdvdzv8u7v5uajwem9j9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["then6dvftcdv"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApBt63fERJUoWfLvhY4JIFlKZRhns1DT+bF9dFLK3Itz"},"signature":"kX3QMDzoOWukL5Wt8+LO1J96YLxF9ylL+STYRRNysYkjTKnFqsExVi5+cDfauEE8kTEeD4CAoLZVVjoLDwgSSQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14nh85uhxvgu786dvftcdvdzv8u7v5uajwem9j9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1366","then6dvftcdv","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApBt63fERJUoWfLvhY4JIFlKZRhns1DT+bF9dFLK3Itz"},"signature":"BcQ6ZUNSXbP2CCT+hBQpY9xqvw0lZ8nJpVgIGKMmKqclxuCFf9Pm3rV5rccukCVQj8T4pSvRQ+ul171GQWosnw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14nh85uhxvgu786dvftcdvdzv8u7v5uajwem9j9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1366","1","1","g14nh85uhxvgu786dvftcdvdzv8u7v5uajwem9j9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApBt63fERJUoWfLvhY4JIFlKZRhns1DT+bF9dFLK3Itz"},"signature":"wNuvJgO9wMqJ+zBe6c0G83Hi37NguqHnqjJ8RRAxFBIAPZ7zS05WCm1wCCt8AJ41hZF5C8XHZsfFMHUNlzyy7w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1khq5uedysddvc5x76s30n2jdtmhux2hk3kfdec","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"QgHsIXKVrREkqTE9jJe7H/PZFmRb3Z7/mIHWy4EIVgVsGAs96KNKm3vq5JHj3DWq5xEKm8UCRYG1mcmGQx/TAQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1khq5uedysddvc5x76s30n2jdtmhux2hk3kfdec","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","toast5x76s30n",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5sjlTEJtlJS/g/bVN8V1eGD1YuJu7KuKULSoSX3km6d"},"signature":"P4ueP2Tgnyf6i20s2lWyASbuGBA9/wrH2x+SxHWSElJ4MeUdlwU3vqJ7HGlN8NesASZzzJdq1XX6bGg4yVwU5A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1khq5uedysddvc5x76s30n2jdtmhux2hk3kfdec","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["toast5x76s30n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5sjlTEJtlJS/g/bVN8V1eGD1YuJu7KuKULSoSX3km6d"},"signature":"9Xoth5f0qWK56n+QktVKMJLPmEXiN6oujl2QL/49xuo7p24ZkriIER9bagj/sCWDDhRCXxEZgP1Cq0+NXVxJBA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1khq5uedysddvc5x76s30n2jdtmhux2hk3kfdec","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1367","toast5x76s30n","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5sjlTEJtlJS/g/bVN8V1eGD1YuJu7KuKULSoSX3km6d"},"signature":"5gfiaqFJ6ykYYck5tjKjv32/iFNinchQaBVCrWHHykA3YXkqRn+i/Uhycl/3qilqVdR7zxg0/LiEzGd0X59Zng=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1khq5uedysddvc5x76s30n2jdtmhux2hk3kfdec","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1367","1","1","g1khq5uedysddvc5x76s30n2jdtmhux2hk3kfdec"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5sjlTEJtlJS/g/bVN8V1eGD1YuJu7KuKULSoSX3km6d"},"signature":"RrLxRA1fKJc7/zI9kaPbi7p8qjZPz2M3gJBQFCVl1lUAhLnXI1E2lNuBdRSLAXTG0hvnzJzqLTQGO0fbWcARsQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12ach8wklgptqwnvsqxpffntg2k9hwd3sv69wrh","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kC1sN0pB5L6bpw2sNSra57uGLz7COrequ6CDRAESyDVfo2PYfGxU4MCuL92WwTcij1K8fhKKzEysD6Vni7XI2w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12ach8wklgptqwnvsqxpffntg2k9hwd3sv69wrh","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","crimenvsqxpff",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApLNM+LvFwKyrmvzdgtov/goPGy/XFutmzw9Rlyv1vHT"},"signature":"vQrIOSEwkFs6aCTOmXKIFSRHl2qWn/jRPV/IRPGY1wpw5QA5dM8vK5Nq+tzklJq2/Ab1TEl0dOAqQ2OAQfeMeQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12ach8wklgptqwnvsqxpffntg2k9hwd3sv69wrh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["crimenvsqxpff"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApLNM+LvFwKyrmvzdgtov/goPGy/XFutmzw9Rlyv1vHT"},"signature":"N0Avi8E6hyCSATGkw064Y0uEk6Oy4Ym75QOU2vYpJ45CV3rrby3YTDWkDs2ORW534qudRbp+nN/O1ptyZyPvSg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12ach8wklgptqwnvsqxpffntg2k9hwd3sv69wrh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1368","crimenvsqxpff","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApLNM+LvFwKyrmvzdgtov/goPGy/XFutmzw9Rlyv1vHT"},"signature":"SjkOo70qENjOWz8pT7d1uTDsczimd0AsZ8+OybEjQopKFW/l8Z23KS1R4KAQDUHS+0TP/ckZcMT/tuosX3tjFg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12ach8wklgptqwnvsqxpffntg2k9hwd3sv69wrh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1368","1","1","g12ach8wklgptqwnvsqxpffntg2k9hwd3sv69wrh"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApLNM+LvFwKyrmvzdgtov/goPGy/XFutmzw9Rlyv1vHT"},"signature":"/POAyctJwN1JU8ObikCyLBP6t5Gubb25jFv8TPgo+o5FkYLkWsmGPi6RSXoJ83+stQNRs2HH7Pb4vCCyz0qRig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"YDpOu7c/MFgTQVVOO2bTUK0VPjJnN8it8+Mc+zfh5Z006bvEtwn9rAZUjHvamyazuDgEsYO7dM4LL2N2n8slAA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","11"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"4gwn0vkgL/AJKtwnh5DMFU2uRaZMAmewRMDichxaEahcy8GUKLT67NA46b/w6Pr74+ESQbCEgs7yUa5QEw4kBQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","51"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"wZ2OsxuPdll58Z/S8glWsxkAUJUA5PWDWkkltoxtJudOqHhhUf0XrhxRLnzmoCfWW5c1RtylR30WopGsebHrew=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","61"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"a4uB3z8hxhZtUVoMaWgJshhO3RFAmCMmKINv3Tl2FXYJsocdsM5Pb2Do3Z31bQnmmRihk5/LzvgRzYyWM+6XMg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1v5drp90ljduyru5rfh2ce8ql8r0rsasf9wtcuu","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"o8CU3Y1NWbaHkWS5Zgyta3fShLyEbk5uYvN3C15XpMZ6vRDSxDc3T2i5xM7A3IHC9z/GTOWlPETVkMJSFNe1bg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v5drp90ljduyru5rfh2ce8ql8r0rsasf9wtcuu","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","enteru5rfh2ce",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxOJai7nHDUerexuHSTo6sENWB3I3qfRZYkxv6qzyOnW"},"signature":"M29E1zGc6800OYWs3pPVVMogTR2o3YzRbIwDGMJ1w51ud/3RBaNrMtkTeKgmuiVYrEPYhVg/UugOP8eiNa85aw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v5drp90ljduyru5rfh2ce8ql8r0rsasf9wtcuu","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["enteru5rfh2ce"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxOJai7nHDUerexuHSTo6sENWB3I3qfRZYkxv6qzyOnW"},"signature":"OzltWjjMf+aMqUOS5g4U8sQD9npSDv0uFNpQ66XxLWgjoBmFTOJuxXZkUuO0hAvHbWFhfVVz+AYWkf79vJpYZw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v5drp90ljduyru5rfh2ce8ql8r0rsasf9wtcuu","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1369","enteru5rfh2ce","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxOJai7nHDUerexuHSTo6sENWB3I3qfRZYkxv6qzyOnW"},"signature":"wBx6oiMZr7Pg7cBEIFC+ipdQPv7Ki8hC4yo9J95SgrlyTI+hGt8CE9FICzyM9jVgjvSiEPukqf3xem3GiqiZYg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v5drp90ljduyru5rfh2ce8ql8r0rsasf9wtcuu","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1369","1","1","g1v5drp90ljduyru5rfh2ce8ql8r0rsasf9wtcuu"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxOJai7nHDUerexuHSTo6sENWB3I3qfRZYkxv6qzyOnW"},"signature":"xAuBgPXUug9h4ONjiujAUo0Z+KOHyKXOKZBeBiuw/4Z0pH2mQRdFYKqGJspgClR5ZktC/IpzQyTu0YOcEFTzQw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1800cuuuh48kp5qxjpxj0cv9vn5hx8g5mhwwp0a","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"H8KESGhIypI5d0l36i9l0oWoBNpKCsJkYm3ftHIhRFdhFZuzZENIzE/KhBOcAy99Zf9ewssPmt90s21T6SPXZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1800cuuuh48kp5qxjpxj0cv9vn5hx8g5mhwwp0a","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","canyonqxjpxj0c",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6Y79eS+ERARAsWalasVNnVr7jvz0Rn/4ooYe8OlF2/w"},"signature":"AC6e2p4D8poHYz7CEOumXr2qIH7hfq8DIcNXCVoxygFVEaYDwgsYL3U81EpDffpZCbqKxegdz1zs1WfjRaj8/g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1800cuuuh48kp5qxjpxj0cv9vn5hx8g5mhwwp0a","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["canyonqxjpxj0c"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6Y79eS+ERARAsWalasVNnVr7jvz0Rn/4ooYe8OlF2/w"},"signature":"n4xVCmppknZOOQV9d1nXtUyIc//tSpLKtz/cnZVH6fJ0Y7VYSo4hucv+3/8K8xhAo+ZIZKRulyF/DKiFXK07aQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1800cuuuh48kp5qxjpxj0cv9vn5hx8g5mhwwp0a","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1370","canyonqxjpxj0c","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6Y79eS+ERARAsWalasVNnVr7jvz0Rn/4ooYe8OlF2/w"},"signature":"ORf9KiCRAooc7RzYbtggW5M+sF5fxZI/xzCwO866CFwM5Xmd8JTan4ZzpIPu3jfZ/ebpRdVcxOnbMhth/yh9cw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1800cuuuh48kp5qxjpxj0cv9vn5hx8g5mhwwp0a","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1370","1","1","g1800cuuuh48kp5qxjpxj0cv9vn5hx8g5mhwwp0a"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6Y79eS+ERARAsWalasVNnVr7jvz0Rn/4ooYe8OlF2/w"},"signature":"FQnEfa0rT4spE3Z3ihAPD5V2CjwnefJYQqYPlsVJovp7AMNpnJdXmBSNKM246DPpNt41kJ/AnfOblbo7UkEaEw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rc8pqnsnj86dvl25ctekhvswckplcppjjdw05v","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ct7KKsQxKdE+ta2KmXFySVmwg6Qiew15Ghw0ocy/qWoU8jkGad3igKgzzPKyUBHJxJwYZBrqImM4yaYvZYJrtw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rc8pqnsnj86dvl25ctekhvswckplcppjjdw05v","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","favoritel25ctekh",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5FmeAejEKF1xV8V9G4t2iBrF5CFpumX9zfdgk1ESZdn"},"signature":"mkf0OeywX8QSfeSvoLI64NOBSDvIqB6LMM175qO4uVwhrKYo9Pf2zd1iuZoDy0bzTjLqP0RyP+VKFUScpxzC1Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rc8pqnsnj86dvl25ctekhvswckplcppjjdw05v","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["favoritel25ctekh"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5FmeAejEKF1xV8V9G4t2iBrF5CFpumX9zfdgk1ESZdn"},"signature":"/M7GDBb0d+WBYSClotoARCxoAdyRKDUpIZ8Fy0SuYZh9kxvWJazVpfKTGYV0oVjYH+lbOkiWs7UX++Ex2RcKLA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rc8pqnsnj86dvl25ctekhvswckplcppjjdw05v","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1371","favoritel25ctekh","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5FmeAejEKF1xV8V9G4t2iBrF5CFpumX9zfdgk1ESZdn"},"signature":"7warnAcThE2gk7ztvDXj+f3d9xhUviYBUiznPux0CYVL8eaXin6SfYZae4jQbWYpQtbqvtom/6jbya1RXLDksw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rc8pqnsnj86dvl25ctekhvswckplcppjjdw05v","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1371","1","1","g1rc8pqnsnj86dvl25ctekhvswckplcppjjdw05v"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5FmeAejEKF1xV8V9G4t2iBrF5CFpumX9zfdgk1ESZdn"},"signature":"wB7CoOlSDa0w9jPRoOePawoI9vKe9z/wU/JWn0xI8YME1yAjwM9i7gCT10dOcqq235pufwi1gjbjEP5NsglKAg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1e03ez7htct22h8yruh40c99a9axk77x25w6hdp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"XHYMwFO1W5dMAQApTtHo3L8CxuK4W5SHu1f2YJ4FBrs2W0hPxcNnSKfMUclfpkwxe425+C0P2OBsfjHB117AfQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e03ez7htct22h8yruh40c99a9axk77x25w6hdp","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","family8yruh40c",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A08lVLgUxZRqf396E26ZVkixR4XF0KBDhsvt86n4gWL2"},"signature":"pI/judfXbYPmv4opPcHsSNrxoRwlmLBOHCkDou0zwnJnkNqjSdfxZ8ezWTkLH9UzuJCMzD03yhLRVWOZMuRp0g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e03ez7htct22h8yruh40c99a9axk77x25w6hdp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["family8yruh40c"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A08lVLgUxZRqf396E26ZVkixR4XF0KBDhsvt86n4gWL2"},"signature":"9BMaQrcbUDIFK3XVvwEIcFFHLEwHpVpx1TiMW2lVxt1tJVM27Yp48R/LZmUpp94acTXkeO2roLzbfL5RrDrWjw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e03ez7htct22h8yruh40c99a9axk77x25w6hdp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1372","family8yruh40c","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A08lVLgUxZRqf396E26ZVkixR4XF0KBDhsvt86n4gWL2"},"signature":"p6fYpCoB7UFAuB0jE1bL5rJFD8ME79ALNRejNOEbcOYQIVL/orRvf3gBrRJdccYfrGEXxrfhI1q4rpArFyGcWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e03ez7htct22h8yruh40c99a9axk77x25w6hdp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1372","1","1","g1e03ez7htct22h8yruh40c99a9axk77x25w6hdp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A08lVLgUxZRqf396E26ZVkixR4XF0KBDhsvt86n4gWL2"},"signature":"lbj2wVFiAYl2nKPHFVhsNr98yh0yjbStjMHwhTnfxN5h95DtOK4oSdew+EW1evo84hKku7r/BJjy8DvXkvgUmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1v4xx7qp45g3qrdtx80d60uc72a3tjwlfkqdapd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"h5+hwec+dB8Sxv549fEyqaJ/ufLsll28wnb98FkEb8ZkrGmf+D5PVJEJSCOjvYJmWNSF3AlGsNbPD4x6xmBwyw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v4xx7qp45g3qrdtx80d60uc72a3tjwlfkqdapd","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","boildtx80d60",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2NMWApv2sLQZQIogK4tbjn9L8RvnKY/hoG+Z1ofwCux"},"signature":"C2r+cGO+mOmD7VawJh1sly1PcF0HNUuOsQNOIK51EGpxAgOGhqAu3yGsNcv31Nx/oUj60jIll2RduvVB6dETHQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v4xx7qp45g3qrdtx80d60uc72a3tjwlfkqdapd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["boildtx80d60"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2NMWApv2sLQZQIogK4tbjn9L8RvnKY/hoG+Z1ofwCux"},"signature":"eujPvzTfmVARVGPo/J8K6PJkbwsJP59C4yD3LJOmP/o+Wp5J1Fyu7dy4HPhtSPQNjVnBC4VxrSMpUl9vcNH6qg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v4xx7qp45g3qrdtx80d60uc72a3tjwlfkqdapd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1373","boildtx80d60","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2NMWApv2sLQZQIogK4tbjn9L8RvnKY/hoG+Z1ofwCux"},"signature":"yU34eqrMJLEq4dQgjevKX08A1oH+8rXiI1TS+DbmZWkuN5jmS0vr/EbDOPkcXAJCCVUOVCWDMce3HlHrEmprDg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v4xx7qp45g3qrdtx80d60uc72a3tjwlfkqdapd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1373","1","1","g1v4xx7qp45g3qrdtx80d60uc72a3tjwlfkqdapd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2NMWApv2sLQZQIogK4tbjn9L8RvnKY/hoG+Z1ofwCux"},"signature":"ikI9vjEwyPasRtf+NuEDorUMS2P29fq8wfT8AByii+lD4MOK9YckBiyKc6Rek9IGV1HYBP/PfVql0uH9oSV9tg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gsjdpsk6nc5xfge2kdgs67u7sv820s7lgxh25m","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"m8GcBO970hGEsJ/njkeXlBWN5E15KLKZ4nRG7+GIBqAl9rDu1076buIl+dv1xlVOKYpOVfexWeg0xNAsjleS4g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gsjdpsk6nc5xfge2kdgs67u7sv820s7lgxh25m","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","goddessge2kdgs6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2Gc6IgRHgWeG2JI1fRFQCPhSkdGy25E52i6qPvjrl/E"},"signature":"2Lsgc9IqBoyFl6z8nZURD7ohZSOiMgkscCevcXE9Vp9i0DLUp+yFHCDJmCqRCw9Tt1VFN0f/cBLIEvTpx5UpTw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gsjdpsk6nc5xfge2kdgs67u7sv820s7lgxh25m","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["goddessge2kdgs6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2Gc6IgRHgWeG2JI1fRFQCPhSkdGy25E52i6qPvjrl/E"},"signature":"ts1fB5LVSbwUQ4ckU6DPPRDCq7/A3FI2cuhxJ1cEcOsRugRTC65aJvLu1ilY12iAa5ltrViI+kYpiCavjDZIdg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gsjdpsk6nc5xfge2kdgs67u7sv820s7lgxh25m","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1374","goddessge2kdgs6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2Gc6IgRHgWeG2JI1fRFQCPhSkdGy25E52i6qPvjrl/E"},"signature":"FXBlM/cHXihrP9SoTSXIrjnvMZB+ee0kz1HPLOX0iex8HQl7909xdwK9S8216JMGdtBtQr+/KqmvbKvZgFZPLA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gsjdpsk6nc5xfge2kdgs67u7sv820s7lgxh25m","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1374","1","1","g1gsjdpsk6nc5xfge2kdgs67u7sv820s7lgxh25m"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2Gc6IgRHgWeG2JI1fRFQCPhSkdGy25E52i6qPvjrl/E"},"signature":"IwlpDc5IhqZXU3r6hLhNFiJ/NWlLH15BXwOPT2vcgxNgysCS+wz+5kwT8uiGBRDuuoLXDCEkMmi54rEWqGeKlQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16qxs2sfatyz3qrxmrqrppv8xh0tnvycd5f0ac4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"lXmMDYuwX0P2AifOwCmZMtM06vikTBpwuXvDhwJJ/upcT4oPl2CIybwf/WgnViBHqZQx/RNrPnQjh4n25/Dy+w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16qxs2sfatyz3qrxmrqrppv8xh0tnvycd5f0ac4","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","salmonrxmrqrpp",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArqWjHKJ5wa5Cm97QQMbgL87E7fplm0NLF9ArKOPIqOg"},"signature":"JEBeXEe1mgr5OVHggLD2iXQDlSvKRuCUEC+ChTrh994I+k+OTervGQyjTtMoLDGqnfVFNIcgcldF8KoSNeTejA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16qxs2sfatyz3qrxmrqrppv8xh0tnvycd5f0ac4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["salmonrxmrqrpp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArqWjHKJ5wa5Cm97QQMbgL87E7fplm0NLF9ArKOPIqOg"},"signature":"lANSzS97jCsSlVdhXFCx5RIM75w0bTftyhxSwE4adltLjM/PDOINhZ1wq4flqWFt0/KU/IVwuAlM1mbkBrONUw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16qxs2sfatyz3qrxmrqrppv8xh0tnvycd5f0ac4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1375","salmonrxmrqrpp","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArqWjHKJ5wa5Cm97QQMbgL87E7fplm0NLF9ArKOPIqOg"},"signature":"l4q/JtOV/2ijyzZxfjoY/VAe7MMvMb5YPFs5wreEmFo4GMog2C4k6YM5y1fDNihVBwfSNFGhjqPKzr6vA+EiuQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16qxs2sfatyz3qrxmrqrppv8xh0tnvycd5f0ac4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1375","1","1","g16qxs2sfatyz3qrxmrqrppv8xh0tnvycd5f0ac4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArqWjHKJ5wa5Cm97QQMbgL87E7fplm0NLF9ArKOPIqOg"},"signature":"wi3srAtwDh6An82Bztpxx7pzfEsDH9kwUadvyOyNjSNnkP0OXhLFhMIZavcYkafmtKyl7yBr9nAwVG5ibh5VWw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1c737m0epgjm9j3xrkjks8ndjdxk0xdn0gljkel","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"4ouIx45VuANqhaCOMaQ+e6MS4M8JTklUF2DeoE8LDKkTJJzHg46W1tM8LjvNa9OCdfyiQ8I1m5BOYlK31L3zgA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c737m0epgjm9j3xrkjks8ndjdxk0xdn0gljkel","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","notable3xrkjks8",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArKFnwbbmq/ipRM8wZ6oHKWGIsb7ZuwiEkmLecXSDf/M"},"signature":"3whMuIqK8p0kHWk1dS4qThkyI2BMHKX/6+zSnx8d9aAhsbXb2mk8Pb3oOpej8DHbtaXdDdxEXS7YOtz9x4CykQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c737m0epgjm9j3xrkjks8ndjdxk0xdn0gljkel","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["notable3xrkjks8"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArKFnwbbmq/ipRM8wZ6oHKWGIsb7ZuwiEkmLecXSDf/M"},"signature":"E+8SwKObCMQ0OaNPnkuqrZ1iSQHsxkoTGSIx6A0e1nEpgszHXgB7+dRsyVCl6H8jfhdBqmATZgV0Sq6Qd49h9g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c737m0epgjm9j3xrkjks8ndjdxk0xdn0gljkel","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1376","notable3xrkjks8","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArKFnwbbmq/ipRM8wZ6oHKWGIsb7ZuwiEkmLecXSDf/M"},"signature":"VOwywJsCyg41vGM7NsIoHT8PDpXHqLHP4StHfLVL7xhyIngUWyqHTAxVUIS88dv4dMyXLeOhFygqZ+KwyBxAXA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c737m0epgjm9j3xrkjks8ndjdxk0xdn0gljkel","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1376","1","1","g1c737m0epgjm9j3xrkjks8ndjdxk0xdn0gljkel"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArKFnwbbmq/ipRM8wZ6oHKWGIsb7ZuwiEkmLecXSDf/M"},"signature":"rR0ZbKvDeK8+uB0dSBPQ0SV30Uvpa+gxS5zu5xW00yhi6xZib3+KqeUwJ9ocip/RSdFS2R2EOKG1PoIdlQESpQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1j3w92u9munxkz896q4w5v9mrd40dk8m3qcnm3h","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"lN2+gw6mUG9EYtTqD22oVpp9TU7M20pzMmB+yFtJUa1EEFpTkHJNZ3esMLnhPy0yJmSbq9FGzUk6ADvISwIEwQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j3w92u9munxkz896q4w5v9mrd40dk8m3qcnm3h","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","three896q4w5v",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AspylJzglYwAVW5tu2fwoDAT9jw+lmyMwL0Vk4OkDbDH"},"signature":"1DQNzSwPoyLgVRs0bsMnuLecwGerNcYwgxcL8ACnkCIAfFyfqqPL1r71HCYvl5+XaeOA7GoRDIw1JnloWfMLGw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j3w92u9munxkz896q4w5v9mrd40dk8m3qcnm3h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["three896q4w5v"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AspylJzglYwAVW5tu2fwoDAT9jw+lmyMwL0Vk4OkDbDH"},"signature":"ibuwK/TvrvGUDOQPMuGsm5TET8XTFAsIGLe/0gHoDmcSkB9bbtZa0iWUyvYqcrr2OPWi097EOeZEvEtQMnOCDA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j3w92u9munxkz896q4w5v9mrd40dk8m3qcnm3h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1377","three896q4w5v","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AspylJzglYwAVW5tu2fwoDAT9jw+lmyMwL0Vk4OkDbDH"},"signature":"WUPEzl9G+ayzLFm5PHXKzZDSrDcrvAX7Cgt3pkLPEGQc5ifi1h3+iLmzYnCAXe1RGQDH3Anx1Dssi4YtxYYPgg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j3w92u9munxkz896q4w5v9mrd40dk8m3qcnm3h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1377","1","1","g1j3w92u9munxkz896q4w5v9mrd40dk8m3qcnm3h"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AspylJzglYwAVW5tu2fwoDAT9jw+lmyMwL0Vk4OkDbDH"},"signature":"yKMPYtPd3keJlCVUOHb0HM1lRu1L1SbzmQvu8lzd8bIOYh7zDaUrILXpHr5GO8Q2o9X5PLsm0/r5BCI4n5iz+A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vzjx9ja9letydyag3amjynmaew0240nhs7tzjd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"rPsd4jwzo/v1wFLMTZwcW63SiyAgMcdFLGE/kMZOi8Ai1jnJaRFcgsHlM+EX/zxgIcPfYKK7QWeSFV/gAAHP0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vzjx9ja9letydyag3amjynmaew0240nhs7tzjd","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","spoonyag3amjy",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3vQ01e5H0DK2OeDcY5Z2uCQNefBx0gheElMVijAy2TO"},"signature":"k5sujaPhSvQBT+qoUvB+EnV/bVRIdqfUgevFZ4Z0lU41Ab7+323CM1oXLuxl7nhYBHqHdmLoVEP6ZnUg559r6Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vzjx9ja9letydyag3amjynmaew0240nhs7tzjd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["spoonyag3amjy"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3vQ01e5H0DK2OeDcY5Z2uCQNefBx0gheElMVijAy2TO"},"signature":"D1JC/EC9E7uo2L/Y9b8EEAB0RxUBziRXOkiGaryrcXwXe12/kEw4/4llxwlEQPO8d0Mjj/hGUEc/ZO62DN4uwQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vzjx9ja9letydyag3amjynmaew0240nhs7tzjd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1378","spoonyag3amjy","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3vQ01e5H0DK2OeDcY5Z2uCQNefBx0gheElMVijAy2TO"},"signature":"AOQu3cTPfuZ9M/yX+9s2wYyqlEH6IMEghURfo3vOSUYPhtA5/jxse/nK6h+RxOjQJhwpm+P599B6egWzdJ9XWQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vzjx9ja9letydyag3amjynmaew0240nhs7tzjd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1378","1","1","g1vzjx9ja9letydyag3amjynmaew0240nhs7tzjd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3vQ01e5H0DK2OeDcY5Z2uCQNefBx0gheElMVijAy2TO"},"signature":"8t7EXLFgogmbvbMtC6VKvBKjgL/qxMOvrCffcZlKX0YCEpKcQRdadqTUqUcKyNdBoPoVdiJTmORFO/jD4cpAcA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g184xqrsqulhzctdquq7e84qkfw67j9hs67plajh","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"YP1d+99KiH3/IzeELPqkhVy4RBVNrOg86EN4wQG8MSw9eMsWhykL9bI9Wxg4SC4hvaUrfd8kN09t4zEfELvLLg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g184xqrsqulhzctdquq7e84qkfw67j9hs67plajh","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","motordquq7e84",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5wd7Z12VZhzQu9kK+6QZCWJfnO/lethwROat1OCRKSA"},"signature":"wnhxhObngeiKYbRqT6h8ri9gbR9j8KGYjSZ3wrCyaR5fP0Y9Tc+zH5b0IAflVjHqyUTTnglY94in3z91maTEUQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g184xqrsqulhzctdquq7e84qkfw67j9hs67plajh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["motordquq7e84"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5wd7Z12VZhzQu9kK+6QZCWJfnO/lethwROat1OCRKSA"},"signature":"3f6iZcFE3qDQ3U5fwl0EPw1V1KIDVMqChEP3VpE3jwh5zNoFeE8Gbsx3BnrS2p7X8z0fIUKaoR47ydslKeHEKQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g184xqrsqulhzctdquq7e84qkfw67j9hs67plajh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1379","motordquq7e84","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5wd7Z12VZhzQu9kK+6QZCWJfnO/lethwROat1OCRKSA"},"signature":"p1l33HAkRB4vrunK3TeVuj0glVs36Gco9JCsxafphssWcnbVQOjU0sQaVqNsmvvHTmw5kmt/qfPa4kCn6EQ54w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g184xqrsqulhzctdquq7e84qkfw67j9hs67plajh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1379","1","1","g184xqrsqulhzctdquq7e84qkfw67j9hs67plajh"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5wd7Z12VZhzQu9kK+6QZCWJfnO/lethwROat1OCRKSA"},"signature":"CpzlninWe5zVCqX/GVjJgcGWCvFk5g4UkaHhzsmNRwlHH8hk36rRr4JbMXigMzVvpNyo12F5/uoNO/pp+AsrmA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1m8txxtcjl55qvc2vekffjthnmppuhwk65wleju","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"PwE8tBpr4UhTQNKvbvMnh51rHyoMTgHQDLGiQ05PFPhSymupzaNk27g1WN4NTjgX0IjwWiwptOZD7quLilQhyQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m8txxtcjl55qvc2vekffjthnmppuhwk65wleju","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","outdoorc2vekffj",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+0BpCVeNL0knTj65cVc07qaezJ/4haO/c0FQNqRwg4M"},"signature":"qZt1p+F2yCism8WGajvlcfum7UCY1h37pq1ny808RJEpb4vzvqBRhQgP2ShN8hunAAjul8sdkeIL0p8d/yYLJg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m8txxtcjl55qvc2vekffjthnmppuhwk65wleju","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["outdoorc2vekffj"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+0BpCVeNL0knTj65cVc07qaezJ/4haO/c0FQNqRwg4M"},"signature":"d2bUez/Ueh4fW5ttcHg+YJs8y3Nu8J6BFy4fg494GplMABm76yhXxp1P2SqMF0cfR9KTFuWG6j4xnQSdH4a+OA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m8txxtcjl55qvc2vekffjthnmppuhwk65wleju","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1380","outdoorc2vekffj","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+0BpCVeNL0knTj65cVc07qaezJ/4haO/c0FQNqRwg4M"},"signature":"VQ/G7YO3onGx16Nggu0jF8X19ZzKyieLSXcs0Ne6vsxb2fClIE/k/bNsWjdiAw+F8+PNXu3ESqPAq8pP7vNeGA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m8txxtcjl55qvc2vekffjthnmppuhwk65wleju","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1380","1","1","g1m8txxtcjl55qvc2vekffjthnmppuhwk65wleju"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+0BpCVeNL0knTj65cVc07qaezJ/4haO/c0FQNqRwg4M"},"signature":"uTCb2/AxGZmGov8HAsYd30ivHWlh+U3nL6fMMWDjU14iUWtyx7Xlm1T24YvpwFaOtBVs1ud1YcQ8UR+xRhqDLQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15u2lyaar64x7hp7g0ke74mj8262qz24ups09k6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"66Q5U9wG9rMic27BGU1glvmNdEN8GzRcf+sMWKar24Uak64ephX4G0nHmAYis9FvZ4aFhOskPAgNPNLmMH/aAQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15u2lyaar64x7hp7g0ke74mj8262qz24ups09k6","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","sciencep7g0ke74",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxspzPT59UTYpn++YXDDRzc2UD8HFlH5CPyNpOm0KzmX"},"signature":"Gg6wGNlMNbF9sAqc0wnKMS9TzR5H8RGLeP5/kyvBU8Rpt1E4BUnk/+l93PzsaMzoqypU3Nq3QxHv6EsoAzUKfg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15u2lyaar64x7hp7g0ke74mj8262qz24ups09k6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["sciencep7g0ke74"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxspzPT59UTYpn++YXDDRzc2UD8HFlH5CPyNpOm0KzmX"},"signature":"cQZ8EwFJWcI5hc2BJXCKD/NCX001RMN6qWatL6aVs3EhqvmBwfJxO1rGRPYzDeiWAdKrNO4gmdD7sBENBbPF6Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15u2lyaar64x7hp7g0ke74mj8262qz24ups09k6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1381","sciencep7g0ke74","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxspzPT59UTYpn++YXDDRzc2UD8HFlH5CPyNpOm0KzmX"},"signature":"DWkQBrQlORnwSmLavA+SnRFRtH1D1yBuiglVOK+kHsZzh1p+Q1zvDMNpvmczF+q896pKQ2PwcP9j6QL5rlpOqQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15u2lyaar64x7hp7g0ke74mj8262qz24ups09k6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1381","1","1","g15u2lyaar64x7hp7g0ke74mj8262qz24ups09k6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxspzPT59UTYpn++YXDDRzc2UD8HFlH5CPyNpOm0KzmX"},"signature":"LxiASL0wAkF3aeLdUVYfjwIEHFZLty8rPa1uRSfn/MsWZXMTKUDFKR1bwOI0onutKGoLPlkM5E+4SSXfB8/ueg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1crqw74sfr4s7k5jhcsyqtjjuagxt456fz7qxan","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"XQoqvjcDyqmO+TUgll58KZS6+0x+uwyVEdvtxIUPdHJpM0Bfxw9sVvJwpd3+gnxiZUdLUCnxS2WmpFvOFk6iWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1crqw74sfr4s7k5jhcsyqtjjuagxt456fz7qxan","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","assume5jhcsyqt",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/BrD2paKLv3XfF4/0mmn7KlB74dDGns+dQiZMuUUzHV"},"signature":"7nC9F2r8SEVisqyePrzp83PB4wn/7lLUjNp9dSgESJpR1za/SJinrUsfRXMGv7fvo/GvPEo07Ee9a/MiXs2l2g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1crqw74sfr4s7k5jhcsyqtjjuagxt456fz7qxan","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["assume5jhcsyqt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/BrD2paKLv3XfF4/0mmn7KlB74dDGns+dQiZMuUUzHV"},"signature":"x0K4FMW68yLjwB8KBp6vu0twFzBfEUNwkeSdkqsGuJc+/C/Kw3J2QXbbuJvnGxHtp+9OsfMni0C1khe1ys0pWw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1crqw74sfr4s7k5jhcsyqtjjuagxt456fz7qxan","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1382","assume5jhcsyqt","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/BrD2paKLv3XfF4/0mmn7KlB74dDGns+dQiZMuUUzHV"},"signature":"/nVstMEf4lDa2OhryXAYLxWQILwldW2P/kX874IjuZV5Iipv++YG9PsXE6uXxvqvbBNRoO9sM2vZ9BG6J9DipA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1crqw74sfr4s7k5jhcsyqtjjuagxt456fz7qxan","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1382","1","1","g1crqw74sfr4s7k5jhcsyqtjjuagxt456fz7qxan"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/BrD2paKLv3XfF4/0mmn7KlB74dDGns+dQiZMuUUzHV"},"signature":"5VztF/kuHX6ToR8Au6RXS8g4B8fpSlZ2OsdVED94nGggU0Z/QvV2u0/FsdMqXccGi6QL8DwD9GPFyKw2qOvVWQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g135cnnasq93wtc5qgv4ts0uejtyzhcc5kp9px5w","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"WABZGZLBImLLaM1v0vjUTUqxmQ/rhpj1zWA9dCoaxk11sG2aBOpWoL8OUATAzwiPNkr0Bn71kKAfDRK7Hd1awg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g135cnnasq93wtc5qgv4ts0uejtyzhcc5kp9px5w","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","scene5qgv4ts0",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxnY7qOTCQ+4iNheDzgN6CVhALhxIk6tjYIZrAubtIQ5"},"signature":"n/GNcE2sBrR3F2+6JxyleELIjiILwU3Pr9CoSJCm3xNAJW82erhko9Jh6a+qBLhnlDNBmHPXengFSBLVn/AbNA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g135cnnasq93wtc5qgv4ts0uejtyzhcc5kp9px5w","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["scene5qgv4ts0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxnY7qOTCQ+4iNheDzgN6CVhALhxIk6tjYIZrAubtIQ5"},"signature":"PKOtp75gUXBzkJ1eD3kS8gLoWAYoZCnicYKf6RL29E9qJg9quyD7FgF405nSd1GjlapusAuLsIFN4fAQyj4z+A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g135cnnasq93wtc5qgv4ts0uejtyzhcc5kp9px5w","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1383","scene5qgv4ts0","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxnY7qOTCQ+4iNheDzgN6CVhALhxIk6tjYIZrAubtIQ5"},"signature":"lRGGkxRttwKBo2trWhOGQXQzL4TvVKocggsvwR9YFOk0TwLTEiKUK3eOVgWQESuy0FeKHC3bp3ZVhimKi0NeSg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g135cnnasq93wtc5qgv4ts0uejtyzhcc5kp9px5w","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1383","1","1","g135cnnasq93wtc5qgv4ts0uejtyzhcc5kp9px5w"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxnY7qOTCQ+4iNheDzgN6CVhALhxIk6tjYIZrAubtIQ5"},"signature":"+1V5um1IXwrgSlIUbooRuzVctCwO+GNiACl9QY+CUDcU7mCdUwdAsRgBYIYbUW2blqHmslibCKWKpA+23/GDkg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g148vzxh9unkj8tadj7v8uadrp4a5hdyttsh5pjm","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"a8Z99tMAwBD/mst7Slko7c4f8QqDbtEO3xxptdGD3mpBiboYLGjPm2Y7aKcYlcT5u7wjgc38tCA+MXin0J6qsQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g148vzxh9unkj8tadj7v8uadrp4a5hdyttsh5pjm","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","growadj7v8ua",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7uQAH8wxCFG7uW+SNIVX37u2M1ijRh+9rfVqoVQdl/m"},"signature":"M1ohUH7ljUCL8pytIDu65md/+XVZwRyiFGHHg0Ocpado8POiz9IlsuwzTF8sGR/tFZaECKwmdhc9GYWVeIbEag=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g148vzxh9unkj8tadj7v8uadrp4a5hdyttsh5pjm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["growadj7v8ua"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7uQAH8wxCFG7uW+SNIVX37u2M1ijRh+9rfVqoVQdl/m"},"signature":"WXAw08HU3j3iZ6z7VWRCWX3qEtInYbg+Fbq7NdYT5uMBZ6OxOfAvknZLdHEevBo2XvN03SE9aN0QNkwvDautCg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g148vzxh9unkj8tadj7v8uadrp4a5hdyttsh5pjm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1384","growadj7v8ua","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7uQAH8wxCFG7uW+SNIVX37u2M1ijRh+9rfVqoVQdl/m"},"signature":"S1ylijxJpweFQFJgtgZBidYaifyfrljcgFqxUrNdsskmzRJyavuS4OVigHoxlmwvWlOSb3MRAIfVl4H4tDBAuA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g148vzxh9unkj8tadj7v8uadrp4a5hdyttsh5pjm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1384","1","1","g148vzxh9unkj8tadj7v8uadrp4a5hdyttsh5pjm"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7uQAH8wxCFG7uW+SNIVX37u2M1ijRh+9rfVqoVQdl/m"},"signature":"A9c0GDwk9DkSW+4GVOLvAEmvzcn/pEiRRUe8xcoy0c0ItaWhFfiUEv75iVSa9xAqHvFtNoBJZDd/G7k6TAlB7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1pjgzdrdd5fryup9jmtkyzm0nwg0xgcj4zlfuhs","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ojSS+2o9LhiTgihIEl9l0tiL6qkW9TWalYQscHOLCDJ+pVS8quLwAXm3mLDhI4BZ4H+4Jbi1KOqpa4XdsGKw2Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pjgzdrdd5fryup9jmtkyzm0nwg0xgcj4zlfuhs","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","marriagep9jmtkyz",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsuVIBYGSAUZdTpEujcYOh6ry9P0/Eu8bBl8d92hqwEH"},"signature":"x04pmgoQiRKjqfiHdCJUYE1yvt9NzuP1YSXOh98NBZgfsyKkvR9E8ASipIPzGn1mSa1C1S/Pm4mM3vkcEVjFZg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pjgzdrdd5fryup9jmtkyzm0nwg0xgcj4zlfuhs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["marriagep9jmtkyz"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsuVIBYGSAUZdTpEujcYOh6ry9P0/Eu8bBl8d92hqwEH"},"signature":"KZs8MTyUBrBsPtGvkSzqGLZCdNLFDC5ntqeNTbTRcox26CIx1g0TuNSHk62y8GGcwvzYAXnhZLNAJaQQR4ATiw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pjgzdrdd5fryup9jmtkyzm0nwg0xgcj4zlfuhs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1385","marriagep9jmtkyz","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsuVIBYGSAUZdTpEujcYOh6ry9P0/Eu8bBl8d92hqwEH"},"signature":"ppwfQ6/COFbSNIgmJQYa4Pd8XWd3SCHebmK2hRLgi9VuinYaa1S2A3haPqc30B4jOreoyhRg7G+nDPJv4DfB1A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pjgzdrdd5fryup9jmtkyzm0nwg0xgcj4zlfuhs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1385","1","1","g1pjgzdrdd5fryup9jmtkyzm0nwg0xgcj4zlfuhs"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsuVIBYGSAUZdTpEujcYOh6ry9P0/Eu8bBl8d92hqwEH"},"signature":"h1CbKds9VHvaAizlTuXef3+udXpnJ2K+NT0xSqY0ct14gfgNEY66/IIxFyGSnC+biuIjxJb4F2DfNhk+REpAeA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g182etg7nevuy544j73zyazhpn64f84v45kyphfz","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"q85raYaL8Zw7o/R5eAE5eOosFDJlVgZa5yEH7KktAn1bLYQVp+2vHboKJ6jb8CIkYV7x9EtWE3B1bREgYJYk1Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g182etg7nevuy544j73zyazhpn64f84v45kyphfz","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","asset4j73zyaz",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+nvY+iqrDTykt2YM492UxVpgZpSbrZX+S+RfkfcznQT"},"signature":"Wy7YK/U2vGw/QONt0IuPCuPai7ndsLUeqsv7wTIKHAIQWC9hMwDejIhbZVDe9sd+WYbjPEbrnaVTbQEpkPIzbA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g182etg7nevuy544j73zyazhpn64f84v45kyphfz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["asset4j73zyaz"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+nvY+iqrDTykt2YM492UxVpgZpSbrZX+S+RfkfcznQT"},"signature":"44aJoJf5y0kiS6LGcpk01X9c+gwKtwHVOsT+JR4GeDxv/eXlN7mjemIdK2aA/zB3DgvyRdUK1TdIW3C+pu0c6Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g182etg7nevuy544j73zyazhpn64f84v45kyphfz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1386","asset4j73zyaz","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+nvY+iqrDTykt2YM492UxVpgZpSbrZX+S+RfkfcznQT"},"signature":"2EK3qvod1d35opb/9jonY8n+LG9sm7bYflueNIuCM1grQ0foviaxwIjjiO5OKVO9oAkzUAS+KVodezD9Fa6J/g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g182etg7nevuy544j73zyazhpn64f84v45kyphfz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1386","1","1","g182etg7nevuy544j73zyazhpn64f84v45kyphfz"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+nvY+iqrDTykt2YM492UxVpgZpSbrZX+S+RfkfcznQT"},"signature":"CjjlR2QYt7h4ZbkMUhXgAgfxcr7sOgjxSZRoVmFetDdZvBiBrMtW7WEdyyrYLxB9+7MTeFxAc+VR2hgk+zhhnA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1aa2w8yss8a2uyv7z9v6ygruztqknk0ks09a4rx","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"uTBC60DiDITFgsGi4Zh5+7JaiA/dSEahgMDpv1GaQvZgORPxftdzoii5Xb/GcJH2qBasqNVwkIuoEKaK90VG9g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1aa2w8yss8a2uyv7z9v6ygruztqknk0ks09a4rx","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","winkv7z9v6yg",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0BkfsIJ7hqaJ0185dpgf/i8naMkcb+OzhEzr4uDm4Ju"},"signature":"79lGc6/OpwkWVnCX9JwHSZKktI5wW4FhvKPkGdYi39VowRr0c5PIsxgW/5EMDZh5Ec4w17zSnaBfSxVh1xuA1Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1aa2w8yss8a2uyv7z9v6ygruztqknk0ks09a4rx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["winkv7z9v6yg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0BkfsIJ7hqaJ0185dpgf/i8naMkcb+OzhEzr4uDm4Ju"},"signature":"+oQ1gG0XGjGXJ+zoFj1pUCW54se674LTqZHxAemS1QxUih2dlWy6rgQvusXOV8SJAiO9jhykqPzbE60LvWBX4Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1aa2w8yss8a2uyv7z9v6ygruztqknk0ks09a4rx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1387","winkv7z9v6yg","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0BkfsIJ7hqaJ0185dpgf/i8naMkcb+OzhEzr4uDm4Ju"},"signature":"zt2cxy0oMvtAKOXrNjZJ03ZFOX1RiViCGEhrW4hZCe57ue7QzOSWIisKtNjf3ylewyz2wKvOIQoxrCm68UEjHw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1aa2w8yss8a2uyv7z9v6ygruztqknk0ks09a4rx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1387","1","1","g1aa2w8yss8a2uyv7z9v6ygruztqknk0ks09a4rx"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0BkfsIJ7hqaJ0185dpgf/i8naMkcb+OzhEzr4uDm4Ju"},"signature":"m3pPMY+Q7sHt8bxozvpGTR7xsdFfn9enznLJp8ThomE83wymvTEOw/VY7snUc3zk3htT1RKfIrWIyWGRcAUs3Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1kracnvydchjjh7nn0f4xsu9nkj7uq5v0xlzjqd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ifc9lochZQoevczJUFmowse23c05AyG8RtpLMGkmk10sR3IjICTWq3csEWENLGsnm7gmunpslItGf/oaiEtnfg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kracnvydchjjh7nn0f4xsu9nkj7uq5v0xlzjqd","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","phone7nn0f4xs",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArXjfaof1GjYgHsQrNr1khWEDqypbwx2z/sQE/9Wtpmp"},"signature":"Px7259XvZbCS5P0EPNclIB3Z7n8p5EPvQoI7mWgCsvEDHVpzIXeI4gY9ZgZ6UHRunNmLtYg+kHQDAADczROjXw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kracnvydchjjh7nn0f4xsu9nkj7uq5v0xlzjqd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["phone7nn0f4xs"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArXjfaof1GjYgHsQrNr1khWEDqypbwx2z/sQE/9Wtpmp"},"signature":"y0PNkC5PopdQRRHb4qycyj3ReaqHJp4/wiMjxojp9V0b5wp3kdiI8OA/HLcamptSJ6qUxzr8y+6/a/yfTrvqJw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kracnvydchjjh7nn0f4xsu9nkj7uq5v0xlzjqd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1388","phone7nn0f4xs","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArXjfaof1GjYgHsQrNr1khWEDqypbwx2z/sQE/9Wtpmp"},"signature":"cfC8oD62jEHnqjGds6jjxK0DLxoxA8k2wNK2vIdnnskxIJygMeysHGpoGzpX0JLIt16USaS81KGKtdx5qVJ4yw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kracnvydchjjh7nn0f4xsu9nkj7uq5v0xlzjqd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1388","1","1","g1kracnvydchjjh7nn0f4xsu9nkj7uq5v0xlzjqd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArXjfaof1GjYgHsQrNr1khWEDqypbwx2z/sQE/9Wtpmp"},"signature":"kNnlnKgskN+XaUYDAzC0bLXlibOKDqwGKbvxyLM06eRvtFKdr9CRVwZRNxjF8PqK2ByQI0XmC1jYmNkNPYXkIw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g13j2txf0dza638z4d96u2e4w3n3xfvwtujj8vzr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"5MudCKGRtsn4dSUef6Vii/0HJa8IgY3jF1ZnU9u0w2hlJ93IxPlWvMAqOspOV+MFe59J9BwIEPcQ9DgzaVjy5w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13j2txf0dza638z4d96u2e4w3n3xfvwtujj8vzr","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","orbitz4d96u2e",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnNnyvd1dNP3OCebZzJku7eS+LDlUISuLtPtIz4IFKhA"},"signature":"A4CJpEj17Iz7ZsUkqtxMY8Jbi9v3JvJ4Z1Z/WP6AOTVJB6KcLrfNQWRQcZYPeZwnDatMT8i8UKapChxBZ3DJdg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13j2txf0dza638z4d96u2e4w3n3xfvwtujj8vzr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["orbitz4d96u2e"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnNnyvd1dNP3OCebZzJku7eS+LDlUISuLtPtIz4IFKhA"},"signature":"S0iBsGgF1+ZHwGjbmk8Tr6dR78VWP72+WKe167Q4GEUgVD/QO3ElK9Ou9OCDFOLYuU5amFe4Rgeu7lboNZ0EkQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13j2txf0dza638z4d96u2e4w3n3xfvwtujj8vzr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1389","orbitz4d96u2e","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnNnyvd1dNP3OCebZzJku7eS+LDlUISuLtPtIz4IFKhA"},"signature":"cTsvhZMXqOlHyo9BNjC6FPBHAVYUx7lh/cRgt6XRY+EFzzOxBjwC6YLMOOKvbOezYZuPubGYLvHLrBmHunkzmQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13j2txf0dza638z4d96u2e4w3n3xfvwtujj8vzr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1389","1","1","g13j2txf0dza638z4d96u2e4w3n3xfvwtujj8vzr"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnNnyvd1dNP3OCebZzJku7eS+LDlUISuLtPtIz4IFKhA"},"signature":"qOsht47OYJgoTAWpYFg8pZqjNYMzL+yM5H50aIGzKEkr9nMEl58Rby+Pj4p7+uKhTPY5QSDKdt/7pJdL7rcO0Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1pgdkneu5785jvv4jjrszl6q5rafrh32x39wxze","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"EuJOSaclUH5DuPAb+CRVDC6tQXTZb/hUc3VNKQZ9MDxA9R9/eBcILGy316NaGYxSci8nilimKy1PfqQqJelSyw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pgdkneu5785jvv4jjrszl6q5rafrh32x39wxze","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","missv4jjrszl",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2UC1ObeWLipYNT6pCwHH3v6mlQxj9LsL2SwnNl3OJax"},"signature":"Sq2dkHvSMGwj9t8GZDqO/fEnwZVkkiEEzyqgGkM8tbITH9nRjBM3adhbzHwnjQWkgZibap70EklKxKwOtaqBmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pgdkneu5785jvv4jjrszl6q5rafrh32x39wxze","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["missv4jjrszl"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2UC1ObeWLipYNT6pCwHH3v6mlQxj9LsL2SwnNl3OJax"},"signature":"DYGNIwBcGWbQSKcOOJ1XlH6Xorr7ONutch7V+wyl2dclD4oglqhCmyg2puYdP0+eCfhoPxZlYFngl74+ZsFCmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pgdkneu5785jvv4jjrszl6q5rafrh32x39wxze","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1390","missv4jjrszl","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2UC1ObeWLipYNT6pCwHH3v6mlQxj9LsL2SwnNl3OJax"},"signature":"7Rzd6Nggnyf17MLbTBfV2NZxUOmEUhef//LVCw7eAhAyeDEZQCMcfwoWe/ydQN5+I98kHwMPD7xaCbZaW/WfTA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pgdkneu5785jvv4jjrszl6q5rafrh32x39wxze","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1390","1","1","g1pgdkneu5785jvv4jjrszl6q5rafrh32x39wxze"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2UC1ObeWLipYNT6pCwHH3v6mlQxj9LsL2SwnNl3OJax"},"signature":"R/vrSBcSVMtMlv9ERMfam6S++HBI4aJZY4Gq2WLc1nE31tRVhpOn1Y3OsI6KpIuuriTdwjWkHT2+zw1ObS8aWg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17wpxac9ve489s90g2tqe49avpv9pzhvfd6nht0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"/BwVaykkzY2FPTZgwqoF8rHU6pPWg75GcxL3lWwXfFIeZJhNZx8oClHhDrpTA5ACCbHkNyfUq1frJ4IOCbFALw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17wpxac9ve489s90g2tqe49avpv9pzhvfd6nht0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","reunion90g2tqe4",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvNJpZKPCSOCbKPXZ6KFeg9aPeZ7nNdkQGZjGZeZGFGn"},"signature":"iNhnA5VvExLwbbKymUc3hJKvpRgEsgew4OLxLYXQ/x8GNEi6wD7JeAD2m7GMAj/8v1POOaU3CGcwBKf13sDR7Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17wpxac9ve489s90g2tqe49avpv9pzhvfd6nht0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["reunion90g2tqe4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvNJpZKPCSOCbKPXZ6KFeg9aPeZ7nNdkQGZjGZeZGFGn"},"signature":"wrpKCyTFMaUptRJs0UVpQqnDdmIxJf7sVPo5XV0yR9ADpsOBXdMYKmLVs0wSN0oazJTrLzG0Ow0aUYzYM/efUw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17wpxac9ve489s90g2tqe49avpv9pzhvfd6nht0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1391","reunion90g2tqe4","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvNJpZKPCSOCbKPXZ6KFeg9aPeZ7nNdkQGZjGZeZGFGn"},"signature":"s8ag0laA2n//FY3ZPjXENr+yUEl3oQE1PScdbZWYNbcAt7IvyjVTCpU7UPQwjdINFsl0tu86SI33/1BSYwxYXA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17wpxac9ve489s90g2tqe49avpv9pzhvfd6nht0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1391","1","1","g17wpxac9ve489s90g2tqe49avpv9pzhvfd6nht0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvNJpZKPCSOCbKPXZ6KFeg9aPeZ7nNdkQGZjGZeZGFGn"},"signature":"pBT2mmTc585UnW/6xQKhCn+pcrC7xepQXC/Yxk0DCUJS7G9wmhldDsYL6NZuOJlQcwEOBcJ2rAX9GX1fJs6J8g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g167fu8fwdszega4rx9zadk6zzq4de6ergc6nher","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"KhszKDGMg//xFFF+ze/gUtwOhUvKR6svGjVmY+OPX8xJKvfZSZsoGgYG7hIxuKYakLq6EOezMPeFv5A/YDa1dA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g167fu8fwdszega4rx9zadk6zzq4de6ergc6nher","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","sting4rx9zadk",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhY4QvLEevF1o4njy06cC3vg/VZKpYw97DpFWwrLeQbm"},"signature":"Is7jZgn4TXUfrS7Mg88v+XcAzPbo8k0UTuCbyEBl9TQq/Dj06nFM5f2a5ryYlMGijOq9gQoQCaEa2Igr/Es1hw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g167fu8fwdszega4rx9zadk6zzq4de6ergc6nher","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["sting4rx9zadk"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhY4QvLEevF1o4njy06cC3vg/VZKpYw97DpFWwrLeQbm"},"signature":"Gfn/94WbX5YkcfNRYuUPU3KNkV24uFPKwgpO8zzHBUAY1aLI2i29VrOhi9fwJjlCIcYRLmyq+zjHZdPKjTwgGg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g167fu8fwdszega4rx9zadk6zzq4de6ergc6nher","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1392","sting4rx9zadk","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhY4QvLEevF1o4njy06cC3vg/VZKpYw97DpFWwrLeQbm"},"signature":"IAld01rwhDsy6KdPabG4H08a2WAwCqxjQDwiCGCd1UpA6jhQF3xTVZDE2YmawGKD52X7mV3QvnsSUAKvtjVB3g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g167fu8fwdszega4rx9zadk6zzq4de6ergc6nher","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1392","1","1","g167fu8fwdszega4rx9zadk6zzq4de6ergc6nher"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhY4QvLEevF1o4njy06cC3vg/VZKpYw97DpFWwrLeQbm"},"signature":"IzQrN4hA5uBfcK4yitQ9okOetXiwOB78Z5fKxRNlOQhrw86bkk9AESzkdX7+E9V3Q5/RG7AHppAO8ZyhZaoNQQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19e6yw2rwh6thenwp28qpj6ylc4mk4hahtfvnyz","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"QIdteiPxtSlZHAYfbbQktQlWBiz5kd2bEx7cUl9rglUBQ9qbdg3rZp/2aizibxvDzNNYy7v5V/UPi/Q5oecz8w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19e6yw2rwh6thenwp28qpj6ylc4mk4hahtfvnyz","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","kidnwp28qpj",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aqcn/xYJGleKd8wIuRgEI+Z8nfelN+HtWD0Y7EBBymvx"},"signature":"6Fh1q+nxUuj+pSz5YPObNKVw3LK0NckFKw5tIA/CLBwfONjBfzM+FFU/5YGwCZ0d/HMcmVDT+xmDu0E0cFLY5A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19e6yw2rwh6thenwp28qpj6ylc4mk4hahtfvnyz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["kidnwp28qpj"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aqcn/xYJGleKd8wIuRgEI+Z8nfelN+HtWD0Y7EBBymvx"},"signature":"XGkPJT3l52LlYM9yE7SPQZd25e9ImFbjIY7yoN0QyrcsDFmM3Z6lrqsZfhs5baNTzPcKGfWpjUai5bSY6BF9DA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19e6yw2rwh6thenwp28qpj6ylc4mk4hahtfvnyz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1393","kidnwp28qpj","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aqcn/xYJGleKd8wIuRgEI+Z8nfelN+HtWD0Y7EBBymvx"},"signature":"zmf+c3Q9l1e34viZfnza7ln5eBdjv2DC+U1jMqcwwE83gPDelWoINx4wy+oqcR2VV/B+J/f4Tl/0VK1OxRsATQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19e6yw2rwh6thenwp28qpj6ylc4mk4hahtfvnyz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1393","1","1","g19e6yw2rwh6thenwp28qpj6ylc4mk4hahtfvnyz"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aqcn/xYJGleKd8wIuRgEI+Z8nfelN+HtWD0Y7EBBymvx"},"signature":"SzjoG3lAz7HI7/ZZX45dqQN3ANFQIgTU7qe5L++024BRoq4y05BFPDo9UauoQtsNayeM6ooUfEFNUHuML2Ohqg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1adnaytf57hjut5lnus2epjx0gt3s66jtpldvkm","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"PpemWqTIgjFjZ2sjqvHSSZAk8uHT3JvPFjSTQQnjFLxL9UpxZPegFrI8K/MTR6RHcQKpgx59GXyrHBvKeHtNdA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1adnaytf57hjut5lnus2epjx0gt3s66jtpldvkm","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","message5lnus2ep",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkV/fBSTx+YrRTrY60l6nuzf1NFggIJKxfwxYNbS0s5G"},"signature":"QAEeLdxAu8xLp8obXpPoPA9677YOyo7dT1iaMyk6RQkM99uMLQ7DJo22MT9kcuKg+v3eJiACaHqCIHamU/0w/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1adnaytf57hjut5lnus2epjx0gt3s66jtpldvkm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["message5lnus2ep"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkV/fBSTx+YrRTrY60l6nuzf1NFggIJKxfwxYNbS0s5G"},"signature":"ucK5QmYU+JC92oTweiFGq2VwVua+RjGDxAG0KKMPs3VJDeL91oV6D07i6OBomd8FG5QKUqoHZc/66QDy2FDkUA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1adnaytf57hjut5lnus2epjx0gt3s66jtpldvkm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1394","message5lnus2ep","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkV/fBSTx+YrRTrY60l6nuzf1NFggIJKxfwxYNbS0s5G"},"signature":"qnZRXFLrTa17gmcTk8ycEKllJGloh82ib22wDK0+DfdY7LR+wSAJmFCZN1W9NWhx8OD9A8mCx89+SWejL9jeWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1adnaytf57hjut5lnus2epjx0gt3s66jtpldvkm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1394","1","1","g1adnaytf57hjut5lnus2epjx0gt3s66jtpldvkm"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkV/fBSTx+YrRTrY60l6nuzf1NFggIJKxfwxYNbS0s5G"},"signature":"msjAhqtN8v6KWosYB4f2kIF05+Tnv2aatX/SSBb//uII0e62OFb5NhDDd9sogHHG+26EuueaarOfYGceL4ZSQg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1q3pwl28hgfz6dygqmkyqgpqal8cwg2x0x2nhe3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"qMK/U5FI9nAiG01/4TV5qZC0ICfo/V/UO9JvKcRhv9tMgGr0nE3KJQBJgXQ/Ayg/Y24tZMTEbSfNlP1z6ZsQjQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q3pwl28hgfz6dygqmkyqgpqal8cwg2x0x2nhe3","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","vaultygqmkyqg",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/wvpa9TZUAJGh930OHSPU+kR3q5IvDva1nozFTZyW8m"},"signature":"fPaOjp/zcaV6MJb4RU6xEF2XgrY3Qv3K2fd7MCn7o09MRdbCgn47mAGF3poPSvdlkAbEo7rc2kdO3crDG1FkgA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q3pwl28hgfz6dygqmkyqgpqal8cwg2x0x2nhe3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["vaultygqmkyqg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/wvpa9TZUAJGh930OHSPU+kR3q5IvDva1nozFTZyW8m"},"signature":"lgX2CL5mncG7Mk4ARyYhQz7ZC/Jwh4KgpprnfqUYj8pH9jbAJb++kd/uuvqQK4rFJH5osdwE2soNoSOthFqGQQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q3pwl28hgfz6dygqmkyqgpqal8cwg2x0x2nhe3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1395","vaultygqmkyqg","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/wvpa9TZUAJGh930OHSPU+kR3q5IvDva1nozFTZyW8m"},"signature":"hndodEpAtc5dhOFDSpzFy5Km4QKgcyE6J1QLKvUv4ORNBVl7Vc6jUownU6s9snLNzWlenxdhHHz1jTQojAec8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q3pwl28hgfz6dygqmkyqgpqal8cwg2x0x2nhe3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1395","1","1","g1q3pwl28hgfz6dygqmkyqgpqal8cwg2x0x2nhe3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/wvpa9TZUAJGh930OHSPU+kR3q5IvDva1nozFTZyW8m"},"signature":"gERPDV7XRf8ggqo3lfFLrmyDmMeiOMULvE3JR+U45mJcA++j5C9keYdU72zv/ubfVEkxsdf32Dr+2ilTcp+cdg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"Cj4phqqylhJ+nqiUJFDlvK9ot0Zb0Yo4YC57/Qk5V244R5waDZClWJXnKzOHZ3Pr9jJ+FnMKTseKR0hBZnW7PA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"SiSvPTMDSyA136x4iN7HGrEf8z4zcY+G2MyLO5+xPFQU6RsS2n8H36YLLbqJbhUzWfg4mBn2NZNdwzNoPO/HDA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"teZaxUxF2Xc+ZIbw93MAMc5dhyBTmbRGVgztYoujeURkE7ZmtlDVUMSPfUM2bBJohVp8CkPn+lGktORdWodq/Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"8LHxz1jAvXKcvBQXiBxoztVuSuJPgmU4wGVZR1ks8VoEY7cpAIcNnkOz2oP9G/eu/X2FJQ3GLlDYOWPIAbBBKA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"j6go6jx2j5tRulxLPpRWB/67XUtcZYsSa1wLlxwJIzA7UHfPeI17+r9CAE/H/6yxs97RWADhgQDP121a2vlQIA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"RrVRZ5aBbWnvQwb63By4FkdUl0rqvzymuxzd7/hHUaZIAFB/a2AbSIPoOxJKM6JXn1KYbb+P0o2044xLrgi6Tg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"YUxwwsiWx/MtRTyrlkAfASDYS9u2Izp9hW38Uy9QBPoVtn9Xr3oyG/Hxg2x0x6WJC+JLiiHNNYUqUbPFTDdM6A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"D22Ko4hNWFyD48NnjXsBHXO6XkBqPb/VIgZ4rgKn0TUXl8u/w60wlJi16Dupw77TK0onOTHjgWY3Fionsn5C7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"H56rDMtVItU4ZhgtjJ6xnnTZfJfaVGTj4wLvICBx40kvx4ph+UIKBJPQ7Y9+KOowgMkVmnHx9mqFIIPeayK/6A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1s7uy0cs77utjnmck3ww00ncgcxexwa45tlrgd4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"f3cBaEyp7Pai9C3E28Uwtrs4Yqv56FQHpjGryRQlE2hpC7gyZJxW+2b/evNVBthsc6Icw+336OoykQQwbO/02w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","2"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"Orj6q1lLoOdj8wN/+VGVzP8HyYCjuiBVem48CwCk67ZV0XJGRzye097dWo+Mrs0BLyB/pzG0/4xPzlgiwOFTHA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s7uy0cs77utjnmck3ww00ncgcxexwa45tlrgd4","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","promotemck3ww00",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2bEnFLfpB+xMqrnkntMFFkvD7LUt6WAnR70aHBD2JFD"},"signature":"+HIEOP8g2s/WMX3JwF9HQ3D2ey+Z3sXilQvZbmJgZ1xw8tYeJyF9uPwvWU+HmrX+0T3Utuaw8797ch1KacEFGg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s7uy0cs77utjnmck3ww00ncgcxexwa45tlrgd4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["promotemck3ww00"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2bEnFLfpB+xMqrnkntMFFkvD7LUt6WAnR70aHBD2JFD"},"signature":"cVY2HDAB5agTHM8ja+YlqOagnioULh/iXZJfI/xoRqRRKYN6D5GnIGxMiGymoa9+sOLZc0pxQYTWGW8MymhSqg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s7uy0cs77utjnmck3ww00ncgcxexwa45tlrgd4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1396","promotemck3ww00","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2bEnFLfpB+xMqrnkntMFFkvD7LUt6WAnR70aHBD2JFD"},"signature":"Ze049fK+AcGPdRmnKjLK6ixffYCFJOCVKHnriQWSmf54TsHjQ7cY198e9GKJkTDMRdV9GdoFDgGxuykXJOM3og=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s7uy0cs77utjnmck3ww00ncgcxexwa45tlrgd4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1396","1","1","g1s7uy0cs77utjnmck3ww00ncgcxexwa45tlrgd4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2bEnFLfpB+xMqrnkntMFFkvD7LUt6WAnR70aHBD2JFD"},"signature":"OCxZGZ6zAzoOEOCxW4sBtDO/eit8CD3J8Jx8N9C61fEvvom5GD/SnnlMmlKBaoETk8d0CFwNVRnwe6pCoYFn4g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17gjcdqc3y6f39ah4kdphx4ywmsen7m35shkgc0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ug1CK6+LHeUfBnTKMPVQGHuQKQ+Zj6R+J7mfBt5BfrUeTYi+Fj/fOj/6rEqfZAJnTkrgb6vhfp9cDt7Bjxs2CQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17gjcdqc3y6f39ah4kdphx4ywmsen7m35shkgc0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","nobleah4kdphx",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1jU69t9nyOWQGNSQBGIIPjrEknb/I25qMUSRgcnNGFh"},"signature":"aktsr+kvakE4TmuLYnNtvAkd8VzDFvkdJRADH3bI4B1SDDdZ5M+AGOub818Lp9SF14vIZ72Mfy0hJRs5yii/lg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17gjcdqc3y6f39ah4kdphx4ywmsen7m35shkgc0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["nobleah4kdphx"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1jU69t9nyOWQGNSQBGIIPjrEknb/I25qMUSRgcnNGFh"},"signature":"ECLfoXCRwTVvqZYkKGM2jXnueGzbSFkdlb6hN3zrd3xy/hM4IG2q9NpTt+zW2d0/cxIyLYVwAcg6XNp4egEFLw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17gjcdqc3y6f39ah4kdphx4ywmsen7m35shkgc0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1397","nobleah4kdphx","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1jU69t9nyOWQGNSQBGIIPjrEknb/I25qMUSRgcnNGFh"},"signature":"kjKb2QL2CRi+XHOuUD08qLUMhEwdLd5uZwiT8Z7Msg9XuSvhA7KG2HEVHcqVHpnsAF0kMtx6/FAwgdUzl6lGnQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17gjcdqc3y6f39ah4kdphx4ywmsen7m35shkgc0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1397","1","1","g17gjcdqc3y6f39ah4kdphx4ywmsen7m35shkgc0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1jU69t9nyOWQGNSQBGIIPjrEknb/I25qMUSRgcnNGFh"},"signature":"kCRzoOST+C6s7y0RaLQQ/6zt0bGHBGzIF6pg8b36CiAkS1quMIVwR+cV6lM7gZXNmuM5h4wCeQz96wmhqEtqlg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1w6dr08j3px4xzma2hyk9dq3rd4wnnq3vxfrm29","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"rM2kWB7tMMof9o3Z6uMIacFhvtTn/u6bvuPx7rRUmQJ3kRYuO9UkWZwU6BVEnqYWN1yqIJwbryBnj2k5jGR7Yg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1w6dr08j3px4xzma2hyk9dq3rd4wnnq3vxfrm29","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","barelyma2hyk9d",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5Y7PRQs3dAnVctt2rUysIzVqFWAE8yM6DtSD7iVh8zO"},"signature":"wE2w/1FzY6Hf7eJJkF5unkAPSsOlv8/K9T6D4EZcm0VFtcdNsyleWgqKWc9a6GeWn5uI7G14MRLO7ckkhWjITg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1w6dr08j3px4xzma2hyk9dq3rd4wnnq3vxfrm29","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["barelyma2hyk9d"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5Y7PRQs3dAnVctt2rUysIzVqFWAE8yM6DtSD7iVh8zO"},"signature":"khqsHFuEA902Vkq39DoXn/ehkS2vvhbbTjAJm8sDvGtT5Tftpdvd9Jsp1j0VLDLOkZAN3h4oK7Rpx/7NzReHHQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1w6dr08j3px4xzma2hyk9dq3rd4wnnq3vxfrm29","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1398","barelyma2hyk9d","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5Y7PRQs3dAnVctt2rUysIzVqFWAE8yM6DtSD7iVh8zO"},"signature":"BhzagejNgy3FDsgvQmPq7EyOPmsM41WHLvyI8N2ajTV4cfDeObZBh+lpmssd1hnpuEsTgn4uPUhYGZIR9WZQzw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1w6dr08j3px4xzma2hyk9dq3rd4wnnq3vxfrm29","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1398","1","1","g1w6dr08j3px4xzma2hyk9dq3rd4wnnq3vxfrm29"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5Y7PRQs3dAnVctt2rUysIzVqFWAE8yM6DtSD7iVh8zO"},"signature":"N7qDI2gurITdqLhskmlR1SDGtOptdEdruEHktfnQ1hcvgYoOtPsrbpc9S98nCO1FeRuy+pbHic94H9Taj7jTZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hgfcjkpnay0390gr2jfndzfn33pqe0t3fdjy2y","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"g0j5pWgYSX0+yCdvQfDljcR8mF8ZPPY0iSgOfEV51/EGbXQJCuS8eUoah24sIiD01jgb9baEkgYUK+Cznrou8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hgfcjkpnay0390gr2jfndzfn33pqe0t3fdjy2y","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","enhance0gr2jfnd",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap5Djei0UKtPLafQmpGLZdDV6XqXEDu63TyDrHqcNvLI"},"signature":"islRD6Q5CNdS99c99CjDvY+z+qNmXTqZ2ASKld/jsCk4A7CWYaMWLh/AHjAUt5k2ubILywCymo7fJDTPlXN6lw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hgfcjkpnay0390gr2jfndzfn33pqe0t3fdjy2y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["enhance0gr2jfnd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap5Djei0UKtPLafQmpGLZdDV6XqXEDu63TyDrHqcNvLI"},"signature":"RXAOR/jgw1lPMHtJJA7c/kKGUlfduKx5JvtBnNX2XMxKEJjkAMtCT3g4ksP6LUZoNwOgq5h/n6l4ss8QOuEwPA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hgfcjkpnay0390gr2jfndzfn33pqe0t3fdjy2y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1399","enhance0gr2jfnd","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap5Djei0UKtPLafQmpGLZdDV6XqXEDu63TyDrHqcNvLI"},"signature":"99RHGJkrzv64e9Nr340ORNjLX8R3UJIlx/wFUMQSSFAz+UFERyqxE5kBsmXDpVS+OGWIGEqVnxCmztpTLDqHMA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hgfcjkpnay0390gr2jfndzfn33pqe0t3fdjy2y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1399","1","1","g1hgfcjkpnay0390gr2jfndzfn33pqe0t3fdjy2y"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap5Djei0UKtPLafQmpGLZdDV6XqXEDu63TyDrHqcNvLI"},"signature":"23N/P1e0pNBzBeAMD9LKRgb6BT07e7TxOZNI3iF5yscL+4gkgSltLGWfGf7TNeQfrcibogA0sdfoSTTXbeIiKQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g10slke8zxzfkeuqhv8hg8ttx73uelxyws6r24ck","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"uooNU4CKZGXuYNyvVqwve08R9YQpLaQ97SpjEspLUmIQ7JXC2wtRXJxkMKPwT5wgwMgV6QycaSsFnfuElB4bKQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10slke8zxzfkeuqhv8hg8ttx73uelxyws6r24ck","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","badgeqhv8hg8t",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+p6P0V7Q+nDhnVFukW6Nwc2NU15YLpXqcShcPD65iiK"},"signature":"RbfUTUPvoAM2cU/I5ALQIhQp0Bq8GWHs7gfoDbn/raBd+ZFrlCYFwGQ19EXBntQ58067JDHSfG0bXzFRvdJX4A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10slke8zxzfkeuqhv8hg8ttx73uelxyws6r24ck","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["badgeqhv8hg8t"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+p6P0V7Q+nDhnVFukW6Nwc2NU15YLpXqcShcPD65iiK"},"signature":"QmdTxDqhW65NNNjYg1XpH2oeUYlgccXWEh6Zs/tZNC47P9FS76dShlyca8O1RFSRYh+vyjAsAr3DYYAWotkb1Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10slke8zxzfkeuqhv8hg8ttx73uelxyws6r24ck","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1400","badgeqhv8hg8t","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+p6P0V7Q+nDhnVFukW6Nwc2NU15YLpXqcShcPD65iiK"},"signature":"NEl37WZ/j+9NOW/Mwg3wMGlWNwnG6gCw+tobRXKqZz4gp8m0xyXpsFN6fDJ2ieusruCK+w8CnoFc9xLFvkEklQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10slke8zxzfkeuqhv8hg8ttx73uelxyws6r24ck","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1400","1","1","g10slke8zxzfkeuqhv8hg8ttx73uelxyws6r24ck"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+p6P0V7Q+nDhnVFukW6Nwc2NU15YLpXqcShcPD65iiK"},"signature":"qgMEAMp/zIhAl5gekvkndxzLWiWe8I1P3Ggt66Ok3w8C7TRUN0TdS5kaNqPCbLMVxsvf5uKc4Sj9gnj8DI++fw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g142cm03ndvra9x9tv9gunwxmmlxzhhdz42xjz9q","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"q4KZ83VU6Iq22fNXzCxBKRBEEnbjwSFedhqf10pQWIlGQMYeRasCe2ZFHabDsSh0qFIk4iV04TRMTdNlzrxixg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g142cm03ndvra9x9tv9gunwxmmlxzhhdz42xjz9q","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","unit9tv9gunw",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah4WhGm7bsldykonwgw2+IQBt85+s96S1+WyGuolRDQY"},"signature":"mE3GkTdCOzdR7toJn0/+wrHGgwa+x0BQtNEZDeVI7KwXMVUr8HaVgXr3V6UNMHn8n2vt4NGBs84KSOy7rcKemQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g142cm03ndvra9x9tv9gunwxmmlxzhhdz42xjz9q","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["unit9tv9gunw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah4WhGm7bsldykonwgw2+IQBt85+s96S1+WyGuolRDQY"},"signature":"KO3M9WckOCP/9EotkIP+2GW2ZIYr+XVY5kk78ldrN4k4UyOgOzYWxu4ZXZJWAU+jQUphv05VqdKq8Tzmj6YQ3w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g142cm03ndvra9x9tv9gunwxmmlxzhhdz42xjz9q","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1401","unit9tv9gunw","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah4WhGm7bsldykonwgw2+IQBt85+s96S1+WyGuolRDQY"},"signature":"0VI9l3BtiCCVuL2yzk1T0K05vNLcLPydDFjOKnKL7ndIZ52ZlYXQaP+N0R6GRPrS/uJIkavAyj++vWPklbWikg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g142cm03ndvra9x9tv9gunwxmmlxzhhdz42xjz9q","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1401","1","1","g142cm03ndvra9x9tv9gunwxmmlxzhhdz42xjz9q"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah4WhGm7bsldykonwgw2+IQBt85+s96S1+WyGuolRDQY"},"signature":"ZuEEWkwoP7XfImrhNPKXix2tj3iArM4OsYfXbuLRtGVCAWOmb/W0vvD836RkTJVk7wiTsTG7/oxpFs0gm0FETQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1t8x36c72f3yy88duyylmnzshlsd0qhc2pkenw7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"8E8uPAVVsk8+bFXFd2UejcT69EPnG0aQBja2oMq6F/VbIu66ynpYRBz3m7swqARLazor6+9DuNNs9H7kYtgGGw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t8x36c72f3yy88duyylmnzshlsd0qhc2pkenw7","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","artwork8duyylmn",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjqVHYIuM43BKB91SxKQM3zXPy0V91TpC9VZhSND3ZW7"},"signature":"t+oo3mJJYncHmY9nvqyFzTgHDoZNqlB8zWksfbSjigkrosWb9WSaAi40ts815xPM2Mckm4/5Xk30sMQ18diGZg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t8x36c72f3yy88duyylmnzshlsd0qhc2pkenw7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["artwork8duyylmn"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjqVHYIuM43BKB91SxKQM3zXPy0V91TpC9VZhSND3ZW7"},"signature":"LW5TGkjGMF4+QC32P2wKuvX0TaPqz/yz0a5sH1pld6JB48dJZ7cDq9zlED9a637SX448Xjc5udVsRUBANxqhIA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t8x36c72f3yy88duyylmnzshlsd0qhc2pkenw7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1402","artwork8duyylmn","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjqVHYIuM43BKB91SxKQM3zXPy0V91TpC9VZhSND3ZW7"},"signature":"/Vf3MNEpqqJ1ywT+jVq0g3ztPPAhwe/SefHT0jfiQPx4G0tQcEUEnIhMtwDS9vx//dOfs73GzjJ+AJgoT7UITg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t8x36c72f3yy88duyylmnzshlsd0qhc2pkenw7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1402","1","1","g1t8x36c72f3yy88duyylmnzshlsd0qhc2pkenw7"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjqVHYIuM43BKB91SxKQM3zXPy0V91TpC9VZhSND3ZW7"},"signature":"gUUQ2qeo/6a0swbxYuwC/5jREjCPT1d6VN5VQ2tomrgUcM7CA5D+8/S/j4Gly1/43gDEOaBycFTqnDixQylhEg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lwwqnkwyljeyksnyuv4zycc9y6jfufzx76gryq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ieIhG9awyRgIf9kf/jr1lkeLCPnswZ7j4ab8gqUSWnhJCJxpkIIT9ZrfNPlWLmIAqz+QKRHre596Oj7lXdY6zw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lwwqnkwyljeyksnyuv4zycc9y6jfufzx76gryq","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","juniorsnyuv4zy",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2E0BOmuTRB+yxwBq2mKmgFX79HM1m1g68tMa9LNYR4n"},"signature":"RB3n+Rn3u2L3EbregSNE4Iq1PCvjp/tXCdzoOsmeGosC4RwKmw65xPFilSk9g7XJd2u6B3WWQmRDXz4st6G4nQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lwwqnkwyljeyksnyuv4zycc9y6jfufzx76gryq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["juniorsnyuv4zy"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2E0BOmuTRB+yxwBq2mKmgFX79HM1m1g68tMa9LNYR4n"},"signature":"fhPakF+7fjyKekGzUx952FBdercd2VkECgJ5eWat7EAjzYSua+umD1Wlrd8LRw7teeaA/ctWBnR0wqgT6KXt/Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lwwqnkwyljeyksnyuv4zycc9y6jfufzx76gryq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1403","juniorsnyuv4zy","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2E0BOmuTRB+yxwBq2mKmgFX79HM1m1g68tMa9LNYR4n"},"signature":"EY+NW3MTT/fyWOGZcSyGlCNuJGQ8aA9njt30aMMFfxBJHdqx+Hd8XJ663gYKe2YwgC4kt8iMDkqdnuja3gYADQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lwwqnkwyljeyksnyuv4zycc9y6jfufzx76gryq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1403","1","1","g1lwwqnkwyljeyksnyuv4zycc9y6jfufzx76gryq"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2E0BOmuTRB+yxwBq2mKmgFX79HM1m1g68tMa9LNYR4n"},"signature":"qetNJFGHm96Qno+dWN6zKxNO9PMEUDRkEtWQP6sP0kxrVfueWLKriGCehXJkbOOsGiweD6Mmg/AQEpb2B3HYEg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1t2vzp42gsd0mafj5g9f0puecd2ax25mlutkl8d","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"1+hs9OEzr2wDZE0X0m1Rb7fuA1Sn1T2V4FdPiL5thgcxYIdJbeOaL+Ah5Y3tsb93kL5GXgss4qrNS58hZFzG7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t2vzp42gsd0mafj5g9f0puecd2ax25mlutkl8d","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","stonefj5g9f0p",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/GZMMybC0tr6AQ+K5+vW7aw2ic3SpFQCWHnbHHXDydi"},"signature":"gihAHEK+GDvMNZu1CGgjYXf/wE57/nyqQGzPj1r8yG5gi0a8BKoIFAL+PkMwN971rskqB312qlR5wLeyCSQmgA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t2vzp42gsd0mafj5g9f0puecd2ax25mlutkl8d","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["stonefj5g9f0p"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/GZMMybC0tr6AQ+K5+vW7aw2ic3SpFQCWHnbHHXDydi"},"signature":"ZwPflFb5p+6GlgrsJ0yijzfTc2kXY1mv6eqz0xjYO0EOjdLW4rvjde/hkkeLMpu+1iAF399aZ6AGCoxcopt6og=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t2vzp42gsd0mafj5g9f0puecd2ax25mlutkl8d","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1404","stonefj5g9f0p","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/GZMMybC0tr6AQ+K5+vW7aw2ic3SpFQCWHnbHHXDydi"},"signature":"4ec6t6OF0zT3ev3hU+wLPe2BWSVuSy0VpPNvSpYVH3xrxsEy++0vaHoxNZcG8CB4IvfdEu2Ko1HJb69Eh8/1qA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t2vzp42gsd0mafj5g9f0puecd2ax25mlutkl8d","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1404","1","1","g1t2vzp42gsd0mafj5g9f0puecd2ax25mlutkl8d"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/GZMMybC0tr6AQ+K5+vW7aw2ic3SpFQCWHnbHHXDydi"},"signature":"2cknquMFpt5sAaSyNht/ddA+ooMkPXFtj0F0U+LPBhwajqe61UuBYwZjfOvab0ciucw9/M38YYdxFB0mRvuxtg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ersty0mv7nerdncz0sqm6vu9lskcllvgfhkc59","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"djjXTomGxsznpq6iYUvlr6Xv/sAGYxHTjKFI80LbzW5pBpDV64xN5d/qFv9Ra9tTIOtBBs/3XDkAZBAnDyT2CA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ersty0mv7nerdncz0sqm6vu9lskcllvgfhkc59","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","clockncz0sqm6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvpZ/zyBAL+XHjdZFhp2VVVWloJaPDZX2YLJZTErvSGn"},"signature":"mgg9o3zQxp0fF+c0dnjuLt2PZW94PAeaHO403KbOvG9NWZ6Fu7+ANbDPudlQUVQ1eMgGZ/sAFO4ppZYJy/veow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ersty0mv7nerdncz0sqm6vu9lskcllvgfhkc59","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["clockncz0sqm6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvpZ/zyBAL+XHjdZFhp2VVVWloJaPDZX2YLJZTErvSGn"},"signature":"DrrAQD0BIpc8cBpEENPXaGH/7pRxZ5F8sx9ZkZ5IFvN/85qZQTBgq7X6K0gvN1KcmSEzdGsG6s48tjkkPCztlQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ersty0mv7nerdncz0sqm6vu9lskcllvgfhkc59","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1405","clockncz0sqm6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvpZ/zyBAL+XHjdZFhp2VVVWloJaPDZX2YLJZTErvSGn"},"signature":"961Qk16BmyKdx16RCbYw13qmWKMRr2f+ThEDECPBt4QvXkHqPbLNOhHK5+5YnB8Vktx0G16o0+ZmJbv1wMEJbA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ersty0mv7nerdncz0sqm6vu9lskcllvgfhkc59","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1405","1","1","g1ersty0mv7nerdncz0sqm6vu9lskcllvgfhkc59"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvpZ/zyBAL+XHjdZFhp2VVVWloJaPDZX2YLJZTErvSGn"},"signature":"QzeXe1RVHyhfsNlMF7vNYFzy3iKKTXaFsnTnz8pHV5JpIhguleqiwHgJufVUqIeNCYVhYfynlb3Kodb4L0ByXQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1te032sl20vy2pxqtuzkk5sgs42r5r7q2x2lxtk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"APFzC/XyfArwI9rF56R2CVjSk8guz5RB+myIDIZL5UVYGAfP0GK6vs/Q4jYbGqXirNI3FQ2J+K3d/63zHHjQuw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1te032sl20vy2pxqtuzkk5sgs42r5r7q2x2lxtk","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","erosionxqtuzkk5",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxaVR7dOb6Hj1N2o+YlZZ+BbWqjCVxIwLvkp2KvCPaTv"},"signature":"OxjaNIXTm7yeAWCXG5jcupBhCn+plI100rz4l6ZnbsQtR0wEBnQa0VI7iV5g7P8LPCSOQMbH7N6a4tTsdZ9V9g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1te032sl20vy2pxqtuzkk5sgs42r5r7q2x2lxtk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["erosionxqtuzkk5"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxaVR7dOb6Hj1N2o+YlZZ+BbWqjCVxIwLvkp2KvCPaTv"},"signature":"dWP3vry+AXUCp1T1eUNtBp2KhOeO9uxgAaOetTML3iFazsi3pITrV68jsZYcTYIxznODZ1yTdk4ueGvWpoe3Dg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1te032sl20vy2pxqtuzkk5sgs42r5r7q2x2lxtk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1406","erosionxqtuzkk5","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxaVR7dOb6Hj1N2o+YlZZ+BbWqjCVxIwLvkp2KvCPaTv"},"signature":"fYDec1OJB5MYGihUSYtfLk8XzvFFz1KKIrFQX6pH3+ARdbJRm0QCaBG6CmGYi9Yx8wA9MpIgbfjr+9Cwd2Ggrw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1te032sl20vy2pxqtuzkk5sgs42r5r7q2x2lxtk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1406","1","1","g1te032sl20vy2pxqtuzkk5sgs42r5r7q2x2lxtk"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxaVR7dOb6Hj1N2o+YlZZ+BbWqjCVxIwLvkp2KvCPaTv"},"signature":"JJ8fPFMant+5a6+0EUuqz0n+XJDVBVZUeVzy6ZqrINktPpK/2cW4+CTZvW6H7ebySv7z/UxaarYIgSO0x3C++g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18zkjz75ze9xhuxaze4k94gegq0kfl3n2eekc6a","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ibpjBSIvitq8E5pvqFIw3Ef28P8o3nwnhrE4IpFF0VVbtECT0ptD5Ga/6MyOHKPepDG8iAHwEfQkfNeHf7jvow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18zkjz75ze9xhuxaze4k94gegq0kfl3n2eekc6a","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","seekxaze4k94",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Asea1yfirD1u6skpsT5f0U4yfRXBLmMaKus5j0oeGBkL"},"signature":"0FqVdoDG7buP87H02dtxkL4s/TKZdkT7aL2Q1JhLIDggF1/Zx8nFnVwbMwtKFvHq8dOnhxdo9/Tq4c30TXqWIw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18zkjz75ze9xhuxaze4k94gegq0kfl3n2eekc6a","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["seekxaze4k94"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Asea1yfirD1u6skpsT5f0U4yfRXBLmMaKus5j0oeGBkL"},"signature":"gNqLpcCeEI2qvesAR8RfIx+QbGsp2oYnq041PfKH3WQ//8OX3+qYGzU/AMk97bhmOBoPQlGRvfduKCBd/nMmUA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18zkjz75ze9xhuxaze4k94gegq0kfl3n2eekc6a","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1407","seekxaze4k94","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Asea1yfirD1u6skpsT5f0U4yfRXBLmMaKus5j0oeGBkL"},"signature":"HY2uue9iQz+mRnjQ8W0U6zhMo2VflpJP0yQpH4zJ2MEPy2ZwHiHIjVjzgUbcX+GZL1LJXoQjNcrz2X6SEXVFbA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18zkjz75ze9xhuxaze4k94gegq0kfl3n2eekc6a","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1407","1","1","g18zkjz75ze9xhuxaze4k94gegq0kfl3n2eekc6a"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Asea1yfirD1u6skpsT5f0U4yfRXBLmMaKus5j0oeGBkL"},"signature":"oWo1iIdDhp4Bz9W0MhM0a/U2XGeAAB2GtsvdGD97SitoMuvKs2NR71htFPmDGHN08RCYe7sMjsSJxDgr17Xc+A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15lt6acmf5xtk3p4gzyr3hp09ta8jd6v4yzskp3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"0vsPn8TpmaQvhI6UI1eihNzPAEB97R8tBfhcqsIGXGMUAk4EJiXgibgFQuMJAhSaZE/TD7k9M8gghSwOi2Pzkg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15lt6acmf5xtk3p4gzyr3hp09ta8jd6v4yzskp3","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","clickp4gzyr3h",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A74c9ax0j2RJhawNMX7dbxD70f6rHIvRl76kjFw1kObd"},"signature":"eCzvurC8illDdcMYl1hKViEwgS/+qfukOgWR18EEl2Ff36QBfWO/oIOwgJk689SACDp8dYSLmguM0g8zxraPmA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15lt6acmf5xtk3p4gzyr3hp09ta8jd6v4yzskp3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["clickp4gzyr3h"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A74c9ax0j2RJhawNMX7dbxD70f6rHIvRl76kjFw1kObd"},"signature":"wh1fyPfggmR/RGDcif5OBUVNmywAcHkPrMOjO3YwD3oC97ZupmdIYSnpg0B7EtM7nyJKD0vjK9hQS6ubGbeZpA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15lt6acmf5xtk3p4gzyr3hp09ta8jd6v4yzskp3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1408","clickp4gzyr3h","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A74c9ax0j2RJhawNMX7dbxD70f6rHIvRl76kjFw1kObd"},"signature":"zSr4hlYe62FdKyLnvfxJDOzZ2rgqIXCB7GnO8FMz7EM1SIEEwynB0Q1j2EenBYo9MuRuFqEyyYcLFei9bqbqCw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15lt6acmf5xtk3p4gzyr3hp09ta8jd6v4yzskp3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1408","1","1","g15lt6acmf5xtk3p4gzyr3hp09ta8jd6v4yzskp3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A74c9ax0j2RJhawNMX7dbxD70f6rHIvRl76kjFw1kObd"},"signature":"p2rwB/JKxsmLdF/y8yXwBq0n44aPAv9XgjT8GVtHOgZj+N1bsk3mSo3dI6B03QNksmnLfRbfS0F3Fw8Z+77lQA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ddymqljd9fjj974gtyu47v8ejptgktn85tg05w","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"V/pKOipi6nq9EGHc3WFenqpjvFRmsrNnrMQYsCrpFWU9OJcXCXuFslCmW6ZWIH9cjwrdWxehA9Evfoy86hVfSA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ddymqljd9fjj974gtyu47v8ejptgktn85tg05w","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","maze74gtyu47",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A54jYOypUMPhnCBkdwdF5rmex/MzO5BHgnZvKgSy4i6u"},"signature":"F+3rM0HvhZv/fz1Rmosp1o5MRx5JmYSvN1TibLfAeDQl8k/ulldS2epOPq/faX2XPBrGIVXu+kHOVobEdv9pXg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ddymqljd9fjj974gtyu47v8ejptgktn85tg05w","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["maze74gtyu47"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A54jYOypUMPhnCBkdwdF5rmex/MzO5BHgnZvKgSy4i6u"},"signature":"z03i8iUS90FNPahSDHqJLWciJ/UTlCood6FrrBjpn7QBINRGTu7nds50k2n059awsdDju5B+H2FKiKZ03P7rBA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ddymqljd9fjj974gtyu47v8ejptgktn85tg05w","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1409","maze74gtyu47","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A54jYOypUMPhnCBkdwdF5rmex/MzO5BHgnZvKgSy4i6u"},"signature":"1+MfEohMsJcIViUddLRUNPHK04NKMmpA562DCqTlmhEMyriKCiSWOpSTrTILss92uPQ+qRHjNlV3Rtuup5FVdw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ddymqljd9fjj974gtyu47v8ejptgktn85tg05w","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1409","1","1","g1ddymqljd9fjj974gtyu47v8ejptgktn85tg05w"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A54jYOypUMPhnCBkdwdF5rmex/MzO5BHgnZvKgSy4i6u"},"signature":"xw77vBkDPr80+0O9LxGXDqP2zJyaE95M6A1STbqewHhQAq+96wm8TtbtZaJMhvNM7AEisHkqf0TBlK3t+43ihg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1qazwgtv3wvg5ywxwwy4wemkpu8epd5mrjshq9l","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"2Ad/cIPkyEyQKpd+4ULWez6NlbfsQnOw4bRMSW1LYnkvGTfRDNJgmBkL0/oh/D6AueOVW7Af5+Q3vxEAixR7gA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qazwgtv3wvg5ywxwwy4wemkpu8epd5mrjshq9l","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","resistwxwwy4we",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlikltQTJJQBGGGpCABuwc7azKlKJbNDidBripzDcmZA"},"signature":"etOyOOrKmFAuATfQPahzAENYLzsIeznr1jWzDDA04JNRibpmsVoH+0tkm2BLMJA7zu9X/0qF+g6zamQj/CPCaA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qazwgtv3wvg5ywxwwy4wemkpu8epd5mrjshq9l","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["resistwxwwy4we"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlikltQTJJQBGGGpCABuwc7azKlKJbNDidBripzDcmZA"},"signature":"20nu9nNaYSCE7R5R/X7N4wrSsT980H7joHalCJtilAxgv72SlPZOfJVZiguYSjRY9cvRu/AQV8gtgLf1Zzupvw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qazwgtv3wvg5ywxwwy4wemkpu8epd5mrjshq9l","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1410","resistwxwwy4we","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlikltQTJJQBGGGpCABuwc7azKlKJbNDidBripzDcmZA"},"signature":"F7AoB6wN/8LAyjXMrNCyuG63VgJSy9SD/wlysTGUfIdVZE2lrmASKdrsS193kKXu7Ya8Jl/tVQAQOBA8QtKQhQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qazwgtv3wvg5ywxwwy4wemkpu8epd5mrjshq9l","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1410","1","1","g1qazwgtv3wvg5ywxwwy4wemkpu8epd5mrjshq9l"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlikltQTJJQBGGGpCABuwc7azKlKJbNDidBripzDcmZA"},"signature":"+LDzwOklTYWmcK3rUOwHuI3Yml9iOjtnPO6f8NTjGxxGbxMG5Ju/qwaN1+HC9ifJteXOVicsbYbd5j5qtAbUJQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17mcw908lp5y006avp4fjr082wrzryzqh2qgr8k","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","12"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1Ie2uJQVGI4K/6kwsKQkZK48YDrk3Ic4DKiVS1Ee2yL"},"signature":"9BYzbO9c1kPGuyIsNlozZa9wjww71ZMXUichDv/aTcBlROW/zqJSL5RmBuZaJTprb068TgiriBLvgodN9ZJIBA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jdyk4tex9a84tkhllterq3ldfe05hmq8vnyxhc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"lJhBmINo1K9IT6SHayR+4f8U/Z57nLdzoJtnpeVxAZtCXnSn+ft5StnLJg6oIvz6Xw9Z2YJosXROFz1ae50KIw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jdyk4tex9a84tkhllterq3ldfe05hmq8vnyxhc","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","tenantkhllterq",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AydWb5OnURfFkAIWT1GfzoP0vV8ekgBsjjY/rkWXoIz5"},"signature":"1jHzlxDiYwybDryFi1pYeGcQVnDTS5dfijmbG5EkL0IxCYrx7eAEZxmrPA6mznPzt3QK17CG9IWVEdmpN7SgKA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jdyk4tex9a84tkhllterq3ldfe05hmq8vnyxhc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["tenantkhllterq"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AydWb5OnURfFkAIWT1GfzoP0vV8ekgBsjjY/rkWXoIz5"},"signature":"ipwxCEW3Akl0tEaTmCJK95aILfoLOF9g0S1fAh+73fQGJQANw4XWyQ/qDy1zjMMVrGiGcE4NwrDVGTik4mr6Yg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jdyk4tex9a84tkhllterq3ldfe05hmq8vnyxhc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1411","tenantkhllterq","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AydWb5OnURfFkAIWT1GfzoP0vV8ekgBsjjY/rkWXoIz5"},"signature":"+KskhveS4HQimuPkUF3CwwES7/6fm6BO03zstNnT/i9Eo7pfit3tec/bWA7oM+lW+rKRcyFREkGlGLU7/27OBQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jdyk4tex9a84tkhllterq3ldfe05hmq8vnyxhc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1411","1","1","g1jdyk4tex9a84tkhllterq3ldfe05hmq8vnyxhc"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AydWb5OnURfFkAIWT1GfzoP0vV8ekgBsjjY/rkWXoIz5"},"signature":"184XoC0gvlk+fTqV5Kp7A4jvCDiqPTLivX78v2B3mvVDh2QprMn1XL7bIXuV+CylXx3rqIc+LZgNU9BDpssnlA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fya6n4f4n2wy9hukesgurx0gsr5l7l3jtp87z3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kLbiHMTtrJNhIczxeCTUy3MqEVBzOIo+a0rchy9fh6c1BR6fLMGQavgCvKRoDPdxI16LezgySTw4DUTDl/58NQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fya6n4f4n2wy9hukesgurx0gsr5l7l3jtp87z3","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","stoolhukesgur",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArXpWiJsu2KGOtfcprjL2TCN7BHSjG4FxJDLZ19SAlmE"},"signature":"V1ovt+5/e8v7idJznXPI9lL41EMnlNW1efAj27vEjHhOCzVlLTLdTccxaRM6eJ4zIc98FUj5vg9zT0knkkOAOg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fya6n4f4n2wy9hukesgurx0gsr5l7l3jtp87z3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["stoolhukesgur"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArXpWiJsu2KGOtfcprjL2TCN7BHSjG4FxJDLZ19SAlmE"},"signature":"ULrXLkMFMju+mY08p2ujJE75JI5FPCt6Q50Q+NTCgvJ12+oAb4mgBayxVyJCNW7k1g0dMPKvpoLsVQAUNGM5hg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fya6n4f4n2wy9hukesgurx0gsr5l7l3jtp87z3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1412","stoolhukesgur","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArXpWiJsu2KGOtfcprjL2TCN7BHSjG4FxJDLZ19SAlmE"},"signature":"5ZIYIXLoi+P020dxghAv+ZYA9xj+WwYF+XzbaO4djrclUaM039CsiXl3oX/4oSqxByp0PimjrJNPYHfegqk0ig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fya6n4f4n2wy9hukesgurx0gsr5l7l3jtp87z3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1412","1","1","g1fya6n4f4n2wy9hukesgurx0gsr5l7l3jtp87z3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArXpWiJsu2KGOtfcprjL2TCN7BHSjG4FxJDLZ19SAlmE"},"signature":"bZPR5Sepb93DJhb41ZgqqYJ7KWatDalG0LHbf5iGijoz05Ak/cmei2FnxnDwiFwclWzBxGbq8IaaZBL4xAhYxw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18ntkrvmyntjpylrg4xl0zacj3ydg2nwccgwqws","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"6M34+dP/+2Su6JL6chAu0eEVkLYXho2eB7/3qGQqcI8MHfwDpw8untotKfRS+Bpqp4gckHf7tgL8iE0c487hqw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18ntkrvmyntjpylrg4xl0zacj3ydg2nwccgwqws","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","happylrg4xl0z",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A15qgUVfK4KIjWRIUehRJMrW8F5RLAAEUgHINt8xTyfd"},"signature":"GipyOpZLx6O76prkYqTcAfLSJmtbkkNwEEEYU7aMNqQdfyQndA1p6ivZvbtWxBqm/qTAU+vOBj315Sfn1Vvv6Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18ntkrvmyntjpylrg4xl0zacj3ydg2nwccgwqws","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["happylrg4xl0z"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A15qgUVfK4KIjWRIUehRJMrW8F5RLAAEUgHINt8xTyfd"},"signature":"lnNevMtecw5E/k7kipnJ9xXkxRfDYeqGP+m3hjzM1e4cndk50CztwDPtGcxALVxNQHXoV5x/Zo5+VXU2EFZUjg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18ntkrvmyntjpylrg4xl0zacj3ydg2nwccgwqws","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1413","happylrg4xl0z","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A15qgUVfK4KIjWRIUehRJMrW8F5RLAAEUgHINt8xTyfd"},"signature":"6soYHB8Hje8P+hLP7H54/Glw/0Q8MpYw6Piszw17AXMx9y5o8dZzyeig0ySZi/abDIuMf5iHJyJd8cudMZCnAA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18ntkrvmyntjpylrg4xl0zacj3ydg2nwccgwqws","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1413","1","1","g18ntkrvmyntjpylrg4xl0zacj3ydg2nwccgwqws"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A15qgUVfK4KIjWRIUehRJMrW8F5RLAAEUgHINt8xTyfd"},"signature":"uyOEfstHfDrpFh6iEcREzvAXvYnxbJ2sq0S3rlb6bf8Ramlp0/PzXySmMx+t1DFU96G9+7V0Ig1A95BOZqu8uw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hahsuam3lspelueluecxppawgcq2dyzmhgkhjm","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"1Ne8DlEnDPYgdWpU5wgsna1leAEojjlikm0eSkuX5QsGQ4jOzMiBwLsXuRSM6Nv0kz0u4AMCeYS8D86PfrQjeA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hahsuam3lspelueluecxppawgcq2dyzmhgkhjm","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","rightueluecxp",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqiA6pxW5+aCfYsMddl22YXcjj9VaZl10DKEf0n7vgiP"},"signature":"4GGzOUmbQ5ASiX0W2Zk1s5Lwj68h5M+Ty/UDPSAAkcAbF6wguWy1LEkJ+QRfKzK8qwtJmWuZx6rK6tY5CbAHCQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hahsuam3lspelueluecxppawgcq2dyzmhgkhjm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["rightueluecxp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqiA6pxW5+aCfYsMddl22YXcjj9VaZl10DKEf0n7vgiP"},"signature":"PIG9jnasmnc4087AUOR3DZrukwM9BMWjNabjXppoKLZY/5n/VECN6bzKNJRfbXbsqvVhl+RPS2ABWpjIDKAL5A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hahsuam3lspelueluecxppawgcq2dyzmhgkhjm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1414","rightueluecxp","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqiA6pxW5+aCfYsMddl22YXcjj9VaZl10DKEf0n7vgiP"},"signature":"I6Qskm7hM5WsSoU2lPzu91wq91v6/Ob3LowVDJub9WIujM7PXpPfltmtZ3uTK/Q3wYgs/OlnOGFG4sVnKU+H7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hahsuam3lspelueluecxppawgcq2dyzmhgkhjm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1414","1","1","g1hahsuam3lspelueluecxppawgcq2dyzmhgkhjm"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqiA6pxW5+aCfYsMddl22YXcjj9VaZl10DKEf0n7vgiP"},"signature":"iDNuzFVDukEnGGEczkb8cRcW8J2H9LWL7eKmQA4GFc5QxARBsSUeFmPtoEnX71eMFJfb2d1Rcnn4S5XtQEzgkA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1uaj90vvvqt5al0ejt478uswlfs8mf9cyfvn24m","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"crYn4D/302rpfqQUbt3Xqmp2+4ugRjyW+S86u3WS/G0kHUlPHoIosBNNDtpX4sW947PBc6ZvSymOlbgCro2Rvg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uaj90vvvqt5al0ejt478uswlfs8mf9cyfvn24m","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","daring0ejt478u",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvNTnIibB7xY2h/ah2PFPYQuZ1mOkX/6S1e7k2RlArvK"},"signature":"UxK6he5WiUbFnq9ljAHu0C35HbVrJDzh0JojicbTRXkdhDwYz1Skmp/aDYW8D3Vp8/5sxzzpJAMV2m08J2qVEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uaj90vvvqt5al0ejt478uswlfs8mf9cyfvn24m","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["daring0ejt478u"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvNTnIibB7xY2h/ah2PFPYQuZ1mOkX/6S1e7k2RlArvK"},"signature":"Q4Yhwtg4T7pdusK+07/bfxlhhvB/mahYWMWyIgV0TB5EF4LqPhPF52SVTNXBZm3WC7M7tDzV0TpcZCBgM80Bwg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uaj90vvvqt5al0ejt478uswlfs8mf9cyfvn24m","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1415","daring0ejt478u","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvNTnIibB7xY2h/ah2PFPYQuZ1mOkX/6S1e7k2RlArvK"},"signature":"xmVlJo6OeB2rDpLHF22R4uqIscJO/yC5vxJoKY45YfAJjslBrF1k1LNXcJ+YaJ2AqeT9SD4rLIXwaGthBTT38w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uaj90vvvqt5al0ejt478uswlfs8mf9cyfvn24m","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1415","1","1","g1uaj90vvvqt5al0ejt478uswlfs8mf9cyfvn24m"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvNTnIibB7xY2h/ah2PFPYQuZ1mOkX/6S1e7k2RlArvK"},"signature":"7i1QIkvGR7xgOtL0rtiPVho1DQXq597gFr9RjQZtBiMzMhny8X4ibmsZNE2Rg8jhFXYTrX3xlzBxs09ZPOJ9tA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14mu3mmmep4ek4lh6uyxv2mdg4p4s847s060ew4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kkJe96NeUuoJW2fQzzWNTVzDCoHahXCX8k8f8e7LojVEwPnzq3u1VYp81uo4Q8Cl2SxApecwTZr0xf62Es4lQw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14mu3mmmep4ek4lh6uyxv2mdg4p4s847s060ew4","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","potatolh6uyxv2",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AypoTI5laWSWsaVnS7rOmr17FlYoN1e0P+dlolcEvJ8j"},"signature":"4wBIpeLwh5UnI3d0PCdQdJHZaVeJkuMikeSC3ckbYxpvF1looVzBpYZFGpbh/YCTVwViwZ8eutk8xT/XH/UXVQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14mu3mmmep4ek4lh6uyxv2mdg4p4s847s060ew4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["potatolh6uyxv2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AypoTI5laWSWsaVnS7rOmr17FlYoN1e0P+dlolcEvJ8j"},"signature":"j6uOBNJvY4z2ozTBZyj/tChzkDXDEzQBXgEhr/4hGHp0KIHhvjvqcj4AwSpy9/LesnlawDWzEKnCJWwP7F4ihQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14mu3mmmep4ek4lh6uyxv2mdg4p4s847s060ew4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1416","potatolh6uyxv2","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AypoTI5laWSWsaVnS7rOmr17FlYoN1e0P+dlolcEvJ8j"},"signature":"H2yrKFmHJt/vB6sSol+pm1okV7ooKgvrQkojELjrxjUK4nAbeT6YD4nXakU9PKpA5kdTJEdiz+g+thjfeQJCqA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14mu3mmmep4ek4lh6uyxv2mdg4p4s847s060ew4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1416","1","1","g14mu3mmmep4ek4lh6uyxv2mdg4p4s847s060ew4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AypoTI5laWSWsaVnS7rOmr17FlYoN1e0P+dlolcEvJ8j"},"signature":"JA2cN9UK3gCopDIIaEaCysecPLNQKLy9+fyS67e7voRcmVH705R+ngG6slnH6bcziPEzoKOTuA1QcWmBAQuo3w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1thyaf5qmjn897qt0dp55el2qnjf0gru42hsvu0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"IOBnpNWUSfOUhlcsdmsTtv31yqcD7saC3il0KZncuzx9F/Tyy7OI9Q+1wYW/pVRSM/v7p6/Y+qOaqPlAXypP9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1thyaf5qmjn897qt0dp55el2qnjf0gru42hsvu0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","usualqt0dp55e",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6ngOkWgsBhVkHn4ZeDylllaJ9pvDMqsAL+c4SKzVxv6"},"signature":"Wip+SP0lIMYBdgRLY9t/hg5P8rpFDD4cwyPjJooVOglC5U53TdaquFbe6Gby/++gsR0A4P3ec0HdI16l1umFXQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1thyaf5qmjn897qt0dp55el2qnjf0gru42hsvu0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["usualqt0dp55e"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6ngOkWgsBhVkHn4ZeDylllaJ9pvDMqsAL+c4SKzVxv6"},"signature":"fQEAhXjRe3BGHAOhUeBB3kgQZfOq5JYVTpvbY6KI4bwiyCMPgDJzJG1NKbg85lo2Eo9rU1xBsFTnJJPnt0YAcg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1thyaf5qmjn897qt0dp55el2qnjf0gru42hsvu0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1417","usualqt0dp55e","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6ngOkWgsBhVkHn4ZeDylllaJ9pvDMqsAL+c4SKzVxv6"},"signature":"dWLHl9cwFk/K2ejI/aAH0h/u8nnIXFBGBAGG5vW7NiwSZ4HfoktAac4yxQSnUe/r9JlRCSZqV3qEsJzdYXNbMQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1thyaf5qmjn897qt0dp55el2qnjf0gru42hsvu0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1417","1","1","g1thyaf5qmjn897qt0dp55el2qnjf0gru42hsvu0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6ngOkWgsBhVkHn4ZeDylllaJ9pvDMqsAL+c4SKzVxv6"},"signature":"JQUpd08bS4ooXShSSYb+KQYvLJlm5WYZ5fPToA0szfEBcwm1o+UssPIHUHEEHzEmC+nvZpEKEmrsXn5y0mUtbA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fqeu4mq780nkxndt9wa6h66u0hs2tcwnh48gmf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"DqoO9tTiY8pR9WQpmuooCfANd+uh+rKTonJggRxntIM+yCpOq4eWAA+ujeDO+jYX9Ivgkewh/NkbdcZPUSNjmA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fqeu4mq780nkxndt9wa6h66u0hs2tcwnh48gmf","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","cheapndt9wa6h",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgCPxI3uGYPoaLMib40hOx8IJkxPftyg0IKbGJ9brQ0k"},"signature":"UFT0MIdTDF6Oy5BgqS6btPXtpCmwg0cBAeSWmmNPPQBiQitGccJFLHwRKxTf7aMuf+PIkEb4eDEyO439T59UMA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fqeu4mq780nkxndt9wa6h66u0hs2tcwnh48gmf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["cheapndt9wa6h"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgCPxI3uGYPoaLMib40hOx8IJkxPftyg0IKbGJ9brQ0k"},"signature":"K8B1QHO9iJyQ6w3ujbaFDbb3Aw1P8FImtTLMs6Bd9OMj6eKQQp/Ejr45/LgzXVKhgD1QcmXErYntJFk8iLfCNw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fqeu4mq780nkxndt9wa6h66u0hs2tcwnh48gmf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1418","cheapndt9wa6h","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgCPxI3uGYPoaLMib40hOx8IJkxPftyg0IKbGJ9brQ0k"},"signature":"RtZ2il4Pb6CDxekjd8z+LBjoEAYgK0hL+7frC0y2U6J26pQDj+DKPQkVLoXpVXUVUV/y+estCFm9l1xlaAUX0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fqeu4mq780nkxndt9wa6h66u0hs2tcwnh48gmf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1418","1","1","g1fqeu4mq780nkxndt9wa6h66u0hs2tcwnh48gmf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgCPxI3uGYPoaLMib40hOx8IJkxPftyg0IKbGJ9brQ0k"},"signature":"QpiIncHKQ9sqCw9msb8brx2gjlhSW5ZIvd6mOtuPfzQQoRWeYtel3w2fCTxfh4Rk+S0l7rd0ScX7ijKZqT+UhA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lsh9s0lzprysc8cm32tvkrq3u47s9xa7lc8c5h","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Tx06x1gG86Nc8PL6g7sEW7mYt72Rt1J07ZQCVtBDCnQbuqOYoZdN3lpcAgSK/MzLo2xvTjVCj0N+9w3RxL0tmQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lsh9s0lzprysc8cm32tvkrq3u47s9xa7lc8c5h","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","armed8cm32tvk",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtHjEMQ9AMCRsbxq0McFlEeD9X8pJ1Ouk5EWuVq5mKLU"},"signature":"y1p0OPdvs60rKycHnNXM/FCb+CVavKpdcHP2TNTUeY0oAhgrIWPWvx/3sEjfNncC6id5qDU/k/rOoPqhpV27Jg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lsh9s0lzprysc8cm32tvkrq3u47s9xa7lc8c5h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["armed8cm32tvk"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtHjEMQ9AMCRsbxq0McFlEeD9X8pJ1Ouk5EWuVq5mKLU"},"signature":"EgBzJbNDr9TSxtBQLYsl/jgYlkWeYPZCMH5XcL/bFjANPZy5uB6wP8pLKV5svmJc3CY4p9w9QVyuhxl+yiwfMg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lsh9s0lzprysc8cm32tvkrq3u47s9xa7lc8c5h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1419","armed8cm32tvk","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtHjEMQ9AMCRsbxq0McFlEeD9X8pJ1Ouk5EWuVq5mKLU"},"signature":"xcSS4SB8rqCN/8IFgX4WmsZ8oQGIZzkliTDZKSfoTFIPIFr/FsfYtsYAG2i4O1vgdTx99/z6paNukItWbsXbsg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lsh9s0lzprysc8cm32tvkrq3u47s9xa7lc8c5h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1419","1","1","g1lsh9s0lzprysc8cm32tvkrq3u47s9xa7lc8c5h"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtHjEMQ9AMCRsbxq0McFlEeD9X8pJ1Ouk5EWuVq5mKLU"},"signature":"Q0/BYtStryAUnje/y132icY5/qWg1XVVMhbAwS3v7j4awrcpVMSBl+2UsTQM/DshbvoNvRx0tD/ie467XBOp5A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jln99ypww5hudkr9gzfqlggd3j4mxl07qgmm3k","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"5Jae3PV8aY2wNfq3H646UsBlQpjyUlniuwwp8EJvrL4pkgfz3RMi7R0tiD9laGV9ee6yIRYTPjw+Cj/M80zABQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jln99ypww5hudkr9gzfqlggd3j4mxl07qgmm3k","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","issuekr9gzfql",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A72LgDgO9juajD2qzWRmQb9YYcjiM1oCW1M/Z5fxZt1q"},"signature":"UQAdoP1oZ4p/h+mWiWw62JQCdIV0rtT03xhkMyooX7gBFE+kRNkHNbmUmt5te0CB6jJHaUACfJU6aos/PB0Wbg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jln99ypww5hudkr9gzfqlggd3j4mxl07qgmm3k","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["issuekr9gzfql"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A72LgDgO9juajD2qzWRmQb9YYcjiM1oCW1M/Z5fxZt1q"},"signature":"DYmSj/rct0iwRQdtIINKHEAJMYnW5j4tfInn5VnnrR8frH4YM2kV7x+6p1J+urGzW0etO/5X6EPSkuDmBeHhrg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jln99ypww5hudkr9gzfqlggd3j4mxl07qgmm3k","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1420","issuekr9gzfql","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A72LgDgO9juajD2qzWRmQb9YYcjiM1oCW1M/Z5fxZt1q"},"signature":"RrtMOmGAIgVaSHBM4hfYvpyv5FOdVDHWbAbQzNR6UIwB1D3OiYYCd8T1wU6iOfZkwIsTU1SPPCdkLTfy7xmZ3A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jln99ypww5hudkr9gzfqlggd3j4mxl07qgmm3k","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1420","1","1","g1jln99ypww5hudkr9gzfqlggd3j4mxl07qgmm3k"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A72LgDgO9juajD2qzWRmQb9YYcjiM1oCW1M/Z5fxZt1q"},"signature":"ifbIdoHN+LWfJGyjgD8SgvmPzbrr2zcdY6IXMghVMc14+NTfIkqLKGKeRFbh7TPAdxkATL1b+uJUJDTZzc2S/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1yed5wpssypyjljga0vep04cemex8k0hhfyyt6r","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"RKoghnKsOru3ehLHfn/DeyphyyJZAMdpLfGPcKiashV6am7tkPEEp4cxGpuOOGhMG20FRgf95MPevb+FpOi2dw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yed5wpssypyjljga0vep04cemex8k0hhfyyt6r","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","hybridjga0vep0",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AovEuiVUDtYqo0x7g/wAwet2DXquIcP8iCQPQc8ldOXn"},"signature":"3J4fW/fhTDYfS42bPYWpwTdKCNA5aw8rX7SpSbmhmt0/2874FWb+sdtqJA06hl5G2jCMqRXaQJ1+rlUa5+6Nqw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yed5wpssypyjljga0vep04cemex8k0hhfyyt6r","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["hybridjga0vep0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AovEuiVUDtYqo0x7g/wAwet2DXquIcP8iCQPQc8ldOXn"},"signature":"6vnY4G7DhIwChDW2aVDNYkEinBzGBqhIWfzqsHilUHIuELnjfdllIi+Psl2QNjhIDgg2AAGeMg/uW7KrDJDjQg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yed5wpssypyjljga0vep04cemex8k0hhfyyt6r","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1421","hybridjga0vep0","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AovEuiVUDtYqo0x7g/wAwet2DXquIcP8iCQPQc8ldOXn"},"signature":"lH187o2MvHBX5T7Qu7zYguagNDWNgCPSKJFI23dlDdwf6wSPamXDkS9lRSCKlPaoM3Cy5YfGrsnJQRQY7xMOuw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yed5wpssypyjljga0vep04cemex8k0hhfyyt6r","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1421","1","1","g1yed5wpssypyjljga0vep04cemex8k0hhfyyt6r"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AovEuiVUDtYqo0x7g/wAwet2DXquIcP8iCQPQc8ldOXn"},"signature":"MF2KDbtwYfweAjYsWEzxXkd8j1hWK5asTZLmEg1nOkF0bM6XH74o6VHCnJYPwM+9QErZvW9FoiNswAjjmDutkw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1r0fspfex2uz3vt4v4w0xr485jtsnqlu3sws469","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Y98BBaZHrF3T0T7DktrCvWf8AAtfphhQw9pI4iST4hVYmsvN7QLyphpoURtiaVmv25FXuQ2F6qsZefuLfyfJrw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1r0fspfex2uz3vt4v4w0xr485jtsnqlu3sws469","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","tellt4v4w0xr",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtKfzNr7ML6pxu6yGJeBPS4GVEvtD2RlXYmlUXD92bDR"},"signature":"Dt8AcNIb7YD1ZUjLggMd0U1tlwK+HY/lA4FOHpXBGxxYU+4Qo8h1Tb18AwpxSj6tFTWqeOHE4WpyPMGDLmD9Wg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1r0fspfex2uz3vt4v4w0xr485jtsnqlu3sws469","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["tellt4v4w0xr"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtKfzNr7ML6pxu6yGJeBPS4GVEvtD2RlXYmlUXD92bDR"},"signature":"mPfhQdH8HtTG+llfYee1bwqMYO+MW888QWhFgQccFsca3z/56jdV6xx35JWV1Xf2UCfpm6V3sBXyORvOXktgGA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1r0fspfex2uz3vt4v4w0xr485jtsnqlu3sws469","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1422","tellt4v4w0xr","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtKfzNr7ML6pxu6yGJeBPS4GVEvtD2RlXYmlUXD92bDR"},"signature":"p1GyZ/N3NdLJ+NhAqSyPSPZzE3xvwrbSPi3bPI8gd1QlLVsSH52AzcTyLfaCvfc9CRlIPm4SFWbScG1aiwL1vw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1r0fspfex2uz3vt4v4w0xr485jtsnqlu3sws469","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1422","1","1","g1r0fspfex2uz3vt4v4w0xr485jtsnqlu3sws469"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtKfzNr7ML6pxu6yGJeBPS4GVEvtD2RlXYmlUXD92bDR"},"signature":"yvkvaGWjkh358ODvho+JFNdnA4zB4WKQ9PRTnDGVm30bRTCUE7QqimxjJvtEmYgx779vL6CzkL1FpbT7h9tHDg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1uwthkfgj7wnwlscf9eayhp287r3nk25wy0ufkt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"MhuhFrDWCfPTAN45qtsx4JmEBQwUptjIoCc5GUtYTDdwE/UKFyTyv/04O9W47tpj+c3Z8+nyA/gns+dqyE5hyQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uwthkfgj7wnwlscf9eayhp287r3nk25wy0ufkt","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","fencescf9eayh",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkHQFRS67evwgfDMj9QD1P6kQ6/jJ6giDL6hgYbg/LDw"},"signature":"NkNOdwZ8tjLdB0s9H99Z3TZGV81NdUnPtI7TFw/wQV9stRpeE220hth1pWKWSnmWfkIqv/AFAjiaeHovkZZ/3w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uwthkfgj7wnwlscf9eayhp287r3nk25wy0ufkt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["fencescf9eayh"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkHQFRS67evwgfDMj9QD1P6kQ6/jJ6giDL6hgYbg/LDw"},"signature":"Q8jaMJ99dL1UV6zbr3pxKiRjubIgjDt4xvhgxBQiPZlqAqpwE8qEGIVRD30WwKvd53/ry9af8SIMbQPz/WUPOA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uwthkfgj7wnwlscf9eayhp287r3nk25wy0ufkt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1423","fencescf9eayh","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkHQFRS67evwgfDMj9QD1P6kQ6/jJ6giDL6hgYbg/LDw"},"signature":"HlJ3T50mCWb4g/TacD420DRz5/+Yb2W/fdDG7j3R7qwbi/nWLPr1uvv1YrUrbq6UWN9PtxFPKRB0Un0h6HoDAg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uwthkfgj7wnwlscf9eayhp287r3nk25wy0ufkt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1423","1","1","g1uwthkfgj7wnwlscf9eayhp287r3nk25wy0ufkt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkHQFRS67evwgfDMj9QD1P6kQ6/jJ6giDL6hgYbg/LDw"},"signature":"w8n9PImkpkNw4pyVcqpMXx1QzIeji3AdFFPmgQ1WiBshD+FBbGF9Znak59dnFC9+zfTcJTWbV6sVgf2dzI+1+A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1sa62untt76y5ke86899h5y7vwkjxhen3ydylew","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"QE+b/fq6qZJZ7TSeDdYHY1wCcXswhvwc1Zjh8Xcqn3gs96oAlJI8FtDWzz05KXxU8waLNhacX+isbULhsKSKVw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sa62untt76y5ke86899h5y7vwkjxhen3ydylew","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","employe86899h5",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhfHpOI/3z19UhIOEYCFgNx0ilprVl2Uq5zXR+mBLy/s"},"signature":"WcSD3I43xxQlPbwB+TC37H3Tq8X9Lw0u00V8Dy3xIbABPUOwwgj2hih7+B2xV2WQTjvkUriDHWX+E9PPq17L8A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sa62untt76y5ke86899h5y7vwkjxhen3ydylew","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["employe86899h5"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhfHpOI/3z19UhIOEYCFgNx0ilprVl2Uq5zXR+mBLy/s"},"signature":"NcLj3fWDC8noHxjyXdMq+We5BEvooRnRH8f6BwJTlVALjYvvtcg0lLc6XrwCGKNjAAfotNssEwx0a7fHYyeChA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sa62untt76y5ke86899h5y7vwkjxhen3ydylew","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1424","employe86899h5","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhfHpOI/3z19UhIOEYCFgNx0ilprVl2Uq5zXR+mBLy/s"},"signature":"7yl190ed4/hpFe3wWW20neK1yR+KPuNyq09vhhRMc/h3Um1GWkwGm51hPJYZddUYIunnhB9dD1OCI6u70SCE1Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sa62untt76y5ke86899h5y7vwkjxhen3ydylew","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1424","1","1","g1sa62untt76y5ke86899h5y7vwkjxhen3ydylew"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhfHpOI/3z19UhIOEYCFgNx0ilprVl2Uq5zXR+mBLy/s"},"signature":"KgHO9rQI/ErkzLEARm40QzjVq2YR45Tjk8kjXpqRXEAtggJYBmg/UR93RW4Lkp1um6DRCPpXLDNygmfND10P+g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1mpw2cem8zuqj792v4qy9q9yjg8qh203c8y7ll2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"guiuVkN+n7XO/g7lvpcH+WhMAmhKgbG2yLkmQVb0KQ0N3gA/D4BUxQzlrwyeYA1XgLbgXGxqx5epAcBHsbAOOw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mpw2cem8zuqj792v4qy9q9yjg8qh203c8y7ll2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","trick92v4qy9q",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Awn9k3YwhRI9oqVn5/Kr8yGjYgITEEcRLerA3ic6/3zK"},"signature":"QMl77blALGmtH5sun9FHW+Dqyep7pOPcY/gjRTC9E7pKe+Ti7GWqte4+3JZvYQdI+L+iom/kXO0Jb8iYbBZKmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mpw2cem8zuqj792v4qy9q9yjg8qh203c8y7ll2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["trick92v4qy9q"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Awn9k3YwhRI9oqVn5/Kr8yGjYgITEEcRLerA3ic6/3zK"},"signature":"Q4m9o/5whtkLlhizUCwiZFybb3LBsC7VSqNvLwV87coGOJRgMUk9zzpJpq7+R7ItjW3EWRTejE1TVQJqyhGRBQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mpw2cem8zuqj792v4qy9q9yjg8qh203c8y7ll2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1425","trick92v4qy9q","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Awn9k3YwhRI9oqVn5/Kr8yGjYgITEEcRLerA3ic6/3zK"},"signature":"EFJ/mOOr9HiYWtGMuzpEN2Fn2mDrwhXMi8JmRPxJhaBjxjFjjZmW0toM03kYdLfnaTCovnDTHIyeafHUc8eIeQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mpw2cem8zuqj792v4qy9q9yjg8qh203c8y7ll2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1425","1","1","g1mpw2cem8zuqj792v4qy9q9yjg8qh203c8y7ll2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Awn9k3YwhRI9oqVn5/Kr8yGjYgITEEcRLerA3ic6/3zK"},"signature":"zl6dfHc+8GYB6fiKlYY+sAaBDYnvcEqGnpwSxt0/8MlQSJPpGOT40LBrTVHy8hto6p4+4KlvrFdL9zZ05uqzAA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1623qrseulq2scraxr7m736kmnmp2p54nl5anth","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ii0kiZQFH2RqeQzTn6CyMzKBu95nN/Wn/gCvNiI2FywTrga2dML2Y3a1zF7zAd8wIZrBtZwOmmdQdm/tdr+SBw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1623qrseulq2scraxr7m736kmnmp2p54nl5anth","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","fograxr7m73",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiEgr2dspYEAH2pW7/hGpVlFs3dOr+gdV2uKElar1toE"},"signature":"kKDuL1XGYp2RE3YapDgbuIemcD+c0UhLb/S//mInXwdEehVIaiBLTaOZiEzrYptEHai37auwISgN6j+QrCe+cw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1623qrseulq2scraxr7m736kmnmp2p54nl5anth","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["fograxr7m73"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiEgr2dspYEAH2pW7/hGpVlFs3dOr+gdV2uKElar1toE"},"signature":"tRVWAt0OaNc891ESDkbwEDub/enFlQ8GvfwYE5rHCYxnC32VzyBsylh/J5pkEMWeY+taK/emO206+nsdhY98OQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1623qrseulq2scraxr7m736kmnmp2p54nl5anth","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1426","fograxr7m73","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiEgr2dspYEAH2pW7/hGpVlFs3dOr+gdV2uKElar1toE"},"signature":"9vSDdnEI/wDY3GRx80pSbRdnmPZ/0bjsvZKq6n9mfQgjrVl+8NUjrFlgvi34grR+E3Yuc6keBlDXSwg4HbC3xQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1623qrseulq2scraxr7m736kmnmp2p54nl5anth","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1426","1","1","g1623qrseulq2scraxr7m736kmnmp2p54nl5anth"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiEgr2dspYEAH2pW7/hGpVlFs3dOr+gdV2uKElar1toE"},"signature":"fjg/sDX03gCGBGng1zS2aaKf4hMPQiAP19QrLBfOPvNBY2UcyqOBiVdUZxSs2o0SN6ACQwUvfijtNirj6LKBpA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vkc5z5tehr73080tnvln6nk89fjdl4hre4w9sw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"xXpFj9z2W36lwilPhWg4ZxPtTfKoc/yY+pzrrhVtTKE+Grwrgi1Oxlsmfv0KgSNiUxnl2ehskKKvN0GEH398Fw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vkc5z5tehr73080tnvln6nk89fjdl4hre4w9sw","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","life80tnvln6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5cB6KFwkWjh2S0Zk8md+iKLBfTt3iGMCpzjgovhevsT"},"signature":"yRflyU5A283K5+8fIvIXT3OigJBe3FOdeJgaQQ0lmWo+DxSQ+BTImYwCVVJz63Qv2I0ERwsmkZMPeWUAaKK2+A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vkc5z5tehr73080tnvln6nk89fjdl4hre4w9sw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["life80tnvln6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5cB6KFwkWjh2S0Zk8md+iKLBfTt3iGMCpzjgovhevsT"},"signature":"d03x2BChgTCwFsxxjOvqiyo+GMui7qpw5A5rhz72ZOgFLEJOPE2qg21PeSp2d57XJRWAT99fhLUxXxkimeKkGA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vkc5z5tehr73080tnvln6nk89fjdl4hre4w9sw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1427","life80tnvln6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5cB6KFwkWjh2S0Zk8md+iKLBfTt3iGMCpzjgovhevsT"},"signature":"g/q9QTE52Wp2Tn9Jf0mQidCjUSle062LYY38tyr3LFJ2ew9Of2iqpgjHe4zyMZ8b/SjC4tfkXzMAfbE3hw9M5w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vkc5z5tehr73080tnvln6nk89fjdl4hre4w9sw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1427","1","1","g1vkc5z5tehr73080tnvln6nk89fjdl4hre4w9sw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5cB6KFwkWjh2S0Zk8md+iKLBfTt3iGMCpzjgovhevsT"},"signature":"4orUieQeDxSJhs/nouVuKe9frJ7yEaP45Pp2+OsWYv9jy1y+ZPn/TlCCdhygtGkvC0thn2s1AIC4I8bILbveOw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gj57jqnwtha8ee30eq3py6mr5g4ms43qjx7wp6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"XGUBSO+WgDyqjef8ZwaonGCMjiBtuqBGaSsFs9IRQdIOir6jt7/KrTOloBjTLJ+p59azZw+Gn7He8q9x6A9T0w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gj57jqnwtha8ee30eq3py6mr5g4ms43qjx7wp6","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","luxurye30eq3py",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyJFJzG3WvO73Sqac+sHVfpxwlgT2GaU2f9aeyQkLCN4"},"signature":"KLRTkKcOKDHg+cm44nzIKCLz1odzj2E1+sFskjLHkLwrtEExnWMacKL8J3GpxBttR1OWTBbskoJ/tXzxaWUzdA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gj57jqnwtha8ee30eq3py6mr5g4ms43qjx7wp6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["luxurye30eq3py"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyJFJzG3WvO73Sqac+sHVfpxwlgT2GaU2f9aeyQkLCN4"},"signature":"xLOVohHmU2wan6BH4Ffz3R6nvYMycHXPRUbE+J+RGi50YQUkDD09tt4yZ83FJOJG/IOBfl29hkbeHdvilIxmoQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gj57jqnwtha8ee30eq3py6mr5g4ms43qjx7wp6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1428","luxurye30eq3py","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyJFJzG3WvO73Sqac+sHVfpxwlgT2GaU2f9aeyQkLCN4"},"signature":"HGdkNdsC4NxS2F1AkioxvmBwHZP28KVdyGUbXXx2wkxJrNVfGXLNgL9q6DOcOqE6WfB729m7ryzsmJZ9T7SM9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gj57jqnwtha8ee30eq3py6mr5g4ms43qjx7wp6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1428","1","1","g1gj57jqnwtha8ee30eq3py6mr5g4ms43qjx7wp6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyJFJzG3WvO73Sqac+sHVfpxwlgT2GaU2f9aeyQkLCN4"},"signature":"DUqjsX34V5ro7VEo0ROQvfqSeWmkISA6Mly0zlnniz8VwPYy/lJ06A2WLwNbFfTFv6x0cBDDHQOCEqbkxK+wrQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19dwwxapnxxlqr274jk6rrcwk2wtrrhkl0jag2j","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"1lrY5t99X4I/varQD0pByNSOtyUqlPAenBXchjRxhKY7iqMQjQjrca6nhjM5riYktGf91tn+c/uXgenZsORJeg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19dwwxapnxxlqr274jk6rrcwk2wtrrhkl0jag2j","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","poem274jk6rr",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqJlRatlU5nOOD+eGFLomDmJO8KBnah7XaAiDDw6o59O"},"signature":"ciU20rDwKbK6UrJ/9kGCf9htxOsqdiqwlM9BzMrZmB0Bk5X6UR6ovQZaKa/5L3rDDux2ItfHL8pFFsmtYSwAPg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19dwwxapnxxlqr274jk6rrcwk2wtrrhkl0jag2j","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["poem274jk6rr"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqJlRatlU5nOOD+eGFLomDmJO8KBnah7XaAiDDw6o59O"},"signature":"At7pQy/caH2s9ryND35wH2G6E1jiuLC3vqQ6Awpmv+NLPeOCXdQNbawCqz/jdUugIE/WMrG/jN7MOLSJcxVNbg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19dwwxapnxxlqr274jk6rrcwk2wtrrhkl0jag2j","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1429","poem274jk6rr","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqJlRatlU5nOOD+eGFLomDmJO8KBnah7XaAiDDw6o59O"},"signature":"Eis6EvL/DTQ5rfVTwtL+dqac8inq8kIhfK3AYEZIR1YItBr7+QuHa2U5otvDPZ7hs+xNpv/AGXeaxIFoNCORKw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19dwwxapnxxlqr274jk6rrcwk2wtrrhkl0jag2j","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1429","1","1","g19dwwxapnxxlqr274jk6rrcwk2wtrrhkl0jag2j"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqJlRatlU5nOOD+eGFLomDmJO8KBnah7XaAiDDw6o59O"},"signature":"z3x+ryEiFw95v8sghrhwoHcH8aoSquwa2AlsUmwCpqRQlR4VvOHH51tUOQlgm1RuFpSdMez6K8wDUWaVklRovA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19ge5arauesjqndm875x3hv93krl8ny5f73u67e","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"EoxGpMbywzyVSI61GdHYJiKMErXerOd1XRsUt+xS9UAGG1/sAHZnE2yih7XG93WxpyZruhhykLGEfwaQPdvHSg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19ge5arauesjqndm875x3hv93krl8ny5f73u67e","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mountaindm875x3h",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3gR1wakAk4xmHidnHPv6KpNQ7oflq8wDwTvzYvOTjlA"},"signature":"BqFC54wS94v5+RhYGWxKk4JF0wcm8S0t/yLR4enPVNQs23pL3Zq/IIqSzFmhRIVwZ4cKgPxNOHKH/c5S7rzdUA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19ge5arauesjqndm875x3hv93krl8ny5f73u67e","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["mountaindm875x3h"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3gR1wakAk4xmHidnHPv6KpNQ7oflq8wDwTvzYvOTjlA"},"signature":"wIyZolT9D5oyMM136fTPeKfBB/uKMh3Ef8W1muoS2lp3qvGH4IXoJvxL78vOYeLivc7FzSBD9zUgbO0aKv3zTw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19ge5arauesjqndm875x3hv93krl8ny5f73u67e","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1430","mountaindm875x3h","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3gR1wakAk4xmHidnHPv6KpNQ7oflq8wDwTvzYvOTjlA"},"signature":"lmm4WWYIMpj6NxhOb+Yc2FjsF90FAOrtJeolzACuBYQMe02c/xWoIBY8zPo7x4ARBEseKRaeZd0MsiLiDt+TPA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19ge5arauesjqndm875x3hv93krl8ny5f73u67e","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1430","1","1","g19ge5arauesjqndm875x3hv93krl8ny5f73u67e"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3gR1wakAk4xmHidnHPv6KpNQ7oflq8wDwTvzYvOTjlA"},"signature":"v5QNd8scvydXMCEmxrZilyEIy7hfgIaIJ2dnVU1Xv5BO/WRFSS84RyvgattVkI047RvY1U2FWYnB2IXf3QtmYw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1397rx6s6x2pdw2flckyv9nu5vh4gx6l52fkahf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"W+mVOOqZzMdtoMEpiWqRo1LwPjdvSuRv3qGxkl88zG0ewE3csYAE3zvIt/huMCMMAHyPAyADUDt4dW98vuBrzQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1397rx6s6x2pdw2flckyv9nu5vh4gx6l52fkahf","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","crunch2flckyv9",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwHqhq0zAM6R7dqijpYHx1rJsXubb5yrEIdwY6ra6OaQ"},"signature":"0ORTDTPFdGXtqKFtaRJ++lUbf6Zr5gHgd6rvhGgQ4vRLwyVvi0Up13A8QvwRsRGRtffP++cvd0prgQ17tBPIlQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1397rx6s6x2pdw2flckyv9nu5vh4gx6l52fkahf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["crunch2flckyv9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwHqhq0zAM6R7dqijpYHx1rJsXubb5yrEIdwY6ra6OaQ"},"signature":"XgWX/JYIGLcdh4vUipD27uMhktqu23FMbUgnxzVGSqU1yFDLiVTNSe42WQD4ZnrqAg30syGb+yRfKpMxLuXGpg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1397rx6s6x2pdw2flckyv9nu5vh4gx6l52fkahf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1431","crunch2flckyv9","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwHqhq0zAM6R7dqijpYHx1rJsXubb5yrEIdwY6ra6OaQ"},"signature":"QE1Grp2qNwGSWgESsUM26lf+oYqR11QEs0iGLnxaMAkmmyzCa3R9SL48VzsXvJioLAm3nAC1lBSKmJFDcs4SqQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1397rx6s6x2pdw2flckyv9nu5vh4gx6l52fkahf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1431","1","1","g1397rx6s6x2pdw2flckyv9nu5vh4gx6l52fkahf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwHqhq0zAM6R7dqijpYHx1rJsXubb5yrEIdwY6ra6OaQ"},"signature":"XKs0PP2z+BuvPypPyplVyWnpMirdOx2eRCntRCa7aq8wsiAQ6L9y8vC0pN+kQrSDRYClvF7wtOWv6XVCN73JGA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1a685mej30nlmyacw0glf4ljmrg2055p6ststm9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"cQdghKdxRiBNIvyUmpny//C+ZxkK6I1XRVO1ngwGn51lW8f4Iq+RygpEkDb/XXYbeQnXNz7XSp9z1cXl/vp2dQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a685mej30nlmyacw0glf4ljmrg2055p6ststm9","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","busacw0glf4",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A007By4W8HerH1rWbc6yn45xlGuX/8M3FTxh2R65fszI"},"signature":"pVMlJVgfhAVc1rP3M7Oz4IXy8di6CDSXX+EVuX4sir8mKoilzbU5qyS2y1POhuDX5NLdvCTJ2MqfqyKYQP8JLw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a685mej30nlmyacw0glf4ljmrg2055p6ststm9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["busacw0glf4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A007By4W8HerH1rWbc6yn45xlGuX/8M3FTxh2R65fszI"},"signature":"qW4hdoCoZD0oYZgLFO0R2IrdUGSWbC+roxbKZRXcyppzbmlgfFs0O0sbxcwfiPicVvzwUF8YYxLiggixrsnxAw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a685mej30nlmyacw0glf4ljmrg2055p6ststm9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1432","busacw0glf4","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A007By4W8HerH1rWbc6yn45xlGuX/8M3FTxh2R65fszI"},"signature":"Fy9McPvJrDNA/sYG+42ySNteP00veNKuPsIZ67IRIKwi9F0Xm0U97A6ju5fGhhW9TPWsenn8FbBObVNGKZJqEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a685mej30nlmyacw0glf4ljmrg2055p6ststm9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1432","1","1","g1a685mej30nlmyacw0glf4ljmrg2055p6ststm9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A007By4W8HerH1rWbc6yn45xlGuX/8M3FTxh2R65fszI"},"signature":"eCjg35DBikWsCft+enfn7BypyqpgWktDMVjnUtwqqK4DyhzowIWoCesnqVCWFPxnhEUOnFf+OVbRuGzK9/WL5Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16tagax82sxmsq36cn3jgfzwkkdy8nwawhx2y94","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"b/b5yWKWUAr2GjgnbK8MfG7P3MVV+rOoJJht1/LsL2NHAerxquOEX69pS+EGvCrsbAgs7fbZggXkJGe2c3TDwg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16tagax82sxmsq36cn3jgfzwkkdy8nwawhx2y94","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","nose36cn3jgf",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkbT1KsR5Ra9YFKfEvEmsafpb+goEBqJZx/Kp0XfiY5F"},"signature":"aIgtfceDgBt22y8JBXZNJaxo6KT8t5C2SBV+D72WueEAmDZd8k78IZKtHy275iH02I/29m64qGmx52bL/h5qQA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16tagax82sxmsq36cn3jgfzwkkdy8nwawhx2y94","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["nose36cn3jgf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkbT1KsR5Ra9YFKfEvEmsafpb+goEBqJZx/Kp0XfiY5F"},"signature":"L8CmxXYj2YYKbwxlcfGFT33BpZhQ/8AmAhOJYyiG1gRPcNo6SKiaUeSEzHDQF/h2V8Kg6NXtKibR03yrE6WQlw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16tagax82sxmsq36cn3jgfzwkkdy8nwawhx2y94","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1433","nose36cn3jgf","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkbT1KsR5Ra9YFKfEvEmsafpb+goEBqJZx/Kp0XfiY5F"},"signature":"C9cCGW/Oe/reKT2p4PK7vf28FWOwTC2YSE68kC6q+/5oTkj4Lo06F1A97amW6eOkd34pitjo/sfHwxbIAib4Zw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16tagax82sxmsq36cn3jgfzwkkdy8nwawhx2y94","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1433","1","1","g16tagax82sxmsq36cn3jgfzwkkdy8nwawhx2y94"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkbT1KsR5Ra9YFKfEvEmsafpb+goEBqJZx/Kp0XfiY5F"},"signature":"ffn1VbPUVm/U7gSR85bEnOa0VHmM2belyFyph3qMAYRtzUnYH8PAnA+56ZPWkm3JqOR8pStA732yy1atX0Zn+w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1yexl6mu86lhfglr0dxagwq3ngef6ksl2n7chzc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"7OxzjDOedpwqV1Qnmo6U0h9OG8XlAdcXfkajR9TL8eADXF9hdo7GI89YJQ9I2Dbl10YVphwLg11T0dwTlqIsBQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yexl6mu86lhfglr0dxagwq3ngef6ksl2n7chzc","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","welcomelr0dxagw",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8YAjrclc5g5/JZb+Q64tA7bkyBzwTlFX+ZzdX5v4I2M"},"signature":"Lty5qtf5XwkRrU/eNHahdtxz+B0BaJjv7nd7P+lZC9U68aP81zPo5OoMSE20eTcyRNFi660V53grIMYvrpfwTA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yexl6mu86lhfglr0dxagwq3ngef6ksl2n7chzc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["welcomelr0dxagw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8YAjrclc5g5/JZb+Q64tA7bkyBzwTlFX+ZzdX5v4I2M"},"signature":"JL72yOhfcP5zqwD5yI8lIZ3+BRkLGUACVY5C711UzLAfIu3c9BbPj5YTb6UcYeAHgwYcXFspWj/sruecsSVR0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yexl6mu86lhfglr0dxagwq3ngef6ksl2n7chzc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1434","welcomelr0dxagw","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8YAjrclc5g5/JZb+Q64tA7bkyBzwTlFX+ZzdX5v4I2M"},"signature":"DHyMsBOJLT02qGqB+NHmEg1nHJfClC0C/w7PiLiwevRblnYShhS+8Wy4Ie9xwSpktIosjTd+8OfWnGQLTYfSUg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yexl6mu86lhfglr0dxagwq3ngef6ksl2n7chzc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1434","1","1","g1yexl6mu86lhfglr0dxagwq3ngef6ksl2n7chzc"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8YAjrclc5g5/JZb+Q64tA7bkyBzwTlFX+ZzdX5v4I2M"},"signature":"goYKlWfZfvokIQJfZJ4n+Rdj4pzyB/XSX5vv+efUpO0gEosxzKlRVD5WTfb404LRExFDENHqCYflp4j+CzW/xA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14s6m09agw8c3jnxyhwe8u2r4jm8kzxduf8ukgg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"1HM6ViOXbhyERMWy02Z+86ph4bUUceNm6RVEEisVviUYSDhBp2REL56EpKpNmdzHNg696ZNbp3KDZsK1FMx0mQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14s6m09agw8c3jnxyhwe8u2r4jm8kzxduf8ukgg","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","layernxyhwe8u",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmToVyzVXF7VKvK7DhMBtBnWVpI4wW3MqK4sGzz56g3Q"},"signature":"C6RyYybGIE7FkRnDq/upV+Vyrl9CKLGi01HV59g57hJuyCa8iZxNN4E+/z2xkdbpT4anC48aJSAhIiFZ9sA8Wg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14s6m09agw8c3jnxyhwe8u2r4jm8kzxduf8ukgg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["layernxyhwe8u"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmToVyzVXF7VKvK7DhMBtBnWVpI4wW3MqK4sGzz56g3Q"},"signature":"VxF72Ty0BFe52C5UqcEPkWpqt7ije10mf20a+u+6gHA28RwBAWuWtAGVuqNQQuYHzjk47yuX7wIQblg3FtIx4Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14s6m09agw8c3jnxyhwe8u2r4jm8kzxduf8ukgg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1435","layernxyhwe8u","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmToVyzVXF7VKvK7DhMBtBnWVpI4wW3MqK4sGzz56g3Q"},"signature":"JH48+V8SA+E9A/HdivxVsdOa+/9oedkwI+Reto/IBfsIP0DExH1hh+pX8tjEsQ9Ladkt7pMw/5dwI6pz6C3yIg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14s6m09agw8c3jnxyhwe8u2r4jm8kzxduf8ukgg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1435","1","1","g14s6m09agw8c3jnxyhwe8u2r4jm8kzxduf8ukgg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmToVyzVXF7VKvK7DhMBtBnWVpI4wW3MqK4sGzz56g3Q"},"signature":"WvCEkHlAbaMpHGov36zJIJm+fx1Syzhjlp5F5xcGa/dPtMyw0fd7yCH1XqPRUXBKrfvjIzM5bFJ9dQG1EBmbug=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hfdmg3txftc5vtvl8ap7wtmm93mpqa76aszsaq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"zU/Lg1E71JuI0tzBJ3tK0C/VAeIZ7qJ6LH6WnVJAstsJHH8ivkOJkCI3YauVujAzGhQpBnDz5W1IGaxatBHy9Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hfdmg3txftc5vtvl8ap7wtmm93mpqa76aszsaq","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","choicetvl8ap7w",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8mZ2rjRz9W6VbSOhJ5xHNU4LZOU10TRHwAvHMYdb/8z"},"signature":"juh3+6ylWFepK0afakX9346UwjurHrj2mOubHUr1hm9w+M0M10jWAUzAXmJO4FamjEUrjYivriutG694uechHw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hfdmg3txftc5vtvl8ap7wtmm93mpqa76aszsaq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["choicetvl8ap7w"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8mZ2rjRz9W6VbSOhJ5xHNU4LZOU10TRHwAvHMYdb/8z"},"signature":"zmNNv1NxYos170mOsQGladPc6hWcE5UhwDufTaXs7tsEdDg912E4uApM8lgTrx7/Qu7Q3kLR1n7Ax+e6WE4jCA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hfdmg3txftc5vtvl8ap7wtmm93mpqa76aszsaq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1436","choicetvl8ap7w","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8mZ2rjRz9W6VbSOhJ5xHNU4LZOU10TRHwAvHMYdb/8z"},"signature":"M5DKaSn1eEXWBp7mulUIpqifrNrInpLJGn6H1RiXM0A2pH+He6ov9eUxb4qqxjmrvJYVWihuYXkDOlgYkZne/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hfdmg3txftc5vtvl8ap7wtmm93mpqa76aszsaq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1436","1","1","g1hfdmg3txftc5vtvl8ap7wtmm93mpqa76aszsaq"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8mZ2rjRz9W6VbSOhJ5xHNU4LZOU10TRHwAvHMYdb/8z"},"signature":"hm2R9nlGOtMHfDo4KD1lotH2xHqf0u8y/vK59viOIrguKiCnAiqkZSwccaIJOOzaDPdtu3I+M+SlL65ERy5ajg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1m455sdw03pvl7t9a6emrg0e4h9rcf2fqrnw4wn","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"VI9+4X5Qmllv5tTceuwSsXijs6apJAlwEsORf18n48ATyeiqb25mPi1X0/lIQ78ow+gjSd6nwN0ncfVdJCSfHw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m455sdw03pvl7t9a6emrg0e4h9rcf2fqrnw4wn","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","hammert9a6emrg",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AldXIEwas5bcW0YTeWf1mktikVLHV9Y2eUtMHMS7Pntg"},"signature":"03tDNgMAVC/qwywYyxERPZZDn+rP4XJ05t8jDJycSRtYEvMtnHPr2gyLyHWhdrMah+kkBmo6R3uujYXbt43UJg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m455sdw03pvl7t9a6emrg0e4h9rcf2fqrnw4wn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["hammert9a6emrg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AldXIEwas5bcW0YTeWf1mktikVLHV9Y2eUtMHMS7Pntg"},"signature":"efCMx5H10fPgOC6NMugB/y/qafH0Yy3Cb8IlM6lVOg1p3CL/YCmNRqjv3sNMQ3PGOToxEAgkexovpaIU0cbE8A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m455sdw03pvl7t9a6emrg0e4h9rcf2fqrnw4wn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1437","hammert9a6emrg","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AldXIEwas5bcW0YTeWf1mktikVLHV9Y2eUtMHMS7Pntg"},"signature":"9eFwr2LmcTtZpBdO1ZJNrX2S0hvs0GPVZshB27LFekRyAI/PyUXCMgywuO1/rYkLJ4KyQdMy3ZDmrKVSw4TeIA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m455sdw03pvl7t9a6emrg0e4h9rcf2fqrnw4wn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1437","1","1","g1m455sdw03pvl7t9a6emrg0e4h9rcf2fqrnw4wn"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AldXIEwas5bcW0YTeWf1mktikVLHV9Y2eUtMHMS7Pntg"},"signature":"p6ubccqAMCJNuQCgfAeIzEfKbXT0wydPz/XTAunD2C4Wiy2guRHY5EmKgPUURJ4JG4p2aAn5jEYJS2OAlU5R9A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1m8cv48zpmz4fujyw83s85zr9a67yd3uhmkunn3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ti8KB+X+/ZKAqzfc96UyxCIaKgujUdazkoxzPRAdJZZCtlKVZ4RaW9nG/5I+3RChLCkUn7S4Dq5a7VYTLOknwg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m8cv48zpmz4fujyw83s85zr9a67yd3uhmkunn3","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","hamsterjyw83s85",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6iSntrRBPnSpfZkpl5naQnji+8mMkJepey/+SrNnuL4"},"signature":"ihYM9pk/o7LzE/4GpyDdmPpcS0HXhIo8qv06jaTqIKN9GoVLRIvPn2mybsavHxJbJFtpKgWzXnYegqeblks7Hg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m8cv48zpmz4fujyw83s85zr9a67yd3uhmkunn3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["hamsterjyw83s85"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6iSntrRBPnSpfZkpl5naQnji+8mMkJepey/+SrNnuL4"},"signature":"NgFFNIV/WGqoRAYl16ZLYlQjvkfxkXDW+j5QlW5Hu8tJK/VNDvsHDnu9BzppEJg8JGvkyPFSD2DMFk9YyaZ3VQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m8cv48zpmz4fujyw83s85zr9a67yd3uhmkunn3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1438","hamsterjyw83s85","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6iSntrRBPnSpfZkpl5naQnji+8mMkJepey/+SrNnuL4"},"signature":"NJypjjM6wB2A6/z9EWvao4YeD8zy+OgR7EFEZI2R7iZeGzkHEznO6rWCJtHAEkSy9wNwrvRZkpMQBRFHHFXxsw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m8cv48zpmz4fujyw83s85zr9a67yd3uhmkunn3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1438","1","1","g1m8cv48zpmz4fujyw83s85zr9a67yd3uhmkunn3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6iSntrRBPnSpfZkpl5naQnji+8mMkJepey/+SrNnuL4"},"signature":"N4LajtX192jD5SK6Qm3fAEkrIAvHtkFEMjQ8Sor+t/9mAE8ZNcnkNVHsbBYCHy0EHwh5QxcMFP2eJv5jdCfaiQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16fnj5xlpc56g2vwqp3r6fx6eugdkghmwlg3ry0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"TQhyO9Lix35gpryv4F+z0jODSg0AKWkcDIfbCFiBV5N1u1tfCJplJbatkjoW2+a+FNESY3bNawasfZGj2FHsRg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16fnj5xlpc56g2vwqp3r6fx6eugdkghmwlg3ry0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","imposevwqp3r6f",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5e4YYUUtQ/zzDn6omIfhM4f3UeCyzlrWTyKK4D6+EP1"},"signature":"K0gPJKhGcsnW4KQfiMheLkBOSKMOTSD9SkA+Sg0zghlGeW6wTrOdnsPPqTHLZ587R9jby1yzfDR3tcYUw5dr0g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16fnj5xlpc56g2vwqp3r6fx6eugdkghmwlg3ry0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["imposevwqp3r6f"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5e4YYUUtQ/zzDn6omIfhM4f3UeCyzlrWTyKK4D6+EP1"},"signature":"NXbjAMzvNx5mGUL6jhUwQIK2hqynPOI1dif5N2GMxt5+CeqqJKsOnIWEyZ2i7TEy3HY/0zRS4wsV4k+8mQXkXw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16fnj5xlpc56g2vwqp3r6fx6eugdkghmwlg3ry0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1439","imposevwqp3r6f","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5e4YYUUtQ/zzDn6omIfhM4f3UeCyzlrWTyKK4D6+EP1"},"signature":"Kg4jsNYXN1Si6Jrqsk/T/7VGmbRdk9baf93XX4Ty7GE1Dr2xwA4Np7N407BdBAnBPcRLULfIRkuRh90TN175Ag=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16fnj5xlpc56g2vwqp3r6fx6eugdkghmwlg3ry0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1439","1","1","g16fnj5xlpc56g2vwqp3r6fx6eugdkghmwlg3ry0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5e4YYUUtQ/zzDn6omIfhM4f3UeCyzlrWTyKK4D6+EP1"},"signature":"ivlGI74dh/zZ5j2ciYrvCUlsZTW2feUo4fQ1eYo6uoV+EdwPp61sf5KzWW4SrHB90+T+ODPtNVgQfqp2wH86fA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1myvvrlve2vr7sczfjf6h2mmkavuj9s0yjv6fa0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"6W5jqJJGk/J8tGlzOr7mCbZ8rUhBnKiyX0P5DTO/9f0KP1OHL+BdHY3h7L1D63m5qP1qosIl0I9l9i08qettTw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1myvvrlve2vr7sczfjf6h2mmkavuj9s0yjv6fa0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","updateczfjf6h2",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApVQB7HXbFjG9Bj6o1WJHBZ1hAXgGk/k2yioGoZn7IL/"},"signature":"R87TWoYclglsLOPZh7h4Ey0B5FXqOSnYd6BjBYes7F9ESCHlsHbtlS1+zhupnfM1Pz0o29UmxP7NQSX9DFAOXg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1myvvrlve2vr7sczfjf6h2mmkavuj9s0yjv6fa0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["updateczfjf6h2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApVQB7HXbFjG9Bj6o1WJHBZ1hAXgGk/k2yioGoZn7IL/"},"signature":"YvnpjUfxxJ+9JTc3XcooBaQ/Qd55/RNxGsYY5/1XkwtrmGh4ugEoa79F440a5HEaaYlyNpx/bNR+ra7b0yhJJw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1myvvrlve2vr7sczfjf6h2mmkavuj9s0yjv6fa0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1440","updateczfjf6h2","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApVQB7HXbFjG9Bj6o1WJHBZ1hAXgGk/k2yioGoZn7IL/"},"signature":"k9sHFsRwcp+SMle4XcYCsJ0vye3C9tEAWeHx9YkloyNiLaYUPkL7jTF06gkdQa7w4lvp5pfUh4kEiGxpK79UFQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1myvvrlve2vr7sczfjf6h2mmkavuj9s0yjv6fa0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1440","1","1","g1myvvrlve2vr7sczfjf6h2mmkavuj9s0yjv6fa0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApVQB7HXbFjG9Bj6o1WJHBZ1hAXgGk/k2yioGoZn7IL/"},"signature":"1sr8b0Vi07c/5dXh73EcU2783cAYwNA20iuEP+p41u1NrFunDKFZJATT3dxJBjGTzYohDQfxdacj+3HO7ANR7Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g106m0x7p4ex6wduc7wx4f0qkfy7sy2cvl8ryafh","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"/vJ+RqlZ57uDmMG4UmP9xJ4lHMlsO7m1updgt636kI89Z5y7qcYZ7uPl8RdplD6Z25wHa9uy16alODyJGZRGvw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g106m0x7p4ex6wduc7wx4f0qkfy7sy2cvl8ryafh","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","natureuc7wx4f0",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Amw49a8MYjVxDWYdif5TCCm+M3Y7e+ie1zoe122hMjj2"},"signature":"+wae1phnXgeUoWbE8nUWlftYqOYpLPF+sijsoJQx2JNjDkFV1bxtmCLirs7snFMGSQL2abZAOyov23HbFoZYUQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g106m0x7p4ex6wduc7wx4f0qkfy7sy2cvl8ryafh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["natureuc7wx4f0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Amw49a8MYjVxDWYdif5TCCm+M3Y7e+ie1zoe122hMjj2"},"signature":"H4ICUS1sZeFOAshFeOoAjdq3ZHzjTXIYFwv+Sp+GoPFqBHqi711fpXdbX+HMdgEfVjPB1qje3DvErXCmZJ0IPA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g106m0x7p4ex6wduc7wx4f0qkfy7sy2cvl8ryafh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1441","natureuc7wx4f0","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Amw49a8MYjVxDWYdif5TCCm+M3Y7e+ie1zoe122hMjj2"},"signature":"jhjMshS0PnnnRmyhCZYew8XbTcBtjDXZFHiC6SIzUV9ByruWd8eZ21AhCiLMRfkxO7c+3ocacKMnrsf99Rqz7Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g106m0x7p4ex6wduc7wx4f0qkfy7sy2cvl8ryafh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1441","1","1","g106m0x7p4ex6wduc7wx4f0qkfy7sy2cvl8ryafh"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Amw49a8MYjVxDWYdif5TCCm+M3Y7e+ie1zoe122hMjj2"},"signature":"9fbCJMpUQhKOUByH70mfiC2IsMBS9wUQ60L8r9gH+FouJMO5oGLnsEh/V5gxBqh2Is+uHQyCDzGjA04qchTnqA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1yg9uzhvxksvvp48ug436adfjm6mmvlydf36w3l","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"dtR2YHlROhKvXVcQJoNuXyaK3YfxjXEVmOMXMbzmqR4yyleSTp/zenkolByh3ZCiJklwC1dmHG1hAvEjogur7Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yg9uzhvxksvvp48ug436adfjm6mmvlydf36w3l","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","weather48ug436a",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoDmzjE9/frxiuxZ9h+VRZ/JVj8zeo0Isf/p61k/rAiG"},"signature":"NihnWNfdEFThIxDsGKUhC6ZgKOemi3QpCrud8TNo6hZjFiFrrYf9t0Td1hW3QjjFxqSKU9D63MJa8Fv1uerMgQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yg9uzhvxksvvp48ug436adfjm6mmvlydf36w3l","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["weather48ug436a"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoDmzjE9/frxiuxZ9h+VRZ/JVj8zeo0Isf/p61k/rAiG"},"signature":"g0Q8DdhefI7srMqQ+KDIctGP26mFhLqK2VA4SpEtyUlUcZeMZSjpAgFnJy4ttwX8ShmcgJlZLVqHUuHsfI6vTg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yg9uzhvxksvvp48ug436adfjm6mmvlydf36w3l","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1442","weather48ug436a","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoDmzjE9/frxiuxZ9h+VRZ/JVj8zeo0Isf/p61k/rAiG"},"signature":"uBbmyvWa2NWEMsAxTjCA4zqYSr/yGkp6nKuJnf/RU69xBG0KUidO6TEVNAQzlViXe/xvyY94MsO3ppDgJyOPfw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yg9uzhvxksvvp48ug436adfjm6mmvlydf36w3l","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1442","1","1","g1yg9uzhvxksvvp48ug436adfjm6mmvlydf36w3l"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoDmzjE9/frxiuxZ9h+VRZ/JVj8zeo0Isf/p61k/rAiG"},"signature":"E8CkfTuWI6em3aPeqYcq2eabyIu4UBvLdsrgSk3+lypCHMOwwbf3VWPF5SWiUbuclIOzQiUqg+sZi9mNJJIEJg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1yj4n9j240yc8rf6zarr8k6aeut7kktud27z3ny","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Q383mLIKThQLN+W4hFtk4qecfzmuBqjQUF5fqlDZYMpaK11sjZDkMUk/rObrc7fVm+aAtO7YumsGBgC8q8zhrw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yj4n9j240yc8rf6zarr8k6aeut7kktud27z3ny","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","paddlef6zarr8k",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkyfNP9ChIqbKBIvdhXEMuIv2s2d9M4+VNocwCFhhibO"},"signature":"uCmOGwxpL4btHhKH2nkveU9t55M7J7rqbVRMgfgRc3taEPL8I7xcA7HeCbc85jL4TyxsGGAM5jUtt9gAOQrk+w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yj4n9j240yc8rf6zarr8k6aeut7kktud27z3ny","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["paddlef6zarr8k"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkyfNP9ChIqbKBIvdhXEMuIv2s2d9M4+VNocwCFhhibO"},"signature":"QfbdvlRxXtT2cB3yxt08M2aTUZWoTxaQIwCAx/OApW0n0xwhcBppuDBwtTacRnyarKTNUlF4VGyw1y+k+u0HcA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yj4n9j240yc8rf6zarr8k6aeut7kktud27z3ny","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1443","paddlef6zarr8k","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkyfNP9ChIqbKBIvdhXEMuIv2s2d9M4+VNocwCFhhibO"},"signature":"zzC55HgcJqfuUP8McmhknK4VQCQFLHlRfCEFon9n3/JxypaES16/17Nixn81nfzMsvwwUylxp1pZGn/95leCwQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yj4n9j240yc8rf6zarr8k6aeut7kktud27z3ny","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1443","1","1","g1yj4n9j240yc8rf6zarr8k6aeut7kktud27z3ny"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkyfNP9ChIqbKBIvdhXEMuIv2s2d9M4+VNocwCFhhibO"},"signature":"/hWY+WwnDTId/6rpIuk5rM3glM4nXEEOHScj/6xUbrIAwObCi4Qck7iwGhLwdOQLrXCDjrKAlxW1gwHYTacEgw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12w4p46sy8qlt23x9q2caw6v6eptg936srtt85k","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"u4Dar8F6Iwplr6pk7oxv5mM9b2dlAVmuOec0Y2SMyU59vzrKhWtv+A2n5ftFTPfxJ95dnOBvtvOMu1kvuH37hQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12w4p46sy8qlt23x9q2caw6v6eptg936srtt85k","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","skate3x9q2caw",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtBCDOaTOx0QOGuJ6fccsQh2RTynYcZvyX1yIM8Knxlv"},"signature":"GzGRnDQ/anF4v9zug+nO4N8d76LHEMloDgbcY1AjbGJU52vv0+eVhxzInMMQqERzsB/AVNkxsyACkk1TYGPlyQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12w4p46sy8qlt23x9q2caw6v6eptg936srtt85k","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["skate3x9q2caw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtBCDOaTOx0QOGuJ6fccsQh2RTynYcZvyX1yIM8Knxlv"},"signature":"aK/kreJBow50o1UGp8ZrEn4IdslIj+Y6Tb/hDj6EBrFB3dO12Tfnaa3L3pw3TvNIlWCHu7QwvYfusGsc4sX1Ug=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12w4p46sy8qlt23x9q2caw6v6eptg936srtt85k","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1444","skate3x9q2caw","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtBCDOaTOx0QOGuJ6fccsQh2RTynYcZvyX1yIM8Knxlv"},"signature":"C0wyplHXQS9Ya1RyADMZC2/37WQe5Aajf3XBDyD9WgofpA0xlcSLxEoXAznPBk0/zyvaBU2PU/BFOOw1rS/MyA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12w4p46sy8qlt23x9q2caw6v6eptg936srtt85k","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1444","1","1","g12w4p46sy8qlt23x9q2caw6v6eptg936srtt85k"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtBCDOaTOx0QOGuJ6fccsQh2RTynYcZvyX1yIM8Knxlv"},"signature":"BdCAa/vDt/UBAuhQ2NjhXD1h+08qUMlMj9/MPAuxDrcoGuJ1ivol1igXj3ElNNDemTHy0RwAXkpmiJhAPcJlbQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g170lznqqlspqhq5a80nywasgy2u5ua6jxwytxjm","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"g1NfiFJfijujo8M6ZYIBsrJFjjB1PGOkWZsiSD697QEhStM4kNnmb6Rv7zCq+56pO5nllGzWyOd0GDMUoPH1pQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g170lznqqlspqhq5a80nywasgy2u5ua6jxwytxjm","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","teach5a80nywa",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuW0rJhChagYGSBiWIjCAaUftHM2fsAzuXvF9yr9Zhu0"},"signature":"EMtZ42kfZolaNFFWJD98zbF0P+So6QEzSWHM6g5ZJYxRW/aHsQh1u3nASged3l218J63dKdcgIujOs6X1AyMMg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g170lznqqlspqhq5a80nywasgy2u5ua6jxwytxjm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["teach5a80nywa"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuW0rJhChagYGSBiWIjCAaUftHM2fsAzuXvF9yr9Zhu0"},"signature":"OGjmUhgZYyOO0hNdpZzr1x1FSyJ232OIvq3xHQdVn2oxcM73ElLt9C7QlXXljpXNRiGFGBUhAOCzxQpD6l1Gtw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g170lznqqlspqhq5a80nywasgy2u5ua6jxwytxjm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1445","teach5a80nywa","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuW0rJhChagYGSBiWIjCAaUftHM2fsAzuXvF9yr9Zhu0"},"signature":"RFmpk2BhLNSRrwpcq2ujODre39mFYQsE0O8s/1+nILo9GW3pq8ueNXI5iFI30L1aR1iWKne3LYfvnJzGtsbtdw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g170lznqqlspqhq5a80nywasgy2u5ua6jxwytxjm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1445","1","1","g170lznqqlspqhq5a80nywasgy2u5ua6jxwytxjm"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuW0rJhChagYGSBiWIjCAaUftHM2fsAzuXvF9yr9Zhu0"},"signature":"SmngkSA0oUHr9c73kX3W8KCRlh9yAyYpRsTw/6ISAX4TfW8OotVt+RuhHh8+Gob9LpJcAY8RkGtu6OwpV/qRgQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14px8xc2huxx2q5wgwedn3spalj9fauqxshdkqw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"JgTae+rdvRYXPGj8fI550l9DeA4qaabZiOSAYT6x+G9X9Ktfg6bwLzdUj1heoyFZkWueQ7S2eadOzWMGuj/nDQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14px8xc2huxx2q5wgwedn3spalj9fauqxshdkqw","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","boat5wgwedn3",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ahr3zg/KZzQ6b0HobLcq5g78j+3U688bWqv2bG9jvOye"},"signature":"C9Lxn9q1KJAswyyZssykEvTdIBhFsuE5OiljU9E3A1gh2wgT3bF6QlelkqqiJm4aMXjTL+UF6wqobryBB1+ORA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14px8xc2huxx2q5wgwedn3spalj9fauqxshdkqw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["boat5wgwedn3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ahr3zg/KZzQ6b0HobLcq5g78j+3U688bWqv2bG9jvOye"},"signature":"Tidz5uqt+OwPwtNkBex4KviXC9YqadEhkEgsYwZSqIs08F4txOjeyQg/PQ8Fr2sc7OQsH2iGbWN3aqYGWHyS3Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14px8xc2huxx2q5wgwedn3spalj9fauqxshdkqw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1446","boat5wgwedn3","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ahr3zg/KZzQ6b0HobLcq5g78j+3U688bWqv2bG9jvOye"},"signature":"Yi0hWiFIwuRD/qntAd1wYgHu/LuLcv8EeUv6niwXNjA5vHa03YsmH1ON/TwU/K5vVyOTVW/3b/rBojlgv+H7Xw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14px8xc2huxx2q5wgwedn3spalj9fauqxshdkqw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1446","1","1","g14px8xc2huxx2q5wgwedn3spalj9fauqxshdkqw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ahr3zg/KZzQ6b0HobLcq5g78j+3U688bWqv2bG9jvOye"},"signature":"rxtq8vkcR7+GF7OXYinmKNqaGFjc/gE2NRXstJ9D2Q4KPuZ9nD5eeQ2QZ9FRSwITf5kfY/y/YtplEME3ehMtcA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g109zkr77s8v9wakzvwjw7xwy593272dvgsac050","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"P7IUpn99T9Pdk6HL5czckapA2eJAzNeKazFK4cRPO0UnTS1tQ/4uz8JINR7sVR3WZGh0TX/uMFok2TJh55l+gg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g109zkr77s8v9wakzvwjw7xwy593272dvgsac050","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","togetherkzvwjw7x",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApEJSNFwBbbyQHNPHL4rYyynrzGJNynoNMHcNNKwHaBC"},"signature":"QAmCji2bYMgBK4Ookc9nzkRKMjxoZiioPDnIp155ARJaMdGsB76XkxKyIGaAlWKlbYchE1gEHNVHtZiQVOyglg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g109zkr77s8v9wakzvwjw7xwy593272dvgsac050","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["togetherkzvwjw7x"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApEJSNFwBbbyQHNPHL4rYyynrzGJNynoNMHcNNKwHaBC"},"signature":"8kNbBnDCN7xoXWhImEH26nJQkHAWT/M9DDWWHtguK8oOOb90Y0ZRxXNx40dzQd5WUjYsndYCLYG46dupDqvklw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g109zkr77s8v9wakzvwjw7xwy593272dvgsac050","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1447","togetherkzvwjw7x","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApEJSNFwBbbyQHNPHL4rYyynrzGJNynoNMHcNNKwHaBC"},"signature":"g4ouTef1kKszAsSXJfGtklzYAQwUiiKSLZVv8lgH6TVYSRE7JRmx7TXJN0LySsIICY3MWPhonhuCZ8ooeJxYJw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g109zkr77s8v9wakzvwjw7xwy593272dvgsac050","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1447","1","1","g109zkr77s8v9wakzvwjw7xwy593272dvgsac050"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApEJSNFwBbbyQHNPHL4rYyynrzGJNynoNMHcNNKwHaBC"},"signature":"6Ux11wMxFOo3grz1R7hA+oARjnAoFqGkuN2KLG0XtSFwuiHrfVPipOuumTcoP5mSIzGUCWL83KErLEmQ2bb+IQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1a89dag8zpaquqwpm6m3rutd256h7pxycl6ntrs","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"l/lLm/uxaylt9ERQmaKrAJ1MgiYvYdt62La6Rv8kmZVRcjRvYuU7h6pJj2KrPMDIMIFPuPwCo9Fn8dwEwB+x8g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a89dag8zpaquqwpm6m3rutd256h7pxycl6ntrs","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","extendfirstwp",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzSVpuyMkA2M5BnNcifb05NRqWBxgIUl4gtXrOJZfK+I"},"signature":"YXSexS10vQMld4wFmkpu7NxCQ4ZhwaLK4E+7fuXEa0ci6c+PYYLc/KwdXpK0OMUii+9eDE2mECCQGMhA2GCSIA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a89dag8zpaquqwpm6m3rutd256h7pxycl6ntrs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["extendfirstwp"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzSVpuyMkA2M5BnNcifb05NRqWBxgIUl4gtXrOJZfK+I"},"signature":"/DP+gxx9eRX4EIxT0qWyhsV82saz6+cLCnBo72UDl4A/k+kGOk5/ngCWcVcqkOZMD1hAQQwChyybSgHPI8bscg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a89dag8zpaquqwpm6m3rutd256h7pxycl6ntrs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1448","extendfirstwp","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzSVpuyMkA2M5BnNcifb05NRqWBxgIUl4gtXrOJZfK+I"},"signature":"gP64bmw4WU7ZJcfk86v27d7QJPUnhrXyzYPaMJDGBHRcSgSnvhn36ZmPc3K1BY5oYteoEg1GYP/WJ1rPInpv/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a89dag8zpaquqwpm6m3rutd256h7pxycl6ntrs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1448","1","1","g1a89dag8zpaquqwpm6m3rutd256h7pxycl6ntrs"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzSVpuyMkA2M5BnNcifb05NRqWBxgIUl4gtXrOJZfK+I"},"signature":"SZ3us6PC361J+pge5mAkwTE0AyGf8vinGvazx+T2Uv5SSKDjmzTTkRlFWqE4PlToa1YsX3nwoar/1m4l59ODAA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1k5gj9vmnxyhq50strdlq7h45k6lvvx3yxp63gr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"WfS2TlMdGfLhwT7gdJUX438hcgVeruxiJoYBTURvkgg9CwxvnMPzU3Xdkb4pyK7ma6XE6J7uWsng+RztQiiDWg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k5gj9vmnxyhq50strdlq7h45k6lvvx3yxp63gr","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","rotateorchard0s",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArCzXtG5RolJIpLvT/5P8P5XmIeZ06vTj1KerQfphkeL"},"signature":"16mOnC6p0DIuaaDewgaTJ28YcBlRgUHl5TWJnYV650Vviv2SGKSyKEmknOWbIBgpODbnr7fuzoQ3qtUUhc5tlQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k5gj9vmnxyhq50strdlq7h45k6lvvx3yxp63gr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["rotateorchard0s"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArCzXtG5RolJIpLvT/5P8P5XmIeZ06vTj1KerQfphkeL"},"signature":"Gxjyebs5Mh5/+8dzeHMQki1QwRdPJcY1jGLeAA1M2Dsb3YBB0+dg/iTwk73rCply2CSpFBNnidqROl8tFUog0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k5gj9vmnxyhq50strdlq7h45k6lvvx3yxp63gr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1449","rotateorchard0s","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArCzXtG5RolJIpLvT/5P8P5XmIeZ06vTj1KerQfphkeL"},"signature":"Ib6TMGcdH7GKu70lbmluJi5IS9z46a2CVzaLRbU0tTgjFzUGbMflAFJVkD6YvfElGYVtizTnER9Pfi9W2QMaIA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k5gj9vmnxyhq50strdlq7h45k6lvvx3yxp63gr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1449","1","1","g1k5gj9vmnxyhq50strdlq7h45k6lvvx3yxp63gr"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArCzXtG5RolJIpLvT/5P8P5XmIeZ06vTj1KerQfphkeL"},"signature":"bMGik11DHErG7XeuwCJsqr8A79xOtJyj24wy9f3qRS4L2ZIeEPCTQr2zFBdmpxT8dPLqImYQQ1cxccN7ki3J4g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g10w3ztv2hec2nhq38kzknmm9v9wh0v79mnpd27x","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"5zGD+Qp7NhCKn8w9lXxrVzXcvhRe9BL9K9yJFl3n1jAawv5Ig9z0HrNh/kgY8Caxhg+I6E/IvGzRk9FJyeM+gw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10w3ztv2hec2nhq38kzknmm9v9wh0v79mnpd27x","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","observehumorq3",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsRSbNT7xBI8Its8bYdsM6FBlxR8a1yYz1U1LQZldtbB"},"signature":"eNFz2YaQUE9VjKpZaUyiP4GLnqDcMgG+WTO0z15888hpYxo7xDNL7dVudUEpVa9ZR88heuoZkavn/3loV0Syvg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10w3ztv2hec2nhq38kzknmm9v9wh0v79mnpd27x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["observehumorq3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsRSbNT7xBI8Its8bYdsM6FBlxR8a1yYz1U1LQZldtbB"},"signature":"A7NPVsY+FiMAz7awWQ9c9AQKOOeEM5y5m8gexgi5OmUfALGcjPvE8/WtE10wxM25vowxsO1a4uXDV+sJlgBkCg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10w3ztv2hec2nhq38kzknmm9v9wh0v79mnpd27x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1450","observehumorq3","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsRSbNT7xBI8Its8bYdsM6FBlxR8a1yYz1U1LQZldtbB"},"signature":"HeJy1xOvNW0OqVBiSHv/jV1aaPXxOI4WM0E0Tze9HulLhVSRbldgEzjjWZtb6pBDS/IIvg2Xb2NlTstWa1QChg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10w3ztv2hec2nhq38kzknmm9v9wh0v79mnpd27x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1450","1","1","g10w3ztv2hec2nhq38kzknmm9v9wh0v79mnpd27x"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsRSbNT7xBI8Its8bYdsM6FBlxR8a1yYz1U1LQZldtbB"},"signature":"cDByGA/OE/Y0LjznDVAKYeKxTrh5oXkmCXUCEqTx6Gh1UjfsguyWBaKSWrqdkMlCfrbh9/YVjWnts5YUU1PFfQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ass025n093rjsk554hr2sjnprkhg9wyz8hzx0u","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"NctMJln+afh5ClN9DgAAP8Ayv0SQGL+H6O8EHNd5VIgiQQ1HuTPqnaUx48RqEMdgNFS0qWV8ZCN4uvnoGMwnkQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ass025n093rjsk554hr2sjnprkhg9wyz8hzx0u","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","nucleark554hr2sj",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuntNImNmwPMyGRi309l0n0RDmlC6Fw9Gz9NXC8Zs1yG"},"signature":"I8CR4W8t+nIuvQGohZ64RMCVPN7zb5TFkkvYc8Q5/HFwrkWpcFz6ByIz7whkKIM3FGBLzaOjd5Kkk9z1n1XNaA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ass025n093rjsk554hr2sjnprkhg9wyz8hzx0u","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["nucleark554hr2sj"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuntNImNmwPMyGRi309l0n0RDmlC6Fw9Gz9NXC8Zs1yG"},"signature":"9d5axcnZEtBgyMABoJvpURNPVTIP8gas8pnA05uahQ5xVuxEK4YXXxz3MYcF40p6nWF/rSsBUmu9ndesGKu6xw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1u3295843jrslvcul2ht0qe6s49yzgk6d5khuz8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"lbpireTPSMLEzjJGd736EnvSL2uIq8dsTrs4xcwm90kjp94BbSa6cUWA8DXrs3zM0Bxe+E/bx8apwdA0BwrTEg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u3295843jrslvcul2ht0qe6s49yzgk6d5khuz8","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","findmiddlecu",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9s9C+FteatjR7GpHiM7siljufx6RVHXBuby+mVdKXRn"},"signature":"dlB4v+JVIsWVEThR18+GVZA6Zsm5lb8+599Uh8SKdWpcILhpaTGxSgrojFVP9CcCuoc7AzQxpwJc93P0BB06Xg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u3295843jrslvcul2ht0qe6s49yzgk6d5khuz8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["findmiddlecu"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9s9C+FteatjR7GpHiM7siljufx6RVHXBuby+mVdKXRn"},"signature":"xtNZ7iMdqaFTXYpx/sQGfmr4xTxhASu7p0wPWifk4KcXY6a0HYYVddNXK54AUzhHEiv1DGQvJ6xb+lxd8pPRnQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u3295843jrslvcul2ht0qe6s49yzgk6d5khuz8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1452","findmiddlecu","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9s9C+FteatjR7GpHiM7siljufx6RVHXBuby+mVdKXRn"},"signature":"+LFpLDFmT8vomF9W3bfxRZT2O/CYIXNeWQAavACxc04yufhgO2aNHXE2FFBIIKoF/63pc3mNQBElD5ishvrS0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u3295843jrslvcul2ht0qe6s49yzgk6d5khuz8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1452","1","1","g1u3295843jrslvcul2ht0qe6s49yzgk6d5khuz8"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9s9C+FteatjR7GpHiM7siljufx6RVHXBuby+mVdKXRn"},"signature":"r3ZZ+OHTdcC1CI0Xwm2e+QRIA+xwvEhSxMVgmGjpCGlGDKrS3cOcQms1nRxDypqDMXXvR5pIr6es0da6HHXheA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hlcv6zp6vy0fwwe5hg9ugqc8fs380hgh53rkxt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"75fJ40JKoxy7ctL7pVY5SYZfc9kroJaOjBmIrreWmi5McZtwRxhLLebfUmeRofxUnKdFnobY+fguBvXHZLXdvA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hlcv6zp6vy0fwwe5hg9ugqc8fs380hgh53rkxt","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","auditwe5hg9ugq",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3VWjgBEh+1gOPRK97GPbNm6J/+juQtDlKBACc/1vPK5"},"signature":"Rg2Gt3MHIA1bimR1nZuqR2C2ccOdvulxJWLjmgUHaCQ0dlCde4L01BxEmU9tns4494eYuB2BqLucNR03wuINvw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hlcv6zp6vy0fwwe5hg9ugqc8fs380hgh53rkxt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["auditwe5hg9ugq"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3VWjgBEh+1gOPRK97GPbNm6J/+juQtDlKBACc/1vPK5"},"signature":"z3mtSNPjagO66o2VlGX61bZsfOOKrsEVD8TM1xRf1q02SSpxudB2tgoL1KSRpQeuAYfzADOsV5o/oI42Ao6HoQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hlcv6zp6vy0fwwe5hg9ugqc8fs380hgh53rkxt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1453","1","1","g1hlcv6zp6vy0fwwe5hg9ugqc8fs380hgh53rkxt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3VWjgBEh+1gOPRK97GPbNm6J/+juQtDlKBACc/1vPK5"},"signature":"gTrR2PmtLXYWuAAcfHsgZGXIaVqml0U8GOzFPBs+bC0sF8kDsye0uQ1XElD6dI3D8NU31gqbbFrimZnOvorFUA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17wnanquzv7urwwunssv6xflzd8u42r45a55g7f","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"81MRGVDN4UcaR3jvRcb7+skUkhrriP9t9mFronx44oEXlQuXuNbqEVxf8LAG5NhMXB3mYzRzEr4gLuGh3VcTdg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17wnanquzv7urwwunssv6xflzd8u42r45a55g7f","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","neckwunssv6xf",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At9jhok8ifQXaYJZ/+9DBXHABSJbVkoD/uhBiKpPeOXO"},"signature":"jrBssYJUPBDwoPIerni4AQHzUEZKx7nMuNqRsp+qxVprXD606aSAGkcbVbLouAKcm8ZPMHLMUvc2eirpFqfzrw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17wnanquzv7urwwunssv6xflzd8u42r45a55g7f","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["neckwunssv6xf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At9jhok8ifQXaYJZ/+9DBXHABSJbVkoD/uhBiKpPeOXO"},"signature":"uHA6aEq5zOiidHpDRmPlsCc6P6RQfmUdprsFIhOkuugk4F6PAyw+E+c9YeeaJ5MCqNCCO2S32Fq6pB2FyUi94w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17wnanquzv7urwwunssv6xflzd8u42r45a55g7f","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1454","1","1","g17wnanquzv7urwwunssv6xflzd8u42r45a55g7f"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At9jhok8ifQXaYJZ/+9DBXHABSJbVkoD/uhBiKpPeOXO"},"signature":"twV55pdRWLrIcc/tBsoeVR5N8E6kzxAatjz80syRGFI61C08kEzMjeehXzU3pO0yogAKtDgi0TE5HIv+UyTK1A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12jmg0s2gpyj3llv2kc0h9emaztlddkna4xclg5","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"FCOgTVCI8NpvgT9tsSEZhCYXAOh/ZFpwLBRvMaJJmLsr/Vsj5k9XMMGR/B1jiMvBn77Uey5QKsDWbeD9BrIa2w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12jmg0s2gpyj3llv2kc0h9emaztlddkna4xclg5","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","palmhurrylv",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/SZ8OqNfvDb1C3tlXoXW3kEZ5dDeBOpUaq6M59movkL"},"signature":"G7lT3uwTPKrqec1iYKlzAEk6W3NyWjYLYG7WzPRWyZYXdy2VKRELYmrWHCnIZsPZfcc8hhhRAhTEokOJDchrig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gyrd9wwlcc4z8v3ljdck9nju442arcaan6vt8c","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"J839M1pEn+jGU3tKZdeMmnxB23N0fVPZooTw/hNUNhoGYs2gnxHqoSmr0Mi32zUHKPgUR+B6v6fIx24/lEdlMw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12jmg0s2gpyj3llv2kc0h9emaztlddkna4xclg5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["palmhurrylv"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/SZ8OqNfvDb1C3tlXoXW3kEZ5dDeBOpUaq6M59movkL"},"signature":"bIufyYJqOOPOa8Cm3xIpQQORbSyno/FylNKj0PBrDdMv+L4D6uZiC0PaORNY8ab/bp5MriAfgSs4lCD1t5JBKQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12jmg0s2gpyj3llv2kc0h9emaztlddkna4xclg5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1455","palmhurrylv","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/SZ8OqNfvDb1C3tlXoXW3kEZ5dDeBOpUaq6M59movkL"},"signature":"AW8GWHOXPxBC1Z+Ar9v4UQMBh/0pTypy7euCRoXcdDxUcaBXZAuNaJHGoA6sqBpAEL09ows17BEPMLkBoym7sA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12jmg0s2gpyj3llv2kc0h9emaztlddkna4xclg5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1455","1","1","g12jmg0s2gpyj3llv2kc0h9emaztlddkna4xclg5"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/SZ8OqNfvDb1C3tlXoXW3kEZ5dDeBOpUaq6M59movkL"},"signature":"cdPYZERWBa6PyTbEqEZvYNi/6MVt61KRlioTVvMS0vMKtaDP3nEwu0t2ejHks3LBWeZOz185GnQL1EcP8+0eiA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1l47x640c4petu4chfjge3qg2uplakx78hkxqxd","amount":"123000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Xmw0RmcqtbOLYmgRE5e8qy6KtbkQVYcJ0J/dU9is8kYelCmH2qjgSksykcgW06pGlLh6Ldtg70qqiNDf27+U9g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"123000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"qUuPKJp53Am9fo/SUsnQkp1BOZPDs9r1l2fSEO79zmZDhnZf8ZHAXdr5pmmlOOWrfFi+pFkhoVR8t7hsozHSIQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"+9rwJppyaNufOyDgm3OrSYqYNl2gWlqN8B+n79Um9dsr+SmtJU12n13ZyfFpJznLNQguBR5V8OaTT+5hcNESdw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jueshh78w0zgz7a46px60ph4d0rr9y06zsm9fh","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"JTKF1Bw2jzoQtTq0hJa+gRrY0x7G0gMn+H74UNgm8FQZcxZQgv8XXdSRBovqPeZPdChPxZGA7fT1axn0mJvS3g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1dewry6yux33mgwxre9a3c2lqevvax7q607qwwn","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"NyLPj85rnON260cWtRWLvoKiDZydHbdgZ7sJAYIqbXgP96D5CV7LGmjBsFpNGtwgUEEUsYP+qC9HKpVRJdHN3Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"0YEJPRvDmUGFdeyk7nDtVSInQdX8DNkP2cTag3A2kct0dfArda/O4yWUU4kFYeMzWdS3PDgi/uuGspiEEpaREA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","gg","HI"]},{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","gggg1","Hello"]},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"5000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"l16G41a4BjZ+pUk4qZN1YjFv0uviOZUj6hQrtesYTRFY+MQmTx6kLyp1YCAXHTgIHb5cz6URgjTrgoMG5EgHjA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17mcw908lp5y006avp4fjr082wrzryzqh2qgr8k","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1Ie2uJQVGI4K/6kwsKQkZK48YDrk3Ic4DKiVS1Ee2yL"},"signature":"SPPEktMi5vqDEduUCaC+JlSkD/n9eAod5fQf47S2wgt0ClwMbyvvc1kr+sxhKkqZWksEcfEqDM6F8Sd3zXICmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"a+knlCpadHJOeRuAS+laCEQ6RxXI6DYBI74htNi/6AYPkaNvgnfXFucB9JTXe2gLhPW+ZOHZh3mBIDSEpm9LlQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"7/nn2h+ynlcWXCaMPgCu6U8Df5t35BidvbiU77Ft27MybHM6lTz5Ik1IHTkbiS67uYZB2fbz3zkvoHyNJeBa6g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1234"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"kReX6YtK3ZQxiNDyTMJDMJ+TGmpAKt6qJX6YR2ot8dAJzgmcAPC8f/vHIUV8RAWfsQz8cJ+QBpq/AdqJYuSyxw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"utguYw1zJYWw6eU8b54N8tCjUlZNlArQJI40R1UYVMlZ0+KVUVXJ0mgzRMOXT8Bmhl7YsDc88aV7UaNDdt9vgQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"m02lKaJNrjUEmWESu/8Jm/sa9nV5pSEfbzZhtSMgmW5Gts0IoQ7B5plXByl6+dYiPsfznwCqeSVbducl2qAmNw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"GZMc8ZfEw3QTFGanwUUSK7BRZafmuSbeIeLNVA7Ivsl6wgYs+eIoQkmVGnStEqDH06GdzPgFVRADhXK//f4gOQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"qsuNbug11I/pz9orHBSWm2VUYiQIn3vwWFjDHpzLXlYo5BYO3XOQz+rAp+gybe5JPVZKE74WP3FT7jY+KV1bzQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g17mcw908lp5y006avp4fjr082wrzryzqh2qgr8k","to_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","amount":"100ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1Ie2uJQVGI4K/6kwsKQkZK48YDrk3Ic4DKiVS1Ee2yL"},"signature":"wbxkD74Tkc0ZsQpC9yCMgu/nF9jTWNrjKdmOyZ3f5gEJp8/T8F0Z35xkiFgXXVG5rcSPRx58cifnr04X2oQc2Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1sjquaysws7egnuxa9rwx2sxwz5pswr8ltq6wxd","1234"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"1b9GDmb4P0m/F5o+XlExGVrSyaogmL2nY59Vgp9IFlhDJFm/T01vbLuCMcEKyxPoZwQRXPsWhSX8OBy1Nu4gzQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1234"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"y9EwEXmph4u+UO43abqeIK7Ejmd2bQtQM4ljQZSYaApFZ1e/tvfLaRUYhAZ5mQ0ybAfnp9YbBb4bj8NS+TKliw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1etq6j7lddvzvwq9kz50ywmlyyfgk6qw76kzwss","1234"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"2P0HsywBS+qZXm9MpO7FZ+hgFYsSM6tygpohBq1CiYJq1hFHtDrGNlQXzdGaob+9nREKCf9rsrOBgghEfBngQg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","1234567890123456789"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"7Y6ECQkjtn5LGP/POipDhZnlcoH+7/J2tmyuD0/mADkBLd+V/y1e3g8woHdy5zNAfCJR5UblICDIhAbvLgnmnA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","0.1234567890123456789"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"F7XtFUBOLVhdAJogd04dg8c1D/gwtyAc1ecGgHZde0xvTrmlWrT8+yfUl0f9e192YQ6fDAQWoRJvijigkGyv1Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","gggg","HI"]},{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","baybe","Hello"]},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"5000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"TaHxSc+NflIgVPYH45PQmFKwKuc7tkhMeR15LrUS/+0EYvVNJ1+Ci85JlmPSZKinAIcrW7maKf3DuIxZIkRK8w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"WsuFy7f2MMWlAgOtn9figTTqyW+ryMvsihyjB87ZDSEakWxx9SdWTuDTS9IlVaEGIOSkd+Teb72KtlBexG/Q5g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","1.5"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"yRlPqjVFEl+VzSJK8+PtYo6tGau9TDulqLMatw4OT984upNXJUy5P8WhWaM47LAEYu0ggRG+vgctMl54TIW0pQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","amount":"100000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"yTfxrRtK7SEHGNo+HyZmav1jvEJB9CA4oVr8/7mtr5oljIKW+uA9M5mhDWqbvSf1stTH32QihXiSf9RRxVSb8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","5000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"sz7K+bebM656PV1Rgy4hwjLN6WElGONGh7AykXCJjkccVLMXQpCXOKSeJr9nCJxhWhyHORv37CoRbjIuJzAOGQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","100000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"+yu8MfDOEEwpLJMxehiFe1KV9W0o4Xrj1jDo4skwPr9Ze30fsjtVSLkU1KSmhpNJUgmmi7/h0LOOt6Ht+7mA0A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","to_address":"g1j9uz6gfvsa4g06aur96vp0dejxyg3lnpj4wjn0","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"JSx6dfmnbF0lYXT6RuQUSExAx13X8VFTeNJkSdpodrZG6z84mE6VPG0B4z3rcKxz5KGrIz8zEg4EVvHGv8dwnw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1j9uz6gfvsa4g06aur96vp0dejxyg3lnpj4wjn0","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"n3BGZS97u5TmWrnSVvUBpHKqgNUydLWnx/WES6aJjqI4gRJ0cSomkV16Bd7CMrDWYR+2RCezmC6wOcGP5PwmCQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1j9uz6gfvsa4g06aur96vp0dejxyg3lnpj4wjn0","10000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"IXGH0Umeknajub0YcojR88/eftErMUZJ0icUnb/5ol48X3yTdpc3Rz0QRpwRrBPW1jbdL/RNnpC21CgIxBuxPA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"10000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"2A2ke2mOiXicYFSZZAEXeEkp6ij/OLb2e7iVDlYglyN6SGWy9hZjHxEvFDSXDy4aXA34dk/qRsKdA+KSOiethQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","100"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"qV55CVpB6NUShrYEVNKK9LYEPmuOniKfULiFaCBxAVxkTXdFTmCDKP13b9SMS4C9KmbNrcCg5l28cJvXoYB4mw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","10000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"y7DUeiP/E1IZEoWOxRBgdwmsvBaPeVbDhpyyZJGdd6kF8fDZJ5odWreifGTg5ZJmpranQoF67S/fyFOgsEExbA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"10000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"AESaRkhTR/zyV5qgDWoHWRtQTUPFXxLA3x49xr+0Szgy8YIlRGIE22NSRt+86LRtH1onwetwWenw0iPJgnHEig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","100"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"TQdvFq1Ti6qauv1VNpnOL+KksJ77pdSOAdsMCbY2c/5ojkMOPrxwmlb1wwNL9qkv3opvm+dHI2xkoyXV65IP4A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","10000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"fa7EAseTCodZLDy61KTldnl7Foehjk5Pw3RKyn4igZUaD8lejH55Ude45fve92gWNqbaH3l6E2jWdqePZrcbjQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j9uz6gfvsa4g06aur96vp0dejxyg3lnpj4wjn0","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ar+pxoZTuI54H7+M8GZE23GEP0ZJjbJf2TFMOdl1laPG"},"signature":"lKLOSVUhhW7OuTyNbSAmv4C7+tyIt/QRWKCNEhejXwZD8nuaCOWWIQXD5Q9vtklPKz7JOWTEHaUHKSQ4IPiz8g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j9uz6gfvsa4g06aur96vp0dejxyg3lnpj4wjn0","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ar+pxoZTuI54H7+M8GZE23GEP0ZJjbJf2TFMOdl1laPG"},"signature":"s8wK0LuCOuP+XCG9zE8512qSiiU341eaoyAG51LFgsgDS5fHOfBoHDZD6CPJSYe2+MCE5+TBW8YkYAOp5IT0Nw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"a64Hn6hpOgm5a/scn26xMUsNdNMnfk/SPWn4hqzP0csOVIIevuysQP1+S3IAPbDUhC2U4HdB13kkgI/JkJVhbA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","100"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"iBoyMcbeJvVbnoFHS9ibDCcw4NDni0hqOcl9eWSz4TA1vixJwd9cJ+EuQ6BJ4IvCoDEQMrqcZE9xvqF0+mmMiw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","10000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"xcZkgqPisUsD59iJp0uk+cQl5/VZIz2m1OpY49OhOjpz/eTs7FsjHaEtywGHu269Hvk9nppsnTlTg4+fCjChtw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","amount":"10000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"mxld/Z1M53iYSwZMmjfLjcw0vTI59owGslPXPKwsdJ0xF5zxWsIw1mU/FBFwFtLHasKMjZRWVRIjcog/AWBM2g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","100"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"yISLKl4R5O7uLx2O2MR3iyBFrdj5/ckeV2fCErQpXFkecnOnjJEyH58H5KQ//CivKuJd5J1D4e8Kmmq9XT2m6w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","100"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"Re36dFypgpQ6OwKpWXFzVrTQLbEBEMz16rm42cdtDz0dIz6OZLNNJrhflq/jXpCHywstwL3H1zlqI3V5xOu7Jg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","gggggag","HI"]},{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","bayggbe","Hello"]},{"@type":"/bank.MsgSend","from_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"50000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"PLGDgHpXxxQ4H2fU/m6wGL4OMFR9rCeFEZPJMTEo7pZSpGujwmzfyeEn9fnOZ6g7HFaPlHfV14tuKPm3VPJkbw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","gggg11gag","HI"]},{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","bayggb1e","Hello"]},{"@type":"/bank.MsgSend","from_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"50000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"EyHaY+e6N/5sIXcE6h0mWkYArQU0TVAd8+GAwRmX76sieK81liXZ4kTzRMMj3LP8PZD+CQVshs+Pj0SHjN/qiQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"5000000ugnot"}],"fee":{"gas_wanted":"30000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"gHg3ZaYPK4YvuzhxhSxo6IGdGLqiRe5ry+Gta59T7mUNJZg5eaP6PDui/UyV16ozpqF2JGwAmGRlyVRWd/p/sQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"5000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"fSrL5dt6IFIqfCWwqBvOfq+WP7i3FYJ6VZtkp9SCzPUWmC7JaEnlWsDOVuf8El6OILIbAXTVBlfbESfKjVH8/A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"5000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"rWkSFBNI/0dBxePUYPhhjYWD9WR+NCyef3yPAuK8LmdqzxyUipuBeCOtVkAzNjNlWViOWPdw9lQ2AaeIUg2zcA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"5000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"dE5785UYINhtHIyywiphFTDGUnTv3C2y0FQxDGlFmBBTAFlXQwAPo+ebzwYjHsnzrL8BIeYjiHw1xQ7Qf/TcYQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","4"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"dwRC1jXd8dlgU9zOdqH/rMjQa5+KbQsz+xIG/yH1YPRa42f8XcUxQ/jl6icfFTLK9T614wF7u/oUNKxxY+OeAw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","amount":"3000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"pb6JbheTUPhJVGDqxcGcb8vi0ou6YSIa+oCkl5tpgstlbBHgJ8w8VCub2QUuq233qmsJ9eR3qIXaOcXMl43hOg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","21"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"2BmVVJQMNhC9m43TcDkgHae6HWSSxOS+jikmTzYMjbss2/QXUYe6GFJubmUBZ/R6AqZoFhJxU1i8twP7L+7bZA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"2000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"KFFYX/sQGbnZ992jMNBDn1q1OngASgzAhYNGxMbetJUIwle848GH1Iaqjt7lZCibImOkii5zlAIFIpgVu5HXsA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","0.0000001"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"HUjtOKfJhaSBYF6XWIiz9vbAAaHACXxm4G2qXcpsVmsFOcG48dg8csqbUjHiQ0Ngh15FyLYf9TqjE2ABYQzcgA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"eVCHkynEl4eH9l6gn+QA3GOrvPI87W6E0ExXs4QjbThD8QFk5Ure9cx4uAlRZuMOl57CQsFwMqHMZisrhMafNw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"10000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Hv/ctSzghHNnTPpeL5zN51h3mPaRMW2gFrRKqF4SrpkICRmSKSV39g8y5qAU5t/naF0vTcBGmAUondO9CYIUWg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","to_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","amount":"10000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"K+0AA/epRZYEVzWnZHrCG8MwrdbXtxIVMlUxJuf811cC29MiLX69CgPKKP9OseW56Op7NzGPISjU/8kgJqmoFA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","0.0000001"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"ZixulDBkTDxhfVTymf8xtvhjOPia6pkjDsOxqIeo7AsNHrixZgPjnF38JkVKXa72+/bdLJ1qNv+1Yny3nU/TjQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1.23456789012345678901234567890"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"kE0xunAQP14NObMBPCbR+oFZ83AZ2yhrRCFZiyTIq7cJaHzd5RiOOD8PF6bEOFwUwuAxPhmKbm44Dhr3krM9hg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","12345678901234567890.23456789012345678901234567890"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"8zBSQMEsASXzo/vaoh+K0d2Up60EXs8niGpKDG6gzD85XrNFkjGjPy+fw8if8f/wt/lvyM7Ye/lHqmNfO9quBQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1234567890123456789012345678901234567890.123456789012345678901234567890"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"Nkz5XqEjihM10erBthL59PkJyqgDLvzgxYk8/YabNyEMdL6ptBqVxjfJLAGSTPMow6G+GK3Dst+kiN/7OlimYA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","2"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"ocQNljpiz4zAy8ar4496FZrS9zG9Yp0ghPigSACuAbILAV7AaN8BrxY67pl7Nc1lKftlPAbj9n1GHqo7J1a26Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","2"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"PHHIjpwmAJNvIDa/HSO/einmWGzwxBSMu7Q0H7oLnYooLvuXcxn+gm13xBFlB4Qwd7wzESTYMwC1RLrM/uSLqQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"adPpOEHRFNCmTbdrRcT5ss47OLORuGRuoXklE5N5NX9JdoGdv2VJeevsQ5iC1BMM/uQInp/6OdD8X/lZa8dbTA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"50ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"/HSkwYBPQrHOnzxw8+7S4tZ+fd0Wz0ApjJWmX4O8WydKYlqLZEEJO57TmNA6dW+20X2kj3dBMENXiLW/Y2uPMw=="}],"memo":"12313"}
{"msg":[{"@type":"/vm.m_call","caller":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","0.0000001"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"NLGSFLEW99FWoE8bb3NyocGpCS9CQ4Co559BEIS8xfsnKiKNrqQhTCNLohePTOUuOwe6GyzcX5QbXeDGdutlVQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"Q3rWvIBZCTHMb9CzN1ys9pLP/XxHw8SWb+pfH6nJZcs2ZPpW/ruCWnhZ2zvoqoP/G6bDRB7SqtbCAslbDxeEUQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"NhMZAvmwz5g6nZqNOtyWrWltjfwhzrH6lbI6QJ/JWohrEd2op//b6Ovx6zW2hiYff5jlf7AFBtgnS0UvJdzMKw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"1ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"VMrgS4u/KDnWCSyOWR3exfYK1P+rdIo3CKI2lKIMCWw5bbUJzyWN/dhcjIrWmIadOoajFdAIdWFAl3cZGC56eA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1l47x640c4petu4chfjge3qg2uplakx78hkxqxd","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","2"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3+XBwhRNxB98UM5CE/sbFKQFUNrwd3wclkoRFngQHN4"},"signature":"HtfCfLH5xi2BfU1INF5ijD3hi6ScZIEctzzs4B2G0CgFjhjDo/7DZfdT7TgBkINF4Dha9mr7lw7RTPrmr9O1wg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","2"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"LHWEBrRvEcdszFcLCgcJJ9CmxevL3K2E52nfLzuwcBIJ44nXVZ1txvcpCwBilJxvh+NP2vJwUwivw6vpieZnkA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1k3x467uvu7z7vc87wrcyq3l9vfrw9u4kvxlxcs","amount":"12000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"n/nZ/ah3tmXavY7bFUXwvJIDc5Wb7gZsdgjM424NOPhTLtajDkP1Chggkg6OTJQZ4pE8KyF4ll2x2auVjhIWxg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1k3x467uvu7z7vc87wrcyq3l9vfrw9u4kvxlxcs","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4E79zrKKNuFgMoTPr+bclWljKQWl1Oj+19T4QlPEbHX"},"signature":"qArmrMGbb7CFocjfo5yx0PJA/a4tLZ2M8MOd43PGQDdwX1vAK/ijVlxchyt5FrSee9ZR4t1Cw50zvKbk5v8eig=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1k3x467uvu7z7vc87wrcyq3l9vfrw9u4kvxlxcs","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"10000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4E79zrKKNuFgMoTPr+bclWljKQWl1Oj+19T4QlPEbHX"},"signature":"yWGhGjGAqn/JgN3B3E8FQCszpWJLsGH4MQBJdO4ykbQBwkoi3uEWT2bAJf1wNXXnO0O7p41XmxeZegWS2Zf0YA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1k3x467uvu7z7vc87wrcyq3l9vfrw9u4kvxlxcs","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1110ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4E79zrKKNuFgMoTPr+bclWljKQWl1Oj+19T4QlPEbHX"},"signature":"K55h9oYVzLNH6RzQQodOIrQ8G0kkVjTm+UDPpf/j/3o1zp9o7Q+Npe4OkHrO0SKUspwZ0CJDFVndFQdXnYRUSQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1k3x467uvu7z7vc87wrcyq3l9vfrw9u4kvxlxcs","to_address":"g1k3x467uvu7z7vc87wrcyq3l9vfrw9u4kvxlxcs","amount":"1ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4E79zrKKNuFgMoTPr+bclWljKQWl1Oj+19T4QlPEbHX"},"signature":"NKDw0kqDADeZyRqRBwaoGk1IhwzY70Uw5kenh2ZUG4cyHVi2sKQVZDq5Qq3qwRIesuZ/K7KSaduJQOFON7FqPw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1k3x467uvu7z7vc87wrcyq3l9vfrw9u4kvxlxcs","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"wBQqh9Kx/IIVwubPTC8UOk1agQ3E0dbh9NxfctXRtid35Nye5YJ6c/Xbgu+lhDKjCop++cTgTCvWbngpJSTBGA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"YINdOtmX5JP6txs2CmJ30l3C2keMGexcJLfYjzqaNJwcPjqfK3GOg+nQRL2jXohfykSS9/oOVD3Hmkl22bCFAw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"f17osbcUqDqBHdL9VMDuPk8W4uN6nXEDV0OO7opBME1lpcuyaCyrcC5WPlXX02+kDaEPHup/jr81bALiXfivTw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","amount":"123000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"SB+Py7z1enzIQ7+Ler6r2hp4tFExMPLmfmG93e5VTyBHzJyeM56J2YV/V5mWb8qaSudL3iGBSE1YCBitnBAP8g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","package":{"Name":"mi","Path":"gno.land/r/mi","Files":[{"Name":"gno.mod","Body":"module gno.land/r/mi"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"swF+/zB0+3vWayrZWg3mHbctcfZLqXH+xWr9Kv8t/gIL/BXemC8/B35ib9Oe5bohGAxLDrVvRn+gybTqo41rpw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","package":{"Name":"mmm","Path":"gno.land/p/mmm","Files":[{"Name":"gno.mod","Body":"module gno.land/p/mmm"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"Cge9waNaVZAALV4C9PAiYlXN83+D6SUjJy6E16BUgMg6iMwWkqO5vp2i0ixOrg+szz5H6tmv8YfWop+nnCQf3A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","package":{"Name":"mmm","Path":"gno.land/p/mmm","Files":[{"Name":"gno.mod","Body":"module gno.land/p/no"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"d+Gea2UeBT6K9lXuq0nHOkIiEcdZhSQ0mJidgiK+jNBxojep4feae7Ud890+x7FcYeyrRrP9FBGZLjqHguSkng=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","package":{"Name":"mmm","Path":"gno.land/p/mmm","Files":[{"Name":"gno.mod","Body":"module gno.land/p/noy"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"OpgSv7Bt0V39JQFDRXxHt3vF3lBpqS1wKLt23TINPvtqkrvfmKVOTFkmk/+Qml4uzt6j/mzsSF7Sdd5vElSRcA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","package":{"Name":"noy","Path":"gno.land/p/noy","Files":[{"Name":"gno.mod","Body":"module gno.land/p/noy"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"tMv6lhXHjQbNc8FRnbj9zlQ+8TXgoe4LjNnhUUOHHGYUgZXKSbYinbJBMmPZfmGaJAYFXczDv3lXs6v+ByrDaw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","package":{"Name":"noy","Path":"gno.land/p/noy","Files":[{"Name":"gno.mod","Body":"module gno.land/p/noy"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"NMSI9NChtWAED6urxpnJAlbbcVd6vArv0ntb7uLS44cWi7QFof9c6HVJtJ0ykq2j0akj3l5XqFfrqKXunVTcFQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g10lvdavdw2jhwke0vry2nyd0n25wj5eae7ensuq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"rd//iAeKp1Qk9eVKEle7GInGkdqSm4afwZAyWOwBvWlGC6U7WT14Ngw1aa8yUk8SYKsA8sNy1zG1MCwEUReONA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/users","func":"GetUserByAddressOrName","args":["keyboard_worrier"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"uxLjtL8N1qhRFS2lA/AwEPKgKHwpOK2M42owicAukx5ILORY/9yGwoXe4hOZoLHPlkLawC21iyN3kLFfEOogRQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/users","func":"GetUserByAddress","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"4Iz54EyukdwaOfk3W0RaUBkBMQ1xWx1dparUd71il0UAvOBhVsqazi7up4CFpS7NieS2m/VpnRXCrbsVEMwesg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/users","func":"GetUserByAddress","args":["keyboard_worrier"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"zseyeaMOrvqQQk/r7cBoyKXHDlLIzbg+oFYLaBCToRpiOzAPFZm5I5qoapKhKPQnF9r1D0sSquMHnVY1dgIFBw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/users","func":"GetUserByAddressOrName","args":["keyboard_worrier"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"0EPdlVgMz76iU9e/HhqYkVsaaiewizBA8YutU7/xL75aY1d2gp88s6niReqX93HK+Q6g+JqL5ENm4muH1HJiUQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/users","func":"GetUserByName","args":["keyboard_worrier"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"Gk/rlWVHkOd91HySZK/FOtEl70V2gKGlnSI26wifXCgPI4gWdvxI/wVp4twes+JFcjsYzWrirqQ5db7lO6QbSg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"kIKraJmX8j818PEFY9yl0uXHSWBMAhEBWdYsT7eHdKt0jyOwh/i5aE1m5BnJjM9HNSRyQY+01JSzmYaUk/viSA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","1234567890123456789"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"oMdeDMtV/orDdvpnPV8leTIRc3VIGKdy4SKtNW3xTs92db4Cr0EgJK3x1ER5TdBfHEGN9+kTjlmDmQEEt+Q3Dg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","package":{"Name":"noy","Path":"gno.land/p/noy","Files":[{"Name":"gno.mod","Body":"module gno.land/p/noy"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"tleGH7pxsdALG/FcanNwV5F/EBlJ6pS5h2MGQBhWsNFF//KXEk/kSLTLQ0kZYWupJS8xpMP+faefS4JFNqlUfA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1sf76sqaftdnedg28wmxq6h7akhd790zz8aynz0","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlJRdvc88GCeEwDT3xFa7E2IXoAFQUEfszgSZMtpInhV"},"signature":"EMaQLwc0qW/Jwlt/OHywGOSAkuGHd1K8MJ9nX1jxhXhFxFMMh9T0zC/rtKK+Z2NjGKshRvtd8vGKg63qk2ITNQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1sf76sqaftdnedg28wmxq6h7akhd790zz8aynz0","to_address":"g1dh8yl7y0k9jylthtgc4za6mmechp3tq47lu5yp","amount":"1000000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlJRdvc88GCeEwDT3xFa7E2IXoAFQUEfszgSZMtpInhV"},"signature":"eWTjWNolEiLO2AZB2su8h5gM5t8OfR4EoP8zFQvsY+8rxZE+kPjBnYH99xoBwpPbutjHAmbFMA5MFz4zB4R7yQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mjzyk7r49ta4h6ppgv2fedgz5ek6hgyttge9pv","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7z","12"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwpFZ/Eba2YD0tSPYISodHi2gBBhx/hUg/PPZTt93aq7"},"signature":"yul18auOKr+PZ6umg9sZzPTJHIuf/VGvEkaPYMZvJ8o9U2C6d/ZqKANLwRoZu1r21zrRGtRDWenXdDCs17O8Vw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mjzyk7r49ta4h6ppgv2fedgz5ek6hgyttge9pv","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7z","3"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwpFZ/Eba2YD0tSPYISodHi2gBBhx/hUg/PPZTt93aq7"},"signature":"jWsD83h80x5JDMk/psiWTnchfgGrZrpGiUt3NABSbCxjlu0WeZkVuDvtlLjofVVBaXpD0vd6yNqrB8zlqJiMDw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g112345678901234567890123456789012345678","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"PCzgwcs+eE5OSJSM8BI2tcyMxuxIVtGlbV1D2EDekCl9xCSQ9XwfqScFrJGOADyCw5lfsbWchb9QC3zhKkhXxA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","package":{"Name":"gnopages","Path":"gno.land/r/gnoland/pages_beta","Files":[{"Name":"admin.gno","Body":"package gnopages\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadminAddr     std.Address\n\tmoderatorList avl.Tree\n\tinPause       bool\n)\n\nfunc init() {\n\t// adminAddr = std.GetOrigCaller() // FIXME: find a way to use this from the main's genesis.\n\tadminAddr = \"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq\"\n}\n\nfunc AdminSetAdminAddr(addr std.Address) {\n\tassertIsAdmin()\n\tadminAddr = addr\n}\n\nfunc AdminSetInPause(state bool) {\n\tassertIsAdmin()\n\tinPause = state\n}\n\nfunc AdminAddModerator(addr std.Address) {\n\tassertIsAdmin()\n\tmoderatorList.Set(addr.String(), true)\n}\n\nfunc AdminRemoveModerator(addr std.Address) {\n\tassertIsAdmin()\n\tmoderatorList.Set(addr.String(), false) // FIXME: delete instead?\n}\n\nfunc ModAddPost(slug, title, body, tags string) {\n\tassertIsModerator()\n\n\tcaller := std.GetOrigCaller()\n\ttagList := strings.Split(tags, \",\")\n\terr := b.NewPost(caller, slug, title, body, tagList)\n\tcheckErr(err)\n}\n\nfunc ModEditPost(slug, title, body, tags string) {\n\tassertIsModerator()\n\n\ttagList := strings.Split(tags, \",\")\n\terr := b.GetPost(slug).Update(title, body, tagList)\n\tcheckErr(err)\n}\n\nfunc isAdmin(addr std.Address) bool {\n\treturn addr == adminAddr\n}\n\nfunc isModerator(addr std.Address) bool {\n\t_, found := moderatorList.Get(addr.String())\n\treturn found\n}\n\nfunc assertIsAdmin() {\n\tcaller := std.GetOrigCaller()\n\tif !isAdmin(caller) {\n\t\tpanic(\"access restricted.\")\n\t}\n}\n\nfunc assertIsModerator() {\n\tcaller := std.GetOrigCaller()\n\tif isAdmin(caller) || isModerator(caller) {\n\t\treturn\n\t}\n\tpanic(\"access restricted\")\n}\n\nfunc assertNotInPause() {\n\tif inPause {\n\t\tpanic(\"access restricted (pause)\")\n\t}\n}\n"},{"Name":"pages.gno","Body":"package gnopages\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/blog\"\n)\n\nvar b = \u0026blog.Blog{\n\tTitle:  \"Gnoland's Pages\",\n\tPrefix: \"/r/gnoland/pages:\",\n}\n\nfunc init(){\n\t_ = b.NewPost(\"\", \"gor\", \"Game of Realms\", \"Lorem Ipsum\", nil)\n\t_ = b.NewPost(\"\", \"events\", \"Events\", \"Lorem Ipsum\", nil)\n}\n\nfunc Render(path string) string {\n\treturn b.Render(path)\n}\n"},{"Name":"pages_test.gno","Body":"package gnopages\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n)\n\nfunc TestPackage(t *testing.T) {\n\tstd.TestSetOrigCaller(std.Address(\"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq\"))\n\n\tauthor := std.GetOrigCaller()\n\n\t// by default, lorem ipsum posts\n\t{\n\t\tgot := Render(\"\")\n\t\texpected := `\n# Gnoland's Pages\n\n## [\u0026#9656; Events](/r/gnoland/pages:p/events)\n\n## [\u0026#9656; Game of Realms](/r/gnoland/pages:p/gor)\n`\n\t\tassertMDEquals(t, got, expected)\n\t}\n}\n\nfunc assertMDEquals(t *testing.T, got, expected string) {\n\tt.Helper()\n\texpected = strings.TrimSpace(expected)\n\tgot = strings.TrimSpace(got)\n\tif expected != got {\n\t\tt.Errorf(\"invalid render output.\\nexpected %q.\\ngot      %q.\", expected, got)\n\t}\n}\n"},{"Name":"util.gno","Body":"package gnopages\n\nfunc checkErr(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"OhXlOPpwIRrgvk/B5AUofeK96bzPISIjzYsZDX3fwcdS343TY4stZT+KqUYZUV1JgdNNhhJoBVC0ovONMwtgxQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","package":{"Name":"gnopages","Path":"gno.land/r/gnoland/pages_beta","Files":[{"Name":"admin.gno","Body":"package gnopages\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadminAddr     std.Address\n\tmoderatorList avl.Tree\n\tinPause       bool\n)\n\nfunc init() {\n\t// adminAddr = std.GetOrigCaller() // FIXME: find a way to use this from the main's genesis.\n\tadminAddr = \"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq\"\n}\n\nfunc AdminSetAdminAddr(addr std.Address) {\n\tassertIsAdmin()\n\tadminAddr = addr\n}\n\nfunc AdminSetInPause(state bool) {\n\tassertIsAdmin()\n\tinPause = state\n}\n\nfunc AdminAddModerator(addr std.Address) {\n\tassertIsAdmin()\n\tmoderatorList.Set(addr.String(), true)\n}\n\nfunc AdminRemoveModerator(addr std.Address) {\n\tassertIsAdmin()\n\tmoderatorList.Set(addr.String(), false) // FIXME: delete instead?\n}\n\nfunc ModAddPost(slug, title, body, tags string) {\n\tassertIsModerator()\n\n\tcaller := std.GetOrigCaller()\n\ttagList := strings.Split(tags, \",\")\n\terr := b.NewPost(caller, slug, title, body, tagList)\n\tcheckErr(err)\n}\n\nfunc ModEditPost(slug, title, body, tags string) {\n\tassertIsModerator()\n\n\ttagList := strings.Split(tags, \",\")\n\terr := b.GetPost(slug).Update(title, body, tagList)\n\tcheckErr(err)\n}\n\nfunc isAdmin(addr std.Address) bool {\n\treturn addr == adminAddr\n}\n\nfunc isModerator(addr std.Address) bool {\n\t_, found := moderatorList.Get(addr.String())\n\treturn found\n}\n\nfunc assertIsAdmin() {\n\tcaller := std.GetOrigCaller()\n\tif !isAdmin(caller) {\n\t\tpanic(\"access restricted.\")\n\t}\n}\n\nfunc assertIsModerator() {\n\tcaller := std.GetOrigCaller()\n\tif isAdmin(caller) || isModerator(caller) {\n\t\treturn\n\t}\n\tpanic(\"access restricted\")\n}\n\nfunc assertNotInPause() {\n\tif inPause {\n\t\tpanic(\"access restricted (pause)\")\n\t}\n}\n"},{"Name":"pages.gno","Body":"package gnopages\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/blog\"\n)\n\nvar b = \u0026blog.Blog{\n\tTitle:  \"Gnoland's Pages\",\n\tPrefix: \"/r/gnoland/pages:\",\n}\n\nfunc init(){\n\t_ = b.NewPost(\"\", \"gor\", \"Game of Realms\", \"Lorem Ipsum\", nil)\n\t_ = b.NewPost(\"\", \"events\", \"Events\", \"Lorem Ipsum\", nil)\n}\n\nfunc Render(path string) string {\n\treturn b.Render(path)\n}\n"},{"Name":"pages_test.gno","Body":"package gnopages\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n)\n\nfunc TestPackage(t *testing.T) {\n\tstd.TestSetOrigCaller(std.Address(\"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq\"))\n\n\tauthor := std.GetOrigCaller()\n\n\t// by default, lorem ipsum posts\n\t{\n\t\tgot := Render(\"\")\n\t\texpected := `\n# Gnoland's Pages\n\n## [\u0026#9656; Events](/r/gnoland/pages:p/events)\n\n## [\u0026#9656; Game of Realms](/r/gnoland/pages:p/gor)\n`\n\t\tassertMDEquals(t, got, expected)\n\t}\n}\n\nfunc assertMDEquals(t *testing.T, got, expected string) {\n\tt.Helper()\n\texpected = strings.TrimSpace(expected)\n\tgot = strings.TrimSpace(got)\n\tif expected != got {\n\t\tt.Errorf(\"invalid render output.\\nexpected %q.\\ngot      %q.\", expected, got)\n\t}\n}\n"},{"Name":"util.gno","Body":"package gnopages\n\nfunc checkErr(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"trLBgba2uTzZmQeFJRs8X14oBALLOMd1SE+Z0iPLNfwxAifWJ+gSn4GnvpdT3NqKaaTzv+k0CmozImT15/9KkA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","package":{"Name":"gnopages","Path":"gno.land/r/gnoland/pages_beta","Files":[{"Name":"admin.gno","Body":"package gnopages\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadminAddr     std.Address\n\tmoderatorList avl.Tree\n\tinPause       bool\n)\n\nfunc init() {\n\t// adminAddr = std.GetOrigCaller() // FIXME: find a way to use this from the main's genesis.\n\tadminAddr = \"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq\"\n}\n\nfunc AdminSetAdminAddr(addr std.Address) {\n\tassertIsAdmin()\n\tadminAddr = addr\n}\n\nfunc AdminSetInPause(state bool) {\n\tassertIsAdmin()\n\tinPause = state\n}\n\nfunc AdminAddModerator(addr std.Address) {\n\tassertIsAdmin()\n\tmoderatorList.Set(addr.String(), true)\n}\n\nfunc AdminRemoveModerator(addr std.Address) {\n\tassertIsAdmin()\n\tmoderatorList.Set(addr.String(), false) // FIXME: delete instead?\n}\n\nfunc ModAddPost(slug, title, body, tags string) {\n\tassertIsModerator()\n\n\tcaller := std.GetOrigCaller()\n\ttagList := strings.Split(tags, \",\")\n\terr := b.NewPost(caller, slug, title, body, tagList)\n\tcheckErr(err)\n}\n\nfunc ModEditPost(slug, title, body, tags string) {\n\tassertIsModerator()\n\n\ttagList := strings.Split(tags, \",\")\n\terr := b.GetPost(slug).Update(title, body, tagList)\n\tcheckErr(err)\n}\n\nfunc isAdmin(addr std.Address) bool {\n\treturn addr == adminAddr\n}\n\nfunc isModerator(addr std.Address) bool {\n\t_, found := moderatorList.Get(addr.String())\n\treturn found\n}\n\nfunc assertIsAdmin() {\n\tcaller := std.GetOrigCaller()\n\tif !isAdmin(caller) {\n\t\tpanic(\"access restricted.\")\n\t}\n}\n\nfunc assertIsModerator() {\n\tcaller := std.GetOrigCaller()\n\tif isAdmin(caller) || isModerator(caller) {\n\t\treturn\n\t}\n\tpanic(\"access restricted\")\n}\n\nfunc assertNotInPause() {\n\tif inPause {\n\t\tpanic(\"access restricted (pause)\")\n\t}\n}\n"},{"Name":"pages.gno","Body":"package gnopages\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/blog\"\n)\n\nvar b = \u0026blog.Blog{\n\tTitle:  \"Gnoland's Pages\",\n\tPrefix: \"/r/gnoland/pages:\",\n}\n\nfunc init(){\n\t_ = b.NewPost(\"\", \"gor\", \"Game of Realms\", \"Lorem Ipsum\", nil)\n\t_ = b.NewPost(\"\", \"events\", \"Events\", \"Lorem Ipsum\", nil)\n}\n\nfunc Render(path string) string {\n\treturn b.Render(path)\n}\n"},{"Name":"pages_test.gno","Body":"package gnopages\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n)\n\nfunc TestPackage(t *testing.T) {\n\tstd.TestSetOrigCaller(std.Address(\"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq\"))\n\n\tauthor := std.GetOrigCaller()\n\n\t// by default, lorem ipsum posts\n\t{\n\t\tgot := Render(\"\")\n\t\texpected := `\n# Gnoland's Pages\n\n## [\u0026#9656; Events](/r/gnoland/pages:p/events)\n\n## [\u0026#9656; Game of Realms](/r/gnoland/pages:p/gor)\n`\n\t\tassertMDEquals(t, got, expected)\n\t}\n}\n\nfunc assertMDEquals(t *testing.T, got, expected string) {\n\tt.Helper()\n\texpected = strings.TrimSpace(expected)\n\tgot = strings.TrimSpace(got)\n\tif expected != got {\n\t\tt.Errorf(\"invalid render output.\\nexpected %q.\\ngot      %q.\", expected, got)\n\t}\n}\n"},{"Name":"util.gno","Body":"package gnopages\n\nfunc checkErr(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"zfMjNw1bPoU0YJe9ZbwK9pFWwaNTFyT9FNXLmGPP7q181ybKC2D/QbXYtc3QxwiFP3TcDrhTeqNeXqpXMq/C3w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1sf76sqaftdnedg28wmxq6h7akhd790zz8aynz0","to_address":"g1g84try906zvyuzcd6lcdc8sg00scqwm3ajzyll","amount":"9998998999997ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlJRdvc88GCeEwDT3xFa7E2IXoAFQUEfszgSZMtpInhV"},"signature":"OTJvuwiVhKX8g4vLJ9PYnUYpX2g7PXeo7u9PYQyJLkZnD8Zy1aeZmsUVhK7PpJ8h2TeUEZVWtORGw1jUl9Z8Jw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g84try906zvyuzcd6lcdc8sg00scqwm3ajzyll","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","woongjae",""]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1gRZFloPKe1mAG7Qbyk6/ZOsGbHdzpxkXrbzM015yDv"},"signature":"sb52KDeBEchj9yXfHJVLLcgMnvV+aP9f5cfDbsMWimkB+rdPrP4Knjwiwid7cjlIfX2qMChmej2Z0s9k3aAuvw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1uprcpgrkm5jz78hsd5s4emem2asgjykecd7ust","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"WTQu6AuptuCxHrPk2TUcjWHyOs/TbZ0dzTuIwEy5aYhT5SYyI57VTNP5NOcYaCC5ZQA47Cug4bQowKYhQVXjjg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1g84try906zvyuzcd6lcdc8sg00scqwm3ajzyll","package":{"Name":"adena","Path":"gno.land/r/adena/usernames","Files":[{"Name":"usernames.gno","Body":"package adena\n\nimport (\n\tusers \"gno.land/r/demo/users\"\n)\n\nfunc GetAddressByUsername(username string) string {\n    user := users.GetUserByName(username)\n\n    if user == nil {\n        return \"\"\n    }\n\n    return string(user.Address())\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1gRZFloPKe1mAG7Qbyk6/ZOsGbHdzpxkXrbzM015yDv"},"signature":"1Oyqa4FuBnsCuLJ6tfCRACUeNO15WAAinyJqZzDd6VcdHETXIe7zj22EtbKKuMqjWtZ3ghUGz6Cih1uAR3U4Qg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1g84try906zvyuzcd6lcdc8sg00scqwm3ajzyll","to_address":"g1g84try906zvyuzcd6lcdc8sg00scqwm3ajzyll","amount":"1111ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1gRZFloPKe1mAG7Qbyk6/ZOsGbHdzpxkXrbzM015yDv"},"signature":"n0XKSi73OVaTVT2Sjx+9GIRrHMQC+h5l3rllHYuwTchJbtfG6gX4w1NMZyTZ4Z++tzmtdTxFuk9oCCZfEpVmQA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/foo20","func":"BalanceOf","args":["g1hxecqgcv4f0p7s7ap6t20vaeeuvqgvl9qtchr6"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"OmmIW/wjau3QjEHi++TFHorwL17sLyIo2ZwEIUzRAb5yFEGilLImchNMl2JdVQJU7qOvDrpgYxyzD8jH39g+IA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["man_in_black","12345"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"f3n3m96N3OZMQ3SZRL84Gv2FmxI3buUUh1IpuJGc3MgJy7pihNfk1PbfNHnHYINQrQIP7eo5iVir0PEeUOzNcw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/foo20","func":"BalanceOf","args":["g1hxecqgcv4f0p7s7ap6t20vaeeuvqgvl9qtchr6"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"TMtARr/aybABxiWj+A/S1D5M95tX3gmvI3QLvpz4QfF4pslKklwFLLgpGsINvtE3CeUfMPGFvJ21xtwOrFc9KQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","to_address":"g17w4yv87n0jm9h6y8m9g7wuuhddqhshnnn97sn9","amount":"100000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"lhVu3rLQTKCuFevqSqdbycO1orM1o3LUOTR/Zj1lvcRjLvxrFRmWLipYlVlitqOdR7polp64dQ4gL76GObDBhg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lrgyaymlhp8jm0gu6qwskpgx2t9fkkdmder8wd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"+bLux4wiQzGVXe6YPgCsDGsaqbYjF/YMj3CLXj7Gz9p9ThW6uBhY//O4yNrvN0YZUuJCDov2A9RgjUmqiniVyg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lrgyaymlhp8jm0gu6qwskpgx2t9fkkdmder8wd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"/5cu9c6iYv7s9sa8ESucNOggdr9vAuC8qLI0XRWl3JM3tMtGPb2weJrTJpUbUwx61vm8W00lpd6vtTLXpF9AcA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lrgyaymlhp8jm0gu6qwskpgx2t9fkkdmder8wd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"PIOA6btf/w+pdVFDwUVYzirxgmzKZ5UkKCYRW2hUfpdcBWNp2xju2Xf1bm2b052o6Ky8LfGA9k242FlPNcxDbg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","norman",""]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"rraH3Zm/qgS6iNMwS0y7rCMQiMnM/sSbZoyC20NOZlEx7Mze6uk/sPQkF+zWSWfOT2lMftpw7K7jxCf+mf4VnA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"demo","Path":"gno.land/r/demo/hello_gnogno","Files":[{"Name":"contract.gno","Body":"package demo\n\nfunc Hello(name string) string {\n\treturn \"Hello \" + name + \"!\"\n}\n"},{"Name":"contract_test.gno","Body":"package demo\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\t{\n\t\tgot := Hello(\"People\")\n\t\texpected := \"Hello People!\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\t{\n\t\tgot := Hello(\"\")\n\t\texpected := \"Hello !\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"1s2z9UmaYPNw6H27KNzjeUoDUNLaCYF/JD52DVljdWN0BNQhrySSngBbD6ePz5IuFuo70z2N4N6i2cQYOn1yUw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"demo","Path":"gno.land/r/demo/hello_gnogno","Files":[{"Name":"contract.gno","Body":"package demo\n\nfunc Hello(name string) string {\n\treturn \"Hello \" + name + \"!\"\n}\n"},{"Name":"contract_test.gno","Body":"package demo\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\t{\n\t\tgot := Hello(\"People\")\n\t\texpected := \"Hello People!\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\t{\n\t\tgot := Hello(\"\")\n\t\texpected := \"Hello !\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"yHstbfiQ9XyP8ojmW790tp+ksHQ3zPXzU9r47FH7kSI54aOREgAoE7NwTRbMguUm+SGequ4D/qcsXGfpjnz8GQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"demo","Path":"gno.land/r/demo/hello_nono","Files":[{"Name":"contract.gno","Body":"package demo\n\nfunc Hello(name string) string {\n\treturn \"Hello \" + name + \"!\"\n}\n"},{"Name":"contract_test.gno","Body":"package demo\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\t{\n\t\tgot := Hello(\"People\")\n\t\texpected := \"Hello People!\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\t{\n\t\tgot := Hello(\"\")\n\t\texpected := \"Hello !\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"9D/Vd5gMZjeDGGXRMHT2hpUQ7dpoSagNkX/QpvNUZgdhVrYdxNRNoXSVOV4zKBPjOVskqNTQTIMd2z8mYhaWPw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"H6Wb1owfOVXlnqoaLfSxTqlGWTFH5UEXIaPhCKskkPFJXu6Xe6LnqMhGs8tgGJYvKMj/ABbZum6UVS49gMEoqg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1g84try906zvyuzcd6lcdc8sg00scqwm3ajzyll","1000000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"EFcwNP12fH0H9yZyxyzArM3CqqqO26JTqfj74WvuAzFJM1ZUfMe5Sn+ij0MQTt9T37M6jlPeldc34WcK22sLwA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g84try906zvyuzcd6lcdc8sg00scqwm3ajzyll","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","100"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1gRZFloPKe1mAG7Qbyk6/ZOsGbHdzpxkXrbzM015yDv"},"signature":"736HSbffCEgMKGCQ4MA0PqaiG3jzVaQ6zW6uUaSlKG0BhVMFSHLBjs1arb0d+J/3v2WCwMCnwel3AZ7YqtqjdA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g84try906zvyuzcd6lcdc8sg00scqwm3ajzyll","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["@keyboard_worrier","100"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1gRZFloPKe1mAG7Qbyk6/ZOsGbHdzpxkXrbzM015yDv"},"signature":"BqfMNAD2H4YO4+x0ACZr0Z227B/gZDAtfb144XTNJkJsT8K0u9B81qBzxpWOIU9Y4nSrBwUAL+uSrtrPm7gWgA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g84try906zvyuzcd6lcdc8sg00scqwm3ajzyll","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["@keyboard_worrier1","100"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1gRZFloPKe1mAG7Qbyk6/ZOsGbHdzpxkXrbzM015yDv"},"signature":"/92L1vPlHPRgPF5eJVIFqb5GMbtdgBMuwcDeTMcX7iBRoTLo4R5l5XmxAnI18iwZJMUsQhMm/28QXhRWGhTQqA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g84try906zvyuzcd6lcdc8sg00scqwm3ajzyll","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["keyboard_worrier","100"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1gRZFloPKe1mAG7Qbyk6/ZOsGbHdzpxkXrbzM015yDv"},"signature":"JDMUsI7S2PQkZsTIF8WMD076i90/2r8e5NPQ2yG/A8lwES4kfrvCiBK8ML+o//CxDOBuj94zlEOSdGr3gaBUSA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g84try906zvyuzcd6lcdc8sg00scqwm3ajzyll","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["keyboard_worrier1","100"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1gRZFloPKe1mAG7Qbyk6/ZOsGbHdzpxkXrbzM015yDv"},"signature":"jjKBVNYXEkuJl69updd804lV7qP0jS2Q8jLB4J8VcbUQ7MpUnXhhm8OlmvAPA1s6Gwo/GC6g7hzG6tMJvLyUBA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"5QMEJZ/NwmsFCnBlF8gtASdM7hCOrXdFnNNiQzt0iFk4XMTeNGCRCnHqISOkgJbbw2Zap5ZCGZadm6MtUHrVHw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["@hyojin","12345"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"Hn0NQ3g96XwUFId2HteWt/vY2wxIHdzZzSM5eLRXnA9gcVt15vPiYy4N97OO7msmLRb7qLOJrbCTtkHw6ldmzw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"rP67q1Eo8r7Hf4ImzlH/9Vg2GUrr6pOYtUAqmIrG4fEREZInravF8MOSXVjOG/5Lh3j3i3KdVntXO13ULBCXpw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"aMLIuDB9H/6WARxmno69EmuZuSU1db204jCH0/Gm6QcrLJQVytEvedEBTZFHAXmib7JKWMOli2uRGM0Ei/CBjw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"3ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"gtq7jen0+lwYF4AyFTv1FikyGraPc39TOs1D154XJSo+2bsclGlciaTrZQO+mwNcVPXOd4bxnX05B06s8O684w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ckn395mpttp0vupgtratyufdaakgh8jgkmr3ym","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","my_account",""]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aszr4WZZtoqvpWfpKQFXAT8Bx/fH234W2oIq4eQnTnbI"},"signature":"qweffUIJHvhYBQeKvyXrpOpBqF/4cxctDZex7aglhtcQ4jsqz00G8XQ4KitUtQlib9cLhoRzdOn6ylrEntkrMQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ckn395mpttp0vupgtratyufdaakgh8jgkmr3ym","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","my_account",""]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aszr4WZZtoqvpWfpKQFXAT8Bx/fH234W2oIq4eQnTnbI"},"signature":"CJJ3l5kX4F85FeALkJpB919sKnbAWSQVa2h7oFjyzJIL7m0KXWLibkiXTW5EbZZndMpHWgSmuAuA14J3uF2+RQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ckn395mpttp0vupgtratyufdaakgh8jgkmr3ym","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","yo1110",""]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aszr4WZZtoqvpWfpKQFXAT8Bx/fH234W2oIq4eQnTnbI"},"signature":"JgZBmn2vJlS7ri2hOu5snLgEJk0JnVjIqcqG+9GIyMN/1bu9jH/m3mkrMkkqZG650aNcSy7RRXuPfBmOT9t8kg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1mw9r7kghwghdea6nhe52av5uw0gnfdr4yvwe8c","to_address":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","amount":"100000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoD5XtwERf3WfB7B+FqeuXmQnUotS2EMUATisnYTbcSa"},"signature":"N9Tb1ndLziUl5KxxI4vQcsFk5QlYaF+n2ZB6+v/zndoEeJ7lcKNMOSw5B9WC3CeusqrCyIXpMIo62fmyKs4Axg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","normadena",""]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"SRfBAlDenA3OmmfUN/mW+hKMs5Dskx3u/oOltWc8BEwhvM0BpJtTg3JFNo2KP9t1wEGTrHgTMkdxQRFIeWIv/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","normadena",""]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"OoWQkir06pvET/TVD6ziDbsrTUau/dwyJzEsmtt8M6gGO5Ga2ajYS+UoqowlXzfb0kl5nXoSVyg/tddRgonmTQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1mw9r7kghwghdea6nhe52av5uw0gnfdr4yvwe8c","to_address":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","amount":"150000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoD5XtwERf3WfB7B+FqeuXmQnUotS2EMUATisnYTbcSa"},"signature":"llX+oAjuV5jwFhejcPq4G616uEDSy1VE2gSl86jqPcBW/C1LPvvSbXHinl7HesFYf1Cw9kDAdP3TBq6/snla2A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","normadena",""]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"a0KDMt9T6JAqGZy4d9Rs1DK/5XvvgANwjJHFgn+eVDRNpiYHslkz+x9X25dH85xWl4tkHDiy513AFNRh65n1rQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"markdown_utils","Path":"gno.land/p/demo/markdown_utils","Files":[{"Name":"markdown_utils.gno","Body":"package markdown_utils\n\nimport (\n\t\"strings\"\n)\n\n// this function take as input a markdown string and add an indentation level to markdown titles\nfunc Indent(markdown string) string {\n\t// split the markdown string into lines\n\tlines := strings.Split(markdown, \"\\n\")\n\n\t// iterate over the lines\n\tfor i, line := range lines {\n\t\t// if the line starts with a markdown title\n\t\tif strings.HasPrefix(line, \"#\") {\n\t\t\t// add an indentation level to the title\n\t\t\tlines[i] = \"#\" + line\n\t\t}\n\t}\n\n\t// join the lines back into a string\n\treturn strings.Join(lines, \"\\n\")\n}\n\n// thanks copilot this is perfect xD\n// I just renamed it, AddIndentationLevelToMarkdownTitles was too long\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"4ZN3MxOm2dR6a34sJE88R0AbM2ixeQePBZmJggIqDnl+NdkbFwBMr8i+QNFYSyEKO3A5YjjaNMcZz6YE+G1FXA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"grc4_group","Path":"gno.land/p/demo/grc/grc4_group","Files":[{"Name":"grc4_group.gno","Body":"package grc4_group\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n// TODO: fully match cw4 api where it makes sense\ntype IGRC4Group interface {\n\tUpdateMembers(toAdd []Member, toRemove []std.Address)\n\t// AddHook()\n\t// RemoveHook()\n\n\tMember(address std.Address) (uint64, bool)\n\tListMembers() *avl.Tree\n\tTotalWeight() uint64\n\t// Hooks()\n\n\tRender(path string) string\n}\n\ntype Member struct {\n\tAddress std.Address\n\tWeight  uint64\n}\n\ntype grc4Group struct {\n\tIGRC4Group\n\n\tadmin       std.Address\n\tmembers     *avl.Tree\n\ttotalWeight uint64\n}\n\nfunc NewGRC4Group(members []Member) IGRC4Group {\n\tAssertUniqueMembers(members)\n\n\ttotalWeight := uint64(0)\n\tfor _, member := range members {\n\t\ttotalWeight += member.Weight\n\t}\n\n\tmembersTree := avl.NewTree()\n\tfor _, member := range members {\n\t\tmembersTree.Set(member.Address.String(), member.Weight)\n\t}\n\n\treturn \u0026grc4Group{\n\t\tmembers:     membersTree,\n\t\ttotalWeight: totalWeight,\n\t}\n}\n\nfunc (g *grc4Group) UpdateMembers(toAdd []Member, toRemove []std.Address) {\n\tAssertUniqueMembers(toAdd)\n\n\tfor _, member := range toAdd {\n\t\tstrAddr := member.Address.String()\n\t\toldWeight, has := g.members.Get(strAddr)\n\t\tif has {\n\t\t\tg.totalWeight -= oldWeight.(uint64)\n\t\t}\n\t\tg.members.Set(strAddr, member.Weight)\n\t\tg.totalWeight += member.Weight\n\t}\n\n\tfor _, addr := range toRemove {\n\t\tstrAddr := addr.String()\n\t\tweight, has := g.members.Get(strAddr)\n\t\tif has {\n\t\t\tg.totalWeight -= weight.(uint64)\n\t\t}\n\t\tg.members.Remove(strAddr)\n\t}\n\n\t// TODO: call hooks\n}\n\nfunc (g *grc4Group) Admin() std.Address {\n\treturn g.admin\n}\n\nfunc (g *grc4Group) Member(addr std.Address) (uint64, bool) {\n\tweight, has := g.members.Get(addr.String())\n\treturn weight.(uint64), has\n}\n\nfunc (g *grc4Group) ListMembers() *avl.Tree {\n\treturn g.members\n}\n\nfunc (g *grc4Group) TotalWeight() uint64 {\n\treturn g.totalWeight\n}\n\nfunc (g *grc4Group) Render(path string) string {\n\tmembersCount := g.members.Size()\n\tmembersString := strconv.Itoa(membersCount) + \" member\"\n\tif membersCount \u003e 1 {\n\t\tmembersString += \"s\"\n\t}\n\n\tr := \"# GRC4 Group\" + \"\\n\" +\n\t\t\"## Summary\" + \"\\n\" +\n\t\t\"Admin: \" + g.admin.String() + \"\\n\\n\" +\n\t\tmembersString + \"\\n\\n\" +\n\t\t\"Total weight: \" + strconv.FormatUint(g.totalWeight, 10) + \"\\n\" +\n\t\t\"## Members\" + \"\\n\"\n\n\tg.members.Iterate(\"\", \"\", func(key string, weight interface{}) bool {\n\t\tr += \"- \" + key + \" (\" + strconv.FormatUint(weight.(uint64), 10) + \")\" + \"\\n\"\n\t\treturn false\n\t})\n\n\treturn r\n}\n\nfunc (g *grc4Group) AssertIsAdmin() {\n\tcaller := std.GetOrigCaller()\n\tif caller != g.admin {\n\t\tpanic(errors.New(\"you're not admin\"))\n\t}\n}\n"},{"Name":"grc4_group_test.gno","Body":"package grc4_group\n\nimport (\n\t\"std\"\n\t\"testing\"\n)\n\nfunc Test(t *testing.T) {\n\t{\n\t\th := NewGRC4Group(nil)\n\t\tgot := h.TotalWeight()\n\t\texpected := 0\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\t{\n\t\th := NewGRC4Group([]Member{\n\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 11},\n\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 31},\n\t\t})\n\t\tgot := h.TotalWeight()\n\t\texpected := 42\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\t{\n\t\tfunc() {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r == nil {\n\t\t\t\t\tt.Fatalf(\"expected panic, got none.\")\n\t\t\t\t}\n\t\t\t}()\n\t\t\th := NewGRC4Group([]Member{\n\t\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 1},\n\t\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 1},\n\t\t\t})\n\t\t}()\n\t}\n\t{\n\t\th := NewGRC4Group([]Member{\n\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 11},\n\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 31},\n\t\t})\n\t\th.Render(\"\")\n\t}\n\t{\n\t\th := NewGRC4Group([]Member{\n\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 11},\n\t\t})\n\t\th.UpdateMembers([]Member{\n\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 31},\n\t\t},\n\t\t\t[]std.Address{\n\t\t\t\tstd.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"),\n\t\t\t},\n\t\t)\n\t\tgot := h.TotalWeight()\n\t\texpected := 31\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t\tmembers := h.ListMembers()\n\t\tif members.Size() != 1 {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", 1, members.Size())\n\t\t}\n\t\taddr, weight := members.GetByIndex(0)\n\t\tif addr != \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\" {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", addr)\n\t\t}\n\t\tif weight.(uint64) != 31 {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", 31, weight.(uint64))\n\t\t}\n\t}\n\t{\n\t\th := NewGRC4Group(nil)\n\t\tfunc() {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r == nil {\n\t\t\t\t\tt.Fatalf(\"expected panic, got none.\")\n\t\t\t\t}\n\t\t\t}()\n\t\t\th.UpdateMembers([]Member{\n\t\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 1},\n\t\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 1},\n\t\t\t}, nil)\n\t\t}()\n\t}\n}\n"},{"Name":"utils.gno","Body":"package grc4_group\n\nimport (\n\t\"gno.land/p/demo/avl\"\n)\n\nfunc AssertUniqueMembers(members []Member) {\n\tseen := avl.NewTree()\n\tfor _, member := range members {\n\t\tmemberAddress := member.Address.String()\n\t\tif seen.Has(memberAddress) {\n\t\t\tpanic(\"duplicate member: \" + memberAddress)\n\t\t}\n\t\tseen.Set(memberAddress, true)\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"aRHUllLMB+lB8OnWD6OGI1CbuAWwbfwJxB1g0XkBGatPlwEgImHOCB/PVJtcpGT7gJY6Kn9iTd5YZavcbgAhsQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"grc4_group","Path":"gno.land/p/demo/grc/grc4_group","Files":[{"Name":"grc4_group.gno","Body":"package grc4_group\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n// TODO: fully match cw4 api where it makes sense\ntype IGRC4Group interface {\n\tUpdateMembers(toAdd []Member, toRemove []std.Address)\n\t// AddHook()\n\t// RemoveHook()\n\n\tMember(address std.Address) (uint64, bool)\n\t// ListMembers() *avl.Tree // dev\n\tListMembers() *avl.MutTree // test3\n\tTotalWeight() uint64\n\t// Hooks()\n\n\tRender(path string) string\n}\n\ntype Member struct {\n\tAddress std.Address\n\tWeight  uint64\n}\n\ntype grc4Group struct {\n\tIGRC4Group\n\n\tadmin std.Address\n\t// members     *avl.Tree // dev\n\tmembers     *avl.MutTree // test3\n\ttotalWeight uint64\n}\n\nfunc NewGRC4Group(members []Member) IGRC4Group {\n\tAssertUniqueMembers(members)\n\n\ttotalWeight := uint64(0)\n\tfor _, member := range members {\n\t\ttotalWeight += member.Weight\n\t}\n\n\t/* dev\n\tmembersTree := avl.NewTree()\n\t*/\n\n\t//* test\n\tmembersTree := avl.NewMutTree()\n\t//*/\n\n\tfor _, member := range members {\n\t\tmembersTree.Set(member.Address.String(), member.Weight)\n\t}\n\n\treturn \u0026grc4Group{\n\t\tmembers:     membersTree,\n\t\ttotalWeight: totalWeight,\n\t}\n}\n\nfunc (g *grc4Group) UpdateMembers(toAdd []Member, toRemove []std.Address) {\n\tAssertUniqueMembers(toAdd)\n\n\tfor _, member := range toAdd {\n\t\tstrAddr := member.Address.String()\n\t\toldWeight, has := g.members.Get(strAddr)\n\t\tif has {\n\t\t\tg.totalWeight -= oldWeight.(uint64)\n\t\t}\n\t\tg.members.Set(strAddr, member.Weight)\n\t\tg.totalWeight += member.Weight\n\t}\n\n\tfor _, addr := range toRemove {\n\t\tstrAddr := addr.String()\n\t\tweight, has := g.members.Get(strAddr)\n\t\tif has {\n\t\t\tg.totalWeight -= weight.(uint64)\n\t\t}\n\t\tg.members.Remove(strAddr)\n\t}\n\n\t// TODO: call hooks\n}\n\nfunc (g *grc4Group) Admin() std.Address {\n\treturn g.admin\n}\n\nfunc (g *grc4Group) Member(addr std.Address) (uint64, bool) {\n\tweight, has := g.members.Get(addr.String())\n\treturn weight.(uint64), has\n}\n\n// func (g *grc4Group) ListMembers() *avl.Tree { // dev\nfunc (g *grc4Group) ListMembers() *avl.MutTree { // test3\n\treturn g.members\n}\n\nfunc (g *grc4Group) TotalWeight() uint64 {\n\treturn g.totalWeight\n}\n\nfunc (g *grc4Group) Render(path string) string {\n\tmembersCount := g.members.Size()\n\tmembersString := strconv.Itoa(membersCount) + \" member\"\n\tif membersCount \u003e 1 {\n\t\tmembersString += \"s\"\n\t}\n\n\tr := \"# GRC4 Group\" + \"\\n\" +\n\t\t\"## Summary\" + \"\\n\" +\n\t\t\"Admin: \" + g.admin.String() + \"\\n\\n\" +\n\t\tmembersString + \"\\n\\n\" +\n\t\t\"Total weight: \" + strconv.FormatUint(g.totalWeight, 10) + \"\\n\" +\n\t\t\"## Members\" + \"\\n\"\n\n\tg.members.Iterate(\"\", \"\", func(key string, weight interface{}) bool {\n\t\tr += \"- \" + key + \" (\" + strconv.FormatUint(weight.(uint64), 10) + \")\" + \"\\n\"\n\t\treturn false\n\t})\n\n\treturn r\n}\n\nfunc (g *grc4Group) AssertIsAdmin() {\n\tcaller := std.GetOrigCaller()\n\tif caller != g.admin {\n\t\tpanic(errors.New(\"you're not admin\"))\n\t}\n}\n"},{"Name":"grc4_group_test.gno","Body":"package grc4_group\n\nimport (\n\t\"std\"\n\t\"testing\"\n)\n\nfunc Test(t *testing.T) {\n\t{\n\t\th := NewGRC4Group(nil)\n\t\tgot := h.TotalWeight()\n\t\texpected := 0\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\t{\n\t\th := NewGRC4Group([]Member{\n\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 11},\n\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 31},\n\t\t})\n\t\tgot := h.TotalWeight()\n\t\texpected := 42\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\t{\n\t\tfunc() {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r == nil {\n\t\t\t\t\tt.Fatalf(\"expected panic, got none.\")\n\t\t\t\t}\n\t\t\t}()\n\t\t\th := NewGRC4Group([]Member{\n\t\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 1},\n\t\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 1},\n\t\t\t})\n\t\t}()\n\t}\n\t{\n\t\th := NewGRC4Group([]Member{\n\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 11},\n\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 31},\n\t\t})\n\t\th.Render(\"\")\n\t}\n\t{\n\t\th := NewGRC4Group([]Member{\n\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 11},\n\t\t})\n\t\th.UpdateMembers([]Member{\n\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 31},\n\t\t},\n\t\t\t[]std.Address{\n\t\t\t\tstd.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"),\n\t\t\t},\n\t\t)\n\t\tgot := h.TotalWeight()\n\t\texpected := 31\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t\tmembers := h.ListMembers()\n\t\tif members.Size() != 1 {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", 1, members.Size())\n\t\t}\n\t\taddr, weight := members.GetByIndex(0)\n\t\tif addr != \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\" {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", addr)\n\t\t}\n\t\tif weight.(uint64) != 31 {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", 31, weight.(uint64))\n\t\t}\n\t}\n\t{\n\t\th := NewGRC4Group(nil)\n\t\tfunc() {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r == nil {\n\t\t\t\t\tt.Fatalf(\"expected panic, got none.\")\n\t\t\t\t}\n\t\t\t}()\n\t\t\th.UpdateMembers([]Member{\n\t\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 1},\n\t\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 1},\n\t\t\t}, nil)\n\t\t}()\n\t}\n}\n"},{"Name":"utils.gno","Body":"package grc4_group\n\nimport (\n\t\"gno.land/p/demo/avl\"\n)\n\nfunc AssertUniqueMembers(members []Member) {\n\t// seen := avl.NewTree() // dev\n\tseen := avl.NewMutTree() // test3\n\tfor _, member := range members {\n\t\tmemberAddress := member.Address.String()\n\t\tif seen.Has(memberAddress) {\n\t\t\tpanic(\"duplicate member: \" + memberAddress)\n\t\t}\n\t\tseen.Set(memberAddress, true)\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"u4AQ0TxTOAl/aQqCePh/PJ+8rYRMVDJyHy/Yl1bZI1wqOs6ek4zSDht2zTpTLO02VlWrUjJkRkCbg3U5tQ2vSQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"grc4_group","Path":"gno.land/p/demo/grc/grc4_group","Files":[{"Name":"grc4_group.gno","Body":"package grc4_group\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n// TODO: fully match cw4 api where it makes sense\ntype IGRC4Group interface {\n\tUpdateMembers(toAdd []Member, toRemove []std.Address)\n\t// AddHook()\n\t// RemoveHook()\n\n\tMember(address std.Address) (uint64, bool)\n\t// ListMembers() *avl.Tree // dev\n\tListMembers() *avl.MutTree // test3\n\tTotalWeight() uint64\n\t// Hooks()\n\n\tRender(path string) string\n}\n\ntype Member struct {\n\tAddress std.Address\n\tWeight  uint64\n}\n\ntype grc4Group struct {\n\tIGRC4Group\n\n\tadmin std.Address\n\t// members     *avl.Tree // dev\n\tmembers     *avl.MutTree // test3\n\ttotalWeight uint64\n}\n\nfunc NewGRC4Group(members []Member) IGRC4Group {\n\tAssertUniqueMembers(members)\n\n\ttotalWeight := uint64(0)\n\tfor _, member := range members {\n\t\ttotalWeight += member.Weight\n\t}\n\n\t/* dev\n\tmembersTree := avl.NewTree()\n\t*/\n\n\t//* test\n\tmembersTree := avl.NewMutTree()\n\t//*/\n\n\tfor _, member := range members {\n\t\tmembersTree.Set(member.Address.String(), member.Weight)\n\t}\n\n\treturn \u0026grc4Group{\n\t\tmembers:     membersTree,\n\t\ttotalWeight: totalWeight,\n\t}\n}\n\nfunc (g *grc4Group) UpdateMembers(toAdd []Member, toRemove []std.Address) {\n\tAssertUniqueMembers(toAdd)\n\n\tfor _, member := range toAdd {\n\t\tstrAddr := member.Address.String()\n\t\toldWeight, has := g.members.Get(strAddr)\n\t\tif has {\n\t\t\tg.totalWeight -= oldWeight.(uint64)\n\t\t}\n\t\tg.members.Set(strAddr, member.Weight)\n\t\tg.totalWeight += member.Weight\n\t}\n\n\tfor _, addr := range toRemove {\n\t\tstrAddr := addr.String()\n\t\tweight, has := g.members.Get(strAddr)\n\t\tif has {\n\t\t\tg.totalWeight -= weight.(uint64)\n\t\t}\n\t\tg.members.Remove(strAddr)\n\t}\n\n\t// TODO: call hooks\n}\n\nfunc (g *grc4Group) Admin() std.Address {\n\treturn g.admin\n}\n\nfunc (g *grc4Group) Member(addr std.Address) (uint64, bool) {\n\tweight, has := g.members.Get(addr.String())\n\treturn weight.(uint64), has\n}\n\n// func (g *grc4Group) ListMembers() *avl.Tree { // dev\nfunc (g *grc4Group) ListMembers() *avl.MutTree { // test3\n\treturn g.members\n}\n\nfunc (g *grc4Group) TotalWeight() uint64 {\n\treturn g.totalWeight\n}\n\nfunc (g *grc4Group) Render(path string) string {\n\tmembersCount := g.members.Size()\n\tmembersString := strconv.Itoa(membersCount) + \" member\"\n\tif membersCount \u003e 1 {\n\t\tmembersString += \"s\"\n\t}\n\n\tr := \"# GRC4 Group\" + \"\\n\" +\n\t\t\"## Summary\" + \"\\n\" +\n\t\t\"Admin: \" + g.admin.String() + \"\\n\\n\" +\n\t\tmembersString + \"\\n\\n\" +\n\t\t\"Total weight: \" + strconv.FormatUint(g.totalWeight, 10) + \"\\n\" +\n\t\t\"## Members\" + \"\\n\"\n\n\t/* dev\n\tg.members.Iterate(\"\", \"\", func(key string, weight interface{}) bool {\n\t\tr += \"- \" + key + \" (\" + strconv.FormatUint(weight.(uint64), 10) + \")\" + \"\\n\"\n\t\treturn false\n\t})\n\t*/\n\n\t// /* test3\n\tfor i := 0; i \u003c membersCount; i++ {\n\t\tkey, weight := g.members.GetByIndex(i)\n\t\tr += \"- \" + key + \" (\" + strconv.FormatUint(weight.(uint64), 10) + \")\" + \"\\n\"\n\t}\n\t// */\n\n\treturn r\n}\n\nfunc (g *grc4Group) AssertIsAdmin() {\n\tcaller := std.GetOrigCaller()\n\tif caller != g.admin {\n\t\tpanic(errors.New(\"you're not admin\"))\n\t}\n}\n"},{"Name":"grc4_group_test.gno","Body":"package grc4_group\n\nimport (\n\t\"std\"\n\t\"testing\"\n)\n\nfunc Test(t *testing.T) {\n\t{\n\t\th := NewGRC4Group(nil)\n\t\tgot := h.TotalWeight()\n\t\texpected := 0\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\t{\n\t\th := NewGRC4Group([]Member{\n\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 11},\n\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 31},\n\t\t})\n\t\tgot := h.TotalWeight()\n\t\texpected := 42\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\t{\n\t\tfunc() {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r == nil {\n\t\t\t\t\tt.Fatalf(\"expected panic, got none.\")\n\t\t\t\t}\n\t\t\t}()\n\t\t\th := NewGRC4Group([]Member{\n\t\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 1},\n\t\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 1},\n\t\t\t})\n\t\t}()\n\t}\n\t{\n\t\th := NewGRC4Group([]Member{\n\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 11},\n\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 31},\n\t\t})\n\t\th.Render(\"\")\n\t}\n\t{\n\t\th := NewGRC4Group([]Member{\n\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 11},\n\t\t})\n\t\th.UpdateMembers([]Member{\n\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 31},\n\t\t},\n\t\t\t[]std.Address{\n\t\t\t\tstd.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"),\n\t\t\t},\n\t\t)\n\t\tgot := h.TotalWeight()\n\t\texpected := 31\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t\tmembers := h.ListMembers()\n\t\tif members.Size() != 1 {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", 1, members.Size())\n\t\t}\n\t\taddr, weight := members.GetByIndex(0)\n\t\tif addr != \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\" {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", addr)\n\t\t}\n\t\tif weight.(uint64) != 31 {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", 31, weight.(uint64))\n\t\t}\n\t}\n\t{\n\t\th := NewGRC4Group(nil)\n\t\tfunc() {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r == nil {\n\t\t\t\t\tt.Fatalf(\"expected panic, got none.\")\n\t\t\t\t}\n\t\t\t}()\n\t\t\th.UpdateMembers([]Member{\n\t\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 1},\n\t\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 1},\n\t\t\t}, nil)\n\t\t}()\n\t}\n}\n"},{"Name":"utils.gno","Body":"package grc4_group\n\nimport (\n\t\"gno.land/p/demo/avl\"\n)\n\nfunc AssertUniqueMembers(members []Member) {\n\t// seen := avl.NewTree() // dev\n\tseen := avl.NewMutTree() // test3\n\tfor _, member := range members {\n\t\tmemberAddress := member.Address.String()\n\t\tif seen.Has(memberAddress) {\n\t\t\tpanic(\"duplicate member: \" + memberAddress)\n\t\t}\n\t\tseen.Set(memberAddress, true)\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"+LTLxrYeeFWz1M52RhDAba59XQ7wJPZmp3hW7yHcAa4d+pALbwYZNo0uxy3/QRdMbapxY/JL7tpZShPAQWIONg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"dao_interfaces","Path":"gno.land/p/demo/daodao/interfaces","Files":[{"Name":"dao_interfaces.gno","Body":"package dao_interfaces\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\ntype IVotingModule interface {\n\tVotingPower(addr std.Address) uint64\n\tTotalPower() uint64\n\tRender(path string) string\n}\n\ntype Ballot struct {\n\tPower     uint64\n\tVote      Vote\n\tRationale string\n}\n\ntype Votes struct {\n\tYes     uint64\n\tNo      uint64\n\tAbstain uint64\n}\n\nfunc (v *Votes) Add(vote Vote, power uint64) {\n\tswitch vote {\n\tcase VoteYes:\n\t\tv.Yes += power\n\tcase VoteNo:\n\t\tv.No += power\n\tcase VoteAbstain:\n\t\tv.Abstain += power\n\tdefault:\n\t\tpanic(\"unknown vote kind\")\n\t}\n}\n\nfunc (v *Votes) Remove(vote Vote, power uint64) {\n\tswitch vote {\n\tcase VoteYes:\n\t\tv.Yes -= power\n\tcase VoteNo:\n\t\tv.No -= power\n\tcase VoteAbstain:\n\t\tv.Abstain -= power\n\tdefault:\n\t\tpanic(\"unknown vote kind\")\n\t}\n}\n\nfunc (v *Votes) Total() uint64 {\n\treturn v.Yes + v.No + v.Abstain\n}\n\ntype Proposal struct {\n\tID          int\n\tTitle       string\n\tDescription string\n\tProposer    std.Address\n\tMessages    []interface{}\n\t// Ballots     *avl.Tree // dev\n\tBallots *avl.MutTree // test3\n\tVotes   Votes\n\tStatus  ProposalStatus\n}\n\ntype ProposalStatus int\n\nconst (\n\tProposalStatusOpen ProposalStatus = iota\n\tProposalStatusPassed\n\tProposalStatusExecuted\n)\n\nfunc (p ProposalStatus) String() string {\n\tswitch p {\n\tcase ProposalStatusOpen:\n\t\treturn \"Open\"\n\tcase ProposalStatusPassed:\n\t\treturn \"Passed\"\n\tcase ProposalStatusExecuted:\n\t\treturn \"Executed\"\n\tdefault:\n\t\treturn \"Unknown(\" + strconv.Itoa(int(p)) + \")\"\n\t}\n}\n\ntype Vote int\n\nconst (\n\tVoteYes Vote = iota\n\tVoteNo\n\tVoteAbstain\n)\n\nfunc (v Vote) String() string {\n\tswitch v {\n\tcase VoteYes:\n\t\treturn \"Yes\"\n\tcase VoteNo:\n\t\treturn \"No\"\n\tcase VoteAbstain:\n\t\treturn \"Abstain\"\n\tdefault:\n\t\treturn \"Unknown(\" + strconv.Itoa(int(v)) + \")\"\n\t}\n}\n\ntype IProposalModule interface {\n\tPropose(\n\t\ttitle string,\n\t\tdescription string,\n\t\tactions []interface{},\n\t)\n\tVote(proposalId int, vote Vote, rationale string)\n\tExecute(proposalId int)\n\tThreshold() Threshold\n\n\tProposals() []Proposal\n\n\tRender(path string) string\n}\n"},{"Name":"threshold.gno","Body":"package dao_interfaces\n\nimport (\n\t\"strconv\"\n)\n\ntype Percent uint16 // 4 decimals fixed point\n\ntype PercentageThreshold struct {\n\tPercent *Percent\n}\n\ntype ThresholdQuorum struct {\n\tThreshold PercentageThreshold\n\tQuorum    PercentageThreshold\n}\n\ntype Threshold struct {\n\tThresholdQuorum *ThresholdQuorum\n}\n\nfunc (p Percent) String() string {\n\ts := strconv.FormatUint(uint64(p)/100, 10)\n\tdecPart := uint64(p) % 100\n\tif decPart != 0 {\n\t\ts += \".\" + strconv.FormatUint(decPart, 10)\n\t}\n\treturn s + \"%\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"t6evkTNBGnD1MQJkQco87kjBRuLFUQxvWUuyQB/9EMZuI3LTuimptWhFHRdlGeocTEq+8hGmJItqL2uR8sTb4A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"dao_voting_grc4","Path":"gno.land/p/demo/daodao/voting_grc4","Files":[{"Name":"dao_voting_grc4.gno","Body":"package dao_voting_grc4\n\nimport (\n\t\"std\"\n\n\tdao_interfaces \"gno.land/p/demo/daodao/interfaces\"\n\t\"gno.land/p/demo/grc/grc4_group\"\n\t\"gno.land/p/demo/markdown_utils\"\n)\n\ntype grc4Voting struct {\n\tdao_interfaces.IVotingModule\n\n\tgroup grc4_group.IGRC4Group\n}\n\nfunc NewGRC4Voting(group grc4_group.IGRC4Group) dao_interfaces.IVotingModule {\n\treturn \u0026grc4Voting{group: group}\n}\n\nfunc (v *grc4Voting) VotingPower(addr std.Address) uint64 {\n\tweight, has := v.group.Member(addr)\n\tif !has {\n\t\treturn 0\n\t}\n\treturn weight\n}\n\nfunc (v *grc4Voting) TotalPower() uint64 {\n\treturn v.group.TotalWeight()\n}\n\nfunc (v *grc4Voting) Render(path string) string {\n\treturn \"# GRC4 Voting Module\\n\" + markdown_utils.Indent(v.group.Render(path))\n}\n"},{"Name":"dao_voting_grc4_test.gno","Body":"package grc4\n\nimport (\n\t\"std\"\n\t\"testing\"\n)\n\nfunc Test(t *testing.T) {\n\t{\n\t\tadmin := \"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"\n\t\tg := grc4.NewGRC4Group(std.Address(admin), nil)\n\t\tv := NewGRC4Voting(g)\n\t\tgot := v.TotalPower()\n\t\texpected := uint64(0)\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"AUE06GDqQxKsjQVPNjBbMIYy+ofiU4QbsnQobBAL0tBUAQlaqXxE3fjC3oaOOMYZRIZKjO7f9+SbT4AqPahaZw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"dao_core","Path":"gno.land/p/demo/daodao/core","Files":[{"Name":"dao_core.gno","Body":"package dao_core\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\tdao_interfaces \"gno.land/p/demo/daodao/interfaces\"\n\t\"gno.land/p/demo/markdown_utils\"\n)\n\ntype IDAOCore interface {\n\tAddProposalModule(proposalMod dao_interfaces.IProposalModule)\n\n\tVotingModule() dao_interfaces.IVotingModule\n\tProposalModules() []dao_interfaces.IProposalModule\n\n\tRender(path string) string\n}\n\ntype daoCore struct {\n\tIDAOCore\n\n\tvotingModule    dao_interfaces.IVotingModule\n\tproposalModules []dao_interfaces.IProposalModule\n}\n\nfunc NewDAOCore(\n\tvotingModule dao_interfaces.IVotingModule,\n\tproposalModules []dao_interfaces.IProposalModule,\n) IDAOCore {\n\treturn \u0026daoCore{\n\t\tvotingModule:    votingModule,\n\t\tproposalModules: proposalModules,\n\t}\n}\n\nfunc (d *daoCore) VotingModule() dao_interfaces.IVotingModule {\n\treturn d.votingModule\n}\n\nfunc (d *daoCore) ProposalModules() []dao_interfaces.IProposalModule {\n\treturn d.proposalModules\n}\n\nfunc (d *daoCore) AddProposalModule(proposalMod dao_interfaces.IProposalModule) {\n\td.proposalModules = append(d.proposalModules, proposalMod)\n}\n\nfunc (d *daoCore) Render(path string) string {\n\ts := \"# DAO Core\\n\"\n\ts += \"This is a port of [DA0-DA0 contracts](https://github.com/DA0-DA0/dao-contracts)\\n\"\n\ts += markdown_utils.Indent(d.votingModule.Render(path)) + \"\\n\"\n\tfor _, propMod := range d.proposalModules {\n\t\ts += markdown_utils.Indent(propMod.Render(path)) + \"\\n\"\n\t}\n\treturn s\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"PHKjL2Jl3KqSgqXpEC5pE1FeJU9MkwYdHGo7eA4GNERRAzNVtwGsIqVhppmtyEUj/USovR9xDGFXNrC2DhjLAQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"dao_proposal_single","Path":"gno.land/p/demo/daodao/proposal_single","Files":[{"Name":"dao_proposal_single.gno","Body":"package dao_proposal_single\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n\tdao_core \"gno.land/p/demo/daodao/core\"\n\tdao_interfaces \"gno.land/p/demo/daodao/interfaces\"\n)\n\ntype DAOProposalSingleOpts struct {\n\t/// The threshold a proposal must reach to complete.\n\tThreshold dao_interfaces.Threshold\n\t/// The default maximum amount of time a proposal may be voted on\n\t/// before expiring.\n\tMaxVotingPeriod time.Duration\n\t/// The minimum amount of time a proposal must be open before\n\t/// passing. A proposal may fail before this amount of time has\n\t/// elapsed, but it will not pass. This can be useful for\n\t/// preventing governance attacks wherein an attacker aquires a\n\t/// large number of tokens and forces a proposal through.\n\tMinVotingPeriod time.Duration // 0 means no minimum\n\t/// If set to true only members may execute passed\n\t/// proposals. Otherwise, any address may execute a passed\n\t/// proposal.\n\tOnlyMembersExecute bool\n\t/// Allows changing votes before the proposal expires. If this is\n\t/// enabled proposals will not be able to complete early as final\n\t/// vote information is not known until the time of proposal\n\t/// expiration.\n\tAllowRevoting bool\n\t/// Information about what addresses may create proposals.\n\t// preProposeInfo PreProposeInfo\n\t/// If set to true proposals will be closed if their execution\n\t/// fails. Otherwise, proposals will remain open after execution\n\t/// failure. For example, with this enabled a proposal to send 5\n\t/// tokens out of a DAO's treasury with 4 tokens would be closed when\n\t/// it is executed. With this disabled, that same proposal would\n\t/// remain open until the DAO's treasury was large enough for it to be\n\t/// executed.\n\tCloseProposalOnExecutionFailure bool\n}\n\ntype daoProposalSingle struct {\n\tdao_interfaces.IProposalModule\n\n\tcore      dao_core.IDAOCore\n\topts      *DAOProposalSingleOpts\n\tproposals []dao_interfaces.Proposal\n}\n\nfunc NewDAOProposalSingle(core dao_core.IDAOCore, opts *DAOProposalSingleOpts) dao_interfaces.IProposalModule {\n\tif core == nil {\n\t\tpanic(\"core cannot be nil\")\n\t}\n\n\tif opts == nil {\n\t\tpanic(\"opts cannot be nil\")\n\t}\n\n\tif opts.AllowRevoting {\n\t\tpanic(\"allow revoting not implemented\")\n\t}\n\n\tif opts.OnlyMembersExecute {\n\t\tpanic(\"only members execute not implemented\")\n\t}\n\n\t// TODO: support other threshold types\n\tthreshold := opts.Threshold.ThresholdQuorum\n\tif threshold == nil {\n\t\tpanic(\"opts.Threshold must be of type ThresholdQuorum\")\n\t}\n\n\tthresholdPercent := threshold.Threshold.Percent\n\tif thresholdPercent == nil {\n\t\tpanic(\"opts.Threshold.Threshold must be of type Percent\")\n\t}\n\tif *thresholdPercent \u003e 10000 {\n\t\tpanic(\"opts.Threshold.Threshold must be \u003c= 100%\")\n\t}\n\n\tquorumPercent := threshold.Quorum.Percent\n\tif quorumPercent == nil {\n\t\tpanic(\"opts.Threshold.Quorum must be of type Percent\")\n\t}\n\tif *quorumPercent \u003e 10000 {\n\t\tpanic(\"opts.Threshold.Quorum must be \u003c= 100%\")\n\t}\n\n\treturn \u0026daoProposalSingle{core: core, opts: opts}\n}\n\nfunc (d *daoProposalSingle) Render(path string) string {\n\tminVotingPeriodStr := \"No minimum voting period\"\n\tif d.opts.MinVotingPeriod != 0 {\n\t\tminVotingPeriodStr = \"Min voting period: \" + d.opts.MinVotingPeriod.String()\n\t}\n\n\texecuteStr := \"Any address may execute passed proposals\"\n\tif d.opts.OnlyMembersExecute {\n\t\texecuteStr = \"Only members may execute passed proposals\"\n\t}\n\n\trevotingStr := \"Revoting is not allowed\"\n\tif d.opts.AllowRevoting {\n\t\trevotingStr = \"Revoting is allowed\"\n\t}\n\n\tcloseOnExecFailureStr := \"Proposals will remain open after execution failure\"\n\tif d.opts.CloseProposalOnExecutionFailure {\n\t\tcloseOnExecFailureStr = \"Proposals will be closed if their execution fails\"\n\t}\n\n\tthresholdStr := \"\"\n\tif threshold := d.opts.Threshold.ThresholdQuorum; threshold != nil {\n\t\tthresholdStr = \"Threshold: \" + threshold.Threshold.Percent.String() + \"\\n\\n\" +\n\t\t\t\"Quorum: \" + threshold.Quorum.Percent.String()\n\t}\n\n\tproposalsStr := \"## Proposals\\n\"\n\tfor _, p := range d.proposals {\n\t\tproposalsStr += \"### #\" + strconv.Itoa(p.ID) + \" \" + p.Title + \"\\n\" +\n\t\t\t\"Status: \" + p.Status.String() + \"\\n\\n\" +\n\t\t\t\"Proposed by \" + p.Proposer.String() + \"\\n\\n\" +\n\t\t\tp.Description + \"\\n\\n\" +\n\t\t\t\"Votes summary:\" + \"\\n\\n\" +\n\t\t\t\"- Yes: \" + strconv.FormatUint(p.Votes.Yes, 10) + \"\\n\" +\n\t\t\t\"- No: \" + strconv.FormatUint(p.Votes.No, 10) + \"\\n\" +\n\t\t\t\"- Abstain: \" + strconv.FormatUint(p.Votes.Abstain, 10) + \"\\n\\n\" +\n\t\t\t\"Total: \" + strconv.FormatUint(p.Votes.Total(), 10) + \"\\n\" +\n\t\t\t\"#### Messages\\n\" +\n\t\t\t\"#### Votes\\n\"\n\n\t\t/* dev\n\t\tp.Ballots.Iterate(\"\", \"\", func(k string, v interface{}) bool {\n\t\t\tballot := v.(dao_interfaces.Ballot)\n\t\t\tproposalsStr += \"- \" + k + \" voted \" + ballot.Vote.String() + \"\\n\"\n\t\t\treturn false\n\t\t})\n\t\t*/\n\n\t\t// /* test3\n\t\tballotsCount := p.Ballots.Size()\n\t\tfor i := 0; i \u003c ballotsCount; i++ {\n\t\t\tk, v := g.Ballots.GetByIndex(i)\n\t\t\tballot := v.(dao_interfaces.Ballot)\n\t\t\tproposalsStr += \"- \" + k + \" voted \" + ballot.Vote.String() + \"\\n\"\n\t\t}\n\t\t// */\n\n\t\tproposalsStr += \"\\n\"\n\t}\n\n\treturn \"# Single choice proposals module\" + \"\\n\" +\n\t\t\"## Summary\" + \"\\n\" +\n\t\t\"Max voting period: \" + d.opts.MaxVotingPeriod.String() + \"\\n\\n\" +\n\t\tminVotingPeriodStr + \"\\n\\n\" +\n\t\texecuteStr + \"\\n\\n\" +\n\t\trevotingStr + \"\\n\\n\" +\n\t\tcloseOnExecFailureStr + \"\\n\\n\" +\n\t\tthresholdStr + \"\\n\\n\" +\n\t\tproposalsStr\n}\n\nfunc (d *daoProposalSingle) Propose(title string, description string, messages []interface{}) {\n\t// TODO: auth\n\td.proposals = append(d.proposals, dao_interfaces.Proposal{\n\t\tID:          len(d.proposals),\n\t\tTitle:       title,\n\t\tDescription: description,\n\t\tMessages:    messages,\n\t\tProposer:    std.GetOrigCaller(),\n\t\t// Ballots:     avl.NewTree(), // dev\n\t\tBallots: avl.NewMutTree(), // test3\n\t\tStatus:  dao_interfaces.ProposalStatusOpen,\n\t})\n}\n\nfunc (d *daoProposalSingle) Vote(proposalID int, vote dao_interfaces.Vote, rationale string) {\n\tvoter := std.GetOrigCaller()\n\n\tif len(d.proposals) \u003c= proposalID {\n\t\tpanic(\"proposal does not exist\")\n\t}\n\tproposal := d.proposals[proposalID]\n\t// TODO: check proposal expiration\n\n\tvotePower := d.core.VotingModule().VotingPower(voter)\n\tif votePower == 0 {\n\t\tpanic(\"you're not a member\")\n\t}\n\n\t// TODO: handle revoting\n\tif ok := proposal.Ballots.Has(voter.String()); ok {\n\t\tpanic(\"you already voted\")\n\t}\n\tproposal.Ballots.Set(voter.String(), dao_interfaces.Ballot{\n\t\tVote:      vote,\n\t\tPower:     votePower,\n\t\tRationale: rationale,\n\t})\n\n\tproposal.Votes.Add(vote, votePower)\n\n\td.updateStatus(proposalID)\n}\n\nfunc (d *daoProposalSingle) Execute(proposalID int) {\n\texecuter := std.GetOrigCaller()\n\n\tif len(d.proposals) \u003c= proposalID {\n\t\tpanic(\"proposal does not exist\")\n\t}\n\tprop := d.proposals[proposalID]\n\n\td.updateStatus(proposalID)\n\tif prop.Status != dao_interfaces.ProposalStatusPassed {\n\t\tpanic(\"proposal is not passed\")\n\t}\n\n\tfor _, message := range prop.Messages {\n\t}\n\n\td.proposals[proposalID].Status = dao_interfaces.ProposalStatusExecuted\n}\n\n// FIXME: should probably return a copy for safety\nfunc (d *daoProposalSingle) Proposals() []dao_interfaces.Proposal {\n\treturn d.proposals\n}\n\nfunc (d *daoProposalSingle) Threshold() dao_interfaces.Threshold {\n\treturn d.opts.Threshold\n}\n\nfunc (d *daoProposalSingle) updateStatus(proposalID int) {\n\tproposal := d.proposals[proposalID]\n\tif proposal.Status == dao_interfaces.ProposalStatusOpen \u0026\u0026 d.isPassed(proposalID) {\n\t\td.proposals[proposalID].Status = dao_interfaces.ProposalStatusPassed\n\t\treturn\n\t}\n}\n\nfunc (d *daoProposalSingle) isPassed(proposalID int) bool {\n\tproposal := d.proposals[proposalID]\n\n\t// TODO: support other threshold types\n\tthreshold := d.opts.Threshold.ThresholdQuorum.Threshold\n\tquorum := d.opts.Threshold.ThresholdQuorum.Quorum\n\n\ttotalPower := d.core.VotingModule().TotalPower()\n\n\tif !doesVoteCountPass(proposal.Votes.Total(), totalPower, quorum) {\n\t\treturn false\n\t}\n\n\t// TODO: handle expiration\n\toptions := totalPower - proposal.Votes.Abstain\n\treturn doesVoteCountPass(proposal.Votes.Yes, options, threshold)\n}\n\nfunc doesVoteCountPass(yesVotes uint64, options uint64, percent dao_interfaces.PercentageThreshold) bool {\n\tif options == 0 {\n\t\treturn false\n\t}\n\tpercentValue := uint64(*percent.Percent)\n\tvotes := yesVotes * 10000\n\tthreshold := options * percentValue\n\treturn votes \u003e= threshold\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"HugpUI3Z/50WzpXWoQM3WomnxMtFIwEeSjnYOeUBlQx7iQ5XOFU0m/Ewg80Mj3RXRfQIiEE72pvkkG6O7Svs6w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"grc4_group","Path":"gno.land/p/demo/grc/grc4_group","Files":[{"Name":"grc4_group.gno","Body":"package grc4_group\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n// TODO: fully match cw4 api where it makes sense\ntype IGRC4Group interface {\n\tUpdateMembers(toAdd []Member, toRemove []std.Address)\n\t// AddHook()\n\t// RemoveHook()\n\n\tMember(address std.Address) (uint64, bool)\n\t// ListMembers() *avl.Tree // dev\n\tListMembers() *avl.MutTree // test3\n\tTotalWeight() uint64\n\t// Hooks()\n\n\tRender(path string) string\n}\n\ntype Member struct {\n\tAddress std.Address\n\tWeight  uint64\n}\n\ntype grc4Group struct {\n\tIGRC4Group\n\n\tadmin std.Address\n\t// members     *avl.Tree // dev\n\tmembers     *avl.MutTree // test3\n\ttotalWeight uint64\n}\n\nfunc NewGRC4Group(members []Member) IGRC4Group {\n\tAssertUniqueMembers(members)\n\n\ttotalWeight := uint64(0)\n\tfor _, member := range members {\n\t\ttotalWeight += member.Weight\n\t}\n\n\t/* dev\n\tmembersTree := avl.NewTree()\n\t*/\n\n\t//* test\n\tmembersTree := avl.NewMutTree()\n\t//*/\n\n\tfor _, member := range members {\n\t\tmembersTree.Set(member.Address.String(), member.Weight)\n\t}\n\n\treturn \u0026grc4Group{\n\t\tmembers:     membersTree,\n\t\ttotalWeight: totalWeight,\n\t}\n}\n\nfunc (g *grc4Group) UpdateMembers(toAdd []Member, toRemove []std.Address) {\n\tAssertUniqueMembers(toAdd)\n\n\tfor _, member := range toAdd {\n\t\tstrAddr := member.Address.String()\n\t\toldWeight, has := g.members.Get(strAddr)\n\t\tif has {\n\t\t\tg.totalWeight -= oldWeight.(uint64)\n\t\t}\n\t\tg.members.Set(strAddr, member.Weight)\n\t\tg.totalWeight += member.Weight\n\t}\n\n\tfor _, addr := range toRemove {\n\t\tstrAddr := addr.String()\n\t\tweight, has := g.members.Get(strAddr)\n\t\tif has {\n\t\t\tg.totalWeight -= weight.(uint64)\n\t\t}\n\t\tg.members.Remove(strAddr)\n\t}\n\n\t// TODO: call hooks\n}\n\nfunc (g *grc4Group) Admin() std.Address {\n\treturn g.admin\n}\n\nfunc (g *grc4Group) Member(addr std.Address) (uint64, bool) {\n\tweight, has := g.members.Get(addr.String())\n\treturn weight.(uint64), has\n}\n\n// func (g *grc4Group) ListMembers() *avl.Tree { // dev\nfunc (g *grc4Group) ListMembers() *avl.MutTree { // test3\n\treturn g.members\n}\n\nfunc (g *grc4Group) TotalWeight() uint64 {\n\treturn g.totalWeight\n}\n\nfunc (g *grc4Group) Render(path string) string {\n\tmembersCount := g.members.Size()\n\tmembersString := strconv.Itoa(membersCount) + \" member\"\n\tif membersCount \u003e 1 {\n\t\tmembersString += \"s\"\n\t}\n\n\tr := \"# GRC4 Group\" + \"\\n\" +\n\t\t\"## Summary\" + \"\\n\" +\n\t\t\"Admin: \" + g.admin.String() + \"\\n\\n\" +\n\t\tmembersString + \"\\n\\n\" +\n\t\t\"Total weight: \" + strconv.FormatUint(g.totalWeight, 10) + \"\\n\" +\n\t\t\"## Members\" + \"\\n\"\n\n\t/* dev\n\tg.members.Iterate(\"\", \"\", func(key string, weight interface{}) bool {\n\t\tr += \"- \" + key + \" (\" + strconv.FormatUint(weight.(uint64), 10) + \")\" + \"\\n\"\n\t\treturn false\n\t})\n\t*/\n\n\t// /* test3\n\tfor i := 0; i \u003c membersCount; i++ {\n\t\tkey, weight := g.members.GetByIndex(i)\n\t\tr += \"- \" + key + \" (\" + strconv.FormatUint(weight.(uint64), 10) + \")\" + \"\\n\"\n\t}\n\t// */\n\n\treturn r\n}\n\nfunc (g *grc4Group) AssertIsAdmin() {\n\tcaller := std.GetOrigCaller()\n\tif caller != g.admin {\n\t\tpanic(errors.New(\"you're not admin\"))\n\t}\n}\n"},{"Name":"grc4_group_test.gno","Body":"package grc4_group\n\nimport (\n\t\"std\"\n\t\"testing\"\n)\n\nfunc Test(t *testing.T) {\n\t{\n\t\th := NewGRC4Group(nil)\n\t\tgot := h.TotalWeight()\n\t\texpected := 0\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\t{\n\t\th := NewGRC4Group([]Member{\n\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 11},\n\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 31},\n\t\t})\n\t\tgot := h.TotalWeight()\n\t\texpected := 42\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\t{\n\t\tfunc() {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r == nil {\n\t\t\t\t\tt.Fatalf(\"expected panic, got none.\")\n\t\t\t\t}\n\t\t\t}()\n\t\t\th := NewGRC4Group([]Member{\n\t\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 1},\n\t\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 1},\n\t\t\t})\n\t\t}()\n\t}\n\t{\n\t\th := NewGRC4Group([]Member{\n\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 11},\n\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 31},\n\t\t})\n\t\th.Render(\"\")\n\t}\n\t{\n\t\th := NewGRC4Group([]Member{\n\t\t\t{std.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"), 11},\n\t\t})\n\t\th.UpdateMembers([]Member{\n\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 31},\n\t\t},\n\t\t\t[]std.Address{\n\t\t\t\tstd.Address(\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\"),\n\t\t\t},\n\t\t)\n\t\tgot := h.TotalWeight()\n\t\texpected := 31\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t\tmembers := h.ListMembers()\n\t\tif members.Size() != 1 {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", 1, members.Size())\n\t\t}\n\t\taddr, weight := members.GetByIndex(0)\n\t\tif addr != \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\" {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", addr)\n\t\t}\n\t\tif weight.(uint64) != 31 {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", 31, weight.(uint64))\n\t\t}\n\t}\n\t{\n\t\th := NewGRC4Group(nil)\n\t\tfunc() {\n\t\t\tdefer func() {\n\t\t\t\tif r := recover(); r == nil {\n\t\t\t\t\tt.Fatalf(\"expected panic, got none.\")\n\t\t\t\t}\n\t\t\t}()\n\t\t\th.UpdateMembers([]Member{\n\t\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 1},\n\t\t\t\t{std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), 1},\n\t\t\t}, nil)\n\t\t}()\n\t}\n}\n"},{"Name":"utils.gno","Body":"package grc4_group\n\nimport (\n\t\"gno.land/p/demo/avl\"\n)\n\nfunc AssertUniqueMembers(members []Member) {\n\t// seen := avl.NewTree() // dev\n\tseen := avl.NewMutTree() // test3\n\tfor _, member := range members {\n\t\tmemberAddress := member.Address.String()\n\t\tif seen.Has(memberAddress) {\n\t\t\tpanic(\"duplicate member: \" + memberAddress)\n\t\t}\n\t\tseen.Set(memberAddress, true)\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"krfteT2KdhDa8O+z30nzwDyp/q2gW4EDuqKaJHEf4AB0sILeA4GYX1S+u5aIQRMwjRTQf5AThoC5MZYdr/hsQA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"dao_interfaces","Path":"gno.land/p/demo/daodao/interfaces","Files":[{"Name":"dao_interfaces.gno","Body":"package dao_interfaces\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\ntype IVotingModule interface {\n\tVotingPower(addr std.Address) uint64\n\tTotalPower() uint64\n\tRender(path string) string\n}\n\ntype Ballot struct {\n\tPower     uint64\n\tVote      Vote\n\tRationale string\n}\n\ntype Votes struct {\n\tYes     uint64\n\tNo      uint64\n\tAbstain uint64\n}\n\nfunc (v *Votes) Add(vote Vote, power uint64) {\n\tswitch vote {\n\tcase VoteYes:\n\t\tv.Yes += power\n\tcase VoteNo:\n\t\tv.No += power\n\tcase VoteAbstain:\n\t\tv.Abstain += power\n\tdefault:\n\t\tpanic(\"unknown vote kind\")\n\t}\n}\n\nfunc (v *Votes) Remove(vote Vote, power uint64) {\n\tswitch vote {\n\tcase VoteYes:\n\t\tv.Yes -= power\n\tcase VoteNo:\n\t\tv.No -= power\n\tcase VoteAbstain:\n\t\tv.Abstain -= power\n\tdefault:\n\t\tpanic(\"unknown vote kind\")\n\t}\n}\n\nfunc (v *Votes) Total() uint64 {\n\treturn v.Yes + v.No + v.Abstain\n}\n\ntype Proposal struct {\n\tID          int\n\tTitle       string\n\tDescription string\n\tProposer    std.Address\n\tMessages    []interface{}\n\t// Ballots     *avl.Tree // dev\n\tBallots *avl.MutTree // test3\n\tVotes   Votes\n\tStatus  ProposalStatus\n}\n\ntype ProposalStatus int\n\nconst (\n\tProposalStatusOpen ProposalStatus = iota\n\tProposalStatusPassed\n\tProposalStatusExecuted\n)\n\nfunc (p ProposalStatus) String() string {\n\tswitch p {\n\tcase ProposalStatusOpen:\n\t\treturn \"Open\"\n\tcase ProposalStatusPassed:\n\t\treturn \"Passed\"\n\tcase ProposalStatusExecuted:\n\t\treturn \"Executed\"\n\tdefault:\n\t\treturn \"Unknown(\" + strconv.Itoa(int(p)) + \")\"\n\t}\n}\n\ntype Vote int\n\nconst (\n\tVoteYes Vote = iota\n\tVoteNo\n\tVoteAbstain\n)\n\nfunc (v Vote) String() string {\n\tswitch v {\n\tcase VoteYes:\n\t\treturn \"Yes\"\n\tcase VoteNo:\n\t\treturn \"No\"\n\tcase VoteAbstain:\n\t\treturn \"Abstain\"\n\tdefault:\n\t\treturn \"Unknown(\" + strconv.Itoa(int(v)) + \")\"\n\t}\n}\n\ntype IProposalModule interface {\n\tPropose(\n\t\ttitle string,\n\t\tdescription string,\n\t\tactions []interface{},\n\t)\n\tVote(proposalId int, vote Vote, rationale string)\n\tExecute(proposalId int)\n\tThreshold() Threshold\n\n\tProposals() []Proposal\n\n\tRender(path string) string\n}\n"},{"Name":"threshold.gno","Body":"package dao_interfaces\n\nimport (\n\t\"strconv\"\n)\n\ntype Percent uint16 // 4 decimals fixed point\n\ntype PercentageThreshold struct {\n\tPercent *Percent\n}\n\ntype ThresholdQuorum struct {\n\tThreshold PercentageThreshold\n\tQuorum    PercentageThreshold\n}\n\ntype Threshold struct {\n\tThresholdQuorum *ThresholdQuorum\n}\n\nfunc (p Percent) String() string {\n\ts := strconv.FormatUint(uint64(p)/100, 10)\n\tdecPart := uint64(p) % 100\n\tif decPart != 0 {\n\t\ts += \".\" + strconv.FormatUint(decPart, 10)\n\t}\n\treturn s + \"%\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"2Uj7saRwXJOJw30dH6qriewqsLDwB2AKonSV0KtXpX4/6nckJPvg3fIScWxBB/fk1eiUHOf8yzNLsMyLV3cxow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"dao_proposal_single","Path":"gno.land/p/demo/daodao/proposal_single","Files":[{"Name":"dao_proposal_single.gno","Body":"package dao_proposal_single\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n\tdao_core \"gno.land/p/demo/daodao/core\"\n\tdao_interfaces \"gno.land/p/demo/daodao/interfaces\"\n)\n\ntype DAOProposalSingleOpts struct {\n\t/// The threshold a proposal must reach to complete.\n\tThreshold dao_interfaces.Threshold\n\t/// The default maximum amount of time a proposal may be voted on\n\t/// before expiring.\n\tMaxVotingPeriod time.Duration\n\t/// The minimum amount of time a proposal must be open before\n\t/// passing. A proposal may fail before this amount of time has\n\t/// elapsed, but it will not pass. This can be useful for\n\t/// preventing governance attacks wherein an attacker aquires a\n\t/// large number of tokens and forces a proposal through.\n\tMinVotingPeriod time.Duration // 0 means no minimum\n\t/// If set to true only members may execute passed\n\t/// proposals. Otherwise, any address may execute a passed\n\t/// proposal.\n\tOnlyMembersExecute bool\n\t/// Allows changing votes before the proposal expires. If this is\n\t/// enabled proposals will not be able to complete early as final\n\t/// vote information is not known until the time of proposal\n\t/// expiration.\n\tAllowRevoting bool\n\t/// Information about what addresses may create proposals.\n\t// preProposeInfo PreProposeInfo\n\t/// If set to true proposals will be closed if their execution\n\t/// fails. Otherwise, proposals will remain open after execution\n\t/// failure. For example, with this enabled a proposal to send 5\n\t/// tokens out of a DAO's treasury with 4 tokens would be closed when\n\t/// it is executed. With this disabled, that same proposal would\n\t/// remain open until the DAO's treasury was large enough for it to be\n\t/// executed.\n\tCloseProposalOnExecutionFailure bool\n}\n\ntype daoProposalSingle struct {\n\tdao_interfaces.IProposalModule\n\n\tcore      dao_core.IDAOCore\n\topts      *DAOProposalSingleOpts\n\tproposals []dao_interfaces.Proposal\n}\n\nfunc NewDAOProposalSingle(core dao_core.IDAOCore, opts *DAOProposalSingleOpts) dao_interfaces.IProposalModule {\n\tif core == nil {\n\t\tpanic(\"core cannot be nil\")\n\t}\n\n\tif opts == nil {\n\t\tpanic(\"opts cannot be nil\")\n\t}\n\n\tif opts.AllowRevoting {\n\t\tpanic(\"allow revoting not implemented\")\n\t}\n\n\tif opts.OnlyMembersExecute {\n\t\tpanic(\"only members execute not implemented\")\n\t}\n\n\t// TODO: support other threshold types\n\tthreshold := opts.Threshold.ThresholdQuorum\n\tif threshold == nil {\n\t\tpanic(\"opts.Threshold must be of type ThresholdQuorum\")\n\t}\n\n\tthresholdPercent := threshold.Threshold.Percent\n\tif thresholdPercent == nil {\n\t\tpanic(\"opts.Threshold.Threshold must be of type Percent\")\n\t}\n\tif *thresholdPercent \u003e 10000 {\n\t\tpanic(\"opts.Threshold.Threshold must be \u003c= 100%\")\n\t}\n\n\tquorumPercent := threshold.Quorum.Percent\n\tif quorumPercent == nil {\n\t\tpanic(\"opts.Threshold.Quorum must be of type Percent\")\n\t}\n\tif *quorumPercent \u003e 10000 {\n\t\tpanic(\"opts.Threshold.Quorum must be \u003c= 100%\")\n\t}\n\n\treturn \u0026daoProposalSingle{core: core, opts: opts}\n}\n\nfunc (d *daoProposalSingle) Render(path string) string {\n\tminVotingPeriodStr := \"No minimum voting period\"\n\tif d.opts.MinVotingPeriod != 0 {\n\t\tminVotingPeriodStr = \"Min voting period: \" + d.opts.MinVotingPeriod.String()\n\t}\n\n\texecuteStr := \"Any address may execute passed proposals\"\n\tif d.opts.OnlyMembersExecute {\n\t\texecuteStr = \"Only members may execute passed proposals\"\n\t}\n\n\trevotingStr := \"Revoting is not allowed\"\n\tif d.opts.AllowRevoting {\n\t\trevotingStr = \"Revoting is allowed\"\n\t}\n\n\tcloseOnExecFailureStr := \"Proposals will remain open after execution failure\"\n\tif d.opts.CloseProposalOnExecutionFailure {\n\t\tcloseOnExecFailureStr = \"Proposals will be closed if their execution fails\"\n\t}\n\n\tthresholdStr := \"\"\n\tif threshold := d.opts.Threshold.ThresholdQuorum; threshold != nil {\n\t\tthresholdStr = \"Threshold: \" + threshold.Threshold.Percent.String() + \"\\n\\n\" +\n\t\t\t\"Quorum: \" + threshold.Quorum.Percent.String()\n\t}\n\n\tproposalsStr := \"## Proposals\\n\"\n\tfor _, p := range d.proposals {\n\t\tproposalsStr += \"### #\" + strconv.Itoa(p.ID) + \" \" + p.Title + \"\\n\" +\n\t\t\t\"Status: \" + p.Status.String() + \"\\n\\n\" +\n\t\t\t\"Proposed by \" + p.Proposer.String() + \"\\n\\n\" +\n\t\t\tp.Description + \"\\n\\n\" +\n\t\t\t\"Votes summary:\" + \"\\n\\n\" +\n\t\t\t\"- Yes: \" + strconv.FormatUint(p.Votes.Yes, 10) + \"\\n\" +\n\t\t\t\"- No: \" + strconv.FormatUint(p.Votes.No, 10) + \"\\n\" +\n\t\t\t\"- Abstain: \" + strconv.FormatUint(p.Votes.Abstain, 10) + \"\\n\\n\" +\n\t\t\t\"Total: \" + strconv.FormatUint(p.Votes.Total(), 10) + \"\\n\" +\n\t\t\t\"#### Messages\\n\" +\n\t\t\t\"#### Votes\\n\"\n\n\t\t/* dev\n\t\tp.Ballots.Iterate(\"\", \"\", func(k string, v interface{}) bool {\n\t\t\tballot := v.(dao_interfaces.Ballot)\n\t\t\tproposalsStr += \"- \" + k + \" voted \" + ballot.Vote.String() + \"\\n\"\n\t\t\treturn false\n\t\t})\n\t\t*/\n\n\t\t// /* test3\n\t\tballotsCount := p.Ballots.Size()\n\t\tfor i := 0; i \u003c ballotsCount; i++ {\n\t\t\tk, v := p.Ballots.GetByIndex(i)\n\t\t\tballot := v.(dao_interfaces.Ballot)\n\t\t\tproposalsStr += \"- \" + k + \" voted \" + ballot.Vote.String() + \"\\n\"\n\t\t}\n\t\t// */\n\n\t\tproposalsStr += \"\\n\"\n\t}\n\n\treturn \"# Single choice proposals module\" + \"\\n\" +\n\t\t\"## Summary\" + \"\\n\" +\n\t\t\"Max voting period: \" + d.opts.MaxVotingPeriod.String() + \"\\n\\n\" +\n\t\tminVotingPeriodStr + \"\\n\\n\" +\n\t\texecuteStr + \"\\n\\n\" +\n\t\trevotingStr + \"\\n\\n\" +\n\t\tcloseOnExecFailureStr + \"\\n\\n\" +\n\t\tthresholdStr + \"\\n\\n\" +\n\t\tproposalsStr\n}\n\nfunc (d *daoProposalSingle) Propose(title string, description string, messages []interface{}) {\n\t// TODO: auth\n\td.proposals = append(d.proposals, dao_interfaces.Proposal{\n\t\tID:          len(d.proposals),\n\t\tTitle:       title,\n\t\tDescription: description,\n\t\tMessages:    messages,\n\t\tProposer:    std.GetOrigCaller(),\n\t\t// Ballots:     avl.NewTree(), // dev\n\t\tBallots: avl.NewMutTree(), // test3\n\t\tStatus:  dao_interfaces.ProposalStatusOpen,\n\t})\n}\n\nfunc (d *daoProposalSingle) Vote(proposalID int, vote dao_interfaces.Vote, rationale string) {\n\tvoter := std.GetOrigCaller()\n\n\tif len(d.proposals) \u003c= proposalID {\n\t\tpanic(\"proposal does not exist\")\n\t}\n\tproposal := d.proposals[proposalID]\n\t// TODO: check proposal expiration\n\n\tvotePower := d.core.VotingModule().VotingPower(voter)\n\tif votePower == 0 {\n\t\tpanic(\"you're not a member\")\n\t}\n\n\t// TODO: handle revoting\n\tif ok := proposal.Ballots.Has(voter.String()); ok {\n\t\tpanic(\"you already voted\")\n\t}\n\tproposal.Ballots.Set(voter.String(), dao_interfaces.Ballot{\n\t\tVote:      vote,\n\t\tPower:     votePower,\n\t\tRationale: rationale,\n\t})\n\n\tproposal.Votes.Add(vote, votePower)\n\n\td.updateStatus(proposalID)\n}\n\nfunc (d *daoProposalSingle) Execute(proposalID int) {\n\texecuter := std.GetOrigCaller()\n\n\tif len(d.proposals) \u003c= proposalID {\n\t\tpanic(\"proposal does not exist\")\n\t}\n\tprop := d.proposals[proposalID]\n\n\td.updateStatus(proposalID)\n\tif prop.Status != dao_interfaces.ProposalStatusPassed {\n\t\tpanic(\"proposal is not passed\")\n\t}\n\n\tfor _, message := range prop.Messages {\n\t}\n\n\td.proposals[proposalID].Status = dao_interfaces.ProposalStatusExecuted\n}\n\n// FIXME: should probably return a copy for safety\nfunc (d *daoProposalSingle) Proposals() []dao_interfaces.Proposal {\n\treturn d.proposals\n}\n\nfunc (d *daoProposalSingle) Threshold() dao_interfaces.Threshold {\n\treturn d.opts.Threshold\n}\n\nfunc (d *daoProposalSingle) updateStatus(proposalID int) {\n\tproposal := d.proposals[proposalID]\n\tif proposal.Status == dao_interfaces.ProposalStatusOpen \u0026\u0026 d.isPassed(proposalID) {\n\t\td.proposals[proposalID].Status = dao_interfaces.ProposalStatusPassed\n\t\treturn\n\t}\n}\n\nfunc (d *daoProposalSingle) isPassed(proposalID int) bool {\n\tproposal := d.proposals[proposalID]\n\n\t// TODO: support other threshold types\n\tthreshold := d.opts.Threshold.ThresholdQuorum.Threshold\n\tquorum := d.opts.Threshold.ThresholdQuorum.Quorum\n\n\ttotalPower := d.core.VotingModule().TotalPower()\n\n\tif !doesVoteCountPass(proposal.Votes.Total(), totalPower, quorum) {\n\t\treturn false\n\t}\n\n\t// TODO: handle expiration\n\toptions := totalPower - proposal.Votes.Abstain\n\treturn doesVoteCountPass(proposal.Votes.Yes, options, threshold)\n}\n\nfunc doesVoteCountPass(yesVotes uint64, options uint64, percent dao_interfaces.PercentageThreshold) bool {\n\tif options == 0 {\n\t\treturn false\n\t}\n\tpercentValue := uint64(*percent.Percent)\n\tvotes := yesVotes * 10000\n\tthreshold := options * percentValue\n\treturn votes \u003e= threshold\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"WajYK3awS39wffcTEhgCe6T2gQGMO6ZcGu/LJc9XCWFhVVrwQVxJMqPS9T97Qf+7vPbmA+WlBJb/wvHcZc7sHw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"dao_realm","Path":"gno.land/r/demo/foo_dao","Files":[{"Name":"dao_realm.gno","Body":"package dao_realm\n\nimport (\n\t\"std\"\n\t\"time\"\n\n\t\"gno.land/p/demo/daodao/core\"\n\t\"gno.land/p/demo/daodao/interfaces\"\n\t\"gno.land/p/demo/daodao/proposal_single\"\n\t\"gno.land/p/demo/daodao/voting_grc4\"\n\t\"gno.land/p/demo/grc/grc4_group\"\n)\n\nvar daoCore = dao_core.NewDAOCore(dao_voting_grc4.NewGRC4Voting(grc4_group.NewGRC4Group([]grc4_group.Member{\n\t{\"g1747t5m2f08plqjlrjk2q0qld7465hxz8gkx59c\", 1}, // zooma\n\t{\"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv\", 1}, // normadena\n\t{\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\", 1}, // no dev\n\t{\"g1ckn395mpttp0vupgtratyufdaakgh8jgkmr3ym\", 1}, // yo\n})), nil)\n\nfunc init() {\n\ttt := dao_interfaces.Percent(100) // 1%\n\ttq := dao_interfaces.Percent(100) // 1%\n\tproposalMod := dao_proposal_single.NewDAOProposalSingle(daoCore, \u0026dao_proposal_single.DAOProposalSingleOpts{\n\t\tMaxVotingPeriod: time.Hour * 24 * 42,\n\t\tThreshold: dao_interfaces.Threshold{ThresholdQuorum: \u0026dao_interfaces.ThresholdQuorum{\n\t\t\tThreshold: dao_interfaces.PercentageThreshold{Percent: \u0026tt},\n\t\t\tQuorum:    dao_interfaces.PercentageThreshold{Percent: \u0026tq},\n\t\t}},\n\t})\n\tdaoCore.AddProposalModule(proposalMod)\n}\n\nfunc Render(path string) string {\n\treturn daoCore.Render(path)\n}\n\nfunc GetCore() dao_core.IDAOCore {\n\treturn daoCore\n}\n\nfunc Vote(moduleIndex int, proposalID int, vote dao_interfaces.Vote, rationale string) {\n\tmods := GetCore().ProposalModules()\n\tif len(mods) \u003c= moduleIndex {\n\t\tpanic(\"invalid module index\")\n\t}\n\tmods[moduleIndex].Vote(proposalID, vote, rationale)\n}\n\nfunc Execute(moduleIndex int, proposalID int) {\n\tmods := GetCore().ProposalModules()\n\tif len(mods) \u003c= moduleIndex {\n\t\tpanic(\"invalid module index\")\n\t}\n\tmods[moduleIndex].Execute(proposalID)\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"N3lWCoajtJ/15PnsBPKsfw6kgEgnOWHz6fch4YH0JJ8dxr6ZWye09W/KgtTpXzZN7wxruSkfkZaDu2Pmni3SWg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"dao_proposal_single","Path":"gno.land/p/demo/daodao/proposal_single","Files":[{"Name":"dao_proposal_single.gno","Body":"package dao_proposal_single\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n\tdao_core \"gno.land/p/demo/daodao/core\"\n\tdao_interfaces \"gno.land/p/demo/daodao/interfaces\"\n)\n\ntype DAOProposalSingleOpts struct {\n\t/// The threshold a proposal must reach to complete.\n\tThreshold dao_interfaces.Threshold\n\t/// The default maximum amount of time a proposal may be voted on\n\t/// before expiring.\n\tMaxVotingPeriod time.Duration\n\t/// The minimum amount of time a proposal must be open before\n\t/// passing. A proposal may fail before this amount of time has\n\t/// elapsed, but it will not pass. This can be useful for\n\t/// preventing governance attacks wherein an attacker aquires a\n\t/// large number of tokens and forces a proposal through.\n\tMinVotingPeriod time.Duration // 0 means no minimum\n\t/// If set to true only members may execute passed\n\t/// proposals. Otherwise, any address may execute a passed\n\t/// proposal.\n\tOnlyMembersExecute bool\n\t/// Allows changing votes before the proposal expires. If this is\n\t/// enabled proposals will not be able to complete early as final\n\t/// vote information is not known until the time of proposal\n\t/// expiration.\n\tAllowRevoting bool\n\t/// Information about what addresses may create proposals.\n\t// preProposeInfo PreProposeInfo\n\t/// If set to true proposals will be closed if their execution\n\t/// fails. Otherwise, proposals will remain open after execution\n\t/// failure. For example, with this enabled a proposal to send 5\n\t/// tokens out of a DAO's treasury with 4 tokens would be closed when\n\t/// it is executed. With this disabled, that same proposal would\n\t/// remain open until the DAO's treasury was large enough for it to be\n\t/// executed.\n\tCloseProposalOnExecutionFailure bool\n}\n\ntype daoProposalSingle struct {\n\tdao_interfaces.IProposalModule\n\n\tcore      dao_core.IDAOCore\n\topts      *DAOProposalSingleOpts\n\tproposals []dao_interfaces.Proposal\n}\n\nfunc NewDAOProposalSingle(core dao_core.IDAOCore, opts *DAOProposalSingleOpts) dao_interfaces.IProposalModule {\n\tif core == nil {\n\t\tpanic(\"core cannot be nil\")\n\t}\n\n\tif opts == nil {\n\t\tpanic(\"opts cannot be nil\")\n\t}\n\n\tif opts.AllowRevoting {\n\t\tpanic(\"allow revoting not implemented\")\n\t}\n\n\tif opts.OnlyMembersExecute {\n\t\tpanic(\"only members execute not implemented\")\n\t}\n\n\t// TODO: support other threshold types\n\tthreshold := opts.Threshold.ThresholdQuorum\n\tif threshold == nil {\n\t\tpanic(\"opts.Threshold must be of type ThresholdQuorum\")\n\t}\n\n\tthresholdPercent := threshold.Threshold.Percent\n\tif thresholdPercent == nil {\n\t\tpanic(\"opts.Threshold.Threshold must be of type Percent\")\n\t}\n\tif *thresholdPercent \u003e 10000 {\n\t\tpanic(\"opts.Threshold.Threshold must be \u003c= 100%\")\n\t}\n\n\tquorumPercent := threshold.Quorum.Percent\n\tif quorumPercent == nil {\n\t\tpanic(\"opts.Threshold.Quorum must be of type Percent\")\n\t}\n\tif *quorumPercent \u003e 10000 {\n\t\tpanic(\"opts.Threshold.Quorum must be \u003c= 100%\")\n\t}\n\n\treturn \u0026daoProposalSingle{core: core, opts: opts}\n}\n\nfunc (d *daoProposalSingle) Render(path string) string {\n\tminVotingPeriodStr := \"No minimum voting period\"\n\tif d.opts.MinVotingPeriod != 0 {\n\t\tminVotingPeriodStr = \"Min voting period: \" + d.opts.MinVotingPeriod.String()\n\t}\n\n\texecuteStr := \"Any address may execute passed proposals\"\n\tif d.opts.OnlyMembersExecute {\n\t\texecuteStr = \"Only members may execute passed proposals\"\n\t}\n\n\trevotingStr := \"Revoting is not allowed\"\n\tif d.opts.AllowRevoting {\n\t\trevotingStr = \"Revoting is allowed\"\n\t}\n\n\tcloseOnExecFailureStr := \"Proposals will remain open after execution failure\"\n\tif d.opts.CloseProposalOnExecutionFailure {\n\t\tcloseOnExecFailureStr = \"Proposals will be closed if their execution fails\"\n\t}\n\n\tthresholdStr := \"\"\n\tif threshold := d.opts.Threshold.ThresholdQuorum; threshold != nil {\n\t\tthresholdStr = \"Threshold: \" + threshold.Threshold.Percent.String() + \"\\n\\n\" +\n\t\t\t\"Quorum: \" + threshold.Quorum.Percent.String()\n\t}\n\n\tproposalsStr := \"## Proposals\\n\"\n\tfor _, p := range d.proposals {\n\t\tproposalsStr += \"### #\" + strconv.Itoa(p.ID) + \" \" + p.Title + \"\\n\" +\n\t\t\t\"Status: \" + p.Status.String() + \"\\n\\n\" +\n\t\t\t\"Proposed by \" + p.Proposer.String() + \"\\n\\n\" +\n\t\t\tp.Description + \"\\n\\n\" +\n\t\t\t\"Votes summary:\" + \"\\n\\n\" +\n\t\t\t\"- Yes: \" + strconv.FormatUint(p.Votes.Yes, 10) + \"\\n\" +\n\t\t\t\"- No: \" + strconv.FormatUint(p.Votes.No, 10) + \"\\n\" +\n\t\t\t\"- Abstain: \" + strconv.FormatUint(p.Votes.Abstain, 10) + \"\\n\\n\" +\n\t\t\t\"Total: \" + strconv.FormatUint(p.Votes.Total(), 10) + \"\\n\" +\n\t\t\t\"#### Messages\\n\" +\n\t\t\t\"#### Votes\\n\"\n\n\t\t/* dev\n\t\tp.Ballots.Iterate(\"\", \"\", func(k string, v interface{}) bool {\n\t\t\tballot := v.(dao_interfaces.Ballot)\n\t\t\tproposalsStr += \"- \" + k + \" voted \" + ballot.Vote.String() + \"\\n\"\n\t\t\treturn false\n\t\t})\n\t\t*/\n\n\t\t// /* test3\n\t\tballotsCount := p.Ballots.Size()\n\t\tfor i := 0; i \u003c ballotsCount; i++ {\n\t\t\tk, v := p.Ballots.GetByIndex(i)\n\t\t\tballot := v.(dao_interfaces.Ballot)\n\t\t\tproposalsStr += \"- \" + k + \" voted \" + ballot.Vote.String() + \"\\n\"\n\t\t}\n\t\t// */\n\n\t\tproposalsStr += \"\\n\"\n\t}\n\n\treturn \"# Single choice proposals module\" + \"\\n\" +\n\t\t\"## Summary\" + \"\\n\" +\n\t\t\"Max voting period: \" + d.opts.MaxVotingPeriod.String() + \"\\n\\n\" +\n\t\tminVotingPeriodStr + \"\\n\\n\" +\n\t\texecuteStr + \"\\n\\n\" +\n\t\trevotingStr + \"\\n\\n\" +\n\t\tcloseOnExecFailureStr + \"\\n\\n\" +\n\t\tthresholdStr + \"\\n\\n\" +\n\t\tproposalsStr\n}\n\nfunc (d *daoProposalSingle) Propose(title string, description string, messages []interface{}) {\n\t// TODO: auth\n\td.proposals = append(d.proposals, dao_interfaces.Proposal{\n\t\tID:          len(d.proposals),\n\t\tTitle:       title,\n\t\tDescription: description,\n\t\tMessages:    messages,\n\t\tProposer:    std.GetOrigCaller(),\n\t\t// Ballots:     avl.NewTree(), // dev\n\t\tBallots: avl.NewMutTree(), // test3\n\t\tStatus:  dao_interfaces.ProposalStatusOpen,\n\t})\n}\n\nfunc (d *daoProposalSingle) Vote(proposalID int, vote dao_interfaces.Vote, rationale string) {\n\tvoter := std.GetOrigCaller()\n\n\tif len(d.proposals) \u003c= proposalID {\n\t\tpanic(\"proposal does not exist\")\n\t}\n\tproposal := d.proposals[proposalID]\n\t// TODO: check proposal expiration\n\n\tvotePower := d.core.VotingModule().VotingPower(voter)\n\tif votePower == 0 {\n\t\tpanic(\"you're not a member\")\n\t}\n\n\t// TODO: handle revoting\n\tif ok := proposal.Ballots.Has(voter.String()); ok {\n\t\tpanic(\"you already voted\")\n\t}\n\tproposal.Ballots.Set(voter.String(), dao_interfaces.Ballot{\n\t\tVote:      vote,\n\t\tPower:     votePower,\n\t\tRationale: rationale,\n\t})\n\n\tproposal.Votes.Add(vote, votePower)\n\n\td.updateStatus(proposalID)\n}\n\nfunc (d *daoProposalSingle) Execute(proposalID int) {\n\texecuter := std.GetOrigCaller()\n\n\tif len(d.proposals) \u003c= proposalID {\n\t\tpanic(\"proposal does not exist\")\n\t}\n\tprop := d.proposals[proposalID]\n\n\td.updateStatus(proposalID)\n\tif prop.Status != dao_interfaces.ProposalStatusPassed {\n\t\tpanic(\"proposal is not passed\")\n\t}\n\n\tfor _, message := range prop.Messages {\n\t}\n\n\td.proposals[proposalID].Status = dao_interfaces.ProposalStatusExecuted\n}\n\n// FIXME: should probably return a copy for safety\nfunc (d *daoProposalSingle) Proposals() []dao_interfaces.Proposal {\n\treturn d.proposals\n}\n\nfunc (d *daoProposalSingle) Threshold() dao_interfaces.Threshold {\n\treturn d.opts.Threshold\n}\n\nfunc (d *daoProposalSingle) updateStatus(proposalID int) {\n\tproposal := d.proposals[proposalID]\n\tif proposal.Status == dao_interfaces.ProposalStatusOpen \u0026\u0026 d.isPassed(proposalID) {\n\t\td.proposals[proposalID].Status = dao_interfaces.ProposalStatusPassed\n\t\treturn\n\t}\n}\n\nfunc (d *daoProposalSingle) isPassed(proposalID int) bool {\n\tproposal := d.proposals[proposalID]\n\n\t// TODO: support other threshold types\n\tthreshold := d.opts.Threshold.ThresholdQuorum.Threshold\n\tquorum := d.opts.Threshold.ThresholdQuorum.Quorum\n\n\ttotalPower := d.core.VotingModule().TotalPower()\n\n\tif !doesVoteCountPass(proposal.Votes.Total(), totalPower, quorum) {\n\t\treturn false\n\t}\n\n\t// TODO: handle expiration\n\toptions := totalPower - proposal.Votes.Abstain\n\treturn doesVoteCountPass(proposal.Votes.Yes, options, threshold)\n}\n\nfunc doesVoteCountPass(yesVotes uint64, options uint64, percent dao_interfaces.PercentageThreshold) bool {\n\tif options == 0 {\n\t\treturn false\n\t}\n\tpercentValue := uint64(*percent.Percent)\n\tvotes := yesVotes * 10000\n\tthreshold := options * percentValue\n\treturn votes \u003e= threshold\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"2tOjzFaVnHimXzPN3E9KMSCl67bJnM+Swpt9eZSGljgB1r/RbHh+ofXPZn+CpGqqKrcjYFm4ZwbeteU8pnApnw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"dao_realm","Path":"gno.land/r/demo/foo_dao_2","Files":[{"Name":"dao_realm.gno","Body":"package dao_realm\n\nimport (\n\t\"std\"\n\t\"time\"\n\n\t\"gno.land/p/demo/daodao/core\"\n\t\"gno.land/p/demo/daodao/interfaces\"\n\t\"gno.land/p/demo/daodao/proposal_single\"\n\t\"gno.land/p/demo/daodao/voting_grc4\"\n\t\"gno.land/p/demo/grc/grc4_group\"\n)\n\nvar daoCore = dao_core.NewDAOCore(dao_voting_grc4.NewGRC4Voting(grc4_group.NewGRC4Group([]grc4_group.Member{\n\t{\"g1747t5m2f08plqjlrjk2q0qld7465hxz8gkx59c\", 1}, // zooma\n\t{\"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv\", 1}, // normadena\n\t{\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\", 1}, // no dev\n\t{\"g1ckn395mpttp0vupgtratyufdaakgh8jgkmr3ym\", 1}, // yo\n})), nil)\n\nfunc init() {\n\ttt := dao_interfaces.Percent(100) // 1%\n\ttq := dao_interfaces.Percent(100) // 1%\n\tproposalMod := dao_proposal_single.NewDAOProposalSingle(daoCore, \u0026dao_proposal_single.DAOProposalSingleOpts{\n\t\tMaxVotingPeriod: time.Hour * 24 * 42,\n\t\tThreshold: dao_interfaces.Threshold{ThresholdQuorum: \u0026dao_interfaces.ThresholdQuorum{\n\t\t\tThreshold: dao_interfaces.PercentageThreshold{Percent: \u0026tt},\n\t\t\tQuorum:    dao_interfaces.PercentageThreshold{Percent: \u0026tq},\n\t\t}},\n\t})\n\tdaoCore.AddProposalModule(proposalMod)\n}\n\nfunc Render(path string) string {\n\treturn daoCore.Render(path)\n}\n\nfunc GetCore() dao_core.IDAOCore {\n\treturn daoCore\n}\n\nfunc Vote(moduleIndex int, proposalID int, vote dao_interfaces.Vote, rationale string) {\n\tmods := GetCore().ProposalModules()\n\tif len(mods) \u003c= moduleIndex {\n\t\tpanic(\"invalid module index\")\n\t}\n\tmods[moduleIndex].Vote(proposalID, vote, rationale)\n}\n\nfunc Execute(moduleIndex int, proposalID int) {\n\tmods := GetCore().ProposalModules()\n\tif len(mods) \u003c= moduleIndex {\n\t\tpanic(\"invalid module index\")\n\t}\n\tmods[moduleIndex].Execute(proposalID)\n}\n\nfunc Propose(moduleIndex int, title string, description string) {\n\tmods := GetCore().ProposalModules()\n\tif len(mods) \u003c= moduleIndex {\n\t\tpanic(\"invalid module index\")\n\t}\n\tmods[moduleIndex].Propose(title, description, nil)\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"ge0jUbtyBo3BWXJlotaJn4aMY2D3D/5QKT86XD2wJo084UzvUsQ7hoAtuExTu0In5TcDburJbFFpch8tPvYLKQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","package":{"Name":"dao_realm","Path":"gno.land/r/demo/foo_dao_3","Files":[{"Name":"dao_realm.gno","Body":"package dao_realm\n\nimport (\n\t\"std\"\n\t\"time\"\n\n\t\"gno.land/p/demo/daodao/core\"\n\t\"gno.land/p/demo/daodao/interfaces\"\n\t\"gno.land/p/demo/daodao/proposal_single\"\n\t\"gno.land/p/demo/daodao/voting_grc4\"\n\t\"gno.land/p/demo/grc/grc4_group\"\n)\n\nvar daoCore = dao_core.NewDAOCore(dao_voting_grc4.NewGRC4Voting(grc4_group.NewGRC4Group([]grc4_group.Member{\n\t{\"g1747t5m2f08plqjlrjk2q0qld7465hxz8gkx59c\", 1}, // zooma\n\t{\"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv\", 1}, // normadena\n\t{\"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a\", 1}, // no dev\n\t{\"g1ckn395mpttp0vupgtratyufdaakgh8jgkmr3ym\", 1}, // yo\n})), nil)\n\nfunc init() {\n\ttt := dao_interfaces.Percent(100) // 1%\n\ttq := dao_interfaces.Percent(100) // 1%\n\tproposalMod := dao_proposal_single.NewDAOProposalSingle(daoCore, \u0026dao_proposal_single.DAOProposalSingleOpts{\n\t\tMaxVotingPeriod: time.Hour * 24 * 42,\n\t\tThreshold: dao_interfaces.Threshold{ThresholdQuorum: \u0026dao_interfaces.ThresholdQuorum{\n\t\t\tThreshold: dao_interfaces.PercentageThreshold{Percent: \u0026tt},\n\t\t\tQuorum:    dao_interfaces.PercentageThreshold{Percent: \u0026tq},\n\t\t}},\n\t})\n\tdaoCore.AddProposalModule(proposalMod)\n}\n\nfunc Render(path string) string {\n\treturn daoCore.Render(path)\n}\n\nfunc GetCore() dao_core.IDAOCore {\n\treturn daoCore\n}\n\nfunc Vote(moduleIndex int, proposalID int, vote dao_interfaces.Vote, rationale string) {\n\tmods := GetCore().ProposalModules()\n\tif len(mods) \u003c= moduleIndex {\n\t\tpanic(\"invalid module index\")\n\t}\n\tmods[moduleIndex].Vote(proposalID, vote, rationale)\n}\n\nfunc Execute(moduleIndex int, proposalID int) {\n\tmods := GetCore().ProposalModules()\n\tif len(mods) \u003c= moduleIndex {\n\t\tpanic(\"invalid module index\")\n\t}\n\tmods[moduleIndex].Execute(proposalID)\n}\n\nfunc Propose(moduleIndex int, title string, description string) {\n\tmods := GetCore().ProposalModules()\n\tif len(mods) \u003c= moduleIndex {\n\t\tpanic(\"invalid module index\")\n\t}\n\tmods[moduleIndex].Propose(title, description, nil)\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"jgRi9HbES/xoQiVHxNF9e8HqBPJayheMVRPZqMFmEnAsi7mOALDuASVYJeg38hTUz1/M+4A223dGGsDo1YF3tA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14u5eaheavy0ux4dmpykg2gvxpvqvexm9cyg58a","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Propose","args":["0","CLI Proposal","This proposal was created by CLI, so it has 1337 powers"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3s6zpSR/pK7NJR02hFpLDOuBpX/k3zB3kKmrOpK6Rxc"},"signature":"9pHxz0RZTH6FUt3EAR6Oi5UVleNEyJhRXhggvZA2tgMO8oB2klmFDLRyXPEBB97nTXCAVv+ORhOZutXGb0XpYQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g12345","14"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"a9e3buHZFNFMd7Xdnf1I0BmV2OfgqOzhMRQp4Lb5Sh4UaVVklQp4nBbKA7vdAhFXUl1/5Nnpq11qr6oMdW/FgQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","package":{"Name":"mi","Path":"gno.land/r/mi","Files":[{"Name":"a.gno","Body":"// You can edit this code!\n//\n//\t.     Click here and start typing.\npackage oack"},{"Name":"gno.mod","Body":"module gno.land/r/mi"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"XEhlVprEYiC6fBbTQMAF1RK1wYmIXcyUD5cQJdPsnbgI1bAp6R9pYXtEDZdYIL9TTLs4Dj1PUpi2c4DeQ2rYLA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","to_address":"g1flk9z2qmkgqeyrl654r3639rzgz7xczdfwwqw7","amount":"4129883ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"wzesgh9DZ06WscaxdHysUmgenLqDCs11FAFiCfcJsCcs5V6ngp2ADxETdh1byiPH6A1uNddJg7bd/lrkk8Nj1A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1flk9z2qmkgqeyrl654r3639rzgz7xczdfwwqw7","to_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0cN2jM5SaG0tbXUEYYhgUmFIGjdIxzlDeBxpetbIQsa"},"signature":"5Cc3zPBdTKi7FZkrNdKokr/WzrsUtUGp2ccbLX0dX6wiqvOL8fOnEANr592RC6WPehyaO3N1vXvcQjwudG3xsg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","to_address":"g1flk9z2qmkgqeyrl654r3639rzgz7xczdfwwqw7","amount":"1000000ugnot"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"1vpUCPmWLTw77MMigdOn8yVYwqlBX5CiueAXnSH/1GwKsZsAU2tbMO11MvIdf9WLCFJpUeN/4U44UslUgzexeA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1r8r79suzvajkh047qss09ce3akegaqars3j6uy","to_address":"g1r8r79suzvajkh047qss09ce3akegaqars3j6uy","amount":"309999999ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxBOIDQaEvDBJrHMopsYcZDKDwwRLQ3AqoHUYa6gDbYM"},"signature":"jiQ1HVPT19ovCDjExeIN7N6jZgH7XdQ30i69c7etPk18rk2SWchQOOcBIjbH1vK1QD8Tu+stw0pAa0yTYH4RyA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Vote","args":["0","0","0","I like it"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"/04kQ8Kg3wjJvOrPe8F2bbY7VNfqsrKxng7pXShYy5o1KyrFMEUW/k/YJVxB7E65sAwrTlcz2RTs07TlGBuYZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Execute","args":["0","0"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"ngiEMoJ4cy04pbchrvmuMu1dOD7qcJC6u1Jfk4Pth1IdZvDVzPG3pWS3lUIhXxHd6W086745Ugu7KLm3NIThQA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Propose","args":["0","A proposal","This is a proposal created in the Teritori dApp using Adena"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"1j45sW/Nc03wacrMg834/NY4USN3OM9hqm6VAUBavTdFgbI+PvPBfZ60JRRlhfYwW987IurwgcUFsAgWomWZkw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Vote","args":["0","1","0","I like it"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"mFwTIGgkJN/36R4fks/yj3B55FJZc/QdfepD07fr0+gtWq0zrw+oarCcg0TWa/oNPbFqtoxqS9bu9U0jTqlGGg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Execute","args":["0","1"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"8/yhRIZ5mRKLpxRhZ+K4tTy2mcfcI6NTlCZsYrw+LKMfalNDOPUcZdoSfYRQrHI+QdnEHkbAZsaYLnfRQLSX8w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g183qc644n8fqzuqapy6q0tkcc9qhwqarg3uflnh","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1mjzyk7r49ta4h6ppgv2fedgz5ek6hgyttge9pv","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5XQ9SBS7WBA44IZGpu5wntarn9DHeqGY+nU5efQLT6f"},"signature":"KBVyfV1hHmM8D3EC8P/OERJu3hl3WjWESz6PlmERuNpZ6Ro+uw9Y4vfHJM6rrxVrPuJWY4qQAjGrQOnBRKtfNw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","1"]},{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","a2","Hello"]},{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"5000000ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"9HIYmKB8P1aDcypP4ImNC4H27sW5R9geGM60AGnpBas/x6pTTvM9VQ4U342025UdwJWgBzMQntnoGDjFM23B5g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"5000000ugnot"},{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["42","a2","Hello"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"NyisN2khQzK5ClzITyNOwpq7c6VcDEZg5HT8SBrYIYcV35NXlCp7DUbqR92azvxPmP3hpykm7XyR1qGWxC7J7Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"ㅁㄴㅇㄹㄴㅇ","func":"234124ㅁ","args":["123"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"nMNiS2+Ry9ZUYWkkty8MSS7g+9sswhIWlPdJRX7wCsVzwJ65hz4+ascpxaXqGZp2/cD8Mp/0ZsH95wooEvCB3Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","to_address":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"zo3MXksXKZE3b4hHdjClRwzN1T2LtleEt8tJlrOF1jI2xyQvEwrpP7fRw5PXd09C7xsxVLmy8d7EY3sy/oTxOA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19fs7tzl2r4hpvpvxt9tvv54gpy6fekt8shzp4q","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1zm2t02yjr93ek4hm8hew0nuhdhza4m6maptkll","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9/1C31yQAezwSMHVzo9t5Sa+loXWIa+Cv4ywAobNOwT"},"signature":"xbNQtotb1sYXq2js8L3gF4pMJI4mCjb/+rBSmWyAGgpCBSnnrgOz1N6VzCmf0EP12nuIVX+/MqU+UwEVU9PA0Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72s0","10"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"7RISbzWHRI0oU11QO5A/p1Yj89ceoQ/GeL2VdUJIqGAVQGd9ll2ny2zWz6NZSbKLPTyaTa9ivxyOb+ZJC19GeA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","amount":"12000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"AUkXTCPENLKtxOpnQCzT5wotJB6RUfguQpNFf3sm3uhgNoTMRDWfu88bH15OrbDYBuA9dD+hgaTBFMSBsplg9Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","12"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"WC7dfwFkyuq3whufj8Ocp7/04k7E85mPIje1PW3hQlUgRjlBjYma50JTqjh0qyaHnLUVQC/ti1HlvFmoGrxd/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15aqqnlhfupy6m3yma99c067jvnsgtltsh2gl4c","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A27+HjKCKEmzyBEVKKRYN/8ItA49KusmYvj05+rlSD0p"},"signature":"3NcsF+EMacffqz5JoZKwy1dEToZ2AnSBAEub1qgC2nkE3NYbyyLKqir27RKSV07PgkRDDhaTIiPIN00dgucnIw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","to_address":"g15wl79apvky9kr994t8q04keq3u79lx96x0sjy5","amount":"12000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"pHW+RT1sJroWuHjvXIFCI5yA4XAaQDlUjVO7ahsgTpM48meNKUR2axwPZe8c8wgvSET/5sQmIoO7j7jaAgXKEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g15wl79apvky9kr994t8q04keq3u79lx96x0sjy5","123"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjXSDQU9TKRTkgO1gnAj6TAH9Y4wIdQ8dV61PRqgpuzo"},"signature":"TV2A3F4WlWWxY9GXwi7BavuF01AgmFKZq6ROq9SO9Og3+M0o4pydxdcA8zNezSEWcElYIpSrgqNp8LkR3qC4uQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15wl79apvky9kr994t8q04keq3u79lx96x0sjy5","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g17mcw908lp5y006avp4fjr082wrzryzqh2qgr8k","12"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4Zq2nQ1PgKJi6u8SDBgHQVXaO3v8ULqUBG8JwiDqVve"},"signature":"jUpY7wc4JZhIPns+yRzEuHOZDaU8FLvxxzh9W0oywyUKK9eKnwWH/YlmX4r0MQHkXfODd7aywh54mLCcPdWq9g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/foo20","func":"Transfer","args":["g1ftg9jsnzfjp7yw8dcmcxc5czqstw0cudfg72sh","2"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"o1Cqc1ZEgnf2E8+Qcy3d8ZWljfk5/XGzg8c2HKWpV79Z3kjJv8suhH7Q3oWvNRGML1h653oxrWokaarh3/H/IQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fnakf9vrd6uqn8qdmp88yam4p0ngy572answ9f","to_address":"g1fnakf9vrd6uqn8qdmp88yam4p0ngy572answ9f","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3cWVULHSHC1mwK8o1vfJHKfNMvLEvKU/sHPQoFWRoey"},"signature":"XxDERJc1YZq/ks/cVhJRuT6rLItmva8BkBUKsDpbnWtRXxTMU/SufP2JGkmy96P0AN2UH2Xa+5/TfYTu0LF1yQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fnakf9vrd6uqn8qdmp88yam4p0ngy572answ9f","to_address":"g1fnakf9vrd6uqn8qdmp88yam4p0ngy572answ9f","amount":"1ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3cWVULHSHC1mwK8o1vfJHKfNMvLEvKU/sHPQoFWRoey"},"signature":"2BImZ+e0I0hITxIKXtE1UKlO06+0Nhgg+RUc9gXSbapwEUDpcZKctH//2aunPvCIsB/a0UAntq7HBItIH2PTYg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1fnakf9vrd6uqn8qdmp88yam4p0ngy572answ9f","5000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"5MP9LUeBFC24qT8Fdb+3v1rmwjXvblKMKgIriyjAk8Z2UE07EsIKC2ZnhQXfwo0m3ohmsCkjMVF+UKm/S9KEIg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fnakf9vrd6uqn8qdmp88yam4p0ngy572answ9f","send":"","pkg_path":" gno.land/r/demo/tong","func":"Transfer","args":["g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt"," 1"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3cWVULHSHC1mwK8o1vfJHKfNMvLEvKU/sHPQoFWRoey"},"signature":"LgkzYIvyXugn97JsSxuL9NVl/+kvA0+ypt+Y2OWfiAs+sBFr/e2jF4eSnZsu2M9nku2cn6Zlsh1oVHo9+EhFEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Propose","args":["0","UI Proposal","This is a proposal written in the UI, so it's extra sweet"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"WisLN6ym3nl3VineEWKocFguG9kSKyd99d9oc8NEHCMmUxLSfK6cPXkl3aqRr5/42OGCjRAq6qoGmuBPTY9Wvw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Propose","args":["0","UI Proposal The Second","Testing stuff.."]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"cVwauJ7wda/R0Z7QteXyP26gPDmJYBHunM2MZiRezuM7Wrmpxhh5buys7pFUVlV2qOFAkZwcB1qq5DzkTgAXGA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Propose","args":["0","UI Proposal The Third aka The Charm","I will soon run out of proposal name ideas"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"2v4JrRAb08r8AtxM4iA4pAVvlHzpQ5Eo1BwNE6qlTX8TwixqA8ZDa83QHdlSVOOwRE+/XQ0JOoPewcfYePmE8A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Vote","args":["0","4","0","I like it"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"RPRa1LIg+lfnL/QxldhvvdK2F7DsxRnlih3n+zw+a01uo/DdfqNfGvV0a1STkhHp1YBOos3LZcPgI3/zfUsDRA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Vote","args":["0","3","0","I like it"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"JpAfPpMnjriu2rGVwEDjZ4SiKrhbO1+5k0ZJ68Wuy/kouPgq/pVvXn7ne7M1WzGPC0qzgSdgMTMV9S37zd4pkw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Vote","args":["0","2","0","I like it"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"jaKrm/fNSQJNpvlr+o0cUbj5y4irBJd+zZFQC62mtuFa1cfl36SkCDQdDENuVKBOPH74W0UnjeSFsUzr2ML9rQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Execute","args":["0","3"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"LvKUbcLEU5A4XhD/BE2YInLwsK39xL4mQb3UD6q/5K9+f2UacRcd+WNXYfSXTRNXOsDzlol0ZGudEDUvtNOaiQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Propose","args":["0","UI Proposal The Fourth aka The Unwanted","..."]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"SIj70d6fpRa5y3TKG4+I0iYqb267DwZ0XYFFCE3JE7xMvm6IS2EWgraWbNY8jcpRS75Nr3nO73kO0dE9kdDgSg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Vote","args":["0","5","0","I like it"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"ZiXpPdMsw8/IslGKaNHKBV2y+282Hy1G6bOVXrDaYUx0K1bVArs/EPpaoOyTU6k3a0KIkWMJnvO/SVtrTONTfQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Propose","args":["0","Oh nonono","..."]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"fcQBjvthYGcSMFNREFdT7AdhUntF90q8tdj63YCulvo6ZdNTdxVG1JlnWfZGXvI8qLLmejdp6kD6yhdqCef13A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_2","func":"Vote","args":["0","6","1","Me like it"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"tAoj/NKIoGNxhBgYa347cZMGbyxJNkLOzvZFAaCXbi0Wbxhy+7pnhcAUi9Uu06EH2W8YsvUkogGqsaOYFfC9aw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_3","func":"Vote","args":["0","0","1","Me like it"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"cOWYprku2q6fqIr7DnAwwitYXv6lGg6eTGLWgt0f+hAxBY85hG1oSXZIvUesB7hc5F488GfVgun3ug7P1FHOUQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_3","func":"Propose","args":["0","UI",""]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"3l5rSaQ+DZBfEQde8FVyQqZD1CTcWU3L9U3wVfTafkYinyOTQE91rDe/Poe+QUdC+ETXxjrPCaJMAznmwX00mA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_3","func":"Vote","args":["0","0","1","Me like it"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"U3G4U5xQ1AN+J+siyzKMf50HdAlK2cUQoUUyF4jgsRoXZPeo5iuLcXnJ8wS0j7OOoc/BdZpmpmnZISshYDUJag=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_3","func":"Vote","args":["0","0","1","Me like it"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"79m3V+GuzpABwKGwdYSCnfoUMUAudhOHBvSWxvD2pioZs1RL/YaLYSXoZaKciDQ+Eh1IzqAr6xqNpZC6Li0Nbg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/demo/foo_dao_3","func":"Vote","args":["0","0","1","Me like it"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"zGef29BNL5fv1UFbFA1DoKQti3q4B3kst3zI7AAYtpxj4a4/SLPr4lx7hBne4U74M5zG+dCUFAVFG7QdInVk1g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","amount":"22130034566ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"oXHeM+ak5P7StSKTT+RSItOzEoHDUQzrC0njYF4h9FEFlu7y6yAHMP62RncB8c1u2ZYlT/lrYfTNucZnxpM/pw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","amount":"12000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"OuSK+vqR5cbvQnJUVpT+kVlefP2unlAhn4uE/EMpMzhZ8Wz2ic2q5C6N2RiBpVrjs0HHHl6MwQ5eulC6OSzr+Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"hello","Path":"gno.land/r/demo/hello","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"jdcvtsU1TSOcGhIrl86haDNTL1zVjMUwnigjn5t7bYthqFK7EksPegHlnxSYdFONTSWb4HwZMZZASWQupBX0oQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"hello","Path":"gno.land/r/demo/hello_sample2","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"f8eHSuUa6nTILSu5G/PH17S2IDN6SFpCm9PMJYZIKesiEGrhsL7l1DEJQzf0a/bHHHSmNMmWHKJTaKDDK95RYw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"hello","Path":"gno.land/r/demo/hello_sample2","Files":[{"Name":"hello.gno","Body":"package hello_sample2\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"e0/b+/NsvqvEDjMKN64TTiMtSjS99mx6MNNM/18mUmJ+oF6MqP9WeLgey5p4PcoyERM8u6Z3XH2wVj7zyTcJkg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"Cwg6NwYflMlXmsxDNJhSqIHoVkBxVIj/zTV8esiYrXYPX3XlgMgTLC965EKqFzhBMIdP2mQdjEjanpGZP4fuDQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"Ev9Yk5YpEUCL/nzUP8+iO5cXekB3Cul2zZWtf9rYH7g8V5wG8xswEJyUmIGfV55p2ccQbK90Rfn93roXvl4nFw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"hello","Path":"gno.land/r/demo/hello_sample3","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"L99ghpVyJjW4QcPLePAuZedoxPUbp8/knAQu0Ug2454LRSkmvcUdfLzB1Fs2GdCAOQYGbfJyic8X4JzdhoH+fQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","package":{"Name":"hello","Path":"gno.land/r/demo/hello_sample4","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\nfunc Render() string {\n\treturn \"Render() called\"\n}"}]},"deposit":""}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"tcyiJy5Uo19zrjgDltEKCxgxJf7va20YPdk+ROh6NX8WfIerYTW2V0pm5uupuWhNlmSDCsF7fXzisG+YsHdsTg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12s3p0rreg5ashpmrmc607hx35zvy0vx7mec600","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Ba3ftqA7W/qZvBWW8spAxWe33lXO3z+NPDS/bTRujWoeL7djt6yPoD7YBC0jgklbzEGXONmsABkg/HDS/QfYmg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1y00a6w0t893yldq6e2karpwqwzh29cz3e0tkah","to_address":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","amount":"250000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aus4efhyOq6IQOIxHPOJrATpDwNGdPQnWN2fM290X4C/"},"signature":"aSL+Og0ntFl5mT/enkRZ7Si+NtnojtEODSw8evCByJZk43TVrJfVGPXZwJ4YSkIqzKxxm1+HrkhUNw62Zybo5A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qdahqtyjj7dnanfm80ugpq9u8srux8hqdzr4vq","send":"","pkg_path":"gno.land/r/demo/users","func":"Register","args":["\"\"","\"mouse_worrier\"","\"\""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A357BkcEZnchB7F1F54yjBgBnb8tquR/4KFyKtwthMRF"},"signature":"+Mwi6cJYZXmllmtEvWcDnpOaYvS5pSJkqRVsAczL3I1UcsPDjc6RmUmfe529it2EI2SLZgwcBhO4TZR7MeXr8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qdahqtyjj7dnanfm80ugpq9u8srux8hqdzr4vq","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mouse_worrier",""]}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A357BkcEZnchB7F1F54yjBgBnb8tquR/4KFyKtwthMRF"},"signature":"P/xB0OPHUGtN2k6PAlcEoWKhj3dNpOYGP22G3tSTK8cbG45Go0U/CsXmc26A4coLxQNi33qk/MVpNCbnbuoNNQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g1qv3dqyw46fut94z9t90jka58saw2e7l99nzqtr","amount":"11000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"ctTEFsyl5YbYJKWewN1I5EUyuCsMJgUJr4NJWIPAzi9mO1770IwvVcRTk4/qEAmnWXvJJsmTCLWQt8DqwujAIA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1","5","5","Hello 👋"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"FeZENPHmhHcojUSeT4ux4QfK7uRQonrQ/PgB9J/KHd8uYASAS6jY8ZC8sUHAA/wVYbt69sglExm3CvatDnXbpg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1","5","5","Hello2 👋"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"8MOJ4brPRqE2y1onCHknIG+PqhLkBuSLPPkSzoKXz4IRvZ0zj/LhdFPmy3HMjwl+2ib2F6icjcf30LHxjgBldw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/demo/banktest","func":"Deposit","args":["ugnot","1000"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"S1/RjAsQUkLURTIwJGPMjivsuPVj6Ecq182nc/sokMtApqaGVBENi+EKGURi4vLIHQBx6xboVItL4fHitmjy9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"1ugnot","pkg_path":"gno.land/r/demo/banktest","func":"Deposit","args":["ugnot","1000"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"BS2BaXxqFSkohfnAoLQ3+DsVKzAPEXA57B6+/lSa2Vs9LioaUcfqKR6uzlgfpTckiBpWyFR/DoA7rDzuR3B3nQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"1ugnot","pkg_path":"gno.land/r/demo/banktest","func":"Deposit","args":["",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"OgYDHpTWIJ6mMVQbT3GlYxTwow3tVqwHi46Ckv0zNDtNxgfU/ruafxXfh2kGWtlLxnMsO8a0WpsmL7FbY63yxA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1tzdfqdc3jcl9laqzls5sd6ukaqsrh43decfcd8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"VmHDKoMWkZHOMtor2yYoGLyUcYuTCUz/wR1m5wafgwo0kq/Gqi6UqkTpxM3q97KlgoU+ms7mhOLwwqD6ddo7+w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tzdfqdc3jcl9laqzls5sd6ukaqsrh43decfcd8","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","chelpressed",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8bQRNGT4oW2scgd3K5hb7t9O6a2rGkvylmFVZFro7ki"},"signature":"jYTbTq4RQVRj0WKLPTX5HxBxGrUd8U7oKamoR5lI2zIkEIXxvTnyj+sayfUjHLaPbQZ7R9QV0u7x5SU5LEKR3A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tzdfqdc3jcl9laqzls5sd6ukaqsrh43decfcd8","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["chelpressed"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8bQRNGT4oW2scgd3K5hb7t9O6a2rGkvylmFVZFro7ki"},"signature":"0ITqDolx51k3Bp2OmdUthQmhWxFsMGjS/h6EPYxuUSghlfDh5cL7WTOAjydBYNZoOpWuTnCv0YmHSjGN1GY6lg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1mzg8lp962tuygdmn8p6qk9wm3r7df3rr0ju9n6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"mJGpJ+HkEGgtuxtpF3tb1l686VUASI+SDzt5p0r9IudlzqsqvnIlHwIGcdIUUoMinEkE0MPOF8DDx+fR9CYVTQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mzg8lp962tuygdmn8p6qk9wm3r7df3rr0ju9n6","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","soucray",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ao9d9Bbrcaz3TIkU42S020W4mYDTflXNIw4iNetMb4hf"},"signature":"azdlak4cxy5zvXit0/1N1HJ5UkIv4N+iU6H7uIWePSUdPVSjzEie0mQeT+rhpEWUaXLhcoYzPdrRgCGJvxdsYw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mzg8lp962tuygdmn8p6qk9wm3r7df3rr0ju9n6","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["soucray"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ao9d9Bbrcaz3TIkU42S020W4mYDTflXNIw4iNetMb4hf"},"signature":"+NUrWU6rdZVdoKCVAMloeoLSCNQPofzbWdhaCAIVbDFf+F76vRY0N4jKh4IgbNlBlxWiZmhmEsLyTS3MOdwLpA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g157lqhmmefwjjgsd32z68s077nx44h0h04h6usp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"PtT6+kh3zsk/AgYzc8s2nucbPMStyTUN3JRwDjLSHZtXxRhLgxAwMGYkyT4qBaDXv7Kt5+/rI/B9bgiDR1y1Xw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g157lqhmmefwjjgsd32z68s077nx44h0h04h6usp","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","pacefrau",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A06PC8q/yAZ5QEFll3OOj1Uj9xYL3Eg6yQRPSoTL8KGN"},"signature":"6tnXOkUEVTY6c22EdasH+0XAx7VB4egzx5UmuWx8bdAta2DZkQrIvDhieWPqXQdR9Kcr7nSf6W8bS+aLUp+vkQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g157lqhmmefwjjgsd32z68s077nx44h0h04h6usp","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["pacefrau"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A06PC8q/yAZ5QEFll3OOj1Uj9xYL3Eg6yQRPSoTL8KGN"},"signature":"l8s/z34LhyBZnOsoxKC3NNEQc0FzSp361+ZaUOaYnywWRP5hK2NjrdK7tGepH2HEIz/toPwiX+3sWSr5IK2A9g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gx7evqc8p99xjmaan0xccll9kw6ug8v89dersk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"SUyMsSoj0DeQoq9zBRQoH3KcBKJB3EvUTxpnUstezrZZ+pQIofW5vca06Ltf4l2nEioaTfihEjqdDFIVgRUVMA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gx7evqc8p99xjmaan0xccll9kw6ug8v89dersk","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","cuichomp",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alc6FFz6lCnIEXWmAJpe+UrfsyGSkSMgk6J0HzBRSwKS"},"signature":"qfhI9+SlQnaJ+nF3646gLHflC0fwBy9qEWwJA/z4BEZDiSAooFKtwX5CASx2haQOmGji8yknrzCU/95NLdM8Tw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gx7evqc8p99xjmaan0xccll9kw6ug8v89dersk","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["cuichomp"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alc6FFz6lCnIEXWmAJpe+UrfsyGSkSMgk6J0HzBRSwKS"},"signature":"BuqG3crRY6pN92/hznhxipxGGApIQg0hmjrsxOzfymAl+ZEfRamYZpSYqJNKJ6ds8hIUPBKUfTEmfDeg/qRalQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g107sw3dysjd7rwacl9a6upl6gykrxg3y462awyc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"UlhHHxPrBF2U3924k5OtTMK5krCdpBpicRSH9VkUjNlGk8DmQBIG7cPfRRpb8eyzuMM7d3k5QPqzn2SMoeSuwA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g107sw3dysjd7rwacl9a6upl6gykrxg3y462awyc","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","memclys",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Asm91M+GHirYQFZWGQvPNdso+I9WF0qh/oOrxl69MK2u"},"signature":"9PSFCfShsfEagymy2g9rf7sS7OOzHIg0P/Pw7dizcxZML9Xa3w0DGo7iB9+Hzes0LaXXo6yYSRL+QONFsIAVdA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g107sw3dysjd7rwacl9a6upl6gykrxg3y462awyc","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["memclys"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Asm91M+GHirYQFZWGQvPNdso+I9WF0qh/oOrxl69MK2u"},"signature":"RNnWVjbV7IPJKOK6ZZtJ4/nwqqzXRyjh1Yo9QGtQguR+XlD0VeyhXNB8FiV8fLgs3t9lhxf/TSlTB7gJ/91PlQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fvfd62zg0nzrnhjfjd9nhzh8sf7gfzufslf6de","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"TK72t9W15lIUvibAani5oH01VLODK8YNMFkZ4IzdeocIQca1JsXcXYS8rmetInpojLpAvSWVuX5orvyW3gMN7Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fvfd62zg0nzrnhjfjd9nhzh8sf7gfzufslf6de","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","leechrou",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq+6ZVi5Knr8N9ECPduVlORAhtjTgSumNh5jiYt1243d"},"signature":"kH/3I5hDILhfNDULf/iNWc2aLJoz5rKSDz6f9bM9MhkJbyoVoF9wb+oj4LNWg2CBKn/5ZiFu8vBsnUUWGmfueQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fvfd62zg0nzrnhjfjd9nhzh8sf7gfzufslf6de","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["leechrou"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq+6ZVi5Knr8N9ECPduVlORAhtjTgSumNh5jiYt1243d"},"signature":"Wsekt/lOfGNQfPoZ5VObtpNjn0WV4NlQOe9cNHYLLm1P9rtvVwtUwQzO5Id4ZgBcf/Z9umrIuJ3DhsFKxws9ig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1wnt20ulmkkxf4rlq4cazhqzlykdtqzk3lrc39t","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"5P3inUgV5qScDeKEYSe+MWNq8iKM9j0oQfvI62Wo7hswYkNGNEcCFACZSO8BmKUI4fy1kKUydEWEBXHtgvIXQA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wnt20ulmkkxf4rlq4cazhqzlykdtqzk3lrc39t","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","jackcleans",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay00af6YP8jmRufaawDkhK7ar1LP9u+Pt7uBCGJxFOa6"},"signature":"OK91BBtS7hofdUZ3yiPEMEWm9micRvIcZXm1++Xf3U0SjGhym8QGP/7b+Pf+lqAKfatHhHlDFKv8f/MpQYTApg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wnt20ulmkkxf4rlq4cazhqzlykdtqzk3lrc39t","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["jackcleans"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay00af6YP8jmRufaawDkhK7ar1LP9u+Pt7uBCGJxFOa6"},"signature":"2XE0t6dJLH0ydzeaaprT+Gi9yyTxfjvVLmPdzYJwMPp2hYyxpaDqqdZ7k78ohlABAn+UVUabuZnG9OmjQUgL2A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1f5kyq7ad8c9kn0dnavghdhfhgr38uwnj7f83uq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kyvwpdc9cwYfLqy74buup1bZVErUJn8/4PTDqFPjmhh8I5FV/dEYa49U5ulKWUXOzN+MRjf8B5H/nNVaX4xT8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1f5kyq7ad8c9kn0dnavghdhfhgr38uwnj7f83uq","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","crookesst",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhNkVdJIFl2e/Lg77ADaiyukGSicRcy0doz46bBfuTn0"},"signature":"JWPE1A6FtGSXXANzglaM4uAL9jdcHGFy7GhPbeN9MLE7ezJp4keeiNCIBcFSlTInNzKY0xvmAqS+mq6Gs9+c5w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1f5kyq7ad8c9kn0dnavghdhfhgr38uwnj7f83uq","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["crookesst"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhNkVdJIFl2e/Lg77ADaiyukGSicRcy0doz46bBfuTn0"},"signature":"1CAnM1Fu/3fmVU4Uc58PW4exWoe1AtwFcCI6OLXOwrMb9Wl2x9/TNWU5BfvzmDm67ZFF1564FCpEXzVwVP+8vA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12h9lvxrukn7nmrc004kr64uvarxpmfdx7z23xr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"FrjWza5yvmtzJZcjPTBfVtNY/ySd82B/2FFLywPPOiMfUXd/qqXR7tBBxcevp9RKCJ0DGoB4yebgZaL/C22sXQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12h9lvxrukn7nmrc004kr64uvarxpmfdx7z23xr","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","coptspap",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Azgo9vpOaM4AuCKpJYlbfENk391PYM0S16jcGlaHq8JW"},"signature":"0dMrpOBX62d4nd2eSueLW96SZTEGiWp+9dj87j7cxXo4ZJU2z3FjP5aOQfQ+kQHBLecRxSqMoZo/dAZhM0/PMQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12h9lvxrukn7nmrc004kr64uvarxpmfdx7z23xr","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["coptspap"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Azgo9vpOaM4AuCKpJYlbfENk391PYM0S16jcGlaHq8JW"},"signature":"Vtvquo7NFDxU3NQnCH72HfTmf5hobo0rsbXdGv9MtM5kxEel8rWFDkE5SOZdsrUnW9RWD+0vDFeJ6kM94eX0EQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1uczajrdlpsv47gnd5eg2zcqwjmzfl5sulm2rel","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"aUxmOFICb8B7tzPr9INPf+e6Cr8VsEQBx6M7m7TbCrg+rTdTyjF8H1akGRyod+Yio8Ul/ICeXf1x4ShgbdxIrg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uczajrdlpsv47gnd5eg2zcqwjmzfl5sulm2rel","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","hodpace",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5Abgn0zE04npG3/ukvZpoHsSQjQaT+isMtNpL3NVmS0"},"signature":"N2MjlHZtCvKoWVuIn6BkVPlHH5gwfpaWhC26N/MAmqAhLk7MOJROet0j995+g/X4ltdzkAwfKB73HMEzyXfb2Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uczajrdlpsv47gnd5eg2zcqwjmzfl5sulm2rel","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["hodpace"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5Abgn0zE04npG3/ukvZpoHsSQjQaT+isMtNpL3NVmS0"},"signature":"cLuDrlnrRdcrdQUmBIaJTeSixr/z62WflrDLEIZF1v942GvvHB5aKDhakWvTgsu89GjfD/yXj49zapAY04PULQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1yqg9vxgwczaxnw24zjss8l8tut7lvqvuakdthn","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"1H2kwRJglr+jvjkfKNyHRtS/oNeaCP9CONP/pUk7P44VWgkxagFMRgfXxtkE9niM/V7IIDO3DiuOYIJHEVAFFA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yqg9vxgwczaxnw24zjss8l8tut7lvqvuakdthn","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","draldawk",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsypZUL80A6YxVU68/9Hu9eblRVVg8RGupSYvr8z8eRc"},"signature":"swyIorI8F+saHusg3chyui9HCM/YBgDdyTrZvY/MhcUTycuSzTPup0kGiXLoVYC90dAa5uoeSHvJ1L7Mh0l1MA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yqg9vxgwczaxnw24zjss8l8tut7lvqvuakdthn","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["draldawk"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsypZUL80A6YxVU68/9Hu9eblRVVg8RGupSYvr8z8eRc"},"signature":"qaLasFJOXe8vrmUQymWLP5QSFiD4foDPVx+3CyAqtVNuD3uky4QRaRbOyXWi2CBM/bqbFgcVv+4ovDuMPuNe1g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1cy2cz7l0xyc5vlr59rqn25c4kqa83fjd0prehn","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"2o4VoX1evO9Ye7AcsypWaURxVN4UOUIhb/+uYeOHKdgdAwGdJXb4tgWr6H4+B3n2OHXfwB/y9Ww7QNOrg/gcJw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cy2cz7l0xyc5vlr59rqn25c4kqa83fjd0prehn","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","creeppaz",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Azuo4WEVzGOq0nraoUELL0YKvrC25yBYS8kylbUisA8A"},"signature":"qCqjllz6iMWSImL0EGG7lTWMt65P7Z9x8NLqmicmT0RROaSp3m5ue5/JHlALQTn72SGxKpqN1O0onGS6r0k+lg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cy2cz7l0xyc5vlr59rqn25c4kqa83fjd0prehn","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["creeppaz"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Azuo4WEVzGOq0nraoUELL0YKvrC25yBYS8kylbUisA8A"},"signature":"mCujZ80OFW3AnSru3+eP5glugvzTNRIXZDdpEIH283EdhBXPq1qX5/V1d2PTDLZeyfAaIhKd4Q/ovxbcmZkGUg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1wrxu6p2ywzn74d0dn8u25x32jpq49zmv6g4xvy","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"TLpk/RLf3P+h0Fzlf6HzMb41jXHPDHYAJ+sBURcwBsZy6+pIdWEawZQdi6MNjWKW2v/VhCXvXZHWYFb/ssw2kw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wrxu6p2ywzn74d0dn8u25x32jpq49zmv6g4xvy","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","croischlor",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/hW8fiF7l2ra8irI6ki7pM1oUWl6w+uKWyEWqC6k3IF"},"signature":"vZHxCTz2e+cbWy20rGXqdc+ekTSfqXW168NPSoQ1sio7BTNaaicVUoNHkhWQjVsdmS7ahfZGJOOyqx9FUxTRig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wrxu6p2ywzn74d0dn8u25x32jpq49zmv6g4xvy","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["croischlor"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/hW8fiF7l2ra8irI6ki7pM1oUWl6w+uKWyEWqC6k3IF"},"signature":"2PWicNJtrGYd0ko6uv1rFeegHXo+oQPj0PqfsaSvFNQrJOvqlp5CosyYR5Kc6h4QV4KLMqX8h5C/wHYWeBGgrQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1z67e26yg9amlx8258qzgxy3mehplxmmu370jj2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"3hJxlHbjTrf+iFesH/dqEjkzsbdEBLk2oJ1N8vt2/Q0tkYdSJkR7F5RCWy+R4TNVn68qUFwZESHCwjDr+/SEdg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1z67e26yg9amlx8258qzgxy3mehplxmmu370jj2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","tintstere",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6NtfcSQQ/rlxP5IBIJprs3MDGCFhRnhc+3KJaBzMj5o"},"signature":"YOjJXUfaiIErt+J9IGRYnqgRSJtg2rGVLX2KG6PnJXVkGFs6UL4iQbWKX+mRPHKzsVXV+Az1d5aYuDf/uLj2yA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1z67e26yg9amlx8258qzgxy3mehplxmmu370jj2","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["tintstere"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6NtfcSQQ/rlxP5IBIJprs3MDGCFhRnhc+3KJaBzMj5o"},"signature":"C2+aXr59ue6qRHVrQtZel0KLDqEjglcP9URAcGJIHTAha8HBniy1iI3zsA4rYEI6gpRoM9t/YE059wvO/ZgD0Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xjwc6rzzj0rkgmqtn79v5ruqcw8p7tqwsw45aj","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"qhbalR3WmRjuniNF2vPvlWMpBN+1dn7uAA6eNmv2tvMOZBZ+dae6imP+orr/D1bkbjxaEzBEV7PaWyqulQk+tA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xjwc6rzzj0rkgmqtn79v5ruqcw8p7tqwsw45aj","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","downred",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsTbasGVpdrDQT5iefYGj0cD4/x439ZNHuOizspRzZyb"},"signature":"+bxWDCPHMEpWe4aYCXK+4mPNJ28ZDLE/7W7Zq2Gat+BiJ9uKicztGQ2oelLFLpqnE9JSAVfqWRtv27W5k4GgUw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xjwc6rzzj0rkgmqtn79v5ruqcw8p7tqwsw45aj","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["downred"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsTbasGVpdrDQT5iefYGj0cD4/x439ZNHuOizspRzZyb"},"signature":"eX2U0FIJ3wyepMeLzIKbiqetqzBrQDhziG3SWBws3yc2Ug29eKhbQkaCsS5WxfonxO7nQh8Hp5AfiI1OBZPWgA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lnasp9e03muq4z8g9ntzlzjmuugrru4c6dm5ht","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"C8+ZRWVwLCWOd4wjdlyc6rPH18jvc3WWFVkWZRtbA+90sU4Lwxs3XGALxjQdg3ZJse8QZ+Ih+HBBOzbV+6LT1w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lnasp9e03muq4z8g9ntzlzjmuugrru4c6dm5ht","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","wicbark",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5dAxEibC5NGG5jUS61cZ09Rdyq5MMYey5JouWO5Ac0d"},"signature":"oE/EL5NXQ6DHS3WycjNrMd2h5wN6rrdEY0/s5AicgusBVaa8HZBC7rygRFds7t7OpEiJdBjt61N8RMQqTFDzrQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lnasp9e03muq4z8g9ntzlzjmuugrru4c6dm5ht","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["wicbark"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5dAxEibC5NGG5jUS61cZ09Rdyq5MMYey5JouWO5Ac0d"},"signature":"jNoPaZ9pNNaC70oCyuOij3ipzZmxbvG2ONKhJ2+l9zw0okmLScMmYjw368GtMlGbMGyH83Zy89mQbusVopbFgQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rm23jwy6f4ffnw9w747nssx220rm38mjc2m9jw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"sGvdwcxmFuMuJ/zMGeUcxK/3eslBqZFhqYTwuDZFQH8ln/q9TS3gx/bebtaqX4FrSpYCtFzoE7UGyiat929fDA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1aryfmlacptetvklgsjem6cwahgsxt00je55fxn","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"WZ6A/mzPnXVQMRJY0WpVixDzDUafZHDT0rhtEJ6VdJpQUW44bAUEC/d/lLguWVKrsHaUzq+Q3UGFeAZ1Zjqadg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1aryfmlacptetvklgsjem6cwahgsxt00je55fxn","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","dumpresce",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3daS05iFU5Cq36x4PH9nfmY3DaEqosFZfsrg1UuaHMq"},"signature":"S80rU7YpI1UgZVrTF8xK8amT9nnrMp70Tk2D+6SgXDN+zDnoA9iI9NQAz/diuN4yV7G8icDfDYm4TqT0mNFq+Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1aryfmlacptetvklgsjem6cwahgsxt00je55fxn","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["dumpresce"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3daS05iFU5Cq36x4PH9nfmY3DaEqosFZfsrg1UuaHMq"},"signature":"zfc8SrykbVu3n2yCxCnOzd6ddpBixToFva6ufR2aQrNiPpEVLGm2WM46X4rVT1b9KJHrT/lfthz4hFTblMb+OQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1kf76cgy7d6qjpqeynu9wfps5fdn7ew9pl59ezf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"91GR2P/agHy2OMULJzqeyDUylTq1pV7pV5LAhLsob8JBvkW9hU0C/NUQJRsGLlOEeRtVhgP0qdNA/7up5z+EJA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kf76cgy7d6qjpqeynu9wfps5fdn7ew9pl59ezf","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","quencrine",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiQlgUR6FGqgwRGjyPDNIou9uODosyxi+BA+7Hko0SZd"},"signature":"I0x3nBNScE2JkDeSSsnTxp5NweEwRd2AcJ7KoxMPrAE+SopsNUe9JYsdtrJ7Ejo8Qc12iDVmzXw5ZW4nIjpwGQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kf76cgy7d6qjpqeynu9wfps5fdn7ew9pl59ezf","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["quencrine"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiQlgUR6FGqgwRGjyPDNIou9uODosyxi+BA+7Hko0SZd"},"signature":"LteIR7dOUMooeiGiSAo5XnJSApolHLJQRxRVJpU27e8Hk9LB9Lu2XNt/wQfTkinPO+mecY73fszGLEADH1+F5w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ckn395mpttp0vupgtratyufdaakgh8jgkmr3ym","to_address":"g1yk2x0g8fnmy85scnte9lswada8gng58u4zvsw7","amount":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aszr4WZZtoqvpWfpKQFXAT8Bx/fH234W2oIq4eQnTnbI"},"signature":"ChvfLBSaWJ/xAe5R1rTMnLZZJVxvsE/bJRlGiHkzAUg2nWXv9OVQo29APw3B9yBZAvbJ/xTWDbk3odGcwhC2jw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ckn395mpttp0vupgtratyufdaakgh8jgkmr3ym","to_address":"g1yk2x0g8fnmy85scnte9lswada8gng58u4zvsw7","amount":"10000ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aszr4WZZtoqvpWfpKQFXAT8Bx/fH234W2oIq4eQnTnbI"},"signature":"hdEwCjT6ncFUTDCZ5miM5KCjXh1Ntqjy4D1R6BjxZ29c+7hF3/bhwvpr4nueeHY1PieCV+CPHtqwv3Bhz00FPg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ckn395mpttp0vupgtratyufdaakgh8jgkmr3ym","to_address":"g1yk2x0g8fnmy85scnte9lswada8gng58u4zvsw7","amount":"10000000ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aszr4WZZtoqvpWfpKQFXAT8Bx/fH234W2oIq4eQnTnbI"},"signature":"mFPi0mWgFgThaP2o9pHfIS5JZh0+ASbibtoy6AwzyScaBIQ1BJg4JGgsi9zmu0POOyY0OON/QpqNkUeCePsH5A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tzdfqdc3jcl9laqzls5sd6ukaqsrh43decfcd8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1456","Gnoland incorporates a novel programming called gnorang","https://medium.com/@tsibadaniiie/gnoland-incorporates-a-novel-programming-language-called-gnorang-which-is-derived-from-golang-aa0ffc88b2dd"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8bQRNGT4oW2scgd3K5hb7t9O6a2rGkvylmFVZFro7ki"},"signature":"hL7FivwO9nKU29UQeHG/QvECESEjzJbAwOx5OwutWdVshG/1ShuyAQqtTsZ6wKs1dylRX+9SM6VwXbENhcbsfA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g157lqhmmefwjjgsd32z68s077nx44h0h04h6usp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1458","Golang and modern computer hardware","https://medium.com/@oleksandrcoinn/gnoland-utilizes-a-novel-language-called-gnorang-which-is-derived-from-golang-caa627c781ae"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A06PC8q/yAZ5QEFll3OOj1Uj9xYL3Eg6yQRPSoTL8KGN"},"signature":"AGKeR7iMdcvA5VXF0jZfkxBNZutnFIeuFYyssmmDKpxgilx76QbbO3gLUrqvOnRZ7s2lYCp3vuvhpwJ+voc1Og=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mzg8lp962tuygdmn8p6qk9wm3r7df3rr0ju9n6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1457","gno-land-functions-as-a-platform","https://medium.com/@brianmisterchemb/gno-land-functions-as-a-platform-designed-specifically-for-the-creation-of-smart-contracts-using-3009cf94909"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ao9d9Bbrcaz3TIkU42S020W4mYDTflXNIw4iNetMb4hf"},"signature":"GjJ48JNxAHH6Qk9WO12QrMCAJ8jGXRHMInDXGZuK5mB5dp9HLMgiwdM/GvEc/nuclbfK4G0jykXzdWrnRD1gmQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gx7evqc8p99xjmaan0xccll9kw6ug8v89dersk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1459","gno-land-functions-as-a-specialized-platform","https://medium.com/@tolchkov.danya/gno-land-functions-as-a-specialized-platform-designed-for-the-creation-of-smart-contracts-using-the-be412462af26"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alc6FFz6lCnIEXWmAJpe+UrfsyGSkSMgk6J0HzBRSwKS"},"signature":"fRBkYFf+wxFUmosLjUyI/aB0ZUwxfJa9B3ccw5IPpdYSjHe1GmLcfeUfwKu7WmcTy+2UMZ4KnzyIwZJJ2ApXyg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g107sw3dysjd7rwacl9a6upl6gykrxg3y462awyc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1460","Gno-land-functions","https://medium.com/@samojlov.levo/gno-land-functions-as-a-platform-dedicated-to-facilitating-the-creation-of-smart-contracts-using-bc13fed40b34"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Asm91M+GHirYQFZWGQvPNdso+I9WF0qh/oOrxl69MK2u"},"signature":"y9u+h5NPktol5Zi/pcwMRBD2xIuSUuJ97Zz+NHcPjPteQOeEEKWmYFhrrPlKHvHQSEymyjH4OBlHLZy5z50yzA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1aryfmlacptetvklgsjem6cwahgsxt00je55fxn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1472","gno-land-serves","https://medium.com/@banuchyan.aramm/gno-land-serves-as-a-platform-for-writing-smart-contracts-using-gnolang-gno-an-interpreted-846d34073277"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3daS05iFU5Cq36x4PH9nfmY3DaEqosFZfsrg1UuaHMq"},"signature":"XthA5w5w4hY1f6cz4YPC52muXZ03TwA1JAj6RYVchVgG9PXDCvIakVFll2rNPihy4cg3Rg4Tivv//QQaNpBvRA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fvfd62zg0nzrnhjfjd9nhzh8sf7gfzufslf6de","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1461","gno-eliminating-the-need","https://medium.com/@leonid.kkutergin/gno-land-serves-as-a-platform-for-writing-smart-contracts-in-gnolang-gno-eliminating-the-need-1af3eb07c1f8"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq+6ZVi5Knr8N9ECPduVlORAhtjTgSumNh5jiYt1243d"},"signature":"WT/SID311RM8279fIV0j79gvm6TXJrU3QV51mQ3OLLcfJIeD5mPsVv99q1LjJ88n8bWuWHxMiuRDtCfma4Dg1w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wnt20ulmkkxf4rlq4cazhqzlykdtqzk3lrc39t","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1462","specifically-designed-for-writing-smart-contracts-in-gnolang","https://medium.com/@antonioobentoos/gno-land-functions-as-a-platform-specifically-designed-for-writing-smart-contracts-in-gnolang-gno-4d9b32438826"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay00af6YP8jmRufaawDkhK7ar1LP9u+Pt7uBCGJxFOa6"},"signature":"WVJwNrFQqkmPsGWnAZS6cuLa3vVvUg2ZRXUzIzBL8YgPBel33wGVEQ99h0AtAG4RauS1iWr5Z7l/qEUTF0bwWQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1f5kyq7ad8c9kn0dnavghdhfhgr38uwnj7f83uq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1463","GNOT","https://medium.com/@elenakammel/gno-land-serves-as-a-platform-for-writing-smart-contracts-using-gnolang-gno-which-is-an-3c8b0595d9b6"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhNkVdJIFl2e/Lg77ADaiyukGSicRcy0doz46bBfuTn0"},"signature":"D4ULvK7alCEFKAyhcUrohlMRktJW4LPUK/Sda4gfkF1Xm7lyp50Q3zidxWkFdXB9iJj+YvEcVareE/SuPf3x3w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uczajrdlpsv47gnd5eg2zcqwjmzfl5sulm2rel","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1465","GNOT serves as a medium of exchange","https://medium.com/@annetanii178/gno-land-functions-as-a-platform-specifically-designed-for-writing-smart-contracts-using-gnolang-c5f7b4d73f06"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5Abgn0zE04npG3/ukvZpoHsSQjQaT+isMtNpL3NVmS0"},"signature":"DEKW/vL6Ud/kg2A4SwvDDjxzZK/AoF2vTcOPoJWA2doMSWSrQ2SYbPIsQypfuLbFCdBHGh+ywoNlboe481MdXw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yqg9vxgwczaxnw24zjss8l8tut7lvqvuakdthn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1466","Operated on a modified version of the Proof of Stake protocol","https://medium.com/@katepavvlleennkkoo/gno-land-functions-as-a-platform-specifically-designed-for-writing-smart-contracts-using-gnolang-4145d5e41dbd"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsypZUL80A6YxVU68/9Hu9eblRVVg8RGupSYvr8z8eRc"},"signature":"BKYhIpFU39sGhiRYOk0N0FYFiA0NwOk7ixkrKJkG+ZQ+JJwb/H3NbvioBAWtKGlDoryzleaMhEXlzM3iC/s7iA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12h9lvxrukn7nmrc004kr64uvarxpmfdx7z23xr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1464","web2 developers can seamlessly contribute","https://medium.com/@igorek0077d/gno-land-functions-as-a-platform-designed-for-writing-smart-contracts-in-gnolang-gno-which-b8737b552c10"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Azgo9vpOaM4AuCKpJYlbfENk391PYM0S16jcGlaHq8JW"},"signature":"A8+tliaTSorCQJ4AcIuitSXWNN2BaWT7lFRPHch9KyMI0/VTavAKLoOJm4ThBd2t2LfNAvAzqs6lQLZAEgeIwQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lnasp9e03muq4z8g9ntzlzjmuugrru4c6dm5ht","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1471","web2 developers can effortlessly contribute to web3 ","https://medium.com/@ilya.smirnov.ilyaa/gno-land-provides-a-platform-for-writing-smart-contracts-using-gnolang-gno-which-is-an-d2d9050f3c36"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5dAxEibC5NGG5jUS61cZ09Rdyq5MMYey5JouWO5Ac0d"},"signature":"vRqKCKreBnBkTKfBs2VCdXt8Q1XVM7TzmCbMJ57fHLss0fj5qO9vfDZCrYMUU/o1aQFzVddAdnIK0NC2innDlg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cy2cz7l0xyc5vlr59rqn25c4kqa83fjd0prehn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1467","Gno transaction token, known as GNOT","https://medium.com/@kozlov.markus/gno-land-functions-as-a-platform-dedicated-to-facilitating-the-creation-of-smart-contracts-using-aeb86d7523ac"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Azuo4WEVzGOq0nraoUELL0YKvrC25yBYS8kylbUisA8A"},"signature":"eNPsXs08ZL6PJIhPzY3PbGJrpg/o+K80w407Vxla23c1qV/35dbhuS40mlZxrBrjHt5W8rsBxiE0xnTQK9Cw7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wrxu6p2ywzn74d0dn8u25x32jpq49zmv6g4xvy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1468","Gnolang empowers any blockchain","https://medium.com/@allavolsh190/gno-land-serves-as-a-platform-that-enables-the-creation-of-smart-contracts-in-gnolang-gno-c51e6481899f"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/hW8fiF7l2ra8irI6ki7pM1oUWl6w+uKWyEWqC6k3IF"},"signature":"10TN1dibzws4WqsWjoL4YkekoCBEN4+bfoq/6vyw9+sar3AapiYSDaIr3yyKCM6IOwYlQa6QfPKI1wSZjUARaw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xjwc6rzzj0rkgmqtn79v5ruqcw8p7tqwsw45aj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1470","gno-land","https://medium.com/@olenkaivanka190/gno-land-serves-as-a-platform-that-enables-the-creation-of-smart-contracts-using-gnolang-gno-725f4e43dd76?postPublishedType=initial"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsTbasGVpdrDQT5iefYGj0cD4/x439ZNHuOizspRzZyb"},"signature":"7kfwj/jOr6IdTSSa93wnMPxTtcuEzfpUNQu96gOrKK8qrWWnPgHaj7Xp6mOS2nsE2XItybrpS3SexAV3e0c8iw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1z67e26yg9amlx8258qzgxy3mehplxmmu370jj2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1469","Proof of Contribution","https://medium.com/@youlichkashomm/gno-land-provides-a-platform-for-writing-smart-contracts-in-gnolang-gno-utilizing-an-interpreted-df35283cb4cb"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6NtfcSQQ/rlxP5IBIJprs3MDGCFhRnhc+3KJaBzMj5o"},"signature":"tIvnz4CrEOy2JbkKpbsNf6RmaQb6ahqBBXIUPbzGWf8BAksxYJyh2LWGOuIv26RPjnhXEoXLH9tmR+M8CUrdsg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"wOP4iC1v+wgDVfeuecgLB5RLFN1S6csaVkZcYSbOpW0w5jik7dQ1+r80uVp6ccTSiBSwibHdFVd91W2yOIJYqw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","to_address":"g1vjrx0lks65yefnsz4xk92vugda2z25esh8g8q9","amount":"1000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq7fI7nLgnfl5EOylG9O4MSVG4VqIZmpbNb4HoS0F2kH"},"signature":"VcOHyexPUZIjCyggFfiWaC5a0+moKkuxW7ecH+54U1FDTXI32i9DKsaDSNI6BQWhAPj1VTg4C6UAQa9h4QEheA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","to_address":"g1vjrx0lks65yefnsz4xk92vugda2z25esh8g8q9","amount":"308999999ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq7fI7nLgnfl5EOylG9O4MSVG4VqIZmpbNb4HoS0F2kH"},"signature":"kWmqRndiZFkAls4NOxEB2V6ejj0SGMozdauYUcrogHAfShVQ29TRcSHeQxVkoWTQ5WBn7njk7mmPpltXAtN3Ew=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","to_address":"g1vjrx0lks65yefnsz4xk92vugda2z25esh8g8q9","amount":"308999999ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq7fI7nLgnfl5EOylG9O4MSVG4VqIZmpbNb4HoS0F2kH"},"signature":"EMsSYhkmQmE4ce+9i8cjbFepa/gxvKWblv95TDUOek43C/jJZMjzBCTL6TfIWVZKs6OqQeJOj0P/an808GXoyw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","to_address":"g1vjrx0lks65yefnsz4xk92vugda2z25esh8g8q9","amount":"308999999ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq7fI7nLgnfl5EOylG9O4MSVG4VqIZmpbNb4HoS0F2kH"},"signature":"6s6ENmW8uT/T5PMD1HSdQhAnXiZduw4uzHJRQdxZG605SbrZT6WGiU+U/NgRNl1lhx+7q+vbGqZ9OhjVxMew0A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","to_address":"g1vjrx0lks65yefnsz4xk92vugda2z25esh8g8q9","amount":"308999996ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq7fI7nLgnfl5EOylG9O4MSVG4VqIZmpbNb4HoS0F2kH"},"signature":"gZvomVEsk+IaheD/ths1m1On3n1j/Pl1rOpzhTywBxok450PNLfLK0JPPRa8gWlXc+LLiMCaimI71sQY0jsw8A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","to_address":"g1vjrx0lks65yefnsz4xk92vugda2z25esh8g8q9","amount":"308999900ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq7fI7nLgnfl5EOylG9O4MSVG4VqIZmpbNb4HoS0F2kH"},"signature":"ddwkDShlkAQhYZmr5pInfuT4RX192RmMh/20j7eikP1LsZUxa9CDudYB5u6scOKTse8BvECveSNEhJAl66mu5Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","to_address":"g1vjrx0lks65yefnsz4xk92vugda2z25esh8g8q9","amount":"308999900ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq7fI7nLgnfl5EOylG9O4MSVG4VqIZmpbNb4HoS0F2kH"},"signature":"Q+IuvQ05niue+mVOCKDS0+XpeLHHey1FAxBQpsYk7BgneLamw7N7rZTK1zsm/yFSdDMHo4VoWtJzeKTtEfTwFQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","to_address":"g1vjrx0lks65yefnsz4xk92vugda2z25esh8g8q9","amount":"90ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq7fI7nLgnfl5EOylG9O4MSVG4VqIZmpbNb4HoS0F2kH"},"signature":"dfD+6X30KWN+ZfzqOYa+BKCmXDjBc0D2slQF7rcZj3p+pL5cbTNedom/duwQAidh0RtuhGmJETLr12f3SiybYg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","to_address":"g1vjrx0lks65yefnsz4xk92vugda2z25esh8g8q9","amount":"90ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq7fI7nLgnfl5EOylG9O4MSVG4VqIZmpbNb4HoS0F2kH"},"signature":"JTA6rA+YgWlRO2C+9jh5DIz4bCCNyhrkkt1poS97+sRzx71ZUIEwOGOanqM+Dfo/QfTMU6rab2PctY2qsB/Gmg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","to_address":"g1vjrx0lks65yefnsz4xk92vugda2z25esh8g8q9","amount":"90ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq7fI7nLgnfl5EOylG9O4MSVG4VqIZmpbNb4HoS0F2kH"},"signature":"1KoXflzKvAAGzG/ZEG8KZ+JC6U5Q3Uf1LL3RDsePUwgG7lav/WJz/Mm8/ykME1bp6zsbUSKs1A0uYI7e6mAFhA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"dvxkMK9X7+Zp6p2m0nk+Vx6Pnp2lQ8E2Fk937Oaue2gGhE7FxkDfKqHZrNC5RxRDkcq8QqH9SWJ+iPVaDfjamw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","to_address":"g1vjrx0lks65yefnsz4xk92vugda2z25esh8g8q9","amount":"1000000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq7fI7nLgnfl5EOylG9O4MSVG4VqIZmpbNb4HoS0F2kH"},"signature":"ysJz02nu22kdv8ixyiA2j+3sI04ix48rh4ijJr2xzblO296/5e3/olVlV6DcrTT/FdMxDjBio7sa8Lh1qDllMg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","to_address":"g1vjrx0lks65yefnsz4xk92vugda2z25esh8g8q9","amount":"1000000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq7fI7nLgnfl5EOylG9O4MSVG4VqIZmpbNb4HoS0F2kH"},"signature":"fUaRrP5UbesxinTmh4vFa4KvsLfqoCufsgDNzUiQZlBmX/3BsPWP7jU59ALdLN8We/MFMAz4jJm9K4qr0gX6CQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","to_address":"g1vjrx0lks65yefnsz4xk92vugda2z25esh8g8q9","amount":"309999997ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq7fI7nLgnfl5EOylG9O4MSVG4VqIZmpbNb4HoS0F2kH"},"signature":"VGs166CD4B5/ONWItltGzIhfISuYPyYjTAGYRQSdGYUHe5J9DEQT3nMCnUZvfWhZEOg7tKzf/yiqZvUzIMBkWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18t62346y0ue7l7k5p2h9darn9pne06ufg2uja3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"dup5BmlGd2kq6sbcaG75S4cHTPxspErLhbG8AVsEoz5WzY3rQ6Go87SxkU5JuYp76gfSYPj9hCPK9wKbBWNkbQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14dkdcfczr4r8chgdae6rs7w9gxnukq3x506h0x","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"XE6ZUMt9/MYUUzx7aCzfLPlQ3rwNaVzFSPB4N1JEdqVYmHGh9VfxSfTj/dXKT4to2bWeuMGw52uIMzRPJIITwg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14dkdcfczr4r8chgdae6rs7w9gxnukq3x506h0x","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","panelhgdae6rs7",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1NpWFzGD3ZvGANuIPtzSmYgYE/lEh5CPb4dVsYw5brk"},"signature":"akhpwg9uIG+St4dSBSQXCVWZtHHWyo3PYxypEi1K+dJD3zNkyk4r9vLpQiMQ+BJybFLHHepa8ja1FyLSdVfLcg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14dkdcfczr4r8chgdae6rs7w9gxnukq3x506h0x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["panelhgdae6rs7"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1NpWFzGD3ZvGANuIPtzSmYgYE/lEh5CPb4dVsYw5brk"},"signature":"QqP3ZaOX6joK7Nzi8SEerbW9MgxmzNEusQCaUp6lRSY5p675rzkqVjj8qg8n69hGNjoBKo0rUf/bL06AoQkOjg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14dkdcfczr4r8chgdae6rs7w9gxnukq3x506h0x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1474","panelhgdae6rs7","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1NpWFzGD3ZvGANuIPtzSmYgYE/lEh5CPb4dVsYw5brk"},"signature":"YmCl7DDVnue+6dQaDdq0UrQof1yRMU1wmo91uxCRpNQXTDRjTXeEWqx6eJODspv59rfb/9qfli6FFm4VFphc4g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14dkdcfczr4r8chgdae6rs7w9gxnukq3x506h0x","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1474","1","1","g14dkdcfczr4r8chgdae6rs7w9gxnukq3x506h0x"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1NpWFzGD3ZvGANuIPtzSmYgYE/lEh5CPb4dVsYw5brk"},"signature":"qFy1tjXf4Aj9E9DSciNZeovuDgiEcGE3sy0gFTC6jwldqSYArEkaLKnk+0ALpWyJQsaZShQmTVUXITzlqp6nbQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1m606cp8rsumh275wz8s43q3apz6eprtxrrcqcw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"stvb2KGMei4WRrlJ1YB0Rm+EibXg7PEwkg1ZGe3DL7J/7JgUdHoN4mOpaI+pxh3vXgMc0vIXQRODEpmBvxkFhA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m606cp8rsumh275wz8s43q3apz6eprtxrrcqcw","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","ideaevolveh2",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A13roA9UOhxIIZtTMzK1M6Ebi6gunRkIebKebSeV431l"},"signature":"+HcRSdmnL0C+Hd65F3U1XpS6VG4J/kXVAVRuBecqiWc+tNZc3M/JO1gwluLmczOff7rL3r8r4WfvHkv8FWoAbg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m606cp8rsumh275wz8s43q3apz6eprtxrrcqcw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["ideaevolveh2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A13roA9UOhxIIZtTMzK1M6Ebi6gunRkIebKebSeV431l"},"signature":"qxtUdD9vv5pgyneg/jD5ChY4CdxrpKHOizdWiobmRPsvBDozthX3ZG+m0xHB+DhhAxjfap7J4GL5oxSBg9fWIQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m606cp8rsumh275wz8s43q3apz6eprtxrrcqcw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1475","ideaevolveh2","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A13roA9UOhxIIZtTMzK1M6Ebi6gunRkIebKebSeV431l"},"signature":"rwyd68xd4mdCrNnG0lQ8HQWqao3mQ34wc1k/kJiOzIp5Tt22qD91oA9W3LahxCwa2tT1bo+WOXRTCBbSDu9YMw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m606cp8rsumh275wz8s43q3apz6eprtxrrcqcw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1475","1","1","g1m606cp8rsumh275wz8s43q3apz6eprtxrrcqcw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A13roA9UOhxIIZtTMzK1M6Ebi6gunRkIebKebSeV431l"},"signature":"NRKQqcwDPl0xocnqDvlcoGdI+tztjDfwGKCAoMvlxGUDjmqkbHNCY8oSvNsGE91eZeHGs3uFOCjB0ocMfJb/cQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1avug4uy33akhec2952v0kvjp88z3na3fnga2j9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"PnxXBJxz47SflKe0cJLNB2SlNhLaZk5DWkTnvq9xLE8Z9/N3xLjsextQDmoS+ha7nv9KwEgtlNwzGy/pU0GIKg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1avug4uy33akhec2952v0kvjp88z3na3fnga2j9","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","provideneutralhe",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap2uGE1zAsY1Wvxyvm08E41lwZvlJGeUgmab6j9EroJJ"},"signature":"jHDOEyGHQepyuyADz63QLNNsJreTqGtuXIXh8LPsj+Mzg/AdPWRTihaG2YIH1DAxxScaB8P7PpkumvKAuEDNtQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1avug4uy33akhec2952v0kvjp88z3na3fnga2j9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["provideneutralhe"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap2uGE1zAsY1Wvxyvm08E41lwZvlJGeUgmab6j9EroJJ"},"signature":"+yXLEG6VGLmYwq4vtqm6XOMQzJL3qx/UtmRqO9J/2dsd9DtHDDs5ds/L1AX6leVPO1PPMioZl6b/zjohgqzNnw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1avug4uy33akhec2952v0kvjp88z3na3fnga2j9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1476","provideneutralhe","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap2uGE1zAsY1Wvxyvm08E41lwZvlJGeUgmab6j9EroJJ"},"signature":"1d3plMmR+Q8ZJ2QS+EpYvDXAaNXq5ifO6ESYBBYcvMUvJFD0nL0W7A0VtcrT10ytse1oBJfUUERIZWGnx3SsMw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1avug4uy33akhec2952v0kvjp88z3na3fnga2j9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1476","1","1","g1avug4uy33akhec2952v0kvjp88z3na3fnga2j9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap2uGE1zAsY1Wvxyvm08E41lwZvlJGeUgmab6j9EroJJ"},"signature":"aBnYF9JWfgApyfgKoGfk6YN5dagjloJo5jhCCx5cpaACkpF4NnkaK+k/ggEt39qJldVpPo3d9zKOziDkpa2Zrw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1sgf89macve5zg8j36qd5e6u005yfg5rtrtv2gm","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"RAGkK+SoRNN9q5wCdfPbioDtzqKcJcQ77Sw1xYe4XQF98NR836PsH5KUqhBrGkpoqdUtViHFOyhWJdZx4VqHkQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sgf89macve5zg8j36qd5e6u005yfg5rtrtv2gm","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","beltgymzg",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8ZZMC9GHXwbYujJ7M3n2QbRBzBhAHkIi/AKVBDqPsce"},"signature":"2/oRb8xQLIFM4WDcR6ohKPnVZW5ut8Jt2xzZXy4DIulr54WnWYiN7vCEGgDBbs0RYOWe6WQcjTH46w2pZCRX8g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sgf89macve5zg8j36qd5e6u005yfg5rtrtv2gm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["beltgymzg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8ZZMC9GHXwbYujJ7M3n2QbRBzBhAHkIi/AKVBDqPsce"},"signature":"JliX7PZ5j2w1ryyRnBSq0WRSuLQcLrDOQuKsPLTNULEfRMNeAMRmmVkqmzAf4wHHimZqkWIUYOs3EblpK3Ve2w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sgf89macve5zg8j36qd5e6u005yfg5rtrtv2gm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1477","beltgymzg","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8ZZMC9GHXwbYujJ7M3n2QbRBzBhAHkIi/AKVBDqPsce"},"signature":"PD2CHWUnfBN/lvTFRYzANwl5oee0qFhxiJ9CjpFZELVXENQusnDGTUTANoN1jMVM7Qk2UyBpg3cD+/3fMWPsuw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sgf89macve5zg8j36qd5e6u005yfg5rtrtv2gm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1477","1","1","g1sgf89macve5zg8j36qd5e6u005yfg5rtrtv2gm"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8ZZMC9GHXwbYujJ7M3n2QbRBzBhAHkIi/AKVBDqPsce"},"signature":"qAOEDWSBtqp8jflZGjiu6J+65R+vNhAp7lieFMnb7eo7zL0SkN6TxLLitW1rnEWI/4Z2pcIhxlmAPevcXedUxQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g10l4hzu8zfc5mcwn65zj94vjpfrn2t9jcq6v9ft","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"RUHEhZuVPrghqUc8wO8yshVbxvksytCzCQGp5B0SdvVgNmnpFw/U4OOI3wBssIx91YXYKwk/0UgoANzmm+fC/Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10l4hzu8zfc5mcwn65zj94vjpfrn2t9jcq6v9ft","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","vastframemc",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1WmFnCkp1VZifejtbe4OrrsZMTkwSHKygK6OmHSuUWm"},"signature":"LqLRcNqSiCdHCdeJ+CibQt7j8k1k8YGIusKQS1nGJIs0AQOhLsbF7Y7JsELfwSpY2SIE+XlxoFcMyPQCoOmCgA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10l4hzu8zfc5mcwn65zj94vjpfrn2t9jcq6v9ft","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["vastframemc"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1WmFnCkp1VZifejtbe4OrrsZMTkwSHKygK6OmHSuUWm"},"signature":"0eyFpEC3pNRrXA8hSGLaVzBvMhTH5gAXDzhKh206Nbo3eU4GENu0jB7kcioSisQbnxsw+CTh2pKj4q1Hn1Zc2A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10l4hzu8zfc5mcwn65zj94vjpfrn2t9jcq6v9ft","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1478","vastframemc","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1WmFnCkp1VZifejtbe4OrrsZMTkwSHKygK6OmHSuUWm"},"signature":"I9qlHUdCCAkOEGnG5rfQBBZvT6K0bdzRejE+p5IqZ7c6k1erBQ2//iXy+iP3Jj6R+owKsnbGXh5gnoEXjDtdAg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10l4hzu8zfc5mcwn65zj94vjpfrn2t9jcq6v9ft","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1478","1","1","g10l4hzu8zfc5mcwn65zj94vjpfrn2t9jcq6v9ft"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1WmFnCkp1VZifejtbe4OrrsZMTkwSHKygK6OmHSuUWm"},"signature":"ti/+97h/P6vVzKlKRoaQua7fa66FRr8TrkpJsExPqXZV4Is5OALwrSDEQnDsIZj9lTakN5QgqD1yUw+PNug0SQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g105a6th25ke9jnkz4yy46kzkhm069gp6ecjqq86","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"nwZU5l0pkzmsQuTBJWnhF+MslsZOKQ0cZf+hOpc0j+9/RLAOeiY/0n8W65ym67Gz4T1EaI1OR/VZMHwPd+y2cw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g105a6th25ke9jnkz4yy46kzkhm069gp6ecjqq86","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","masterfanjn",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+A8LKAdNphOyHrvSNMSaD9xo8CpbBcKeyme6ROGwSm3"},"signature":"kgBUt225fX37WhEIs1IOO1P8snVJqgF4nbKFr6oYYykja+ShR71OsSMiOTmiVR2tyCt+gwrZT3z0hsW5mEEN+Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g105a6th25ke9jnkz4yy46kzkhm069gp6ecjqq86","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["masterfanjn"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+A8LKAdNphOyHrvSNMSaD9xo8CpbBcKeyme6ROGwSm3"},"signature":"SjoLZPvy5NMIl5suuOEsvHhUH0JwhJzNAuMwZGkxLW8s8E1L9py2FLMsDlaZEzLFhgHUuRFA385ttIZE/UfnZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g105a6th25ke9jnkz4yy46kzkhm069gp6ecjqq86","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1479","masterfanjn","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+A8LKAdNphOyHrvSNMSaD9xo8CpbBcKeyme6ROGwSm3"},"signature":"Mzgag5UYz37/Nxr86frJHkoBXy4AgkJzPggBdORUBysabTdHN/QWBBpGoA5ob2nDFQaL2xdRR6HPM4lWpxaS0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g105a6th25ke9jnkz4yy46kzkhm069gp6ecjqq86","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1479","1","1","g105a6th25ke9jnkz4yy46kzkhm069gp6ecjqq86"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+A8LKAdNphOyHrvSNMSaD9xo8CpbBcKeyme6ROGwSm3"},"signature":"qvq0RQuuSUikV5J4dwT6Az4ujPVYnJoFiDkrNj7UvZBBsRq2wsvKzMnCdGSbGu7xzCAKzQOcO1fMcfhxbA796Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1m8twyzdc3xhg6huw57m4g5j4qjtp8su73gshlk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"G6+mSjH7wPiwo31uVNgQhgSGFA9J/Mwm7vPfhDZmhuBqybIQm+9OsprYaJymdPJUk87W50MQgSp2IMLcob1FMQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m8twyzdc3xhg6huw57m4g5j4qjtp8su73gshlk","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","pantherridgeg6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au2iw73sJNq1yGTwGNQF53VgH+/T8Hbonlrqj8dNglN0"},"signature":"SGWMU75zCpgUuftiPgylyQTl/yF6Z7BSLIUdsiO4FLliF14PJ6CZH2UN5jPjdKARdqBFz3HVMmae5xwSc0ndiw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m8twyzdc3xhg6huw57m4g5j4qjtp8su73gshlk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["pantherridgeg6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au2iw73sJNq1yGTwGNQF53VgH+/T8Hbonlrqj8dNglN0"},"signature":"wWx4ee4dUsHfYHT6I0xHEp7QuIIY5rJCnav5nJ50hog0DPMvzWFAZ/hQIMVuXrUue1IrR3EWGugdRV86r9PvaQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m8twyzdc3xhg6huw57m4g5j4qjtp8su73gshlk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1480","pantherridgeg6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au2iw73sJNq1yGTwGNQF53VgH+/T8Hbonlrqj8dNglN0"},"signature":"Cc8TWZBgfVqFvBYqDiCqP6lYupbRKUe1rs/PgHdUHJ0+1xe35C0uiAm5ixiEDm4AVIkMtJC7e3ZXgp7ydPM3Hg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m8twyzdc3xhg6huw57m4g5j4qjtp8su73gshlk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1480","1","1","g1m8twyzdc3xhg6huw57m4g5j4qjtp8su73gshlk"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au2iw73sJNq1yGTwGNQF53VgH+/T8Hbonlrqj8dNglN0"},"signature":"A9ym+Y9pMxQVncTJIayq/oS6hEa6CxsJD1Ux6cSA5zk8SMyycmvPcHdQ779vuFud9/IAivP9RJsoLcIvQKLBJQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1j3drf5pl5smn2527adsa7ef94kthuyn8s4ygua","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"8S1ZLorgKI6jpwOQcrevs8BvoJbCexpyVGnL17bnlqFn5z7cfkwqMhKwISPwgFP0WYYbUeKR4BDVqV/smxQzPw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j3drf5pl5smn2527adsa7ef94kthuyn8s4ygua","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","clinicsupplyn2",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/RlHBnFd3F6EVS79r3scYBBjsP5GrPPHjLd40m+9TC0"},"signature":"N9pRn7005kLaABH5JJ3rBT2MXD/Ai7gWs42ujzWTkKxW3XY/0pwCJ3wtVY9383ZeTFwipHFIm5kZ1KWUD5QJvw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j3drf5pl5smn2527adsa7ef94kthuyn8s4ygua","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["clinicsupplyn2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/RlHBnFd3F6EVS79r3scYBBjsP5GrPPHjLd40m+9TC0"},"signature":"5SiteO6vrqDw1mq/Z1iM0CoNUdz1wmqlX9IPppAN5UE43HU1HnEpHZWIk3W6aoxmblzt9LmUhPDx5c/28HEllQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j3drf5pl5smn2527adsa7ef94kthuyn8s4ygua","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1481","clinicsupplyn2","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/RlHBnFd3F6EVS79r3scYBBjsP5GrPPHjLd40m+9TC0"},"signature":"5AFLmHmL/t+bPK1uPkt4pRbOPJaewQ4Loo3JUtNCoqgJHKXSYL1sEzq+tjz99AT+oqXsDJmD31YmYo4X4l8ztg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j3drf5pl5smn2527adsa7ef94kthuyn8s4ygua","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1481","1","1","g1j3drf5pl5smn2527adsa7ef94kthuyn8s4ygua"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/RlHBnFd3F6EVS79r3scYBBjsP5GrPPHjLd40m+9TC0"},"signature":"sfbVvQf38/x9jWQ65w8CXYfS63vrf1EoEHWbxsw0BowHJRhV2h8ENwzAOwsvBS5e6ip0kJyS9u4lO5iX+GdDXw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xpsjt2yptmxge5jk9vef3kw95dwx3xclp9dwwk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"4QWLOemtaIOaWiMUPYBuKgCzj43HktXIHlHVGuq8pmwfrFLyEd0khzOV53eiibH9RMOqc6mLT+/F42OoIyd8QQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xpsjt2yptmxge5jk9vef3kw95dwx3xclp9dwwk","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","ownercatalog5j",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay60PSkswmaMKnS49+36Hsyjmqpl2mMn68urgWJm4/Rp"},"signature":"JSKpeksiRX0KvyoyuXhe1HT8/fy2UJCbGjrkfbWGAAQ/uKvrDEiPFYiQgdTHQwZKM/mnoJNJ76eyR6CLfz4IMw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xpsjt2yptmxge5jk9vef3kw95dwx3xclp9dwwk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["ownercatalog5j"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay60PSkswmaMKnS49+36Hsyjmqpl2mMn68urgWJm4/Rp"},"signature":"nIlT76ECUWDJvbYNcIUVjbkh4Wobaz2h9CW1duglKLZxJnTFQbp7RSU1PUOAcYwFWGmre9fSm7KGfHmCDBnZig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xpsjt2yptmxge5jk9vef3kw95dwx3xclp9dwwk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1482","ownercatalog5j","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay60PSkswmaMKnS49+36Hsyjmqpl2mMn68urgWJm4/Rp"},"signature":"Q3mTQKvWps/pGlbQ2a6Q6DB+O1FJ2P2O6/YUMExulJJyfuQK6fBv2t+6rrQ/5AgS/cotWlma8Qv+OLSu2XemkA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xpsjt2yptmxge5jk9vef3kw95dwx3xclp9dwwk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1482","1","1","g1xpsjt2yptmxge5jk9vef3kw95dwx3xclp9dwwk"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay60PSkswmaMKnS49+36Hsyjmqpl2mMn68urgWJm4/Rp"},"signature":"AIYp+bFtNj9UUOpugWrFQBS3FkAAQwOEzszQIP4gC2tT05v6xuVUY2bf94dpT4OclGMHLiFAq3Qrah9QL2Z3AQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14yvjrhak5q54v3hrlj0evpr85q6vgrsyrmmujd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Ib/PmRPy5vZcTlL9tspJbWbVoW+cUy90wLKgNGYYf49Ozc6uhUPb30M2hlTWss+KCIWDdzNzOn79T8/gr25CyA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14yvjrhak5q54v3hrlj0evpr85q6vgrsyrmmujd","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","clogroast4v",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah/KxfoT/cSUdgnmCW+MtS/taHdMAZBEc08pFJ6UIiZ9"},"signature":"7VLglMVRTUmMyjcoe1xqLIpqEAEGec0mymai8cMPG2kyrOK1FXS/IgDzTkTONOw5C6bWcJZaDSsO58XY2LKLVw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14yvjrhak5q54v3hrlj0evpr85q6vgrsyrmmujd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["clogroast4v"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah/KxfoT/cSUdgnmCW+MtS/taHdMAZBEc08pFJ6UIiZ9"},"signature":"pH71WedbysBZoEE9kTaMcxYRHDlfE8pX8P67VDmnWykWCA9QQRd8aqy5DpC5h6qOdV32wZIbuCDsXaVfNBw66w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14yvjrhak5q54v3hrlj0evpr85q6vgrsyrmmujd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1483","clogroast4v","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah/KxfoT/cSUdgnmCW+MtS/taHdMAZBEc08pFJ6UIiZ9"},"signature":"1sDDLO95TynU4MEuA8N8U1TDFu+gLso7asufjU/AvEJffyOaknD+dQwbQ/gyJptzGCAsYTnREcdwZCLdKc+Q7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14yvjrhak5q54v3hrlj0evpr85q6vgrsyrmmujd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1483","1","1","g14yvjrhak5q54v3hrlj0evpr85q6vgrsyrmmujd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah/KxfoT/cSUdgnmCW+MtS/taHdMAZBEc08pFJ6UIiZ9"},"signature":"OmYbv172phjSpk6j8imb1gxa/NARQh6V53bYsOwwHSAGAD+m0R5CErO/cR3mdlFLd5b4H2fC4ehSnOHyfFYQSQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16j7cadg2v3x6ev8e2vj5efuhyz2fkps3v3gxdt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"p25ZsaFlQoL0AFBA3dsxj11Y87jMsoofuRYFMB+M8N1xRcl/1A1OzYM+WPz7hv60eOrRewruoRpWHAEs04tq0g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16j7cadg2v3x6ev8e2vj5efuhyz2fkps3v3gxdt","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","tonightmesh6e",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzxBi6aC4dELUaj9Fed4cdco0ftbjebaTmGs7R5CN6RA"},"signature":"Cqkk/KTu5jqjqQgX4B9PiHlTVioM4bVqD8vUO379aTEwSUQYy7vu4PuqkK1WNxWHVd7U7UEFAZx7Wj5kNTIFyQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16j7cadg2v3x6ev8e2vj5efuhyz2fkps3v3gxdt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["tonightmesh6e"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzxBi6aC4dELUaj9Fed4cdco0ftbjebaTmGs7R5CN6RA"},"signature":"tDnJEAFmQ5V+p/aylpDR42RPhYM+SQ5AZiPDuUqR9PRV3sM9cDu0utoH+R6uyZcpxiP7k5t37TzM+2WLgfC2/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16j7cadg2v3x6ev8e2vj5efuhyz2fkps3v3gxdt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1484","tonightmesh6e","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzxBi6aC4dELUaj9Fed4cdco0ftbjebaTmGs7R5CN6RA"},"signature":"33uFfNT0JwAprqXnGhuix/+tFPeb6qeuwtUO/ZMnwwJ/0sjNJCuXgN4vdtSMtoJ7l+/MFuNkySKJQPuWJ7T9/Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16j7cadg2v3x6ev8e2vj5efuhyz2fkps3v3gxdt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1484","1","1","g16j7cadg2v3x6ev8e2vj5efuhyz2fkps3v3gxdt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzxBi6aC4dELUaj9Fed4cdco0ftbjebaTmGs7R5CN6RA"},"signature":"95QBJxmEzNlVqFd2VmsHt1I0jgZTFRcg4QXQ50Sjuz0zq20oqJ/xux1/HKyYdIiR9XWYSCsL4Fmjn+lKuW2iYQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1g3tqqd7r8njy2apc86vyxc0rjnykwq9q6feqjj","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"59Vc2PuMNC7TEXyAvgC4dDX14CGwvXfXXohvT94faiZ6jDTd1Amu9qGBvvD/+TRIIU/k++jd66XDS5yT1ups9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g3tqqd7r8njy2apc86vyxc0rjnykwq9q6feqjj","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","cracksolutiony2",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuVz6UDUogv1wv56Vlf4D+E40FoSabEFm+8W1261vNnp"},"signature":"PENeWVvrPOKi3fVNXSLYU4XkhCYg1QmlqdecywAarM5VgYelVqSuxe69hG0X+aMoHuj2/iKkB98LV2iZcyuabQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g3tqqd7r8njy2apc86vyxc0rjnykwq9q6feqjj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["cracksolutiony2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuVz6UDUogv1wv56Vlf4D+E40FoSabEFm+8W1261vNnp"},"signature":"URJeOfOa2XyPBycv6NoWPjzeVJ3GM0oW8pOcnOUmJUxbWfahusgb5nGP0a2xDbUSmaAecvlFZQhBExXlqrdCBw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g3tqqd7r8njy2apc86vyxc0rjnykwq9q6feqjj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1485","cracksolutiony2","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuVz6UDUogv1wv56Vlf4D+E40FoSabEFm+8W1261vNnp"},"signature":"VaeiVW8/ajEvm2CpD0otvHff2BahFt8RAKiQaUOfr0ZNXymYPYJmZUradWkRV0+GZvMvb2qJw9rxdwQnhgXSXA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g3tqqd7r8njy2apc86vyxc0rjnykwq9q6feqjj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1485","1","1","g1g3tqqd7r8njy2apc86vyxc0rjnykwq9q6feqjj"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuVz6UDUogv1wv56Vlf4D+E40FoSabEFm+8W1261vNnp"},"signature":"TJFHFq5YGjyCVDqsD1j5F14QCcGHPs2tcKojaJiamjVd6J7QPm+fC/lkg6KNfAAzfSyYq7n0pAhSpUFGcagVZw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1yxpfwcx8aaujjfqaz2nu8hl5hzpes2xh0lw5m9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"q189Z/npj1uTAdrg9JHzfI82y2/JmD6vX9eIiM/b5AFR80Qh1E7d5OMkBQ8ttgHPhXiG8vvSFKU8ABL55fY4sw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yxpfwcx8aaujjfqaz2nu8hl5hzpes2xh0lw5m9","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","machinetypejj",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwDar5sDtOtGxKbSzM5sNQSMpDsFH2yiHuD/GD+enC0z"},"signature":"0V16HAQ9KL0TfYa5/pFeCIw6+wiN4+xTI4C4CSr6/P8P62Bmb4yv8AJy05JmrThF2H0y/ZnSw585npMDr1AVhA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yxpfwcx8aaujjfqaz2nu8hl5hzpes2xh0lw5m9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["machinetypejj"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwDar5sDtOtGxKbSzM5sNQSMpDsFH2yiHuD/GD+enC0z"},"signature":"5yCzfYt89s0D1C0h5frF3yonrh0kRbvAs5wl4ZXBhogqpgqpyk4XK9spbvaS5clsqXq3GQpNBphHB7sJfwJoWg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yxpfwcx8aaujjfqaz2nu8hl5hzpes2xh0lw5m9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1486","machinetypejj","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwDar5sDtOtGxKbSzM5sNQSMpDsFH2yiHuD/GD+enC0z"},"signature":"Sxwy6VZzbwKm6ngPoR8trblP1aWG+xnJzenh4xGUP+9hLZOct2hfJSjunFfVKPsYreVZ9SNfgcPIEIsdENTyKA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yxpfwcx8aaujjfqaz2nu8hl5hzpes2xh0lw5m9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1486","1","1","g1yxpfwcx8aaujjfqaz2nu8hl5hzpes2xh0lw5m9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwDar5sDtOtGxKbSzM5sNQSMpDsFH2yiHuD/GD+enC0z"},"signature":"8LfLIsAY100TPsyvq3nXY2a6mpL9rcXK/ExnbnqNIuMY92xWheAbKyX60uYk/cz5zymHx8C3FWN6BSroi4SXKQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1avlwa4ztfy9uxdpqdqautrn4m97067vuwmw4x6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"aErrTOZyneOHRR9rY65WlQ6TLbku+IprMJqGN9sRajUwVnRemw0yTw+CfjaWCvzm6hSw/RRiH8fOVvr49SIiLw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1avlwa4ztfy9uxdpqdqautrn4m97067vuwmw4x6","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","someonehundredux",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/a3BF6JOjqZj/phPDzjgB+N3LgtOOiwXmWcRhRjrhDV"},"signature":"xubWDtBdnOKdpcBsVSjZhsjBt1EYC98/OJOnSkC2j7w/KKdeg0v1Dw0Lo07xTMTzxleow1QbbrDUOyd5j1s/UQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1avlwa4ztfy9uxdpqdqautrn4m97067vuwmw4x6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["someonehundredux"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/a3BF6JOjqZj/phPDzjgB+N3LgtOOiwXmWcRhRjrhDV"},"signature":"u9tAWqlgZqnkXYpjXDuE/tgyTg1i/fQvASTe6OiVD2gvQUArGfVOkZCLcbeMH+/VvPdevSC+32AbqORCaX4q0w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1avlwa4ztfy9uxdpqdqautrn4m97067vuwmw4x6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1487","someonehundredux","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/a3BF6JOjqZj/phPDzjgB+N3LgtOOiwXmWcRhRjrhDV"},"signature":"TrKXh7Agm0583OvAAP+3bXxNM8qAVHERbNbCkTe1c8oQk+hTfh2MK6EOLBvAMpx7n9YcSQCwy0jNzcWpd3duWg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1avlwa4ztfy9uxdpqdqautrn4m97067vuwmw4x6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1487","1","1","g1avlwa4ztfy9uxdpqdqautrn4m97067vuwmw4x6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/a3BF6JOjqZj/phPDzjgB+N3LgtOOiwXmWcRhRjrhDV"},"signature":"sNBGxTLA3PEukVxSOihosYkn60uAqz+RZwm9DjbwfFYBI7ilUkYL8D4cVNrPMh6yv7brM1o29YxGZnwGHv+uWg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16q8djveej0wyrmuzmk5x5unxxte86hdzhzpmag","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"XUs3fm8YF4T5cIJXk//A0dnFswHKsl5MX7uF8SB+Rbs2lmcHdlcLeJWZ+yp2/zldF+iDNndmw3+lcnnvcRHW8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16q8djveej0wyrmuzmk5x5unxxte86hdzhzpmag","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","absurdnervemu",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlVhMABIMHJhgmDV/4CurQ5DHEV8HeCW4f68lG7oTzcu"},"signature":"J5k5Dn+g1TrRD6dlZe84/+DpE+Q8RxkGSpsN/BKjSdxXtY6XPvkP5+wBznQgM0ij+qw67lbnkFrvFxcnr8VBZA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16q8djveej0wyrmuzmk5x5unxxte86hdzhzpmag","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["absurdnervemu"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlVhMABIMHJhgmDV/4CurQ5DHEV8HeCW4f68lG7oTzcu"},"signature":"3uL1YF8tGEdPu7vzjtlU+tnbpuLl4w3XZWhAseOBC4gD137clH+4B4lQuzhlcH96Ml0SzWrlRTfqBpXfu2McsQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16q8djveej0wyrmuzmk5x5unxxte86hdzhzpmag","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1488","absurdnervemu","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlVhMABIMHJhgmDV/4CurQ5DHEV8HeCW4f68lG7oTzcu"},"signature":"VMGTeVCIPxM1SYf0gMFnE1vJyniWRSzxpXm8H67HzgAHrIQNC9A/QKfha3ANw7cQOEttElxEI6ZreiId5Qd5SQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16q8djveej0wyrmuzmk5x5unxxte86hdzhzpmag","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1488","1","1","g16q8djveej0wyrmuzmk5x5unxxte86hdzhzpmag"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlVhMABIMHJhgmDV/4CurQ5DHEV8HeCW4f68lG7oTzcu"},"signature":"qmtTlmbKzf1PNU1OcdW9S1LBkIMQcCYdENTW2LATcvNdFrX/DsDYY7t3tBRaXZwbCaOIcMiuw2VuN5K3u5f3Og=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1yfgj0j9gw0cyraywed5ct7q3jdf327exrwdrx0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Cm8UuwzSuWfSgmkPDx2GOIcxagHuUT8q7ZCnCIWKeyVUGNwwCxz/CHYNYawkjp7fTz13dcwMULzD2tHxnyOVLQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yfgj0j9gw0cyraywed5ct7q3jdf327exrwdrx0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","uncleportionay",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1kbFgdlK6FxnkFKTpotSDO60+T54PBTAi1rhe/uivXG"},"signature":"yQU0aw3CLNB4iFM/ABTv1smiyTLPHMhy8oGsW4RF0+g0KTR66pN+8vSk49kVwDyvAY/5GZLxkZjinYTPGbraXQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yfgj0j9gw0cyraywed5ct7q3jdf327exrwdrx0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["uncleportionay"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1kbFgdlK6FxnkFKTpotSDO60+T54PBTAi1rhe/uivXG"},"signature":"zuZIpTZ/x4A3J/g9/A54TdNDJ4t8Slj/4F3KpwLrU5xkqKcZEIXswZmKqg1N7EYVGDGarvXmWOBYl+S4z+a93A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yfgj0j9gw0cyraywed5ct7q3jdf327exrwdrx0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1489","uncleportionay","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1kbFgdlK6FxnkFKTpotSDO60+T54PBTAi1rhe/uivXG"},"signature":"GNpBs8M/pJfDeOZLBGuyhscFGyxVo4IC69n/0+jhV9Ruw0xyFAXaUtm1DilMxi3ZePJptHVQdj2/Uf5WRhsD6Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yfgj0j9gw0cyraywed5ct7q3jdf327exrwdrx0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1489","1","1","g1yfgj0j9gw0cyraywed5ct7q3jdf327exrwdrx0"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1kbFgdlK6FxnkFKTpotSDO60+T54PBTAi1rhe/uivXG"},"signature":"i5CokfSSVhTtr3c/u6Yd2cYn8LCX3Az1tnnEwuCAG2RCDZ6AkfKAAYfImOH5OioAdCyeanGSKurumLtcuWZeiA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1yn4ug6aupeezmr94ux3mlrxa6683senf75n6ly","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"l3l+bKaGb7Bk43Wfgyi3mlivn5y2XoSDgL2beAuBOgFjsBwIj9J3RUXJfMCk03gYyvTO7RuR8nlO4ZmGHHyjPA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yn4ug6aupeezmr94ux3mlrxa6683senf75n6ly","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","becausepantherzm",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3D91PUc5WcKSs777ry91oz3AOgDSRQK4VO0S2etTxsa"},"signature":"3FZ2HzhrlIeHOrduaioLfFdsn+tPd4GlQSvwECXUzDV5UKDEB9hQz9269JoQ7Q9Jp20NnZBwlExJfpyEVZUe4Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yn4ug6aupeezmr94ux3mlrxa6683senf75n6ly","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["becausepantherzm"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3D91PUc5WcKSs777ry91oz3AOgDSRQK4VO0S2etTxsa"},"signature":"d4cEiuAkx7AX3amTpng4jCbVH5lOwdBSi43zRsNk3jlRRW3kGTcpOS/7nn3wx/FCLv7HfBERwGRrdFQOK7tk7w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yn4ug6aupeezmr94ux3mlrxa6683senf75n6ly","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1490","becausepantherzm","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3D91PUc5WcKSs777ry91oz3AOgDSRQK4VO0S2etTxsa"},"signature":"KFfMyz0GriugEiIETTWLLcKIRJVaov/vmSMcbREc6kBND5NQe35C64GpbgGc7n7eELwVk6F/Ts+y7vGK5gylBQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yn4ug6aupeezmr94ux3mlrxa6683senf75n6ly","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1490","1","1","g1yn4ug6aupeezmr94ux3mlrxa6683senf75n6ly"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3D91PUc5WcKSs777ry91oz3AOgDSRQK4VO0S2etTxsa"},"signature":"T+va6fVnkYH+ycQRussRXVIMmFd8yB1jSWkWzh/+w3Nbh2BYwkqZT8AxmX5SglfNr6ZPEjKdH2MQvLRhQ8PXDA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1tmlqasgprck4e6flkh6trs45lx0nlv877kv2gt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"MUQ8LcM1GpYv5ciPnyjrZiVoD4+lCr35g0I0cXt574FqGZ0i8l1P7xzkrV0yDuSSIG+I7vkzOhIloRlSNIxQuA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tmlqasgprck4e6flkh6trs45lx0nlv877kv2gt","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","catchrisk6f",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2+WjZ03Ofm7eCwyjmCZqQCtnUy34B3jb89xKcyBY/0g"},"signature":"H3JYdZEARIqKmaPYljIg6wg1GIzZ+QGPtaL30NNV1Q1ZFYRUf1jjhaT+8t02jlf1TNxVYkb4Kvw1sPwm/ISHNA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tmlqasgprck4e6flkh6trs45lx0nlv877kv2gt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["catchrisk6f"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2+WjZ03Ofm7eCwyjmCZqQCtnUy34B3jb89xKcyBY/0g"},"signature":"d0cTQVdErJfKk5Ax3l1B2csdM/eQW48lhsj3/1BUZVsBMyj+h+/uTBKFE+bI3UPV8KNaXf3ptgMtdb/liOn+FQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tmlqasgprck4e6flkh6trs45lx0nlv877kv2gt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1491","catchrisk6f","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2+WjZ03Ofm7eCwyjmCZqQCtnUy34B3jb89xKcyBY/0g"},"signature":"GCgWgrQ8dhqWdr7EY28hh+u+vvuDwTHATopPCjeQ7pUXywL2UHcp7ae8Nce53aWA0je2VyzlZ4sdtBnoUYeSuQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tmlqasgprck4e6flkh6trs45lx0nlv877kv2gt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1491","1","1","g1tmlqasgprck4e6flkh6trs45lx0nlv877kv2gt"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2+WjZ03Ofm7eCwyjmCZqQCtnUy34B3jb89xKcyBY/0g"},"signature":"uIERYa/pjpxcvnGrENPyXL5j+Vjl7Z3vWwDBt6zwDmNclmFtUCOI+ZcKtwddmRiJsa/kTH/eWFThZ6glsLpM9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xw06c23frscnh85c9vpy9t9999dtz5h7ms7kt2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"7HtDaz6ExR/1SwB8WHD1N5DeYlu+IK0jgv2Vatb/p7Ux2Uk+NH37BmwAqHlyDTWIzJPZIWSDgdDR4603WsScxg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xw06c23frscnh85c9vpy9t9999dtz5h7ms7kt2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","zonepotato85",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2lxXfAojwSMhKP3mbz8JDNkgvCWdycM8VZesZxuxP7M"},"signature":"qmrI5WXAPBmRE0RZJxBm3MpmcxquIrzToFj+d3GqNU8MbT1VvGiQ862Sk9YU+zaOw5Nv7B7ZDXymDzBt1hqy9Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xw06c23frscnh85c9vpy9t9999dtz5h7ms7kt2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["zonepotato85"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2lxXfAojwSMhKP3mbz8JDNkgvCWdycM8VZesZxuxP7M"},"signature":"M72YjdDb00mzf4sqIjyzXRmKsnthd8r2Hh1LTX+rCTB8WMNUhJ3Ndn2wknsfsUqonHOvGZQdLQhIQEH1pduZJw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xw06c23frscnh85c9vpy9t9999dtz5h7ms7kt2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1492","zonepotato85","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2lxXfAojwSMhKP3mbz8JDNkgvCWdycM8VZesZxuxP7M"},"signature":"nObMVfH/6iiQwnRZg8VUmmEEcFAUpP8trgmXC16XO8w8Fa5GaL0T98eu/I8i1k0iJkLM/KafPRNcrPR9RVYEAQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xw06c23frscnh85c9vpy9t9999dtz5h7ms7kt2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1492","1","1","g1xw06c23frscnh85c9vpy9t9999dtz5h7ms7kt2"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2lxXfAojwSMhKP3mbz8JDNkgvCWdycM8VZesZxuxP7M"},"signature":"DuwcM7W3tLeQlFsbabYxY69xypnzuMvcdjq1xOBfzztoIN2k+ReDt4z7aYYZNAXNhgvO4wqpzaEpN8H1wMg88g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g146k5sxduvp2qfll2x02mhy2pd67pv5u54pn8su","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"WZ3oUo0Prq9cdUzr7RZ7+Yk0drqp6XOYp2jk7M7wayhSdbwSU53GFkfQa5ZRjDmU/+qxTws0RuSmboblMQSOYg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1znn320vqx23v370tl25wx8lv9c9ew3p8uh93pd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"9EyS/LGgypLVLJxIZ9RmIr4pluoA+H8xk1uWfCbadrIcG/0udwcr4E41J6hQ3pHSWE33eG9MLXe01sIC7mMLcQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g146k5sxduvp2qfll2x02mhy2pd67pv5u54pn8su","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","tidedefyll",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AquAgDmw/EI3X8BHv+i6ld9beBE7aMplv4uevPDX5rxR"},"signature":"bfhzcdr8piXp4NekRGDI7nQRLVH81kPenc+OgCnitoNol3xN0H6St8y3xDfnZ/FoTuzdSHfhSK0kvs6FVBDicQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1znn320vqx23v370tl25wx8lv9c9ew3p8uh93pd","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","motheralmostv3",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkC/7GOlWPdusRv1ay052gXkvxAaDcXlv9HY3ndissL0"},"signature":"AlMZ9edJiLA/BucrKqijxZmjHDcNgGUYR8ZW/Ov4Kl4sSd9nuOGU/rI4G0dIxVJ6uysfN8fI98jMrCnu7A5KiA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g146k5sxduvp2qfll2x02mhy2pd67pv5u54pn8su","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["tidedefyll"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AquAgDmw/EI3X8BHv+i6ld9beBE7aMplv4uevPDX5rxR"},"signature":"to43aJ6lq6VOE0kOWwMk97zhQbs+01qMqsg1GCu4mr5w5mNjcrG2ArEK7shhlJIbb584bCCJK6kfNc6KfDq7qQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1znn320vqx23v370tl25wx8lv9c9ew3p8uh93pd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["motheralmostv3"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkC/7GOlWPdusRv1ay052gXkvxAaDcXlv9HY3ndissL0"},"signature":"CO6McuZFK+qiYcp93jzjGw+4YAkG24wuXB+KRg3KgsQzpEi1nl1uIVQFB5Yszawk81xyHu5WkaUtYZCOkMIlPg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g146k5sxduvp2qfll2x02mhy2pd67pv5u54pn8su","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1493","tidedefyll","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AquAgDmw/EI3X8BHv+i6ld9beBE7aMplv4uevPDX5rxR"},"signature":"IEJej7Kz1SyTkpBC4Ch1FQPlQ7LO+rTx1LMqlglAhtENMLdmBNkrGxS20vZtUBPHsTK5w0T/hUmuafoVC/YA0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1znn320vqx23v370tl25wx8lv9c9ew3p8uh93pd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1494","motheralmostv3","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkC/7GOlWPdusRv1ay052gXkvxAaDcXlv9HY3ndissL0"},"signature":"VH3icfR2sxj1UlY2AeXc/aPPtXKA8Mt85lNLEEv9GthKsUb6iskniAprY+EcpqJ6NaI4Wvih2EVLXPfnclmUDA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g146k5sxduvp2qfll2x02mhy2pd67pv5u54pn8su","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1493","1","1","g146k5sxduvp2qfll2x02mhy2pd67pv5u54pn8su"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AquAgDmw/EI3X8BHv+i6ld9beBE7aMplv4uevPDX5rxR"},"signature":"H4PuYi/bjD49RltsBtQGdNwHtBS82pIBTuOT2muFlCoU9zw0bPjufr6IXjHDsT1X793ues8DY968w0FxDCcm/g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1znn320vqx23v370tl25wx8lv9c9ew3p8uh93pd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1494","1","1","g1znn320vqx23v370tl25wx8lv9c9ew3p8uh93pd"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkC/7GOlWPdusRv1ay052gXkvxAaDcXlv9HY3ndissL0"},"signature":"vOpn1pnvKuND6p0/kYxsazcnPQL01dUThNkFv25Sgp5R7fpoBnqtO8zkPLzf0rB3L/RVYTuhgbyNE2ZLKsgKRg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ppetkkgw2pdask9n5e7jtgfhvkrug7dk8rjkvk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"XeMllT3Yg/nkJkRKZrdsbefd8Tnh7bsdOF3u5pQvZ+hHLUjobCZoh96AzdQoFpK+C3AYBVNiCMthT+LiI2OZPA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ppetkkgw2pdask9n5e7jtgfhvkrug7dk8rjkvk","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","prizebrassk9",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag7W2hqoV+TkhX+B++ic03ctgGrIQzdCjTSsGa9aSw5b"},"signature":"h+ol8dx4Lx3FXHPlWCe7FHFIH5HIGP45EIDH7jtGAg9f7WK3a8hHmlDOwfs0seUy3+zaKHoCAd5nFIdN2Ja+Ow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ppetkkgw2pdask9n5e7jtgfhvkrug7dk8rjkvk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["prizebrassk9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag7W2hqoV+TkhX+B++ic03ctgGrIQzdCjTSsGa9aSw5b"},"signature":"PIVjQVDKJxRKDYVTejTFEZ+Bg6kgPVb9kJhOiHAwcSA0feizLNRJzia2hhkFJ/e97gWoMfahbKD96G21vfpSEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ppetkkgw2pdask9n5e7jtgfhvkrug7dk8rjkvk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1495","prizebrassk9","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag7W2hqoV+TkhX+B++ic03ctgGrIQzdCjTSsGa9aSw5b"},"signature":"WcKmkITTKpTa4tPiARzbqzbIH/RYJtbjJtLGLj4mwzklGtHQ+mw79o+CHyQ1jbXwNWTmxBdjSdWJx8b+HLJzLQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ppetkkgw2pdask9n5e7jtgfhvkrug7dk8rjkvk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1495","1","1","g1ppetkkgw2pdask9n5e7jtgfhvkrug7dk8rjkvk"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag7W2hqoV+TkhX+B++ic03ctgGrIQzdCjTSsGa9aSw5b"},"signature":"7FbVdW1TXqbaAc5vPJCl/tto0RLufb1lhCMIHjagrnsVvf6+uN2l5T7dNO0zwfac/ueg4HK6CqgOlj4CiSVBGw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ju839lcwmu2rphye0690w47jz7w2h6z5jjldhz","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"RUIP1H0/nqM4GY0YmYztjgAR3zXTeQwNtMGGIndmWBgKtviCs8wsahIJePl/eblw+77dM0oTZZyBVmxP9FKbJg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ju839lcwmu2rphye0690w47jz7w2h6z5jjldhz","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","erodebalancehy",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApKSlB3zqbIO4P2x+5ssjDegQixdgsJeHN8X2rKvFRdJ"},"signature":"MR6ILNgb8PuBdoQuiC5Luh9j+SxtiKhwlotCEp0LJw0mB3ljtNZOmY2uW3hFqsKgHf75b8od7A/XGnArzG1QHQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ju839lcwmu2rphye0690w47jz7w2h6z5jjldhz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["erodebalancehy"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApKSlB3zqbIO4P2x+5ssjDegQixdgsJeHN8X2rKvFRdJ"},"signature":"X7UFP44Cb5A9HrfhTTbKMCtBOHgXMZWpLGrFsYSowWVZ/HRxMCiR+nLA6bPSRm0ve7GbBjXJBYFIAXwCuvkB4g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ju839lcwmu2rphye0690w47jz7w2h6z5jjldhz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1496","erodebalancehy","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApKSlB3zqbIO4P2x+5ssjDegQixdgsJeHN8X2rKvFRdJ"},"signature":"1xr0pDrHx4yPgXrQDZgA5SvevtkmwC/lrmpy6nybnwEfYuljqBfbVyhOAlGUQrIBP6SeDUeXOq1VaNr5u1krTw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ju839lcwmu2rphye0690w47jz7w2h6z5jjldhz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1496","1","1","g1ju839lcwmu2rphye0690w47jz7w2h6z5jjldhz"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApKSlB3zqbIO4P2x+5ssjDegQixdgsJeHN8X2rKvFRdJ"},"signature":"bKVxH9mD2Odcsamkawn8pv3xUT/BiaCHOOdoLoGBpzoiirudr/ZKkVEZ/ZNH4u2oK4pvRsZaLXd0GjFLE8kHNg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17v3768n2qsctx834prl6wnw5ltk30yy624h95r","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"h8l1RRt87FTeaX6XyO3d+uFtkNDB+xuv/NXsy9JcqYcPBKrfjq8o/oAtPqy5ZhN4IQUfgFUduz6+h4fJySgpjg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17v3768n2qsctx834prl6wnw5ltk30yy624h95r","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","callvalvetx",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoMqAP+19F8W2OPLK5soocGxAzXVU3Gi9FwAR4dHvKfH"},"signature":"S2agItpeVO77767H6nHNG0uUrdX4oyWMGrTwneYqoYVOoQporccsDuWyfhZPzW5n/qpgaiU+/p/PAZgktb9W2g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17v3768n2qsctx834prl6wnw5ltk30yy624h95r","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["callvalvetx"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoMqAP+19F8W2OPLK5soocGxAzXVU3Gi9FwAR4dHvKfH"},"signature":"cSqamBsNp7mmzUrkBDF4MoGm1mpk8+FeYdcYPxg2DOJD/OVcQF0FCFIYTnpBtcCWHsi34SUwDODIUW+b2f+arg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17v3768n2qsctx834prl6wnw5ltk30yy624h95r","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1497","callvalvetx","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoMqAP+19F8W2OPLK5soocGxAzXVU3Gi9FwAR4dHvKfH"},"signature":"xF7HUIPjdUObJuYcj3QerQnVjBBzoxUDmQIFQFrRrwUFlllji3ChMMoDWCdz2q29YWz39BOSXlgK8JJDpaCLOA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17v3768n2qsctx834prl6wnw5ltk30yy624h95r","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1497","1","1","g17v3768n2qsctx834prl6wnw5ltk30yy624h95r"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoMqAP+19F8W2OPLK5soocGxAzXVU3Gi9FwAR4dHvKfH"},"signature":"bkD5Aoi2IOqwlhEO3wEImftPlun1YFVQdgXsywDhJlk0x8mK99amnp3vhp/vvbWEcG+zNvwgyckeasW/BU4i1g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xrzczf70c6w4cuwu6glyn7z0rhu26tjhzyqcn9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"b93YwQL+HEIp1+cnSqdgo2pISmrxQkuNuDIgoIoU4lwclnZTK178HcIDXpryo0YBucMRT6zRDjY8gMZqEuHKsw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xrzczf70c6w4cuwu6glyn7z0rhu26tjhzyqcn9","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","wrestlevagueuw",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6qzcOK4mFc1t9H2WoFFe1LMUgGozVQ4GqZnnnRhJ/b6"},"signature":"t7mJvisOM29Hupxh3sk9Nmo1eRP4e+TFdRk2aKc+rrlaC41i4JywK+OXNq6EwkS/5Z0++heozx8VpBSSIpXPWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xrzczf70c6w4cuwu6glyn7z0rhu26tjhzyqcn9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["wrestlevagueuw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6qzcOK4mFc1t9H2WoFFe1LMUgGozVQ4GqZnnnRhJ/b6"},"signature":"lY7UNg2aH1fnPkPHKsGSA+wwah/+K2rzZT3hNps3NcYdsO6efzzt6P/9fCC5NdRHxK8zrVle+Cb7ViVeYh43nA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xrzczf70c6w4cuwu6glyn7z0rhu26tjhzyqcn9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1498","wrestlevagueuw","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6qzcOK4mFc1t9H2WoFFe1LMUgGozVQ4GqZnnnRhJ/b6"},"signature":"BRFIERFoAQ7OSXDCxCnB5RirSmJzKqrJT7hSl1MdJGALY2nD68+dnXFBMLWybLuaXkdTz33dus0ggIXnG+3V9A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xrzczf70c6w4cuwu6glyn7z0rhu26tjhzyqcn9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1498","1","1","g1xrzczf70c6w4cuwu6glyn7z0rhu26tjhzyqcn9"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6qzcOK4mFc1t9H2WoFFe1LMUgGozVQ4GqZnnnRhJ/b6"},"signature":"fVDIz7VLAgVMMSjs/uedsSDL4/fj4M/Sy9gh8WycvX5NKfoo0u+/vXGWPkvlb3FdmnnSpTpPKCcnVQuxhwi4Yg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1sz6et2y0pmgez2klu4lc8wqzn04fdn0wlm9mex","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"WqOl0rH2GY366GgBoDaGpH7Irb3MXY2emJJc988fJ3RZoUURkwEZMzShvloWBOiYNBt0M4+oam5QUCXqQwiDpQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sz6et2y0pmgez2klu4lc8wqzn04fdn0wlm9mex","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","youthmyth2k",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Amd+MTXQ8YIQmW8ffPOc0XPMdywI5zBobTGf6dOLOs6C"},"signature":"Kj/ktI6y70ljQp9elXc3mYIKs/DkP9pgWTV2ZKlt8IFOJUvv+Qefdm/xi9y7SLsTXhr8XwOYlLRXYDBZlU29yQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sz6et2y0pmgez2klu4lc8wqzn04fdn0wlm9mex","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["youthmyth2k"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Amd+MTXQ8YIQmW8ffPOc0XPMdywI5zBobTGf6dOLOs6C"},"signature":"5+B/rFchdzX4dHeH+sH29DS4UtM9TDUKC4UFfUZ5hdsED+Dj+KVQ5xtC2WmAT34b9LMOqXKLEU7NHo/OQjmuVg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sz6et2y0pmgez2klu4lc8wqzn04fdn0wlm9mex","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1499","youthmyth2k","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Amd+MTXQ8YIQmW8ffPOc0XPMdywI5zBobTGf6dOLOs6C"},"signature":"ii4C+WrnYbfp01GBVLfd09vNou0p1qxstZ2b3U1Gr1sfxOLEU3hZdMQLMISqxWBK6xEkgCGWwmUfilmQjA0NJw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sz6et2y0pmgez2klu4lc8wqzn04fdn0wlm9mex","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1499","1","1","g1sz6et2y0pmgez2klu4lc8wqzn04fdn0wlm9mex"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Amd+MTXQ8YIQmW8ffPOc0XPMdywI5zBobTGf6dOLOs6C"},"signature":"EAJ2NpKuUAFG0DlBqXQYYbB2y0TQB9sxeExZCn1S0MNGr9J5FIDUKQda7PuVKsbPtbQIlHPWr3PE29RhySXxUg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hs7n2x25a24r74j00qsl9v2y4smd89aa4qwjqs","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kftyxGtctKwXXjkaQGBHOlJG5QXxjuqP0j9qhZxwYgIswLZO8JW6t8WOedJceEP1AJ0QZIa6fSdDQcF8eyhbJw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hs7n2x25a24r74j00qsl9v2y4smd89aa4qwjqs","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","essaylock4j",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoEUN1PxCpSSyZEH9aRxEqb7u/Hbg/54IOvEylx4D9g+"},"signature":"iWPcdeegY8nY9PhjFNNrhI6cHGDGoAefaLim/hFGYX0lUeWtfq5LKRjAojm2AUQv9oaE+Bvju2TaEih46PxvMA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hs7n2x25a24r74j00qsl9v2y4smd89aa4qwjqs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["essaylock4j"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoEUN1PxCpSSyZEH9aRxEqb7u/Hbg/54IOvEylx4D9g+"},"signature":"cz97nC/kQ+xgakAySQvz/Avl6TsrpDpGeLBuVhgjOAZ3XNclQpc40VYMDn4PqP2yZQZfynJafcoPX+FVJ2o2nw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hs7n2x25a24r74j00qsl9v2y4smd89aa4qwjqs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1500","essaylock4j","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoEUN1PxCpSSyZEH9aRxEqb7u/Hbg/54IOvEylx4D9g+"},"signature":"9GE/M3nXYwwCUbkYifbUgJCjYm3DUsGt7SR5/oOwlvoSae4O5RxT3eyy+AK/NJ86oiSmWVSQIeY1a7zFgPtgaQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hs7n2x25a24r74j00qsl9v2y4smd89aa4qwjqs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1500","1","1","g1hs7n2x25a24r74j00qsl9v2y4smd89aa4qwjqs"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoEUN1PxCpSSyZEH9aRxEqb7u/Hbg/54IOvEylx4D9g+"},"signature":"OpcnlZGjv7+y1n3FGORbtuv4iuu+fFpTazA0sV6bR34BPU+0mhW9sUol3Sqewr05mJt1W/2hSIu2G5TrPr1y/Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ttxcmvd5jf7m4c4mjtelq7jntg8auus2jw6rzy","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"snpbvmxryfRu89OEa9H2zi9pD10/hTZhFnkJl/ZTB+cS8OZmtF7YQwsataK98JZTXqjRHnoD+lHrsNebqTSu/g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ttxcmvd5jf7m4c4mjtelq7jntg8auus2jw6rzy","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","pupilturtlem4",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoPGDr7MOPAtuv//huzfpXlq19cpP0DdPSIBgNkmf+Bf"},"signature":"O8iXFZrEUBueoIYUU0LZQsPEB1GLZW//ji9/pj+uW09ZO+HnTfSoSqCigsSkHgCS54gxsxN9y5aLclMj1GRusA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ttxcmvd5jf7m4c4mjtelq7jntg8auus2jw6rzy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["pupilturtlem4"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoPGDr7MOPAtuv//huzfpXlq19cpP0DdPSIBgNkmf+Bf"},"signature":"tjZU2y2DcLCR0RXtbs61Tvu0rdRUU2BVk85dHz/iDjUxusZsXJJZwRMWiJ+RxVznTg0OPY2qa4zdF4gSXAj0WA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ttxcmvd5jf7m4c4mjtelq7jntg8auus2jw6rzy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1501","pupilturtlem4","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoPGDr7MOPAtuv//huzfpXlq19cpP0DdPSIBgNkmf+Bf"},"signature":"SnksxhdIjNEcju1f0Bu+oqWpp8jKrKv5nG5PUalFkJFw9Yxm4W+aRi9PYPzqUXrSi4iWQ7AYffxSiB2YNFNRmw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ttxcmvd5jf7m4c4mjtelq7jntg8auus2jw6rzy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1501","1","1","g1ttxcmvd5jf7m4c4mjtelq7jntg8auus2jw6rzy"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoPGDr7MOPAtuv//huzfpXlq19cpP0DdPSIBgNkmf+Bf"},"signature":"diHVjgK8l/Nyq1xlOrnrJbhSCMdr13McsNkCOtzsWFwNEuIC6pXFXrs0hQ1wlKMH+w1NfJL/hufKfvGDZ6fufg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g155dj7zddzxvk46t4q4yzkrcgv33grrqufrfdm8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"G/039g2nSAnkgJtqBTT+vQZzqHMaZ723mZgv/ZxDczoB1WAgeuMF51iT81LEsvIeyokaa+stRbEMtVyH7sx5tQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g155dj7zddzxvk46t4q4yzkrcgv33grrqufrfdm8","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","unusualillness6t",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnNs/VhOs7O04vp9uO2e6xXilZwUxdWWL42YGi8vogTb"},"signature":"Is0ZW9TCGrGLmPnuU7NiyVMq67TsWAvd14Gqsbi6snx3cAxgjpoO0OZ+pccpdYfRAXtKFTNh5TgXFuRYPM/5EQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g155dj7zddzxvk46t4q4yzkrcgv33grrqufrfdm8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["unusualillness6t"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnNs/VhOs7O04vp9uO2e6xXilZwUxdWWL42YGi8vogTb"},"signature":"wm0/rtopg82JHCHTYhEzAV518aetWSwzLkDD5yth7QRsvTbaGmOa1+nwB5gFF2ykVVNDb/P9QEQ/ovb1dfc4YA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g155dj7zddzxvk46t4q4yzkrcgv33grrqufrfdm8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1502","unusualillness6t","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnNs/VhOs7O04vp9uO2e6xXilZwUxdWWL42YGi8vogTb"},"signature":"Iz5i7kAvPg7kde4omWdqMXm5xieBLUjm2LHT6ojL15xLBUXCl3O7Yz0Cep4IyjyGslmWK5O8KmjnrOMPkDMV1Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g155dj7zddzxvk46t4q4yzkrcgv33grrqufrfdm8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1502","1","1","g155dj7zddzxvk46t4q4yzkrcgv33grrqufrfdm8"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnNs/VhOs7O04vp9uO2e6xXilZwUxdWWL42YGi8vogTb"},"signature":"f1sckNbwD8Sa085f2ysNRzitJbslAAMLzeJFbitUB9wjZFoV/sPNi6rnVi8UdE64tgRFZptuQO0Fvnf/Clbfeg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1upcpfw7mwklkq3xnewym24hpx42c5tpd0vhuql","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"jMqxuvThjMLYe5Uj6lXUwodeY3W+lm1jnCiYUtgXIycJqzVdkq60GAFXF0LqBAP08k/ApEdAtzXNf/2ouY923Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1upcpfw7mwklkq3xnewym24hpx42c5tpd0vhuql","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","suspectstruggle3x",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/bl5txNdnKJ/Ri4jloKe2QruFNwAQdEG2lHWEjE/035"},"signature":"1EYkGwHxR0tX9BoQrhJyKW1lBIpCVdoBc9UnGGO2fRRwytdZugDtK14auLRmTtZytuNToohJJNSQPrr35w/ajQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1upcpfw7mwklkq3xnewym24hpx42c5tpd0vhuql","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["suspectstruggle3x"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/bl5txNdnKJ/Ri4jloKe2QruFNwAQdEG2lHWEjE/035"},"signature":"ZdPUS+B406Tm3JcEvCfdZkz4Dse57dDE+HJQjZfpXDVvpvSzdnfZHmHdZfwzd1XIbzx65V/43HGgi0631AOmlw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1upcpfw7mwklkq3xnewym24hpx42c5tpd0vhuql","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1503","suspectstruggle3x","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/bl5txNdnKJ/Ri4jloKe2QruFNwAQdEG2lHWEjE/035"},"signature":"eeBtZx0UZ+ddLUTGO3CD5754v6IE9H9JcrMY4ZxgXDNKJJUMWReOhYBp4Tp2n3So/9qeiAfiJnQ8yMkJZk9SHg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1upcpfw7mwklkq3xnewym24hpx42c5tpd0vhuql","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1503","1","1","g1upcpfw7mwklkq3xnewym24hpx42c5tpd0vhuql"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/bl5txNdnKJ/Ri4jloKe2QruFNwAQdEG2lHWEjE/035"},"signature":"7WBp9diE+B78SdEPYE3H2BHteyS72bay2URqAdGsbGM+DWAegAlEl3e50hfWfLuilz5g+LhtpcxTszX4xjNnkg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g149hm7f2wwadue5tcr3pthp0l2d4ektpkqk7unw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"MKV9MKZfFFXlqDE8DmVhU5vYl0yWLDKQ/jg5LeYz4sM+uWWTsU4vQ9AO35fZJa5FkpunKGr+OsSVzDPylZiUQw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g149hm7f2wwadue5tcr3pthp0l2d4ektpkqk7unw","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mediawagon5t",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah3nKL20HmWc4+THZTvzm8LHYJe4oX4FBmJ9mZlKBpZT"},"signature":"9cLoXGOjBX7shCB0AL+Zrmx6qBk0KmfMovAmVaSef2s1G7+LiMJx8xKAP2MYvdBrR6o3JTVSRhtnDo/SlqSnMg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g149hm7f2wwadue5tcr3pthp0l2d4ektpkqk7unw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["mediawagon5t"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah3nKL20HmWc4+THZTvzm8LHYJe4oX4FBmJ9mZlKBpZT"},"signature":"hG5kKTkSSgMI5s826J1t4AiRG+5byokZJGgOsQn9E0Rhp/QA/vaiRL0KYsuBe7NvFEovV9ar6KKpmDlkCR39Mg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1nszzaus6uhy7anq36twczd0977l7pwjvxv7uup","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"2DyZs/LlV1tIxc4VsLiCnuc2fiBhOqIFFpCX6zh08LhSn4OH+kJ6wKzJPGnyCTWYi1aJTSE6gSDqCYjX8CejEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nszzaus6uhy7anq36twczd0977l7pwjvxv7uup","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","tinysustain7a",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2afTHdqHk4Yy199PdUIfOpRrnhBhjh4xCGXE994ua+N"},"signature":"JlTf80NNGPJ6rm1ynii5gv/mqjmGqd9Qm5F4w3QIFEIwmzlZXMCkhZsNwH5edB+75dnB1sy4H7mzTqJt7EMdug=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g149hm7f2wwadue5tcr3pthp0l2d4ektpkqk7unw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1504","mediawagon5t","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah3nKL20HmWc4+THZTvzm8LHYJe4oX4FBmJ9mZlKBpZT"},"signature":"pQN40YwprjCPRk2YaP+VsjTobxkA9q5OOvScX6NAYqoxkyKKOA2qL4/hJWc0ku87gF+baEJk7Qpt+m6pX3ksqg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g149hm7f2wwadue5tcr3pthp0l2d4ektpkqk7unw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1504","1","1","g149hm7f2wwadue5tcr3pthp0l2d4ektpkqk7unw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah3nKL20HmWc4+THZTvzm8LHYJe4oX4FBmJ9mZlKBpZT"},"signature":"AiF6G2JBQY1UeNTzRdyw54CZWwDV/9VzhsgelqFYn3s9Em6Nwq3YHKi8mRVSTYHPQ2CYNX5DTSO/7TPUDuuzxw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nszzaus6uhy7anq36twczd0977l7pwjvxv7uup","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["tinysustain7a"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2afTHdqHk4Yy199PdUIfOpRrnhBhjh4xCGXE994ua+N"},"signature":"iMh0R2U3pR2JJ1cZolDkxytfEQy3p52MEaf7KHzS/kdYp7HYKwlgI4yFwHIw6b5R0EBTP71URa6BoX5KMhd6NQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nszzaus6uhy7anq36twczd0977l7pwjvxv7uup","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1505","tinysustain7a","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2afTHdqHk4Yy199PdUIfOpRrnhBhjh4xCGXE994ua+N"},"signature":"tCEqPhBz6eN8YzWbprNB1ZCScnECMsOJdqJdORYrXJVZVfoMn2/2ALPbhW/9Qtsn5JgJOrL/KlN1iBxrYXFA+w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nszzaus6uhy7anq36twczd0977l7pwjvxv7uup","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1505","1","1","g1nszzaus6uhy7anq36twczd0977l7pwjvxv7uup"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2afTHdqHk4Yy199PdUIfOpRrnhBhjh4xCGXE994ua+N"},"signature":"434G20yrEknIhOlfmNVhmWmVyI1naC+TNNJY/VXT2v0i5o0e+ZXOmEHWyjaScrLjiIBObbvARrwa366fMUcPnA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12d9r9gpw79jtdc6qj25npgwwwlvfv8rseageuw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kvIXg2TtFphi+FXP6f+0QYk0ZCdGDba97o9tg58N8eAw/bs9kg47IVaklnfaAp7qh96/VRZxPMHQIj3mP91w7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12d9r9gpw79jtdc6qj25npgwwwlvfv8rseageuw","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","shovecutec6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmTQ9ePeotWLCOu0pGerB5/s+Lt+CDrCdX5q4HpAZaK1"},"signature":"6ernAHgPkJ3mhpPxQgcNTYdAglkd7vss8IhLCeqj0blhHHOuyNJoyP2waB+nmK/x2LPF5L3bXu7exH/G9IApog=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12d9r9gpw79jtdc6qj25npgwwwlvfv8rseageuw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["shovecutec6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmTQ9ePeotWLCOu0pGerB5/s+Lt+CDrCdX5q4HpAZaK1"},"signature":"rWLVl9/tojhdsSRJQ7Paj5n44TfyDlPNUH0G5OgjoRs8g1vPtyy7rl1/TLIDq7UTL/Dz2zOH6G3ZtEdDwbzY5g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12d9r9gpw79jtdc6qj25npgwwwlvfv8rseageuw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1506","shovecutec6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmTQ9ePeotWLCOu0pGerB5/s+Lt+CDrCdX5q4HpAZaK1"},"signature":"2wUPR7lgngjvdMkqPlSARN9EIKHcEIfd5BR78i1JtpkqOyrh25/8f3BbR7B7+pfG7GjWiP/KKZdSVxeHBCG2+A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12d9r9gpw79jtdc6qj25npgwwwlvfv8rseageuw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1506","1","1","g12d9r9gpw79jtdc6qj25npgwwwlvfv8rseageuw"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmTQ9ePeotWLCOu0pGerB5/s+Lt+CDrCdX5q4HpAZaK1"},"signature":"H44UYK4vxKrbT+R20K9ZaqC0gZR5Ctj5U88zCFEd9aNFjGsKrIBrm8Aynb3rWh2diME94182ljqGoD1KReEKZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1j2g0dhvyvvuekn5emrzyh0wvj5gszx2kzjpxps","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"TVEvomZqTq3aCLPN7A0rMysoCFUh/29SnN/L7MT2bM91PMWTlRxkmJX/AcZum32/r499CU1IIlBl3Q4TxIKjDQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j2g0dhvyvvuekn5emrzyh0wvj5gszx2kzjpxps","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","clogtorchn5",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArREba/WT30c0dXRqhQF4Nb16izDclli2jN0mMFziEW5"},"signature":"fNiZ8CkwcEyjhqgJE1XVGwIvDXkf9UrVfJuITjsgtCtwU+EROd9CraKibOouQ5zMDbh/Ntybm2RKUJO3HEUQow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j2g0dhvyvvuekn5emrzyh0wvj5gszx2kzjpxps","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["clogtorchn5"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArREba/WT30c0dXRqhQF4Nb16izDclli2jN0mMFziEW5"},"signature":"S40vTWG/96RFCKfRjBu6s5sSG39hPChaqk+90VO9uuNLBQVWKY6le6Tr/QHCcinZ/LYqITP7YGyfBQFhvbh5NQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j2g0dhvyvvuekn5emrzyh0wvj5gszx2kzjpxps","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1507","clogtorchn5","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArREba/WT30c0dXRqhQF4Nb16izDclli2jN0mMFziEW5"},"signature":"WrOvwyJAanz6h+O0THPdv9GPZ5aaikgLlC1ScHvZYp8ebgibDqAidPnjgJ2wnv4dmWJ3wJM1BIyIdTYTLD34tQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j2g0dhvyvvuekn5emrzyh0wvj5gszx2kzjpxps","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1507","1","1","g1j2g0dhvyvvuekn5emrzyh0wvj5gszx2kzjpxps"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArREba/WT30c0dXRqhQF4Nb16izDclli2jN0mMFziEW5"},"signature":"FkTOJ8uoMAazTenTK487wjndFMHL1TnbxBsdp1q1545VAiruYtzi0a2lTDCGjOVrN8yUrGHQETwWM5iVDEHBtg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vyc0zyydky6lur7nrkywj2ge7xlw4x27uz925v","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"7fHEGE/1Za8xwui0xu/YYzvFfYCqveX3o+3+Uu8jnyxInkcpx6EdLLjJi0OkVmSZZHZK4F+eqB9idNqGQg6cBQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vyc0zyydky6lur7nrkywj2ge7xlw4x27uz925v","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","lawsuitsteplu",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvihCDxMdN5ztN2Y0ZWKXP5nKFDKnNU8ShqIhb/HzsvB"},"signature":"LNlFQJndi0AslmPNZUIQC4i6CQjBkEEbe8tqTgXQP6kHXne5ng1WV5k+QPiG6yp+wIifU5xztAqOXUoNNjw1gw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vyc0zyydky6lur7nrkywj2ge7xlw4x27uz925v","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["lawsuitsteplu"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvihCDxMdN5ztN2Y0ZWKXP5nKFDKnNU8ShqIhb/HzsvB"},"signature":"94hYNMjHM1LzYq+bYvhTt8cQHTVsMbZYVsiaMjKwKF4+xC/OkN4ixFa4wKybiy7UQbT2nXdGVlIix7BNqtE75Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vyc0zyydky6lur7nrkywj2ge7xlw4x27uz925v","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1508","lawsuitsteplu","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvihCDxMdN5ztN2Y0ZWKXP5nKFDKnNU8ShqIhb/HzsvB"},"signature":"SbSdhe7GS8109B8ZVGRpLGvdfSwyImDkY/GareroZYVX3BBls3EU05f6bM/n0WrHvr5ket7FJGpXfe4mxCE0uw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vyc0zyydky6lur7nrkywj2ge7xlw4x27uz925v","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1508","1","1","g1vyc0zyydky6lur7nrkywj2ge7xlw4x27uz925v"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvihCDxMdN5ztN2Y0ZWKXP5nKFDKnNU8ShqIhb/HzsvB"},"signature":"2YdjFxOT1Ai6acKorMXrxceUpi2yXrojynOS443mcGVcGW2OwL2JGAaKXga15OCFjteqLrui12cgmUlb13QN6w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1n9z2wkgwt5zn58cr80gtf438d68g6huwprdmyv","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"QMkxOYGy9+pHugMINcZwCViPGZnya2aqJ/8bcyKS+IdWoOhqlsjMAaO6jcU4VKMGRP1ilQCo8xrwoqSM7Veutg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n9z2wkgwt5zn58cr80gtf438d68g6huwprdmyv","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","copypunch8c",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay3DGFc9QVvFR4EYM6Dkhi8Mm4sh2ie9GpbkwfRWzLKS"},"signature":"fMF1zMGII+Qb7ca1bdQqvTEHO4w/8u7P6k7obAaoYAggf0W2YpF7Zv5/6LCipVZxXjo+jJ5pVMXMXGDjWx4moA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n9z2wkgwt5zn58cr80gtf438d68g6huwprdmyv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["copypunch8c"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay3DGFc9QVvFR4EYM6Dkhi8Mm4sh2ie9GpbkwfRWzLKS"},"signature":"0lBBFRK85chtwKYTBA4Df5jtwc6twMrgtzEEJaWM3XU1tURlbvUaHAZLHB+bvRIiwV1UnM7xeG2+/AojgMQjlg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n9z2wkgwt5zn58cr80gtf438d68g6huwprdmyv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1509","copypunch8c","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay3DGFc9QVvFR4EYM6Dkhi8Mm4sh2ie9GpbkwfRWzLKS"},"signature":"yiRs0s23Nvxl0+QQ8jrhJo+rQqnMNiqqPxrHjers6EspmIoDn5nrFxQkDvxoYxdQ1HmSxtt6SQplCLkD+2BhvQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n9z2wkgwt5zn58cr80gtf438d68g6huwprdmyv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1509","1","1","g1n9z2wkgwt5zn58cr80gtf438d68g6huwprdmyv"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay3DGFc9QVvFR4EYM6Dkhi8Mm4sh2ie9GpbkwfRWzLKS"},"signature":"LiJNPP+fE0eG5CJdwVv6dxWZpcQ9+tHAmRUwGjS7eLs6ndogJdQtXTZwdsUciD3s+hKdriBkB9BXf1woIQ3ARA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15gk5kmmzrfja80k5xmk6yrn2p9jkzq5p8sannn","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"yyafGs6CX3i35lKOJNO0CuFMfDuLXUyp4FwcXn5i5twRYOY43+BW2JbwSFsLPiwr327j9Zuf8bWuIMu8JOFDvQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15gk5kmmzrfja80k5xmk6yrn2p9jkzq5p8sannn","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","wavegenre0k",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alx6YWpyLfzvBQbrAixaiwpTV/IWHQ4Tg8rNj+XUByPM"},"signature":"vs6xPFleou9YQcmub8pJUWYIepiGh6rcghwFVb0ku2s2kg3zAbi3q1MwydHlbe36/IFu7ieuxSH5pZ3GhDALGQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15gk5kmmzrfja80k5xmk6yrn2p9jkzq5p8sannn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["wavegenre0k"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alx6YWpyLfzvBQbrAixaiwpTV/IWHQ4Tg8rNj+XUByPM"},"signature":"dFBcC7Hf9SSSG5UhqZ6pgPh/NTKDeb2fME73SCGvKh00VDRRjFq7QGYAR/UcJYOOZeA1mv97LGwOKVhSvRQNWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15gk5kmmzrfja80k5xmk6yrn2p9jkzq5p8sannn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1510","wavegenre0k","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alx6YWpyLfzvBQbrAixaiwpTV/IWHQ4Tg8rNj+XUByPM"},"signature":"5IcScL4JjPGn79pQLddVEPYHUNkR3UEjRVrQHppq3MwCGW6QLD+B/Ty1aufl+0Legbtj0uVAi4/IgyXxOutOmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15gk5kmmzrfja80k5xmk6yrn2p9jkzq5p8sannn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1510","1","1","g15gk5kmmzrfja80k5xmk6yrn2p9jkzq5p8sannn"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alx6YWpyLfzvBQbrAixaiwpTV/IWHQ4Tg8rNj+XUByPM"},"signature":"OMKB35BOI4RV+/9H+CGMSNr/Xjb6PK9bGvUbfxjGMZNiq84H/Bk/gAunm/obPRLw+mEMsDnUU83CPFEOSmL6PQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1s2p6rmqcsqf48s52t3pfrvhnhyp089rg495gaf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"mRVMHhlFfIzL+Dc9taHIIHBRLkhlKCoLJa7glN4EkRUB5IRRG/EzExuWEh9jKLqX1qs8Ellra8eMoXyOTYQMWQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s2p6rmqcsqf48s52t3pfrvhnhyp089rg495gaf","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","enterbirths5",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8HbPUSP3by3pQaMyjEBWeXEDxWikLovzayImD7E7pls"},"signature":"Ry4tgsO3BLdBAbjt6EDUDWTtondkFwwlN81eyIzwNHwzhG5icRxBDnYSTCR17dwUKmULnIHpxwhtegBiTAqVhA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s2p6rmqcsqf48s52t3pfrvhnhyp089rg495gaf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["enterbirths5"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8HbPUSP3by3pQaMyjEBWeXEDxWikLovzayImD7E7pls"},"signature":"WTjGPlY+r4poHPZpRjmAzJazaUvyxoWNRWRrq9kIKYMbY4fFiwUXrcXZkk5Eibz9wYQZgemZexkdAtDh/j/4gg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s2p6rmqcsqf48s52t3pfrvhnhyp089rg495gaf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1511","enterbirths5","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8HbPUSP3by3pQaMyjEBWeXEDxWikLovzayImD7E7pls"},"signature":"m2amxoFXYrPv4ULzHMRnNCCDOAgDHNiAYTkiTpNzl74Ww+17imdwiZiPnSmqmy+184zYb5nb7AGaWq5iww1g2g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s2p6rmqcsqf48s52t3pfrvhnhyp089rg495gaf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1511","1","1","g1s2p6rmqcsqf48s52t3pfrvhnhyp089rg495gaf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8HbPUSP3by3pQaMyjEBWeXEDxWikLovzayImD7E7pls"},"signature":"Wm/MGYE6tu2UgoLcCV1I+1K/Dh+cLX0aunFXMBKLKiIRNd/Z93YZgUG1UdArfbX1rAd1PuoH4br8ilIwXAgNVQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1zhc5y6xv2jumgx4x9qtwxkuc5efv6z0w2mzjnc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"VSdbFIuAfgqEPlcdSiJbYG+FwtIVe+K2FDYXdFq49JlXnrAPljQ/qqvI08bBs3hVf9qjDPrPn3k2e1xuo7uCZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zhc5y6xv2jumgx4x9qtwxkuc5efv6z0w2mzjnc","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","widthlatermg",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGQ8kHC4E2maoDOdDYXvXMAnczQVKGZLXsGwKVojSf4"},"signature":"oD4gEO2jusEDKMvc22dZp7RG9uaNEqFe3KxYtLAJTuI80k6Clk7+BjwglmnVGQlh1VlEAXbQQzEuqgBelVpspA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zhc5y6xv2jumgx4x9qtwxkuc5efv6z0w2mzjnc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["widthlatermg"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGQ8kHC4E2maoDOdDYXvXMAnczQVKGZLXsGwKVojSf4"},"signature":"G5GmpKzm+q5dHBVsF9aDms8rpqC0l5TqDfmcMYWIIPdoxj9EDWDcE4Bm38sN3N8IlvX1ZAJ5/YCj1kAsJ4HCuA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zhc5y6xv2jumgx4x9qtwxkuc5efv6z0w2mzjnc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1512","widthlatermg","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGQ8kHC4E2maoDOdDYXvXMAnczQVKGZLXsGwKVojSf4"},"signature":"pQVU8+RZfk6TwenSp8GMAVVw62haDQdMeS5mYkA3mLk26gyb3TaS9t8fMu/8KCovtHC8I7HOsw4KY7oH4Wlx7Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zhc5y6xv2jumgx4x9qtwxkuc5efv6z0w2mzjnc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1512","1","1","g1zhc5y6xv2jumgx4x9qtwxkuc5efv6z0w2mzjnc"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGQ8kHC4E2maoDOdDYXvXMAnczQVKGZLXsGwKVojSf4"},"signature":"JnRi9ReHbjhKLLgARoeC5/NfCcG2386MskaZTI/4d80cnCIaxf1vBOoQfSMBe3dm9QDlVr+tmybGO6DPDSG2rg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lyvesxy44kgm06cpz7yxrvm9g0clu094e6n8ez","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"r/FucBsBvBX92VO7nEe7CAiobFTHQK8B7wxIIshmSyp6lfu5f85207BwdFiAr8UcbCNGlQp16mo+d4rZhHs/nw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lyvesxy44kgm06cpz7yxrvm9g0clu094e6n8ez","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","actorfantasy6c",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApwksdTK+hQq3nVnfk+646n7vmZikH5pFgk1JVV/39RC"},"signature":"G7PzI+DoNxM8bem3DKgtbzuw1rGwplJflFxsMj/DQrRBTnl3xHDsJvi2n1p0eDbPWFQsPDnoEamwo9a3EBnnhw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lyvesxy44kgm06cpz7yxrvm9g0clu094e6n8ez","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["actorfantasy6c"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApwksdTK+hQq3nVnfk+646n7vmZikH5pFgk1JVV/39RC"},"signature":"TE1ZwJxXeU1eE19zS5N0FUZOmlZCpV2CBUFq8gtEAMcxbmG7L8J6Rii0quXKjzQQzM/HO10c6KeTlaEHqecZrw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lyvesxy44kgm06cpz7yxrvm9g0clu094e6n8ez","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1513","actorfantasy6c","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApwksdTK+hQq3nVnfk+646n7vmZikH5pFgk1JVV/39RC"},"signature":"E7gclPYnUkcOK6SSWbZw1E3fbksY2DTWFMb7BMHX6VQx09Fj8W7b+HZ6OQfzKVy1hcWXbiz0v07+tQWvlTyyBw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lyvesxy44kgm06cpz7yxrvm9g0clu094e6n8ez","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1513","1","1","g1lyvesxy44kgm06cpz7yxrvm9g0clu094e6n8ez"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApwksdTK+hQq3nVnfk+646n7vmZikH5pFgk1JVV/39RC"},"signature":"SdoCQ2qjTIstiNiLx2eG+/WDKqiF7ud7jEuYlvjZUS1MTZ6lpq9KDk5iuMZGJn5DPVo0Rd6wPi3/or7L6qm1OQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1j7epxqrqa8dg7me0wcenzw7afq7sxe30ktxq76","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"WR4S8ostBGMHLOeKUte15mf6PJ188qjG2MFYJ8efIJlEb51w1qpi4QfK33ndg8t4YYe/CZP2/4tTUsz98/bC4g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j7epxqrqa8dg7me0wcenzw7afq7sxe30ktxq76","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","armysoftme",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2q6MX/t581RbbtJMKoCDrDjPTqlNfcKLJDY+26zjqKt"},"signature":"ITCagULxElyxkAqdf24m0lPYO3SNsc5NjKNB6zqFqaYFK1fNhA8k/wfLah5fl1ctY52XuLMSi8aM8zPk5elPVw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j7epxqrqa8dg7me0wcenzw7afq7sxe30ktxq76","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["armysoftme"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2q6MX/t581RbbtJMKoCDrDjPTqlNfcKLJDY+26zjqKt"},"signature":"v+kquyEjRwALhPXtYqVTVNoVsq4eqS6oNKZvYPO0BBBkD5kOV7L1/EJ+1ocAMJkhsbGEvq7fPTeUShmNJ/rJgg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j7epxqrqa8dg7me0wcenzw7afq7sxe30ktxq76","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1514","armysoftme","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2q6MX/t581RbbtJMKoCDrDjPTqlNfcKLJDY+26zjqKt"},"signature":"1qxnTAXRx+w+2Nqtj1Dvht6c5mwG6sgPM4/LrX++KpRPsB0+UQA3WedZXvOgBfLvdxdK/XsfUpg9VAmMxX+J7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j7epxqrqa8dg7me0wcenzw7afq7sxe30ktxq76","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1514","1","1","g1j7epxqrqa8dg7me0wcenzw7afq7sxe30ktxq76"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2q6MX/t581RbbtJMKoCDrDjPTqlNfcKLJDY+26zjqKt"},"signature":"B8jphoOsronmMGl4e309py8wzpjod6Oo6KopTyWe/bNLfQ+Bl/cyFBEvJIBbWcmMJ27k0eSnGnoMk2EqQj/WHA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jel3wdylr0thgvrqxfh6lt9nckw2vwjgkyf93g","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"y4sJzhIhhWNyAe1tgPheK7yKxZUU1Zo0Wz1LK4FP/98rOhpkd9LJcT0/vMmuU4b38hkydE/RdFGr8qE8ZT4rEA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jel3wdylr0thgvrqxfh6lt9nckw2vwjgkyf93g","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","wrongalarmvr",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A710GfUwJSqpI9FJW/HkZbYaVKpy5ncY6zIb/UwKtekb"},"signature":"WOanE9D7TM2Iy/RCDgSQRfvq/pmocJsPkoxSmxLcP7FraDO7dQFF17T6sf9MKbEjlB+RQhyXRZGJGdid+GgBVw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jel3wdylr0thgvrqxfh6lt9nckw2vwjgkyf93g","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["wrongalarmvr"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A710GfUwJSqpI9FJW/HkZbYaVKpy5ncY6zIb/UwKtekb"},"signature":"aZJ2gOQ1jtyWkfI7A7AAEBEJowh8C0+1Emck/hcxOWAx1uTof0woNdna9iHkL+tTHLj+SfwPwXPng/3TZNzVRA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jel3wdylr0thgvrqxfh6lt9nckw2vwjgkyf93g","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1515","wrongalarmvr","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A710GfUwJSqpI9FJW/HkZbYaVKpy5ncY6zIb/UwKtekb"},"signature":"N+O7L4S5pmWIs7ncuJikhLqtCZLoTK2QRctFoIvSUjtS0EM9OCMcLYUO8wp27UVSlBh4uEbINDBFh0a0PsLBnA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19ywk3hzkksnlf6u5jh2u6ynkg88qqz6fgvn766","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"5Wt8BPvGcCkzWV8vAe1sRgPpmXSxd/giSrBTjtntQ7gYeB8ZD6Eqql30jEOu8EGJ/ChRhFC0xf2wAv3yo5j3Vg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jel3wdylr0thgvrqxfh6lt9nckw2vwjgkyf93g","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1515","1","1","g1jel3wdylr0thgvrqxfh6lt9nckw2vwjgkyf93g"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A710GfUwJSqpI9FJW/HkZbYaVKpy5ncY6zIb/UwKtekb"},"signature":"Rqi9/DRTuhlCNsvoSZYYs0QF57Yfz8Ugz66uz6CG+dALUeiNxwZe4YkFDMy5QwRogB+tuZjqmpbwoQKeqplJ+g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19ywk3hzkksnlf6u5jh2u6ynkg88qqz6fgvn766","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","sponsorstandlf",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhSUeCTJOTQ/HZ4l90CTwh2jo9J0B2dskvddupp2O3Se"},"signature":"2JMSkoMfeqMW09Aa48UN7Pi5MnY71QjWDjtwCpz7ykNt2DNOTqdlv/qMQcGEWI6JbxHr01l6nPsZLhc5CL4xgQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19ywk3hzkksnlf6u5jh2u6ynkg88qqz6fgvn766","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["sponsorstandlf"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhSUeCTJOTQ/HZ4l90CTwh2jo9J0B2dskvddupp2O3Se"},"signature":"qJOm4ecIHsHRNLRoF6ll893GTTvegs2TsN76M0XK2Rs0ZZzL85/wDNvgzc5tZA86rgBlBj+ejxgudkW3Z0bvow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19ywk3hzkksnlf6u5jh2u6ynkg88qqz6fgvn766","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1516","sponsorstandlf","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1gnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreatePost\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreatePost\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/avl\" --pkgdir \"examples/gno.land/p/avl\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100gnot --gas-fee 1gnot --gas-wanted 300000000 --broadcast true --chainid testchain --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhSUeCTJOTQ/HZ4l90CTwh2jo9J0B2dskvddupp2O3Se"},"signature":"SCmbalcMzDwN02RiIYF1Ok2qmJEYhZ+CR42XOAjTtRUgFChNVlsACsPp5WLPOEwLyJL3dugNkRBCSR7MDwi4Ww=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19ywk3hzkksnlf6u5jh2u6ynkg88qqz6fgvn766","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1516","1","1","g19ywk3hzkksnlf6u5jh2u6ynkg88qqz6fgvn766"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhSUeCTJOTQ/HZ4l90CTwh2jo9J0B2dskvddupp2O3Se"},"signature":"jPVIIiNSDbZPHaflNshY9EAeg4latt23q4D8gDu7itIp6VfOem18V+NkLbzL1xBrBGHNyJ7uJVgQAEB0FFghaw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1zj8kzdgtte4e7z6p4qsu7hkkdx0mz029tt8fhl","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"KVRMMuvLPu7TAKpGl7hVKqVQWLAN5jgZa17B71h5VL5PhuaAGqnvAWoBHNXqq/bad9O1P741/WbsgWlOB7+OVQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zj8kzdgtte4e7z6p4qsu7hkkdx0mz029tt8fhl","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","honeyparkz6",""]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2VDpku69weuJ67L27UeHQKnVyUkumlrhZRf2LlBXyjv"},"signature":"2D0gge0vITLcW4QgUHC7KD+52a85LbIvoEgJBCW0muJKF+gkJ7bwu9PA7O6PVcsbbFRpp4AeZ+rFxDlcFi7prQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zj8kzdgtte4e7z6p4qsu7hkkdx0mz029tt8fhl","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["honeyparkz6"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2VDpku69weuJ67L27UeHQKnVyUkumlrhZRf2LlBXyjv"},"signature":"ptGJ9eudjqklI7QkLXI4q0Ufw/+MeS5OTq22F4zDfXQwfHTA/sc228RA6iWbKS/ED0xkyfVBkxSTek0lRvkvSw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zj8kzdgtte4e7z6p4qsu7hkkdx0mz029tt8fhl","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1517","honeyparkz6","This is a demo of Gno smart contract programming.  This document was\nconstructed by Gno onto a smart contract hosted on the data Realm\nname [\"gno.land/r/boards\"](https://gno.land/r/boards/)\n([github](https://github.com/gnolang/gno/tree/master/examples/gno.land/r/boards)).\n\n\n\n## Build `gnokey`, create your account, and interact with Gno.\n\nNOTE: Where you see `--remote gno.land:36657` here, that flag can be replaced\nwith `--remote localhost:26657` for local testnets.\n\n### Build `gnokey`.\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd ./gno\nmake\n```\n\n### Generate a seed/mnemonic code.\n\n```bash\n./build/gnokey generate\n```\n\nNOTE: You can generate 24 words with any good bip39 generator.\n\n### Create a new account using your mnemonic.\n\n```bash\n./build/gnokey add KEYNAME --recover\n```\n\nNOTE: `KEYNAME` is your key identifier, and should be changed.\n\n### Verify that you can see your account locally.\n\n```bash\n./build/gnokey list\n```\n\n## Interact with the blockchain:\n\n### Get your current balance, account number, and sequence number.\n\n```bash\n./build/gnokey query auth/accounts/ACCOUNT_ADDR --remote gno.land:36657\n```\n\nNOTE: you can retrieve your `ACCOUNT_ADDR` with `./build/gnokey list`.\n\n### Acquire testnet tokens using the official faucet.\n\nGo to https://gno.land/faucet\n\n### Create a board with a smart contract call.\n\nNOTE: `BOARDNAME` will be the slug of the board, and should be changed.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateBoard\" --args \"BOARDNAME\" --gas-fee \"1000000ugnot\" --gas-wanted \"2000000\" --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateBoard\n\nNext, query for the permanent board ID by querying (you need this to create a new post):\n\n```bash\n./build/gnokey query \"vm/qeval\" --data \"gno.land/r/boards\nGetBoardIDFromName(\\\"BOARDNAME\\\")\" --remote gno.land:36657\n```\n\n### Create a post of a board with a smart contract call.\n\nNOTE: If a board was created successfully, your SEQUENCE_NUMBER would have increased.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateThread\" --args BOARD_ID --args \"Hello gno.land\" --args\\#file \"./examples/gno.land/r/boards/example_post.md\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateThread\n\n### Create a comment to a post.\n\n```bash\n./build/gnokey maketx call KEYNAME --pkgpath \"gno.land/r/boards\" --func \"CreateReply\" --args \"BOARD_ID\" --args \"1\" --args \"1\" --args \"Nice to meet you too.\" --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid testchain --remote gno.land:36657\n```\n\nInteractive documentation: https://gno.land/r/boards?help\u0026__func=CreateReply\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\nBOARDNAME/1\" --remote gno.land:36657\n```\n\n### Render page with optional path expression.\n\nThe contents of `https://gno.land/r/boards:` and `https://gno.land/r/boards:gnolang` are rendered by calling\nthe `Render(path string)` function like so:\n\n```bash\n./build/gnokey query \"vm/qrender\" --data \"gno.land/r/boards\ngnolang\"\n```\n\n## Starting a local `gnoland` node:\n\n### Add test account.\n\n```bash\n./build/gnokey add test1 --recover\n```\n\nUse this mneonic:\n\u003e source bonus chronic canvas draft south burst lottery vacant surface solve popular case indicate oppose farm nothing bullet exhibit title speed wink action roast\n\n### Start `gnoland` node.\n\n```bash\n./build/gnoland\n```\n\nNOTE: This can be reset with `make reset`\n\n### Publish the \"gno.land/p/demo/avl\" package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/p/demo/avl\" --pkgdir \"examples/gno.land/p/demo/avl\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 2000000 --broadcast true --chainid dev --remote localhost:26657\n```\n\n### Publish the \"gno.land/r/boards\" realm package.\n\n```bash\n./build/gnokey maketx addpkg test1 --pkgpath \"gno.land/r/boards\" --pkgdir \"examples/gno.land/r/boards\" --deposit 100000000ugnot --gas-fee 1000000ugnot --gas-wanted 300000000 --broadcast true --chainid dev --remote localhost:26657\n```\n"]}],"fee":{"gas_wanted":"4000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2VDpku69weuJ67L27UeHQKnVyUkumlrhZRf2LlBXyjv"},"signature":"WYKN+zluLhPQocNCOJ/p2v9pIpktxNntUUKpByzPOzBRhHSui67ajX1+tveVOdJ+LDrg3eo6uKJusjt7zG8YnA=="}],"memo":""}
