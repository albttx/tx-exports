{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ypdhslyd970t9t0zal7q2h3576xwaj9c9y8m5x","send":"1000000000000ugnot","pkg_path":"gno.land/r/gnoland/faucet","func":"Render","args":[""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av71OpX4/3lG9mTxm3PTYXzKP+5kiqWcAhNwQLcHkyDN"},"signature":"FcOHn5FRil2h/gZhr+zzWDFhnEEuUhe7yQqWMQaAC1grpmHT+t5lHwNo3EgSweYcboar1j/TYn5NBVViSKge+Q=="}],"memo":""},"blockNum":"3"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/gnoland/faucet","func":"AdminSetAdminAddr","args":["g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"ezrtYU25+kQh/UyjILwGOEObv+t4dxs7rjStDsDlhlJB1MwmiJSkPSItbkxZ/rRbsUoT1rrfJD+rKgV0ZOvdcw=="}],"memo":""},"blockNum":"5"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"wgnot","Path":"gno.land/r/wgnot","Files":[{"Name":"gno.mod","Body":"module gno.land/r/wgnot"},{"Name":"wgnot.gno","Body":"package wgnot\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n\n\t// for swap\n\t\"gno.land/p/demo/testutils\"\n)\n\nvar (\n\twgnot *grc20.AdminToken\n\tadmin std.Address = \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\" // TODO: helper to change admin\n)\n\nfunc init() {\n\twgnot = grc20.NewAdminToken(\"WrappedGnot\", \"WGNOT\", 4) // name, symbol, decimals\n\twgnot.Mint(admin, 1000000*10000)                       // @administrator (1M)\n\n\t// for swap \u003e pool\n\tvar (\n\t\tlp01     = testutils.TestAddress(\"lp01\") // Liquidity Provider 01\n\t\tlp02     = testutils.TestAddress(\"lp02\") // Liquidity Provider 02\n\t\tlp03     = testutils.TestAddress(\"lp03\") // Liquidity Provider 03\n\t\ttr01     = testutils.TestAddress(\"tr01\") // Trader 01\n\t\tpoolAddr = std.DerivePkgAddr(\"gno.land/r/pool\")\n\t\tposAddr  = std.DerivePkgAddr(\"gno.land/r/position\")\n\t)\n\n\twgnot.Mint(lp01, 50000000)\n\twgnot.Mint(lp02, 50000000)\n\twgnot.Mint(lp03, 50000000)\n\twgnot.Mint(tr01, 50000000)\n\n\twgnot.Approve(lp01, poolAddr, 50000000)\n\twgnot.Approve(lp02, poolAddr, 50000000)\n\twgnot.Approve(lp03, poolAddr, 50000000)\n\twgnot.Approve(tr01, poolAddr, 50000000)\n\n\twgnot.Approve(lp01, lp01, 50000000)\n\twgnot.Approve(lp02, lp02, 50000000)\n\twgnot.Approve(lp03, lp03, 50000000)\n\twgnot.Approve(tr01, tr01, 50000000)\n\n\twgnot.Approve(posAddr, poolAddr, 50000000)\n}\n\n// method proxies as public functions.\n//\n\n// getters.\nfunc GetGRC20() *grc20.AdminToken {\n\treturn wgnot\n}\n\nfunc TotalSupply() uint64 {\n\treturn wgnot.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := wgnot.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := wgnot.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\t// caller := std.GetOrigCaller()\n\tcaller := std.PrevRealm().Addr()\n\terr := wgnot.Transfer(caller, to.Resolve(), amount)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\t// caller := std.GetOrigCaller()\n\tcaller := std.PrevRealm().Addr()\n\terr := wgnot.Approve(caller, spender.Resolve(), amount)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\t// caller := std.GetOrigCaller()\n\tcaller := std.PrevRealm().Addr()\n\terr := wgnot.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n}\n\n// faucet.\n\nfunc Faucet() {\n\t// FIXME: add limits?\n\t// FIXME: add payment in gnot?\n\t// caller := std.GetOrigCaller()\n\tcaller := std.PrevRealm().Addr()\n\twgnot.Mint(caller, 1000*10000) // 1k\n}\n\nfunc FaucetL() {\n\t// FIXME: add limits?\n\t// FIXME: add payment in gnot?\n\t// caller := std.GetOrigCaller()\n\tcaller := std.PrevRealm().Addr()\n\twgnot.Mint(caller, 50000000000) // 50_000_000_000\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\t// caller := std.GetOrigCaller()\n\tcaller := std.PrevRealm().Addr()\n\tassertIsAdmin(caller)\n\twgnot.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\t// caller := std.GetOrigCaller()\n\tcaller := std.PrevRealm().Addr()\n\tassertIsAdmin(caller)\n\twgnot.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn wgnot.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := wgnot.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n"},{"Name":"wgnot_test.gno","Body":"package wgnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\ta1 = testutils.TestAddress(\"a1\")\n\ta2 = testutils.TestAddress(\"a2\")\n\ta3 = testutils.TestAddress(\"a3\")\n\ta4 = testutils.TestAddress(\"a4\")\n)\n\nfunc init() {\n\tstd.TestSetOrigCaller(a1)\n\tFaucet()\n}\n\nfunc TestTransfer(t *testing.T) {\n\tstd.TestSetOrigCaller(a1)\n\tTransfer(a2u(a2), 100)\n\n\tstd.TestSetOrigCaller(a2)\n\tTransfer(a2u(a3), 95)\n\n\tshouldPanicWithMsg(t, func() { Transfer(a2u(a3), 10) }, \"insufficient balance\")\n}\n\nfunc TestApprove(t *testing.T) {\n\tstd.TestSetOrigCaller(std.Address(\"\"))\n\tshouldPanicWithMsg(t, func() { Approve(a2u(a2), 1000) }, \"invalid address\")\n\n\tstd.TestSetOrigCaller(a1)\n\tshouldPanicWithMsg(t, func() { Approve(a2u(std.Address(\"\")), 1000) }, \"invalid address\")\n}\n\nfunc TestTransferFrom(t *testing.T) {\n\tstd.TestSetOrigCaller(a1)\n\tApprove(a2u(a2), 1000)\n\n\tstd.TestSetOrigCaller(a2)\n\tTransferFrom(a2u(a1), a2u(a3), 100)\n\n\t// not enough allowance\n\tshouldPanicWithMsg(t, func() { TransferFrom(a2u(a1), a2u(a3), 901) }, \"insufficient allowance\")\n\n\t// didn't approve\n\tstd.TestSetOrigCaller(a3)\n\tshouldPanicWithMsg(t, func() { TransferFrom(a2u(a1), a2u(a4), 100) }, \"insufficient allowance\")\n}\n\nfunc a2u(addr std.Address) users.AddressOrName {\n\treturn users.AddressOrName(addr)\n}\n\nfunc shouldPanicWithMsg(t *testing.T, f func(), msg string) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t} else {\n\t\t\tif r != msg {\n\t\t\t\tt.Errorf(\"excepted panic(%v), got(%v)\", msg, r)\n\t\t\t}\n\t\t}\n\t}()\n\tf()\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"vv0T7T3sho4evl5m40VzQYwSzOAM0J7mRpNRZnRG3ohziWOH0gNXBsb5OlP4s39YE3I7DfqzeqxhVyfB+/Wefg=="}],"memo":""},"blockNum":"239"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"wgnot","Path":"gno.land/r/wgnot","Files":[{"Name":"gno.mod","Body":"module gno.land/r/wgnot"},{"Name":"wgnot.gno","Body":"package wgnot\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n\n\t// for swap\n\t\"gno.land/p/demo/testutils\"\n)\n\nvar (\n\twgnot *grc20.AdminToken\n\tadmin std.Address = \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\" // TODO: helper to change admin\n)\n\nfunc init() {\n\twgnot = grc20.NewAdminToken(\"WrappedGnot\", \"WGNOT\", 4) // name, symbol, decimals\n\twgnot.Mint(admin, 1000000*10000)                       // @administrator (1M)\n\n\t// for swap \u003e pool\n\tvar (\n\t\tlp01     = testutils.TestAddress(\"lp01\") // Liquidity Provider 01\n\t\tlp02     = testutils.TestAddress(\"lp02\") // Liquidity Provider 02\n\t\tlp03     = testutils.TestAddress(\"lp03\") // Liquidity Provider 03\n\t\ttr01     = testutils.TestAddress(\"tr01\") // Trader 01\n\t\tpoolAddr = std.DerivePkgAddr(\"gno.land/r/pool\")\n\t\tposAddr  = std.DerivePkgAddr(\"gno.land/r/position\")\n\t)\n\n\twgnot.Mint(lp01, 50000000)\n\twgnot.Mint(lp02, 50000000)\n\twgnot.Mint(lp03, 50000000)\n\twgnot.Mint(tr01, 50000000)\n\n\twgnot.Approve(lp01, poolAddr, 50000000)\n\twgnot.Approve(lp02, poolAddr, 50000000)\n\twgnot.Approve(lp03, poolAddr, 50000000)\n\twgnot.Approve(tr01, poolAddr, 50000000)\n\n\twgnot.Approve(lp01, lp01, 50000000)\n\twgnot.Approve(lp02, lp02, 50000000)\n\twgnot.Approve(lp03, lp03, 50000000)\n\twgnot.Approve(tr01, tr01, 50000000)\n\n\twgnot.Approve(posAddr, poolAddr, 50000000)\n}\n\n// method proxies as public functions.\n//\n\n// getters.\nfunc GetGRC20() *grc20.AdminToken {\n\treturn wgnot\n}\n\nfunc TotalSupply() uint64 {\n\treturn wgnot.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := wgnot.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := wgnot.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\t// caller := std.GetOrigCaller()\n\tcaller := std.PrevRealm().Addr()\n\terr := wgnot.Transfer(caller, to.Resolve(), amount)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\t// caller := std.GetOrigCaller()\n\tcaller := std.PrevRealm().Addr()\n\terr := wgnot.Approve(caller, spender.Resolve(), amount)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\t// caller := std.GetOrigCaller()\n\tcaller := std.PrevRealm().Addr()\n\terr := wgnot.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n}\n\n// faucet.\n\nfunc Faucet() {\n\t// FIXME: add limits?\n\t// FIXME: add payment in gnot?\n\t// caller := std.GetOrigCaller()\n\tcaller := std.PrevRealm().Addr()\n\twgnot.Mint(caller, 1000*10000) // 1k\n}\n\nfunc FaucetL() {\n\t// FIXME: add limits?\n\t// FIXME: add payment in gnot?\n\t// caller := std.GetOrigCaller()\n\tcaller := std.PrevRealm().Addr()\n\twgnot.Mint(caller, 50000000000) // 50_000_000_000\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\t// caller := std.GetOrigCaller()\n\tcaller := std.PrevRealm().Addr()\n\tassertIsAdmin(caller)\n\twgnot.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\t// caller := std.GetOrigCaller()\n\tcaller := std.PrevRealm().Addr()\n\tassertIsAdmin(caller)\n\twgnot.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn wgnot.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := wgnot.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"5TKEAlSmthfX1kRTFfDkiRqRzyXZ50QhVdRlj6ZSaVNCfqY4LPqY5xi39KH43TCl8KGWqpeV9uvO6zeLFr8z9A=="}],"memo":""},"blockNum":"241"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello","Path":"gno.land/r/demo/hello","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\n// func Render() string {\n// \treturn \"Render() called\"\n// }\n\nfunc Render(path string) string {\n\treturn \"Render(path string) called with\\n# \" + path\n}"},{"Name":"hello_test.gno","Body":"package hello\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\t{\n\t\tgot := Hello()\n\t\texpected := \"Hello() called\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"\")\n\t\texpected := \"Render(path string) called with\\n# \"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"n3wbie\")\n\t\texpected := \"Render(path string) called with\\n# n3wbie\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"K0hOFMs84GEmykLaDfC0oScCYiU0QgOOY+0WgivLLXFK0pxUIMhfEDtoZ67fjcmDfvYZuS0tshG9j0FkoZiiZQ=="}],"memo":""},"blockNum":"250"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","tester"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"Q5S67+965llEZcYVlUWLNKsxHjVYiYor6oNULW6vr0RFcG2wWUagrhRWYOSPqpESbaVs0eL9Q9zM6U9ONLZa3g=="}],"memo":""},"blockNum":"260"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","tester","tester_profile"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"OEo9Khm2jcIeIAZCdMn3iTXwSWo3j6J0hTx0EMwfz7wA/JtR6gqy5gnMD+5ccQYhGY27FfjHiovvqg1erFCktA=="}],"memo":""},"blockNum":"262"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello","Path":"gno.land/r/demo/hello2","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\n// func Render() string {\n// \treturn \"Render() called\"\n// }\n\nfunc Render(path string) string {\n\treturn \"Render(path string) called with\\n# \" + path\n}"},{"Name":"hello_test.gno","Body":"package hello\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\t{\n\t\tgot := Hello()\n\t\texpected := \"Hello() called\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"\")\n\t\texpected := \"Render(path string) called with\\n# \"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"n3wbie\")\n\t\texpected := \"Render(path string) called with\\n# n3wbie\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"iLdUBcKVTinZ/v6ETLytWyljvsVBcOcqHnHlSBr/3mN7InHhf9S/mc5tTHMpuhhsIL64o91g2KNF7Fv1cVchnA=="}],"memo":""},"blockNum":"274"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello","Path":"gno.land/r/demo/hello3","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\n// func Render() string {\n// \treturn \"Render() called\"\n// }\n\nfunc Render(path string) string {\n\treturn \"Render(path string) called with\\n# \" + path\n}"},{"Name":"hello_test.gno","Body":"package hello\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\t{\n\t\tgot := Hello()\n\t\texpected := \"Hello() called\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"\")\n\t\texpected := \"Render(path string) called with\\n# \"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"n3wbie\")\n\t\texpected := \"Render(path string) called with\\n# n3wbie\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"MOjdKXQDaq1vuTQmzEv2htm4CM4VePqz6g6S/E9DszBM34HAMO6LJNMzqa3GfmFxkMcbKX8oOZC7suv06bm3tw=="}],"memo":""},"blockNum":"276"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello","Path":"gno.land/r/demo/hello4","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\n// func Render() string {\n// \treturn \"Render() called\"\n// }\n\nfunc Render(path string) string {\n\treturn \"Render(path string) called with\\n# \" + path\n}"},{"Name":"hello_test.gno","Body":"package hello\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\t{\n\t\tgot := Hello()\n\t\texpected := \"Hello() called\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"\")\n\t\texpected := \"Render(path string) called with\\n# \"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"n3wbie\")\n\t\texpected := \"Render(path string) called with\\n# n3wbie\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"R6ImDo7ZT3xpuRqqV+3Z1XRyh+Pwn0lFskaFuLAd6coXspmMh4CAto0xlmXEx7K9ZEd6FFzfQ5bajPorn3QYsQ=="}],"memo":""},"blockNum":"278"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello","Path":"gno.land/r/demo/hello5","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\n// func Render() string {\n// \treturn \"Render() called\"\n// }\n\nfunc Render(path string) string {\n\treturn \"Render(path string) called with\\n# \" + path\n}"},{"Name":"hello_test.gno","Body":"package hello\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\t{\n\t\tgot := Hello()\n\t\texpected := \"Hello() called\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"\")\n\t\texpected := \"Render(path string) called with\\n# \"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"n3wbie\")\n\t\texpected := \"Render(path string) called with\\n# n3wbie\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"1/W+AxysfdsFPYbqhpiuz4UUS3nLdfM9VF68GMpZ1ZsUGucHPjLezz0JV5mY24uPL91BupUykh7d9N4NAwJbsA=="}],"memo":""},"blockNum":"280"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello","Path":"gno.land/r/demo/hello6","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\n// func Render() string {\n// \treturn \"Render() called\"\n// }\n\nfunc Render(path string) string {\n\treturn \"Render(path string) called with\\n# \" + path\n}"},{"Name":"hello_test.gno","Body":"package hello\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\t{\n\t\tgot := Hello()\n\t\texpected := \"Hello() called\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"\")\n\t\texpected := \"Render(path string) called with\\n# \"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"n3wbie\")\n\t\texpected := \"Render(path string) called with\\n# n3wbie\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"24UyvaJa9haam6jyQqIs2ZsPF7TvVWH2g1zgH+FzB+pGcmOTeM/7s4nuX+QwnrY3ErMT0szYIJNsYE4O0EJM5A=="}],"memo":""},"blockNum":"282"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello","Path":"gno.land/r/demo/hello7","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\n// func Render() string {\n// \treturn \"Render() called\"\n// }\n\nfunc Render(path string) string {\n\treturn \"Render(path string) called with\\n# \" + path\n}"},{"Name":"hello_test.gno","Body":"package hello\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\t{\n\t\tgot := Hello()\n\t\texpected := \"Hello() called\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"\")\n\t\texpected := \"Render(path string) called with\\n# \"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"n3wbie\")\n\t\texpected := \"Render(path string) called with\\n# n3wbie\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"CdyliRzDuKhCgtEbczuijhXvAVpb9NlMuJ817+nL0+5p3/Z1YVXSLcN8YHiLQejojnHYdAffDqQkhI3gVQ1EkQ=="}],"memo":""},"blockNum":"284"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello","Path":"gno.land/r/demo/hello8","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\n// func Render() string {\n// \treturn \"Render() called\"\n// }\n\nfunc Render(path string) string {\n\treturn \"Render(path string) called with\\n# \" + path\n}"},{"Name":"hello_test.gno","Body":"package hello\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\t{\n\t\tgot := Hello()\n\t\texpected := \"Hello() called\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"\")\n\t\texpected := \"Render(path string) called with\\n# \"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"n3wbie\")\n\t\texpected := \"Render(path string) called with\\n# n3wbie\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"XHyj2DA+a3m+Z4t5Uo+eAd6gaQpJglro+3IxtkpGqiI8Bb+tiiJprkTjSDAc4u7pxXbdwsHkoBkFyfM9+zfkNA=="}],"memo":""},"blockNum":"286"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello","Path":"gno.land/r/demo/hello9","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\n// func Render() string {\n// \treturn \"Render() called\"\n// }\n\nfunc Render(path string) string {\n\treturn \"Render(path string) called with\\n# \" + path\n}"},{"Name":"hello_test.gno","Body":"package hello\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\t{\n\t\tgot := Hello()\n\t\texpected := \"Hello() called\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"\")\n\t\texpected := \"Render(path string) called with\\n# \"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"n3wbie\")\n\t\texpected := \"Render(path string) called with\\n# n3wbie\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"w8c5UKVCqz1pfYvtV9FU05j7KnSCNCXVgn568dQ3oa9FHlwsVlXG4FMI/xKy05haPZzdiNqTfbLCxHwYcmai1Q=="}],"memo":""},"blockNum":"289"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello","Path":"gno.land/r/demo/hello10","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\n// func Render() string {\n// \treturn \"Render() called\"\n// }\n\nfunc Render(path string) string {\n\treturn \"Render(path string) called with\\n# \" + path\n}"},{"Name":"hello_test.gno","Body":"package hello\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\t{\n\t\tgot := Hello()\n\t\texpected := \"Hello() called\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"\")\n\t\texpected := \"Render(path string) called with\\n# \"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"n3wbie\")\n\t\texpected := \"Render(path string) called with\\n# n3wbie\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"PMRyCo9Kb+CTi7pEdyLMjTjm+1eptnsLw2Uz2nKjyU0GnMLtWX07X0p9m1RTjSLzk/LK0/oORXTDGdfhVDpPtw=="}],"memo":""},"blockNum":"291"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello","Path":"gno.land/r/demo/a_b_c","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\n// func Render() string {\n// \treturn \"Render() called\"\n// }\n\nfunc Render(path string) string {\n\treturn \"Render(path string) called with\\n# \" + path\n}"},{"Name":"hello_test.gno","Body":"package hello\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\t{\n\t\tgot := Hello()\n\t\texpected := \"Hello() called\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"\")\n\t\texpected := \"Render(path string) called with\\n# \"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"n3wbie\")\n\t\texpected := \"Render(path string) called with\\n# n3wbie\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"lCaLCOQ+7O8JrypPYXNF8H3LUuZzzsZCNusvU+9Z9EJpYczmpPOPxW7wcdelskA21yKnG8ASyiy5T1wssl2W1g=="}],"memo":""},"blockNum":"293"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello","Path":"gno.land/r/demo/1_b_c","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\n// func Render() string {\n// \treturn \"Render() called\"\n// }\n\nfunc Render(path string) string {\n\treturn \"Render(path string) called with\\n# \" + path\n}"},{"Name":"hello_test.gno","Body":"package hello\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\t{\n\t\tgot := Hello()\n\t\texpected := \"Hello() called\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"\")\n\t\texpected := \"Render(path string) called with\\n# \"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"n3wbie\")\n\t\texpected := \"Render(path string) called with\\n# n3wbie\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"ooDHAEOagxjXgCGqm8Mxk+Tg3ruidyQK72e7x64pHm0z5VBoe6x2i6eXJKZo3cxdzG9mFOnc0T2P/0P1fQCzDA=="}],"memo":""},"blockNum":"295"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello","Path":"gno.land/r/demo/1","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\n// func Render() string {\n// \treturn \"Render() called\"\n// }\n\nfunc Render(path string) string {\n\treturn \"Render(path string) called with\\n# \" + path\n}"},{"Name":"hello_test.gno","Body":"package hello\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\t{\n\t\tgot := Hello()\n\t\texpected := \"Hello() called\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"\")\n\t\texpected := \"Render(path string) called with\\n# \"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"n3wbie\")\n\t\texpected := \"Render(path string) called with\\n# n3wbie\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"BaDNgYqr/RKtGnk5x7+QQslNRVtRAqNe9pKzoll9xSwBU/fdQEGq32spGxU4cU9nVsELNgOMjDzqFhrIpNfLHg=="}],"memo":""},"blockNum":"297"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello","Path":"gno.land/r/demo/a/b/c/d/e","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\n// func Render() string {\n// \treturn \"Render() called\"\n// }\n\nfunc Render(path string) string {\n\treturn \"Render(path string) called with\\n# \" + path\n}"},{"Name":"hello_test.gno","Body":"package hello\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\t{\n\t\tgot := Hello()\n\t\texpected := \"Hello() called\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"\")\n\t\texpected := \"Render(path string) called with\\n# \"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"n3wbie\")\n\t\texpected := \"Render(path string) called with\\n# n3wbie\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"xEBqtBsnF+SrXmk9Yq+75vGNbhwh8oc0NybtbBlC6FFwsCwQbmtCP+MOUjyzNpgNzTkqv6TMNSic19xoH1ERYQ=="}],"memo":""},"blockNum":"299"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello","Path":"gno.land/r/demo/a/b/c/d/e/f/g","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\n// func Render() string {\n// \treturn \"Render() called\"\n// }\n\nfunc Render(path string) string {\n\treturn \"Render(path string) called with\\n# \" + path\n}"},{"Name":"hello_test.gno","Body":"package hello\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\t{\n\t\tgot := Hello()\n\t\texpected := \"Hello() called\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"\")\n\t\texpected := \"Render(path string) called with\\n# \"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"n3wbie\")\n\t\texpected := \"Render(path string) called with\\n# n3wbie\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"AkW37l7ABcFH49H3vuuQyaQl5gOqbFcsDQlQmBmx6L07kP5zTbLQPkmXBNw5uLm/cvr2MXvWFnK+rGQ3yFdLWg=="}],"memo":""},"blockNum":"301"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello","Path":"gno.land/r1/a","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\n// func Render() string {\n// \treturn \"Render() called\"\n// }\n\nfunc Render(path string) string {\n\treturn \"Render(path string) called with\\n# \" + path\n}"},{"Name":"hello_test.gno","Body":"package hello\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\t{\n\t\tgot := Hello()\n\t\texpected := \"Hello() called\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"\")\n\t\texpected := \"Render(path string) called with\\n# \"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"n3wbie\")\n\t\texpected := \"Render(path string) called with\\n# n3wbie\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"/q/W7ZmlmroYQzvKBpCbN1liIMNslOtluGcZkJd4Ua49kNbeynx8LS4C0TfEmwaps7kQnngmuk3NvJmYPvlDMQ=="}],"memo":""},"blockNum":"303"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello","Path":"gno.land/p/demo/hello1","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\n// func Render() string {\n// \treturn \"Render() called\"\n// }\n\nfunc Render(path string) string {\n\treturn \"Render(path string) called with\\n# \" + path\n}"},{"Name":"hello_test.gno","Body":"package hello\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\t{\n\t\tgot := Hello()\n\t\texpected := \"Hello() called\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"\")\n\t\texpected := \"Render(path string) called with\\n# \"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"n3wbie\")\n\t\texpected := \"Render(path string) called with\\n# n3wbie\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"Nf297wF1ytFU4oEYkpWzwqM3ZeYs5LmGLi5mIGcT5ihdb5AT3qHo+pp+d0YviiEwvkBLYtIBmBQ+gr8RSR2uJw=="}],"memo":""},"blockNum":"305"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello","Path":"gno.land/p/demo/hello2","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\n// func Render() string {\n// \treturn \"Render() called\"\n// }\n\nfunc Render(path string) string {\n\treturn \"Render(path string) called with\\n# \" + path\n}"},{"Name":"hello_test.gno","Body":"package hello\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\t{\n\t\tgot := Hello()\n\t\texpected := \"Hello() called\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"\")\n\t\texpected := \"Render(path string) called with\\n# \"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"n3wbie\")\n\t\texpected := \"Render(path string) called with\\n# n3wbie\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"YBmotwd3ncJkx9OOWEQXiF1sPXR3mSlIpYgSm5bCHMVnXynfKlWn6HJ2hcccLQTF7h8fPYGsAyU+15DTxrQsGw=="}],"memo":""},"blockNum":"307"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello","Path":"gno.land/p/demo/hello3","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\n// func Render() string {\n// \treturn \"Render() called\"\n// }\n\nfunc Render(path string) string {\n\treturn \"Render(path string) called with\\n# \" + path\n}"},{"Name":"hello_test.gno","Body":"package hello\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\t{\n\t\tgot := Hello()\n\t\texpected := \"Hello() called\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"\")\n\t\texpected := \"Render(path string) called with\\n# \"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"n3wbie\")\n\t\texpected := \"Render(path string) called with\\n# n3wbie\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"aHJ8ruujunUdC7rmhgDX8G5y7wJi/pWBtxX1uwqG6SpwlcZXsOX44hIAPWpRu74CpNIGa5pwVCejN/VFMxHXDA=="}],"memo":""},"blockNum":"309"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello","Path":"gno.land/p/demo/hello4","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\n// func Render() string {\n// \treturn \"Render() called\"\n// }\n\nfunc Render(path string) string {\n\treturn \"Render(path string) called with\\n# \" + path\n}"},{"Name":"hello_test.gno","Body":"package hello\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\t{\n\t\tgot := Hello()\n\t\texpected := \"Hello() called\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"\")\n\t\texpected := \"Render(path string) called with\\n# \"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"n3wbie\")\n\t\texpected := \"Render(path string) called with\\n# n3wbie\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"6IjkyLv+orA8nuPZhWRl4PmSlyQX4FgZ3YDhJQ/ZZPgwi8//BRs/y0LIbozRvoR3PFsr5zKBCtkAEjO9StMt7Q=="}],"memo":""},"blockNum":"311"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello","Path":"gno.land/p/demo/hello5","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\n// func Render() string {\n// \treturn \"Render() called\"\n// }\n\nfunc Render(path string) string {\n\treturn \"Render(path string) called with\\n# \" + path\n}"},{"Name":"hello_test.gno","Body":"package hello\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\t{\n\t\tgot := Hello()\n\t\texpected := \"Hello() called\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"\")\n\t\texpected := \"Render(path string) called with\\n# \"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"n3wbie\")\n\t\texpected := \"Render(path string) called with\\n# n3wbie\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"7oMSgIzQWLvp6iSb0vQ461cpIcOSn4BfH4yxIPuCtGRddkZr9mF3JgRW4uZ+pNFKnOhy82tR8Wp4oxcAVEaoZQ=="}],"memo":""},"blockNum":"313"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"hello","Path":"gno.land/p/demo/hello6","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\n// func Render() string {\n// \treturn \"Render() called\"\n// }\n\nfunc Render(path string) string {\n\treturn \"Render(path string) called with\\n# \" + path\n}"},{"Name":"hello_test.gno","Body":"package hello\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\t{\n\t\tgot := Hello()\n\t\texpected := \"Hello() called\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"\")\n\t\texpected := \"Render(path string) called with\\n# \"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"n3wbie\")\n\t\texpected := \"Render(path string) called with\\n# n3wbie\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"c9o0/VH+V/48kQWgnZrbDtU4HWQBaFxH1mybUR9uOE0oQVOiHJZJspnpfhptLbomzflgmXW0hB4ylqyVVE9Lfw=="}],"memo":""},"blockNum":"315"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","amount":"6000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"roUThBq099kk79YFguojARZxWIXEB0z8wg6DCdDq4voxvVifrPlHKrwH+AGI2g7ECNVUISpkwcklOMSrjLEk3Q=="}],"memo":""},"blockNum":"322"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"03KDDhKzN7DvYQD+BJpDyxrgqYUX1FgtAQI7cfNN2+5CQ49cAYaEYNwoBOlrJEMmtepdZ+60BX14cfuJPe7yLw=="}],"memo":""},"blockNum":"810"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","to_address":"g1k8p7x84gjcy0recfkzvfgljxyyxdlgu02y6w50","amount":"309999999ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al7LV/X++mUIljzenR1OaxKfue7hfo6UsvOhGCdDtiid"},"signature":"/ngei5T6ikXV+iQzzq5Md1528GVadkXjdD8le1i4GtRNH1A44UJmvMf6bu355J84tmQ7+I0xx8XkPnI8u9+xEg=="}],"memo":""},"blockNum":"812"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"qVXET+xTbu2SNSPx6QcWxwCPHgeUziMXbUQdO2OcJZod+hGlF8rw5lkBJ19xOzf3kZ7zqUiPet30rFYYpPVMuw=="}],"memo":""},"blockNum":"814"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","to_address":"g1k8p7x84gjcy0recfkzvfgljxyyxdlgu02y6w50","amount":"309999999ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al7LV/X++mUIljzenR1OaxKfue7hfo6UsvOhGCdDtiid"},"signature":"wdYl4sqd3JHZhNMwuM/I8kKs56xdfaNnDNL31i8kqYx4DPgAIAqB1cypHq7E2ABPRhaCCYYMEmDpbBPXpe+mog=="}],"memo":""},"blockNum":"817"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"x7+8o/SJLf8Yo3R1tMXsraulmVyZmiuUeaIkf34+nYcdJKtMrp3Q+GJc8RJrJnifOeQjbpUQ0U473OvgzpDZUA=="}],"memo":""},"blockNum":"819"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","to_address":"g1k8p7x84gjcy0recfkzvfgljxyyxdlgu02y6w50","amount":"309999999ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al7LV/X++mUIljzenR1OaxKfue7hfo6UsvOhGCdDtiid"},"signature":"OkCkxcPR0wiJw7PnLfGPG8ZXrEpkDgIUagsXXmWycTsoI3y7je8mJmkih3raNt1P2AFhzSZ8Q+SkIVzrEqgjYg=="}],"memo":""},"blockNum":"821"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"+BW1Q/4mH0E6hdPjek1HdurmwTA7Kxrh2XJymC7dRUoc8yiOXFc/E8AzJ1wckwzbAxvC+Gb3TOpcM+d6QLjYww=="}],"memo":""},"blockNum":"823"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","to_address":"g1k8p7x84gjcy0recfkzvfgljxyyxdlgu02y6w50","amount":"309999999ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al7LV/X++mUIljzenR1OaxKfue7hfo6UsvOhGCdDtiid"},"signature":"0P+LNlS4Z9GAUldWveUrURv9Cv5Cjta4qytD5tqQ6BtU94QXzZ2NGS+sfCBbnpw2vI3UJ4pcKFgZYjv86MJdew=="}],"memo":""},"blockNum":"825"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"6MzhbCwC2BKXG85j7S6CWM20vY6tPrSgV9L6zpcjfqAk2SZTEVyKSFRyyQhmuwYxQ63B98uOhDpi4TnAI3bRVA=="}],"memo":""},"blockNum":"827"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","to_address":"g1k8p7x84gjcy0recfkzvfgljxyyxdlgu02y6w50","amount":"309999999ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al7LV/X++mUIljzenR1OaxKfue7hfo6UsvOhGCdDtiid"},"signature":"e2cXnIqcOltF/GAGj5hKXtgoGdkJxTHD9h5SEYe+O/hyAFFVnz8MFt8Ll8wr+J3FwBV8IrLU4fAtaE0qxx4joA=="}],"memo":""},"blockNum":"829"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"6nWrOjJEYjcgqWEuVMfZATD0budBm2Wdet7pcHcJ/exjQ9CTQeIQ+NYSWumAMbbyFvwzNDjp7KhbuYaj1DwXgg=="}],"memo":""},"blockNum":"831"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","to_address":"g1k8p7x84gjcy0recfkzvfgljxyyxdlgu02y6w50","amount":"309999999ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al7LV/X++mUIljzenR1OaxKfue7hfo6UsvOhGCdDtiid"},"signature":"T0UYMNvUVeR/sIeAKJjYmio+QIyl5AY7cMod/u1Wfcpj1sBPl/oNoEVRvcRqr2UUsm/w5TlY7D2ICkRbsuB/JQ=="}],"memo":""},"blockNum":"833"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ePuF+Y6QPrtJvICqvQ/SqcEv1TlVTOla3sDLJwzWUA06W8AEtwULtIwKK4LbuBflc8TZsAuIqABa+BLdbD8AEg=="}],"memo":""},"blockNum":"835"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","to_address":"g1k8p7x84gjcy0recfkzvfgljxyyxdlgu02y6w50","amount":"309999999ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al7LV/X++mUIljzenR1OaxKfue7hfo6UsvOhGCdDtiid"},"signature":"K8Z6XtCVIxgNVmEFMEiHRSn9y9oTrVjbvtdTrq/kjBobSKTYXxo57ftxtbk10OefqSsL5ftiApLNlolDyBDfwg=="}],"memo":""},"blockNum":"837"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"OzoERATYNrK84OeLHkS9zgZc7fQNCS5jKrE3PbhpiF1TtcltqxC3Cxo1+JyJwrpzysMTeCuFW3jamMWcp3j33A=="}],"memo":""},"blockNum":"839"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","to_address":"g1k8p7x84gjcy0recfkzvfgljxyyxdlgu02y6w50","amount":"309999999ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al7LV/X++mUIljzenR1OaxKfue7hfo6UsvOhGCdDtiid"},"signature":"7jscr4UDj3lH5RB4QXjSDAD0CSoasklIkdnenkYiVyN48EUx32fx1mhqGf+kB2XqeK8LBhnA7Nhvhfgx7w4FQg=="}],"memo":""},"blockNum":"841"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"os1AXjaXqK5gcRciQWidXQzwNzL74ijn3vkcx3OospkJ50l2zf08rLJwMsz0JBbVJ+vFBjEi3IqCCYKK7mhyug=="}],"memo":""},"blockNum":"843"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModAddPost","args":["intro","Intro to Gnoland - The Smart Contract Platform to Improve Our Understanding of the World","\n_Welcome to Gno.land. This is the official site to learn about the Gnolang (Gno) programming language and the Gno.land smart contract platform, as well as understand the motivations behind Gno and our core values and mission. We’re starting a series of blog posts and holding regular community calls and AMAs so that you can stay up to date with upcoming developments and dive deeper into the Gno World Order. Stay tuned._\n\n## What Is Gno.land?\n\nGno.land (pronounced no-land) is a layer 1 smart contract platform invented by Jae Kwon, co-founder of Cosmos and Tendermint, to address multiple issues in the blockchain space — in particular, the ease of use and intuitiveness of smart contract programming platforms. Beyond offering succinctness, composability, expressivity, and completeness not found in any other smart contract platform, we aim to challenge the regime of information censorship that we find ourselves living in today.\n\nBy using the programming language Gnolang (Gno), an interpreted version of the widely-used Golang (Go) language, using a state-of-the-art VM written in Go, we want to lower the barrier to entry to web3 and make it simple for developers (particularly existing web2 developers) to write smart contracts and other blockchain applications without having to learn a programming language that is limited by design or exclusive to a single blockchain ecosystem.\n\n### Gnolang (Gno) Is Essential to Broader Adoption of Web3\n\nFor web3 to grow in a sustainable way, we need technological solutions that are designed for the blockchain with programming languages that are universally adopted, secure, composable, and complete. The main programming language currently used for creating smart contracts, Solidity, is designed for one purpose only (writing smart contracts) and lacks the completeness of a general-purpose language.\n\nSolidity removes many of the complexities that blockchain programming requires (such as memory management, ensuring that the code is deterministic, and understanding how the entire tech stack is implemented) allowing developers to quickly build succinct smart contracts. However, Solidity is only used for smart contracts on EVM-compatible blockchains (like Ethereum, Polygon, or EVMOS) and its design is limited by the limitations of the EVM. In addition, developers have to learn several languages if they want to understand the whole stack or work across different ecosystems.\n\nGo, on the other hand, is a well-designed complete programming language with its foundation based on composable structures, designed by the creators of Plan 9. This allows developers to rapidly accelerate application development and adopt a modular structure by reusing and reassembling existing modules without building from scratch. They can embed one structure inside another in an intuitive way while preserving localism, and the language specification is simple, successfully balancing practicality and minimalism.\n\nGo is widely used, especially among existing web2 developers. It’s easier to learn and can be used to program almost anything, such as GoEthereum or Tendermint. Every part of the Gno.land stack is written in Go so that one person can understand the entire system just by studying a relatively small code base. The Go language is so well designed that the Gnolang smart contract system will become the new gold standard for smart contract development and other blockchain (and even non-blockchain) applications.\n\n### Security Is a Built-in Feature of Go (Golang)\n\nBeyond object embedding, closures, importing of modules, composability of programs, and interfaces that allow you to implement a specific set of functions, Go supports secure programming through exported/non-exported fields, enabling “least-authority” design. It is easy to create objects and APIs that expose only what should be accessible to callers while hiding what should not be simply by the capitalization of letters, thus allowing a succinct representation of secure logic that can be called by multiple users.\n\nAnother major advantage of Go is that the language comes with an ecosystem of great tooling, like the compiler and third-party tools that statically analyze code. Gno inherits these advantages from Go directly to create a smart contract programming language that is safe and helps developers to write secure code relying on the compiler, parser, and interpreter to give warning alerts for common mistakes.\n\n### How Gnolang (Gno) Differs from Golang (Go)\n\n[![Go and Gno](https://gnolang.github.io/blog/2022-11-21_intro/thumbs/go-and-gno.png)](https://gnolang.github.io/blog/2022-11-21_intro/go-and-gno.png)\n\n_Image 1: Gnolang - Like Go but specific to the blockchain_\n\nGno is around 99% identical to Go and most people can code in Gno from day one, even minute one. The Gno.land programming environment comes with blockchain-specific standard libraries, but any code that doesn’t use the blockchain-specific logic can run in Go with minimal processing. On the other hand, some libraries that don’t make sense in the blockchain context are not available in the Gno.land programming environment, such as network or operating-system access.\n\nOtherwise, Gno loads and uses many standard libraries that power Go, so most of the parsing of the source code is the same. Under the hood, the Gno code is parsed into an abstract syntax tree (AST) and the AST itself is used in the interpreter, rather than byte code as in many virtual machines such as Java, Python, or WASM. This makes even the Gno VM accessible to any Go programmer. The novel design of the Gno VM interpreter allows  Gno to freeze and resume the program by persisting and loading the entire memory state. This allows (smart contract) programs to be succinct, as the programmer doesn’t have to serialize and deserialize objects to persist them into a database (unlike programming applications with the Cosmos SDK).\n\nThe composable nature of Go/Gno allows for type-checked interactions between contracts, making Gno.land safer and more powerful, as well as operationally cheaper and faster. Smart contracts on Gno.land will be light, simple, more focused, and easily interoperable — a network of interconnected contracts rather than siloed monoliths that limit interactions with other contracts.\n\n[![Gnolang code example](https://gnolang.github.io/blog/2022-11-21_intro/thumbs/code-example.jpg)](https://gnolang.github.io/blog/2022-11-21_intro/code-example.jpg)\n\n_Image 2: Code snippet from the Gno programming language_\n\nToday, Gno.land is the only blockchain instance in the world that supports Gno but tomorrow, there will be many chains with different names such as mydapp.zone, or mydao.xyz. Gno.land is the name of ONE chain and is not a name that will be used by other Gnolang-powered chains. Gno.land will remain a minimal hub with three main utilities:\n\n* Managing cross-Gnolang-chain fees/licenses\n* To be the (or an) official home for the best smart contracts\n* To provide new models of governance (w/ DAO modules)\n\n### Earning Rewards Through Proof-of-Contribution (PoC)\n\nThere are four main ways to earn rewards through PoC on the Gno.land chain:\n\n* Pre-defined tasks (technical or otherwise)\n* Pre-defined bounties\n* Retroactive bounties\n* Vesting-style rewards for core members\n\nBounties rewards (both pre-defined and retroactive) will be decided with “local rules,” through the agreement of the DAO with everything on-chain and transparent. If one human were to abuse the system, it would trigger and the bad actor would be slashed. We’ll go into depth on how you can earn rewards in an upcoming post.\n\n### Durable Solutions to Improve Our Understanding of the World\n\nOne of our inspirations for the Gno.land project is the gospels, which built a system of moral code that lasted for thousands of years. Part of Gno.land’s endurance will be having a minimal production implementation that becomes a reference for other implementations and a basis for education to elevate people's understanding of blockchains.\n\nGno.land aims to appeal to web developers, dApp developers, and blockchain builders to create solutions that help people improve their understanding of the world. With the barrage of misinformation delivered today from various factions, it’s impossible to separate the real from the fake. This causes a state of gridlock. We are living in a regime of information censorship spanning all important topics from climate change to global pandemics — a vast coordinated effort to prevent people from understanding the truth.\n\nBy just browsing Reddit, searching with Google, and scrolling through Facebook, Twitter, or Instagram, people are deliberately being [misled](https://twitter.com/lhfang/status/1587095890983936000) about key global issues that we all deserve clarity on. This is as malevolent as any type of censorship regime in the world — and we need to come together to challenge it and break the wall of censorship to achieve a functional democracy at last.\n\n### Gno.land’s Current Phase of Development\n\nGno.land is currently running in its third testnet and there will be several more testnets before the platform is production ready. Modern civilization wasn’t built in a day, and neither will Gno.land rush into committing to an exact launch date. However, the next development, an incentivized testnet called ‘Game of Realms’, is scheduled for Q1 2023.\n\nGame of Realms will be similar to ‘Game of Stakes’ on the Cosmos Hub and will reward the earliest and best contributors. If you would like to find out more about Game of Realms, Gno.land, Gnolang, or anything else,  join us for our first community call with Gno.land Founder, Jae Kwon on November 22nd, at 4pm UTC on our [Discord channel](https://discord.gg/YFtMjWwUN7). We look forward to seeing you.\n","gnoland,gnosh,gnot,permissionless,consensus,proof-of-contribution,dao,governance,ibc,democracy,freedom"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"MWYrrK1+qkmN8CkgYhXtyY3ZM+0rWcS2wlu7ShhOvOgUlWCUteSrSV0eUmJkzMfc1Ey3twLT+Uj9yA+RnstIog=="}],"memo":"from gnoblog-cli"},"blockNum":"3068"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModAddPost","args":["intro","Intro to Gnoland - The Smart Contract Platform to Improve Our Understanding of the World","\n_Welcome to Gno.land. This is the official site to learn about the Gnolang (Gno) programming language and the Gno.land smart contract platform, as well as understand the motivations behind Gno and our core values and mission. We’re starting a series of blog posts and holding regular community calls and AMAs so that you can stay up to date with upcoming developments and dive deeper into the Gno World Order. Stay tuned._\n\n## What Is Gno.land?\n\nGno.land (pronounced no-land) is a layer 1 smart contract platform invented by Jae Kwon, co-founder of Cosmos and Tendermint, to address multiple issues in the blockchain space — in particular, the ease of use and intuitiveness of smart contract programming platforms. Beyond offering succinctness, composability, expressivity, and completeness not found in any other smart contract platform, we aim to challenge the regime of information censorship that we find ourselves living in today.\n\nBy using the programming language Gnolang (Gno), an interpreted version of the widely-used Golang (Go) language, using a state-of-the-art VM written in Go, we want to lower the barrier to entry to web3 and make it simple for developers (particularly existing web2 developers) to write smart contracts and other blockchain applications without having to learn a programming language that is limited by design or exclusive to a single blockchain ecosystem.\n\n### Gnolang (Gno) Is Essential to Broader Adoption of Web3\n\nFor web3 to grow in a sustainable way, we need technological solutions that are designed for the blockchain with programming languages that are universally adopted, secure, composable, and complete. The main programming language currently used for creating smart contracts, Solidity, is designed for one purpose only (writing smart contracts) and lacks the completeness of a general-purpose language.\n\nSolidity removes many of the complexities that blockchain programming requires (such as memory management, ensuring that the code is deterministic, and understanding how the entire tech stack is implemented) allowing developers to quickly build succinct smart contracts. However, Solidity is only used for smart contracts on EVM-compatible blockchains (like Ethereum, Polygon, or EVMOS) and its design is limited by the limitations of the EVM. In addition, developers have to learn several languages if they want to understand the whole stack or work across different ecosystems.\n\nGo, on the other hand, is a well-designed complete programming language with its foundation based on composable structures, designed by the creators of Plan 9. This allows developers to rapidly accelerate application development and adopt a modular structure by reusing and reassembling existing modules without building from scratch. They can embed one structure inside another in an intuitive way while preserving localism, and the language specification is simple, successfully balancing practicality and minimalism.\n\nGo is widely used, especially among existing web2 developers. It’s easier to learn and can be used to program almost anything, such as GoEthereum or Tendermint. Every part of the Gno.land stack is written in Go so that one person can understand the entire system just by studying a relatively small code base. The Go language is so well designed that the Gnolang smart contract system will become the new gold standard for smart contract development and other blockchain (and even non-blockchain) applications.\n\n### Security Is a Built-in Feature of Go (Golang)\n\nBeyond object embedding, closures, importing of modules, composability of programs, and interfaces that allow you to implement a specific set of functions, Go supports secure programming through exported/non-exported fields, enabling “least-authority” design. It is easy to create objects and APIs that expose only what should be accessible to callers while hiding what should not be simply by the capitalization of letters, thus allowing a succinct representation of secure logic that can be called by multiple users.\n\nAnother major advantage of Go is that the language comes with an ecosystem of great tooling, like the compiler and third-party tools that statically analyze code. Gno inherits these advantages from Go directly to create a smart contract programming language that is safe and helps developers to write secure code relying on the compiler, parser, and interpreter to give warning alerts for common mistakes.\n\n### How Gnolang (Gno) Differs from Golang (Go)\n\n[![Go and Gno](https://gnolang.github.io/blog/2022-11-21_intro/thumbs/go-and-gno.png)](https://gnolang.github.io/blog/2022-11-21_intro/go-and-gno.png)\n\n_Image 1: Gnolang - Like Go but specific to the blockchain_\n\nGno is around 99% identical to Go and most people can code in Gno from day one, even minute one. The Gno.land programming environment comes with blockchain-specific standard libraries, but any code that doesn’t use the blockchain-specific logic can run in Go with minimal processing. On the other hand, some libraries that don’t make sense in the blockchain context are not available in the Gno.land programming environment, such as network or operating-system access.\n\nOtherwise, Gno loads and uses many standard libraries that power Go, so most of the parsing of the source code is the same. Under the hood, the Gno code is parsed into an abstract syntax tree (AST) and the AST itself is used in the interpreter, rather than byte code as in many virtual machines such as Java, Python, or WASM. This makes even the Gno VM accessible to any Go programmer. The novel design of the Gno VM interpreter allows  Gno to freeze and resume the program by persisting and loading the entire memory state. This allows (smart contract) programs to be succinct, as the programmer doesn’t have to serialize and deserialize objects to persist them into a database (unlike programming applications with the Cosmos SDK).\n\nThe composable nature of Go/Gno allows for type-checked interactions between contracts, making Gno.land safer and more powerful, as well as operationally cheaper and faster. Smart contracts on Gno.land will be light, simple, more focused, and easily interoperable — a network of interconnected contracts rather than siloed monoliths that limit interactions with other contracts.\n\n[![Gnolang code example](https://gnolang.github.io/blog/2022-11-21_intro/thumbs/code-example.jpg)](https://gnolang.github.io/blog/2022-11-21_intro/code-example.jpg)\n\n_Image 2: Code snippet from the Gno programming language_\n\nToday, Gno.land is the only blockchain instance in the world that supports Gno but tomorrow, there will be many chains with different names such as mydapp.zone, or mydao.xyz. Gno.land is the name of ONE chain and is not a name that will be used by other Gnolang-powered chains. Gno.land will remain a minimal hub with three main utilities:\n\n* Managing cross-Gnolang-chain fees/licenses\n* To be the (or an) official home for the best smart contracts\n* To provide new models of governance (w/ DAO modules)\n\n### Earning Rewards Through Proof-of-Contribution (PoC)\n\nThere are four main ways to earn rewards through PoC on the Gno.land chain:\n\n* Pre-defined tasks (technical or otherwise)\n* Pre-defined bounties\n* Retroactive bounties\n* Vesting-style rewards for core members\n\nBounties rewards (both pre-defined and retroactive) will be decided with “local rules,” through the agreement of the DAO with everything on-chain and transparent. If one human were to abuse the system, it would trigger and the bad actor would be slashed. We’ll go into depth on how you can earn rewards in an upcoming post.\n\n### Durable Solutions to Improve Our Understanding of the World\n\nOne of our inspirations for the Gno.land project is the gospels, which built a system of moral code that lasted for thousands of years. Part of Gno.land’s endurance will be having a minimal production implementation that becomes a reference for other implementations and a basis for education to elevate people's understanding of blockchains.\n\nGno.land aims to appeal to web developers, dApp developers, and blockchain builders to create solutions that help people improve their understanding of the world. With the barrage of misinformation delivered today from various factions, it’s impossible to separate the real from the fake. This causes a state of gridlock. We are living in a regime of information censorship spanning all important topics from climate change to global pandemics — a vast coordinated effort to prevent people from understanding the truth.\n\nBy just browsing Reddit, searching with Google, and scrolling through Facebook, Twitter, or Instagram, people are deliberately being [misled](https://twitter.com/lhfang/status/1587095890983936000) about key global issues that we all deserve clarity on. This is as malevolent as any type of censorship regime in the world — and we need to come together to challenge it and break the wall of censorship to achieve a functional democracy at last.\n\n### Gno.land’s Current Phase of Development\n\nGno.land is currently running in its third testnet and there will be several more testnets before the platform is production ready. Modern civilization wasn’t built in a day, and neither will Gno.land rush into committing to an exact launch date. However, the next development, an incentivized testnet called ‘Game of Realms’, is scheduled for Q1 2023.\n\nGame of Realms will be similar to ‘Game of Stakes’ on the Cosmos Hub and will reward the earliest and best contributors. If you would like to find out more about Game of Realms, Gno.land, Gnolang, or anything else,  join us for our first community call with Gno.land Founder, Jae Kwon on November 22nd, at 4pm UTC on our [Discord channel](https://discord.gg/YFtMjWwUN7). We look forward to seeing you.\n","gnoland,gnosh,gnot,permissionless,consensus,proof-of-contribution,dao,governance,ibc,democracy,freedom"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"FGgMyw6i4we/r/UsoK2ym9jDR5tZl6D+x7ecFTz+1m8JL2mkHrpJLznCwLM52sPtXWJ1Bo2QXO4EZ4MOwnLHvQ=="}],"memo":"from gnoblog-cli"},"blockNum":"3070"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModAddPost","args":["tech-ama1","Gno.land Community Technical AMA #1 - Recap","\nYour questions, observations, and feedback are vital to our core development team. Not only do they give us an understanding of the types of applications and features the community would like to see but they help us formulate better ideas for developing Gno.land as we go. Before we dive into our second **Discord AMA on November 22nd @4pm UTC**, check out the community questions from our first technical AMA below answered by core Gno.land devs Jae Kwon and Manfred Touron.\n\n### Why did you choose Golang over Rust?\n\n**Jae**: “With parallelism offered by ICS1 [Interchain Security 1], the bottleneck becomes speed of innovation with safe code, rather than bare metal performance. So here, garbage collection, concurrency, embeddable structures, and clear spec are good primitives for the next-generation smart contract language.\n\nRust (or components of Rust** may be used to implement faster clients for gno.land in the future, but in terms of mindshare, I don't think Rust can flip Go due to its design choices. That's not to say that Rust is any worse than Go; they are different.”\n\n### Will Gno be its own hub? Will Gno provide ICS-like security to its own community?\n\n**Jae**: “Gno.land can be a \"hub,\" like \"git hub\" is a \"hub,\" but that doesn't mean it will offer ICS. If other chains solve ICS1 better, it makes sense for gno.land to be IBC-connected to zones that are not ICS1 replicated/secured with gno.land validators.\n\nIf we consider that validators of gno.land are better as contributors to the gno.land ecosystem (rather than general validator service providers** we may be more comfortable contributing to an awesome ecosystem but not entering the validator-as-a-service business.\n\nIt makes more sense to me that Cosmos Hub validators should own that business, which will eventually require validators to run their own server stacks and have data center infrastructure.”\n\n### How can one become a validator?\n\n**Jae**: “First, one has to become a member. We have not yet defined the full member system, but we will figure that out along the way. For now, we can say that we want first and foremost members who also validate, rather than impartial validators that only validate.”\n\n### How does Gno validate work? PoS? Proof of Contribution?\n\n**Manfred**: “The contributors DAO will elect validators and validators will have the same amount of power. They'll be focused on validating and will receive rewards for that job.”\n\n### What is Proof of Contribution? What kind of contribution will be credited?\n\n**Manfred**: “Proof-of-Contribution is a way to replace Proof-of-Stake with a metric based on the contributions. It's a variation of Proof-of-Authority where the authority is a DAO of contributors. After the 'Game of Realms** competition, we'll reward the best contributors with a tiered membership in the first version of Proof-of-Contributions DAO. The voting power and everything related to staking will be distributed across the contributors.\n\nLater, we'll add more flexibility to the membership with $GNOSH, allowing more accurate and fair rewards. Validators won't receive voting power with staking. The DAO will elect them, and they will all receive the same amount of power. Validators will receive rewards for their technical work, not for the amount of staked tokens they are bound to.”\n\n### Is there a document or resource that describes the key concepts in a Gno smart contract?\n\n**Manfred**: “We have yet to get a single top-level documentation, sorry. You can find documentation in the code, README files, issues, etc. We need to improve this. The community will be able to work on this during Game of Realms.”\n\n### Is there a big-picture diagram of the ecosystem?\n\n**Jae**: cosmos hub \u003c-- \"ec2+DTCC\"\ngno.land \u003c-- \"github for gno\"\n(cosmos hub etc) ICS zones \u003c-- \"holy grail\" scalable smart contracts\nyour chain \u003c-- \"gno inside\"\nyour app \u003c-- \"import gno.land/...\"\nblockchain-based communications/coordination/discourse platform \u003c-- us\n// DTCC: \"https://www.investopedia.com/terms/d/dtcc.asp\" // my point is, be a good reliable token hub with good governance.”\n\n### I'm a developer (PHP, Python**. How can I become a Gno developer? Please advise me on where to start.\n\n**Manfred**: “Start learning Go! One of the long-term goals of Gno is to make writing contracts as easy as writing web2 apps. The language is already strong in that direction, but we still need to catch tooling, documentation, tutorials, and language improvements. You need to have a good level with Golang and be autonomous to start building on Gno.\n\nOne of the Game of Realms tracks will be to work on everything related to onboarding more people. This will be the best place to write specific tutorials to onboard people from other ecosystems or languages.”\n\nWhat are Realms, and what is r board?\n\n**Jae**: “A realm is a Gno package with state, that represents a smart contract with storage and coins. The other Gno packages don't have state, and so are \"pure\" packages that can be imported from other realm or non-realm packages. Like land-tax, realms must be whitelisted or pay storage upkeep for their state. You can create new realms by uploading a new package with the package directory starting with /r/REALM/NAME.\n\n/r/demo/boards is a Gno package that renders a message board. It is a proof of concept message board written in Gno. Since we need to preserve messages, it is a stateful (realm** package. You can see the files of the demo boards, like:\n\nhttps://test3.gno.land/r/demo/boards/board.gno\n\n### How do external packages get imported?\n\n**Manfred**: “Example: when you call your smart contract from Go during testing, how can/should that smart contract load external packages?\n\nA gnolang can only import other gnolang contracts/libraries that were published on-chain. If you want to import an external Golang library, you need to port it to Gno, and publish it as a library, then you can import it from a top-level contract.\n\ngnodev test is an exception, it basically creates an in-memory Gnolang VM, publishes the dependencies (automatically detected**, and executes the test. The tool can act differently from the real on-chain experience. Note that we'll improve the gnodev so it can automatically download on-chain contracts or use custom local paths, to support advanced development workflows.”\n\n### What is a Gnode?\n\n**Jae**: “I don't like the name \"Gnode\" because it's too generic, but the idea is to build Gno-based building blocks for GnoDAOs, as MyGnode embeds components (of owners, treasury, board, etc.** here:\n\nhttps://github.com/gnolang/gno/commit/b9128b1d69f02dbb49be883e0c70fe9d3fc40dcc\n\n**Manfred**: “We can change the name 🙂. A Gnode is a DAO implementation that implements an interface allowing them to interact. A Gnode can have a parent and have children. Top-down interactions may be funding, grants, and approvals. Bottom-up interactions may be reporting or voting. The implementation is flexible. You can have DAOs managing a Gnode, its treasury, and voting the cross-Gnode interactions. You can have Gnodes with an elected leader or one driven by a bot or another blockchain. One of the goals of Game of Realms will be to propose various implementations of Gnodes.\n\nAt the level of Gnoland, we will probably have a top-level Gnoland Gnode managing a global treasury and vision. Then various technical and non-technical child Gnodes manage subsets of the treasury and their tasks. They may also have children. With IBC2, Gnodes could be distributed across different chains.”\n\n### What is the timeline for IBC2?\n\n**Jae**: “After the launch of gno.land, IBC2 is permissionless innovation anyone can try for, so I imagine not long after that. After initial implementations, I bet we will want to tweak/optimize the Merkle tree further, but this can come after IBC2 demos.”\n\n### Can you tell us more about Game of Realms?\n\n**Manfred**: “Game of Realms is a competition to build the first contracts of Gnoland and experiment with proof of contributions. The first step of the competition will be to build the missing tools for the second step. So people will compete to write the DAO that will review the other contributions and allocate points.\n\nThe rest of the competition will be about competing to write the best contracts for well-known categories or make non-technical contributions. At the end, we'll have strong foundations (libraries, rules, tutorials, dApps** to help upcoming builders to start in better conditions. The best contributors will earn rewards and membership in the future DAO of contributors that will co-own the chain.\n\nWe'll have the first version of a Proof-of-Contributions-based DAO of contributors. Focus on one of the official tracks: build a contract suite to compete with Cosmos' governance module to eventually complete Cosmos Hub governance. Realm boards are basic discussion contracts that can be used for discussions, and be extended for governance, launchpad, or other things mixing discussions and DAO actions.”\n\n### Is it possible to build code with gno.land directly online?\n\n**Jae**: “We will make the sandbox staging.gno.land environment easy to access, and that will be preferable to testing on gno.land directly. The gno codebase tries to remain minimal so it shouldn't be difficult to run it locally.”\n\n**Manfred**: “I've seen people writing contracts from VSCode on an online VSCode instance. Someone could create a VSCode template configured to communicate with staging by default with a dummy wallet containing tokens.”\n\n### Is there a plan to be able to use the Gno VM with a Cosmos SDK-based chain?\n\n**Manfred**: “This is one of the plans, yes. And not only on Cosmos SDK. But we don't have a clear plan about how it will happen yet.”\n\n### How about interoperability?\n\n**Jae**: “Regarding interoperability, will it be between Gno chains, with Cosmos, or with more chains outside of Cosmos? If it is with chains outside of Cosmos, which ones, in the short and long term? I think if the latter were to come to pass, the world of web3 and NFT could be awesome. Short run, Cosmos SDK-based chains with IBC1 for code import and cross-chain smart contract calls; but with IBC2/Gno it's really up to the smart contract logic.”\n\n### Are Gno.land tokenomics deflationary?\n\n**Jae**: “There will be $GNOT, and this token will be used for spam prevention fee payment, and it will be deflationary. Previously, we discussed $GNOSH as a secondary token, but we have moved away from the $GNOT/$GNOSH model and will keep $GNOT while making gno.land more about membership among levels of peers.\n\nI think we need an alternative to the Cosmos Hub that is more people-centric than stake-centric, and where alignment is not bought or sold but depends on contributions and value alignment proven over time. The hope is that by moving away from a pure tokenomics perspective and moving into the realm of politics and ethics along with general economics we can curate a different kind of culture.”\n\n### Are there any collaborations with other projects to build on Gno?\n\n**Jae**: “Yes, why don't we make this truly open, in the style of free software, so that we can build upon a common VM design? The only thing I want to retain control over for a temporary duration of time is the regulation of trademarks, like \"gno\", \"gno**\", \"*gno\" (but you can use the license to fork this project however you want); and we want proper attribution, but the AGPL fork license suggests how we can work together collaboratively.\n\nThe GNO VM can be used on any chain if it follows the AGPL style license, which we are calling the \"Gno GPL\". Blockchains can still be composed of components licensed with compatible open source software. We can collaborate indirectly by working and contributing to the same codebase, and know that the code we are building together will always be available for you to use for your chain, as long as it remains and is offered as GNO free software.\n\nSo anyone can build GNO smart contracts into their chain for free, according to the license we are deriving from the GNU (not GNO** AGPL license. You don't have to pay gno.land or anyone if the license is followed. Example: we will collaborate with the Cosmos Hub and Cosmos/ATOM community to offer gno DAOs to be hosted by ICS1, and help bring collaboration tools for Cosmos. So this is how gno works with Cosmos Hub assuming ICS1 is solved. As for gno.land, we can start off with an independent gno instance for the Cosmos Hub's gno shards, and later allow the IBC importing of vetted code from gno.land/*.”\n\n### Apart from Adena, are there any plans for another wallet?\n\nJae: “I think what we need are a few competing base implementations that best leverage the framework they build upon, rather react or minimal vue; and to create common core libraries along the way if reasonable. But there ought to be more than one approach for such a key component, with special care taken into consideration for security. Like, I don't agree with Keplr asking so easily for a 12/24-word mnemonic, even if the implementation is secure, it is going to become a problem. PSA btw.”\n\n### Wen mainnet?\n\n**Jae**: “Some time by Q2 next year would be good. But as policy, we can't commit to a date, because everything has to be ready first before the official launch. Our thesis is that having the DAO with sub-DAOs will allow us to reach the end result in a faster way via some form of parallelism. First, we need DAOs to assess new code, and better UX for managing something like upgrades to the Cosmos Hub. Once we have the DAO running on testx.gno.land, for some x \u003e 4, and we have checked all vital TODOs, we will know that we are ready for \"mainnet.\"\n\n_Do you have more questions for Manfred or Jae? Would you like to know more about Gno.land, Gnolang, Game of Realms, or ways to contribute to our growing ecosystem? Drop us a question on Discord and be sure to join us for our second **AMA on December 6th @4pm UTC.**_\n","gnoland,gnosh,gnot,permissionless,consensus,proof-of-contribution,dao,governance,ibc,democracy,freedom"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"1CJ8k6kmoV1m0RihScFhojhB4spNYv0WWz9I757zuaJUSIzkYsfOGr74i01hGZjbGFVpE/Y829mqudViQdOt7w=="}],"memo":"from gnoblog-cli"},"blockNum":"3072"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModAddPost","args":["gor-launch","Game of Realms Is On: Win Rewards for Contributing to Gno.land","\nPhase one of Game of Realms, a worldwide competition to build the best Gnolang smart contracts, **is now open**. Game of Realms is a high-stakes contest with a total prize pool of **133,700 ATOM** that will see participants compete for tiered membership to co-own the Gno.land blockchain, the next-generation smart contract platform that uses the Gnolang (Gno) programming language. A series of complex technical and non-technical tasks will challenge contributors to create innovative patterns that push the chain to new limits. If you’re interested in helping build the most intuitive smart contract platform in web3—while gaining rewards for your contribution—join today by opening a [PR here](https://github.com/gnolang/gno).\n\nThe Game of Realms contest will allow participants to get a feel for the Gno.land platform while building smart contracts and applications in the ecosystem. It will take place in two stages, phase one and phase two. Phase one is about building the core infrastructure, tools, and tutorials necessary to open the gates to broader participation and will be held off-chain. Phase two, on the other hand, will take place after the successful completion of phase one and be held on-chain, where contributors will build smart contracts on the platform.\n\nIn addition to the ATOM prize pool, the best contributors will also be awarded (mostly) initial-level membership to govern the upcoming mainnet. Membership will be allocated according to the quality and extensiveness of the contribution—the higher the quality, the higher the tier, and the greater the voting rights and rewards. The top equal members will be composed of peers who have contributed the most to the ecosystem and have an understanding of its core components. Top members will also have aligned core moral values. This is essential so that members can maintain the chain together according to its Constitution (TBD** and ultimately create a sustainable ecosystem that rewards all valuable contributions.\n\n## Game of Realms - Phase One (Off-Chain)\n\nWhile we aim to encourage cross-collaboration between devs and non-techs, phase one of the contest is recommended for advanced developers who are more autonomous and can contribute with limited guidelines and support. Accounting for around one-third of the total **133,700 ATOM** prize pool, getting a headstart in phase one will allow seasoned devs to kick the tires on the Gno.land platform, contribute with limited competition, and build the tools needed to open the second phase.\n\nDuring phase one, participants will open PRs against repos from the Gnolang organization. Phase one contributors will be expected to document and share their work efficiently to enable others to use it without conflicts. Your contribution is vital to the success of the contest, the Gno.land platform, and the Cosmos ecosystem at large, especially now, with discussions to move the Cosmos Hub’s core operations on-chain by establishing a DAO system.\n\nThe first DAO to be created will be the [Decentralists DAO](https://github.com/decentralists/DAO), which will provide Cosmonauts with transparency, accountability, and decentralization. The Decentralists DAO will improve discourse, organization management, development, and conflict resolution through smart contracts, and will organize itself into a set of tightly-aligned sub-DAOs dedicated to specific topics, such as engineering and funding.\n\nSo, how does this relate to Game of Realms and what type of contributions are judges looking for? Here are some examples, in order of priority:\n\n* **Define and Implement an Evaluation DAO:** For the Game of Realms contest, a sub-DAO – the Evaluation DAO – is needed to evaluate contributions during phase two and attribute rewards accordingly. Using a DAO will allow community members to vote on the best contributions for the platform. Implementation of the Evaluation DAO is the only step that must be approved by the core team because of its key role in the competition and the future of the platform. Once the DAO is in place, all previous and further contributions will be reviewed collectively by DAO members.\n\n* **Create Tutorials to Onboard More Participants:** We need experienced devs to write or record tutorials to help more people get started during phase two of the competition (and beyond) and to help grow the Gno.land developer community. These tutorials can include topics like interacting with the chain from the CLI, step-by-step guides to creating smart contracts in Gno, tips for running a local dev environment, fast prototyping with gnodev, or they can be tutorials dedicated to certain audiences, such as developers coming from Solidity or web2. All tutorials should be added to the [awesome-gno GitHub repo](https://github.com/gnolang/awesome-gno).\n\n* **Define and Implement a Governance Contract Suite:** In this challenge, developers will be expected to define and implement a governance contract suite capable of competing with existing chains’ governance modules. If you think you can improve the governance system of Cosmos Hub, this is your chance to show us how!\n\nPhase one challenges will stay open during phase two. No competition points will be attributed during this phase as the points will be retro-funded by the DAO and awarded during phase two.\n\n## Game of Realms - Phase Two (On-Chain)\n\nPhase two of Game of Realms will onboard more people to the platform and begin as soon as sufficient materials are completed from phase one. Accounting for around two-thirds of the total 133,700 ATOM prize pool, phase two will be open to both developers and non-technicals who can follow tutorials, create smart contracts, or provide other important contributions to win rewards and scale the platform. As phase two will be held directly on-chain, contributors can submit their contributions to the DAO without publishing them on the main GitHub repo. However, we strongly encourage you to use GitHub as it’s an important resource that helps the community gain a better understanding through specific examples.\n\n_We are currently preparing the challenges for participants of phase two and are looking for your input. Let us know what type of smart contracts you would like to see (minimal or with multiple features) in our upcoming Game of Realms AMA on Tuesday, January 24 at 4 pm UTC. Note that this is a text based AMA so make sure to add your questions before or during the AMA in the #AMA-questions channel on the [Gno.land discord](https://discord.gg/S8nKUqwkPn).\n_Once we have collected your feedback and requests, we will finalize the challenge categories. You can visit the [Game of Realms repo](https://github.com/gnolang/game-of-realms) for more information._\n","gnoland,game-of-realms,launch"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"yhVhOutsqWrTEqtASWT+EKvRjQ28tcjZfxT7Pn4o8zsNydvQxfZMQ+3JHM5Hhz+tdFpuQF44LFUHAw9/G3ZgnA=="}],"memo":"from gnoblog-cli"},"blockNum":"3074"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModAddPost","args":["gor-ama1","Gno.land Community Game of Realms AMA #1 - Recap","\nWith Game of Realms officially in phase one, core dev Manfred Touron jumped on Discord to answer Gno.land community questions about the ongoing high-stakes competition. From starting and end dates to participation requirements and a description of tasks, look for your answer below. If you have further questions or want to join our community, come and find us on the []Gno.land Discord](https://discord.com/channels/957002220384182312/1065646963825066044). The core team will be hosting regular “office hours” sessions soon so you can discuss your ideas with them directly.\n\n## Q. How are the tasks in the issues assigned?\n\nWe received questions about how the tasks in the Game of Realms issues are assigned. Should submissions contain the whole implementation? Is the following task \"available** when the previous one is completed? How is the “sync” happening?\n\n**A.** TL;DR:\n\nEverything should go smoothly and we will be leaving room for negotiation if any review looks invalid. Once it has been established, the evaluation DAO will enforce how to submit a contribution. In the meantime, there are official communication challenges that we encourage participants to use. People are also free to work in stealth mode, with the risk of finishing too late or losing points for being bad at collaborating.\n\n----\n\nWe expect the current issues to be done by multiple people, in multiple steps. But anyone can try to make everything in stealth mode and open a PR with everything. Let's discuss the cases we believe will happen:\n\n### Case 1\n\nWe're in phase 1, people want to contribute but can't manage to do everything, so they will try to participate as much as they can. They will participate on the issue or in Discord by indicating their desire to participate, by sharing ideas, reviewing others' work, giving feedback, clarifying, or whatever makes sense.\n\nThe only thing is that we're fully remote. We don't know each other, so everyone needs to be good at communication. At the end of a big task, i.e. the Evaluation DAO is finished, the core team will take all the small contributions and identify contributors, and then suggest how to split the task prize. We'll propose the split and allow room for public negotiations.\n\n### Case 2\n\nWe're in phase 2, and a small contribution is done by an individual. We just review it, and that's done.\n\n### Case 3\n\nWe're in phase 2, and a contribution is big and requires small steps. Probably, the Evaluation DAO will ask individual participants to submit their contributions so they can allocate points for the individual contributions. But maybe the Evaluation DAO prefers to review big tasks as a whole, and then split the prize, as we'll do in phase 1. We don’t have clarity on this at this stage, as it will be up to the implementers of the Evaluation DAO to design the best system for that case.\n\n## Q. Will there be a leaderboard and place where we can submit evidence for tasks?\n\n**A.** Not yet. The leaderboard will come in phase 2. One of the critical parts of the Evaluation DAO will be to allow contributors to submit evidence for tasks. Votes and point allocations will also be transparent. This will make sense for future Proof-of-Contributions, too. We'll also develop a leaderboard to make it easier to follow the competition, but this will probably come after the Evaluation DAO is running.\n\n## Q. What will the overall tasks consist of?\n\n**A.** Here is a non-exhaustive list:\n\n* Onboard more contributors ([create tutorials and documentation](https://github.com/gnolang/gno/issues/408)\n* Improve the project and implement more things\n* Bootstrap our genesis of contributors for the future mainnet\n* Experiment with Proof of Contribution by having a simpler system: Evaluation DAO\n* Identify the best participants to propose jobs\n* Identify the best organizations to propose partnerships\n\n## Q. At what point in the Game of Realms timeline/phase are we?\n\n**A.** We are at the beginning of phase 1. We plan to create a website soon so you can keep track of the status and, as I mentioned, a leaderboard will come in phase 2.\n\n## Q. What will be the contributions, how will points be calculated, and are there tasks for non-programmers?\n\n**A.** During phase 1, the tasks are relatively well defined, please read this:\n\nhttps://github.com/gnolang/gno/issues/390\n\nThere are more tasks for programmers, but multiple parts are for non-programmers too.\n\nDuring phase 2, it's hard to be sure about anything yet. Game of Realms is a competition to experiment with Proof-of-Contribution, which will replace Proof-of-Stake on Gno.land. If things go the way we imagine, then consider that the stakeholders (contributors** will allocate points to contributions that make sense for the project. The contributors won't lose points, but by allocating points, they will dilute their own point stack.\n\nWe expect the Evaluation DAO to attribute points to whatever makes sense to make the project better. We'll have some task ideas for phase 2, including for non-programmers. You can likely consider that even if the core team doesn’t control the DAO, its suggestions will be approved by the Evaluation DAO because we deeply want the project to be a success.\n\n## Q. What are the requirements to start participating?\n\n**A.** There is no requirement to start participating. You’ll need to do some KYC at the end of the competition to receive a prize. Feel free to fill out the form linked in the Register section of the following issue:\n\nhttps://github.com/gnolang/gno/issues/390\n\nThis will allow us to contact you about the competition through our newsletter and set up prize payment later. Use the comment section of the issues or discuss them on Discord if you plan to work on specific tasks, so we can see that you’re actively working on a topic. It may be better to work with others and share a prize instead of taking the risk of implementing everything in stealth mode and not being the first.\n\n## Q. Is there a fixed period of time for the end?\n\n**A.** No. Phase 1 will be finished when we consider that enough materials have been implemented to switch to phase 2. This will probably take between 1-3 months. The end date for phase 2 will be announced during phase 2, which will probably last between 2-3 months. This is when we’ll send the prize rewards. After Game of Realms, people will continue to earn contribution points by contributing to the project, which will give them memberships on the future mainnet.\n\n## Q. Is it possible to install a local testnet to get a proper local development environment?\n\n**A.** You can find the answer in this GitHub issue. Subscribe to the issue to get updates:\n\nhttps://github.com/gnolang/gno/issues/478\n\nThere are multiple ways to interact with Gno:\n\n* Using gnodev allows you to use the GnoVM, without a blockchain. This method is super fast and allows you to use development patterns like TDD, where you test your implementation multiple times per minute.\n* Running a localnet, by running the gnoland command and then configuring our tools like gnokey to use localhost:36657\n* Using the staging network hosted on https://staging.gno.land reset regularly and you can use the hardcoded test key or use the faucet\n* Using the official testnets\n\nIf you prefer to run a full blockchain node instead of just playing with GnoVM, you should play with the gnoland binary. This video shows how to do this in practice:\nhttps://www.youtube.com/watch?v=-BlnEXCs0eI\n\nBelow is a further resource that may also help you:\n\nhttps://test2.gno.land/r/boards:testboard/5\n\n## Q. Will there be a list of what needs to be tested? When will the tests start?\n\n**A.** The best place to look is on GitHub here:\n\nhttps://github.com/gnolang/gno/issues/390\n\nDuring phase 1, there are 3 official focuses:\n\n- Evaluation DAO\n- Tutorials\n- Governance Module\n\nThe core team will actively review this and decide what contribution deserves to get prizes.\n\nDuring phase 2, we’ll use the Evaluation DAO developed during phase 1 to review old contributions, even contributions made before the competition, as well as ongoing contributions. Right now, we have an issue gathering interesting topics for phase 2 here, but any contribution can be reviewed by the DAO, including things that are not listed:\n\nhttps://github.com/gnolang/gno/issues/357\n\nThe competition was just announced, but we’ll review contributions made in the past, too, so it starts from the first commit, ~1-2y ago.\n\n_Do you have more questions for Manfred? Would you like to know more about Gno.land, Gnolang, Game of Realms, or ways to contribute to our growing ecosystem? Drop us a question on Discord and watch out for our next AMA on Tuesday 7 Feb at 4 pm UTC._\n","game-of-realms,gnoland,proof-of-contribution,dao,governance"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"LNmmyhewyYHkfgtWBcqrntGgN8ZJ13u6/Ak7vLyxLLFRke5Qpv9VJPkcbS52rUtunxDNBLuJbtvWSLuMLeFmxQ=="}],"memo":"from gnoblog-cli"},"blockNum":"3076"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModAddPost","args":["gor-phase1","All You Need to Know About Game of Realms: Phase One","\nGame of Realms, the worldwide competition to find the best contributors to Gno.land, is currently underway. Unlike some contests you may have entered, we're doing things a little differently. We want participants to be instrumental in building the Gno.land platform with meaningful contributions that help shape the direction of the project – either by writing the best Gnolang smart contracts or contributing to the core blockchain. It’s not just about winning prizes but becoming a meaningful contributor. We encourage participants to collaborate on the challenges – your contribution will be rewarded on individual merit.\n\n## Phase One: The Basics\n\nPhase one of Game of Realms is about laying the foundations to onboard more people to the platform. You’ll need to be an advanced developer who wants to create core materials that power the platform every day. You should also be willing to document your work and even write tutorials and guides that help us advance to the second phase of the competition.\n\nThere is a total prize pool of 133,700 ATOM available during the Game of Realms competition, one-third of which (44,121 ATOM) will be allocated to contributions from phase one. During phase one, which we expect to last between 1-3 months, participants will open PRs against repos from the Gnolang organization. For additional information on the competition phases and timelines, be sure to check out the following resources:\n\n- [Game of Realms blog post](https://test3.gno.land/r/gnoland/blog:p/gor-launch)\n- [Game of Realms AMA recap](https://test3.gno.land/r/gnoland/blog:p/gor-ama1)\n\n## Phase One: The Challenges\n\n**Evaluation DAO**: To ensure contributions in Game of Realms are rewarded fairly, we need an Evaluation DAO. Allowing community members to vote on the best contributions and decide how much they are worth provides a level playing field for all. We’re therefore seeking your skills in DAO development and implementation. This is one of the most important challenges of phase one and the only challenge that must be approved unilaterally by the core team because of its key role in the competition and the future of the platform. Read more about the [Evaluation DAO challenge on GitHub here](https://github.com/gnolang/gno/issues/407).\n\n**Tutorials \u0026 Documentation**: So that we can progress to phase two and open up the Gno.land platform to a broader audience, we need written and recorded tutorials, guides, and documentation from phase one participants. There are almost no instruction manuals when it comes to this new frontier as the only smart contract platform using the Gnolang programming language. Help us to create materials that will onboard more contributors to Gno.land. Read more about the [Tutorials \u0026 Documentation challenge on GitHub here](https://github.com/gnolang/gno/issues/408).\n\n**Governance Module**: We want Gno.land to adopt the fairest and most effective governance solution possible; one that encourages voter participation and is transparent and accountable. We’re looking for contributors to define and implement a governance contract suite that rivals existing ones, such as the Cosmos Hub, and be implemented by other projects. Can you improve on that? Show us how! Read more about the [Governance Module challenge on GitHub Here](https://github.com/gnolang/gno/issues/409).\n\nAll phase one challenges will stay open during phase two. No competition points will be attributed during this phase as the points will be retro-funded by the Evaluation DAO and awarded during phase two.\n\n## Judging Criteria - What Wins Points?\n\nWhat will the judges be looking for when assessing contributions? You can find individual details on the corresponding GitHub issue regarding each challenge, but to get you started, the Game of Realms contest prioritizes communication and collaboration. We encourage participants to work together to find the best solutions. You will be awarded individually for your contribution but working as part of a team is highly valued. Good documentation that expresses high learning efficiency and shows how the task was completed in an educational way will also win additional points, as will a high standard of quality, great UX, and the ability to follow the contribution guidelines.\n\nAs this is primarily a developer-oriented competition, most of the organization for Game of Realms is happening on GitHub; come by the repo and [visit issue #408](https://github.com/gnolang/gno/issues/408) to contribute to tutorial and documentation writing for Gno.land.\n\n## Rules of Engagement\n\nAll participants must keep in mind a strict code of conduct and specific rules and criteria to ensure fair play. Throughout the Game of Realms competition, no plagiarism will be tolerated at any time. Participants may submit what they wish, however, any project that has already been allocated rewards or received compensation in any other hackathon or similar contest will not receive double pay.\n\nThat’s all for now. If you have more questions about Game of Realms or Gno.land you can join us in our next Office Hours session on Tuesday, March 14, 2023, at 4 pm UTC. You can also connect with other participants in the [Gnoland Discord](https://discord.com/invite/S8nKUqwkPn).\n\n## Game of Realms Phase 1: FAQ\n\nBelow are some frequently asked questions about phase one of the Game of Realms competition. If you can’t find your answer below, jump into our Discord and ask, or join us for a live “Office Hours” session with the core team.\n\n### Q. How are the tasks in the issues assigned?\n\nA. There are official communication challenges that we encourage participants to use.\n\n### Q. Can I work individually or should I work as part of a team?\n\nA. You are free to work in stealth mode, but please keep in mind that you risk finishing too late or losing points for being bad at collaborating. We expect the issues in phase 1 to be done by multiple people, in multiple steps. But anyone can try to make everything in stealth mode and open a PR with everything.\n\n### Q. How can I find collaborators?\n\nA. Participate on the issue or in Discord by indicating your desire to participate, by sharing your ideas, reviewing others' work, giving feedback, clarifying, or whatever makes sense.\n\n### Q. How can I ensure good collaboration?\n\nA. Since we are fully remote, collaborating can be a challenge and the best collaborators will be rewarded. We don't know each other, so having good communication is key.\n\n### Q. How will my collaboration be evaluated?\n\nA. At the end of a big task, i.e. the Evaluation DAO is finished, the core team will take all the small contributions and identify contributors, and then suggest how to split the task prize. We'll propose the split and allow room for public negotiations.\n\n### Q. How much is the prize pool?\n\nA. There is a total prize pool of **133,700 ATOM** available during the Game of Realms competition, one-third of which (**44,121 ATOM**) will be allocated to contributions from phase one.\n\n### Q. When will I receive my rewards for my collaboration?\n\nA. Rewards will be allocated retroactively by the Evaluation DAO during phase 2.\n\n### Q. Will there be a leaderboard and place where we can submit evidence for tasks?\n\nA. Not yet. The leaderboard will come in phase 2.\n\n### Q. What will the overall tasks consist of?\n\nA. Here is a non-exhaustive list:\n\n* Onboard more contributors (create tutorials and documentation)\n* Improve the project and implement more things\n* Bootstrap our genesis of contributors for the future mainnet\n* Experiment with Proof of Contribution by having a simpler system: Evaluation DAO\n* Identify the best participants to propose jobs\n* Identify the best organizations to propose partnerships\n\n### Q. Are there tasks for non-programmers?\n\nA. There are more tasks for programmers, but multiple parts are for non-programmers too. During phase 1, the tasks are relatively well defined, please read this:\n\nhttps://github.com/gnolang/gno/issues/390\nhttps://github.com/gnolang/gno/issues/540\n\n### Q. What are the requirements to start participating?\n\nA. There is no requirement to start participating. You’ll need to do some KYC at the end of the competition to receive a prize. Feel free to fill out the form linked in the Register section of the following issue:\n\nhttps://github.com/gnolang/gno/issues/390\n\nThis will allow us to contact you about the competition through our newsletter and set up prize payment later. Use the comment section of the issues or discuss them on Discord if you plan to work on specific tasks, so we can see that you’re actively working on a topic.\n\n### Q. Is there a fixed period of time for phase 1?\n\nA. No. Phase 1 will be finished when we consider that enough materials have been implemented to switch to phase 2.\n\n### Q. Is it possible to install a local testnet to get a proper local development environment?\n\nA. You can find the answer in this GitHub issue. Subscribe to the issue to get updates:\n\nhttps://github.com/gnolang/gno/issues/478\n\n### Q. Will there be a list of what needs to be tested? When will the tests start?\n\nA. The best place to look is on GitHub here:\n\nhttps://github.com/gnolang/gno/issues/390\n\nDuring phase 1, there are 3 official focuses:\n\n* Evaluation DAO\n* Tutorials\n* Governance Module\n\nThe competition was just announced, but we’ll review contributions made in the past, too, so it starts from the first commit, ~1-2 years ago.\n","gnoland,game-of-realms,faq"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"bf6KOBgWEk6grr0L4ERWwDvXaBnMASuIAvzKE+cnq1FCJES3YnMjb4oh1h4XCdFbPLTdcCp5jhfHxoi4JO5ZBg=="}],"memo":"from gnoblog-cli"},"blockNum":"3078"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModAddPost","args":["monthly-dev-1","The More You Gno: Gno.land Monthly Updates","\nWe made progress across the board at Gno.land last month, from onboarding more devs to receiving an influx of contributions to the Game of Realms contest. To encourage development and discourse, we set up a biweekly public developer call in addition to our biweekly Office Hours sessions. Anyone can join, ask questions, and give their suggestions on how to shape the Gno.land platform and become a contributor. Last month, we covered several pressing topics from Gno IDE and Gno.land website language, to GnoVM, IBC, and ICS. Jae also came back to the circuit in March with two IRL workshops for devs at side events during EthDenver and Game Developer Conference (GDC) in San Francisco.\n\n## Developer Updates\n\nYou can find the live streams of the new biweekly public developer calls on [Gno.land YouTube](https://www.youtube.com/@_gnoland/videos) as well as access the agendas on [GitHub](https://github.com/gnolang/meetings/blob/main/notes/2023_03_15_dev_call_notes.md). The main talking points this month were Gno IDE, Gno.land website language and UX, garbage collection, bug fixes, and how to bring IBC and ICS to the platform. We are working on all these issues concurrently but the order of release will be Gno.land mainnet, IBC, and then ICS (this is reflected in the DAG below).\n\n\n\n[![Gno.land mini DAG](https://gnolang.github.io/blog/2023-04-15_myg-march/thumbs/mini-dag.png)](https://gnolang.github.io/blog/2023-04-15_myg-march/mini-dag.png)\n\n## Gno.land Website Language\n\nWe want to add more features for developers, such as libraries to make writing interfaces better and more consistent. There is an open topic for frontend developers with typography skills and library developers to create a UI framework for markdown or a custom rendering system.\n\nInternally, our core team is working on improvements to Gno.land’s website, making it easier to navigate with shorter columns while ensuring the text is markdown centric and readable in plain text and the GitHub rendering machine. We hope to achieve this using CSS and having classes for vertical columns, without having to make an extension to the markdown parser.\n\n## Gno IDE\n\nGno.land developer experience team is working on a web-based Gno IDE for quickly building Gno realms and packages right on your browser by just visiting a web app. Gno IDE will provide much improved UX for everything around building a realm (including making the testing easier), and additional features like autocompletion in the editor. Gno IDE will contain all the features you would expect from an IDE as well as valuable APIs for devs building tools around Gno.land with the public Gno Infrastructure.\n\n[![Gno IDE](https://gnolang.github.io/blog/2023-04-15_myg-march/thumbs/gno-ide.png)](https://gnolang.github.io/blog/2023-04-15_myg-march/gno-ide.png)\n\nGno IDE will have multiple modes to support different use cases. The normal mode will be used during everyday developments (as you’re familiar with from other code editors). The presentation mode is for high accessibility and readability. You can use it during video calls or physical workshops while projecting your screen to an audience. The third and perhaps most interesting mode is the embedded mode. Use this mode to embed the IDE into websites and blogs. This feature is especially useful for tutorials to test out sample code, run it on the real testnets, and play with it.\n\n## IBC and ICS\n\nAs depicted in the DAG above, Gno.land mainnet will launch first, followed by IBC and then ICS. We will focus on implementing IBC1, as we strongly believe in the ICS model and want to be a consumer of an existing Cosmos chain. We want a common ICS implementation that works across many hubs because Gno.land is a type of hub that will need its own ICS to scale while providing GnoVM on consumer chains on the Cosmos Hub. Our next step now is to find the best way to configure ICS for Gno.land and make GnoVM available as a consumer chain in the Cosmos Hub system.\n\nRegarding IBC, we will use the current implementation that was written for the Cosmos SDK and port that over to Tendermint2. We anticipate some issues along the way including security patches that need to be applied to our code base. There are multiple ongoing directions and discussions about how to bridge Gno.land’s smart contracts to IBC, which are essentially Interchain smart contract interactions.\n\nOne possibility is to have an API that submits events to a queue of outgoing events, and another queue to receive and consume events asynchronously. This mechanism could work for IBC2 to have rich inter-contract Interchain features, and the same API could work for Interchain plus smart contract interactions that require advanced options. We discussed a proposal to create a standard for Interchain contracts so that IBC2 could eventually be standardized eliminating limitations by applying it with an EVM, other languages, and CosmWasm.\n\nThis protocol could be based on Protobuf or a similar well-known syntax definition protocol so that we can push the Interchain to the next level. IBC2 will be safe and fast and replace vulnerable atomic bridges between multiple technologies. This is a major update that we are committed to developing and we need help identifying all the challenges involved. Working on IBC integration, separate from the Gno.land mainnet launch, will require significant time to understand how the light client system works. If you’re interested in taking on this task, let us know and we’ll set up a group. IBC will likely be the most important challenge of Game of Realms phase 2.\n\n## Garbage Collection\n\nCurrently, our work on garbage collection does not address the problem in the traditional Golang sense of dealing with memory efficiency. Instead, we are progressively optimizing and improving the main state tree by automating the clean-up of orphan nodes. The next phase will be targeting the official garbage collector component to begin work on memory management as we have some common Golang garbage collection challenges, but are identifying some uncommon ones too.\n\nWe need to consider elements like where to hold our objects because this is tied to releasing them in a concurrent lock-free way. We also need a good data structure. This is ongoing research as of now to implement a dedicated routine to synchronously clean stuff in a non-blocking way.\n\n## Game of Realms\n\nThis month, we have seen a massive uptick in contributions to Game of Realms phase one with a tidal wave of issues, general discussions, and PRs. One of the biggest things we worked on was adding support for MOD, which is a version of Go mod with an easier interface to manage your dependencies and version your dependencies. You can track the ongoing issue on GitHub [here](https://github.com/gnolang/gno/issues/390).\n\nThere have been some really strong contributions to the Evaluation DAO and governance module, as well as a big CLI refactor that went into our code base. We've also seen people contribute contracts like GRC 1155 or general improvements to existing realms, with many suggestions for fixing bugs. Finding bugs and reporting what people want is a good indication that the Gno.land platform is being picked up and gaining adoption.\n\nYou can find the Office Hours recordings that cover Game of Realms on YouTube [here](https://www.youtube.com/watch?v=JTmNg-b6Lcs).\n\n## Developer Events Stateside\n\nGno.land hosted a lively meetup during EthDenver last month where Gno.land founder and core dev Jae Kwon gave a talk for Solidity developers called “Gno.land, the Inevitable Next Generation Smart Contract Platform.\" He compared and contrasted Gno.land and Gnolang to Solidity, and showed Ethereum developers how the GnoVM shifts the smart contract paradigm. You can watch the [recording here](https://www.youtube.com/watch?v=IJ0xel8lr4c).\n\nAlso in March, Jae hosted a gaming workshop at a side event during the infamous Gaming Developer Conference (GDC) in San Francisco. “Gno.land for Game Developers, Building Your App in Web3,\" showed participants a sample gaming app built on the Gno.land platform and offered them the chance to try their hand at writing a smart contract for their app with Gno.\n\n## Virtual Events - How to Build a Forum\n\nCore tech lead at Gno.land Miloš Živković held a virtual workshop for Go devs called “How to Build a Forum.” He showed how Gnolang is a fast and simple way to build and launch smart contracts using the Gnolang interpreter virtual machine that interprets Gno and eliminates the need for any servers or ORNs.\n\nThe VM allows for the memory state of your Gno.land application to persist automatically after every transactional function call, which is a completely new way to handle transaction volume and memory recall. You can watch the [full tutorial here](https://github.com/gnolang/workshops).\n\n*We’d like the community to get involved in Gno.land’s monthly updates, so if you’re building on Gno.land and want to highlight your development, project, event, or idea, let us know and we’ll include your contribution.*\n","gnoland,gnovm,tm2"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"yaZaQbUjl9kjO9+NSli403IejcZjW/64cOkhrc5l/ZQf9y0NRp9yo5Dz6oXNq80gambc+M/TdwUBVz+1keMsqw=="}],"memo":"from gnoblog-cli"},"blockNum":"3080"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModAddPost","args":["monthly-dev-2","The More You Gno: Gno.land Monthly Updates - 2","\n**The More You Gno 2: Gno.land Developer Updates**\n\nOver the past few weeks, our core devs and ecosystem contributors have been making massive strides on Gno.land. There’s a lot to cover in the second edition of *The More You Gno*, from updates on Tendermint2 and GnoVM to stack/frames management, Gno IDE, and plenty more. We’ll also see what some of the external teams contributing to the platform have been up to, including Gno.land’s first decentralized exchange, GnoSwap, and Adena compatibility with GRC20 tokens. Check it out.\n\n**Tendermint2**\n\nWe’re making steady development progress on Tendermint2, which focuses on simplicity of design, minimal code, minimal dependencies, modular dependencies, and completeness. For the time being, Tendermint2 will stay in the main repo in a top-level folder named Tendermint2. This is the official location to develop and improve the consensus protocol until it is stable enough to be extracted from the Gno repo and become a standalone project. Currently, Tendermint2 depends on GnoVM, however, we are working to unlink this dependency and build a basic demo Tendermint2 chain and Client.\n\nTendermint2 JS/TS Client is a JavaScript/TypeScript client implementation for Tendermint2-based chains. The client will make it easier for developers to interact with Tendermint2 chains, with a simplified API for account and transaction management, removing a ton of manual work and allowing developers to focus on building their dApps. You can [read more about the client here](https://www.npmjs.com/package/@gnolang/tm2-js-client). In addition to the Tendermint2 JS/TS client, we also created a Gno JS/TS client that just extends the TM2 one to provide Gno-specific functionality. You can read more about this here.\n\n**Game of Realms**\n\nThe incentivized competition to find the best contributors to Gno.land continues in phase one, with slow but steady progress being made. Nir1218 initiated an Evaluation DAO Kickoff discussion in [issue 792](https://github.com/gnolang/gno/pull/792) to initiate testing code for the key smart contract infrastructure that will power the Gno.land platform. We are also interviewing architects for the core team with experience in governance modules and creating new economies on-chain, and a new DevRel team member will be joining us soon to create awesome tutorials and documentation to advance Game of Realms further. Gno.land must be built by the community and we will not rush to push Game of Realms to the second phase until we have found quality contributors to complete the challenge tasks and become the platform’s first founding members.\n\n**Gno IDE**\n\nOur core development team is working on a web-based IDE for Gno.land that will greatly improve the developer experience, allowing builders to quickly spin up Gno realms and packages right on their browsers just by visiting a web app. Currently named Gno IDE but with a rebranding on the horizon, this intuitive product focuses on ease of use and improved UX, and will include all the features you’d expect from an IDE, such as auto compilation in the editor, debugging, extensive testing capability, and powerful APIs like IntelliJ to supercharge your programming.\n\nGno IDE currently has multiple modes to support different use cases, including a normal mode for everyday programming, similar to a standard code editor, a presentation mode for video calls or screen sharing, and an embedded mode to extend functionality, allowing you to embed the IDE directly into websites and blogs. You can also choose to edit your code in Emacs or Vim and easily switch between steps, from previous to next, making creating your tutorials and blog posts more intuitive. Watch out for more to come on Gno IDE soon, and if you want to contribute by creating a plugin for your favorite editor, open a PR to win contribution points.\n\n**Stack/Frames Management**\n\nThe stack/frames is an integral part of the virtual machine (VM) and the language. Stack/frames provide context for smart contract developers, enabling them to access useful information, such as the original caller, or to determine if a contract is being called through another one. The current implementation is limited in scope and relies on fixed positions in the stack which can lead to inconsistencies.\n\nThere is an ongoing [issue 683 open here](https://github.com/gnolang/gno/issues/683) and we have continued to work on enhancing stack/frames development over the last month. We’re adding a new function in the standard library std.PrevRealm (previously GetRealmCaller). Currently, we only have GetOrigCaller, which returns the user calling the first realm. This is not secure and we need a way to call the previous caller. This will allow a realm to handle GRC20 treasuries. See [issue 667](https://github.com/gnolang/gno/pull/667) and [issue 634](https://github.com/gnolang/gno/issues/634) for further details.\n\n**Dealing with Panics in Native Functions**\n\nWe have devised a solution for dealing with panics in native functions, [see pull request 732](https://github.com/gnolang/gno/pull/732). Previously, when there was a panic in a native function, we could not recover it in Gno code. An example of this was the assert origin call, which panicked if the call was not a direct call from a transaction. Based on discussions with contributors, we’ve agreed that native functions should never panic, but if they panic, they panic with machined Gno panic. This gives us the choice in a native function to code a Gno panic, or, if it's a very bad panic, use Go panic so that we know the Gno code is unable to recover it.\n\n**Logic Upgrading**\n\nMaking it possible to upgrade your logic is definitely out of scope for the first version of Gno.land, however, it’s an important issue that we have begun to discuss so that we can place certain restrictions on it, such as allowing upgrades when we consider them safe enough to be compatible with imports. Another idea is to work on creating workflows where migrations become something official. This way, we could define ways to migrate a contract completely in a single transaction at the chain level. Once everything is working and approved as the previous contract is parsed or archived, the new one gets the data. We will revisit this topic after the first version of Gno.land reaches the mainnet.\n\n**Garbage Collection**\n\nIn terms of garbage collection, we don’t have memory leaks as such but we do have defacto memory leaks. By the VM having references to all objects, they won’t be released by Go’s underlying GC. We have some form of reference counting but it is only done at the end of a transaction. We have implemented a mark-and-sweep garbage collector and are working on the VM runtime to manage the objects and signal to the garbage collector to release them when they are no longer needed. This is done by adding the notion of a heap, which is managed by the garbage collector.\n\n**GnoVM**\n\nDeveloping GnoVM is an ongoing task and we will likely need to fork the GnoVM to create different competing versions. GnoVM will be complete, limited in features, and serve as the only interpreter, an enduring reference point over time. Future versions of GnoVM will be designed to incorporate CosmWasm so that all Cosmos chains can have CosmWasm enabled and the VM can run directly on the browser and execute tasks on the browser without requiring to make an API call, making it faster. To do this, we can make a Gno compiler in WebAssembly without changing the code because Go supports WASM cross-compilation.\n\nWe plan on making a competing version of the original minimalist GnoVM, such as a Rust version with a JIT compiler using LLVM as a backend.\n\n**Ecosystem Updates**\n\nSince our last update, the Gno.land community continues to expand with awesome teams and contributors building cool infrastructure and projects on the platform. Below, we take a look at the largest developments of the past few weeks and extend a special thanks to everyone helping us build Gno.land.\n\n**Teritori**\n\nTeritori blockchain and multi-chain hub launched in November 2022, allowing IBC and non-IBC communities to connect, create groups, exchange tokens and NFTs, and launch new projects. Teritori’s idea for building on Gno.land is to create a multi-chain experience for users with a web portal, NFT marketplace, and social feed that will grow the community, and gradually integrate smart contracts and realms. This will promote Gno.land to more developers and showcase all the dApps being built through an easy-to-navigate dApp store. In the coming weeks, Teritori will work with the Onbloc team to integrate the Athena wallet into their portal as well as discuss ideas for promoting Game of Realms to new developers.\n\n**Onbloc**\n\nOnbloc is one of the Gno.land ecosystem’s most active contributors, responsible for building the Adena wallet and the block explorer Gnoscan. The team has also been working on creating an official Gno SDK that will allow developers to interact with Gno.land more easily, and remove some of the current friction. Onbloc opened [issue 701](https://github.com/gnolang/gno/issues/701) on GitHub primarily for developers who either have their own web app or are building a JavaScript app and want to work with Gno in some way. Currently, developers need to do a lot of manual work, which Gno SDK will abstract away, improving the workflow and developer experience. If you have any ideas or feedback, please contribute to the aforementioned issue.\n\nIn another cool development, Onbloc has rolled out a new feature in Adena and Gnoscan to provide support for GRC20 tokens. To store and send tokens, you can open your Adena wallet, click on \"Manage Tokens”, navigate to the Custom Token page, and see which GRC20 tokens are available on Gno Testnet 3, searching by the symbol or path. To research on or discover tokens, head over to the Tokens page on Gnoscan for a full list of GRC20 tokens. You can click on any token on the list for detailed information, such as the total supply, owner, or other available functions built into the token. The Account Details page has also been updated to display all tokens owned by each address. You can help by checking out [issue 764](https://github.com/gnolang/gno/pull/764), which discusses adding bigint to support a wide range of numbers and encoding binary, and [issue 816](https://github.com/gnolang/gno/pull/816), which highlights a small bug the team runs into when coding.\n\nOnbloc has also created a new [token resource page on GitHub](http://github/onbloc/gnotokenresources) for anyone to share or upload resources associated with their Gno.land project. This will serve as a shared knowledge pool about any dApp on the platform. If you wanted to create a decentralized exchange, for example, you would need all the information about the tokens available on Gno.land, such as their images, symbols, descriptions, links to websites, etc. Now you can find this in one handy GitHub repository. If you’re a developer or builder who wants your logo or any other static data posted, be sure to submit a PR.\n\nAnd speaking of decentralized exchanges, Onbloc is also building Gnoswap, the first DEX to be powered by Gno.land, designed to simplify the concentrated liquidity experience and increase capital efficiency for traders. Its interface is built using TypeScript to be user-friendly, secure, and accessible for streamlining complex mechanisms such as price range configurations and staking as part of its core service. Contribute to its interface [here](https://github.com/gnoswap-labs/gnoswap-interface).\n\nAs for the contract side, Onbloc is actively working on its development with help from the core members of Gno.land. The code will be open-sourced for full transparency once the basic functions are ready.\n\n**New Core Contributors**\n\nWe’re excited to welcome two new core team members, Antonio and Zack. Antonio joined us in April in the core team, bringing with him vast experience in IPFS, and writing Git servers in Go. Zack is our first “tinkerer in residence” and will try to bootstrap the ecosystem of small contracts and small libraries. He will also be writing apps and helping us design a system to better share and showcase our work with a super UX for team builders and open-source addicts.\n\nAntonio is already hard at work researching a benchmarking dashboard that will show performance improvements or regressions when we change the code. He’s assessing whether to use GiHub to track actions or run our own machine to execute GitHub actions. Take a peek at his research so far on [issue 783 here](https://github.com/gnolang/gno/pull/783).\n\nZack is working on a microblog project. As an experienced web2 Go programmer, Zack is transitioning to web3. Since he’s interested in incentivized social networks, the microblog project will be his first realm, as a Twitter-style blog without titles, where each user has their own page based on their address. Check out [issue 391](https://github.com/gnolang/gno/pull/391) for more details.\n\n**Developer Events**\n\nOver the past few weeks, our core devs have been mainly focused on building but they’re preparing to speak at some exciting events in the coming months. Catch up with Manfred at BUIDL Asia, in Seoul, South Korea, from June 5 - 9. We’re co-hosting a side event with Onbloc, Code States, and Cosmostation on June 5, so be sure to register if you’re in town! We’ll also be at EthBelgrade in Serbia from June 2 - 4, and GopherCon in Berlin from June 26 - 29, so stop by and say hello.\n\n*Do you want to contribute to Gno.land’s monthly updates? If you’re building on Gno.land and want to highlight your development, project, event, or idea, let us know and we’ll include your contribution.*\n","gnoland,gnovm,tm2"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"3ZH1lWygToseRRLpa/t0fU+hqgZ6j6hxRihMnAxhO4olI3x9TMQpXYfKm0j4eiJQwSTyxe9XmRjSJPuZpqqcgg=="}],"memo":"from gnoblog-cli"},"blockNum":"3082"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModAddPost","args":["funding-program","Announcing the Gno.land Funding and Grants Program","\nIf you’re interested in building in Gno.land and using the Gnolang (Gno) language to make a meaningful contribution, we’ve launched the Gno.land Funding and Grants Program to support you on your journey. If you’re a developer, tinkerer, researcher, or educator and you’re excited by the idea of creating innovative dApps, tooling, infrastructure, products, or smart contract libraries on Gno.land, now you can apply for funding.\n\n**About the Gnoland Funding and Grants Program**\n\nWe’re building Gno.land to endure with timeless code that will serve as a reference point for many years to come. Secured by a novel consensus mechanism, Proof of Contribution, Gno.land rewards contributors fairly, addressing one of the blockchain industry’s biggest problems. The developers that are most active on the platform with the highest quality contributions will secure the most rewards. We already have a growing community of Gnomes innovating and building on Gno.land and we’re looking to add more contributors to extend the usability of the platform and its smart contract library.\n\nOur grants program will encourage further participation by allocating financial awards and contributions to individuals and teams who want to build dApps, core infrastructure, products, or features on Gno.land, incentivizing more like-minded Gnomes to test the Proof of Contribution mechanism and push the chain to new limits. The grant amount and duration will depend on the scope and ambition of the project as well as the work involved.\n\n**Types of Contributors**\n\nThe Gno.land Funding and Grants program is divided into four different categories – tinkerer, builder, researcher, and educator – to ensure that we cater to a diverse range of people and working preferences. Here’s how we define these categories:\n\n- Tinkerer: You want to experiment and invent\n    - Build dApps, improve features, and find and develop new ideas\n- Builder: You have an idea and are ready to build it\n    - Build dApps, infrastructure, tooling, products, or port your existing apps to Gno\n- Researcher: You want to discover and analyze\n    - Deep dive into topics linked to the Gno.land universe\n\n**What We Are Looking For**\n\nTo qualify for a Gno.land grant, we’re looking for motivated and passionate people who can contribute by developing dApps, core infrastructure, useful and innovative products, or features that improve the usability of the Gno.land chain, specifically:\n\n- Decentralized Applications (dApps)\n    - What types of dApps do you want to see on Gno.land? Show us.\n    - Build, test, and launch a suite of Gno.land dApps for the community, focusing on diverse use cases and industries such as DeFi, gaming, supply chain management, and social media. Ensure that these apps cater to both individual users and businesses\n    - These dApps should integrate seamlessly with existing Gno.land infrastructure, encourage user interaction, and promote the adoption of Gno.land services\n- Infrastructure, DevX, Quality\n    - Develop comprehensive GitHub and AWS integration for Gno.land, including streamlined deployment processes, continuous integration and delivery pipelines, and monitoring tools\n    - Create Helm charts for easy deployment and management of Gno clusters, enabling users to quickly set up and scale their Gno infrastructure\n    - Design and implement an event system for Gno.land contracts, allowing for real-time monitoring, analysis, and auditing of contract-related events\n    - Enhance Gno.land security by conducting regular vulnerability assessments, penetration testing, and implementing best practices for secure smart contract development\n- Products\n    - Develop advanced project management software tailored to the needs of Gno.land developers and teams, with features such as task tracking, collaboration tools, and integrated Gno.land services\n    - Create comprehensive documentation, including guides, tutorials, and API references, to help users understand and utilize Gno.land's features and services more effectively\n    - Design a censorship-resistant smart contract system, enabling secure and transparent transactions and interactions on the Gno.land platform, free from external interference\n- Interoperability \u0026 Integration\n    - Implement cross-chain compatibility and interoperability, allowing Gno.land to connect and interact with other blockchain networks, expanding its potential user base and increasing its overall reach\n    - Develop a powerful integrated development environment (IDE) specifically for Gno.land developers, with features like code completion, debugging tools, and seamless integration with Gno.land services\n    - Design and launch a user-friendly wallet for Gno tokens, featuring a secure and intuitive interface, support for multiple devices, and easy integration with Gno.land dApps\n\nThe above guidelines are by no means exhaustive and are intended to spark your imagination and give examples of the types of contributions we’re looking for in Gno.land. We’re open-minded and willing to assess all grant proposals, so if you have an idea that’s not on the list or a suggestion that you think will benefit our vibrant community, let us know. If your submission doesn’t qualify for a grant, we’ll do our best to provide you with open and honest feedback and points for improvement, as well as identify any opportunities to get involved in our ongoing incentivized Game of Realms competition.\n\n**Meet Our First Grantees - Onbloc**\n\n**Onbloc**\n\nOnbloc is a blockchain software company building core infrastructure for Gno.land and\n\nhelping other dApp developers onboard to the Gno.land ecosystem seamlessly. The team has developed the Gno.land Developer Portal, which provides comprehensive introductory docs for developers, the Adena web3 wallet for Gno.land, and the Gnoscan block explorer. As Gno.land’s most active contributor, Onbloc is leading many community-driven initiatives and we’re excited to extend a grant to this passionate South Korea-based development team to continue their incredible work developing the wallet further, iterating the Gnoscan block explorer, and building Gno.land’s first DEX, Gnoswap.\n\nIn addition to this, we want to encourage Onbloc to continue their amazing work with the community, contributing to meetings, replying to comments on our social platforms, writing code base, organizing local events and meet-ups in South Korea, and creating products that expand the Gno.land ecosystem.\n\n*“Onbloc is thrilled to be a part of the Gno.land Grants Program. As one of the earliest contributors, our endeavors have involved releasing technical guides and research reports, developing infrastructure tools for dApps, creating DeFi smart contracts, and more. We are excited to leverage this grant to further enhance the quality of our products and strengthen our workforce. The grant will enable us to cover some of the existing expenses and hire additional developers to focus on smart contracts and the core side of GnoVM. We expect these endeavors to push the Gno.land blockchain to new limits and accelerate the achievement of the milestones on our roadmap. With the support from the Gnoland team, we are confident in our ability to make significant strides and further contributions to foster the growth of the Gnoland ecosystem.”*\n\n*Dongwon Shin, CEO, Onbloc*\n\n**Teritori**\n\nTeritori is a super-dApp project allowing individuals and organizations to interact, organize, and communicate in a radically resilient and decentralized way. Based on an interoperable vision, the application is built on a multi-chain experience approach, gradually integrating Gnolang as the fundamental technical brick of the system. Currently in Beta ([available here](https://app.teritori.com/)), the app is making modular tools and dApps available to users, with a single gamified user experience. Teritori's philosophy is to offer users and developers a place that belongs to them, their territory, with an emphasis on interoperability, modularity, and customization.\n\nUsers can interact with a social network, NFT marketplace, DAO launcher, service marketplace, games, etc., and integrate a plethora of dApps thanks to the dApp store, where Teritori will promote all Gno.land dApps to encourage the growth of the ecosystem. Using the Gno.land grant, Teritori will continue this amazing work and develop a moderation DAO to provide content moderation to Gno.land in a healthy and decentralized way, a challenge that faces the entire web3 industry. By 2024, the UX of Teritori v1 will be based on decentralized messaging without blockchain, allowing users to converse in a \"natural\" way while adding modules and web3 features. Creating and managing a GnoDAO could be as easy as managing a WhatsApp group.\n\n*“At Teritori, we want to make decentralized organizations accessible to all and experiment with new governance models for humans, social groups, businesses, and diverse organizations. Gno.land enables us to build this vision in a modular, future-proof, and censorship-resistant way. Thanks to the Grants Program, we'll be able to accelerate our development, continue to contribute proactively and build user experiences that enable as many people as possible to discover the Gnol.and ecosystem. We're starting work developing a DAO launcher, with different standard templates for DAOs, in particular, DAOs enabling moderation within news feeds, forums, or social networks. This will rapidly open many doors, such as those of conflict resolution DAOs, on-service marketplaces, or project management software. Gnol.and is a playground where anything is possible! We'll be documenting [our journey here](https://github.com/gnolang/hackerspace/issues/7#issuecomment-1588197187), and sharing our progress as we stay connected to the needs of the community.”*\n\n*Zooma, Core Lead, Teritori*\n\n**Zack**\n\nZack is the first tinkerer-in-residence at Gno.land. With a deep-rooted passion for innovation, he embraced Go early on in 2013 and ever since, has been harnessing its power to craft peer-to-peer programs and develop web2 applications. While Gno.land marks Zack's initial foray into web3 development and blockchain dApps, the Gnolang language allowed him to effortlessly apply his Golang expertise. This has enabled him to flourish within an ecosystem that revolves around decentralized systems, seamlessly transitioning his skill set to create unique decentralized solutions.\n\n*“I have always been curious about web3 and blockchain technologies but have not developed expertise in smart contract languages and struggled to keep up with the fast-changing ecosystem around blockchain technologies. As an avid Go programmer, Gno and Gno.land created the opportunity for me to develop decentralized applications on blockchains by providing a framework and ecosystem that is consistent with Golang in terms of syntax, sustainability, and stability. The additional web3 features in Gno and Gno.land provide huge potential for interesting applications that I hope to unlock to move beyond web2 and harness blockchain technology for novel use cases. The grant provided for tinkerer-in-residence was the key to giving me the resources to move through this ecosystem as I try to think outside the box for what web3 can be and what blockchain can do for a web2 developer like myself.”*\n\n*Zack Scholl, tinkerer-in-residence*\n\n**How You Can Apply**\n\nActions speak louder than words. Until Gno.land is completely on-chain, the best place to start is by contributing to PRs and issues on the Gno.land repos or participating in the Game of Realms competition. If you want to apply for a grant, you’ll need to fork the Gno.land Ecosystem Fund repo and outline your proposal in your project name’s file. Once we receive your application, our team will review it and get in touch if we believe that you fit the criteria. [See GitHub for full instructions](https://github.com/gnolang/ecosystem-fund-grants). Stay tuned, we’ll be hosting a Funding and Grants Program Q\u0026A in the next few weeks!\n","gnoland,funding,grants"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"rqt2+mBACWoYXa/qjXSxXXSTQc7zr3Q5e09g7oWgg+xKH/1IMwQnIFRyD8nIlVEgCcZUC0u+9r4uTwqAs2S8qw=="}],"memo":"from gnoblog-cli"},"blockNum":"3084"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModAddPost","args":["monthly-dev-3","The More You Gno: Gno.land Monthly Updates - 3","\n**The More You Gno - Gno.land Monthly Updates 3**\n\nWe’ve been busy since the last edition of *The More You Gno,* with the Gno.land core team and ecosystem partners present at various global developer events. We’ve visited many gnomes (and gnomes-in-the-making) around the world from Berlin to Belgrade, spreading the word about Gno.land and growing our expanding community. Aside from all the networking, Gno.land is taking shape with a new iteration of our website, the Gno.land Funding and Grants Program, and a host of developer updates as always. Let’s dive in.\n\n**Gno by Example**\n\nWe recently launched [Gno by Example](https://gno-by-example.com/), our equivalent to [Solidity by Example](https://solidity-by-example.org/), where you can see tutorials and code snippets to help you learn and get more easily onboarded to Gno.land. Gno by Example is designed to be community-run with a front-end app and tutorials in markdown. There’s also a specific markdown syntax where you can embed certain file fragments to make your tutorials more structured. We’d love to build this into the ultimate resource center for Gno.land, so feel free to [contribute](https://github.com/gnolang/gno-by-example) with new tutorials and sections. Contributions here are eligible for rewards from the Game of Realms competition.\n\n**GnoVM**\n\nWe continue developing GnoVM and invite you to provide feedback on what can be improved. This month, there have been a lot of discussions about how to improve native bindings and use the Gno machine in native function calls. Native function calls are well-defined in Go code generation and Go templates but need some modifications for GnoVM. For example, since new native functions already exist in the Gno code, when we try to define a native function, calling the function doesn’t yield the desired result. We’ve created a bunch of panics and tried writing out native functions to see what goes on for them, in an investigation that will go on for the next few weeks. Got any ideas? Please contribute. ([PR 859](https://github.com/gnolang/gno/pull/859)).\n\n**Testnets**\n\nTalk about testnets has come up a lot in recent weeks and how to best proceed. Some gnomes are asking for a multi-node testnet to allow for great experimentation, whereas others prefer to keep the testnet single-node. There are advantages and disadvantages to both approaches and we are still listening to feedback and ideas. However, we will likely keep testnet 3 single-node and focus on the language while having a second dedicated multi-node testnet where devs can get creative, think outside of the box, test performance, consensus, and everything they need to push the chain to its limits. We’ve created a new [Hackerspace](https://github.com/gnolang/hackerspace) Repository for the multi-node testnet to prevent spam on the main repo, so please use it to share your scripts, posts, snippets, etc.\n\n**Native Coins and GRC-20 Tokens**\n\nWe uncovered some significant issues with the banker module ([PR 393](https://github.com/gnolang/gno/pull/393)) regarding minting and burning tokens with the package minter. It was not scoping, filtering, or minting tokens correctly, making it possible to mint and burn unlimited tokens, including GNOT. We want to allow any realm to create its own token and run multiple tokens on their chains, but we need a prefix for security to resolve the issue and allow anyone to create GRC20 smart-contract-based coins but not native coins. We continue to work with small fixes on this issue and will reopen the PR soon.\n\n**Gno.land Funding and Grants Program**\n\nLast month we released our Funding and Grants Program to encourage more developers, researchers, educators, and tinkerers to interact with Gno.land. If you’re interested in experimenting with Gnolang (Gno) and building innovative dApps, tooling, products, or infrastructure, check out our GitHub [Funding and Grants](https://github.com/gnolang/ecosystem-fund-grants) page for further information on how you can apply. Start contributing to Gno.land or Game of Realms as this is a prerequisite of the funding and grant application process.\n\n**Developer Relations**\n\nThe Gno core team is growing! We hired a new DevRel last month and are looking to take on another dev for this open position, so if you’re interested, head over to our [careers page here](https://jobs.lever.co/allinbits) and apply! You can expect to see a lot more documentation, FAQs, tutorials, and onboarding materials in the coming weeks and months.\n\n**Ecosystem Updates**\n\nOur community of gnomes continues to expand, making tons of activity and progress over the past few weeks. Let’s see what they’ve been up to below.\n\n**Onbloc**\n\nOnbloc has been super active this month attending and co-hosting IRL events and networking to find new gnomes about town. Among other updates, Onbloc has completed the first integration of Tendermint2 JS with the Adena wallet and will continue to swap out their existing libraries with TM2JS wherever applicable to ensure that they are as tightly integrated as possible. The team has also open-sourced the Gnoscan block explorer, so if you’re interested in contributing, hop on over to [Gnoscan here](https://gnoscan.io/) or the [GitHub repo](https://github.com/onbloc/gnoscan) here.\n\n**Teritori**\n\nAnother of our first cohorts from the Grants program, Teritori continues to churn out awesome work and expand its growing team. This month, Teritori has been busy integrating Adena with the Teritori app and working on the DAO contract to build a DAO deployer and various DAO standards and templates for DAO creation. Teritori’s target is to focus on a moderation DAO that can be used for content moderation in social feeds and boards. In the coming weeks, the team plans to integrate the DAO contract into the UI to allow the community to launch a DAO and experiment on the testnet. They have also made an effort to really integrate Gno users by adding .gno at the end of nicknames for people to use. All our grant recipients are documenting their journeys in the hackerspace repo, check out [Teritori’s](https://github.com/gnolang/hackerspace/issues/7) journey.\n\n**Resident Tinkerer, Zack**\n\nAnother grant receiver, Zack, has been making significant progress on his microblogging project. You can check out the specs on GitHub ([PR 791](https://github.com/gnolang/gno/pull/791)) or watch the informative tutorial video, [Go to Gno: How to Build a Microblog](https://www.youtube.com/watch?v=F-_dadxcRJM). You’ll find this especially useful if you have a background in Go and need some additional insights to turn your hand to blockchain coding. Zack has also been working on an implementation of a smart contract for creating and transferring text-based NFTs that conform to haiku poetry standards (find out more on GitHub ([PR 860](https://github.com/gnolang/gno/pull/860)). Other than that, Zack continues his Gnolang journey, “learning and having a lot of fun.”\n\n**EthSeoul, BUIDL Asia, and Getting to Gno**\n\nJune saw members of our core team heading over to Seoul, South Korea, for a week of networking, talks, and events. Our VP of Engineering Manfred Touron gave a keynote on the evolution of smart contracts and an introduction to Gno.land for participants of EthSeoul, followed by a fascinating dive into Proof of Contribution at BUIDL Asia, where we also had a booth. It was an honor to meet so many talented and motivated Korean developers and contributors from around the globe. Seoul is a hotbed of up-and-coming talent and we’ll definitely be back soon.\n\nWe also had the chance to meet with our most active ecosystem contributors Onbloc and co-hosted an event together, Getting to Gno, at the Code States developer academy along with long-time Cosmos builders, Cosmostation. Attendees had the chance to hear about what the core team is building and see some of the great work of our community. A massive thanks to everyone involved, it’s awesome to be BUIDLing together! Read more about our Korean adventures in this [fab write-up by Onbloc](https://medium.com/onbloc/2023-buidl-asia-recap-894c60a1c0f).\n\nEthSeoul - [Watch the talk here](https://www.youtube.com/watch?v=_iSsStlmxoU)\n\nBUIDL Asia - [Watch the talk here](https://www.youtube.com/watch?v=v6k3NHm5vcE)\n\n**EthBelgrade**\n\nCore contributor Milos Zivkovic rocked the Gno.land presence at EthBelgrade in Serbia, giving an introductory workshop about Gno.land, called 'Alice in Gno.land'. Being the first Ethereum conference organized in Serbia, there were lots of attendees from all over the Balkans. Participants joined in a journey through the enchanting realm of Gnolang and the Gno.land platform. Most of the participants were not aware of Goland before but were avid Gophers eager to learn more about the application of the Gno language in blockchains.\n\n**GopherCon Berlin**\n\nThe Gno.land team also had a blast last month at the European edition of GopherCon in Berlin. We had a booth at the event for two days, where we networked, talked about all things Gno, made some amazing connections, and even shared some live code! We’re looking to build an active, open-source Gopher contributor group in Gno.land, so stay tuned for more on that soon.\n\nComing up later this month, Gno.land is an official sponsor of EthCC, Paris, July 17-20. Stop by our booth to pick up some swag, say hey, and ask your questions about Gno.land. You can also catch us at the Nebular Summit for a keynote and workshop by our VP of Engineering, Manfred Touron.\n\n*Do you want to contribute to Gno.land’s monthly updates? If you’re building on Gno.land and want to highlight your development, project, event, or idea, let us know and we’ll include your contribution.*\n","gnoland,gnovm,tm2"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"QQPBijuwoiRzv44AApLR2kiX0WWOpqfutDlMPFvcqYsABXWUvfABJPLMeQBioKO4V1b8YKJ6G6ttmYGaWtBlEA=="}],"memo":"from gnoblog-cli"},"blockNum":"3086"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModEditPost","args":["intro","Intro to Gnoland - The Smart Contract Platform to Improve Our Understanding of the World","\n_Welcome to Gno.land. This is the official site to learn about the Gnolang (Gno) programming language and the Gno.land smart contract platform, as well as understand the motivations behind Gno and our core values and mission. We’re starting a series of blog posts and holding regular community calls and AMAs so that you can stay up to date with upcoming developments and dive deeper into the Gno World Order. Stay tuned._\n\n## What Is Gno.land?\n\nGno.land (pronounced no-land) is a layer 1 smart contract platform invented by Jae Kwon, co-founder of Cosmos and Tendermint, to address multiple issues in the blockchain space — in particular, the ease of use and intuitiveness of smart contract programming platforms. Beyond offering succinctness, composability, expressivity, and completeness not found in any other smart contract platform, we aim to challenge the regime of information censorship that we find ourselves living in today.\n\nBy using the programming language Gnolang (Gno), an interpreted version of the widely-used Golang (Go) language, using a state-of-the-art VM written in Go, we want to lower the barrier to entry to web3 and make it simple for developers (particularly existing web2 developers) to write smart contracts and other blockchain applications without having to learn a programming language that is limited by design or exclusive to a single blockchain ecosystem.\n\n### Gnolang (Gno) Is Essential to Broader Adoption of Web3\n\nFor web3 to grow in a sustainable way, we need technological solutions that are designed for the blockchain with programming languages that are universally adopted, secure, composable, and complete. The main programming language currently used for creating smart contracts, Solidity, is designed for one purpose only (writing smart contracts) and lacks the completeness of a general-purpose language.\n\nSolidity removes many of the complexities that blockchain programming requires (such as memory management, ensuring that the code is deterministic, and understanding how the entire tech stack is implemented) allowing developers to quickly build succinct smart contracts. However, Solidity is only used for smart contracts on EVM-compatible blockchains (like Ethereum, Polygon, or EVMOS) and its design is limited by the limitations of the EVM. In addition, developers have to learn several languages if they want to understand the whole stack or work across different ecosystems.\n\nGo, on the other hand, is a well-designed complete programming language with its foundation based on composable structures, designed by the creators of Plan 9. This allows developers to rapidly accelerate application development and adopt a modular structure by reusing and reassembling existing modules without building from scratch. They can embed one structure inside another in an intuitive way while preserving localism, and the language specification is simple, successfully balancing practicality and minimalism.\n\nGo is widely used, especially among existing web2 developers. It’s easier to learn and can be used to program almost anything, such as GoEthereum or Tendermint. Every part of the Gno.land stack is written in Go so that one person can understand the entire system just by studying a relatively small code base. The Go language is so well designed that the Gnolang smart contract system will become the new gold standard for smart contract development and other blockchain (and even non-blockchain) applications.\n\n### Security Is a Built-in Feature of Go (Golang)\n\nBeyond object embedding, closures, importing of modules, composability of programs, and interfaces that allow you to implement a specific set of functions, Go supports secure programming through exported/non-exported fields, enabling “least-authority” design. It is easy to create objects and APIs that expose only what should be accessible to callers while hiding what should not be simply by the capitalization of letters, thus allowing a succinct representation of secure logic that can be called by multiple users.\n\nAnother major advantage of Go is that the language comes with an ecosystem of great tooling, like the compiler and third-party tools that statically analyze code. Gno inherits these advantages from Go directly to create a smart contract programming language that is safe and helps developers to write secure code relying on the compiler, parser, and interpreter to give warning alerts for common mistakes.\n\n### How Gnolang (Gno) Differs from Golang (Go)\n\n[![Go and Gno](https://gnolang.github.io/blog/2022-11-21_intro/thumbs/go-and-gno.png)](https://gnolang.github.io/blog/2022-11-21_intro/go-and-gno.png)\n\n_Image 1: Gnolang - Like Go but specific to the blockchain_\n\nGno is around 99% identical to Go and most people can code in Gno from day one, even minute one. The Gno.land programming environment comes with blockchain-specific standard libraries, but any code that doesn’t use the blockchain-specific logic can run in Go with minimal processing. On the other hand, some libraries that don’t make sense in the blockchain context are not available in the Gno.land programming environment, such as network or operating-system access.\n\nOtherwise, Gno loads and uses many standard libraries that power Go, so most of the parsing of the source code is the same. Under the hood, the Gno code is parsed into an abstract syntax tree (AST) and the AST itself is used in the interpreter, rather than byte code as in many virtual machines such as Java, Python, or WASM. This makes even the Gno VM accessible to any Go programmer. The novel design of the Gno VM interpreter allows  Gno to freeze and resume the program by persisting and loading the entire memory state. This allows (smart contract) programs to be succinct, as the programmer doesn’t have to serialize and deserialize objects to persist them into a database (unlike programming applications with the Cosmos SDK).\n\nThe composable nature of Go/Gno allows for type-checked interactions between contracts, making Gno.land safer and more powerful, as well as operationally cheaper and faster. Smart contracts on Gno.land will be light, simple, more focused, and easily interoperable — a network of interconnected contracts rather than siloed monoliths that limit interactions with other contracts.\n\n[![Gnolang code example](https://gnolang.github.io/blog/2022-11-21_intro/thumbs/code-example.jpg)](https://gnolang.github.io/blog/2022-11-21_intro/code-example.jpg)\n\n_Image 2: Code snippet from the Gno programming language_\n\nToday, Gno.land is the only blockchain instance in the world that supports Gno but tomorrow, there will be many chains with different names such as mydapp.zone, or mydao.xyz. Gno.land is the name of ONE chain and is not a name that will be used by other Gnolang-powered chains. Gno.land will remain a minimal hub with three main utilities:\n\n* Managing cross-Gnolang-chain fees/licenses\n* To be the (or an) official home for the best smart contracts\n* To provide new models of governance (w/ DAO modules)\n\n### Earning Rewards Through Proof-of-Contribution (PoC)\n\nThere are four main ways to earn rewards through PoC on the Gno.land chain:\n\n* Pre-defined tasks (technical or otherwise)\n* Pre-defined bounties\n* Retroactive bounties\n* Vesting-style rewards for core members\n\nBounties rewards (both pre-defined and retroactive) will be decided with “local rules,” through the agreement of the DAO with everything on-chain and transparent. If one human were to abuse the system, it would trigger and the bad actor would be slashed. We’ll go into depth on how you can earn rewards in an upcoming post.\n\n### Durable Solutions to Improve Our Understanding of the World\n\nOne of our inspirations for the Gno.land project is the gospels, which built a system of moral code that lasted for thousands of years. Part of Gno.land’s endurance will be having a minimal production implementation that becomes a reference for other implementations and a basis for education to elevate people's understanding of blockchains.\n\nGno.land aims to appeal to web developers, dApp developers, and blockchain builders to create solutions that help people improve their understanding of the world. With the barrage of misinformation delivered today from various factions, it’s impossible to separate the real from the fake. This causes a state of gridlock. We are living in a regime of information censorship spanning all important topics from climate change to global pandemics — a vast coordinated effort to prevent people from understanding the truth.\n\nBy just browsing Reddit, searching with Google, and scrolling through Facebook, Twitter, or Instagram, people are deliberately being [misled](https://twitter.com/lhfang/status/1587095890983936000) about key global issues that we all deserve clarity on. This is as malevolent as any type of censorship regime in the world — and we need to come together to challenge it and break the wall of censorship to achieve a functional democracy at last.\n\n### Gno.land’s Current Phase of Development\n\nGno.land is currently running in its third testnet and there will be several more testnets before the platform is production ready. Modern civilization wasn’t built in a day, and neither will Gno.land rush into committing to an exact launch date. However, the next development, an incentivized testnet called ‘Game of Realms’, is scheduled for Q1 2023.\n\nGame of Realms will be similar to ‘Game of Stakes’ on the Cosmos Hub and will reward the earliest and best contributors. If you would like to find out more about Game of Realms, Gno.land, Gnolang, or anything else,  join us for our first community call with Gno.land Founder, Jae Kwon on November 22nd, at 4pm UTC on our [Discord channel](https://discord.gg/YFtMjWwUN7). We look forward to seeing you.\n","gnoland,gnosh,gnot,permissionless,consensus,proof-of-contribution,dao,governance,ibc,democracy,freedom"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"1Gk9+hpM5d63CriXTtE+gFDQF/ZB4Yuxo5/ay7atluo1tujW1IOeMKRtE16Vulq106vwdQ7Ex9pJex0TlJBX4Q=="}],"memo":"from gnoblog-cli"},"blockNum":"3088"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12s3p0rreg5ashpmrmc607hx35zvy0vx7mec600","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"WUQMmv47lsErJlopjS2euIuq/auyEDW6OlB+v/7qkWZ1ovZ4aPby5KVwKJgKIyByEKEyjQYJxiqNyK5ui1NGcQ=="}],"memo":""},"blockNum":"3732"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g12s3p0rreg5ashpmrmc607hx35zvy0vx7mec600","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","hellogno","he"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aylq5Z34a8Y5TIWMhZowBi6UWbBVmOWWOVqFffKRq5s/"},"signature":"HzqdErrVr6GH0RtKBuACcwYNiInd4M68BaELi6QQbFQeCMCwAtqII4BM1NBxTCws/Ctb8NIyGRP4CNXzPYRcLw=="}],"memo":""},"blockNum":"3734"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1s6qhkf9dl02zxq5wva0dyevl40nga43xvnwp83","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"1zGMYpq5ArkvVlT4jqpoA3L4ZBus2s9/jQILwixJYz8CS8p0LC8DBjhmd6XAlmsZFgj45wAyVabhpW2cuSnBxg=="}],"memo":""},"blockNum":"3747"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1s6qhkf9dl02zxq5wva0dyevl40nga43xvnwp83","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","onetwothree",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArgK3+B6W3VsIrWB52viT6AUoUx0a0hEqPGlppXdoPpK"},"signature":"xXJkuFgmr0MclVgJpg0It96FGR0xO9omVqjcRecL4kRtt0p1YXZvab2cu0ash1q+zHjVA1SxGH4A1zHTo58ZkQ=="}],"memo":""},"blockNum":"3749"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["welcome_on_board"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"OlPtc8SaOvaIy21SoWoNj2VVOc/Wi2LMwfXGh39kKj5J4dWw1C44ET6AkxhrAAJof0t6EB8ernbd6dIbCYh+DQ=="}],"memo":""},"blockNum":"3772"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["welcome"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"5dVLEi1/0h/pV21IShlq+sUIVQ9X0Imga4o59qCceipULgjtsAq0F0Prg/y+eGDAnKAZU0vsxk8Fu5ZcvbDpsw=="}],"memo":""},"blockNum":"3774"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["welcome"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"xG+Yh8OJzAzzyrhiAEC8rruCIwpUmhsvlJCldMMU1bEzCtnkMz3y+FHkHuL+97HqYTLwcgsFWYQDvBAdM8F/sw=="}],"memo":""},"blockNum":"3776"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["21","tt1","tb1"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"iVoQHilkG+EpRmIFVoGTs41RhczlivVorNaLJ8bQah8mXfulPnOlCoAVaTF4xp0IFb9Y3GKI0tlUDN1VGuNyPA=="}],"memo":""},"blockNum":"3778"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["21","1","1","rb1"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"rJP0euLREx82r3ze9QtskP+mOhLZX/00fflJw2xDyjFv7/X0OvIvz/XhmolqNOPF81iZxjg7kncftn9tEjBiQg=="}],"memo":""},"blockNum":"3780"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g12s3p0rreg5ashpmrmc607hx35zvy0vx7mec600","to_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","amount":"100000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aylq5Z34a8Y5TIWMhZowBi6UWbBVmOWWOVqFffKRq5s/"},"signature":"J5TdKkqhH/4qaFggcapzyo/c1yTKq1HWnJ+OHaZILIJyldjH2rYdC1BxwDh1Dom3vzLjubnxsA2jAduEWtz9Kw=="}],"memo":""},"blockNum":"3812"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","package":{"Name":"minter","Path":"gno.land/r/test/minter_v1","Files":[{"Name":"minter.gno","Body":"package minter\n\nimport (\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n)\n\nvar (\n\tdenoms avl.Tree // id -\u003e *minter\n)\n\nfunc Mint(addr std.Address, denom string, amount int64) {\n\tcaller := std.GetOrigCaller()\n\tif denoms.Has(denom) {\n\t\tdata, _ := denoms.Get(denom)\n\t\tminter := data.(std.Address)\n\t\tif minter != caller {\n\t\t\tpanic(\"not minter\")\n\t\t}\n\t} else {\n\t\tdenoms.Set(denom, caller)\n\t}\n\n\tissuer := std.GetBanker(std.BankerTypeRealmIssue)\n\tissuer.IssueCoin(addr, denom, amount)\n}\n"},{"Name":"minter_test.gno","Body":"package minter\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n)\n\nfunc TestMint(t *testing.T) {\n\twho := testutils.TestAddress(\"who\")\n\tissuer := std.GetBanker(std.BankerTypeRealmIssue)\n\n\tshouldEQ(t, len(issuer.GetCoins(who)), 0)\n\tprintln(\"Before Issuing 'ugnot':\", issuer.GetCoins(who))\n\n\tissuer.IssueCoin(who, \"ugnot\", 123)\n\tshouldEQ(t, len(issuer.GetCoins(who)), 1)\n\tshouldEQ(t, issuer.GetCoins(who)[0].Amount, 123)\n\tshouldEQ(t, issuer.GetCoins(who)[0].Denom, \"realm/dde02d16adbf1a4ff70e273c871d6de322b30075a0a8a0e7b6cd5a27f5189922\")\n\tprintln(\"After Issuing 'ugnot':\", issuer.GetCoins(who))\n}\n\nfunc shouldEQ(t *testing.T, got, wanted interface{}) {\n\tif got != wanted {\n\t\tt.Errorf(\"got %v(%T), wanted %v(%T)\", got, got, wanted, wanted)\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"ZJzvcvZwBLLPAiuPE3YEqB1VIqvV0LoYBpkshXBlTD9oQRBthyTPFGMZ9NEp8JBtA5AZxyWyKxOvPiKEeCc0Cw=="}],"memo":""},"blockNum":"3815"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","package":{"Name":"minter","Path":"gno.land/r/test/minter_v1","Files":[{"Name":"minter.gno","Body":"package minter\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tdenoms = avl.NewMutTree() // id -\u003e *minter\n)\n\nfunc Mint(addr std.Address, denom string, amount int64) {\n\tcaller := std.GetOrigCaller()\n\tif denoms.Has(denom) {\n\t\tdata, _ := denoms.Get(denom)\n\t\tminter := data.(std.Address)\n\t\tif minter != caller {\n\t\t\tpanic(\"not minter\")\n\t\t}\n\t} else {\n\t\tdenoms.Set(denom, caller)\n\t}\n\n\tissuer := std.GetBanker(std.BankerTypeRealmIssue)\n\tissuer.IssueCoin(addr, denom, amount)\n}\n"},{"Name":"minter_test.gno","Body":"package minter\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n)\n\nfunc TestMint(t *testing.T) {\n\twho := testutils.TestAddress(\"who\")\n\tissuer := std.GetBanker(std.BankerTypeRealmIssue)\n\n\tshouldEQ(t, len(issuer.GetCoins(who)), 0)\n\tprintln(\"Before Issuing 'ugnot':\", issuer.GetCoins(who))\n\n\tissuer.IssueCoin(who, \"ugnot\", 123)\n\tshouldEQ(t, len(issuer.GetCoins(who)), 1)\n\tshouldEQ(t, issuer.GetCoins(who)[0].Amount, 123)\n\tshouldEQ(t, issuer.GetCoins(who)[0].Denom, \"realm/dde02d16adbf1a4ff70e273c871d6de322b30075a0a8a0e7b6cd5a27f5189922\")\n\tprintln(\"After Issuing 'ugnot':\", issuer.GetCoins(who))\n}\n\nfunc shouldEQ(t *testing.T, got, wanted interface{}) {\n\tif got != wanted {\n\t\tt.Errorf(\"got %v(%T), wanted %v(%T)\", got, got, wanted, wanted)\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"d8lOjuTzeUIvlYB5HcNYmhjQw24BSXBV5vPLwYNYNPJtr37Mxpr1muMByRal30AbMxcz3jBWL7qT1hI8HKHTQA=="}],"memo":""},"blockNum":"3819"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/test/minter_v1","func":"Mint","args":["g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","ugnot","1234567890000000"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"6925OmqSdEcbhb4k8zrh4tj0g7R/txXJZjrezd9pDo9gqoNRd26Ah+7rn1J8uIGUBQA3lHPRAUksM1AjD9fqhw=="}],"memo":""},"blockNum":"3822"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g1ttrq7mp4zy6dssnmgyyktnn4hcj3ys8xhju0n7","amount":"123000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"2xBVdwYymd+ZWK95hUPBvUBAqrvF2X3y7w+b13wZSFd/q/qJgANPygSCIy1OPicTIc6LJNtM/2cvKstVaZx8SA=="}],"memo":""},"blockNum":"3839"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g1wyre4gr7n82ezfpdhg3nxypjy9cag9qpku5x6m","amount":"11000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"ZIQRdrtEmGi7qLhLb+3MWuv6FW/VlQh6WyodYq0OwAUOHpzzhX0ppLuLt/QPR7qtxo49CIbSKvjWiP1nDRZP0Q=="}],"memo":""},"blockNum":"3875"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g1qv3dqyw46fut94z9t90jka58saw2e7l99nzqtr","amount":"41000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"6oB7VzS5+QjQT+pf3gYqfgjvvg01OWaSwHLCQOFvpalcrY9qdU/5mkBbW2/PMjeHeh1cWSbURxNdVHtg1iZ3xw=="}],"memo":""},"blockNum":"4103"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","send":"","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","riddle",""]}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"mXsiR2au/kgMTxZgGd+5FNLyuqxg1d5wr/ZHpWWPTFYk6nXCgLPSW0isSjK9G3YIQkpFH1dJndBq10A4vUz2Ig=="}],"memo":""},"blockNum":"4192"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"tong","Path":"gno.land/r/demo/tong","Files":[{"Name":"tong.gno","Body":"package tong\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\ttong  *grc20.AdminToken\n\tadmin std.Address = \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"\n)\n\nfunc init() {\n\ttong = grc20.NewAdminToken(\"Tong\", \"TONG\", 4)\n\ttong.Mint(admin, 123456789) // @administrator (1M)\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn tong.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := tong.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := tong.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\ttong.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\ttong.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\ttong.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// faucet.\n\nfunc Faucet() {\n\t// FIXME: add limits?\n\t// FIXME: add payment in gnot?\n\tcaller := std.GetOrigCaller()\n\ttong.Mint(caller, 1000*10000) // 1k\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\ttong.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\ttong.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn tong.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := tong.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"zhFPR9x4pfebg42HG9IS0+ygUTSNuiCKlFyzBtw3ZakXZmL4eY5iZFzyCJRC2G8AgO2iLJZuE9E1eOWbuC6Mtg=="}],"memo":""},"blockNum":"4403"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/tong","func":"Faucet","args":null}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"BbnGn8/kcGHKwV3uOvjfOLhJBm5CQs+bXq+tM5YUSDBe3PjhZQyTJwA1FpTRurtFxmTog2RwUTANtxJKUwfZKg=="}],"memo":""},"blockNum":"4406"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1flk9z2qmkgqeyrl654r3639rzgz7xczdfwwqw7","1"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"4VTo+0rTLB3YNmWehxC2gGJRXnkBu7DxDpV4vNFEFNp6VDZAlV/gW1YokeCKDXEXujrPgPOWMyRoEF0rQeaGRw=="}],"memo":""},"blockNum":"4408"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1den6a9f40eqn0cg7yl8pt50rw5d7ns85z0mh4u","amount":"100000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"WAo3t2SqU07mJYV5LkVq4iZPf+VYXpECoAAVVn8FpLM2mUo8ZkgPyI2gtkS+HCKv2iH9JaqHZyA7S1RMdtGU9w=="}],"memo":""},"blockNum":"4432"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","to_address":"g1k8p7x84gjcy0recfkzvfgljxyyxdlgu02y6w50","amount":"309999999ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al7LV/X++mUIljzenR1OaxKfue7hfo6UsvOhGCdDtiid"},"signature":"MIM4lbwv/T51b2/enGyrZDydn6uLGuT3D63jkrj7O5RFl25dH5Ma/tyH+xqs6n8M4jgqXxCiILh+CsQvm6wlww=="}],"memo":""},"blockNum":"4527"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1p5eg0ev6wt9cm5wp4wlz0gthw6ktrj9r9gjyx4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"b824d0kxzpd2lAL7LWP6I/BMh84CdguB5El1x7HXhE1B+xDKFHBqWUwyePNC8zXj6bJ88uTNyvjOgPwQEKsUZw=="}],"memo":""},"blockNum":"4529"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g127jydsh6cms3lrtdenydxsckh23a8d6emqcvfa","to_address":"g1wk0q6cfjuch8x76kkylv5fjd9kmtn0kfanz9vr","amount":"50000000ugnot"}],"fee":{"gas_wanted":"50000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApFD0bqBG+7AAM8XJGJXtPCQPf571XuNwriEn4trrXcK"},"signature":"TVaauWzdNhE+9Vt5VkfEldGY81Yris87o5hzWAHKeBgRap9i3ZuSzB4XnY41vqh/CX+o+qFoayzE/JrqhrsbRg=="}],"memo":""},"blockNum":"4951"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm71","2"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"5Q+1gUTaBSwTK+pmTXFdOSrbHw30bmy1rSWpyp/ymd0K2L9BZl/lJpf3UjoueG5/pEn1GUE0x19VQ2KuVvfEQQ=="}],"memo":""},"blockNum":"5235"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1cwvup6rhd4cr3757d9c0vyr9f4zqlp320uxlv6","amount":"10000000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"6yHg4OmErOm7tgVNDz1/eOD/Jyg+/g9sNqYX4PhysWc4JOJdaZFrBZMq66IiR+Svf0nQAUjoTrYae0Dvna1UrA=="}],"memo":""},"blockNum":"6117"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1cwvup6rhd4cr3757d9c0vyr9f4zqlp320uxlv6","amount":"300000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"vjbaW6+MlRRngLhYoT46hTTMEpDxnJXZep9U4fl9m/AL6Tl63zXpSKqTWZHtdREfdxdUj8Ayq6SXRbR13fndRQ=="}],"memo":""},"blockNum":"6119"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1cwvup6rhd4cr3757d9c0vyr9f4zqlp320uxlv6","to_address":"g1sgf6r3fdcs5fdl4u0kdedezc93udjmf5cznmf4","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5352e4DP/NhDY2KRavUFiF67BI22HKz+N90hGxe9fxf"},"signature":"8oMy2ojyR47p2wYvUuCtu3E/hm85yEK5q1mHtmQiWfYqjRP8athU/fUMLnMbiRHPcdTrRoZaScoDwnJRt/YbKw=="}],"memo":""},"blockNum":"6246"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g145mquv8dczc9ym6kehmn5lyaktpss6lm47ms57","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Hc7We7qkE+9I8qrxaVTI5UB8HFGbnnVuzg543H+RP9ZuDuA5QqZ5y4VbouWJBt7Q1oThdH8mHzXlTDT7MzeStg=="}],"memo":""},"blockNum":"6549"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","to_address":"g1epn4870rctumfvecxr0r258veg57qh0jjljggr","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"HhGKjKJ/7cMM3ouWsN+ln636aIGklNoF/oHkBzzQJWMM8IoE0iVazr2MAO4gfVhU2vFi3m8+J9X6ejVhddCSQA=="}],"memo":""},"blockNum":"6678"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","send":"","pkg_path":"gno.land/r/demo/tong","func":"Transfer","args":["g1epn4870rctumfvecxr0r258veg57qh0jjljggr","2"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"wY25mMy0eX2+rKTRe0XmCE13j3jDExnw2HkiWfCN858hX9UrDGBjRMj/eGl9+JIJTZMmbDALkyuvlZj1eynSJQ=="}],"memo":""},"blockNum":"6680"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/test/minter_v1","func":"Mint","args":["g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","uatom","23456789"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"T/kHFUyXnb9TR/u4lbxwJzo/IIbqI34Fw1e7ZFHccQwyYqqyWZwF7zopfUy/mb8QgXlQVHvWfyQ7iGuWiheocQ=="}],"memo":""},"blockNum":"6712"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/test/minter_v1","func":"Mint","args":["g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","ugnos","34567890"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"Jfio+OCTh9bruDNbrO/SEeoguhvgwd4EPslwjSsBr8MaTazASsrYI4EZdV7oUORbcNO159QrYNGqsjD+O7H6OQ=="}],"memo":""},"blockNum":"6717"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/test/minter_v1","func":"Mint","args":["g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","utest","45678901"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"L9nWeQhazeCzSzX1WFEAHaAqNDxjnpTw4acQgo4OEhtCqMpYow0oygF6xwcgzFdUCo8Q3lr7vZctj0+qq1B+sA=="}],"memo":""},"blockNum":"6719"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1epn4870rctumfvecxr0r258veg57qh0jjljggr","amount":"10uatom"}],"fee":{"gas_wanted":"9000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"lF/sVk3pHpLriLemItD4/GhZssV3RMO8UFgxL1+z2SBu0FUHe3lUZ1j9ettWY/W02WpXcRDZK1K6yUrtKz8FNg=="}],"memo":""},"blockNum":"6729"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/test/minter_v1","func":"Mint","args":["g1epn4870rctumfvecxr0r258veg57qh0jjljggr","uatom","23456789"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"gzpno79ln2WUrJhbTqRXvBFd7XitHavk5e0wc/FaBRcpgxVO3jnbhxN8vnUkDWLSn4R+nkjXNharDQMRkdQdSw=="}],"memo":""},"blockNum":"6731"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/test/minter_v1","func":"Mint","args":["g1epn4870rctumfvecxr0r258veg57qh0jjljggr","ugnos","34567890"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"rXi7HVMTlh7RhqBghGo8ZkjuiNyXk2+/29BTOs3TY5lEOxPaRnu7NXxBvm0K3loV4fCpyjO/i18esEOUFW+59Q=="}],"memo":""},"blockNum":"6733"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/test/minter_v1","func":"Mint","args":["g1epn4870rctumfvecxr0r258veg57qh0jjljggr","utest","45678901"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"ymFhCq+oZbTx22teEkUQ6IQqaKInqzVcPSw1Vp0VU2Z21Q1nlUnQOjDLLjRyx2MWQr23bmsI6ARB/A7hI822Yg=="}],"memo":""},"blockNum":"6735"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","to_address":"g14qvahvnnllzwl9ehn3mkph248uapsehwgfe4pt","amount":"123000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5URci9hJassjEJK8dwEUhep/AJr+eQRSE0spEpAwLr9"},"signature":"lsHtzPZRVNJLZPj1J28qXAWpgS9aBsaJEaUbi/Yg/nRsmPR96pF/xBiiaNl5RPYQbZ5BGTaZWl2+bCqImd8REw=="}],"memo":""},"blockNum":"7000"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g14709f5z2wvwqzqclfwv6wd0pj5rgv24x0rfam3","amount":"10000000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"R5rjvLVLsgxG85faRlt29MVewUbeMSpQLjIhlfsJgV0hdZRrLvkyXAz5SLwTP2YrZmJAf0q3MGO+ahsaDiMBVQ=="}],"memo":""},"blockNum":"7002"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g1ttrq7mp4zy6dssnmgyyktnn4hcj3ys8xhju0n7","amount":"111000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"pRpdw3V+9eOa/+JQRoC4vAqELXW2TFi+khs05gh3tRULMJmW1Qelo+gy3YJK3xIs0fwRBBvVcawD6ziyimzAcg=="}],"memo":""},"blockNum":"7421"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1x7lpvd6v99ceg8r7yrsxcytknjpaapwnguq7xr","to_address":"g1jswcws9qhm3tdj3ra4uk5ycug7hxr9cjvjap9p","amount":"499918852ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A663H4D1bmg+NlcGKwnWDs358fSh+InOy2QyFk2MgIro"},"signature":"mdb6cVkcIhTnk8XAm3nULIrVDIH+fZc7LYjLlbZBqUIPXvyal4MZyhNRd2qdUZnpcrU8VkTZASSOymJ2xEFW5Q=="}],"memo":""},"blockNum":"9460"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","amount":"22000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"Cpz9l5h2t1QDktJxzF5hGUFRsmUKkLbBd2k86JvhmnZZ7/ei3M5tI9zvgYBiitiu31ST4NipaBkUmNX830NISQ=="}],"memo":""},"blockNum":"9551"}
