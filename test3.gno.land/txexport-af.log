{"msg":[{"@type":"/vm.m_call","caller":"g1rukp3hvhjls2dpk35px9at88jacqp82043kj86","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["444","Hi all","Testing"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5A0UcAPMw5gX7HdJSCV0l4wcccGMg7U6R2TM7mWYJG2"},"signature":"mvNeo/szCSQFVOfvsHibSpjARBurkEWoWkueCB/q+4F13WA02URK+z9s51M8g0A/l/2sIJFdHQxK/qVKrPTfFQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rukp3hvhjls2dpk35px9at88jacqp82043kj86","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["474","Hi all","testing"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5A0UcAPMw5gX7HdJSCV0l4wcccGMg7U6R2TM7mWYJG2"},"signature":"BfN05y/zn0c0FPbE1pLyMm4I/OsaYMzyF1uQUYh/H7QQeDTBjARAFEYhbMJ1akBmKnhUDDSPmVs6f7aO6D+94g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1s5wna2zzg4qvz3cy62fukzrts6aynr6z5esr80","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"C+gN1dwaCNl/Z4yCBtEwqUy5sy1nLfhyFDdD9PAnYXZJ1UOTnjGxmRIaSlRKbeWtJn3F4bAGWUgoW5mWbQaWGw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s5wna2zzg4qvz3cy62fukzrts6aynr6z5esr80","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","natadark",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxCvBmhLH0pllM2b8EIvcf48ya3nLdfJCGANsQq5DRpI"},"signature":"Y9uDt6TKWwwAvRuu7NHzIbqMu/fUWaFBuKip7PdxltY0Z13MmnmiLhGq79PIn5cAYEoO/NPIG8NFBC9OdJitFQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s5wna2zzg4qvz3cy62fukzrts6aynr6z5esr80","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["natadark"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxCvBmhLH0pllM2b8EIvcf48ya3nLdfJCGANsQq5DRpI"},"signature":"3RH47XFNaYMFVisVNcQkbxWonJ/4r6fBIaG7DC0Q7hopww53tee8JZY1Q3myU5z5g1t86WOYxCLCATy4zIAPig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s5wna2zzg4qvz3cy62fukzrts6aynr6z5esr80","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["475","GG","My discord Zaika#0845"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxCvBmhLH0pllM2b8EIvcf48ya3nLdfJCGANsQq5DRpI"},"signature":"lRVtu+y2xlo4MB+/iiR1ZPQyUOWbDc2uOOCu53GCg98GFNjmXqN6wmDhcY5DlRWAA744pyFi3w2z2wE5v1Y5qg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1cedkukrhqfszl3kaf0hmkh7pcr5za2ntzh0360","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"GsyViGvubYBYN7qiJ1C0X2Zfsnvc5yUy2/b/kUEF2X8ctTp5Ehm9a1OPVRBCy2FUls7ApSP/x07ijl/EiEvHeA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cedkukrhqfszl3kaf0hmkh7pcr5za2ntzh0360","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","hondagt",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay/3Xt9vAx9zJDOIubIN8+MJ4Cylu1rfTFQpUJdvjjw5"},"signature":"a9KmhkEq/NVsOxP39VF/HptgOOdrnGp0ulvYF3LeDsw9YWZ4k+sEPy6kp+rY6oKyoYq9TNKxCEg4LmMprQ1IeA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cedkukrhqfszl3kaf0hmkh7pcr5za2ntzh0360","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["hondagt"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay/3Xt9vAx9zJDOIubIN8+MJ4Cylu1rfTFQpUJdvjjw5"},"signature":"qj6wrVfjNFK4tTAPRWEe1f7gwM68Exw+xQ7i99sE4ld+PH6/BPv6XDlgfkZXjqNVJgVZP3m7E3D/L1W8vs0n3g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1cedkukrhqfszl3kaf0hmkh7pcr5za2ntzh0360","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["476","https://t.me/rosmonitoringsupport","starting and tracking nodes"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay/3Xt9vAx9zJDOIubIN8+MJ4Cylu1rfTFQpUJdvjjw5"},"signature":"a3kQa0smEBjERhlh/HGoxuf+B9v1zd86TMVBUHV7lM94dAhhBOfm+G4Bv6wr7zcvu5aC6gNm95wtZ3SIZoFl5w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1zm4t226pvut5jlcjusdlf8wj0mwnx3ha9rzas2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"cKNIIANBw04vjaMtuVxOxdz3D4vDqwFr/zM3GxDEHk1tNnhSd73gYbmF3CRvYQsxCAPxgx80BLqVfbhKHPZE/g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zm4t226pvut5jlcjusdlf8wj0mwnx3ha9rzas2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","singl1991",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkrD3pXXGFGEj66tApcxIwolGfhmly7PIG3wnQ4JaUrE"},"signature":"GYk4VkBgp38Lg7t8LHpDK+VBDdS9NFcpvZlKGxGNrkUaHfdbS5o5hOYDbD0NqKN/E7J/XLL+Qodvbgj1VWVCeg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zm4t226pvut5jlcjusdlf8wj0mwnx3ha9rzas2","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["\u003cBOARDNAME\u003e"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkrD3pXXGFGEj66tApcxIwolGfhmly7PIG3wnQ4JaUrE"},"signature":"GaN7EsmtziaFPCTi5qlDXuYda1ozFiNS81ysQBlZ4ulHqVZ79kCFe1ho4L0e0zlFbS7Afi4VerSq3JzsYN1ahQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zm4t226pvut5jlcjusdlf8wj0mwnx3ha9rzas2","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["singl1991"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkrD3pXXGFGEj66tApcxIwolGfhmly7PIG3wnQ4JaUrE"},"signature":"o/E/P+a+QShkW0jF4xS+/jJeqvJ9CRCTyi/FXErx651UuDtVIVponUnpD5/r7ZX65E1StbFAD3qvL2FHIc/5hg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zm4t226pvut5jlcjusdlf8wj0mwnx3ha9rzas2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["477","HELLO FAM","https://www.youtube.com/watch?v=dQw4w9WgXcQ"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkrD3pXXGFGEj66tApcxIwolGfhmly7PIG3wnQ4JaUrE"},"signature":"UEi5bxcMoLAMMLWlB9K8+83f4bf8p6etFy3Z3axHWwNfM6TCCEsNoRCz1iNd4zFMJsLbl0iXuk8GtLu+VEvdIg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fqq60jy202n2ykcuchn3ryy99zxkl5s8rntx9l","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"wVBsYbB3BQFJyRVdujoSC1eth4AhDK4P4ziGoHZHLrNL+jTEOZ4vMrHhax7dT5zkbcd3lYKywnQQY3u3RAimzw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fqq60jy202n2ykcuchn3ryy99zxkl5s8rntx9l","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","127karolivchati",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Autq/o1F1tM6xVp0TIx3FReo5G+DIUHFf+5nFuD1jBIL"},"signature":"3ajQTwiXYon70GjzJHBNO1fkuxVtc373KW/4zewAgM45Wi50NpBLjaccEWTPCDCe22Gda/oH5XU9PmCZBhk8lQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g190pxcrendkgxhaeazvv9mvepnama2pf9plvg4g","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"pD5noO9NV+VbZmbwkwvNztjs6XP7+6llNyrQQGEKG4QmLvMXSyqxyQr8IJRAi9Uj04TAHErsdZAH7h2+QRsIMA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g190pxcrendkgxhaeazvv9mvepnama2pf9plvg4g","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","127karolivchati",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvqVXH2jZ1Z6dalhq0N4rkeXL/X/NtXrhd7k1gkaFxeQ"},"signature":"g6iEBADqtUTfxms9d4xOLzFOLTqwXNDQtkwVW3sjXtplhotaiJQa4OmK9LV0Nu8guvMUF/zCy76otoKP0FCt9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1w5rr2wx78vg64cj7l8alfugd037sj6sn2fkeyy","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","lilt1m",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmyO60Yx5EVgTcCBaz9PZi/xrOjmd9Tyykdayg8ax8o3"},"signature":"dWmKE8Bgsa0/D+xpmLOz3Uwv0MJYKoNsNby9UrT/4bMeHvrf9CfkyEtzgJb6jK4fT9ql/09IEijhyL7iEZjkog=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1w5rr2wx78vg64cj7l8alfugd037sj6sn2fkeyy","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["justice"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmyO60Yx5EVgTcCBaz9PZi/xrOjmd9Tyykdayg8ax8o3"},"signature":"hgcSXlYTX7+wr7mUk5rYOwlUIfQTGPJqSCl3kHz+KP120XvAmSuxm8pPxmiMIvt+RBbK5EwousAQxTx8VqxVbg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1w5rr2wx78vg64cj7l8alfugd037sj6sn2fkeyy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["478","LiLT1M","JUSTICE"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmyO60Yx5EVgTcCBaz9PZi/xrOjmd9Tyykdayg8ax8o3"},"signature":"3E6Mytg3DZ4llnEokOoDEKU+nlub8AFmlxLUcuhmLKNI2IpWXSKbqNk8vYYOrA6jjMtl/EyITsffcJGX2d5nbw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g137xn8ptwawjm3zgdum36ye9gdw7eqvk2lhafl8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"yoZm3DV6GN0bplPJjiSZO0w76nzcGV1QRfZauWzLj4IG8kWH9ISIqWzdVJEeOa+tK6yLYXn2Ky11sCjStkbJvg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g137xn8ptwawjm3zgdum36ye9gdw7eqvk2lhafl8","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","gnoooland",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2+SWVzZv51Z6UotX7fe3ApFfDHomcDsSYq0WaJQRf9Z"},"signature":"O9WfBDWmZ3hv5gNvT4inJqMI0KOrc3+jMeDmlzNPS2FA56vi36wSC0m4pV2ByRSpKPa2V4Mmk3SpJTA1DhMzHQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g137xn8ptwawjm3zgdum36ye9gdw7eqvk2lhafl8","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["gnoooland0"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2+SWVzZv51Z6UotX7fe3ApFfDHomcDsSYq0WaJQRf9Z"},"signature":"bmQgxqzUnwI3aLKG106xqbEw3YjuMHZ6ivec52g2xPAm0GZZ4OLS5us3FeMJvhgyAxV1QiSYITn7iboeMJFsnw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g137xn8ptwawjm3zgdum36ye9gdw7eqvk2lhafl8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["479","gnoooland","i\\'m a noderunner and participate in different projects"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2+SWVzZv51Z6UotX7fe3ApFfDHomcDsSYq0WaJQRf9Z"},"signature":"n9X+Eo35IT10MSvlmMgf3WlzCLKtSPcwop6o5xHIHSU0qfb0qhGUoP1vtDsHvdMg3aBPUSZvHvRzQ0aFwqP9YQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1qp4d4g2e3xwlp7q85xxj20zvpld226slfrrzsp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"vhjDu5FHPsMsINqgcPZjrPBb4CFnrIaQYCiUA/P85JMfmLPgsI2Nw7f8drDV+TeDFNdNp+L0dOM1fFneYJ/7yw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1qjhxv8zpzre9f5ve3mdesxn809833vkjg0d99n","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"+u4xMBUCDVSPidnaiv4ZX32mfiPCsomrGjl9+podWxQAz22xWxHUzGcfapUeK0vyPPKX4FH23q1Vw5BXo649ZA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qjhxv8zpzre9f5ve3mdesxn809833vkjg0d99n","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","marusya",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlV8iqcwKFylbz/EfYNzBdVtNOP4+ydgqrdxnInzvuYM"},"signature":"55R10VBoPbc6XBjpExgUHoAqwVbzG+/bPZKGBfgqXOBnnPeZ4c3cL/Ki816K/fJy5mslRqoG5bxtZL1vh2GCCQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qjhxv8zpzre9f5ve3mdesxn809833vkjg0d99n","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["MARUSYA"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlV8iqcwKFylbz/EfYNzBdVtNOP4+ydgqrdxnInzvuYM"},"signature":"MZSwH8gwuSR8JKPhKznM1DolDvisACZvu+kfEkEldR4KdOa3TivgYqZbK+7zc1P0pKhF4ULCrMlPOtcUIqqkog=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qjhxv8zpzre9f5ve3mdesxn809833vkjg0d99n","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["marusya"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlV8iqcwKFylbz/EfYNzBdVtNOP4+ydgqrdxnInzvuYM"},"signature":"ceKmS9Y7FhGK5HrC76SbLt5hWKmxqPFIONir1lJLUBN2An9zw0A7stZaFoYng1qH2zecKcTx6tRwdjISRTUVbQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qp4d4g2e3xwlp7q85xxj20zvpld226slfrrzsp","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","murmurgno",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvzWe1OAqv+NPVwmJ0Wo7vb6KVJG1FYOGuWHvqAAdUpb"},"signature":"nBLAytDSjkNSKgXy9h7mclnXWyMGvsDLPSoVmxCih5pDot7UQqB7lprpFkbeRTwgNmbGetmL1dLtq0ycWYFgWQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qp4d4g2e3xwlp7q85xxj20zvpld226slfrrzsp","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["murmurgno1"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvzWe1OAqv+NPVwmJ0Wo7vb6KVJG1FYOGuWHvqAAdUpb"},"signature":"rR1NjxNP0GaEOuBePyAAfob0tgm8SeqZ3loz7NKLnCgpMQQGw++Yez26BOjxe+QzjVNVOUcKMZ+zNBNvsFECTQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qp4d4g2e3xwlp7q85xxj20zvpld226slfrrzsp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["481","murmurgno1","enjoy participating in new persepctive projects"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvzWe1OAqv+NPVwmJ0Wo7vb6KVJG1FYOGuWHvqAAdUpb"},"signature":"gMlUWLR81zp13USNr1R2NNPREiHryw/4cEQAtIWVsoUIUen8z+TF+ZM3KpLnusMsREirReoIpVRS5w3ITKtb9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qjhxv8zpzre9f5ve3mdesxn809833vkjg0d99n","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["480","marusya","Hey\\! I am Maria and I run the nodes\\! I live it\\! I have participated in more than 30 testnets. I am ready to help your project to become better\\! "]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlV8iqcwKFylbz/EfYNzBdVtNOP4+ydgqrdxnInzvuYM"},"signature":"N/forxgodUiJVuaMQHXfjSHvEhpK0Ql2V+z9EhMHM7E8ZkuCOZIylZ7zA1l8SIdts4zJ21pZLWun1Zg1VTuvtg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hja8a4d72k06y6rstauum0kn4lanf8e7ztw7cq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"NRjwrnTJzF4GQQmCAMeYHr61jOdf4ziO2dFuokeDXc8zdyGcLe+6Z7HeqFMQbalOiLIijpgtBB4VuwqQJvh4uQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vm7l77dvqenwfdqmyf2ryz279td84v8yu86mta","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"qdZtckkoW8jkV+XUQf0gv/S7vRLg61jr7J6An3i1O2ANsJUHMnH26VOM81Lmvzl7HvsgKY1uU/6NuA9ws8Bllg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hja8a4d72k06y6rstauum0kn4lanf8e7ztw7cq","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","dzarembo",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2Mg4bfgkoIk3R8FAYPBeQV2pxTQN3gJTLpiSDtQ/xJ4"},"signature":"3mpwn9OsuUwHcQQPa5yy6s0RN1cpp5413Xcznz4Th4QvfN0nd0Ife+JbXArMtvYjCg60Z4lootMdpVC2idUm8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hja8a4d72k06y6rstauum0kn4lanf8e7ztw7cq","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["dzarembo"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2Mg4bfgkoIk3R8FAYPBeQV2pxTQN3gJTLpiSDtQ/xJ4"},"signature":"H50M6adPDT0pn6Mzm9lD5blakpEyVtc5XjDOXsic7gh9bxgVblEOg+dbz51XZ2IZrVXSDCzBQSJ6UTlCwUUzAA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vm7l77dvqenwfdqmyf2ryz279td84v8yu86mta","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","zvernode",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au0MB5Y8AuAfj0J6h+EW28kg3fzETaBvV4c0px+tmutr"},"signature":"ltIOZKFiL1ZBIF1DngH706LmtLbI+XvawesL2t700fN7IJSoJhvE7hqAIlgRNbBilhC5uTvcbhkRb4Fwkmn6WA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hja8a4d72k06y6rstauum0kn4lanf8e7ztw7cq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["482","DZAREMBO","Hello everybody\\!"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2Mg4bfgkoIk3R8FAYPBeQV2pxTQN3gJTLpiSDtQ/xJ4"},"signature":"tz+HtDJBnvxZNYLpPmSDixN97VALgBmMdQkIPfAfk3Y3L49yjD4qXzAbpkZSe4bnsvEqxQC7lSJGQNhFYmMWjQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vm7l77dvqenwfdqmyf2ryz279td84v8yu86mta","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["zver"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au0MB5Y8AuAfj0J6h+EW28kg3fzETaBvV4c0px+tmutr"},"signature":"ekftRA9CsarHhRdBMrczLP0yXdnBT52N7xVoSfuLEHgR1Su3P14gtFFafRLje5ewf+yV1w5tYqX3TW9bzutEQA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vm7l77dvqenwfdqmyf2ryz279td84v8yu86mta","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["483","Zver_oO","I am crypto enthusiast. I have already participated in many projects. I want to help the project develop and become better."]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au0MB5Y8AuAfj0J6h+EW28kg3fzETaBvV4c0px+tmutr"},"signature":"/JRDA9JF557SAEupxwPEHV1WL0laLzlArrDZX9pJ2spdQzMoJpkUXFnRijDldDPGswKEk3j3IzaJaQIZxAeiCw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p6vx59xg4e3mr5azasfwq06j5nmuqygfpphnua","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","kolot",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A06nBZbY0Ag6UY62otgMh2S+iFf1vel+psuRj1lE0ioF"},"signature":"UakFO+NBxnhg7uCzpES89pzYRJU4H87/fKS7SU5WCikU6+kPjBEHCCQ1DCzi1uzFeeKALoahklwL/HY27VxAAw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18qwwee3sfjynzm4fhustmm3208mgkaen3yg7tk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"v3PrxB+pSivKjUFroj+wvjGNJM2U1IjtWNjjMDq3c8d4BKuiePioQX95K8uKr0S4ChyB2EtNTf9zsS7p9IQFDg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18qwwee3sfjynzm4fhustmm3208mgkaen3yg7tk","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","sydnel",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwFAP7ut2BEp1qdeyQl8Li2QhZkShDnIwZUb0dlW4ZPx"},"signature":"+w4+GQ9x41LaJZg4EtH1q/DQxWAfz7O+8cSJtrak6po3e9CfLfsFF6QiZYeuiG8udLukXThTm3woeTsAnLkE2Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p6vx59xg4e3mr5azasfwq06j5nmuqygfpphnua","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","kolot1",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A06nBZbY0Ag6UY62otgMh2S+iFf1vel+psuRj1lE0ioF"},"signature":"VvPbwtG8ELyTgznPPlZup36NxgU7dQzKco8edCV+zBxtofbGWw1Ca58le+QQBdoWtzbX5Von5WsiOS0DK2yH7Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18qwwee3sfjynzm4fhustmm3208mgkaen3yg7tk","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["sydnel"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwFAP7ut2BEp1qdeyQl8Li2QhZkShDnIwZUb0dlW4ZPx"},"signature":"1FR1o85hhpIkR3JCavtRwrfGn9wMlG3r6s6Rj1mTItN9p/kp+6p56QShezUkCAJU41nv/G4+ChdjMUDvFvikUg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p6vx59xg4e3mr5azasfwq06j5nmuqygfpphnua","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["Kolot_board"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A06nBZbY0Ag6UY62otgMh2S+iFf1vel+psuRj1lE0ioF"},"signature":"zyPusU2XVW51dDZ5s3m60BLELahgmF46XkrEoYZDFhMMW14hxgLbjsUzzU1FKBy/IFZFvXhiLF+nqHQaS2BgSA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18qwwee3sfjynzm4fhustmm3208mgkaen3yg7tk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["484","guide on how to install","https://medium.com/@nodesgeorgia/gnoland-%E1%83%9C%E1%83%9D%E1%83%A3%E1%83%93%E1%83%98%E1%83%A1-%E1%83%98%E1%83%9C%E1%83%A1%E1%83%A2%E1%83%90%E1%83%9A%E1%83%90%E1%83%AA%E1%83%98%E1%83%90-aea71b59bec9"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwFAP7ut2BEp1qdeyQl8Li2QhZkShDnIwZUb0dlW4ZPx"},"signature":"I4iVPlxnMM8fuhCBZvu+NhYThUD+EzmyKgTeEJOR5XIo/gWaM6bgc+wrJFH434ggOHK5tl5TjKJ4KgDHu55kZA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p6vx59xg4e3mr5azasfwq06j5nmuqygfpphnua","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["kolot_board"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A06nBZbY0Ag6UY62otgMh2S+iFf1vel+psuRj1lE0ioF"},"signature":"MEquo/y9TG2MOdmdr8MH0EhJZwYiijOk0vxMxztbRBdcWEVRJHaMC3GRp1+GivvCZTehuNWSRMeeCnx5Dfrm/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p6vx59xg4e3mr5azasfwq06j5nmuqygfpphnua","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["485","Gnoland tutorial ","https://medium.com/@aleksandrkolotov/gnoland-aefdf487077d"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A06nBZbY0Ag6UY62otgMh2S+iFf1vel+psuRj1lE0ioF"},"signature":"a+ZReNFkcw1nR0OdKd2GAD12xjZLBWKpuH4dcpltcE0T3HdJFth0ztXZX6z+Mc3ezEuk9VwfnGFsHqpm+05diw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1agl32yymdxechyh00vkfv4jmdd95ulsm32jn0d","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"F3719Sgya3willL2BtDEnUS3FzezDiqsNHpXuGsv+los3RdK/J76ZcQauNZwe67OeqpuHqky5dUWuEyHUPLfDw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1agl32yymdxechyh00vkfv4jmdd95ulsm32jn0d","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","nastya85",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag+51te5ZL0Gefcufs+yHufszm4sA0ettdNP2ms0OHKS"},"signature":"HIl/U83MNqoydFE+mtzlZ3t9tK9OQiVZ6j+BGrcWQpUbqZ1yxSeGcPHIvmBhFIoXf03/xhBAFpGBeXzl0FnH4w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1agl32yymdxechyh00vkfv4jmdd95ulsm32jn0d","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["nastya85"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag+51te5ZL0Gefcufs+yHufszm4sA0ettdNP2ms0OHKS"},"signature":"q5BJufZQmoniCxdalG+3C5xPIBbFOBteqqYti+YJ19k+2NQmGaXuZtab+nyIlT9viqCLKOoSmsVbiJb/H214Ww=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1agl32yymdxechyh00vkfv4jmdd95ulsm32jn0d","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["486","\\!Gem\\!","Hello\\!"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag+51te5ZL0Gefcufs+yHufszm4sA0ettdNP2ms0OHKS"},"signature":"uPu7KJ2A2YHs82mpt3+qVg7XMNV33FJG4Jy8YNW97c4Yr8Bm6KuCPdxeAevUxP4GPyoya+H9kPR5SxjbXiUOQw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1kt09r4d9wy4c7f0lhum6vnmu28ne0axpl5fcdf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"tpJWffoLYvpx0HEVuP3RgyP7gFzKkpkWKDZLXZ8evc5Zzq5NR6GvPycHaCgjbnX3Z0HujqvOYcAxtf4kMa1Oog=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kt09r4d9wy4c7f0lhum6vnmu28ne0axpl5fcdf","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","zdraste",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzSuY8M+9Ctjx+NrhauUq+8EvCx+cDy3FTmkCypBdRan"},"signature":"/VAmw9+5I+WeHpMM5BZskjo2CbfhzLX8HsBzBN8BWzYPQTlGThG5iGyCFY9md8zCijXzXfO2fbLsCd9HGl0hGQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kt09r4d9wy4c7f0lhum6vnmu28ne0axpl5fcdf","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["maxdd"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzSuY8M+9Ctjx+NrhauUq+8EvCx+cDy3FTmkCypBdRan"},"signature":"I3JVemlw+AKdifiBWvnF7BwA/z1bqoalLeB6FS6mR3AaYnmKatAJ3KkmvpdYs9D4HZGkG8fcghrLZex7or2QKQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kt09r4d9wy4c7f0lhum6vnmu28ne0axpl5fcdf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["487","My social media page","https://twitter.com/iMz0af8gMxAW0Gs"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzSuY8M+9Ctjx+NrhauUq+8EvCx+cDy3FTmkCypBdRan"},"signature":"AWE7gP0jFXl9aH+8j4vlWpuAANXbuE6WzLf67LLl0qU1c4Zqr/gxPAvPFwn6/FyH+0UYQIDCv41rlRe3STAaPQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ezn9zfecleekuv6pr3em2wad20xlwya6tuwwg8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"MSYfP/TRH2kmbFk62zdlKysuQqgPP9WqCeB+Ak7yNig1dCWJUj+BZesINCj4WevZsgZw8p7KB2dMY+eAvccuLg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ezn9zfecleekuv6pr3em2wad20xlwya6tuwwg8","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","pjpj",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArfLAz8Ma8k7pyiZ01QoH1zYH693tHB+IkxtOAcDVdfy"},"signature":"EVBnCXK1m+qhBFzvko9hZuc6HiXRDQ7E6FF4rEIvEGEvtgoBetQLQd5NsHWVpdK2bijGSohT0ShlFjVUU7uIzg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16anjpdafnc45r6lz8j8kd6dfx3d0ut863lc4lj","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"BYyd7CA+MKQyIokRq0ehPb906M7SZoJaAhszklY/DbkbBV+RxFsppyonH9l9rffUP3qZMgTRxHr9goe0Zk14gg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ezn9zfecleekuv6pr3em2wad20xlwya6tuwwg8","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","pjpjpjj",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArfLAz8Ma8k7pyiZ01QoH1zYH693tHB+IkxtOAcDVdfy"},"signature":"GlRuJ1AAWB8Gwy90izlOvoHoXUG84+Z4MsPtKKZkjv8p6qEuETYdhYdNF9jXJlXBZN28O5xz78uwTIJGpQBuDQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16anjpdafnc45r6lz8j8kd6dfx3d0ut863lc4lj","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","kitayza",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqzPBHYX0mrjeDIMxy22hcflzatg1uJzr+P4oxa74fhD"},"signature":"xHSsWcNnUp2m4TbITGEQir7PZZKZhjZ0RGEjmB+n2X4EuqD+pqPartjcab6OkSoL5QlHt4FocN62nLlveK5BlQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ezn9zfecleekuv6pr3em2wad20xlwya6tuwwg8","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["pjpjpjj"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArfLAz8Ma8k7pyiZ01QoH1zYH693tHB+IkxtOAcDVdfy"},"signature":"IU9SS9g7ke6BBj21i6bwCEVg9AAFvio6XrukAd93VhkAf9u2wRoUESlVhh+modWLhv5TYPq2YCb623tMaVi+pg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16anjpdafnc45r6lz8j8kd6dfx3d0ut863lc4lj","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["shush"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqzPBHYX0mrjeDIMxy22hcflzatg1uJzr+P4oxa74fhD"},"signature":"nh49vE0mgj22DFTERO4jSgy0yi7gGSvY0GKRKTP8dY9uIS3kAmBwzTLRKygSDr6gz1d6+NXq4KApaH3caKYIxw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ezn9zfecleekuv6pr3em2wad20xlwya6tuwwg8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["488","gnoland","how to install"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArfLAz8Ma8k7pyiZ01QoH1zYH693tHB+IkxtOAcDVdfy"},"signature":"fqAFnm0gon5+WJ7LEZU8weCr8BYf6CMBxAI1VkUjHndw4FOjgtOC7+8jsQEaCERAKRasapnZNQMJThMXHij9Ng=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16anjpdafnc45r6lz8j8kd6dfx3d0ut863lc4lj","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["489","horray","Thank you for the development of the project"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqzPBHYX0mrjeDIMxy22hcflzatg1uJzr+P4oxa74fhD"},"signature":"N2A5cSog2KU9bsZRjKk/BaL6RU5gmN5CHjaMa11WOkEiDQARx3LC9KjjN3woBsSZxYaorm7A0wCnLbduZFU3yw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1wd29ds6lhefayjcnyasaw749g4amac6y3kk872","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"paVWgdmdeFM2hAbwMtlB5vuL7j0gsYzMRO7bMjw4+xM+U7kdqAaYDe8maKS4FMscHjR6F2LY4+07EsjUuVstFg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wd29ds6lhefayjcnyasaw749g4amac6y3kk872","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","shiviale",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuHLAa1ZBxmMZD9Q74Q4cYfX+WPXnxmpHbKk1mTYvhBv"},"signature":"wIX/EYrpM6fhowFBWQfnaKdrshzZwjGEfgfzkuwEY9QY+bNrfYk5crjm59N6OEVYz7BLPYejUPVAsse3EGabeA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wd29ds6lhefayjcnyasaw749g4amac6y3kk872","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["shiviale"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuHLAa1ZBxmMZD9Q74Q4cYfX+WPXnxmpHbKk1mTYvhBv"},"signature":"OdIGUOvUQeo9LSv3+P/mYzddhGcdznnUCp+tYfgXWKpoKrDnrCfCh87ll1LxwEe64h/vHXfoY/Oy8Wwy948+tA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wd29ds6lhefayjcnyasaw749g4amac6y3kk872","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["490",":)",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuHLAa1ZBxmMZD9Q74Q4cYfX+WPXnxmpHbKk1mTYvhBv"},"signature":"oHTuS5hEP0vnGYBtbJApHp6mB+ZsloApdYgs+/HXjmFN/qTDXQCRI/POY5OJOE0jZp4/fenrSJjXqZNfFV+8FQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18duaegrfjxlwttr5zpmwsmveglyy739cyufgdz","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","funkylsd",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhoWH/HFRkyE1wyi1vrg1wlUO3mFFuAcPsCZckVbrYBz"},"signature":"7fMLQN1a2PYJuik1f4q1zbaASBtQgw4BaXskARohF1FQ446Bntq92p1iMnEZiUdPeGu9RVz40ZtKFMIOMKP9tA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18duaegrfjxlwttr5zpmwsmveglyy739cyufgdz","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["funkylsd"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhoWH/HFRkyE1wyi1vrg1wlUO3mFFuAcPsCZckVbrYBz"},"signature":"aJq3bW6de+aabtporPE1jwDFhD6vPcHbbwo9qh3ZP0433jgdDsFmzTU61Md5pTZMXrGLoDLERjCsihEMcwZOFA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18duaegrfjxlwttr5zpmwsmveglyy739cyufgdz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["491","Guide","https://seainvestor.medium.com/gnoland-%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0-%D0%BD%D0%BE%D0%B4%D1%8B-a0a04aea83cb"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhoWH/HFRkyE1wyi1vrg1wlUO3mFFuAcPsCZckVbrYBz"},"signature":"iR5GxDhRAUtKDS2mFBsGwRLQd4kKL/ZlQMJ9fV5oUzkZu2wrhLJHwXOksjlCn+LQxbPTvytM+/Ad9lcFucudTg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g163zu7dasym4tkvxhlnhdg05ys0fr29jqzaghme","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"fv/mJzgdb9GXCnn297Rh8KjVg/lhr2tVHNUQbAtO3bRxoXjcINm+LkS0uzAMll7fy+vscf1Vx/cUETPUUhrJ1g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g163zu7dasym4tkvxhlnhdg05ys0fr29jqzaghme","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","ricard0s",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmTFSbAQJtQ+n3rgsEMwcXAy2lSgJObXLkf9onA1hWWj"},"signature":"c6j73+WjEXQ7mDzfqDS/Yfj45WskeZuYidEY1BzWVV0J3xBmv9i4WqXw9OuJph/pW+yQ02lBM827vKbgl5Dwow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g163zu7dasym4tkvxhlnhdg05ys0fr29jqzaghme","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["ricard0s"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmTFSbAQJtQ+n3rgsEMwcXAy2lSgJObXLkf9onA1hWWj"},"signature":"o9babDsbEZ4yNlSAAkRN7rJO3dRkMxZ0U7V833k7ylAt0z39N6+ASI8n5wZ5eqrU99yWfIFqiqC4zYTSuCqMYw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g163zu7dasym4tkvxhlnhdg05ys0fr29jqzaghme","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["492","Frutiger Aero","https://www.youtube.com/watch?v=mVgS96GMmbg"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmTFSbAQJtQ+n3rgsEMwcXAy2lSgJObXLkf9onA1hWWj"},"signature":"VPbXrm//klbU6Py75dx5ZOkz/IFUV8acPyFBgzqt2ntOGgOH4H6wj8QlRRbuLGi+e4b/sRfl02rXEbEiFVN+Eg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1zxvytw69j59m6nl78rv6nspkma9yrge3h033s6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"4TfZGYPqFBgtkjMGhsuQlhT/themdEq3H/UlmNb0JTguFDyISnatYyUWtuxKksRz2bINzsi1Lz96xn5DjUGddQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zxvytw69j59m6nl78rv6nspkma9yrge3h033s6","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","magarottg",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/Nd0x+pf6ojkm6uZ7oO0BftC7HiKbu5DSwG+SeQtTq0"},"signature":"1c7QlBNcLW0OQJh0/qYw7SBb1HbhlfwSc9u8NptQ5Rg6k9P9F77WRfiuGgXmdjTvrc+xw/y3VgXqy1fNR5SxAQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zxvytw69j59m6nl78rv6nspkma9yrge3h033s6","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["magarottg"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/Nd0x+pf6ojkm6uZ7oO0BftC7HiKbu5DSwG+SeQtTq0"},"signature":"n4MiOWbFR+lu75qw/0HQeguDaS7hKoIlTapm80Cv0Ihmxccjq7/1bbPH3s981NC4kF2oiayn9zxxj8bmg8DELQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zxvytw69j59m6nl78rv6nspkma9yrge3h033s6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["493","HI WORLD","https://google.com/"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/Nd0x+pf6ojkm6uZ7oO0BftC7HiKbu5DSwG+SeQtTq0"},"signature":"WXXiWmPYLqQHLfFkTaaQVax60bHhjMBULXX6yQatOpRSmtx7Q0+KQ2ci/3FI1UBCow58t/wiPGXHlTXVNyAeyQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19pql9yjln0x5a4kxwdajeyhga7nznp3mh0ewd2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"tqDSxF1ssH4HlTGwhb532yO9EoJE+0UBsbMfPn7L32cO+nGgjEmpEsAiFK7SPZ7iGvtA5TcDsXnlFYQWYfS90g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19pql9yjln0x5a4kxwdajeyhga7nznp3mh0ewd2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","elena",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArkdQUuQLkSBcWyVFOqlPmQvynN5ACZG6V4VMK6C9cIt"},"signature":"YjeI0ZNwzTzq4bD2dT3Ny8Cg+38UaIzkDsXp3mflclVcb8Q6HfZSJKrKcXtetos3wc2P+Lc0gE9LuIcVncCVTQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19pql9yjln0x5a4kxwdajeyhga7nznp3mh0ewd2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","elena",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArkdQUuQLkSBcWyVFOqlPmQvynN5ACZG6V4VMK6C9cIt"},"signature":"dXW6gp+B0tNHxyoreyK+hPeHWWUQs3GvenQvo6+DjA8IyQLIe6zfxDWYMjVcr90IQnfbRoJg9jQ3HUfZMGJVtA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lrdfcvxrpn7tnjphsym26gqwft3a69xqacwjdu","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"mZ8Cee6pI3YRxxK+Mg31/g0CQUc61c/0k4+XEOiiH8ITBvg1/kk4+HQC8qgTJThnw6f0rosss2/Ah+GGEVlw8A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lrdfcvxrpn7tnjphsym26gqwft3a69xqacwjdu","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mashaa",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlHVfKoyfjGaxDEyRKP/BEOjXo5upkExNQItG8RQirzX"},"signature":"n6JBqXRWzllpj1IE7E8TuC4GTeHnWCt1KsgSxlJOjdIxAyEavoHu7w48h4C9Xa1iOofsc5wTOU8ccTbt0e050Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lrdfcvxrpn7tnjphsym26gqwft3a69xqacwjdu","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["mashaa"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlHVfKoyfjGaxDEyRKP/BEOjXo5upkExNQItG8RQirzX"},"signature":"dBxWPPUFyT4A9AeHxbi4pyhIIw+RNV7AMlL/9JUrG/53WFrKbLgXGEm41vFAgl5Y7gen6OurNLwVs6VM7/jw9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lrdfcvxrpn7tnjphsym26gqwft3a69xqacwjdu","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["494","Mashaa","Hey\\! My name is Elena and I love installing nodes. There are already about 20 projects in my portfolio. I would be happy to contribute to your project\\! "]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlHVfKoyfjGaxDEyRKP/BEOjXo5upkExNQItG8RQirzX"},"signature":"/V3sHmHsjHHOtP9Bf30JGBdGw25i/cs/+gFV45IrSFUALGEe435eTo1v54IsrMIwTiQgKXype8Kty8R3oE6IqQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15z0ghxak6gjv2l4xnxutm6hlntqcl5fg6aktxh","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"8iopxHJGYwjgURSLJksN9boUD6Erc2vHW0ALs9EPihsXcZ6vmVU20H0hBSg2OlBQJeH/XPO95bENF9eqe3qFrg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15z0ghxak6gjv2l4xnxutm6hlntqcl5fg6aktxh","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","gnoland_dim",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ao0qNnuzzqd2fYolu+gDh+PzQ7QJEOWwx09WufnPaT5r"},"signature":"NEelf83yzH1FDRMluASJQ5iVkhQmtB5Pkb3S3QBFrXMYQTKT0QK3LdBW8gT9WlCxcW8SYjcmivfjSy+9WySEZA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15z0ghxak6gjv2l4xnxutm6hlntqcl5fg6aktxh","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["dim_st"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ao0qNnuzzqd2fYolu+gDh+PzQ7QJEOWwx09WufnPaT5r"},"signature":"5xTQCYfL7lHZAemOJEoowRGlLAHJK+P2sy1vSdaQrz8/L3ond+Kzd3AxHHWbJ6q45ViZb4j3wZslIqO5jY2q+w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15z0ghxak6gjv2l4xnxutm6hlntqcl5fg6aktxh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["495","dim_st ","I participate in more than 20 testenets . I ready to help your project\\! "]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ao0qNnuzzqd2fYolu+gDh+PzQ7QJEOWwx09WufnPaT5r"},"signature":"fPEGl5+DuRaOEftWFqx7fk3QbIrLrvFQ/aziid8ItaRcP4iIyROx2/JOxAWUsJtJPRv66Rm7eiRfM2CMXelkRA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1zsrh2qtj704c4n9dl2jcl5q2y49y8zlwdpf60l","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"x6+ThTrdHB5VbdH27drJiP3YDsLshlsWaxDLJUKxe9Eff0/rEt0Ea5qnFM/CFCz8uRoEBRbcRWCROD4NIyvzkQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zsrh2qtj704c4n9dl2jcl5q2y49y8zlwdpf60l","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","sirjackob",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuXK64pWDHqS9dS1q+cr29+TrwK7/+870AmHo7gWAUEw"},"signature":"u88mYkF63CKRYQ8qnlwr9KqhpzrkjaVdgo9fOiKZ6N9ncmhKn0X1epYmaKjPdiqRjK/5CLVo+bI3zSJxlT1wPQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zsrh2qtj704c4n9dl2jcl5q2y49y8zlwdpf60l","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["patricksir"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuXK64pWDHqS9dS1q+cr29+TrwK7/+870AmHo7gWAUEw"},"signature":"MGRF6P/6lrLdc/W8FY4DJ8KMBIaqVC1F0nDGWcwLeVd7DqG8FVMCe9L5FtPyHKABta0b2I3J2zTwQ6UQdeLyMA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zsrh2qtj704c4n9dl2jcl5q2y49y8zlwdpf60l","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["496","sir jackob","I am a node runner, testnet user and crypto holder. I am great to be part of GNO testnet 3"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuXK64pWDHqS9dS1q+cr29+TrwK7/+870AmHo7gWAUEw"},"signature":"3LUF03j6L/6mh0gklUvnw1NtZ5qvXVWHiPbKsrbHCwJyxcAUC5pI+qYw/90l8owcQ+jYnYBCGrP91JA2GaT7Ew=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1u378u3gn5rau3nzhsd0eettfq5h3adp7suxjtg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Pm/xfQ5nCdv8RTDYXRdrbrmi2UkJ+LW8qVt+sLaeTh9HKJZBuSt/JatDXhgNAjCsQUOUt6Dlvp4FngqA0l6W5A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u378u3gn5rau3nzhsd0eettfq5h3adp7suxjtg","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","gavana",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3rdZ8Zg+ZXCgI656eMF2zAnh9mGqgGS9Xt3Rad/QJcJ"},"signature":"Tn2EoMjFzJLIHpqUuJQbDw+E/LPkfaWRrZczREC5tiMVgMLK7XjuQ16vty+Jo+19NdJMPL8NudVGoLeXHGNGfQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u378u3gn5rau3nzhsd0eettfq5h3adp7suxjtg","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["NGavana"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3rdZ8Zg+ZXCgI656eMF2zAnh9mGqgGS9Xt3Rad/QJcJ"},"signature":"UP5thKwBEMlW8qIMfMQ9r0WaeLMqqajJTnpHCbAvPloXKps2rpE9ZWM28SxN7V3UiXA9eUYILbTfC3VYofJciQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19xlg2jf4lmlv9tkrlx36d9nxxc8t6qfv3j20ze","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"j7U+9faUwIPUrNbJeqTGet4CcwN0mncrzHWTNjVjm1wKldHpig8GilHtKJTNDyepVdrHDKgAMthDZ6Ru2RbiqA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u378u3gn5rau3nzhsd0eettfq5h3adp7suxjtg","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["ngavana"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3rdZ8Zg+ZXCgI656eMF2zAnh9mGqgGS9Xt3Rad/QJcJ"},"signature":"urncTfRlO0E773uvn1Bqs5M48vLFP8XK819+So42XU8v1k1pNRvH8HPQVk63xVWftqRfOXYCOHxAezg4Cc0Zeg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19xlg2jf4lmlv9tkrlx36d9nxxc8t6qfv3j20ze","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","viktorovich",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A49baCUeGXlmhpragMU4JU7YnVh4jHA1/VPFfM63MZvL"},"signature":"K453mLsSCfpp1vv69/YiapXXzZeLRj8oRWhkb6n0E5soK2lItfCqQKqhP2I7NrGIDrJAGq+WcL9aAAc1+1IoEA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19xlg2jf4lmlv9tkrlx36d9nxxc8t6qfv3j20ze","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["klasuha"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A49baCUeGXlmhpragMU4JU7YnVh4jHA1/VPFfM63MZvL"},"signature":"hPU0N3zdxRu5UtuboepJKutqE/dmMs6UgdNOKs9CF8lHz7GCz+Q6r131YZ0e1GdPniPAY4O5N3X0NRPygSoNLw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19xlg2jf4lmlv9tkrlx36d9nxxc8t6qfv3j20ze","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["498","vikorovich","Have a great weekend, everyone."]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A49baCUeGXlmhpragMU4JU7YnVh4jHA1/VPFfM63MZvL"},"signature":"kOByM6VEgLOk7sPpCOnw2KPpvSC1v8VLhLBetnTj+PZA4Gj3GX3xc4k62zwBusbq7j3kjpQTFvepZxucVRq28w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u378u3gn5rau3nzhsd0eettfq5h3adp7suxjtg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["497","gavana",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3rdZ8Zg+ZXCgI656eMF2zAnh9mGqgGS9Xt3Rad/QJcJ"},"signature":"5c8WjwY3oI5X3qocOkoF0Zf8sTLQEqKx7FDUlFhZ3k0TtkGgLWcLJQPVOncCJ5RSWg0n9WZoYemiQngorMyLSw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u378u3gn5rau3nzhsd0eettfq5h3adp7suxjtg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["497","gavana",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3rdZ8Zg+ZXCgI656eMF2zAnh9mGqgGS9Xt3Rad/QJcJ"},"signature":"X5IhlrRfSDC0RUq78eiHyNr8BTmK5wTmJspzMiUHFyUBFIiGoHAdIA9LtwPwie0sUYElKlJv7EA0/Zb4EGsLoQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18v6hqfvwvavqlkexnflt7xfry4xtf86z5zg4z2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"gCiIw7xIBndJfNr5ZNRcQzN6QmNY1sNP8vWa/ZvwH85TRrPkhOcxfTzze8HKj+ycP02vXf1tq2sqNTtbHLPobA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15p5u8ylelgjauql55zzjuhl4epu8c6tw3askz4","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","holders_harbor",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApnNinIBZdfCo7qYuMKKBHFHBT4LzMbLgKso8hhTNsP9"},"signature":"MlHfbnMFTIPPD1X4XlX/aLbUQewD5gMrc4icwFK9Gs9/r3m3Mq64On4I0KaBEnjQqqDjFrXrlG0BIYuj4SqWAQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18v6hqfvwvavqlkexnflt7xfry4xtf86z5zg4z2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","oleg",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Amfu/7rv7GJCSqS4WGfOLqILdcL7200UgSsnT2bNfJ7y"},"signature":"VgPddVG2FolETMkBDDHivw6yDTo+T0Zf+VvvHTa8YKZ95qXKg6MWtpYjJm9nMUh+D6nKP1BJ4Qs/H8r/4hdXrA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18v6hqfvwvavqlkexnflt7xfry4xtf86z5zg4z2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","oleg",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Amfu/7rv7GJCSqS4WGfOLqILdcL7200UgSsnT2bNfJ7y"},"signature":"NrOV9Q1QyxYr800z64lX7PpfFYeRciS1Dl3ghjTE4D5ojIwuaKmuClZkEwTzeR73ZQwcrpvHNutFdV5T3I9rXQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18v6hqfvwvavqlkexnflt7xfry4xtf86z5zg4z2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","oleg",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Amfu/7rv7GJCSqS4WGfOLqILdcL7200UgSsnT2bNfJ7y"},"signature":"/LZmZ0Mbnqv2qCn7gbnMe7JlCdqBhrTxU+mLvvdvajdaBLAOkT9pIX5eLGCKtWSLIWOV96Xdqk1VpyKDxwGMsQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18v6hqfvwvavqlkexnflt7xfry4xtf86z5zg4z2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","oleg",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Amfu/7rv7GJCSqS4WGfOLqILdcL7200UgSsnT2bNfJ7y"},"signature":"AiiPORnUysJzGvD5MtX9GirAYLiYw4VYXjpP7AbS2os0wpYW53JLac9qxYPo3Yh9Rff86yXtmWxjiTQmTPrQSQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15p5u8ylelgjauql55zzjuhl4epu8c6tw3askz4","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["holders_harbor"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApnNinIBZdfCo7qYuMKKBHFHBT4LzMbLgKso8hhTNsP9"},"signature":"dBPef3qmLkntse5AzadWJQmrxxv30qIl1jvztQr7Pt9gXg9VU7lXPhM45cYzxkRlh3DT7nkcck3cvFlz5tMcjw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18v6hqfvwvavqlkexnflt7xfry4xtf86z5zg4z2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","oleg",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Amfu/7rv7GJCSqS4WGfOLqILdcL7200UgSsnT2bNfJ7y"},"signature":"2ysfTyTIoQK2P460o5yUISjC/HMxiuFbM/Y0vG3pX70QSDxsoYUa+7dTj8B8gPosziOeB+f/EChvxoGRS86lbQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18v6hqfvwvavqlkexnflt7xfry4xtf86z5zg4z2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","oleg",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Amfu/7rv7GJCSqS4WGfOLqILdcL7200UgSsnT2bNfJ7y"},"signature":"gO6Cj1LJvW8pb7275kW5KI0TmtlIZnzai7HDk783DJBHiEZfuHVqALmpygXrtI+eYHLWZQdRYc9tkIU+TbVAmA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18v6hqfvwvavqlkexnflt7xfry4xtf86z5zg4z2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","oleg",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Amfu/7rv7GJCSqS4WGfOLqILdcL7200UgSsnT2bNfJ7y"},"signature":"f0auiVRGTsAmYckzr+qCFS6mE6eWLWZ6bnfa9cCM9VMuEbzgRTOqfZkggrku+bkJFK0F+OA/HqV98Ciheh2uNg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18v6hqfvwvavqlkexnflt7xfry4xtf86z5zg4z2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","oleg",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Amfu/7rv7GJCSqS4WGfOLqILdcL7200UgSsnT2bNfJ7y"},"signature":"Krq2JOnpHZZfl58UZ5SOPvkNZiPv7IlaWJRWOHUyT1t3vCJU/XrMXokLWbrWfYT+miK5epl4vAX+NxJwSgIXKA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18v6hqfvwvavqlkexnflt7xfry4xtf86z5zg4z2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","oleg",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Amfu/7rv7GJCSqS4WGfOLqILdcL7200UgSsnT2bNfJ7y"},"signature":"6CeeLE6nB6Yk/h320au3vZH+kvQm0isCyKR1Z58hYGwRCSJVGMPSZ9lOuWf6+tBhTZLCJEZ5kG7utlhdXDmaTA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18v6hqfvwvavqlkexnflt7xfry4xtf86z5zg4z2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","oleg",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Amfu/7rv7GJCSqS4WGfOLqILdcL7200UgSsnT2bNfJ7y"},"signature":"n0vN37t+n+Ou2VcVpZ+EhZzGPQkfMS2ZNEaUXJuns/k/BYUNHhP4owv64+0nIIYDCzJi0Ub311+Rw0yncv032g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18v6hqfvwvavqlkexnflt7xfry4xtf86z5zg4z2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","oleg",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Amfu/7rv7GJCSqS4WGfOLqILdcL7200UgSsnT2bNfJ7y"},"signature":"M+kFb3H1XUPVRKaah6tmaQSBGwW3YbTBRV92NBK/6tYy3V/xW2A4nIidpEB72p4T9nIzj2GOPCbWu9ubE2z6wA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ry600fm7wgekavaxp5saf745a2r5zzwz3qjlt0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"WDrppW1wxFyVEZx25oljtD4cfUYhPaEJgfr8ptbfBZ4wugTJgDq88P/+/6Sf5IxeOlo6wuysw7hC+ArzChYTkg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ry600fm7wgekavaxp5saf745a2r5zzwz3qjlt0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","gnognoland",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtW7vF7c5OjM8qBMx0wVJAJ6ad0O+tz9Q2TMx2UHxPbI"},"signature":"zoSFZXpgd1Qs899ZLeyQEq7OvR6JpQqCQNjlgwRvlLl2RP6nVTxwHE6lMAWdwUwOOXMAJkdGwdKfPccEalY0yw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jy2tq4aklgnc2w987rcc9acyhz8g8cs2kwpmv2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"fSKZgCL/N/Gun+XPTwuWbe7/Ay89RMz+BYh7M6L9YzpT+uqIKzTS17s7Muf987azLqGY01EFSXwesDJ894VFeA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ry600fm7wgekavaxp5saf745a2r5zzwz3qjlt0","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["gnognoland9"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtW7vF7c5OjM8qBMx0wVJAJ6ad0O+tz9Q2TMx2UHxPbI"},"signature":"cd6HqmYBfDPlxWnPeIMJqxJsWI9Epjeexf8I/Q3u/aEJhwo8JzT6xccwHpeLDRWK0BhUYFQV0CEP6s4p0RsAZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ry600fm7wgekavaxp5saf745a2r5zzwz3qjlt0","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["gnognoland9"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtW7vF7c5OjM8qBMx0wVJAJ6ad0O+tz9Q2TMx2UHxPbI"},"signature":"wy91lcmeCKkyNr3kEx5fM52WpPkGzVqei46jTBMZdTQvn5RlGJMU3Upx56QMTqBSb98IUxt6XZj3ZAtvqILKAA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jy2tq4aklgnc2w987rcc9acyhz8g8cs2kwpmv2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","oleg",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj9J/oHJokM/+44t9TRJHTBniZo9IZuCVAF+r9JRVb/x"},"signature":"foAYfUyebo0J/8Etm94aBMTZgeMZfh8icA5lzNw8RLoIk8MRdA1ukKsx+MAqpoo255Jer4zJtsMs7cJk6oTKhg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ry600fm7wgekavaxp5saf745a2r5zzwz3qjlt0","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["gnognoland54"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtW7vF7c5OjM8qBMx0wVJAJ6ad0O+tz9Q2TMx2UHxPbI"},"signature":"rsfxEzJO+fTIN8RBpfExe91ydz+1n623FsixmL0sPVFCF9CGUHudJLKXV8DfHnegtmWLUxOXB32E0YKZWKRZbQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ry600fm7wgekavaxp5saf745a2r5zzwz3qjlt0","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["gnognoland54"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtW7vF7c5OjM8qBMx0wVJAJ6ad0O+tz9Q2TMx2UHxPbI"},"signature":"n6fy2ZTniioBrwdAl2146zEZFy50DkWqGM3cpw6OuH1pMK8+jD+kgxC52H4WoWFdlfNNk1dG+pFwhJZsF1vh5w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jy2tq4aklgnc2w987rcc9acyhz8g8cs2kwpmv2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","oleg",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj9J/oHJokM/+44t9TRJHTBniZo9IZuCVAF+r9JRVb/x"},"signature":"fPmVMbtFjr9N6J/5AT24hr9gkP9afIOJcoUkw0LPaQlrHsxEbwXn8rVma5wjNQtSxhZBUM2DRNxBwi4JkHZsJA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ry600fm7wgekavaxp5saf745a2r5zzwz3qjlt0","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["gnognoland54"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtW7vF7c5OjM8qBMx0wVJAJ6ad0O+tz9Q2TMx2UHxPbI"},"signature":"ytrCQrkbR3HxIhsxm3/GaAqLHbZWWsL5vXmVa5wufxZolfmfKJkXtTlkbRP0eCF8F7d8a11WxOchAGUeXNFlcA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jy2tq4aklgnc2w987rcc9acyhz8g8cs2kwpmv2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","oleg",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj9J/oHJokM/+44t9TRJHTBniZo9IZuCVAF+r9JRVb/x"},"signature":"hZywr5X6NsBj9/h3i1le9chzod44ArG7m5tFuEV7AWAvTs3IA1F5xQnpL3JPGtqEC8PsW0lOL1T3WNhU1d81Bg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jy2tq4aklgnc2w987rcc9acyhz8g8cs2kwpmv2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","oleg",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj9J/oHJokM/+44t9TRJHTBniZo9IZuCVAF+r9JRVb/x"},"signature":"7SiOs+/z8XGVwA637qIltwF4tpflRycpxsBEAdO2xGQOWAtZMUndzJmgrYfh2+8yl3MemQEywxtLzPO3WLUTjQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ry600fm7wgekavaxp5saf745a2r5zzwz3qjlt0","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["gnognoland54"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtW7vF7c5OjM8qBMx0wVJAJ6ad0O+tz9Q2TMx2UHxPbI"},"signature":"HbarWlJfyOrxco4Hhu1a3xeIDSodSqGdXWcmfGHsHqI//zMlkTrQsOr3NzJFfpRWI9SdWB3XeLdGnoVrLSkSKg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jy2tq4aklgnc2w987rcc9acyhz8g8cs2kwpmv2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","oleg",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj9J/oHJokM/+44t9TRJHTBniZo9IZuCVAF+r9JRVb/x"},"signature":"IV46rDJWho8BErNmIJCMCwhSQDyzhtj4yvLu+l7SH4QX1+vpYfFHCo7NsFtdtvCwemg2bZwqnx7TO4KcuLMC7w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1zxk2rk79kg8gzcfxj5qjsqr55klnu92gj4d3dt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"mjK+00pj0rhieQcjIF0f9HswZ7pWKza/MomwpEaZTMw9+1J2VH1UEM4sOwdM3sv4s1UYlALWs1ZE8f4Eg/+83w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jy2tq4aklgnc2w987rcc9acyhz8g8cs2kwpmv2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","oleg",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj9J/oHJokM/+44t9TRJHTBniZo9IZuCVAF+r9JRVb/x"},"signature":"Bnf4wx4Lw7qvVP6qor9X1QCx1nseek2cSATUy3fbyW4Qs7M8JuE8n5TsRBBbrFDHvDoZsy6EHMH1rr2mWvzJ1A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zxk2rk79kg8gzcfxj5qjsqr55klnu92gj4d3dt","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","vdvvlad",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj0Ti3UDIyxQq0BKUeVjDViVW+iHnwIeGhl8GjV35ctQ"},"signature":"LD+vTIajeQdHgYX00DnI6cg88pcxXXsvLuRqGVFvpfJxgGIXLRW1JQSvPyLN+DODJdWxLw7oWRscw5rHuYuBKA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jy2tq4aklgnc2w987rcc9acyhz8g8cs2kwpmv2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","oleg",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj9J/oHJokM/+44t9TRJHTBniZo9IZuCVAF+r9JRVb/x"},"signature":"jMeBKQvQ09RwgeD4ukweleoi7/kAkfeHuKCvCnyYXNAIwFy38NfSK3fxeiZk3xsMwLOypiBuYpWwjMYDR8l1qA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zxk2rk79kg8gzcfxj5qjsqr55klnu92gj4d3dt","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["vdvvlad"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj0Ti3UDIyxQq0BKUeVjDViVW+iHnwIeGhl8GjV35ctQ"},"signature":"SEe7q7xqgaCgKJkQoF+8sohqZUg9J6oBGenb491EwyUr7uEZZpjjhuLS5Q6cKp4svt3NoGfHtSj+bzkG42UOWg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jy2tq4aklgnc2w987rcc9acyhz8g8cs2kwpmv2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","oleg",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj9J/oHJokM/+44t9TRJHTBniZo9IZuCVAF+r9JRVb/x"},"signature":"ZnKCAiEg2XHjixf7dHy5LIF0RG5MdPGOrFGcqoFDWGVDzXrOg75ERcEbhWcgEhQ3t10V783KdX9N8FR/GAM9mg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zxk2rk79kg8gzcfxj5qjsqr55klnu92gj4d3dt","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["500","wow","it was awesome\\!"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj0Ti3UDIyxQq0BKUeVjDViVW+iHnwIeGhl8GjV35ctQ"},"signature":"fsQw1iGcEKr99pZFab9fH+AW752eDL2tN4vXs8xWEqcZUchY9gIofnMm8Rp7uNxZLR//mjgv8E5JhS8cHXokcw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hrxnvlvkh3z3u8uyqwh4hnut5gt66zfj6mxxwr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"OyhHe7mZ6ix/UwZwFAjHk69DiIh+Qo0DoJSCh48lDXhS+ll2cdPUodFkJS83ekOG2y4gs11Hc+vODnZUvhdhyg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hrxnvlvkh3z3u8uyqwh4hnut5gt66zfj6mxxwr","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","huawei",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6/metjjRcUBidRQbyQNgOhFuNY/U69MGh2Kz2UrFYKT"},"signature":"Osoqywl4cg1AgS522fI3wxbok3j+l87MnQA36VU98EtglrmiLQ9ddRJ1iXC8seYXNm6gGpcG8pokzC2lV2hS7w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1h2857x6zpd5723duezuteyw9u3m97txtq2n5ah","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"p+y4HRujmEj3ErH+cxgBK159zZJsofgQx0bEmQ2NlLMrEsEHJv9wuL9x8hKTOYeVOUzJMh6Thm5WLU8RviSMcg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hrxnvlvkh3z3u8uyqwh4hnut5gt66zfj6mxxwr","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["huawei"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6/metjjRcUBidRQbyQNgOhFuNY/U69MGh2Kz2UrFYKT"},"signature":"eH1IJ8N7lFv9wTEGbHuvZoz+AVr30ve1TgeCzKMzuPgz1f2AP3O4COHAjf8ijJANOA7TeyC57T8MEqjucPjdxA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1h2857x6zpd5723duezuteyw9u3m97txtq2n5ah","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","POMAN",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0uleH311z9Q6Sk6PgiZEfYW4M4Y2tuUuYB1ckR6Cy60"},"signature":"MwhFivGpiGYu36IrzLj9+CH8ej8wqbAsducvDEOesCYF2tNYCSZgovpB8SxKj6edsBfPtj6e8WK9cC2kmFKgFQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hrxnvlvkh3z3u8uyqwh4hnut5gt66zfj6mxxwr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["501","Gnoland","Gnoland has adopted a new Gnolang language, which is a fork of Golang. The obvious advantage of Golang in comparison with other languages is manifested when working with parallelism. While most programming languages, such as C++ or Java, use multithreading to execute parallel programs, Go uses Goroutines."]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6/metjjRcUBidRQbyQNgOhFuNY/U69MGh2Kz2UrFYKT"},"signature":"98VPSJklsb36Ij52wr7f6UWow+5an25xL3ee22nJWIQDJO0v5z3CT7gA+xupLlzi97ifVQhrTsSBE54l7upeBg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1h2857x6zpd5723duezuteyw9u3m97txtq2n5ah","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["poman42"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0uleH311z9Q6Sk6PgiZEfYW4M4Y2tuUuYB1ckR6Cy60"},"signature":"39XlXHpipamVi/mtVyneR8e7IgxlY9QYtXCsSvzT0dJf7kDbCTmYwqvp4KZ+rwRRYJqBJWqOGwevpcXEAt+PPA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g193p5xnhd6v3a2n97rk57daafc3hvdza6q539j5","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"X6mBOfVLqXAY2QP5m6BknI92F1OX3OdO/btaGBH2M4k8ACC6Ge8skHbPaQm0AldxFMDpxbat4RxqvqrbEst+6A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g193p5xnhd6v3a2n97rk57daafc3hvdza6q539j5","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","gno123",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1YxX18pGPLY0N5CDX/5WIWG8+QNIZOqkO/DJU4ixsQ5"},"signature":"W413xrgxds0K2R75OTo+eFwLNFFNv3BOk1KvqFLI/YNS/Q141zlDzfP++Mi+axsXkfwEju8d7/N1sJaatewntw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g193p5xnhd6v3a2n97rk57daafc3hvdza6q539j5","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["gno123land"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1YxX18pGPLY0N5CDX/5WIWG8+QNIZOqkO/DJU4ixsQ5"},"signature":"oap4m5y8ZS1vU9Z3WUvohVXHTu8qB7nPDYr6Tho89+tYeng3StMUkcFL23StU8q1HsTiKGWaNBeRDbh4VTOOBA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g193p5xnhd6v3a2n97rk57daafc3hvdza6q539j5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["502","gno123land","i\\'m it-specialist and tester in new opportunity projects"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1YxX18pGPLY0N5CDX/5WIWG8+QNIZOqkO/DJU4ixsQ5"},"signature":"m5HiQGVjloxJHCMDppNXKLhslqUQIY4P4UhgNzR2M5AOjGmxJbH+MamIJiW37TlvLf/g8FS6VKSqmb9U0Fc0Lg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ha5s6x9eaznnjh3lwrruenpxw2r0kaefn4z8g3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"XjuT1abUl0OZBWUSbvbde1BwVPwyNIcSbd4cxKqF1dobGLBEDipYflL/OjKXZtBV/GfhyEhqTXxFduHIuPCVkA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ha5s6x9eaznnjh3lwrruenpxw2r0kaefn4z8g3","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","flora",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7JlZPqarYUf/m6rUxPEKGa8LV6pvuiXP9gINnESHKzD"},"signature":"qp4VZ9RkxRNiS2jtzNs/N0IIAJ3Nub5nDBLRoiUFJExNRLNBmmyVQHZcvcebVVev9a6IJ23ZcRKiEVxqjtoC2w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ha5s6x9eaznnjh3lwrruenpxw2r0kaefn4z8g3","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","flora",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7JlZPqarYUf/m6rUxPEKGa8LV6pvuiXP9gINnESHKzD"},"signature":"D783SyRvhTkX72PhbcbdlUJv7YxnUmUl5ZZgIRSDANMgnsiCBx1ORLCJUYhfhPZQf/qLdDJ2FZZlfSIPITGEIA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ha5s6x9eaznnjh3lwrruenpxw2r0kaefn4z8g3","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","flora",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7JlZPqarYUf/m6rUxPEKGa8LV6pvuiXP9gINnESHKzD"},"signature":"PPQSLs25ETfeWwbHUmI1YFiKp52CFbZqWR2GgqE/vFNRHUSyaD6dtgcMU4rO8qHO45Y7Ubm92Eun3N/bPGZVBA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ha5s6x9eaznnjh3lwrruenpxw2r0kaefn4z8g3","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","flora",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7JlZPqarYUf/m6rUxPEKGa8LV6pvuiXP9gINnESHKzD"},"signature":"4VLf5wzRg9VSYqJQOUj1X9FFeZjktognQ5pSt9TzAd0iKKKnoDUr0mnXjr9Nw6iYrTdCJINtrhbHxyqd5ud0xg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12ddxk9yh3h2raj8xuatqueh7vmfhcj4x8mvhn7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"oBCIiv/Oe1Uzp4vlcQJ6VxW3ujbcfWXqN2V+DbZYE05QWZDLIHYA7GTvxBjsc0bWYvxQgwybiyh85pOWzcYQeA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12ddxk9yh3h2raj8xuatqueh7vmfhcj4x8mvhn7","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","lalaone",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alk1x29tIiOw8ab1KKvGLzjwIXC/DfGOkjaErxoQsuBu"},"signature":"0PamCaQ3PfJKiIhIBADD6uNtxTpZkBLmbFTHRax7c50G5SMwEEEDWKGIsszc5N/Sh86zJIV0N4mfFmuTaUTj3Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1h2857x6zpd5723duezuteyw9u3m97txtq2n5ah","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","remezz",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0uleH311z9Q6Sk6PgiZEfYW4M4Y2tuUuYB1ckR6Cy60"},"signature":"m+4X73iwlFoQk+CXuOZWNuevMio6bQL6Yvgr4fZ4/6YSm+qIKED3C/0jSik8tRYWL3i+Q4RVhRtjfswd0WGe/Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12ddxk9yh3h2raj8xuatqueh7vmfhcj4x8mvhn7","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["lalagnoland"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alk1x29tIiOw8ab1KKvGLzjwIXC/DfGOkjaErxoQsuBu"},"signature":"v5pj1nAMwu43iZ7b8SgJm5+3GZE3FcnLzb8K9CSLANp0sRRG5v+ZAoxy+5YLqpk6MvOaggqERfiTTjDuVe9yBA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1h2857x6zpd5723duezuteyw9u3m97txtq2n5ah","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["remezz"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0uleH311z9Q6Sk6PgiZEfYW4M4Y2tuUuYB1ckR6Cy60"},"signature":"fLwnYw+WVRlhVRAyeqtTkwBEZGAeQQLKWAuwVo5HjP0jo/cBYKLrRTjPVlR6WClK7HQtTKDxSiXwvQrk6rR1AQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19js9jjrzshedj00phnlhsqnqljm8wlkaurpksv","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"tj1pGQ9fzsKhLj+ltPo/W1NRUcn02Q0wWQkyJMQlnVgGryRhNWq09O+USHwY9iWAUW2zFI6zSKObAlBSpF9SBw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12ddxk9yh3h2raj8xuatqueh7vmfhcj4x8mvhn7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["503","lalaone","i\\'m a beginner in programming and enjoy different new projects"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alk1x29tIiOw8ab1KKvGLzjwIXC/DfGOkjaErxoQsuBu"},"signature":"a2gUstE+XB5/jCzCEbUEDefLJVI/87s0q/lmDedVa0AStb2Nf6mDIJ/BocRTQ4WYuz5xQKVQQVc9wQZTo3ESBA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19js9jjrzshedj00phnlhsqnqljm8wlkaurpksv","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","august",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9ug8URQtdTRDHXBoddJyL8LgNujMtkTi4AYwkWRwlOZ"},"signature":"B+KQD+CT4QvxOXrf+tFWM8qlzyyist3M+9HpfOKD4F88C5L261C0GB08zCEQu2YSD0Kx+oCz5RQpavtvBFcThQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19js9jjrzshedj00phnlhsqnqljm8wlkaurpksv","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["august"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9ug8URQtdTRDHXBoddJyL8LgNujMtkTi4AYwkWRwlOZ"},"signature":"0UG6XpHK6Ogpg75PlnouB0WfJ7q+ZrcSyk/7tHLS1dErH733waFbRAockt1EzJQH4ChpcbKEZwnCPI0Rx2BH8A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19js9jjrzshedj00phnlhsqnqljm8wlkaurpksv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["505","Gnoland","Slow, expensive, unintuitive — these are the stereotypical features that come to mind when using or coding applications on existing blockchains. Despite the large influx of capital into the blockchain sphere in recent years, there are quite a few developers specializing in decentralized applications running on smart contracts. The probable reason for this is the lack of an effective platform for smart contracts that developers could use. We believe that Jae Kwon is creating Gnoland to present a productive blockchain capable of executing smart contracts that takes full advantage of Golang and advanced hardware of modern computers."]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9ug8URQtdTRDHXBoddJyL8LgNujMtkTi4AYwkWRwlOZ"},"signature":"DXpmt/LE7LipfZyFyAzIE6txUKNkJsVmpy8jnc6OHRARBWg5aWrNoY/QCrj7yrpbWwsLifF5E+BsBtpYGlbbvg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1h2857x6zpd5723duezuteyw9u3m97txtq2n5ah","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["504","","Gnoland adopts a new language called Gnolang, a fork of the Golang. A clear advantage of Golang compared to other languages is apparent when dealing with concurrency. While a majority of programming languages such as C++ or Java use multithreading for running concurrent programs, Go uses Goroutines."]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0uleH311z9Q6Sk6PgiZEfYW4M4Y2tuUuYB1ckR6Cy60"},"signature":"wdlsybLSDweC69FJLdXD+jR3jdu8VXXFYrE8nES81OpSKERsq1mZQsxfrMdOyHlm4XITUT4jCxZz89P+UcdK+g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g175zwswzdejls9sr5q90mfrkuhfykl8lns628ng","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"9de+KjiOiLVT+PwNzysRdJoXJZMBxBk1x09+mewmNiNFazez5P1/ZJ8ww5/huLgJx8VCojtgQQYG4pu866ursQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g175zwswzdejls9sr5q90mfrkuhfykl8lns628ng","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","leninavedas",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnEJw/unxpaK4pIpgI3nk/NSKot8LTD5EpzyzuJc4m3S"},"signature":"6xnWtojg5A6cvrExrhATYvwPcrqMcGD+FaWbjKTsEygOx26dl5xAKtxiTKKvlRic6lT5eSxEXsLaXKFc/L3F7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g175zwswzdejls9sr5q90mfrkuhfykl8lns628ng","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["leninavedas"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnEJw/unxpaK4pIpgI3nk/NSKot8LTD5EpzyzuJc4m3S"},"signature":"OH309GjDbWWsit1Q50L43SoJlYS+GXR2kd9fmHL8tKYTJ4kcaRULUjED2hsJeRc1c1ZSdceGV2skBdaKGmijrA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g175zwswzdejls9sr5q90mfrkuhfykl8lns628ng","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["506","https://t.me/lenina_vedas","I\\'m a crypto enthusiast.I am engaged in the installation of nodes and maintenance."]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnEJw/unxpaK4pIpgI3nk/NSKot8LTD5EpzyzuJc4m3S"},"signature":"uoH1kUkWZZ8SpTHghWRSk7KM2oA07SQgDEdPsF0hc+YpEDwMLopf3bLdDysd36q1n9nOtEMeeaX9sw+wjpT9QQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15p5u8ylelgjauql55zzjuhl4epu8c6tw3askz4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["499","",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApnNinIBZdfCo7qYuMKKBHFHBT4LzMbLgKso8hhTNsP9"},"signature":"+Sm8gDXYghCNW/cnDEh9z/5DyNuyXZt8vRqyZomphgJFRqKcl0Q6KRd/8qVaW00QnDrVbryz95901VaFyzgnqg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15p5u8ylelgjauql55zzjuhl4epu8c6tw3askz4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["499","...Ilya...","https://t.me/Karamber"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApnNinIBZdfCo7qYuMKKBHFHBT4LzMbLgKso8hhTNsP9"},"signature":"HDd/CHuD/UhRz68LZnelndzYR9Rvbi++rUwFV5J3Q2wCtPgj9xKIuhxEws0BQ1mZ//ZZbUag+5cHDVKigpiUpg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jgxyl7j37xvfx4kd04je6unu7d440g3v8pcxvs","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"3rT/zjsHC/qobc1I5hQwwhRU6JDIRaZj1wlfpxMFW7gKyHEIbT8quTrAN2Z1aVFAAEhXWYwvDwTwUEm+9c1OmA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jgxyl7j37xvfx4kd04je6unu7d440g3v8pcxvs","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","alisagu",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwU+poYECAEW38Am0ciqu5TO9zLc1L75MvgGfbQXlH5r"},"signature":"n7ehpR7z7TnEGH+suj1xbdY+aUQD2s9lFlmYDN+WWZZ8QMhKnhTmM2f8oEDV3OUk4h1xkfbHl7sMclYnoDU27A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jgxyl7j37xvfx4kd04je6unu7d440g3v8pcxvs","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["alisagu2"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwU+poYECAEW38Am0ciqu5TO9zLc1L75MvgGfbQXlH5r"},"signature":"WIkI/mTkygSjGIJ9zINlLR96y/OxIXXzGnns+IRQmMNOujDbqxqo5VBQ5dA8vt47oCEyS0QmR4COz7Rr5NIJPg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jgxyl7j37xvfx4kd04je6unu7d440g3v8pcxvs","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["507","https://t.me/Alisa_gu","The blockchain sphere is very interesting. I install nodes to understand how everything works."]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwU+poYECAEW38Am0ciqu5TO9zLc1L75MvgGfbQXlH5r"},"signature":"Thjz2yyG4WtPJY5PSQI5FMq9R5KfTazsHi1Y1KIYoodnnvfQf790Aje2oz6CQs44y/VSmhZ45K5FAgLPYuad9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19j3zu9hywzvp8t5em9n8d5kldr5z0ddr7q6ghx","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"47iXDIC6kyz6RCouOEwvfrxbMiCFYcBoKigwPYtN9j5xH4CPyr3z8/3a4Y8Om8xwRYKZSSG59/eFK125K9CYpg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19j3zu9hywzvp8t5em9n8d5kldr5z0ddr7q6ghx","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","alexey",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag8kIWRYrjQTNw6vFCM2DQ0KKO0ttfbqed9zx4tLUlOq"},"signature":"JmNYB/Q4K6tVI6K1NSfSoA1aya6DKq3RAcM0YcNeflRbdq2AB38ZE9F+dNYI3b6xJPBpmFY4//eb5vzyc2rAqw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19j3zu9hywzvp8t5em9n8d5kldr5z0ddr7q6ghx","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["alexey"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag8kIWRYrjQTNw6vFCM2DQ0KKO0ttfbqed9zx4tLUlOq"},"signature":"p76exg962ZnwIwShyPZt+PAKd8z9U30lzgazBzfCQ1VURCt7Pim+Aiw3CuKt7v3G3i7dRZcVe3at1w9tv6MprA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ae5ad25ghzujpx2pst87avkpq5tz7xpzsf8wzf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"IyVWFPEmNMb+qVQsFjw4k4yZNra7xKlXyCEZZk0FzlM47SIYaoShJA2gF1NWloIbGKm4/Zjjquelr+1GVc5nHw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19j3zu9hywzvp8t5em9n8d5kldr5z0ddr7q6ghx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["508","Guide how to install a node on Russian","https://seainvestor.medium.com/gnoland-%D1"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag8kIWRYrjQTNw6vFCM2DQ0KKO0ttfbqed9zx4tLUlOq"},"signature":"8mAbpVQ48TElW9fYNz6Vi+aGwnWAwgIrKZpdiu99jPk+II6SY61NvW7nFaKJiugo4ihblHi+yT014J9au7hR9g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ae5ad25ghzujpx2pst87avkpq5tz7xpzsf8wzf","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","shevit",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiOCa66FFKRzpAjUvpXSRaSNqgImXI0lIt42i5RO+3Kw"},"signature":"VsTJzt82qR3zHhcynEmT3ViXwavYV6EAJ+lMxn7Jm6NmuEPk2KZ3acswZ6Eo+8I8oidnuT1PIv73AVw54hh1NA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ae5ad25ghzujpx2pst87avkpq5tz7xpzsf8wzf","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["shevit"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiOCa66FFKRzpAjUvpXSRaSNqgImXI0lIt42i5RO+3Kw"},"signature":"Q9hj5QzNbCQ9nTo+wgJ/y5XpTP+SFA44lPwZq1pXwlUHr07TNMXn9YtZDEgLSFxO6cxerHrvU/U5t3NOIlBmmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ae5ad25ghzujpx2pst87avkpq5tz7xpzsf8wzf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["509","check node","https://seainvestor.medium.com/gnoland-%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0-%D0%BD%D0%BE%D0%B4%D1%8B-a0a04aea83cb"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiOCa66FFKRzpAjUvpXSRaSNqgImXI0lIt42i5RO+3Kw"},"signature":"5HVRoabD8K+I1bJ5Mrivpt8leYeZ06JOmAR32F30wvMbCfcm/QtRxlwOFGcrWplKMDyY42UUqcr02AvUi/FFgA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1s9ud98cj4250ygh7rh357lvas7t8r7j0xpujlh","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ZKN6X3jpeXw1h/SWstYowYUf6E6/a6v5ovK77kjRTVEBZQorKtV/g4VfgCVopHi181Qb5SCSKO9mVt5UWBBR2Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s9ud98cj4250ygh7rh357lvas7t8r7j0xpujlh","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","shishkalub",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoYk4c/JE/cqoAULRBT+zGS7jqPhdGDPcSJx+cWbfuZU"},"signature":"Bkj4WiQg4uvwrztdbesgDS7wfmArfYv+xZlga43XDDIxE8Ek3Ng4RsB3cSj1Riixp9Vr+TGSzPHjA72FB9NNEA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s9ud98cj4250ygh7rh357lvas7t8r7j0xpujlh","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["shishkalub"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoYk4c/JE/cqoAULRBT+zGS7jqPhdGDPcSJx+cWbfuZU"},"signature":"eNEc/kLOFb60VyCJz/IWRpgXAYz0EKL3tFsU2QtQVu9oKuPmRTxSF3RAqHp/safLKTKo1C/OhBLAvdbQH3XHTg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s9ud98cj4250ygh7rh357lvas7t8r7j0xpujlh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["510","I like the gno project","cool and interesting activities"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoYk4c/JE/cqoAULRBT+zGS7jqPhdGDPcSJx+cWbfuZU"},"signature":"hmX3xvNLkZk4t9puQ8Qp45yMLr+bR+lG3w/FriM46Qcro8vVyeB69FMu73HkVF2ZxRikLLDIGT0mWzfWdLvUtg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g13pez00wts7uvtd7chnkg7axcc4fvp23hrxzv5l","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"9Y7gvaX5GVE9zThP4GBqSAYN6PNu0FuMpSWPK3R459UFhtz/cH4+zvPk8LAP0wStvLMLlol2zm+F3NHNZ0zXaw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13pez00wts7uvtd7chnkg7axcc4fvp23hrxzv5l","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","11zim",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ar30NaXDJJe08L6Ubpz6uba0gL1a+BDbdmhLdZ02To+V"},"signature":"0eKpJClWITR1gMzkZnLFRXA/YtvWWK7mH/QDlDgkDgtnSb2V8fYIGgrYNlly8tIcnFwc0L9xzNnp3vyGDJNaRw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14mt0xa80k6vdvj532zalhv8v20h0dghrnjklac","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"x4DNvur68vxAADgHNXsx5GEZ/z2zuThFRlu8s+UhAxlJNikqVoPqBl9iZdzdQTc/Y/6C9lr2nxttRYJpM3u4Kw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14mt0xa80k6vdvj532zalhv8v20h0dghrnjklac","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","cfound",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiKlm/wMAN0vMNf/ZKDlgof7pt/y/zlR8bJLZWXVeHJP"},"signature":"jU35zHcB0NnajLa2Tdg4W0x8LJjcEnlN+QCnko2j/Ax9TeVgY+v9uzh/dh0SKKcOAh0GG9k4D1rQsXV1bYZMEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14mt0xa80k6vdvj532zalhv8v20h0dghrnjklac","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["cfound"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiKlm/wMAN0vMNf/ZKDlgof7pt/y/zlR8bJLZWXVeHJP"},"signature":"0qIPqy4OPy2a1mWBYePJYBkWFZNXJ39Uz2N71m5uK1U6tbIpkU9z76xetApg9DDQZXCTKQyRw1SnkGmcjpk29g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g13jw0022q0es5dgwmkdwdtgl0jxsn9jae4kahdy","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"8mHzGmhfy8ci5Ufv+1Op4iaN0ye7yzMUM5rO8w6X7jZ2lZa+w96aeQ4Vo8m/376bL3VTIwhHJ94/VfVY87OJMA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14mt0xa80k6vdvj532zalhv8v20h0dghrnjklac","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["511","my first post","Hello. It`s my first post."]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiKlm/wMAN0vMNf/ZKDlgof7pt/y/zlR8bJLZWXVeHJP"},"signature":"6SQHUYw5Enq7OnCZjLKQ/QwyT1DwFmq+weQ7TSFI16MqtVbANXqMXbEE2D/rofpjxqVQKt1Bs61SHAopDLwK+g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13jw0022q0es5dgwmkdwdtgl0jxsn9jae4kahdy","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","saffonov",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0qzobKlZuVNjCxyZ6nFezGcHiJzM2isB2qp5XvB9PQ6"},"signature":"je8lv5Hfp578cE7zLvAUg06pll6nRn2HNgui3+CBwmMXbE/ze04GICNNxb5gNGGDsIcEwhgpg7IZsEnpVzWenw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13jw0022q0es5dgwmkdwdtgl0jxsn9jae4kahdy","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["saffonov"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0qzobKlZuVNjCxyZ6nFezGcHiJzM2isB2qp5XvB9PQ6"},"signature":"0lnaFIPq3dFUJ2m/i1E5vGyflmPLRaDk0WnuJHZllM9TmsW0ap6pAXslJCwj40mJu526ZrfuPFZhycCGO+wUpg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13jw0022q0es5dgwmkdwdtgl0jxsn9jae4kahdy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["512","hi team","im saffonov"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0qzobKlZuVNjCxyZ6nFezGcHiJzM2isB2qp5XvB9PQ6"},"signature":"5A0Cg626E43OuCq19+7HCe3zBahjSREOkt2CGpNaaj0+6h8WvpWVkisnSGfR+BSduz5dshvRbuN0ZGDxHojd8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g13zp983uq4rz6au05y0w8as9ah3y3a40y60zwnp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"eG5XBDkdM/NtOvozzckwdE1U04o89oHJNdonsuQSdmtHqza+YTJsnu1KIevERMr4GLNVMi4I8tTtBl2Vi5dqlg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13zp983uq4rz6au05y0w8as9ah3y3a40y60zwnp","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","gggland",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlB+jFW/9102jg+z1j9hfvjHC5m3HjTilxXHRV9B5ut8"},"signature":"ExN3YslQJfB3hOCkKrQ5DsmYKIvBJlgxO59swK7acSwnVYKSEndHzCzt/xCLuvt/Bply11TE2CmTx4ff2VlrNQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13zp983uq4rz6au05y0w8as9ah3y3a40y60zwnp","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["gggland5"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlB+jFW/9102jg+z1j9hfvjHC5m3HjTilxXHRV9B5ut8"},"signature":"Hge0mllZzVIaKi/kY3F1OZl4tPXjgVF3tCkqIQq7M9x9c0QFoNL2IqvhraQKRyNqv+Y0H3b3jehItdu5o+ZhLQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13zp983uq4rz6au05y0w8as9ah3y3a40y60zwnp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["513","gggland","we are team of noderunners and glad of being participants of this testnet"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlB+jFW/9102jg+z1j9hfvjHC5m3HjTilxXHRV9B5ut8"},"signature":"rExzIu/0msVGtCNJ+opaufxhFN7IqP6NBUDW++RtVWQvaLv66IQYBGAep3OTyirVMP6aR9onXarpkbMbU4uTxQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1m86nylwn5lhqnguw7xz2txwa09yssxuflf8xcl","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"fDSTGAtCSPtvVcB4wMTtFWp3hazGTdEIFfr4KgQGrzhDZY8/yqa6v2CTJmgdWQZ+isbjEWQeJfmLgsH8jaQ8iQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m86nylwn5lhqnguw7xz2txwa09yssxuflf8xcl","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","teriktori",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjC/0wXLYWp5pyKRILAEg1/pFBDUS0wuOqMoRfy7QGU/"},"signature":"BuDDFKXhS6esRdBzoOvo9nbJBCbLolpbGRzRHjd+L8w09UmvifCcH1jNKSnrZF/rWMJELItcRTwCZfsA3Wv5mg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m86nylwn5lhqnguw7xz2txwa09yssxuflf8xcl","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["teriktori"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjC/0wXLYWp5pyKRILAEg1/pFBDUS0wuOqMoRfy7QGU/"},"signature":"WCXWeSI/5ffTRgjO0ff/+k+70NbMNJoqSlaniW5enHI/y6TrP1JLb3+QPPWuqOA2AduUyo//Jzp/3Rp2Idy3PQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m86nylwn5lhqnguw7xz2txwa09yssxuflf8xcl","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["514","hello everyone","I would be happy to meet everyone"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjC/0wXLYWp5pyKRILAEg1/pFBDUS0wuOqMoRfy7QGU/"},"signature":"I1GtrgHNuF+wfQFStegZ4BwEYRrzYpDjZnrU7CfQrJBJR2VKxPNeSHD11acsR0z5Rqn0e2XmQxVNe6OXIdVg0Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1pa7z6rue6y8ww2rhm5gh5y85kffhmsn8429hff","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"mXt7wyNqkjl5KiBdCOGzjKXRPuCdKQsJ4n6rMVrETbo1eN2fuzZhR1IR7Q55IwteUCw7hhTKPi+sGnJSR0ztJA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pa7z6rue6y8ww2rhm5gh5y85kffhmsn8429hff","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","sidoroffalex",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An2Qe7iuKzeNwG+/mpNFFghDMSrfeBVKHO+8o2I/XeDU"},"signature":"EoSIwaTYNTc3GhvPXKGa8UWVsTUf7/WTIKBhLMkx+/ldmPAKXaLctFHdXzewJqeRHZ7zGgXxQsQ0SI+20D/pWQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pa7z6rue6y8ww2rhm5gh5y85kffhmsn8429hff","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["sidoroffalex"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An2Qe7iuKzeNwG+/mpNFFghDMSrfeBVKHO+8o2I/XeDU"},"signature":"3AuDfs/fQomWAE5JaPMN9taeR6atCkesXLY1c+UHt+kK9YyCqBnyLM/0tCOjJ5rKeCfhrUwqEfNGF4q9vHvbRw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pa7z6rue6y8ww2rhm5gh5y85kffhmsn8429hff","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["515","Installation of the Gnoland node","https://t.me/cryptokhalyava/2665"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An2Qe7iuKzeNwG+/mpNFFghDMSrfeBVKHO+8o2I/XeDU"},"signature":"RApI6RuoIZawdyA1kV8O6+bpVnclpZVzppvH3jl1zBIH4mh91YCRX7nc5BKuK8CPv85EV9qEcglLaKc/ocqZdw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1whz3j6x3erzmcssgn70gx5df4886d6s4hgmawu","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["chegevara"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8f7AjykD+BdcPzpfXrU0NICEalg9l8Ewks1RqsvhWnT"},"signature":"wUB2jWMQ2ZtpBa8B8UjyIMhm4JljWt6AbpRHP079vupxDF4PT/70R4mJA5LOZBzFkMyqMsTypVW2EZir/JHZmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1whz3j6x3erzmcssgn70gx5df4886d6s4hgmawu","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["chegevara"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8f7AjykD+BdcPzpfXrU0NICEalg9l8Ewks1RqsvhWnT"},"signature":"EqpzJErfH8qro5X+cKcNfXFXjL+caVhh37ZOCXx8l11fH2QjRk2QkidoxJSEdCwB1gyC1BEzFFdc/643cVVeFw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1whz3j6x3erzmcssgn70gx5df4886d6s4hgmawu","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["471","Validator and investor","https://medium.com/@AAchegevara"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8f7AjykD+BdcPzpfXrU0NICEalg9l8Ewks1RqsvhWnT"},"signature":"e91XQ6pnq/JicAVMeqO2/zhmQFhEe0j1Ozv4JLLKqjILw1gz/qBBjQ5oPopwLmiWWl5KU2AIc493yN89wbBhpQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1a0nfhtgjdj00jvja93ecdffz7f0g08cu44gk6a","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Bxei12BQ2oWIXtVPnNLNebT6mgVILS+eTAysU4/s6nM8j9Kqu1nQSC2taZICE7vIA1WmVC6ZiwfNXjEdj3afGQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a0nfhtgjdj00jvja93ecdffz7f0g08cu44gk6a","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","castro",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A86vwmWXKW26hIilECFuas6mFP2jiY/lTICP/atPxHzu"},"signature":"sKutR/mAnQFTGtgLgJc8jag4kv2Xn65dqkt1FK0cnXh46a9eIX1QA+Taz5fi5Hs0Im9TCuJG6fxsoIWLEryU8A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a0nfhtgjdj00jvja93ecdffz7f0g08cu44gk6a","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["castro"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A86vwmWXKW26hIilECFuas6mFP2jiY/lTICP/atPxHzu"},"signature":"Q7l7YwSIv+KbCHpuEu/KZUTqhRoP2NIAjj8FgGoX/35k3l6VMQwJRTXsEwhluKCxv4oeZH6OI61DI1fQKwTxvA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1a0nfhtgjdj00jvja93ecdffz7f0g08cu44gk6a","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["516","Individual validator and criptoentusiast","https://twitter.com/FAcastro9"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A86vwmWXKW26hIilECFuas6mFP2jiY/lTICP/atPxHzu"},"signature":"LlBFW+C42dlnhCMv0d52qVo1pqgi40FBVKIMhzL1GJosHjSnLOMXfA1u3x2LHjhfMZ6f1eqxlR4WP2h2K7Kojw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18ewcqu7enfs8559zgm7xw2aulxhu0ngyffz2lk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"FBrGy9VYHcas4/dfAJ9B0lR4oPvDk/UuPKi3mW6Npd91oWyZArc/s5KEZG3mGVJE2qp15QQq8rwdU93vUzfTZg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18ewcqu7enfs8559zgm7xw2aulxhu0ngyffz2lk","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","gasnode",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0cGAjW/N/PFcnpJ1oJ9EVENJ+NktWoDpRjdIxVnQQvN"},"signature":"JDfBbluT9gnP4y0yBbnmoqgvyxqb/7sbK5VPLAhirn5yef7G7KxYaO2zl1evwARUdXZyK1Oj2Eahwcs2vzzvxA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18ewcqu7enfs8559zgm7xw2aulxhu0ngyffz2lk","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["gasnode"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0cGAjW/N/PFcnpJ1oJ9EVENJ+NktWoDpRjdIxVnQQvN"},"signature":"LcbpVE8UK3noVNipKvMFhtB+KiylmP0y0frSHwnXzBFedU3qC/IM0Qpm/OJUDLd3C25DF3eiYzBTpG7MZfmU4Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18ewcqu7enfs8559zgm7xw2aulxhu0ngyffz2lk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["517","GNØ Land tweet","https://twitter.com/AlexGas12/status/1617409687162331136?s=20\u0026t=7q2sOaZkmD2GdlJTzD_zKg"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0cGAjW/N/PFcnpJ1oJ9EVENJ+NktWoDpRjdIxVnQQvN"},"signature":"KS/ujsfufxXfZ7QdewOY11BV5NfldDgFD+dhwfHnjUxPmyasMeKcq8WQUiF/NsnNDbPehN5UxVOI7ligmD7rNw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1nnz4xw2t4z9vul8j62sjdc3vxcc0cfpqapma7m","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"jAjKUKniC0VtbFOGGEwR+ujrM+BBce918e4M7kAzwU46ml6PKj/RTWc78A286zFCqWigVXeqe4VHSK8oy37qRQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nnz4xw2t4z9vul8j62sjdc3vxcc0cfpqapma7m","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","gland",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An7R9G8JmlMCWHUKO5MDMR5TWWiXXy0dOrq3HzehRUQ5"},"signature":"d4UG1Ms9ydIGN7mheLhLFdEJ/oTO1jg6nE9GHyvZQnJvNN/zOk/OauXMWp8j3iIxPngWeL+iYvmmsFxh6cuNDw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hlrgs3mua0z8v6eykumk5ugjd95a9rns9mcm27","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"8bKnb3p9xPgz1d6zaOhRcW2mGOmnZSd2cOVvzbGF7XsZ37rpr2dnXv/cm/7OD1cihglb1Y25tFPE2pULsIl18w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1p7qzh0aq8cuh3wyjgnxjmq9fut3eepjfdcurzf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"0IPayfPq6fokaj+QtUO4ZJCGFhnd2jWO7zbqn7XMt0M5JdIjps3lYzDTRJnszOklRTZ+94HTVIbvTp3Dh+zltw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qpfgn2gwx30k975un5x67uyklhcf7h8248605s","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["460","1","1","Hey there did you have any news?"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj/PFOvI7nLTPlUpmfAqUrVTiwXnz9QFiW2cVHHrIhR+"},"signature":"Xmh6aBd3B+fZQJtLYVUvA13bTgztlB+9Hhii7T2U0GdU8LRcNhNZfIzyqHdRY4NkdukShVbUH6Ct3GPmPTmc/w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hlrgs3mua0z8v6eykumk5ugjd95a9rns9mcm27","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","glanddla",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjMEYs/kSVlgdzp7XjEqlqtttfoHsdBX9iRoUxeKtqgE"},"signature":"eD23cbcEhSWLb86/K9O8OlQSPRGT2QpMgmBHXqjvJaAkdNNrEqGnAiqD7xC7Yd2Sx8ZL86kkBS9GrB/ED0DVAw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hlrgs3mua0z8v6eykumk5ugjd95a9rns9mcm27","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["glanddla1"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjMEYs/kSVlgdzp7XjEqlqtttfoHsdBX9iRoUxeKtqgE"},"signature":"AcMkC1UwxSNq+WoQwgUtyY1ydN34HkrcpV5VW4jZloRA5AewWAiEqjLjsv4RaorSMDkRjY7dkjZ+DFHP7LghRA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p7qzh0aq8cuh3wyjgnxjmq9fut3eepjfdcurzf","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","sushka",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax8gzCQoQteX3GoVSZCwiU+mEwHBfcAClsXGkuiUiSPu"},"signature":"nmPfqw6ByzvkABGor8xIOGhF3jav1MZOKjZTZwxiePdHDF+pxAN/LWdvHczGoUCWo0Rv7cmYfK4NI5NBVp8FGQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p7qzh0aq8cuh3wyjgnxjmq9fut3eepjfdcurzf","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["sushka"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax8gzCQoQteX3GoVSZCwiU+mEwHBfcAClsXGkuiUiSPu"},"signature":"6t719guyabVFDvqvMI9G0IoZjsYtJqPfSsuf96xzD08bSeOb19zB0KILSHtfVROLthDmnUOViBPB/r8jVxfU5w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14887jd6rspfjl0te3775s2ltq2aa7pgradlptr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"niMkJ0AjqVTpiUlbZomE/r9wwyoycrMGpNClM16bwsRT7zQ6jCk1dmORSu2Zo6XB1fiJ1uWlrmu5GSJBKZgLdQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p7qzh0aq8cuh3wyjgnxjmq9fut3eepjfdcurzf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["519","Hi guys","Good to see you all here"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax8gzCQoQteX3GoVSZCwiU+mEwHBfcAClsXGkuiUiSPu"},"signature":"blTOho9YaBvysOuop6cD3jCxaqhxUMN1j4Z2Aio6GuJLwHHsVPWlej1yxfVktfeZdh/R2Jx1IRQjBkIekzOQ1A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14887jd6rspfjl0te3775s2ltq2aa7pgradlptr","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","goodwin",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7SkJKmaspAgqmMtwDE/QXOkm7Kng29GR8RKJQXiSkw8"},"signature":"2lIPybLT3h3JRKiTp8PfP++b8z0FF+VjxyWxBdeXHitQJ61kuas7+qvoUaUTRenaMN97rPVnsZLppwfmW3qhVg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hlrgs3mua0z8v6eykumk5ugjd95a9rns9mcm27","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["518","glanddla1","I have been studying and developing in the field of cryptocurrency for a long time. At the moment I have more than 20 different nodes in my work. I am ready to help in every possible way in the development and operation of your GnoLand project."]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjMEYs/kSVlgdzp7XjEqlqtttfoHsdBX9iRoUxeKtqgE"},"signature":"zP7a46IEu3Md/QzVWfnSnCPswVGVmByS3GqQZT8xyKRmuRfD5m7d12G9h7J5rX79ItdemTAkr6fbbLxZoWs+bg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14887jd6rspfjl0te3775s2ltq2aa7pgradlptr","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["goodwin"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7SkJKmaspAgqmMtwDE/QXOkm7Kng29GR8RKJQXiSkw8"},"signature":"AJF51od3I4DRh47I1h1AWNzYLdfhPLP5YwN65nSjilBwY0VsUPlLlW1lU2F30TecW0WWb/2TBTd9gl0VfqsY/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hxy0kznfc98az23ggz0wzxapl0uqumy8rk9tw3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"zaU4wYadIJun42T4wgXycYbbmy4azCXvqTjNClYbuDV6YnL9Ci23XWDpHm0s7xRs4F9UnTvQ2l7vrcMRqFGDLg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hxy0kznfc98az23ggz0wzxapl0uqumy8rk9tw3","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","glands",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnMUMEicI9sJLFS/U/Q6dVhtkJZH2z/8AzH4SZ/WX5H0"},"signature":"kWjewJ3lG4CIftqC8zJhmTT6bx2cXH6x5PfySDQq7bkwPCmPuL9+IgoFX4hRii08eYrejIiBrBdLOZikN8j17A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hxy0kznfc98az23ggz0wzxapl0uqumy8rk9tw3","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["glandsno"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnMUMEicI9sJLFS/U/Q6dVhtkJZH2z/8AzH4SZ/WX5H0"},"signature":"NNyNPnwn5yO9FEIYmiN8z2HPG0yis/HhZPEueifno65uzsZmJqnzU/r/6Z/C8WC3LywPctl7cQoqDK6DNJb9iQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1wys6enumjsnu6hyjzjm5hdqq7admgvx7p83sus","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Z8F6UE61GT8t460kXE6wCdMjmPpkXPvSzz2/rfpb+gkCXHdqomO8BWfVsrNM45UVXKBYWDBVRVdV0qlhc62j6w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1twe3gtmu8n39adydnyj7qsrxyw7z2f6hg8dtta","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"GPtaWAVrf1orZWJYT8DPd7tbqptrxBT85W71nsx5jr4V8qCHAK4OkZ3DDyOAn75/Ar0BLy7wDyRJyvYIT5Ov/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hxy0kznfc98az23ggz0wzxapl0uqumy8rk9tw3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["521","glandsno","Over 15 different nodes are in the works now. Worked with projects such as Aptos, Starknet, Subsbay, etc. Ready to help the GnoLand team in development"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnMUMEicI9sJLFS/U/Q6dVhtkJZH2z/8AzH4SZ/WX5H0"},"signature":"ayCv3SndjHj6a4oS11jcdclBTlI/t7zsuMAwjPjk5KkFJ5V5UA8ChjZFuYcjgT20CCa07MSGYW018F7asS18Dg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wys6enumjsnu6hyjzjm5hdqq7admgvx7p83sus","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","cashme",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoSi6h8G+weEnNXzWB9Igaf4TCQX6IspsXsyH40HrgEp"},"signature":"Hmzt8W+TqXYI7tFjrJHmNxNfKaOYm35IxwKvO8/mV0RWjmsBYHQLDBRsvq26oESOBB/0V414VZWHcHqL43R9ow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wys6enumjsnu6hyjzjm5hdqq7admgvx7p83sus","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["habade"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoSi6h8G+weEnNXzWB9Igaf4TCQX6IspsXsyH40HrgEp"},"signature":"Q9/al6Kw3d1A7xc7x679+D/8wCzvIL/2/jaaIVaVy4w0SRVV6hZ1eUIvSDx1q5AlOc4uBwwyurRPVFC1dqGyeg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1twe3gtmu8n39adydnyj7qsrxyw7z2f6hg8dtta","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","miiumur",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8mBqAFE2R+RgVDBJP8ZU7W+ZVY6mEy4w8Ld+DVoVlVw"},"signature":"IRZS/v0/hq0OZVPwvKZnR9RFpalfNsFNwXduZR0AHk40j2jytP7qX17dEvK4LEBMToX17THxOlntH6XACXBZ7w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wys6enumjsnu6hyjzjm5hdqq7admgvx7p83sus","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["522","Just test","N/A"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoSi6h8G+weEnNXzWB9Igaf4TCQX6IspsXsyH40HrgEp"},"signature":"WBXMPO0kz5eFwlyqpT5mHfccd97DFh/rVPass3GMrK9kVCpttFwUY3Uv5rVBGERH2MhZNVCY5Vx95Fn/ze05/w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1twe3gtmu8n39adydnyj7qsrxyw7z2f6hg8dtta","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["miiumur"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8mBqAFE2R+RgVDBJP8ZU7W+ZVY6mEy4w8Ld+DVoVlVw"},"signature":"nXH0ZEdiCG4CGfnNt2pgcO15eir1BwH69oWcNKn2A6Auroc1RlouYdYu6J0Ea/b4FxQqIT0BHArymK+KBUe/xQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1t0e8s70rrwpgj8znlelhejf09tzuc229x7npk6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"O/zKRZ84Ru2SraSsesqBurP0gwvl1C3FdCmD81eg1jF4CZ6UlIceVxUDp9QYMuNwKm0BGujueTnqHtdGHStqTQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t0e8s70rrwpgj8znlelhejf09tzuc229x7npk6","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","tushkan",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuZsyV5I2m3iK87NcLb/KFxHgPfsm3gtVr2YcNwjVvh7"},"signature":"yCsfAIZdFo101crpHrvx68msLCAg/g7WfTT0j1cGN+JxumFMkas9ifNYsqoqxPyf/gScXxy47ZZkGxJl7Vc6Hw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t0e8s70rrwpgj8znlelhejf09tzuc229x7npk6","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["tushkan"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuZsyV5I2m3iK87NcLb/KFxHgPfsm3gtVr2YcNwjVvh7"},"signature":"3ywvktquM5sKGIb1zFCCo3E64sMN9ya0/kgh8L8anIZ03NgDm50ERDQ9Km2R4AL15bf1D17vqgphaKiHrOn3/g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t0e8s70rrwpgj8znlelhejf09tzuc229x7npk6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["524","gno.land","I believe in success"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuZsyV5I2m3iK87NcLb/KFxHgPfsm3gtVr2YcNwjVvh7"},"signature":"PliwUoxekDwVhYAVzH/ahAY1BfuH/v2M3IjJmeqbDCl4gzQf+LclLN2JCaiZq9n+2P7eHnaEUz4TWnqm0fbMMQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1kmm6djrqpu6j95ymru6dkrlhaaxg93pkky2ywc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"iTJoTQn//1oL4d+6LljB3m7SAExuXqf1h75v0LSFP+Fc23AT1MnFAp0lal6en5Dm3sFzpwqLaAxfT4A/nQzPMA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kmm6djrqpu6j95ymru6dkrlhaaxg93pkky2ywc","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","busynode",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwWND8BP8lY/kn5iStVvkNsoUVCbb/CVo/ipCifHqSt7"},"signature":"fZ6DvrVUW7iDnYBoGSJRVcn69XYIS2w7EOtfguCoUxhyvjffiW9/1DEsvR8fN1cvcFFW1aL7QynDa2Z9a35eKg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kmm6djrqpu6j95ymru6dkrlhaaxg93pkky2ywc","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["busynodess"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwWND8BP8lY/kn5iStVvkNsoUVCbb/CVo/ipCifHqSt7"},"signature":"GQjn38DrGfH5kUYsn/4yTwe+0vl1HQT/lLk0zzPL2dJ+80X6ul1PM93Y0T78q3IWGm2GH8P8mAlVOT/3kRacYw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1kmm6djrqpu6j95ymru6dkrlhaaxg93pkky2ywc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["525","busynodess","I have been working in the field of cryptocurrencies for a long time. I have been raising nodes and helping teams develop for more than a year. For my part, I am ready to help the GnoLand team as much as possible in developing the project and bringing it to the world level."]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwWND8BP8lY/kn5iStVvkNsoUVCbb/CVo/ipCifHqSt7"},"signature":"InbGEmKayQ9WRYmHxoP1wR58j17YG10vo0/KtQZ+LO8pCdm5NMnh9OUdq/ztB6e5l8qoh4g+jGzmidyJECdkRw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xayzfy3fjz7aup3f7rdh7d6v08kyheu3ksdz93","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Y0ADA1fAUdSB6d4qpiThMb8Bhel6i24tnmradr6eh75MkZ0pwfpRMhS+vdXQpUkZwvaOjT2rKVXkJXhlk6T5Qg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g146jdsrdpkcn0g3jvytthsjeed8cu93j4fh7c2f","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kbw1bAD2X1sQnHJ37bEYI+uoA8L2j14+vGHrhYE6caItI2TPcBTx8NBPvYVphUdGXZlYVe1dH4MS/BDvcygxHw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xayzfy3fjz7aup3f7rdh7d6v08kyheu3ksdz93","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","powerbuster05",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A50AaeQ6QwgV6GGAvewbgRaduy6jIrzeC+W8PuCN9ug7"},"signature":"fIn9JvI6hqyf/wx3hqUmhubaldi6puby4Tr4nrtuk4QvTXxvkZdTnpcD4y2acBJ9YX/19BZPhirYtU0sGnTz9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xayzfy3fjz7aup3f7rdh7d6v08kyheu3ksdz93","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["powerbuster05"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A50AaeQ6QwgV6GGAvewbgRaduy6jIrzeC+W8PuCN9ug7"},"signature":"pd9vRUrdJ6+Q5HbixNmgrgG4Ke6Abb+7a+W1LbdeBRV8+bH288dfl8yZlgWUhUDAhl3Qj2A0X0nEuHZkYkW77w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1twe3gtmu8n39adydnyj7qsrxyw7z2f6hg8dtta","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["523","Hello Gnoland\\!","Gnoland is a next-generation smart contract platform using its own \"Goland\" programming language, which inherits faster compilation speed, shorter grammar, and resource-efficient parallelism."]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8mBqAFE2R+RgVDBJP8ZU7W+ZVY6mEy4w8Ld+DVoVlVw"},"signature":"ZOtVidISbwFY9MIl8fswHKPIUqtJuyULhHTUaxZc5etjX7LFdMscKeRoRbrxSM6QoFPeKBj/OSg2j3v05llDRw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g146jdsrdpkcn0g3jvytthsjeed8cu93j4fh7c2f","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","monsternodes",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkfY0OpK7ektbKE1XgWx1/o9057XucT61gH/cI8BxJPf"},"signature":"FtMoe8+hSlYd8NdlqHK2lrF9aHLysESAUFmkmleozOgscBkiBs30ii/22U7UghIKSbnUTtCAmbiI/11v/2RKWw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xayzfy3fjz7aup3f7rdh7d6v08kyheu3ksdz93","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["526","hello","I\\'m back in business"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A50AaeQ6QwgV6GGAvewbgRaduy6jIrzeC+W8PuCN9ug7"},"signature":"B2h30je/mgmANU+VHsK7Rl1k1JK96Kk0WyZ0Zpzb5KE9ozbsaD6N+V+z6HHpqFwklae/kjSir9Dt7dkkC+cgWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g146jdsrdpkcn0g3jvytthsjeed8cu93j4fh7c2f","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["monsternodes79"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkfY0OpK7ektbKE1XgWx1/o9057XucT61gH/cI8BxJPf"},"signature":"rTxadBJ2J6UefkIHuMkxPPYzYB7cP4Wvhf0bEV8EFTYgA2oF9SIXgRKRMjirtab15ItLj70QdtPc5AHrO7ut7g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g12xmr2memn9q3nn7a4exh60sh44l2cnvuvlck4t","amount":"500000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"98jUYnyRn5lDw73KwTHiyTj7AA7hlbc1/hQPgsJAbm4Nj659GJbjJpYXUvfp3Gl+bMBUOwkvLy27dqpKh7VLSA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14887jd6rspfjl0te3775s2ltq2aa7pgradlptr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["520","Discord message","https://discord.com/channels/957002220384182312/958006990171422781/1067002646008959066"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7SkJKmaspAgqmMtwDE/QXOkm7Kng29GR8RKJQXiSkw8"},"signature":"+kBLCjPDHtZKQMJ2LkV+LStlaio0t3XM5KVxYcQIWLUg5+XQhDyHtCv4mQWYoJSaMx6zlwwd0fXr9cc2DvN7AA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g146jdsrdpkcn0g3jvytthsjeed8cu93j4fh7c2f","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["527","monsternodes79"," I am ready to help your project as much as possible and be useful, because participated in more than 30 test networks and 2 main ones, I am sure my experience and desire to work with you in a team will be useful."]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkfY0OpK7ektbKE1XgWx1/o9057XucT61gH/cI8BxJPf"},"signature":"wGJJsXr9Dvlys3eOSjkhnAhX0iaUF4Eaq8+ekB8/NfdiolNwvgsvQLBgy72jmZp8ninoDM4IWVeK44lYXQRaAg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17q288uax4wrr3fespceq5c3r98c83w37pr6smp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"SF5ixfXGdfgEPKM3HB0UcGyK+IaIIQmphIkRzUbcXuJsagOW9CHs14Foqf8NoB5WxN+BVSmLNnn05X1OHh6fMw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fy0ywa0qxg732x7jaxl049m5s5w8w2l2slhfuv","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kPCKNCjef4HGs/0e2KAvf+ds/ji4xBnDTRDbgIurReUOBVU51uMb6EiffVKIAsSRLpFRoiP5zWEbuUsccsvbHw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17q288uax4wrr3fespceq5c3r98c83w37pr6smp","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","nickgnland",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7l88tL0JYk7/KRbDBxojlw8vpuPlflvE90qSwVBX3s/"},"signature":"FuUj8vW5DQR6/IThz6vDGRF8co1PiWbRD3IqVYST13g3pHb/Kz7keXiY7KYZP8P/fc4XoMScaquo8JDKTbTswg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17q288uax4wrr3fespceq5c3r98c83w37pr6smp","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["nickgnlandes"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7l88tL0JYk7/KRbDBxojlw8vpuPlflvE90qSwVBX3s/"},"signature":"DiKsudsZUzQDknMHEgC2EajRxdwbSCc64QvRRVuNpJUKFZhvVNQctKKYLiRq8djFh4+pTkFj/vcRn4g+nT0l7w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fy0ywa0qxg732x7jaxl049m5s5w8w2l2slhfuv","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","lazarm",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aknu2iifrnYHEQArL+w6+JjPs0c/ktIUNpZCQVrLx0Gw"},"signature":"ONGEUX31gLktIXh5DkKhJq+PWh/iBJYuNoJuPSiRqtl1lC7n4b9LCRX5F0Z3APQzW/k4WMmRM9X+pXgh/bKOcA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fy0ywa0qxg732x7jaxl049m5s5w8w2l2slhfuv","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["lazarm"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aknu2iifrnYHEQArL+w6+JjPs0c/ktIUNpZCQVrLx0Gw"},"signature":"nnGaLmINtTvFyld+jNjcV1RfYDWPNcBUApwcT0smaI9jzEJDtvnafYKKbKRP9x4U/ncj4p9zsfW6q0JIFyJMZg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17q288uax4wrr3fespceq5c3r98c83w37pr6smp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["528","nickgnlandes","I put nodes of test networks, there were more than 20 of them and worked in three main networks. I am ready to show maximum efficiency in the development of your project so that we can be useful to each other."]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7l88tL0JYk7/KRbDBxojlw8vpuPlflvE90qSwVBX3s/"},"signature":"+ZKSHzk9yJkD/2V18lKsAHxBjckKX9I43Ymr5r5nB0ZW1ghV8qGAhV1YK3b30J4cgk2Jim1d5p6xfnZeheNRLA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fy0ywa0qxg732x7jaxl049m5s5w8w2l2slhfuv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["529","Gno.land","Gno.land - a blockchain built on the new Borland programming language (a slightly modified Go programming language), which saves hardware resources and creates better smart contracts. The founder of the project Jae Kwon writes that this is something Ethereum 3.0"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aknu2iifrnYHEQArL+w6+JjPs0c/ktIUNpZCQVrLx0Gw"},"signature":"XexZIibI0L1DRYTOMBj5jMrmOI7XKdbnbS8jjTDjVSRO7VcHG7QRvxygX1gfg6y0tq6VsTI9b0IDF0fZkLaKbA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1e4yq5ulpr6rp80cngjr8w4ql97tdsznrykwylz","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Eon0fEDEU2TK0nza9rQmC72B3AfaAbHvsaZhfMQPxxIXZLxVBPmqcinaE0xfCxxKSipfHNoMUusWxj98NKnepQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e4yq5ulpr6rp80cngjr8w4ql97tdsznrykwylz","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","niocrisnode",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1L7UMPfjDy+jsLtdCYqg6lh63jFu+dCysycDNzXmkJq"},"signature":"9UKPo0F7iOrZjOshrcxd8weRNjGO6c0orQsJb+y5l/h3XDplbrlsXUtXmU3saxItEr1kUROsaLjgV6wdj/GPaQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e4yq5ulpr6rp80cngjr8w4ql97tdsznrykwylz","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["niocrisnode"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1L7UMPfjDy+jsLtdCYqg6lh63jFu+dCysycDNzXmkJq"},"signature":"pEeC3a+y7PQ6IoZxwT8yES24QctEfMxPu8omlQ4S/ipC013AwjQK+dNA2CrKZXGx7vjs7Bqpv6PLhik/OMMkZA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1dkf4re3merufdq7xxwj0a6nj2g0ym36s20964g","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"RdiprRMhm9X3gvmvuQlO84V3e7MB+rhA0c9m+1muo/kwU3e66odHgop+2/qOK3H0XbsNciRqXpTqM3ZmCTp1NA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dkf4re3merufdq7xxwj0a6nj2g0ym36s20964g","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","doni_doni",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ak//a1qfa5UrWHsCd58Tn6jGZETEwPSyb8qH2+//3MNe"},"signature":"/FoerbKS+3vJ6sSyxrXOMWK2+z4XCWEQ34MIRx4zPFtIqQzdhVs1OiQEs4VX1L4MCGARBzYX+qXPIBc9pG2JoQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dkf4re3merufdq7xxwj0a6nj2g0ym36s20964g","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["doni_doni"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ak//a1qfa5UrWHsCd58Tn6jGZETEwPSyb8qH2+//3MNe"},"signature":"zmztLsBxYolMfeSxUN/EydqS/dy5nMXseATIDo5JdRMI2vZKT6+3CKuR2QFY9Dqq+OtTjubYJQxjYt6mtXSrpA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dkf4re3merufdq7xxwj0a6nj2g0ym36s20964g","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["531","Twitter activity","https://twitter.com/_gnoland/status/1616505401800855558?s=20\u0026t=tRss6ni4x5taULEAiL_zkg"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ak//a1qfa5UrWHsCd58Tn6jGZETEwPSyb8qH2+//3MNe"},"signature":"OeqbJY6BV1GaMhSxUoPdlE7/WyFmSU93O5iRRTW8dBxmsmNYIa6i3G82t1J3yUuq47AcRQRfIbQqceBj5oop8A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1t9sf7t937x9frry0d2nzj3vd6hvrknknwnzu4p","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"AaRJ19NNfufFG7FTqM0LPzNXFJ2N2pWHafAfsNMSkjQUMpnpWlAnNEfMQ/+6nliGblUdQU+C4NGnjOkHPUgzfA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16hlv883qydy8aqkc7qnuakhrtshcg6uug8dray","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"5UFlp549QUyPBdqfBACcGyNITp6VmfZid38NVwnJ9fdkdwVxRHfUi2icMkaxrJ8ZZc2RPxYzoBh8v/Fnh7mtAw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t9sf7t937x9frry0d2nzj3vd6hvrknknwnzu4p","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mvyanka",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8hCactHcoaeZQntAnKO0uLf7nbsZftJ4gpc2yf9D44r"},"signature":"4KJKjm1F8v3dTgkT4cqlXbvkRb6uSyA2BwOAWPnj/JMClvvhBouWWq5Hf5CH41Jr/IxXrjyj22kMdICnumVSwA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t9sf7t937x9frry0d2nzj3vd6hvrknknwnzu4p","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["mvyanka"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8hCactHcoaeZQntAnKO0uLf7nbsZftJ4gpc2yf9D44r"},"signature":"FbeziwDLu0eUNUP/QO6aBBZ2Nnn0JGzpini69ZbdpTkQxEHB0dD/ivy7SVftBmGC5pkZGbLt2DU5nT+Y3OntJA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t9sf7t937x9frry0d2nzj3vd6hvrknknwnzu4p","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["532","Gnoland","Gnoland is a new blockchain being developed by Jae Kwon, founder of Cosmos and Tendermint. The main goal of Gnoland is to optimize the consensus process between validators, the completeness of the smart contract language, and the sustainability of tokenomics."]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8hCactHcoaeZQntAnKO0uLf7nbsZftJ4gpc2yf9D44r"},"signature":"QPlYoPhSEESYyqLJXybvoc046QhNr6QuZpU5wgN0K0FSBPeoog1b3muVynaU7wWLnuiWVETtKgB7d8BU0/IBHQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16hlv883qydy8aqkc7qnuakhrtshcg6uug8dray","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["ktbg_im"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AurhVjxMX3aSzfNgaufMtP6HIEsNGAU1nDEeRTT6vfB+"},"signature":"VkOSGvfW3+/q37ds6bG6i5FB2iA08vcY5KpNGV5/b9gkmOOEMF68i6XzCTGLYOjVDixau7oJjvzOswHdKeHGMw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1erhzsjjkpacua0el480rzcrhsg03zplaqevn7a","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"U5PrMGFAOJGeqY2dWaNHpqZh1lAKEfbY9hpWDuO+59EDgJKRStnrzzuFM4KbpexOjVOlnFhrsRA6JtdNMUHzkw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1erhzsjjkpacua0el480rzcrhsg03zplaqevn7a","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","ktbgktbg",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlV9JPq4CTSG4gR2B5ddYnRDDJcEHqraGdI0mv9gdeK1"},"signature":"OY6sj6k104B3coGR8c4rXN+xNouhP+oxUR44Tg1j+JkzjhobIAb2BF1jZCCcE85TYlni8slBA6PyiODvXuYivw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hrs757kkeh0qjdull4ka64l94cly32lajah6va","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"29LtzSD9pWwzO+LpT8NCFaX4TFRwzrO87YO9L5KrSY5Ds+EfjbXiYWPyBkjAx0l1u2nZHdns6jO+bNegoZThMQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1erhzsjjkpacua0el480rzcrhsg03zplaqevn7a","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["ktbgktbg"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlV9JPq4CTSG4gR2B5ddYnRDDJcEHqraGdI0mv9gdeK1"},"signature":"eaqgYjzdzaR5XQQdvpJcQam8YjCXYI+ILP/CpSC7Giofmxf/2jsze+1LWpsYYWdwD4P7WQjsxoapLJY2Zm5C+Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1erhzsjjkpacua0el480rzcrhsg03zplaqevn7a","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["533","Discord","KTBG#2862"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlV9JPq4CTSG4gR2B5ddYnRDDJcEHqraGdI0mv9gdeK1"},"signature":"rG118Ak5XBxeFqv57Ll7lBymb3NMGvqzez8udiQRU0pc+qmEUao6n1hlY2kmIGLxqxhr1VJU5Mk/w4cB4LHXxQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hrs757kkeh0qjdull4ka64l94cly32lajah6va","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","Anselm",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApEDTAuSV1t0cV6Tsd75DJcyhEuw2uPh6xFSZmFk3vCU"},"signature":"H5MUttEE8X3MeQlPzoMStvmTtKqj4l0XYRdqHV0eOoAdWmUujHqZLSSjsSiNbR6qfFe/31m5eb3Al9tdKiHKjQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hrs757kkeh0qjdull4ka64l94cly32lajah6va","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["Anselm"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApEDTAuSV1t0cV6Tsd75DJcyhEuw2uPh6xFSZmFk3vCU"},"signature":"v5gjbmSbL1P/FLu8I2VgCYYeaqv6rzn5Qlzv71jbUaQKQonPyFl0x79q9+Om+T5i1Osg2PF9mbu1xc0u/d9E+g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1zwsp6nnmxuxp7punq2qvp6lzjckvsht7svnkrc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ptW2ihATtk/iNAIh1Gol5kvUZmHsA0O+xT54kI1I3XoQ10V2z6uVT3cAStwfQzfcxcUpy94jzslqi09n34c7Wg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zwsp6nnmxuxp7punq2qvp6lzjckvsht7svnkrc","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","Azaria",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A18ZcSwDI9KfLNOfxzbJPKmbNaFJRxEaHx8OO6d2B1Ru"},"signature":"z5uiLJasX7FKyjPALyhJAybGduYff5waocoXzcoGAzwa1tYlFOrrR2e59yC2CCfS+exI+5SSGHq6mTYrV9XCjA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zwsp6nnmxuxp7punq2qvp6lzjckvsht7svnkrc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["Azaria"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A18ZcSwDI9KfLNOfxzbJPKmbNaFJRxEaHx8OO6d2B1Ru"},"signature":"MVDADLwyVw901r5gqMGIpdbUHJ4dZoHH0ndtS0xqaJ9sS7Sbt0+JHMu2Vp6zft+vLBxjJG+nJ4JQHLVQjVLz0w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zwsp6nnmxuxp7punq2qvp6lzjckvsht7svnkrc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["0","Azaria","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A18ZcSwDI9KfLNOfxzbJPKmbNaFJRxEaHx8OO6d2B1Ru"},"signature":"5dIGFE+GAqSA+qXwkbnfyEC2BpdUWUX2nfGiuoO+9elfSNPhq6avprNPLXMj0PMq0byVJOcQkZ0OhBeA7RdgLw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zwsp6nnmxuxp7punq2qvp6lzjckvsht7svnkrc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["0","1","1","g1zwsp6nnmxuxp7punq2qvp6lzjckvsht7svnkrc"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A18ZcSwDI9KfLNOfxzbJPKmbNaFJRxEaHx8OO6d2B1Ru"},"signature":"GNRLwoDcBoOAj1COmlfOqwZLTNjbcsf3Ua44gNy4t9dXfd5mtB1U8xBzKHkK7xkytvymC/6kGHyGNRHGNSnHWQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gnx635zf2xspwfld4lkgnvw2u5z39ms5ne6y2f","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"P/WST14BS8RybN+VtfDG0ea8e00Mos8SfzypjM8vQ+IdD0pbrFXMX7XWBt9Ov8HfQTQ4PSVXatQys/TESXmTsg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e4yq5ulpr6rp80cngjr8w4ql97tdsznrykwylz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["530","Guide. Namestitev vozlišča Gno.land(Slovenia)","https://mirror.xyz/niocris.eth/rnr5WSQ4gUbeQGB3ZMqZ3p6EU5vdfKcqVauPJ0le_E0"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1L7UMPfjDy+jsLtdCYqg6lh63jFu+dCysycDNzXmkJq"},"signature":"0VFRZAS55ScOdCXYGGdd85DaYJrz3NXOx68oWepEPkdN2RplZiP/b0Pc4SBwWa2M67Av4cFcINbjVrRT2drZYA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12hn53hna0netstds939kr4pvkxd3aufqnjs2wz","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"nfdxRkReegugljNZtOP6aTTRz6KpLalBeUa/kpayq4dB8vKuW/6Q8irxQMYYPPjLhqFNsNSkhiHNo2CxV0Xrfg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gnx635zf2xspwfld4lkgnvw2u5z39ms5ne6y2f","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","serfer280",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyZcGwvVUKd5EILMY5T9J3j/Fe34qSmaNTgicbufTrZk"},"signature":"r4nCr4uxvHx1HyJhtTlksBxNIPRAzh3PQ82Y6E0N3LBwornZMiUvz6Ji9IBFl5BUhVLNK21NuL73KPQF0Gxojw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12hn53hna0netstds939kr4pvkxd3aufqnjs2wz","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["genasupafive"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An6c7RHknTJHmKTuHxrNh3UJCyfW6ng2vSgUD3a49h+9"},"signature":"MhDa0TnEqiFUZ1Fgxfjg46LXo5KWfA2JU7CyOV6EOgBR6WsZADao2sQZenjiHF8lQsZqapF3YuLi/G2ox/+uAg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gnx635zf2xspwfld4lkgnvw2u5z39ms5ne6y2f","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["serfer280"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyZcGwvVUKd5EILMY5T9J3j/Fe34qSmaNTgicbufTrZk"},"signature":"HVc/l68z01QEMWz8iz8mpu8/tbRAM/HKFylndZQ+B0oeDDKLWK+DhnREELpl8sfDtyX3GkkKoKyXH72RCL94vg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12hn53hna0netstds939kr4pvkxd3aufqnjs2wz","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","genasupafive",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An6c7RHknTJHmKTuHxrNh3UJCyfW6ng2vSgUD3a49h+9"},"signature":"DtuAL4SklkMzjU7Iu5F4aNltVYITx/Tuk1fPzkKG5LU7VdZGxxe5aFUuJz6MLxddPBO+NlXrICbe5an6qSBWVg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12hn53hna0netstds939kr4pvkxd3aufqnjs2wz","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["genasupafive"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An6c7RHknTJHmKTuHxrNh3UJCyfW6ng2vSgUD3a49h+9"},"signature":"4jwWAi5v3EP0dcXh6wKL7YDzDK03YBNrTcBnQWmFk+J6X51z/8ooz6m7Vr6ugJmU1taHEQ04/1sOdu2TZ0ci8A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1guaml0t8tv7x7je2l9kujnaj08x969ek52plxc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"jerYcc/1kXp8RzfjBUeqyAO7fIKJFzcXqujKFcH0LQV6eWxaToO/1K4xmjyyIYTl1+6myCO4b2eN5Mw9aO1WJQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12hn53hna0netstds939kr4pvkxd3aufqnjs2wz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["535","DS message","https://discord.com/channels/957002220384182312/968256694406754325/1067042249973710968"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An6c7RHknTJHmKTuHxrNh3UJCyfW6ng2vSgUD3a49h+9"},"signature":"f1MQXQHosZGcPegLYc3KTRlznangWT52FrSoZXU1cj1NWfPij5wWSxZbnM4ih/i1qGlQ0362dSp2LB1CYAY1mg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gnx635zf2xspwfld4lkgnvw2u5z39ms5ne6y2f","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["534","GnoLand","https://medium.com/@sergey280/gnoland-a8ead000e729"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyZcGwvVUKd5EILMY5T9J3j/Fe34qSmaNTgicbufTrZk"},"signature":"fXSLCoNS5lSje1v91/SZ1X/F5f+cooYX58Dk9ai7EupsMCjeU1PdsQvOmA+Lq+uXgWzhTvf3Fs/fKMkxkCNl0w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1guaml0t8tv7x7je2l9kujnaj08x969ek52plxc","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","delsatro",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArIvGQ50FY7dHAugfq5U/Peq6Gz42uQbx858PQ8+W1Ba"},"signature":"9xZDErqj7hx1kSb5uaNOeaBXIhTbwG1bV5RIbw/mhTJb0J8SgwFISCJ2hr/iQwm5btZOdYkw3hwKW+Ja/mYTHg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1guaml0t8tv7x7je2l9kujnaj08x969ek52plxc","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["delsatro"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArIvGQ50FY7dHAugfq5U/Peq6Gz42uQbx858PQ8+W1Ba"},"signature":"ZAF1RXtSZCbiJEkD7OzC1n6qwQ5w7ci4WljQgKCLGhwdESFHWz0kZCcYGdKXZQTcN1+k0OrS3IA56er0epl3CQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1guaml0t8tv7x7je2l9kujnaj08x969ek52plxc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["536","",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArIvGQ50FY7dHAugfq5U/Peq6Gz42uQbx858PQ8+W1Ba"},"signature":"bFvo7BXvnYYk/WXOH/7pZao6d4g0tA3wjSn6u1bRDk9o/yZNYQ0DOajIFZ6RxY+6jayaOLxZNPsdmH8umdjKJg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1dvs3lqhv753wkq7vusvrrfs37xgxulqc5jxcv4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"AcLT2hIKCP00g/voHLvFyIZCK09cQohnzx05/4b5MGUQvOy9Jq4wbAw8mat2ckC1jZxpEQvz3DyLaHwzA2Od1A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dvs3lqhv753wkq7vusvrrfs37xgxulqc5jxcv4","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","grogg",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoHL+yt97yUuenPnXJ1Kkh+zThwm5JXiHoBmIWYSEGr6"},"signature":"Yg2NH1Gpcp6vB2b6AI9a4DDpQajrXNDN9sUid/nVk+UStcVPuRNJIZbWJ1CIt7vsRR/wYOPjuayYv5Wjz0DVDA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rpqr43masfg03r8mjum0st299vp3xnj7j34ksu","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"K3nTY+xes03+g0CWeQmyyDFtdZaX0sIto1lBr6IbhqVlXWC2JdlTQINpJKNQGPr69AdhXU+R3tXafZ00U2UT5A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rpqr43masfg03r8mjum0st299vp3xnj7j34ksu","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","browars",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoouB6FNWcG2gKJDuax8UNg9NvsspLVS2OrWdAVgupzK"},"signature":"L4+/1KmsklLSTfSV9WFsy8ZONZrqtiWwc8FoupgtKrhk9nLhp33WyiejyRjjaeNVnq0LyflRxPQQKyqxT856Ew=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rpqr43masfg03r8mjum0st299vp3xnj7j34ksu","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["browars"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoouB6FNWcG2gKJDuax8UNg9NvsspLVS2OrWdAVgupzK"},"signature":"haq+a+9tbZkRw2FQ99SKlcp8Hbgez/m9wzeg9y+dOFttCt/V7FJZtPBIuOyre2vDGdVX5MQ8zoSXCLap5VWzdg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1guaml0t8tv7x7je2l9kujnaj08x969ek52plxc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["536","Create browars","https://test3.gno.land/r/demo/users:browars"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArIvGQ50FY7dHAugfq5U/Peq6Gz42uQbx858PQ8+W1Ba"},"signature":"jKQBRRGruDg6KFRFsYCdKswczOvpsQWF5Df5WBr7c8oMYptu8/uAW6XtJrGcwJjQ+IC0WZzJSRryEKj0+unwXg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1guaml0t8tv7x7je2l9kujnaj08x969ek52plxc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["536","Create browars","https://test3.gno.land/r/demo/users:browars"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArIvGQ50FY7dHAugfq5U/Peq6Gz42uQbx858PQ8+W1Ba"},"signature":"YKd8aOxSGpjqowTZpNPh007XwFpFFVNrzF1bijj5pUc9C21F1Dza5apbzmMVE8ocDt6XFu2AUlS0KeHHe2FWvQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rpqr43masfg03r8mjum0st299vp3xnj7j34ksu","send":"","pkg_path":"gno.land/r/demo/boards","func":"DeletePost","args":["536","2","2",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoouB6FNWcG2gKJDuax8UNg9NvsspLVS2OrWdAVgupzK"},"signature":"dVZv4pjJTFsVCKJhiYV1zFVXxqd0qm4jPuxYSwbdOik27cP7OngDqsxQxXT5E058CCKmbo1eaPTlK/SGGhgpyg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1p6jd7ecut54c73kt9xvtwy5f6e4x7n9rpffa3v","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"bBQJ14u31lesaLz5FTGFs6f38eI9R+N7/nBAQRoEH2RndwizIvf3VMPHxnTi6wrh0SRxSp+YclqtWz3j0eJgrA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p6jd7ecut54c73kt9xvtwy5f6e4x7n9rpffa3v","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","djudit",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1QJV0US6mcySZJr8DEPDPxh+PsUai+x2JElSQNn43e0"},"signature":"AIAHJhDS+ooI6UuOescglAsZC/Bpiau172vuJlM+CLBRbBMHWBrbR1aTuvS5paotnPXpW8SKearcy1D2wvHGzg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p6jd7ecut54c73kt9xvtwy5f6e4x7n9rpffa3v","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["djudit"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1QJV0US6mcySZJr8DEPDPxh+PsUai+x2JElSQNn43e0"},"signature":"9xpKnJ1a+KKBm9Po/IG1RB5Khqhjx5E2aFGSIu19V21dOBi+GSj40fNVFnawMPKr/6ZOcOCTFw2E1qdeJsiMHw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p6jd7ecut54c73kt9xvtwy5f6e4x7n9rpffa3v","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["538","good spirits to all","yeah it\\'s cool"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1QJV0US6mcySZJr8DEPDPxh+PsUai+x2JElSQNn43e0"},"signature":"XYSKiZf9v6+tlk680gvJByZ23bvCP0nyGveqAh1zbLQOywOJRsLK93tDHiekKNnDIYWlNOOLAhRnrOYMRyjpPA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zwsp6nnmxuxp7punq2qvp6lzjckvsht7svnkrc","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","azaria",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A18ZcSwDI9KfLNOfxzbJPKmbNaFJRxEaHx8OO6d2B1Ru"},"signature":"/nz8+p5V5LTChwKcH2nwm4AWQDHBkKUvzLfn8Ig2D4YNSpgJTlVdK5wY/SaRNCuk8g91F6ju7V1uQKiyUmW1cw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zwsp6nnmxuxp7punq2qvp6lzjckvsht7svnkrc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["azaria"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A18ZcSwDI9KfLNOfxzbJPKmbNaFJRxEaHx8OO6d2B1Ru"},"signature":"Cb5zix2y0DoP092adMSQgofqk9ihTTfelg53fhDU4o9CiEogaqEqNz+6Nj7Ax2D+3/lmiuKGhU/YQ1sXhgXwig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zwsp6nnmxuxp7punq2qvp6lzjckvsht7svnkrc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["539","azaria","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A18ZcSwDI9KfLNOfxzbJPKmbNaFJRxEaHx8OO6d2B1Ru"},"signature":"0qSry0c64BnmeG0rn7fyzdUFDtzrSzvVp/+gOXZOLo5kicZw9KNxQOuCICB8Be868bswupvMuTitxmbhwB81Lw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zwsp6nnmxuxp7punq2qvp6lzjckvsht7svnkrc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["539","1","1","g1zwsp6nnmxuxp7punq2qvp6lzjckvsht7svnkrc"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A18ZcSwDI9KfLNOfxzbJPKmbNaFJRxEaHx8OO6d2B1Ru"},"signature":"JLyGsXDRMareUCk/FAUkFu4n3w8sgwE/VkU6Kc77FNZ/j66BelDfBKMdPCzjPbUVDlVppe+0cEP7TOV6K428Ig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hrs757kkeh0qjdull4ka64l94cly32lajah6va","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","anselm",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApEDTAuSV1t0cV6Tsd75DJcyhEuw2uPh6xFSZmFk3vCU"},"signature":"/4HfPSWiRBsOCW0feboLfn2qgHpy5mpn35AhCXgp9isGMHNmv8nc8WalG4MwlDvfMCBcb1jMwaAan+OEIiZgTA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hrs757kkeh0qjdull4ka64l94cly32lajah6va","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["anselm"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApEDTAuSV1t0cV6Tsd75DJcyhEuw2uPh6xFSZmFk3vCU"},"signature":"umzuQseCkS8P5fNYo9kysnG9QEYOIGpEfGpO5uI8nkU66Zm1fZnib8448TziRi/hqrQOAxQOkCXLrPdxYWJAJw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hrs757kkeh0qjdull4ka64l94cly32lajah6va","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["540","anselm","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApEDTAuSV1t0cV6Tsd75DJcyhEuw2uPh6xFSZmFk3vCU"},"signature":"19xaJJ/BbXSULW0De+2sDllPasm5uNQx37Sd6dVZPAoF+0Dk/8N6MOC/lzkz7kGbe1REH4EfZqXZGKGnD3nhDA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hrs757kkeh0qjdull4ka64l94cly32lajah6va","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["540","1","1","g1hrs757kkeh0qjdull4ka64l94cly32lajah6va"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApEDTAuSV1t0cV6Tsd75DJcyhEuw2uPh6xFSZmFk3vCU"},"signature":"iTr7hiuGpnfRyguBwhewlwYyNnSo+n/Y0UfuEJvFwyFdbnWXluko2KXBuOmXEMvbWBeIKYJauxi/HiEF/DpWtw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1qp6n90ehsu09nvjqx7kvcdx92za8uhpu3dztm0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"+Z9C3UyUvoJ48E2QQLKXqdI73n0irNmW1afsrjMIuEobsUBufcIb0ZVDH3UD5o8wl/YNflQJs9acl0Y5PiLGiQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qp6n90ehsu09nvjqx7kvcdx92za8uhpu3dztm0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","beckham",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3MblgOrVAd2D5xLgv/ldnoW9eLBtQmp7j5t5oWq/Mfe"},"signature":"1LXFCOE6LdGWDKJqLbidDkn+QQcpfqQQeiisQlxL6O0zW6lWPFdjiiBX/e09oDnZLt3Fv9lrJKgQWs8Gb4EByg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qp6n90ehsu09nvjqx7kvcdx92za8uhpu3dztm0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["beckham"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3MblgOrVAd2D5xLgv/ldnoW9eLBtQmp7j5t5oWq/Mfe"},"signature":"66mGvuyLYdPq7IuMRop5F4eEpRKe0C/ledzb0IU2T/scgej5nb+xixZlY6AOpvzzn1rSWCHAdFk4ZoyJqPWCSA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qp6n90ehsu09nvjqx7kvcdx92za8uhpu3dztm0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["541","beckham","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3MblgOrVAd2D5xLgv/ldnoW9eLBtQmp7j5t5oWq/Mfe"},"signature":"iEw94s13KI5LSAlh4pGzjkSgX3z9YYPkEYuGjdQ1Rwce49lB4liOgd0IxuOg3t3jSDGaOyjg+FvWe9JRAO6S3w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qp6n90ehsu09nvjqx7kvcdx92za8uhpu3dztm0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["541","1","1","g1qp6n90ehsu09nvjqx7kvcdx92za8uhpu3dztm0"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3MblgOrVAd2D5xLgv/ldnoW9eLBtQmp7j5t5oWq/Mfe"},"signature":"tRgySAmvHGrgGUJrd7lzfbH1E9xT+NuJpB03WhQ53QxXTsdR6yxV4AxuW2rM50wBZsw/y9CFQ6kotCy8gfmf1g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1k57xt08hl4c0udwdnszcc7uhz22qqugy0tr68t","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"496ZJdKk5PWGrv7UgKr0ET+HJ6Q6j0OADN8d39zzFTk9Qihlp+EZBpl83SpEQgJfA+Kgy0QWnnLVUMgw2FAZsw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k57xt08hl4c0udwdnszcc7uhz22qqugy0tr68t","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","bernie",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzPvcbtkNOnjxAa4A1gl/FI0jY7BEZ7WQQxXimkiVv+x"},"signature":"Hyd6t3Jn8/l8lOkYn+6YKwoKPFjEa2dsDslAbDaBnP0WbwdcDXKxMhYp7Fa9TacYgmTEdGnJ5WGZ8TU2LRC1gA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k57xt08hl4c0udwdnszcc7uhz22qqugy0tr68t","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["bernie"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzPvcbtkNOnjxAa4A1gl/FI0jY7BEZ7WQQxXimkiVv+x"},"signature":"iuhz8m16gzuaLh1zhu7ooCtswugX9eABRNy1ffNcUWZYiva+mSuRHk1safSXuYtln1giCE1ILsxoXv/Aw5OXbg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k57xt08hl4c0udwdnszcc7uhz22qqugy0tr68t","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["542","bernie","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzPvcbtkNOnjxAa4A1gl/FI0jY7BEZ7WQQxXimkiVv+x"},"signature":"+cejHk5NekKktwpeXxR1U3renwCvEuRpIXX/IO9ll1BbbrP8hlegYNHpn+OQapeWm0YHHjGQGpLJAEcmfiGu0g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1k57xt08hl4c0udwdnszcc7uhz22qqugy0tr68t","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["542","1","1","g1k57xt08hl4c0udwdnszcc7uhz22qqugy0tr68t"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzPvcbtkNOnjxAa4A1gl/FI0jY7BEZ7WQQxXimkiVv+x"},"signature":"hOnjv2/ZHBDEiJmVFsilDegMoI6uzmBISaLNIeEotWAFVMKl0uAMu+iv9pu5EvfT5d0VFcn9riG8rYZh6yuaiQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gtux6ml7r54mjdq349zv3jyuzgvm0c3lr2y6fe","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"CbeFVcDwqoKb9bIxXuIqPiGxgmkUibo+lYlCLIlE9gYhY7HlUepJFCFfPdnwNt212uKUxm3BaILpi3rdfJqcSg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gtux6ml7r54mjdq349zv3jyuzgvm0c3lr2y6fe","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","clinton",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/rs18kSvcEe0sX5li9MMOewWDYBQWW0RxC0jT2ky8e5"},"signature":"isONjnLb+8ttW7mRjbNIFvTWxaYNgYqe8XJYRjvrbD8VHE6CMphWabp/2jfTgQ1LAvZeXKu1d6AE+XvZezZe7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gtux6ml7r54mjdq349zv3jyuzgvm0c3lr2y6fe","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["clinton"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/rs18kSvcEe0sX5li9MMOewWDYBQWW0RxC0jT2ky8e5"},"signature":"v5veG+qBvIp2Pu8CNjSKBNNROa1byO9TI0dvud544mN88XrF2tx0u5V1dV4twdjF34ucq4YO2rRIgZAvZclr4g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gtux6ml7r54mjdq349zv3jyuzgvm0c3lr2y6fe","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["543","clinton","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/rs18kSvcEe0sX5li9MMOewWDYBQWW0RxC0jT2ky8e5"},"signature":"kvZPLJf+g+AG9FEjFPopYucVrMj68B5RoICAzUz8mXQSftSy30PcnCa8KZ/tOb4+IXN8pDjvDSKkU4RULf5bJA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gtux6ml7r54mjdq349zv3jyuzgvm0c3lr2y6fe","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["543","1","1","g1gtux6ml7r54mjdq349zv3jyuzgvm0c3lr2y6fe"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/rs18kSvcEe0sX5li9MMOewWDYBQWW0RxC0jT2ky8e5"},"signature":"DPzik5e9o9Wl60pWsZg3DiLR8pDovgcOgAnInR63OwgD1Ta6PZDs/juBjtv4ZbgI88d1R9HOJBlqRjX4d+5fFA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g100err8fgh7383xg3nwrtfwcsrwv4uqtm2klcph","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"L9U3mAfKKGGXIxGuuKB1Hsf6swS0RXbC5fBGPeCNkDIUjX1ST0RwRw78z4unXpiX4y/cPns03bJUkEOgmqL0og=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g100err8fgh7383xg3nwrtfwcsrwv4uqtm2klcph","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","corbin",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArEatGfJdlx759NB/3jzwUdn2+n2mHxAEG5CP3A7eLgZ"},"signature":"+9aaML2i+fHwHA9YNFifJY5Yd7qOgx5HQDIL6+BdxZ4xm3rr+jRt/9dtsU/x2FTDzAGtaF/f/6NUYi9EL99zaA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g100err8fgh7383xg3nwrtfwcsrwv4uqtm2klcph","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["corbin"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArEatGfJdlx759NB/3jzwUdn2+n2mHxAEG5CP3A7eLgZ"},"signature":"U47xLHy3oXaG2n0Y16oBbWfiZWsAtgWU8S9b93qrKsMLU0YchJTkbeRdbNMeka8g+dNVrQ1+NIX5gNkniDRqMA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g100err8fgh7383xg3nwrtfwcsrwv4uqtm2klcph","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["544","corbin","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArEatGfJdlx759NB/3jzwUdn2+n2mHxAEG5CP3A7eLgZ"},"signature":"rkAukePu2+b0T8OzhBZtYt7eUiycIqO1VW7YabmwgfYbOheQ0YmVb+RYysLKr9E1kApDA68XYONT86lGVLVHuQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g100err8fgh7383xg3nwrtfwcsrwv4uqtm2klcph","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["544","1","1","g100err8fgh7383xg3nwrtfwcsrwv4uqtm2klcph"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArEatGfJdlx759NB/3jzwUdn2+n2mHxAEG5CP3A7eLgZ"},"signature":"Gkslr7TV81mIXYuksKela4ZNGR+jvJ3q5yHiy5jTSBJ0esWue1ShKo6XAN/NTqnF4eSgigWsEeOuBVbaem0pAA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16fs2nh2yzppmg8ycef05fhv68herae7qhe6qxh","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"3BuAIsLLRlorGlpML3l7ZKzD9PiBCOfxzGtapSA66vZG9OMsr99ic6BGIZEbRZtwbSZ1yyQ4w1kylFz+/lML3A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16fs2nh2yzppmg8ycef05fhv68herae7qhe6qxh","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","elias11",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzZDCnBAjhTAj3CSVbI7UaHz1QRrwNKrocvko5dfKvzW"},"signature":"lZcRiCspfY5wUizNpLO/yCq/zPUU46JWlKnZOKMWSmcTbTbYVni3HxBbafC+TYVl2IdWHVYjrFs6v7gj2Yfrcw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16fs2nh2yzppmg8ycef05fhv68herae7qhe6qxh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["elias11"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzZDCnBAjhTAj3CSVbI7UaHz1QRrwNKrocvko5dfKvzW"},"signature":"ijaP7JS6zjWZqdzpY9WIZYTpoy2NxaEBcIlgxLCBXTEHKvRNVhlbnpJP2b9n+K6Nt7BoP6DU5j07DLQ2oFxWxQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16fs2nh2yzppmg8ycef05fhv68herae7qhe6qxh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["545","elias11","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzZDCnBAjhTAj3CSVbI7UaHz1QRrwNKrocvko5dfKvzW"},"signature":"kTPiFQEUKVo0weo3mnn0416izD7yzeJFmWyFm2UhHwBrHVOEYnYQ5VorF+zXQHSztv0OLQb2O6KnY+rNxTbSEA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16fs2nh2yzppmg8ycef05fhv68herae7qhe6qxh","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["545","1","1","g16fs2nh2yzppmg8ycef05fhv68herae7qhe6qxh"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzZDCnBAjhTAj3CSVbI7UaHz1QRrwNKrocvko5dfKvzW"},"signature":"mHu2kKCWDmdVipwCg3lTjFbEMVepu4tCv0LiJzgvHtxLMXRRAcis+nB2mzALfCWbdz/5RbYN6OaV8BKqdXgTNw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1nm7hgjm4c28syx3fuf4xxqlgkw6vvg9h97na3s","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"H0aIQ+GiWqf361SV0SXesQVDMKc6r0p9DG2aLoaLlqI3xn5Gm9iN4tXuJPC8iLy5rR6pUmgnKE0K0mSEIrdIUw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gvj7gfcgr29750wazh287uk3s0s5ce9d9wc9wk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Ii6It8Ng7JjRlSoKIZA8+5YgPIpz0C1duQ8Ty06/740GcfR7+wsFGj6Iu00epe+tiACqL3ryi0BAISksF03Rgg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nm7hgjm4c28syx3fuf4xxqlgkw6vvg9h97na3s","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","jesse23",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuaTg3Qa6dTtKJ8KiEj/Cr38+OgHbV8Dnz6ggSV+1UXL"},"signature":"FoK4H5euAhHIpyOoSivZITR+4EJYRQ8qrjj5ctT27FkXnb3vlxkvf5X3UxWRjoNZuwGLtaDQU2h2nEpdriGgcQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nm7hgjm4c28syx3fuf4xxqlgkw6vvg9h97na3s","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["jesse23"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuaTg3Qa6dTtKJ8KiEj/Cr38+OgHbV8Dnz6ggSV+1UXL"},"signature":"xA6S1OlseqFzvUv4ORXP+y6nD0NQQUFq8yOyz6Q02vE/HlbpGNPI6xP3JBjJ8HFIFBFvufymJBrcA7Wp+ENAuA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nm7hgjm4c28syx3fuf4xxqlgkw6vvg9h97na3s","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["546","jesse23","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuaTg3Qa6dTtKJ8KiEj/Cr38+OgHbV8Dnz6ggSV+1UXL"},"signature":"FS1IPMWjoLAZzjV3udkf1mKPl5r6Rogq73t2g71nez9YEfmZZBODg4H5ERRG6LGggb5ge932WHQuiyIQJmhOoA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nm7hgjm4c28syx3fuf4xxqlgkw6vvg9h97na3s","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["546","1","1","g1nm7hgjm4c28syx3fuf4xxqlgkw6vvg9h97na3s"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuaTg3Qa6dTtKJ8KiEj/Cr38+OgHbV8Dnz6ggSV+1UXL"},"signature":"NVcDoOVCQUBefiy8GSKLl1ZpGDIoe61Y9/LlZYDaV7M4z38cXVJG08XeD1+uj0BENHsRqLyC7Lnasmte1pp+pg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19m4ygzclkhrwp3c9x93qt4m37v2w9c2uq0yzq5","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"cCT9FZUZReR2nYcWXoohxcZBuGIDA+0p2pnW3f5+XlJsMVl9Cc+eK0O0FIFWEk2C3fjLhaWErYFdCeaQTShtnQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19m4ygzclkhrwp3c9x93qt4m37v2w9c2uq0yzq5","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","liam34",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A32kMqpYHLbCi8WfbqQXHD0PwxEHhOIn7SarHrnGSa8f"},"signature":"0Va1spnAOymBUF+y/dcP70n6UooTifPMN0fvZQHBT416Ph5ph6t3y/Qt5hFUUkPWYkPKRHsA+MgYfcTGJY/olw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19m4ygzclkhrwp3c9x93qt4m37v2w9c2uq0yzq5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["liam34"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A32kMqpYHLbCi8WfbqQXHD0PwxEHhOIn7SarHrnGSa8f"},"signature":"D/EBF7BuoAcqUqaQxOqMfFc7xRkqGK7tt8h1Rtd4UG4/7ZBmIX2nlHQgcKiScdRQ/h3CDZF27AhkGX5EkuQSbQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19m4ygzclkhrwp3c9x93qt4m37v2w9c2uq0yzq5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["547","liam34","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A32kMqpYHLbCi8WfbqQXHD0PwxEHhOIn7SarHrnGSa8f"},"signature":"mxCHskzmZH8EL45wTFvFzPyowG2IuxJKkgw3G6DvHl0RFV+SGJoV+8fpz3P4wsTfPXKQIV22zPu1C4DwWJ++Rg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1keensevyk06w56a95lgduj655y5qmc74ag2xcx","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kCR6XLvrMkRXwSlMBfUvy16/W8u1/ueDNY8INSi+VRBDfO+ElCQtcxFrZdd09BIX8vrJVXhPpn0QXecVXQVrLA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19m4ygzclkhrwp3c9x93qt4m37v2w9c2uq0yzq5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["547","1","1","g19m4ygzclkhrwp3c9x93qt4m37v2w9c2uq0yzq5"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A32kMqpYHLbCi8WfbqQXHD0PwxEHhOIn7SarHrnGSa8f"},"signature":"7CdO2pqcjZeOyvAEeWqpYB5UMHpYN9vrX8nZGX5xGG5WdT7F+HmRYubfkZ/3f0tJLumzzXMLgG/UyOdASKKIBA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1keensevyk06w56a95lgduj655y5qmc74ag2xcx","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","kamenuk",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8X+MsWQtOxsna8n5DRqouFjV5blLKK7S8jfs4HM+Smf"},"signature":"mN+B80iIWJShtaMwUyITpO1uc/lMbm7r11Sf49LRoLILiZqM4rXbuLiy9yx/oB1cHHajHt1sxBKkdn3dp4UB1w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1keensevyk06w56a95lgduj655y5qmc74ag2xcx","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["kamenuk"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8X+MsWQtOxsna8n5DRqouFjV5blLKK7S8jfs4HM+Smf"},"signature":"3i6G38Uh4GyWCB+5BY/I+4gbT8gYaC3hcSXqhbf6EVUIU6SQEDR4HS0tvLp+ZkJ0qKiZqpGO560KjeeB2W3W1w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1eqkua7le8jkme8ptwr5cthcdgmu9duwr6n09jw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"1liFA4ZT71noiIX2mcOsrdKtXY3YATp5LRWhc1Igz3B2duAQb/Kslb70F3oza76wRfGOv1gdxGLY/NiN3PpymA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1eqkua7le8jkme8ptwr5cthcdgmu9duwr6n09jw","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","night243",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AozBy8674gZ7TZ6JaLS5w84jHfu/V8NjZc1ZyEJyzHKl"},"signature":"8je9dLTHaZP5g+eughBfoR3nl7Jr+PRbMihgSNt79WFDdA0d2ZGOFGDsdqkfZC3Qs5ddRqPIojP5q8GN2pZDHw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1eqkua7le8jkme8ptwr5cthcdgmu9duwr6n09jw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["night243"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AozBy8674gZ7TZ6JaLS5w84jHfu/V8NjZc1ZyEJyzHKl"},"signature":"IG0HzdkKiBnYXVf6uerZv0zd1vkub/aBy3k06iFY2MIK3jnY6Lu1Wmmb9D8AuyqaqqLdrNRHeqgCPkL8Sp1gbw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1keensevyk06w56a95lgduj655y5qmc74ag2xcx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["548","Hello People","How are you doing?"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8X+MsWQtOxsna8n5DRqouFjV5blLKK7S8jfs4HM+Smf"},"signature":"mRRrVLpHQgmTIlvG583urZr8Ndaz4PiMRcjIiLt8a3QMorLecJOQEdkdxn78IG4Zuh26BpZh0BNrVym53L4v5A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1eqkua7le8jkme8ptwr5cthcdgmu9duwr6n09jw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["549","night243","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AozBy8674gZ7TZ6JaLS5w84jHfu/V8NjZc1ZyEJyzHKl"},"signature":"qP/fcRq7Djj8+SyleW7ulczx3e3IQZSDrFQcvkw8f4B21L48p9IveTD1skaAh0oLtatfdthARnuoT0YEbPEl/g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1eqkua7le8jkme8ptwr5cthcdgmu9duwr6n09jw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["549","1","1","g1eqkua7le8jkme8ptwr5cthcdgmu9duwr6n09jw"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AozBy8674gZ7TZ6JaLS5w84jHfu/V8NjZc1ZyEJyzHKl"},"signature":"mY77YMc+6cjz3sKGQK8OrWDaQdH2WTZmxParRBkPXQNVd89WT57azl9PKM1MzFq9olQNp58+hjXJ5jF1Q7ZOcA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1egcuaal7karpxq03jjkgezzcx933f445pysd7p","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"6ZyMNErdKun5i8VhWlYUqFbSSA7ASXOumex3o+ViKmx9k32dvJrJFrtJJwXPs6XQSea9PJnvGwkVxTAGw1lT7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gvj7gfcgr29750wazh287uk3s0s5ce9d9wc9wk","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","uganda",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtNq9ZDxwFUEMW+GW4lDGpqy56N7tJ3b9VlPfp8KBRej"},"signature":"XeExHSHNZs/yNc2866RN8T+vbITAIkOTmDqyl+aC7sNOXZxIFXVmznX3XAw0b7eI1hoh19VZQoZcJG72LX5HWQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1egcuaal7karpxq03jjkgezzcx933f445pysd7p","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","saint4",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyH4AOC1pqTL9W3Nq/toetzGep0a3vga31JoDzzTmPlr"},"signature":"5IVv5IA+axUPlfQw/AAvuA28T8HfGP+efn8TkvgVjWtP5Yb5xN5Z3qT6vg1/rGz1kxtW5QjIWa9Ei2WpNQWadg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1egcuaal7karpxq03jjkgezzcx933f445pysd7p","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["saint4"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyH4AOC1pqTL9W3Nq/toetzGep0a3vga31JoDzzTmPlr"},"signature":"JEF57BFks7eQyiazEgRImdfkAoJPIQOtZWClPRHt0Y12TQUFCvYhqX3uXCyvUWqKEMehlC2xT3U+GCKnc/nZXw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1am3qkd3prmgl7zprp6nsayw8yz0xxy0sts520z","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"mkTlRYhjt5NgxkC7irPWEWDpTt8wSl3nJvTowtyxdTValuwpToPhNLp1Xbw5rMbH8UOV0KFx4dak3+1Km9d7tw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1egcuaal7karpxq03jjkgezzcx933f445pysd7p","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["550","saint4","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyH4AOC1pqTL9W3Nq/toetzGep0a3vga31JoDzzTmPlr"},"signature":"LcE8onXgNls6a06EcFqfi+CPv2YRbbQG5e5Q4dSYFkVwHIgZcqPMRktBmi35sNPc4JxNLWVxw5BxmskTJYIQfQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1egcuaal7karpxq03jjkgezzcx933f445pysd7p","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["550","1","1","g1egcuaal7karpxq03jjkgezzcx933f445pysd7p"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyH4AOC1pqTL9W3Nq/toetzGep0a3vga31JoDzzTmPlr"},"signature":"7yYoKHWmWzJgfs8aS2VoN6tK6INNH9HkxgEGg1yDPZc7miPzh8AM+TPF2N80+i4HYOGjH5u3zUxIJyMw6JLZUA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gvj7gfcgr29750wazh287uk3s0s5ce9d9wc9wk","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["uganda"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtNq9ZDxwFUEMW+GW4lDGpqy56N7tJ3b9VlPfp8KBRej"},"signature":"6BDrsyy9kMEeUPGYgzM9tqqDYIYnN+6iOsnWOWilhPJehkK+7BQTMMuRkdzjVTo332blFWLPdvZWiTKFcd0GFQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1pwc9myz67u77q2fhus7jlvhzy9decgraza5sze","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"lgSmJELR6eCz7RORfliC5ckC/SYcwZDsTdEK4+UXlbsN73ewIgZbHOy5/bfIQfpR9R0tZVYsrruZ6LK9veDsCg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1am3qkd3prmgl7zprp6nsayw8yz0xxy0sts520z","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mimimiy",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyPwBJ4JVbxKEcTuSOKVVCjlPLgH9Ro4WnLJ8jvnjtbe"},"signature":"0Ytij6kOEqJKuklg/4K4xM/G3BPbuJjDFl6f4fIt7rp9VNSqH3dSrlu+C+ilWJt/HLV2Ek1jeVOdCu5k8tJfHg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gvj7gfcgr29750wazh287uk3s0s5ce9d9wc9wk","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["551","uganda","uganda forever"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtNq9ZDxwFUEMW+GW4lDGpqy56N7tJ3b9VlPfp8KBRej"},"signature":"wJH53mu+M8yk+fY/hdWp5HvfTTCtutzeOmugsI/O1Vd2ZMqalLvIePI9tqowAa7SoDTOmoWF35RXEe/XZEHfXg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pwc9myz67u77q2fhus7jlvhzy9decgraza5sze","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","silasq",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+OcJki+XVNwq9013CEQr+p6WkOlRLJkjTc7ctFr8lXS"},"signature":"2wZ/LCVB3Yo7J346811RrbPz/7kyAPFt8UA510SvoiRBhFjJ5jGAVpgcAkzMASTo8bgW8dcoPvpAlJ2Fq1wNJA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pwc9myz67u77q2fhus7jlvhzy9decgraza5sze","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["silasq"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+OcJki+XVNwq9013CEQr+p6WkOlRLJkjTc7ctFr8lXS"},"signature":"7UQzOvOVup94uKnDB3xuu8/YZRFo7c4zlqLoNZgVoV1/SiUWo1FoNzsEVr21oqJXjJrTqVXDMNio2Ndkx3wCAw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pwc9myz67u77q2fhus7jlvhzy9decgraza5sze","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["552","silasq","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+OcJki+XVNwq9013CEQr+p6WkOlRLJkjTc7ctFr8lXS"},"signature":"UtjrTmMw/Iwf2LONRM43DDr2G4MxxoVSvpjDFWcxlqYCvDT6OBahokT8AaAvVlj+yKijdImt18PxnhMjd1aOTg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1pwc9myz67u77q2fhus7jlvhzy9decgraza5sze","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["552","1","1","g1pwc9myz67u77q2fhus7jlvhzy9decgraza5sze"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+OcJki+XVNwq9013CEQr+p6WkOlRLJkjTc7ctFr8lXS"},"signature":"smMF1S4zYLEdgTso/ON5vM2TcSJvZ2k9A00w+d9oOTxZrzyyEzKhlIfOJW3gzlDu0j2xQiyyzTg4zpaeWBGmXg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1am3qkd3prmgl7zprp6nsayw8yz0xxy0sts520z","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["mimimiy"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyPwBJ4JVbxKEcTuSOKVVCjlPLgH9Ro4WnLJ8jvnjtbe"},"signature":"vdCuez/8oLfTRhjyoPv0BIopceKgjOIt9HfB2K5Hjow7FVKLt/vUe33vJwu8/PhB0nf5JDJrj1oxwyIk+McTmQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1e4ff04vxw45yvfgn9y4sxyp8akp9cev3wde0vv","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"VgqUBEsXMFxx+UwCGuenRxw9xok01alGjkAs/6faxF0NclglzzUqTJY9ZaoYPuJVaZA2y8kvxrR+9MmbGRzJYA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e4ff04vxw45yvfgn9y4sxyp8akp9cev3wde0vv","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","znolans",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5SIpztnIiY8SEEQERC195CiBs36Qv3kcfbpjz87UutB"},"signature":"jNgIZW2LN47zF//6nGRvv49r8g/SFtkEBtQpC+nItrJdPDZdXRbRxVmP6QnVFWcYHCEc3K6NOSjyy126YstRdQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e4ff04vxw45yvfgn9y4sxyp8akp9cev3wde0vv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["znolans"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5SIpztnIiY8SEEQERC195CiBs36Qv3kcfbpjz87UutB"},"signature":"CNbtPpUH99aEDlFAn24incrf7Wyl72d4XuuHc9M8/2B7q8cQesOmKDoxHNSoC1GxwqDzdutuxG1yn5sYQQAaMg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e4ff04vxw45yvfgn9y4sxyp8akp9cev3wde0vv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["554","znolans","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5SIpztnIiY8SEEQERC195CiBs36Qv3kcfbpjz87UutB"},"signature":"Euf5WIDHE0jjCj24ZC5M30z2HDNufujBK8ei+CxS+ixIfbmivJzj214ylbrkYdiKsUlDtOwycGNKltznbQuZHg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e4ff04vxw45yvfgn9y4sxyp8akp9cev3wde0vv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["554","1","1","g1e4ff04vxw45yvfgn9y4sxyp8akp9cev3wde0vv"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5SIpztnIiY8SEEQERC195CiBs36Qv3kcfbpjz87UutB"},"signature":"9NquyGLx5R3CFnnpg5blXGTLlbSzcYTGCOlTbuqjW4M85YwF0ZrZ0uh34AYzjnaEwn+Clvdd/3/x1o1UFq5m1g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1am3qkd3prmgl7zprp6nsayw8yz0xxy0sts520z","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["553","hello my friends \\!\\!\\!\\!\\!\\!\\!","its my twitter https://twitter.com/ida06834678"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyPwBJ4JVbxKEcTuSOKVVCjlPLgH9Ro4WnLJ8jvnjtbe"},"signature":"UcD7+aT4SifCD09g2BIXj90PvSHWRYtppYHcaQ24kilhPygkdXBD48A8wdpGxaCOTfXe1yRoPJirfupdaiXjGw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1awgecjkyypv0xshvdujskhlayfzpmmla609k2h","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"tKzE78XozIOzQnwUkjDPoOUaLCGtyGtkcu6TqU26KBcNwpOR0DvMEa147uadpKBzXYMF8SkAmNE53V+wqwbkkw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1awgecjkyypv0xshvdujskhlayfzpmmla609k2h","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","catotq",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkRaDF11OQgbZ7b7TaaAb+Q64S0xuvmSqzM/fVzSztKB"},"signature":"oFHSibi7cPrLUeXAcezRZRa9tlGWOIqPvg/s3/7XJu94vg535C6ZTAwYML1vAs/KjOQ3O8fr/3Vf9uxwxfkKLw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1awgecjkyypv0xshvdujskhlayfzpmmla609k2h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["catotq"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkRaDF11OQgbZ7b7TaaAb+Q64S0xuvmSqzM/fVzSztKB"},"signature":"hAY8OPwS0+2v1WecZPBq77T0tuQ2YsdF76eFwbBCXGA7AygZMybvcJlJCV8zNUyW2gtb3kglb0P1dZwtXq3xZA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1awgecjkyypv0xshvdujskhlayfzpmmla609k2h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["555","catotq","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkRaDF11OQgbZ7b7TaaAb+Q64S0xuvmSqzM/fVzSztKB"},"signature":"8fMnjQX/yP/lCIKCvzwZ6NlwNUznK+gqWuEGv+i+Tu5cdBrcrFveJrcXEmzNJ8hPPU+mVV9TG724BBDtxG5v6Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1awgecjkyypv0xshvdujskhlayfzpmmla609k2h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["555","1","1","g1awgecjkyypv0xshvdujskhlayfzpmmla609k2h"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkRaDF11OQgbZ7b7TaaAb+Q64S0xuvmSqzM/fVzSztKB"},"signature":"e/wBNXEIGTEIpL3SRnrl3/kES5lrXIRSZotvedr5C/hO0t2nwK4qEoMcx6BvtPPjGdCFLjXi3enMeiKrm+lJzw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lalxleczuxd2kgxfger7a3f90tnws03ekl4ml4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"AZiTLennx8chK9p/GNuIYU34YUFkbUz9eF+y6MNu5GdlR3MnNWqpXXR0gasGRsBZHrs1eWcRerc+9AwWw/i8dQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1eem5cr89ty2ylladhyz90dt9xgsxg8auwfln0e","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"fOc1D59KdF5Cv3VJ1m4vl7A3CqUi80a31v9TXABuw8R/IyE/h/hGF74mHDocN7S1rComBTmhSsnAt46eOlhFew=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1prgw44mqzmt8ygw267pfy08asktmqf386met8h","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"clkjbX5Rq5qXj/lydWULHnlPnmzlfjS84AbDCRCCfv4zV3XttIeR8bDMXdP4k4ojF4hfl0HcZ7dR01QsLrgDFw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1prgw44mqzmt8ygw267pfy08asktmqf386met8h","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","otisys",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzAgIhWqm5ylKUbQmCI5UumdfV2I6YOxrMySxL7sE3la"},"signature":"m99qACNKdTl3yrtVqXLo7a3kYESbH5PTMJeExn7xGGI7Iy3xCEzJ20p++M3KSJKXaNLsjWRSgxDEX7lR4lpXvQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1prgw44mqzmt8ygw267pfy08asktmqf386met8h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["otisys"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzAgIhWqm5ylKUbQmCI5UumdfV2I6YOxrMySxL7sE3la"},"signature":"jgnzXfKMsjfnmZLnt3pH6oXwVfR3WrrnbTLP3UIYe4tEj0+dEdo2kAd5/GPRrtVsU5HzCAWM4Ukez/Lrohrtsg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1prgw44mqzmt8ygw267pfy08asktmqf386met8h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["556","otisys","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzAgIhWqm5ylKUbQmCI5UumdfV2I6YOxrMySxL7sE3la"},"signature":"66oZN5/egfFDzacx1o8QvfnzVqILFcXD4V5NPWM9bwMDi4xbK4dxmlKMnGDZxTrl6guIhgNzLY2t+1i+ZU4vvQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1prgw44mqzmt8ygw267pfy08asktmqf386met8h","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["556","1","1","g1prgw44mqzmt8ygw267pfy08asktmqf386met8h"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzAgIhWqm5ylKUbQmCI5UumdfV2I6YOxrMySxL7sE3la"},"signature":"xzbIRXQBx/ZZG4a9gh6BLqCatz7NWLzNp8IgEFVl0E1abXmJIgP8cuOWjsjPFy3vZRtq2KWP4jmfrxyndRu1wQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1eem5cr89ty2ylladhyz90dt9xgsxg8auwfln0e","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","wakanda",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5VyfyePLb6TWvPSorDeCL6NDBxQnqB3NIvLC0L51sRv"},"signature":"uWub1eLX858vOwBUsA1HgZDNoJJKOGDo3GHPtP/gQG94gAwIdSWXt77H+sTKG2++7lJgvo6xXPN3mAbpR26CKQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1eem5cr89ty2ylladhyz90dt9xgsxg8auwfln0e","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["wakanda"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5VyfyePLb6TWvPSorDeCL6NDBxQnqB3NIvLC0L51sRv"},"signature":"QliWKzJoSfoR8xPetqV+xmh1Soodzqf/3sYBNd9RUyBtVK9Qf0dV4S/cEMaGdlrVbvxRlHR/xhZgNwxcnGUHpQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1v06p5n47ape9h85c7ng67gzencql7le2tgpmyc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"4XMkliCVKztZFbQyEqL3iUSSrUiY/yppeA9M51PbJ3lk7fRySdJkvOluya8YjNzJ1XCc8r0BM49D70xkNOqz5A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1eem5cr89ty2ylladhyz90dt9xgsxg8auwfln0e","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["557","wakanda","my first post of Wakanda"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5VyfyePLb6TWvPSorDeCL6NDBxQnqB3NIvLC0L51sRv"},"signature":"s3pLVKIhIws4luHWw4NFf/3xxsELcboL30YyiZwF+CAJkYyDenBkLgiRRPNR8ylGWMrcn4cG3kD+oYA31Ts51Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v06p5n47ape9h85c7ng67gzencql7le2tgpmyc","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","amoryq",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A132J3F2OPHDvSeVX9gTOBynZuWIpmk7+kzCFO6ejcyl"},"signature":"ZJWV5uXueDQjCoqPJ9s5gyZjAVKFL2Ye1BFEBiPQKvZL1ueuZ/oo41FzlGXcbdU1XR+/pM4rAIkogTAQ7uoKWg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v06p5n47ape9h85c7ng67gzencql7le2tgpmyc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["amoryq"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A132J3F2OPHDvSeVX9gTOBynZuWIpmk7+kzCFO6ejcyl"},"signature":"Gv2QE/PrfcXOWWnDoqiQ+FeMkryDCsbcnasG80rW0n0tHeatAr7Sw1DRTvSskPxp0fgETo+tfrDS4IbXJSCkgg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v06p5n47ape9h85c7ng67gzencql7le2tgpmyc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["558","amoryq","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A132J3F2OPHDvSeVX9gTOBynZuWIpmk7+kzCFO6ejcyl"},"signature":"ipY1PEGZGNMug3cdSVyirWTPmEKUWHoFeKgL5SPvvlEhfzguRbPYekfoCgDsPtVEMMsgxv1b7LthFHd7CGpDEA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v06p5n47ape9h85c7ng67gzencql7le2tgpmyc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["558","1","1","g1v06p5n47ape9h85c7ng67gzencql7le2tgpmyc"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A132J3F2OPHDvSeVX9gTOBynZuWIpmk7+kzCFO6ejcyl"},"signature":"YUKJrUrmL+zf5J9uZjyYtAUp8S72DGjbcgtXjEepOQZa0RWDGSnQjSNMdHw4VV/pY/bfwsaclm6kPHjnzhSgaA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1yva6lz2euwzwn2e6yq662eukxuxhtaucjqcpma","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"m1HvgiZLvDqXmLcAFISHXBFoAwxDm0nO7UsBjPEh5El/+oQTI2aaM02vyzLspGugEayZUYC58VSNbdzMyQ1jtg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yva6lz2euwzwn2e6yq662eukxuxhtaucjqcpma","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","aylmer",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0gnp2YUjkabex++f2ToQdt3L6iY4EzJQl4XRsKRtE1e"},"signature":"9md9CIGR7J3oUjWJjGJVA5FGQl12OzV5QXkHoC9bLApNM6j+5D8EkHBJY0mu888XUOvgjn7JfqL8Nufns2Bz5g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yva6lz2euwzwn2e6yq662eukxuxhtaucjqcpma","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["aylmer"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0gnp2YUjkabex++f2ToQdt3L6iY4EzJQl4XRsKRtE1e"},"signature":"aKqpTtDooTHnrcM4QzFusj9vY4CawlkEzngfDnNsNVY3Duv1/Ae0TrJmYi2NutMdcX7yCsE6jrbofVWij4eHjA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lalxleczuxd2kgxfger7a3f90tnws03ekl4ml4","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","yargnoland",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6wjv1grxaVypwteuaZO5QfnOeITb0aHbHl/sOp95GSC"},"signature":"8ZbY7Vqp9c3hjwrE6J132hDcWG+KSjLOcwwU6YR68asp4ADxuHMALWaIUOeL0WXup+exV0EDxYRRSSgcuZzF0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yva6lz2euwzwn2e6yq662eukxuxhtaucjqcpma","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["559","aylmer","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0gnp2YUjkabex++f2ToQdt3L6iY4EzJQl4XRsKRtE1e"},"signature":"IjELMRHj2JhH5+D9hD3Q/TEPUqF7SKR4O4S0V8fPhFtuHMo25qmQMDk2z7bZcZN9lcBBjmIUEumzy3ve1IKKjg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yva6lz2euwzwn2e6yq662eukxuxhtaucjqcpma","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["559","1","1","g1yva6lz2euwzwn2e6yq662eukxuxhtaucjqcpma"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0gnp2YUjkabex++f2ToQdt3L6iY4EzJQl4XRsKRtE1e"},"signature":"WeTU7bCjjOswGPEZzdfRf1Qg3X1gCjd0oEHSxLQi7XwLdT2QgJnBw/m25NCnP4XJBxgUKSxbGoTtnYGLzXtNNQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16dcvrzzl6v2qsvfnvsq72frg3ccs3dv6uhrgsn","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"7NJ8twzpN5h981O0Odr4Tg93rf9LmQFCu7QeSkYYwnwMqQZ3k1uEkNy6Nom/zB1rUBoZuK1BTA4/uzWTvCIwFw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16dcvrzzl6v2qsvfnvsq72frg3ccs3dv6uhrgsn","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","emerypp",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgkjPdfAEBOOFeiX32brHVC3pGkDEd8dYB0zyN/zS5l7"},"signature":"malSwxbIDKkvtO16MeaxCUlCnuAF2cxTgwdZDAakhOEGbfdWyn8DfNLq8r0vIGqpoJRQ1xBkqFXA1gr0lopuLQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16dcvrzzl6v2qsvfnvsq72frg3ccs3dv6uhrgsn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["emerypp"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgkjPdfAEBOOFeiX32brHVC3pGkDEd8dYB0zyN/zS5l7"},"signature":"5ltnVYV/NHHJEPyL7XaUuvLkme3Zp89sfTzXAp2v8CJGjyr4/0BFI+nIr3vDuQJSs4DA6hUvwugnhhOqv+VtDQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16dcvrzzl6v2qsvfnvsq72frg3ccs3dv6uhrgsn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["560","emerypp","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgkjPdfAEBOOFeiX32brHVC3pGkDEd8dYB0zyN/zS5l7"},"signature":"zaFiNXxfYFcEvgz0gOqXb+OXCG8sFSG8MLCPT/mAEvEKNPMR83XbxtDICv5a3HOzPb1uTNhrOKFC1zACZPTvtw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16dcvrzzl6v2qsvfnvsq72frg3ccs3dv6uhrgsn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["560","1","1","g16dcvrzzl6v2qsvfnvsq72frg3ccs3dv6uhrgsn"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgkjPdfAEBOOFeiX32brHVC3pGkDEd8dYB0zyN/zS5l7"},"signature":"iIRkdp/ft/g9u8FSW+VPXuPogzr6CpvzpeQjV9EdeWMFxwXesvGG/mWAYATtJ2hHLE6y0JVwCzcjpAXWf3exIQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18ks363qcjdwjpnkp5lrak0lr2q3a8umq68l73f","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"+sVdnviV5Pvv0SRp3GwyyKRrOImCTyFq13z4Wce9KrgKLBhegH1F8z+PHwL8tSWTGxrPuBVDlBnGaLmS+rxNaQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lalxleczuxd2kgxfger7a3f90tnws03ekl4ml4","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["yargnoland"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6wjv1grxaVypwteuaZO5QfnOeITb0aHbHl/sOp95GSC"},"signature":"73IsY98yB3w1uhrnx5wkQ8uxmmAYR1ft+hAJhj94WoJz2KUK/nK22i1bf5Mk2TUkrvbOSacwnPd3o0KE92rVmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18ks363qcjdwjpnkp5lrak0lr2q3a8umq68l73f","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","cuthbert",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Am9+x0/QCyEiOjVAGjdX0MIdXjCfGBlrBxzscxP6Osr+"},"signature":"es3b4WRttxH/O7/pc4ZRJftJYbyN3YrmQye0K1Ik0ZBTzV9/xgtc3NqASxE7L2K5IqhmZ9GVZRSuNVex5/1LTw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18ks363qcjdwjpnkp5lrak0lr2q3a8umq68l73f","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["cuthbert"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Am9+x0/QCyEiOjVAGjdX0MIdXjCfGBlrBxzscxP6Osr+"},"signature":"GuC7p6hwezfzRm0YajkRbIacyEyT/1lxJzDOgbMdi0MdrM/IxuplNg6+ImLAPbT3hSZRHTAR3ef8AwPUfhN7Yg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18ks363qcjdwjpnkp5lrak0lr2q3a8umq68l73f","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["562","cuthbert","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Am9+x0/QCyEiOjVAGjdX0MIdXjCfGBlrBxzscxP6Osr+"},"signature":"3YAVYkq523lXF/JFb5MA2DwIZxQPsNthXdcYnMFXShRdsS07YXoonO6902Ifh4xd6LfE/iA6Engsj9kuUHddxA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18ks363qcjdwjpnkp5lrak0lr2q3a8umq68l73f","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["562","1","1","g18ks363qcjdwjpnkp5lrak0lr2q3a8umq68l73f"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Am9+x0/QCyEiOjVAGjdX0MIdXjCfGBlrBxzscxP6Osr+"},"signature":"y3jqdfiWVB7hBFITNu25igD9EVsM+Ha9UMP5WlK0BMMiM4T5E63qi1FvPonkGtitOUuFTc4XKuM6haopALCnDw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1tlxnxg9w2xvjryzlvq64z8g2axn95y8lfq0dhz","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Wyzv2fizzl50GlMJTfxQKpQ5XK+sYI5GmWqHuixOi4U8h6mFP1KVb9dbYC4gspEL2Eq+essZ8T750GdiXxt2qA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rjag47y228cf22em93zr6m9l4fekfgl6vx8ty4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"zlNAcLBEwTi7ldF8+orwEyp7oEfExcBBs2BCEsuKWYFnK26Mj923cqO0xxkiSJpO7uXJJfVXOnEey3ji631R/Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tlxnxg9w2xvjryzlvq64z8g2axn95y8lfq0dhz","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","slowvalidator",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoARvPKMKVm01QtvSXI+nqXLkvmNvn8j5pVOl7guNhCD"},"signature":"YoHVjANrJZBMc1yGd1+TzUu0fGmek69ELTHkahCilScqw8wkq1Ip59LzEKLrVXKoAPNldgJUO2aPUG+bZ7zPHw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tlxnxg9w2xvjryzlvq64z8g2axn95y8lfq0dhz","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["slowvalidator"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoARvPKMKVm01QtvSXI+nqXLkvmNvn8j5pVOl7guNhCD"},"signature":"vm9VuUo9cBobczyX0Ms5AXtteAR9snixGN5ZQ5bNXHVxEoANinGjm2QhjO3WlDcllh3TV/kmSSE4LNSI0cJvXg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tlxnxg9w2xvjryzlvq64z8g2axn95y8lfq0dhz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["563","Regestration slowvalidator","https://test3.gno.land/r/demo/users:slowvalidator"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoARvPKMKVm01QtvSXI+nqXLkvmNvn8j5pVOl7guNhCD"},"signature":"HjtdsvoxUyapMNgN6Vbj0E62jQAhJgV20PmljsousNNrvc2nePequsvJXtSkHWchCpPi6dDL2y1wv0QBxfaWNQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rjag47y228cf22em93zr6m9l4fekfgl6vx8ty4","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mexico",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AidmrqHY6GYftY6eezu7rNlvjHl3lWNWJjPW0u/oab2G"},"signature":"SBtNDxukY15SXD4SAt8pXj7FKJAymzRgNPXc1gBsbTw8ZNCrEMgUUGJZWeanmREvui7Ccx5in4IhP/Rxfnt7Pw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rjag47y228cf22em93zr6m9l4fekfgl6vx8ty4","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["mexico"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AidmrqHY6GYftY6eezu7rNlvjHl3lWNWJjPW0u/oab2G"},"signature":"j/VcXu+Lpm3SqAzivoTRh8QhDuxCgb+OZBM/AHfv4FFibeL7XbXOHaVhWYCufLywS0PnoKzXSfYPVDPWEdtvSg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lalxleczuxd2kgxfger7a3f90tnws03ekl4ml4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["561","YarGnoLand individual","Yaroslav Kolomeets is a free tester, I install years, pass testnets, collect NFT, I am ready to help the project to the best of my abilities and capabilities."]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6wjv1grxaVypwteuaZO5QfnOeITb0aHbHl/sOp95GSC"},"signature":"GPagjrp4a15ggZJONm1RxqJVcEjlltau6wc0UYHeSIVSW0kg6p9zZ4Ngl65bhFwQQv6lyC4RylM8v62mYNklEQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rjag47y228cf22em93zr6m9l4fekfgl6vx8ty4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["564","my post","hello"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AidmrqHY6GYftY6eezu7rNlvjHl3lWNWJjPW0u/oab2G"},"signature":"GBip00iNtCyPAVsobIuBXJbgevMHdKWX4L6G7OwNOz1XoBZoxF8pePWKl/lZ1sXuReGW1bKpdOE6u/0DO8aToA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1r2auzjlhnzuz9ey7unapure53u6t9rud7nxnts","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"XS0Bq533t9BHoa+SVBhEr7SOCqPjqePoH16qNEsRQnhfPLYbnCKqjdNeoQfn1s9ulV6kPfMfrzm1D7nUa97YEg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1r2auzjlhnzuz9ey7unapure53u6t9rud7nxnts","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","sissoko",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwoBCnkRW5r8aj9NOuwWGtNuC9AjabwzQJ52FPJHgxbj"},"signature":"+MR5XnESZEoXJsRhKsUgeYdoWk9ZFg80QBmCMQ07GLEst62ID3YQN6uq+EfrHt2XJr1lcOaRlY1Z6qmZRs/N8A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1r2auzjlhnzuz9ey7unapure53u6t9rud7nxnts","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["sissoko"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwoBCnkRW5r8aj9NOuwWGtNuC9AjabwzQJ52FPJHgxbj"},"signature":"nPghUXlEo32sEmPY0fsrtv3Si6sVAGNCXLANOUaSe/tnxhsERLMdIWL4I5rrdNEL0GrBaaTHebO5JGVcs6cMLw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ysp0xmx6uxpgyz0wywmx7g0yy2m8are2vam4ye","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"r3JdC0H6CvOlPEiGVAdmafXZ7DLa3PR2TIrkQYAH2PdUU9CziXscOOF77qOcTOeO4Cl4Y/CJg3waLRMiSUdp2A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ysp0xmx6uxpgyz0wywmx7g0yy2m8are2vam4ye","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","darius",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap6Ct7jh/BFsxytUUPx6N2yzzFYvqnHbghmV22gpT+vQ"},"signature":"vAj9nro9iiQqX4woYBiL2gBcj+XpBIY5ilvlhImKkLMMB7Xl9t64yYQVridH2sRkKYntNGCxTKm5oxfIfVJS7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1r2auzjlhnzuz9ey7unapure53u6t9rud7nxnts","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["565","Mohammed","It`s Mohammed Sissoco "]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwoBCnkRW5r8aj9NOuwWGtNuC9AjabwzQJ52FPJHgxbj"},"signature":"PGnetAda6S+w4dhS1pN0IYLnQyfiaVD48PCmYHVh07pwtMT8szkHh+AXgOAWY6LRDHUYxomMbR6lRRVheSLzLg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ysp0xmx6uxpgyz0wywmx7g0yy2m8are2vam4ye","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["darius"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap6Ct7jh/BFsxytUUPx6N2yzzFYvqnHbghmV22gpT+vQ"},"signature":"Cb4s8tkgpaik9LIK3BNq0NUI2m6Y1G4HUBj4HKziJ8hg+fD5PEedIeLCepb0ykNVXLtvbzf02ZKcS34Cg3Xbtw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ysp0xmx6uxpgyz0wywmx7g0yy2m8are2vam4ye","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["566","darius","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap6Ct7jh/BFsxytUUPx6N2yzzFYvqnHbghmV22gpT+vQ"},"signature":"V+fBRz0E9kcRIFhxuPg+hZqk4baktDJXprmJrqXzQolprnNtE5CQzMw1MXsfSOJOjSze0XZ0+xHoPESK481L9g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ysp0xmx6uxpgyz0wywmx7g0yy2m8are2vam4ye","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["566","1","1","g1ysp0xmx6uxpgyz0wywmx7g0yy2m8are2vam4ye"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap6Ct7jh/BFsxytUUPx6N2yzzFYvqnHbghmV22gpT+vQ"},"signature":"I9u0U0nKptJim80z5qoT5LFw3okAdvw7c0C1PDUPa6w6C4Ut5lziCWKruqnitzgX8KqN7cwa8Uy+Ws7gIOv26g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12mswl6eljekskqsfk9kanz8wp6gywkhg002qc6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"N79S2L2T2Wavv0kjb5J8W2kKuFj+OHIAD8g8IJDbkzJTCszsTX0ttENRcm6A2p9eATcmHX1cs3XmSvh2nbBRSQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vhdmttzrcz25egrl7r6p9hqp2zff4wlv5kquw5","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"GU5THd3JvZSjikSdTsyTvjDUwIRxaQTjsKygFZ7lGt9q6YAD2GZDMDGAmJhfSpxfGYKXQ9eJwB/u7rG5mmT04A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1wak3sqnhj0tltpzffnxyc4spkrpykpg073867q","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"pYLqKZc1jirupNZc7NTt7eHngnuPvWcDxZUmmR/1/4xcjpV16XcdgZx0qtS1FC/oB9rEpGoWEEFqLJV/oc3JVA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vhdmttzrcz25egrl7r6p9hqp2zff4wlv5kquw5","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","warrion",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApX8i3s7+3Lw9dnWj3tb5MrA7egfTrAgzU1q2o5b9OJr"},"signature":"RugAXoFgtHGlEqiAeuav70noE4Qd5gKsCaGpOysLxYNwOB2jJ1YMMO3cqehe8Pql/aa/4wl0Z1nZOHo+9+VTuw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wak3sqnhj0tltpzffnxyc4spkrpykpg073867q","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","Cosmosis",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6Wl7FoVY/qCaxljQMcp5j8KahP9D7tQEzeTXRgAosP/"},"signature":"PnokQmd0nwlv9RUajBV2AAKNZODXJosQoeg/rlLKmP1w0e6L1u9EH2/T5QP6UAgm1E3+/csBSottRstTkBJj1g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12mswl6eljekskqsfk9kanz8wp6gywkhg002qc6","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","edgar4ik",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1JedBk3wJSl0cWj945oq2SEQB1vceTniAUV4D1u1IDU"},"signature":"5QZv+mpMRoat/ANbaVn0XbFSS5RAfb6CQ7HY/N6n+GIbkcthB6Z/grpMsByJ/9Bx0D5PFJTHnlFJjsgj1AevjQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vhdmttzrcz25egrl7r6p9hqp2zff4wlv5kquw5","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["warrion"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApX8i3s7+3Lw9dnWj3tb5MrA7egfTrAgzU1q2o5b9OJr"},"signature":"zC1+ZyGkJ+FEhriCWQ3DuOz3tjgxRgy7ock2cbxrGWtelcN4nIR+mnU5jQej3n8pqxboWTFaUjreNsJuuqQa1A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vhdmttzrcz25egrl7r6p9hqp2zff4wlv5kquw5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["567","my first post","it`s my post"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApX8i3s7+3Lw9dnWj3tb5MrA7egfTrAgzU1q2o5b9OJr"},"signature":"xRosSX9oCuITAtZx47xan+k20/v/g25GoP7iz6m6/7J95W+9nz8w2X7jOymVIfu5++MkBbXm9rj/vJhxieodHg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18jgsrp5ltxxd6u3e6pvp527xe96fu9wd6t4efm","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"hSHjns8rgddn5W1sMqZxYZJ59k9L9YhJ49PnyJwjPaIQhUcglAagTNKQZH38qpu61w6GFlCoLpM0ysTvpaLRfQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12mswl6eljekskqsfk9kanz8wp6gywkhg002qc6","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["edgar4ik"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1JedBk3wJSl0cWj945oq2SEQB1vceTniAUV4D1u1IDU"},"signature":"jm7IMw8FcnRsnyjuW/Zq9Ay6Y/sSfkoFGaVURHSvMqlSe65SS0ZPmDo5l3WY5kYb6gNfvvQ02UUgLxZh4HIV8g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18jgsrp5ltxxd6u3e6pvp527xe96fu9wd6t4efm","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","maridoroni",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6OpMXsETY+iJ6NEqvLckOPdRPVyuU0Kcza2XQJm8htV"},"signature":"xqyzermazkOBr4XJzEEk5EXClDfTz1sgGLQzil7hZFMZjLp0QcelZIVbgwEb7FhhMViOGoH9JDjHCwHUfz5VXg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18jgsrp5ltxxd6u3e6pvp527xe96fu9wd6t4efm","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["maridoroni"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6OpMXsETY+iJ6NEqvLckOPdRPVyuU0Kcza2XQJm8htV"},"signature":"ZawMo2DqC8mPOYS8h2tb3BPSCdkl+31PcIjEQ9p0/xd40pJzHd/fWkpZG6KE4IOdn3osVVm9gMFMdebcrVyAqw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g10mfpce8gx0fryszzftkxzf77y5k27dlczrn2v7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"vj/mmupV9cG2raJ+O69UvgzTIJaHQQ2V8537vTYZnZZmVD4F7m6dtkbW5pNDp2rD0T5qNED3LRWb8GwplzxAiw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18jgsrp5ltxxd6u3e6pvp527xe96fu9wd6t4efm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["569","gno. lend gem","I\\'m sure of it"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6OpMXsETY+iJ6NEqvLckOPdRPVyuU0Kcza2XQJm8htV"},"signature":"M8JYYF4S7eKrmndJWCjs6GxhC48h/+jiTI8vCYCVoRgynHP3mpj49UXuP0sZPNxLxDmsDVsZCjPt7kXI96GWGg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12mswl6eljekskqsfk9kanz8wp6gywkhg002qc6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["568","Me gusta la gasolina","Dame mas gasolina "]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1JedBk3wJSl0cWj945oq2SEQB1vceTniAUV4D1u1IDU"},"signature":"ue2IN1NKXnrttkdMC6FfbN3AacCefgagZT36jVBo/kxWoaknirje+vIY0DVbuTjxem1tnIwCawy8RQX0bnSjUA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12mswl6eljekskqsfk9kanz8wp6gywkhg002qc6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["568","1","1","Si te gusta la gasolina "]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1JedBk3wJSl0cWj945oq2SEQB1vceTniAUV4D1u1IDU"},"signature":"Z2JoSK/rsgXtwU/LOA+7Av/OBMnJrcaZ1MrqZFG0k1xrbl5S2x67TmYNnX/aeI4FRC2M8d6fBlJA9rl1vhS8/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10mfpce8gx0fryszzftkxzf77y5k27dlczrn2v7","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","oblachniy",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvBgUHG6V6pEvDDA3EdRNQXw/wJUVC1nk9c5/zkfG27h"},"signature":"X+fswilyg9hqJ6ULUqgCfUqozTjWdTr0Tct4JVXQox5HzXUvZrg7t6lSNEeSikrHN4aHFr3EvTXKXtm81pLTfQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14vfmecr0c68lk3udl943x42d9lf30ss0772gzv","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"jXtWm8t0yxkXm8COqeapkpfSYxUHFc5qA4DMdqxPgGVSz1+I93d9LTjJ+dLiXtkDRCGG4MJdMuvOeDtPz5q6Pg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10mfpce8gx0fryszzftkxzf77y5k27dlczrn2v7","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["oblachniy"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvBgUHG6V6pEvDDA3EdRNQXw/wJUVC1nk9c5/zkfG27h"},"signature":"X4WrO9pe9De/h44aWP4v+Au42cgCFt4XBNdrvGe+eyQLcIZBI0DdVzWnYYADnGBAtbGR3ppSdbSTzUMOMojWfQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10mfpce8gx0fryszzftkxzf77y5k27dlczrn2v7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["570","REG:oblachniy","https://test3.gno.land/r/demo/users:oblachniy"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvBgUHG6V6pEvDDA3EdRNQXw/wJUVC1nk9c5/zkfG27h"},"signature":"Gyke9zMtcmbqCVZWJrQ+yWRTB9KyYqmnPt4jzJKCIFgO/pNm/GEApF5BJh9u6POUCjaZLHlmX+9nCvX4UKWAiw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vfmecr0c68lk3udl943x42d9lf30ss0772gzv","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","sirius",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxNm6vut4OYn+P3TdtKTnfrnEg7/kz5Zo3ZcfBmw2zYE"},"signature":"Xdoe1CrXUErCpA0zXgzVO7MSxLMeYIlZNN3JaTLRC4R8GvJy/3TRkZgfvjCSmrTTpqzScjRw/tcDYBANzeltew=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vfmecr0c68lk3udl943x42d9lf30ss0772gzv","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["sirius"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxNm6vut4OYn+P3TdtKTnfrnEg7/kz5Zo3ZcfBmw2zYE"},"signature":"Cb3rTln9jolxgKLdlMVCtJGxoVqcRQqZwXWS4+GG+TZ2WW1zZHcnLbRsS5Tb34XAhaj4ioMGeLz0YfErKt0x8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hm5lxrg67jq87cg7rt0wwgl3jnz4nsmm4ga74w","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"JnI/vfRTnmi4Ll+gIjJqrgPLETi0AQmj39i513ydwjVVjM51y3S4wGfhjCFUGZ0JW2wWcXNMBhrzJiNee1hxYQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hm5lxrg67jq87cg7rt0wwgl3jnz4nsmm4ga74w","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","julitopapi",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9gHyT9aOG8KwHejjTv8IpeRooONxLSc0PKZV2iGnqQn"},"signature":"K0wRD9C4okxSZ9+vg7B0Skll/DAPnrqvlOR9ySBK8KEjiReXdq3dN/XwoUezK9e2bHdjEgvHzBGe9NtAhuQgbw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hm5lxrg67jq87cg7rt0wwgl3jnz4nsmm4ga74w","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["julitopapi"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9gHyT9aOG8KwHejjTv8IpeRooONxLSc0PKZV2iGnqQn"},"signature":"esF+ByaW/XcghcHoZW15z5kqwGkBU3xlK3NAvQyMOg0wBLg++Jui8sg5PDOxaGRAT8O5WVPkA+581QtiSaj3MQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1amxfvvywxy46ze4zzv5h8dlx5alpft262jw7ez","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"GCjGmQ1x/xoqARgBVrBFMUy89f374qS0idkBIklp3H0w60KiK+/uhf6rdXnmr8yGNYI3l45sssOVLUtCJQxcwg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hm5lxrg67jq87cg7rt0wwgl3jnz4nsmm4ga74w","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["572","What is going on ","I dont know brother"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9gHyT9aOG8KwHejjTv8IpeRooONxLSc0PKZV2iGnqQn"},"signature":"xok7y0MIn1OCMnNiPr0anTh5v+V7/cySXUb1vACaHJcQhZNxAruKBv/WPST/OWyHdTBRiDrqZ/6Y7H28tVDpag=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hm5lxrg67jq87cg7rt0wwgl3jnz4nsmm4ga74w","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["572","1","1","Whaaaaaaaaaaaaa? For real?"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9gHyT9aOG8KwHejjTv8IpeRooONxLSc0PKZV2iGnqQn"},"signature":"t7Wxe7BIlA4uUgbUgZlOWVzpMtteva2xBHYURQcq11wHNnbNY+3wLMvDf/29n79AL6Rab5YV8NqpBnSVNCZFeA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1amxfvvywxy46ze4zzv5h8dlx5alpft262jw7ez","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","memguru",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqH2q3mcHIqu7qhSPouPxwTQ0qi/8yIuJ6Xri2M07UO0"},"signature":"9gTGvViC3OKoOBj+z+r3P8LHITbPeFrhBirkfE89Jo1qU7kXfdVGWsQUp7EF0RsJXIQacgTgSZl+BtSPkS05cA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1amxfvvywxy46ze4zzv5h8dlx5alpft262jw7ez","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["memguru"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqH2q3mcHIqu7qhSPouPxwTQ0qi/8yIuJ6Xri2M07UO0"},"signature":"2gxgk7RpT38vyXMXCMZqIdMp8LyegDBZfzTgNif6Ich71tk2DvIa1+aUkMzFwPWvYKrnx1X8Xq/AbfIG5e1srQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1amxfvvywxy46ze4zzv5h8dlx5alpft262jw7ez","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["573","Hi","Hooray, a new test"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqH2q3mcHIqu7qhSPouPxwTQ0qi/8yIuJ6Xri2M07UO0"},"signature":"AcfhLbkWiClo2KKMYEipJtMAuv+8ki0a7GzjZ+5+H2pEtqWlJI9UFgwSp1lC04wipRqZ1JYyKotUg4tn3KG0AA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ysp0xmx6uxpgyz0wywmx7g0yy2m8are2vam4ye","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","darius",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap6Ct7jh/BFsxytUUPx6N2yzzFYvqnHbghmV22gpT+vQ"},"signature":"xjU0yV1+L+bCWzf/8/1zAty6VLRA/iBTa5bJqvgzS5linXmZ6JLuFEugsuHJHiuEojC7x8K1re3sXA6lltN8WA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ysp0xmx6uxpgyz0wywmx7g0yy2m8are2vam4ye","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["darius"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ap6Ct7jh/BFsxytUUPx6N2yzzFYvqnHbghmV22gpT+vQ"},"signature":"32KWeR9mpWySZzgJM0/Ex4re/djoaC2fO+F7UkJYnKUPr2IRGwYFDqInBKRqAR7skIziE0rL3OG5nbJq/pl16A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gcvq9mxh7xjd7vsqk4kqzz27mstxvgdwcum9hc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"e1e66jUlQoKiwla+roPD8rmSknEyv1WRvZ0TuAn9UDYFETm8tx6sKL6CZ2ug3Gzrk0j9mPc4YjRHl1WAQOpPSA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gcvq9mxh7xjd7vsqk4kqzz27mstxvgdwcum9hc","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","patrick",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhrG3i0Mv10R02V7pdwyuRFK3SO3i38O0cvo/cP1+XU0"},"signature":"c4uDlDwiyR4IdXkATO9YnMYhhfKarObMhYKJWkBOAdQZXmGZFSB5i6SDag/9TGlqS3wx9wth1GbEsvGp2ue7ZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gcvq9mxh7xjd7vsqk4kqzz27mstxvgdwcum9hc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["patrick"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhrG3i0Mv10R02V7pdwyuRFK3SO3i38O0cvo/cP1+XU0"},"signature":"onxQyvAPRq76pQ2nU0c46IA5+31TjljIGx8bN+WRadJHdjeWtx2V8+Vf7FdiU36fifH7dFPb0MbaAjJcEOzJTA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gcvq9mxh7xjd7vsqk4kqzz27mstxvgdwcum9hc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["574","patrick","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhrG3i0Mv10R02V7pdwyuRFK3SO3i38O0cvo/cP1+XU0"},"signature":"yT8RnTGtpFHmgObagE5p9AkB2FBTAksVKIeJp28mKopvRqSjLWfj3zBhK/lX/muBHUoaU/5boCsRvmEhHGiV2Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gcvq9mxh7xjd7vsqk4kqzz27mstxvgdwcum9hc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["574","1","1","g1gcvq9mxh7xjd7vsqk4kqzz27mstxvgdwcum9hc"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhrG3i0Mv10R02V7pdwyuRFK3SO3i38O0cvo/cP1+XU0"},"signature":"bYxlshNVPzpF7mpk+IMLK1IP1yGTFk7xBoOILoJGEO9w+cWaXbAaLA/s093DL+Zy7QBxE7PFVM6suPuIkG95dA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fem38d6z2rpwcylcl0tkf5nw7j8vmxhqaxamk0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"NdXw9529WfGCizwCZP6JhJPZDDjOKYeLAsWkKlB5e1ZNfdOeYNm3XtV6/7vn+miZ4TgF95kfnwoQoQdCg5GT/w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fem38d6z2rpwcylcl0tkf5nw7j8vmxhqaxamk0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","leighton",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A60OkO32eBt+fPTx7W76x8g4DmaIzAdlobYzjEtU6kgw"},"signature":"xtTFAQylo2XaAKTVrqxxb+LL0KGNlkWf06vskihYjVsHiU9rLfo8FDKfz3Q55EfPm/NLyidquHMg6AzI7z6YGw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fem38d6z2rpwcylcl0tkf5nw7j8vmxhqaxamk0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["leighton"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A60OkO32eBt+fPTx7W76x8g4DmaIzAdlobYzjEtU6kgw"},"signature":"JqtE+gJEvW8Gi3caz+HSSozApnELNf2m4CXb21bRN2xXlKzSi3fibWqszLryRZB2L/c6butfGjEDaC4dAVqvfQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fem38d6z2rpwcylcl0tkf5nw7j8vmxhqaxamk0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["575","leighton","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A60OkO32eBt+fPTx7W76x8g4DmaIzAdlobYzjEtU6kgw"},"signature":"kXaeNIUU1VtFyNi72xUtM1Zd9DDQ5lT7Z1fgdxZKjPgwbdPBSttQ68kfV3UugGa/kX0qctHRYkoqyht5ehJ0tQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fem38d6z2rpwcylcl0tkf5nw7j8vmxhqaxamk0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["575","1","1","g1fem38d6z2rpwcylcl0tkf5nw7j8vmxhqaxamk0"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A60OkO32eBt+fPTx7W76x8g4DmaIzAdlobYzjEtU6kgw"},"signature":"hSpxPXzqeFtYs+OIGfFjxqMHbJ2shuE8WsJxjmlckQknC6Xsr0LW31JtQyfJwwpzIlIHsugn8Ib6vGZJL0fTeA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1mxy0h35w8awerwc6dr72plp2mn5eyh43ksa4q0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"GTaLOlOUOkoIbEOEgCafw46t/t76jIF1WywSRiAwKadU7j5gqVNBTmxSmArci7b9qS3VoSMbIBktykz6o4bV/w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mxy0h35w8awerwc6dr72plp2mn5eyh43ksa4q0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","anatole",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtSnMb9MCXBwCKisYLzF0G7+xYqnCQfBP55tyzpHwVDQ"},"signature":"/i22Q22kN0fVjz/xwfnncuH6h/n4QxTpatVqjn9o1iUiv14MkG9hvQYZLnCEZteLn1H5cTwJOPoVLwQR4ZfxaQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mxy0h35w8awerwc6dr72plp2mn5eyh43ksa4q0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["anatole"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtSnMb9MCXBwCKisYLzF0G7+xYqnCQfBP55tyzpHwVDQ"},"signature":"5mlVO+A8mKkXOWVBAQv9kI4lFjjtkcV7TINzdlNhFXVx7xvz3bnBajb/sdriyz+FWG+N96JTvs3LM0VV1Rt06g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mxy0h35w8awerwc6dr72plp2mn5eyh43ksa4q0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["576","anatole","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtSnMb9MCXBwCKisYLzF0G7+xYqnCQfBP55tyzpHwVDQ"},"signature":"8VFq7EZdehpy93oO1Sz3l2gNM7YiXOdYY4mE/ZOhKil5955CbOrOETuEA6jgP7Nwoue7aYYBTK9ebrM4wNeZdw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mxy0h35w8awerwc6dr72plp2mn5eyh43ksa4q0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["576","1","1","g1mxy0h35w8awerwc6dr72plp2mn5eyh43ksa4q0"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AtSnMb9MCXBwCKisYLzF0G7+xYqnCQfBP55tyzpHwVDQ"},"signature":"3WL/f0PX2bokeRlEOrK/ryPgDQ0cs4/mGTCdSiyG+Wwcq7UTOAKC/V/NzD1WrJ6hG68wTLt3n1hIsGRSbNbezQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1dcfllrq68v8fu22ll0tszz7m2f8m2mr9rl6fp3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"wLqTZ5EdstWqBslLZ34O8VABLR5N/i26oJnkV+yd50hGAwPVntOGlZJq4esCsm1JfOsbdkAWwsgnOXl8H0NsuQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dcfllrq68v8fu22ll0tszz7m2f8m2mr9rl6fp3","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","dalziel",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ang3z0a/8Yi/jCrtCy59bq4ZW6wyp+ELmip5lL13eJBN"},"signature":"8jTwvfbp4/4u9HTFfwc3hiy49rpqZyY2z3QQUK7yeecCs/e8vCBGcZ01q7pyJBKYyYZWFVqOXmfTxkXMWlhxCw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dcfllrq68v8fu22ll0tszz7m2f8m2mr9rl6fp3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["dalziel"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ang3z0a/8Yi/jCrtCy59bq4ZW6wyp+ELmip5lL13eJBN"},"signature":"e9kK1mJBgrsByL5aYRL7fHhoHPESovKD6lLrwtjdRIA2fh1iiquLen472oTneOc8ABGDMVt0xlWCME/9aB+Jyw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dcfllrq68v8fu22ll0tszz7m2f8m2mr9rl6fp3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["577","dalziel","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ang3z0a/8Yi/jCrtCy59bq4ZW6wyp+ELmip5lL13eJBN"},"signature":"N1cM3UJCnBRvRnBA9QhVS89ZfMCn9sFB9ExNAf2wQis5xrTv1t5DCPYa4VJpiD5Q0MU2nc9sefjIH3kpaZsIbw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dcfllrq68v8fu22ll0tszz7m2f8m2mr9rl6fp3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["577","1","1","g1dcfllrq68v8fu22ll0tszz7m2f8m2mr9rl6fp3"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ang3z0a/8Yi/jCrtCy59bq4ZW6wyp+ELmip5lL13eJBN"},"signature":"Kaq9yJii7DjrMF14uFjSB+AAxngodNSLWqXrBPwwloReRNCcT0qXP3YwkrMY40RNkuHE5FPCVT36ioKJaXRnOA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12r8y9r2utdjrfuz4ftk3jc6nq0dhmgc43mu60w","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"6RuVcLwRqM762nDMbGiECftsOjFdPHFIIIRLoATy9cZuHOvL9VZV989P0mrg8mnq9pnvSbrAm49w8MBrD5qeVg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12r8y9r2utdjrfuz4ftk3jc6nq0dhmgc43mu60w","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","endavv",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5vKjzV+mpkhKPG6SpcV94kIiVYnhph5CAlODy+rzW4X"},"signature":"wZfxBrazr+hHCpM4nHlFra8cQXgVis7TZMVbgYnq9FkxqN7KYkBA0c080FzSvD6xEreeWn1dZnJPuXNQsZIcnA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12r8y9r2utdjrfuz4ftk3jc6nq0dhmgc43mu60w","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["endavv"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5vKjzV+mpkhKPG6SpcV94kIiVYnhph5CAlODy+rzW4X"},"signature":"eN6GqGOHRujInI0il+ReRyWUzLRIv2Lel5LwjEEzQPtulGW3OV6ao0YWy4hoXhkjdwP0JSSPvdOwbnB7S8RnlA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12r8y9r2utdjrfuz4ftk3jc6nq0dhmgc43mu60w","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["578","endavv","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5vKjzV+mpkhKPG6SpcV94kIiVYnhph5CAlODy+rzW4X"},"signature":"DnZaU4GKDQoMjoxEpphRq4RztTK+/HR3JMv3Pf4B3zt1WsBf4LF2vwQ/vDQsQO9b0I3k+pl1V01pQihhThYCKA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12r8y9r2utdjrfuz4ftk3jc6nq0dhmgc43mu60w","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["578","1","1","g12r8y9r2utdjrfuz4ftk3jc6nq0dhmgc43mu60w"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5vKjzV+mpkhKPG6SpcV94kIiVYnhph5CAlODy+rzW4X"},"signature":"NA8jvuknW67We9wzgXHl+ckIn10asGgOvKkttwJKKxsmY2jCVYDbIgXKQkb62kKX05iFJXSpF+32tQiHZKc9yw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g129ttaagcgy7gdpctfw937cu76e4p94efxjlna3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"hEtbfj45Sr7suhO7i1y1JUub8XwbG8rPgCaxvjbnPS4P8HNn3p5g/tKe2HU2eiuatqMR123va4zK7M+O1wl+Dg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g129ttaagcgy7gdpctfw937cu76e4p94efxjlna3","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","farley",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvHM2VKhnER/z1SDUd1rrUKRZ+0lm0XUVi76w3dVbQNR"},"signature":"hVBWrkHR//zqzizEkjqvS4YvN9GCCo55wKR/1Jal/wJOCP2O/9mg3ZHai8FrxIiAV7sXRb46KsLa90Bd0VmrLQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g129ttaagcgy7gdpctfw937cu76e4p94efxjlna3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["farley"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvHM2VKhnER/z1SDUd1rrUKRZ+0lm0XUVi76w3dVbQNR"},"signature":"yc7bd8J6CD6aQVOvxAANcvSooeEvrpTNmAFmWJNkVTE3HQxQ/XMV7+UDnWArKByDg86zc+BM++j+CBHGcJfxdA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g129ttaagcgy7gdpctfw937cu76e4p94efxjlna3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["579","farley","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvHM2VKhnER/z1SDUd1rrUKRZ+0lm0XUVi76w3dVbQNR"},"signature":"3+yMJ3GwyJS1FxEZmXvmJJ3t2Ejgmxp52nclMY8ofxB8jOksjxSF/vpSLA2zs6LW8s8WBUZZoNoC0Dwl46+keg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g129ttaagcgy7gdpctfw937cu76e4p94efxjlna3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["579","1","1","g129ttaagcgy7gdpctfw937cu76e4p94efxjlna3"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvHM2VKhnER/z1SDUd1rrUKRZ+0lm0XUVi76w3dVbQNR"},"signature":"n0WbAFLrh7v8YV5GCQz1ISOGejGw1KRS14klfXUsCABtGoC2vHHHDOP6ZU9pnF07PVi8GnFkgXiokND9C1akqw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1dwehfd2k208qqdjpe44yxsw5azuv2ykcc752r2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ho4hojQRcM5FnNkHEwWQdnSVhNim3Yp/Ks9H4gMJQ+MsLgwTAzaLVhSp60b1fFl/4W7/pzNO5xq+r05yUKRImw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dwehfd2k208qqdjpe44yxsw5azuv2ykcc752r2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","radley",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A14UHKwvCiQPdq1Xkl6uUXF/QYAkQOm2226Fa1DEWnXD"},"signature":"flZxyUTePCOV5iGGXwrvg418hxoEMChrzQC/DAsIegVlO14gjsHaGgCo5fyXjyF0sBo26L5ed9UliUDlfp3dEA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dwehfd2k208qqdjpe44yxsw5azuv2ykcc752r2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["radley"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A14UHKwvCiQPdq1Xkl6uUXF/QYAkQOm2226Fa1DEWnXD"},"signature":"RUwvr1I1c60UslxfxqEv9iQ/JsqtrEhTCZ9H4BGepI0oN8Az+YQ+lE1ZUla+VbxB7FxwaPpe58kGmDN0Nfubmg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dwehfd2k208qqdjpe44yxsw5azuv2ykcc752r2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["580","radley","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A14UHKwvCiQPdq1Xkl6uUXF/QYAkQOm2226Fa1DEWnXD"},"signature":"i6zK9JOGiyCTGqzNc7rLc9EXVsWrDcPSMeXKHiOORMM1juiHcSCFu9Yv1qmy/w0plk+Meu9w219rsTl3n1mqig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dwehfd2k208qqdjpe44yxsw5azuv2ykcc752r2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["580","1","1","g1dwehfd2k208qqdjpe44yxsw5azuv2ykcc752r2"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A14UHKwvCiQPdq1Xkl6uUXF/QYAkQOm2226Fa1DEWnXD"},"signature":"1dvrqjgSOES5CngsKxus8Djl6HqZPj/u0+fuMv6K9KwevIxSEVFhqHeOKuvVX7CmJHjIwIvIc+g2HlyUi9e8ww=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1055gkqm6w87ncj9m7yuvndc5qyez3ry9xmgykg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"QU5XZtDIGlFRtt0SbH2eK5HAsSV49VC9Hrv8YwgkZpZTnmviZt5cyA2td5avT74UZcQ1GLGcEh/P40eWw2lS5Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g106up55ptd3vu0azf0f942j477hx9fng2tr766w","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"D6vl+FxnjhyrWzFbRR/hnx43bEGjPPs4MthhegU1NQ0SJ5xBgdoqQOd4cxuyNS60+JBavpBfFwMNh7QQMHn38w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1055gkqm6w87ncj9m7yuvndc5qyez3ry9xmgykg","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","smirtany",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiDtqMKWD0+ZQ6mpgT0euVirabC68TiQNgw4VzSuxGPW"},"signature":"PLvRQQ18LYOOUuO/qHg82jMJnMkKc496f/IAnb7Ttt8dhlioS/kzNjEYFUqt/zAI4jEddoC5RCz3T6dCGVrBGA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1sx0mnq5q4t6pza9x4qm2talm242yd89qh56cwa","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"hfvCH+CcwYJOZ4k8WxVN0SgafKMNwPHWjG5tJV4d9bIGp/JMzRJZKuZkMkno4ZA5jn/Ne53q5FAXkt3cNBtHLg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1055gkqm6w87ncj9m7yuvndc5qyez3ry9xmgykg","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["smirtany"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiDtqMKWD0+ZQ6mpgT0euVirabC68TiQNgw4VzSuxGPW"},"signature":"DHoCDiHlTm7gpNsZHOBAWf6hpJo5FA85rQ04d6aIrBtORl3L6B1FBciVQWxZPZTmQMugyVH/XL7ghYZ1qJrOsg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sx0mnq5q4t6pza9x4qm2talm242yd89qh56cwa","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","silasnb",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwHnhz1U3D+2tyjyN2XXSPglJ8ezEHlJr1C+ug8MQdlZ"},"signature":"C4ARsacTrKhCvvPcn3o3Cuzhk0gvXriqOprfApsk9NsYnWEBXpm0SavXxTL+9ZygCHuZ3XPBQb4H0TswiJjOHg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sx0mnq5q4t6pza9x4qm2talm242yd89qh56cwa","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["silasnb"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwHnhz1U3D+2tyjyN2XXSPglJ8ezEHlJr1C+ug8MQdlZ"},"signature":"5N52eZCNZ3LkhyYhqYPTUfInI+JAEq+qK9sKjNKfs9Z6VhjvOF6c3Db+8Rs2YGg9ZN1hSq5MidexxAYzwHaz9Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sx0mnq5q4t6pza9x4qm2talm242yd89qh56cwa","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["582","silasnb","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwHnhz1U3D+2tyjyN2XXSPglJ8ezEHlJr1C+ug8MQdlZ"},"signature":"W2ksi18XVIvYW5x9cdoiYjclJiWTNRXxrdDgt1SwgRlTLAQl/0OTk39lCY+8pERzpbWJnXqrX7RFZ2jjPxg4uA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sx0mnq5q4t6pza9x4qm2talm242yd89qh56cwa","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["582","1","1","g1sx0mnq5q4t6pza9x4qm2talm242yd89qh56cwa"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwHnhz1U3D+2tyjyN2XXSPglJ8ezEHlJr1C+ug8MQdlZ"},"signature":"rZVd+zdjMSLCLZWm9sWtWObB1s9QxyhXyTCw76BVNC0oFucti5AHDO+HcTouPJgObaYHvaFEdGNw25mOpEmhrQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g106up55ptd3vu0azf0f942j477hx9fng2tr766w","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","carlosantos",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3Ka+zFmfN1DOTwX6BcPp3sz+gxMYKH+a30jdvzqzIyg"},"signature":"ZlYsvTzwD0vPjRn9njXmo+LOZDTswCRe7o+2ZM53TiBwp5ViXnGTX2dZH4SsxJPHCDIWK0TpCm3BSYWLU/tkxg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1055gkqm6w87ncj9m7yuvndc5qyez3ry9xmgykg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["581","wow","new business "]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiDtqMKWD0+ZQ6mpgT0euVirabC68TiQNgw4VzSuxGPW"},"signature":"zUTGB0VWC9TJdZurH9sDdrfS38qifxw8qhLz44hHVK4NlCNgcnMHA6CUySDCs4LfwJydmt2yLjvVNqkwQ6zj9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g106up55ptd3vu0azf0f942j477hx9fng2tr766w","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["carlosantos"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3Ka+zFmfN1DOTwX6BcPp3sz+gxMYKH+a30jdvzqzIyg"},"signature":"EyXM30fvlQipxqe506a4jmn67rNYghAutbtpcAq5KUNVAqKKVJPn6lcTDQ+fQqur6bIP1JkSViVagC513DyFBw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g106up55ptd3vu0azf0f942j477hx9fng2tr766w","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["583","Pace Space","https://gnoland.space/docs/what-is-gno"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3Ka+zFmfN1DOTwX6BcPp3sz+gxMYKH+a30jdvzqzIyg"},"signature":"chqFHfz8nYANPP7J0tczGCE6lSL3+lDl1zdF+BedSzxhHtj54fqcqYCub1OFB7PVSiyk8fh6OBqZralk/jkqVw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g106up55ptd3vu0azf0f942j477hx9fng2tr766w","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["583","1","1","Space on Pace "]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3Ka+zFmfN1DOTwX6BcPp3sz+gxMYKH+a30jdvzqzIyg"},"signature":"QwcYpdp751FV+3Az4onhZ3aIhmhnLLqGeUHbwrItqs0Fw9I4yb+AQZZ3bU34XM4lqqT64T5Wfnk8AZoOXfp7MA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1x05n3uqhuxy0pp8z7n4st36yqa6dh54sas5fq4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"y6pjyqo7sU/Dyb2yun/pOprbImyx1yvfS9GQKt7Fwc1/ftkPp7oyEudsB5zvDf4yRwtp7oubvyC1Yp4Hj+FsnQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1qgjq5a97qtsqrxstkzz984u0vz2eujpg563hm0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"uQhwW5DhgnbZlIeV4w+bXL+X5TVpMYssZ1c0LJHXz7QdcsT7L17un8EwSaRjyrUIs0qgZgdLosU45QPxIXVcAA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x05n3uqhuxy0pp8z7n4st36yqa6dh54sas5fq4","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mananutiy",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AooDymPFLPOwJ/TzgVNf1Kv/+2v0/3KT8Ex2WCiHdt04"},"signature":"6Gjbe+GK+ttxBMRzN+U1diJocJGHJ3T2Z8/49vhvI0cfPd31JsW+MKoUu1tMVRZdGvE8z6qQlvLfFeRQ1YLIbA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x05n3uqhuxy0pp8z7n4st36yqa6dh54sas5fq4","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["mananutiy"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AooDymPFLPOwJ/TzgVNf1Kv/+2v0/3KT8Ex2WCiHdt04"},"signature":"wh4OMCwc1dcJuaG4rc43+BY4k10vC0jsJOjLT2PjF4Z+rl5zObHLGh7iXIjzpMYLzZCAD7aRbNGuDL6cdkimlQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1x05n3uqhuxy0pp8z7n4st36yqa6dh54sas5fq4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["584","interesting topic","I did it\\!"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AooDymPFLPOwJ/TzgVNf1Kv/+2v0/3KT8Ex2WCiHdt04"},"signature":"sKUBoC8xo5D63Pv5uwf9EBVYODbasWmccuAagXxGPGoMzafbVyYu+bNoWPpSmQL4sYDxVR5Fb+lQ6ouUgzPnIA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16xjq9r6tku2j2ll9qvvmta6l33quw4tkfqy3dp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"W0pYuYstUSHXWLMVDwC74exOFbNtGqkjBNNPHne3te5N0H9HRP3112sBoqWPRNhVXYQBFUCXVJ7MjaTJj4z6Iw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16xjq9r6tku2j2ll9qvvmta6l33quw4tkfqy3dp","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","augustus",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxpRSYQQ3YhQQyZQoU52LfwyETYauqcoLKcGI5ht2AnB"},"signature":"jDRLZF/4Jp1i6tE5KCzefkfYIXSOJ4BWGl1V/gVBPEhDocAiDPEjcqXQutzTY/1MG4+HHE1NnBt3hmZLSvL60w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16xjq9r6tku2j2ll9qvvmta6l33quw4tkfqy3dp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["augustus"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxpRSYQQ3YhQQyZQoU52LfwyETYauqcoLKcGI5ht2AnB"},"signature":"R335eYkDkmaLiNv2WIw8WDlBuE6aRojIW/ZAbiZj2pQuCqDTn0fvE59hlx9PgDy5p/MQrXDr8JF2doaiOQvSeQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16xjq9r6tku2j2ll9qvvmta6l33quw4tkfqy3dp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["585","augustus","# Gno\n\nAt first, there was Bitcoin, out of entropy soup of the greater All.\nThen, there was Ethereum, which was created in the likeness of Bitcoin,\nbut made Turing complete.\n\nAmong these were Tendermint and Cosmos to engineer robust PoS and IBC.\nThen came Gno upon Cosmos and there spring forth Gnoland,\nsimulated by the Gnomes of the Greater Resistance.\n\n## Install `gnokey`\n\n\u003e git clone git@github.com:gnolang/gno.git\u003cbr/\u003e\n\u003e cd ./gno\u003cbr/\u003e\n\u003e make install\\_gnokey\u003cbr/\u003e\n\nAlso, see the [quickstart guide](https://test2.gno.land/r/boards:testboard/5).\n\n## Language Features\n\n * Like interpreted Go, but more ambitious.\n * Completely deterministic, for complete accountability.\n * Transactional persistence across data realms.\n * Designed for concurrent blockchain smart contracts systems.\n\n## Contact\n\n * Discord: https://discord.gg/YFtMjWwUN7 \u003c-- join now\n * Gnoland: https://gno.land/r/boards:gnolang\n * Telegram: https://t.me/gnoland\n * Twitter: https://twitter.com/_gnoland\n"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxpRSYQQ3YhQQyZQoU52LfwyETYauqcoLKcGI5ht2AnB"},"signature":"5V9mVbscKfmEOUkp5JU11ybJxcuOn2By5btXlzAUA29a2ldvQ6ho885W14Kz2M2USUF6L4vzGuH/jZR13CKbUg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16xjq9r6tku2j2ll9qvvmta6l33quw4tkfqy3dp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["585","1","1","g16xjq9r6tku2j2ll9qvvmta6l33quw4tkfqy3dp"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxpRSYQQ3YhQQyZQoU52LfwyETYauqcoLKcGI5ht2AnB"},"signature":"hE8WfOr2Ehh3hxsyqGTO9R8N0vHNeW21AoKe7pAz5wo3bDBOl3c6pw2IjvduqLs0xwQz7vc1hgDEqszubT4Vuw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qgjq5a97qtsqrxstkzz984u0vz2eujpg563hm0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","ganveylui",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Apy4LS+t0hveBmKetnxYnS+N/cDSzJoUvp7749aF229C"},"signature":"n0dTDgfu5YF+U1cWVogbuxqr+Y9kX0KKxkciGTQde1tVK6fWPPNB4gMERhug6T9brxDyOve+SIjLnrn9vQq5bA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qgjq5a97qtsqrxstkzz984u0vz2eujpg563hm0","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["ganveylui"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Apy4LS+t0hveBmKetnxYnS+N/cDSzJoUvp7749aF229C"},"signature":"/IiRAL5aWgdTnw6Je2h7ati2xORIiGAHXczb90WHuSgs31C6AQoe1w+J6b5CFdtkNcUkua2sEl+n9cbiIhuLjw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vfmecr0c68lk3udl943x42d9lf30ss0772gzv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["571","Sirius blockchain","www.sirius.io"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxNm6vut4OYn+P3TdtKTnfrnEg7/kz5Zo3ZcfBmw2zYE"},"signature":"1Md0TtsZ78WhIQ6zSfym90RQ1DwXGKwym3RdUNY8+w4r0+jwHT1p2/E5Wyo/v97uW5PUYuI2nirOwyqPqm+tXw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16xjq9r6tku2j2ll9qvvmta6l33quw4tkfqy3dp","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","augustus",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxpRSYQQ3YhQQyZQoU52LfwyETYauqcoLKcGI5ht2AnB"},"signature":"pYEodW2LSWgo/GRQ4IDSxQO120GpuyVj1Xj6I1eYh68u3lru7c6XevaBpMT7AuRQndiiuwODNNawLSTEK0D65g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19rv7ur08h82jmnvx5gpnh0jxs2w9anz6plmxfk","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"5PXtFOJywR+Xzw2TWrDd4rxclc7YlxVP+E7B+QUgB+cEltl6z4qXyctPr2MFevEMNlSM/qUKkpivTnb6Uvglyw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19rv7ur08h82jmnvx5gpnh0jxs2w9anz6plmxfk","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","anselm",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApX5CSZbpj0IS4PGZPECF3rvlt4acH87Hy4a7TlRcoBM"},"signature":"mOUrXZP8Jqoyx5wPo+jxTQwL5KEPZ1YTfJrrYLPIJ5cYI02dg08cLxfHm2rh1TE4Tycn3DKAzmGibndAEvXKxQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1t7a4y8sgy6knqtwnz9a9prdpzwfek49fkgz6a5","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"1RE7MxU2g7vOKx8Qj71jZOCXyJtO+cKug/bzkZabJMZLVRIsk4YFkPbgnn/Nh+Q3YCN6us14tdHefBHZN/5pSw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vp29850zh7s8v5vs7gurj0yfgm53zqlm4d2kav","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"8ritofS5z+knpGrX3JhC0RPm+HSvD8mWxw9zcrIoKI0dXw8E3Agfcr95P5wqN5RuuP9GjNm06R7Vsjeijpthtw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t7a4y8sgy6knqtwnz9a9prdpzwfek49fkgz6a5","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","r1sen1",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al4YvaCcpb1lPFf7qGCo1XiNLgItwpVa7z90gmUUNixk"},"signature":"BOnmvawdtiuF7wBy1X0hEd39PGDTsUvecJX4Dz6a5Esc1js7rrSipc7h3huv9dbQ+eGGbaMyrD6jwDdNSBwGGg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vp29850zh7s8v5vs7gurj0yfgm53zqlm4d2kav","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","kuzznetz",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq8GWZvr0OaTxAOelEWC4JBDxW80D6gCqNWOIzCnzm29"},"signature":"Vx7c3pboNdO9kZcG+ND/QFrIdZxJ0zNm4bXYcmrumadvALInbgmKlGGZ64h5g81mb2wsN8vmaVmjFB0cz5VY3A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t7a4y8sgy6knqtwnz9a9prdpzwfek49fkgz6a5","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["r1sen11"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al4YvaCcpb1lPFf7qGCo1XiNLgItwpVa7z90gmUUNixk"},"signature":"53T17c7xsIFeJ6CHZsSqo9O1lLgMRr0Fl+z8as2gTPNh0A1ZSCQPeLl14t+QxvJHkOOK6Wn0PzI8PWqaUWpzGg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vp29850zh7s8v5vs7gurj0yfgm53zqlm4d2kav","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["kuzznetz"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq8GWZvr0OaTxAOelEWC4JBDxW80D6gCqNWOIzCnzm29"},"signature":"wc+BFmBjN9JGyM3kmc+RHXHaAoWyUVfgzyafe6whPoIYzubpZwN9lr9FQIZn44Tyjmdj1NC63HnATKQeODZ5RA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vp29850zh7s8v5vs7gurj0yfgm53zqlm4d2kav","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["588","dedicated to the gno.land project","this is a great project"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq8GWZvr0OaTxAOelEWC4JBDxW80D6gCqNWOIzCnzm29"},"signature":"KySZ8Di03U2XEdZf8R1SUXCzC4LDQpE35Urrh9ntQDMLcv1whly9R/3daWD4m4vZZ6B4ju6h9Oks8pc8p4DqkQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t7a4y8sgy6knqtwnz9a9prdpzwfek49fkgz6a5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["587","R1sen Noderunner","Professional noderunner, currently run huge amount of nodes"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al4YvaCcpb1lPFf7qGCo1XiNLgItwpVa7z90gmUUNixk"},"signature":"GIVTKVyCLUsf9fF7IBS2UCGaRsVVra2yW8dkwpUOqB5g+RXtRbQm8kQBvmwS9CX31Pt0n/QaSrsEkbEvzH1e/w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lkrxsnv8pqqkpfs0lqm497h7v4rkrtt000ex5a","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ICUlBd4oq/5TXdC5x7Bi6b371Zx8hmF/a7soSlWwTpFGlfvINVfKAAytrbfb64KYIcY/XcfyGgXRm89Egi7jKQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hsjywa6fde3uw4h7p5z664thmrc40hcfzfw4g4","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"lEar0Xt61hc3AF7YlLMvHMG96nGwSNUXwyyNg2R+OstFsfxuOzKYnPsyHlaH9uetZ+VzZ9z29MTK3s3JqmiIcA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lkrxsnv8pqqkpfs0lqm497h7v4rkrtt000ex5a","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","lebed7",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkTfzSOE+Bk+EX70sEOEeCU+uWm+uzU+j7aKeSivKSad"},"signature":"+w3Mfpzys+ynR+UK74mgWyfZkEv+7zuYUXqHuN64AGZhD0eiOtDsDCeQ5FLBnniWT6QsY73b1J7cuBDtl0sqNQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hsjywa6fde3uw4h7p5z664thmrc40hcfzfw4g4","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","marymary",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0CNh/t8NnvH0ri8uxzoeohRiiM3wKeT82BR3gG8tMf5"},"signature":"J6F1jhYu5bY2krgbQL13e/udNDP6LiDgQVILrggDwUJtDSSRZQG9qUPpreWO463HPPJs4Us5eQDmccku1j/9Xw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lkrxsnv8pqqkpfs0lqm497h7v4rkrtt000ex5a","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["lebed7"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkTfzSOE+Bk+EX70sEOEeCU+uWm+uzU+j7aKeSivKSad"},"signature":"nwgrVadS/vHIHVdWT2q+ycWyEANm+tDMhI+ejxOOEpwrXv2u+d6hpQjgRP3B5cA8Rkc+du7Azbq7RK4IKOEDSg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hsjywa6fde3uw4h7p5z664thmrc40hcfzfw4g4","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["marymary"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0CNh/t8NnvH0ri8uxzoeohRiiM3wKeT82BR3gG8tMf5"},"signature":"YkfElrcpywNUwbRcTspcK6MbAdYbkXIgf9XbmgM67AdQEW2LCoWI64aPPfBWHEKDS6HpO9vwTV1cdu9Xp6AZSA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lkrxsnv8pqqkpfs0lqm497h7v4rkrtt000ex5a","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["589","Hello world","awesome"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkTfzSOE+Bk+EX70sEOEeCU+uWm+uzU+j7aKeSivKSad"},"signature":"zCt4Yye4XQcmj7Suli9SudiiAqlxoJgyi2iaDLUmPUYMXAWAbU83O0d6ZyABifx37RJFHsxHV+TOYCi9mSiQ8A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hsjywa6fde3uw4h7p5z664thmrc40hcfzfw4g4","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["590","marymary","Hey\\! I am Alison and I like running nodes\\!I have participated in such testnets as Nibiru Gear Zeeka DWS Manta Massa Lambda StarkNet Chainflip Nois Bundlr Exorde Gitopia ALEO Source Minima Subspace Taiko. Glad to help you too\\!"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0CNh/t8NnvH0ri8uxzoeohRiiM3wKeT82BR3gG8tMf5"},"signature":"eizQEJlk3UxuYyKZnS4IZPMLX0d3j3mPEKVvUQy+5D1aLMhhQIG9h+DG9/+f51Ee2NJRlwn/X0SY8I2wp9rb4A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qgjq5a97qtsqrxstkzz984u0vz2eujpg563hm0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["586","PEAPOX","AstoPox"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Apy4LS+t0hveBmKetnxYnS+N/cDSzJoUvp7749aF229C"},"signature":"DqNXew87t8fe6kExynaHqCCwemUMt62pZtfY1YdpVet3b+QBKAA8F8SNDpu6GohFn8XpxknnkCkR6OOT5OHu9A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qgjq5a97qtsqrxstkzz984u0vz2eujpg563hm0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["586","1","1","Nonononomol"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Apy4LS+t0hveBmKetnxYnS+N/cDSzJoUvp7749aF229C"},"signature":"BjWOWOJwNmK1V1uNr7cOmdmivrTzGek1wc4+ft8nCOoFYCDCwFS0ITgAm+rrvRNobScaDaty5HpPwtony5YwWg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16vdu3xum7rgu0g0qmrqetu8htzsdmw05q0hxkg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"K7RfTWQ0Tst5L10+4KoVgzCU4OjItGcVwiV+AlsbQjtEERXs546G+xqVlQedYk942JfQLnuvH7SqIKC96omA7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16vdu3xum7rgu0g0qmrqetu8htzsdmw05q0hxkg","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","joesnow",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Avpcla2Q4JSidv4KEwtV/JGRK2B66/+tdQqWKPTzlFrn"},"signature":"u7LyEOOdmssXeQ9KysfQxBUeE2Ef9rLOVsmzX7OafTcn+GUb+RNOBdkt+pPpgyx8G7YO2warSbwmakOMHyngjA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16vdu3xum7rgu0g0qmrqetu8htzsdmw05q0hxkg","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["joesnow"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Avpcla2Q4JSidv4KEwtV/JGRK2B66/+tdQqWKPTzlFrn"},"signature":"bK0VP+jRwMXQR9bnSxJ3aOPwho0FbgOsaA0JprTxACtpVRxFUJfDWXjmC+jQkOBVU1VOXoQ1innuh2XDIyQ+bQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1dt5eayrrnkmr6tg96nnzw3uj352jlgawunz2v8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"yN6sADlb+85iU1NGkhvdCukPN0ZmtGPI4Ij6MxHompsS+cYtcT3qC4YDaGdPX4OwGbKudMRJx7vcIP5aeJFkEA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16vdu3xum7rgu0g0qmrqetu8htzsdmw05q0hxkg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["591","gno+land=gem","have a nice day, everyone"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Avpcla2Q4JSidv4KEwtV/JGRK2B66/+tdQqWKPTzlFrn"},"signature":"l8qxXdjq3+qtjDN49bpSZH+4puraiBeakipgIrv2yUZgFoeXsImTN1y42VQD4CkQckI2R98+35wiRJ+JXlZnnQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dt5eayrrnkmr6tg96nnzw3uj352jlgawunz2v8","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","traditionddd",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AthkYCsEBTP0rrc/ueQIbRZbRLvaM9Ou8nbfu62FG0/W"},"signature":"F03oNsOd3+9/C9WK4QP5Ox6tKDVf6lc3g6LyrIk6NdlqeEke8Z1wifTfxlgonrOBXWxIj9LsjuqrtNeY/V8b2g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dt5eayrrnkmr6tg96nnzw3uj352jlgawunz2v8","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["traditionddd"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AthkYCsEBTP0rrc/ueQIbRZbRLvaM9Ou8nbfu62FG0/W"},"signature":"nJFFR9XKWHRtsbkM/qR316iJFL75+wMGTNAkNgkRZ9R3wmABsHFp/kcC76QUNwKrVsHKxg0OkMlcNZzBfUdNWQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dt5eayrrnkmr6tg96nnzw3uj352jlgawunz2v8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["592","AIRAN","KROSHKA OKROSHKA"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AthkYCsEBTP0rrc/ueQIbRZbRLvaM9Ou8nbfu62FG0/W"},"signature":"p7+eZ6zuiM4Odw+1DV05YhHISpIQmC0GCSuC37uSCTE/aM1wJVKYbsw0DuZuOeD/JKILAPz+2Ri+XJRls1HQCw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dt5eayrrnkmr6tg96nnzw3uj352jlgawunz2v8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["592","1","1","Shambala"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AthkYCsEBTP0rrc/ueQIbRZbRLvaM9Ou8nbfu62FG0/W"},"signature":"jf9QZO5hWZCq/LB4QkBz7wCW1dHZpuTeAz98ZlCY5kI17DoX6VHKTpPcM3aDCFPGDz1SqKXmgF2FX5uEGZa48A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1qqe0supd55lj4anthtzk64zxr5ja36d7w2jyyc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"w3+E+f4hwQfXb9sUzADDElcKifMlHYG2MEEH+qLqkwAohZe8F0+UkzeMrT1Np1GwzNcMRpCAjRDFF3ddnjaqjw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qqe0supd55lj4anthtzk64zxr5ja36d7w2jyyc","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","nodemod",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0CW79vA7ZLrOFkx5Bqa7Njwjvrec/04O0zMJy5/q6F7"},"signature":"2VTFYCXqf6QDnD+HqJ821GU+8jhoEawcAywaAY9VQZFmkL4JE1o29/ZTZxUCRe0NFtdcBjvmrGF5Q1k/kSQDOQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qqe0supd55lj4anthtzk64zxr5ja36d7w2jyyc","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["nodemod"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0CW79vA7ZLrOFkx5Bqa7Njwjvrec/04O0zMJy5/q6F7"},"signature":"XU+JhEeem4MeoLs8VkeU8ac4zDxD+3qEKHZW0uqQsX1SeH2OkfKXJh5ah5EF726eSWJN+ndOs//J+eWvF2OsPw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1qqe0supd55lj4anthtzk64zxr5ja36d7w2jyyc","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["593","Discord","Hivoltage#5641"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0CW79vA7ZLrOFkx5Bqa7Njwjvrec/04O0zMJy5/q6F7"},"signature":"30ivRhnh7fR8FWSJVsQOJR/vcdjleo63lVB7HBja46QJpAyxDoO36oY0CButpiW4tYHvjkMVgJw15YahEupIvg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gqauz6llgwhpwvprpqgfe2qxzw8rq8tmmdx939","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"IpmYgf1yeibqXOiT7A/mfbpRJ/a925IxhC4ZFMVB61EawoiPabgszhW/35KgnyDl1Cp1mLBBzf1EvfEVNjZdYA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gqauz6llgwhpwvprpqgfe2qxzw8rq8tmmdx939","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","dropstack_romig",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av6q+G3pQIaQGz7KNPWqllUsz3CoBfdkpRe42wouAU1x"},"signature":"FanwJthUPntrS4NNr7+LvEy6PuzZglJ6OsNyaOjHkL46JRuI6WHYdy3+0GfHLxM4vxKiJ21XaJeBJuPF47oubA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gqauz6llgwhpwvprpqgfe2qxzw8rq8tmmdx939","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["dropstack_romig"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Av6q+G3pQIaQGz7KNPWqllUsz3CoBfdkpRe42wouAU1x"},"signature":"U/FtXLJ+u7TB5E7ttP3fB4mBoWGqSvxXsS8hVAA+yfpcGi+ml4yU+ANHubmYlkE9WzOOUTHKAV7RV8b9OYUGow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModEditPost","args":["gor-launch","Game of Realms Is On: Win Rewards for Contributing to Gno.land","Phase one of Game of Realms, a worldwide competition to build the best Gnolang smart contracts, **is now open**. Game of Realms is a high-stakes contest with a total prize pool of **133,700 ATOM** that will see participants compete for tiered membership to co-own the Gno.land blockchain, the next-generation smart contract platform that uses the Gnolang (Gno) programming language. A series of complex technical and non-technical tasks will challenge contributors to create innovative patterns that push the chain to new limits. If you’re interested in helping build the most intuitive smart contract platform in web3—while gaining rewards for your contribution—join today by opening a [PR here](https://github.com/gnolang/gno).\n\nThe Game of Realms contest will allow participants to get a feel for the Gno.land platform while building smart contracts and applications in the ecosystem. It will take place in two stages, phase one and phase two. Phase one is about building the core infrastructure, tools, and tutorials necessary to open the gates to broader participation and will be held off-chain. Phase two, on the other hand, will take place after the successful completion of phase one and be held on-chain, where contributors will build smart contracts on the platform.\n\nIn addition to the ATOM prize pool, the best contributors will also be awarded (mostly) initial-level membership to govern the upcoming mainnet. Membership will be allocated according to the quality and extensiveness of the contribution—the higher the quality, the higher the tier, and the greater the voting rights and rewards. The top equal members will be composed of peers who have contributed the most to the ecosystem and have an understanding of its core components. Top members will also have aligned core moral values. This is essential so that members can maintain the chain together according to its Constitution (TBD** and ultimately create a sustainable ecosystem that rewards all valuable contributions.\n\n## Game of Realms - Phase One (Off-Chain)\n\nWhile we aim to encourage cross-collaboration between devs and non-techs, phase one of the contest is recommended for advanced developers who are more autonomous and can contribute with limited guidelines and support. Accounting for around one-third of the total **133,700 ATOM** prize pool, getting a headstart in phase one will allow seasoned devs to kick the tires on the Gno.land platform, contribute with limited competition, and build the tools needed to open the second phase.\n\nDuring phase one, participants will open PRs against repos from the Gnolang organization. Phase one contributors will be expected to document and share their work efficiently to enable others to use it without conflicts. Your contribution is vital to the success of the contest, the Gno.land platform, and the Cosmos ecosystem at large, especially now, with discussions to move the Cosmos Hub’s core operations on-chain by establishing a DAO system.\n\nThe first DAO to be created will be the [Decentralists DAO](https://github.com/decentralists/DAO), which will provide Cosmonauts with transparency, accountability, and decentralization. The Decentralists DAO will improve discourse, organization management, development, and conflict resolution through smart contracts, and will organize itself into a set of tightly-aligned sub-DAOs dedicated to specific topics, such as engineering and funding.\n\nSo, how does this relate to Game of Realms and what type of contributions are judges looking for? Here are some examples, in order of priority:\n\n* **Define and Implement an Evaluation DAO:** For the Game of Realms contest, a sub-DAO – the Evaluation DAO – is needed to evaluate contributions during phase two and attribute rewards accordingly. Using a DAO will allow community members to vote on the best contributions for the platform. Implementation of the Evaluation DAO is the only step that must be approved by the core team because of its key role in the competition and the future of the platform. Once the DAO is in place, all previous and further contributions will be reviewed collectively by DAO members.\n\n* **Create Tutorials to Onboard More Participants:** We need experienced devs to write or record tutorials to help more people get started during phase two of the competition (and beyond) and to help grow the Gno.land developer community. These tutorials can include topics like interacting with the chain from the CLI, step-by-step guides to creating smart contracts in Gno, tips for running a local dev environment, fast prototyping with gnodev, or they can be tutorials dedicated to certain audiences, such as developers coming from Solidity or web2. All tutorials should be added to the [awesome-gno GitHub repo](https://github.com/gnolang/awesome-gno).\n\n* **Define and Implement a Governance Contract Suite:** In this challenge, developers will be expected to define and implement a governance contract suite capable of competing with existing chains’ governance modules. If you think you can improve the governance system of Cosmos Hub, this is your chance to show us how!\n\nPhase one challenges will stay open during phase two. No competition points will be attributed during this phase as the points will be retro-funded by the DAO and awarded during phase two.\n\n## Game of Realms - Phase Two (On-Chain)\n\nPhase two of Game of Realms will onboard more people to the platform and begin as soon as sufficient materials are completed from phase one. Accounting for around two-thirds of the total 133,700 ATOM prize pool, phase two will be open to both developers and non-technicals who can follow tutorials, create smart contracts, or provide other important contributions to win rewards and scale the platform. As phase two will be held directly on-chain, contributors can submit their contributions to the DAO without publishing them on the main GitHub repo. However, we strongly encourage you to use GitHub as it’s an important resource that helps the community gain a better understanding through specific examples.\n\n_We are currently preparing the challenges for participants of phase two and are looking for your input. Let us know what type of smart contracts you would like to see (minimal or with multiple features) in our upcoming Game of Realms AMA on Tuesday, January 24 at 4 pm UTC. Note that this is a text based AMA so make sure to add your questions before or during the AMA in the #AMA-questions channel on the [Gno.land discord](https://discord.gg/S8nKUqwkPn).\n_Once we have collected your feedback and requests, we will finalize the challenge categories. You can visit the [Game of Realms repo](https://github.com/gnolang/game-of-realms) for more information._\n","gnoland,game-of-realms,launch"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"//UedPa209RXNaXxRL/DkT1DU5r8s0k8MqzAch/9qpdCYN83sRkmx2Y63TkAga5H6twW7WFS9aDZKL2rqncBaA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1eavm6anegslhc7pn8q5xfcjk9h8uh7atmajkhd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"un9vE/HI30utmiEUjww3aeRx71oSkIlOehUf120CLFFI3Z4Lsy/OXXn8LeiZHeHjVEMNklWR48RUXpmFVQGjCQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1eavm6anegslhc7pn8q5xfcjk9h8uh7atmajkhd","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","den007",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+Kz1l9WwyyWcch6ZZDQTLDINtwJ79vejaK2sxc8g7RP"},"signature":"8GrzBVm3EtDJiya81ynQc1nzIBsIeGu9LMF4+6vnyAZI0+IrlojQJIMOSBF0glqSTi727sygjg6QBQwcbLWIrg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1eavm6anegslhc7pn8q5xfcjk9h8uh7atmajkhd","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["den007"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+Kz1l9WwyyWcch6ZZDQTLDINtwJ79vejaK2sxc8g7RP"},"signature":"47NYvbZyGGYzLhkvXeBwwwxEwBdG/c9PIPVxJ4zGLBRz5qEvhmJe6p0Ds2UnuvUo1ZwLH4G3LcLg0hgqamgbtg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1eavm6anegslhc7pn8q5xfcjk9h8uh7atmajkhd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["595","",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+Kz1l9WwyyWcch6ZZDQTLDINtwJ79vejaK2sxc8g7RP"},"signature":"C3MToFHvG36va2vGF0SEHz13hrdUZzxg6fksdIDjz2JNH05B/hRjduk8FweCs7Vd6NWHLgB9mnezRubRYphQBw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1eavm6anegslhc7pn8q5xfcjk9h8uh7atmajkhd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["595","Ethereum site","https://ethereum.org/en/"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+Kz1l9WwyyWcch6ZZDQTLDINtwJ79vejaK2sxc8g7RP"},"signature":"VUWGwXJ4DUkSiyTeNAVzL8APL/03nj2gb9KBa+SYLhU30GdVgr1UeiyDdHOUlgMpVmPNiQYBXZBaZy1qWsHYlQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gz44nsu8sem936z5gjplye94498q8xy98a48px","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"c2R+3qI1lZfTWLYaT9DFDRfw3SK9x//YtYTEasuV5QxBQ9hCelKlb6OWXjBzSUbPQ1q6DsoRnAKScn0Zm5NoaA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gz44nsu8sem936z5gjplye94498q8xy98a48px","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","polposalt",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgSk8weGiuJGYO/k4N4P6YX66cG7zPWFoRGTMhCdJB0A"},"signature":"SFU8f8ubUFHlr7ujpCOUf2brvKqxs3FsoSnR4cgJA99rbtcbkxF2qrq+xFr8yCDRdtR39rFWhtSturvSHRTNTQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gz44nsu8sem936z5gjplye94498q8xy98a48px","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["polposalt"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgSk8weGiuJGYO/k4N4P6YX66cG7zPWFoRGTMhCdJB0A"},"signature":"HPfUjjkW7z2hZosQFTcwVpsXgt0OATk9YMBl5JMTOqkGwwbrEO0T/8aMpXsuCEgNShRUIq6y4wr1BLJ5qRO6cA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gz44nsu8sem936z5gjplye94498q8xy98a48px","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["596","Bitcoin","https://en.wikipedia.org/wiki/Bitcoin"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgSk8weGiuJGYO/k4N4P6YX66cG7zPWFoRGTMhCdJB0A"},"signature":"vCcxPuXHaPQo47HtIwjghcbZNmVVjHUBgqj0FRw4/BQFkNQj+5f0ECTqWpH7OuS5vmWsjYf41J85i4eSXXAhPQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1sg5g27ej5tkuh6ksyhhpn6ax895fdrevjwr3w0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ElGMjT2jmzhAKs0T8TFmwJg7FpK/LrG0B8Iklyxa+QdIQzMlrWhd+2XMgyTGgHG3pr+THBbIILegRn4gj1K3Wg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sg5g27ej5tkuh6ksyhhpn6ax895fdrevjwr3w0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","enotova",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxI0Y67w+sU8i629fFI+JEGVIabCCAo7/0mJA/2Xbpey"},"signature":"CPoZV5Osh7YW4orpMAMFMTQC9i6OdMiJFfSsayV/Ji5Js+/0IsQ3j91xOe17OT2BW2RlfJJa6qegg5SeF5s6vQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sg5g27ej5tkuh6ksyhhpn6ax895fdrevjwr3w0","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["enotova"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxI0Y67w+sU8i629fFI+JEGVIabCCAo7/0mJA/2Xbpey"},"signature":"6ZIfRSKJpVnoiLnduacPwBE8Vs8V05Y7GvKNMgn2NfIo+cMFkhwkQUrm5uCVXifrqcOR/sKK31vJP/nj9cW7Vw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1sg5g27ej5tkuh6ksyhhpn6ax895fdrevjwr3w0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["597","Capybara","https://en.wikipedia.org/wiki/Capybara"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxI0Y67w+sU8i629fFI+JEGVIabCCAo7/0mJA/2Xbpey"},"signature":"IUC/8xGEltFYVQ9vq2Tr9bcNLHghN6q6S+EHAAf7brxsetjemsD+b4G3c0Fsna2aPjkZJHAVygkve+uhNnrZHQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1g64whnvx735s4tp9v6ur37zzmkrqdsevypeq5u","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"oDmyplBpJ75QHaCJttLgn8GMWwosQlk+Pa8AMzrZpsopTaNahZB8dzSfTTNKQ14LBbpNWqzx9ey1lbDgBgqtHg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g64whnvx735s4tp9v6ur37zzmkrqdsevypeq5u","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","popopopye",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5iHFbkF4jE598Vv0Y2FpWs6JYi5WmU4QhaXXLnuIFiD"},"signature":"kUa19bN4b8RutxG2y9IcQ0ouelmhBVWVFckOA19LcWQD0q/1ni1qyy+CQSB1OsjGx8umOHOacH5QhTvrUwvy0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g64whnvx735s4tp9v6ur37zzmkrqdsevypeq5u","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["popopopye"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5iHFbkF4jE598Vv0Y2FpWs6JYi5WmU4QhaXXLnuIFiD"},"signature":"KRJEFSux8XDNfJzttEULMJIqF/uwfC7b/Of5lAVcVIRSmARO2j/Qb2dWYzJVhxJn7+TdcJL6Fck9H8/klxY8OA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1g64whnvx735s4tp9v6ur37zzmkrqdsevypeq5u","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["598","Chinese New Year","https://en.wikipedia.org/wiki/Chinese_New_Year"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5iHFbkF4jE598Vv0Y2FpWs6JYi5WmU4QhaXXLnuIFiD"},"signature":"vZx1GyQ1ngjUo9Obf5euzLmFXoflZ2BjLXzFwe6mEPBdKbtXWkptZAMbYvEk262VbJvxe7fib3go1i0tK5nIig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1z26qsal3w2txaw58egw8nmtccwcd0tzuaj7f55","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1","me and Gnot","hi everibody glad to help with my contribute"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4qVI9vuZu0vV45pp4CyyI5ku9QK7moycw+POcQIchjb"},"signature":"WzJetm6PfZUln7ARromGkZM6duMLrBapq9SwTzHZduBDc1QhzennJuao2jlffTlazABmb8mMnb2SuOgSY8Th4Q=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1z26qsal3w2txaw58egw8nmtccwcd0tzuaj7f55","to_address":"g1vcupa8p07jrua73mmfve0ht0p8j0xcuxm9scae","amount":"2000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4qVI9vuZu0vV45pp4CyyI5ku9QK7moycw+POcQIchjb"},"signature":"0xdmDUQ0d7YehrFIDf4hBseuMt5RTk2ATkLEcQvx+TJSqYMqpAo1+gAyVGiztTEmHeSEh6dZ/7ACqd1KvU9m8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g19a45wjjgsqrdyjshew7d7tjy55ac0a3vmlfwu0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"fsZlm/dUOqpNWLbX/qjYNfjr1jUUCems/2SVCE4FLn5zyRehFxDoM5vjsyz3gG6IP/Pkx/cRZ/U9Td+kH/r2Cg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19a45wjjgsqrdyjshew7d7tjy55ac0a3vmlfwu0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","volchara",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5LyIn5W7o4aSWDGY7ScDDZm1NkXoVmfvLcJw8EBzXXL"},"signature":"epNREjPsBYO2qvJDnSB/g/ZWKxPyeuwl5aEOt6QEEj0Vyb4L8j4b9ACKGfdQ23d6yUtoNiC2tVemfN+YQCEGGw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19a45wjjgsqrdyjshew7d7tjy55ac0a3vmlfwu0","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["volchara"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5LyIn5W7o4aSWDGY7ScDDZm1NkXoVmfvLcJw8EBzXXL"},"signature":"hrUMOGTU12lQM2PWgbqUUUYzNe+xrJF0pmhEmQ4QbKxoAv+igCrjVOWO45KF/Io9JX2Nryw6ACItssBa62LMhA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g19a45wjjgsqrdyjshew7d7tjy55ac0a3vmlfwu0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["599","good morning","gno"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5LyIn5W7o4aSWDGY7ScDDZm1NkXoVmfvLcJw8EBzXXL"},"signature":"4qg0gaFEc4DYRm53YrjLtW9suTeBh4VNSncc63bsoZIaKMjm2sy5gfa7+mlDvM4IAbSHWsoSeUAAdVRufDIaiA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g10pamzmd8njj60ecadjshf5qpek3f3yvhzxccd8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"2uzlprRFOOVN+OrrDwGVVZMP3r/O+xIP48X12rIzK7ZlP++OBkD/z0wAKfEXcEYs3A9t2te0Zm9kiXRjenNZnw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10pamzmd8njj60ecadjshf5qpek3f3yvhzxccd8","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","linkasol",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ataf9J4WEg7Aw40Iw7OcdmbRfGv61Wvq1A31MlU3BDtg"},"signature":"oD+GveQvEttYd73Z8HAaMufQhvwx634aJWo2tv14/mFohB9ibnZSAHn1TSfOsh3o/0gtGS9LN0NDXwnbh5addw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10pamzmd8njj60ecadjshf5qpek3f3yvhzxccd8","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["linkasol"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ataf9J4WEg7Aw40Iw7OcdmbRfGv61Wvq1A31MlU3BDtg"},"signature":"RToIH0+TGQJbmbUfinn7iPV/7nCvoFod7dpO98b12qwehHe3LEkGabf7CjYrGQFO1IN5JqrdUEk40oEy6edIWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10pamzmd8njj60ecadjshf5qpek3f3yvhzxccd8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["600","eee New test3","Good to see you all again"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ataf9J4WEg7Aw40Iw7OcdmbRfGv61Wvq1A31MlU3BDtg"},"signature":"zi3GBv02poFx5rIhNJDrMKNKaXB3xxp9v7zitL37RLQ8wL5jLA6ExZggeU0BMyvkUaVtdXT9L5deKN5zI9np/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14lv845k6927008nt26hqqg6p0vw7k6p62rse5y","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"JK+iauDDdHbEF8JS5mU6s9n/ezUs3uwzMQzwR3FqLTEp02zQ8k8I5VNmE2HtS/2yBeL+l3pynUg7gBx4G9dT7A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g13txqez63y6xtnfa6nm27rsttwwn00vhgjgd9c2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ls6++4jaxl1SeH6bf09hiMYtVr/2rxPYD+2bkP13GXMItgZEcet+0jxEz4FyiAdkeScZ51bW9IvooTLrUZDc2w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1e8fjg979chpa0a9jm57ve9uv8p8c6zw6hlta53","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"GK3d4lsgfzyBp+Wqa1XmuiRa3K9J8/QNf9IUIA2VNJFo4og5hJwWE7V8gPhGLQi0GV+pCvORbQZN4GUz1JF4qA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gnakkugdgr5khrvxxy3fcdxtv6ka7vy9e9dcll","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"BlMZ1aW8PhczYaKzbSZhcUI48jQ4hsBfDgrD6YZ6618jRzoMvfRTDvzN35o6HcDsjl8DJJIPFp+vjlePfsaIuw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1x2ft3vpzp5syp5x5tqktrep67tqvvazag3n2hm","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"24/tYj6lDcyj4aefSE7cGEpJCT20ko3XDJN0Nn65ppNPHlSMeQPvddG5wnmvPhOkNvApVPssl9WVWCOtX1lHCQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13txqez63y6xtnfa6nm27rsttwwn00vhgjgd9c2","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","webshard",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoKo17L6kei5oWoaiWniqbm+5DQrN378eYMlOUCcU10X"},"signature":"Lk0p4zpSdp4WMquybb9y+UU2xn68a19EZ89FtVeA7oMHOqcjl1PR4eHGbzl8l3TDxXCzav4Q0oUgGZ/CGN0lsQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17rswjq6gmafse8r032rtzrgyuhxy9nqk38zgxf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"kLhmH4KOoMXC9w4KZkV4BNe6zh+BHra2PvLrYIUGANRIAR1w7vgBNSpD34Gi+VeagvBnY8f2egJXW3XdtMw/CQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13txqez63y6xtnfa6nm27rsttwwn00vhgjgd9c2","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["webshard"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoKo17L6kei5oWoaiWniqbm+5DQrN378eYMlOUCcU10X"},"signature":"IG+8acrSXZAdrMNQ836RHuz9wKx4f430GfIe5j3RXadZz0w58ALlyrjQspof9i6tOcrdTUbqFyIlxw1gSSUWfw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17rswjq6gmafse8r032rtzrgyuhxy9nqk38zgxf","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","zver",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkcK2yDjUYQ2cR8+izAdGSw0ALJHgC6u9/tjEQBdmHRM"},"signature":"lVa13gkQgIkIgq61owQDZ2bJHHeLWa47N4lbLk1DwzBl7WXNW1DXjnogV4/46vsCEhGpfQ1I1YgRhbBEhmGmrA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13txqez63y6xtnfa6nm27rsttwwn00vhgjgd9c2","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["601","Gno_Land","Hello_world"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoKo17L6kei5oWoaiWniqbm+5DQrN378eYMlOUCcU10X"},"signature":"i4lHpYcHdKipLuu7Q/A6ZeWBGGrlhhjKQqnJHskF6s4xjEZrNDx55A7GjQ859dy2EwHiAgtKR95tWwg4BwyGlw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17rswjq6gmafse8r032rtzrgyuhxy9nqk38zgxf","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","tavzver",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkcK2yDjUYQ2cR8+izAdGSw0ALJHgC6u9/tjEQBdmHRM"},"signature":"apI7KHLgGE88hQVSQKddJ3JA//2oBLKThV0tc9htd9l69uRUVvKlzkDcqLbnEgodUETmEJPtqEhlBTIgYESbaA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17rswjq6gmafse8r032rtzrgyuhxy9nqk38zgxf","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["tavzver"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkcK2yDjUYQ2cR8+izAdGSw0ALJHgC6u9/tjEQBdmHRM"},"signature":"yJ8s6JObKh2fImjK61uVuw5KL1+1UFlzlbV1nXaGVwog5lPl/MeQ1VpiWN3HUA2XRf43K9MIjQ8SVfd2n37zWw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17rswjq6gmafse8r032rtzrgyuhxy9nqk38zgxf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["602","Gnoland","Gnoland - is a new blockchain in the Cosmos ecosystem. Its goal is to optimize the approval process between validators and the completeness of the deployment of the smart contract language."]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkcK2yDjUYQ2cR8+izAdGSw0ALJHgC6u9/tjEQBdmHRM"},"signature":"MJC09C4NKCO8Bwyhuw2eDKo2POa3jm/wW/2slVlaj3IINiU39OxagyCsHr76C/99xZoS48Qf+HqYLnIJ5hJRAg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lz8zqgtal04rpne89ypuvllr6cyjkqha9tqtnu","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"TryGuZFIo6XeA7T0I686fl2Y8FZQo4oBhVobASwZZbg9v7/+9wiKzDFtBAespTpasQl2VRvrGAqP/+kJy5Gftg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lz8zqgtal04rpne89ypuvllr6cyjkqha9tqtnu","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","webshard",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzR1LcQ42r/pEsoFy2S0IRs2tpE/BCLU0Evqf+yGtQ+j"},"signature":"6gG+wiypYCB/YwNH0gvkh2jvxQTSvbESn/TKxcN3M4Zlb+8CcyXOtq5D6NLYwbGCMGNx+K5XeCOxLg6eC9QKFQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g17ctzqkuxctaahcmet4wrfw83t9jm4k0kyuankc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"9CVJjHJCUoyrqLlGKuIzQ8hZ1lIwaldW1pwuwfyJZ5AcbgfAt5Bh/BHH/oj6h6MkOYcbIaTZfk/4G9/t043b3g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g17ctzqkuxctaahcmet4wrfw83t9jm4k0kyuankc","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":[""," shardweb ",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnaI5hf5xbVU9R6UL5eUTPoyb/GfJDim9HlfFED7nxOc"},"signature":"e6cmnHRINYw88ciaFIkTqqSdorJog0OHx+XHQ9j/KXUAw1eHmxi+PkbksfN9T375SzBInE1UfcHxTrK/HPthyQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gpd49xy337vssxsczputj3nank6jjsep3eftgq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"du3sO16GGXRvXY2kDE5ihD3w5qrwde89Ro5hP+XZ0AJNdifGZiPaJkqjc3mfK1CJCAsxsBViGx82MVch0u9rqw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gpd49xy337vssxsczputj3nank6jjsep3eftgq","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":[""," web3shard",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlYRLnwprfHyTH/6ys+iZBPtrZYMBAiGKENMIf0xz7Et"},"signature":"6jCU1zuQ1AnpYTmeRWTifXS7kzqbP/0UKjZ4a96MY6UC1qD0RZJrDFS8M7Sq5geHkS18Sk4SLoxC1geIG47q1Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g120rtlqfc5tqnvzsekwglx827nyua37pnlfzgdu","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ka0HO1YHxNnNDqnXzCM3MznRP2mEMyyZWvJyz+SzgC5blpkiJg5HZ4Pzgsv4/Y0E1wmZqLZQS1MCKLWyZDgmBg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g120rtlqfc5tqnvzsekwglx827nyua37pnlfzgdu","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","darcvaider",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ayxgh++EZS9B1sLQgwaC4ew0bG7ZsMl2O8Sj7czDYyZ5"},"signature":"SHzj1aHOXpz7Re4EGctzrq9EG98aVrK+6+5GoaxF8UwgZNK1KKAAqre5sGojQRJUOtyLxKekokg8B1zLynD9bQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g120rtlqfc5tqnvzsekwglx827nyua37pnlfzgdu","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["darcvaider"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ayxgh++EZS9B1sLQgwaC4ew0bG7ZsMl2O8Sj7czDYyZ5"},"signature":"JkYiBTjGHOfdf+jxfPOwrxs0DvOeDK8fxhUN6qBzJsEqvS2i7y8x4olUu79NLeUGSCTmb0uE9O9jCVUF9Mvxkw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g120rtlqfc5tqnvzsekwglx827nyua37pnlfzgdu","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["603","Star of death","www.starwars.com"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ayxgh++EZS9B1sLQgwaC4ew0bG7ZsMl2O8Sj7czDYyZ5"},"signature":"wPfnuTHqzwYVHvK1NJWzL1VYmG3MD0WKJzgdc7V9WhxqtkpuAr40obOE/s/vJtgjI+pgClMRHFjmsiH4KwzzDQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1serft0qlfh7508tep4jcfd2wxhx4zz5ydary59","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1","HELLO","Test message ;)"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3oXDqAfaTBVnpYJ963B7EiWp1+9dpykhsLvIMwAWtno"},"signature":"YEPODTjP3ftjoP3OTscT1DVsSgnmpi91Qk5oDD4lfu0eCtVHzZ74mxzU6E+wWfyID81h2ZbtzN2puWZPdtsIWg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1serft0qlfh7508tep4jcfd2wxhx4zz5ydary59","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","skyerdeka",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3oXDqAfaTBVnpYJ963B7EiWp1+9dpykhsLvIMwAWtno"},"signature":"vsG7lX8+y+h8gYCCdAoVdgbZ9lHhbMTc+fll2t1oBcpLOfWGMWvoQO0zUzHjeZF3ghzYHyaG1HVMrJl2ieCT9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1serft0qlfh7508tep4jcfd2wxhx4zz5ydary59","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1","GL","testtesttesttesttesttesttesttest"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3oXDqAfaTBVnpYJ963B7EiWp1+9dpykhsLvIMwAWtno"},"signature":"TGj0yhuO5bFCDxzGCWOYUK6ltfgFT1c8CG16RSY+bW8xn9MDiVVy3xvP5mveUAOGLQVz0JGx8OZRcCSDJ/IbKQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1serft0qlfh7508tep4jcfd2wxhx4zz5ydary59","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1","20","20","hehe"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3oXDqAfaTBVnpYJ963B7EiWp1+9dpykhsLvIMwAWtno"},"signature":"KHwbv2yJ+mQ4z8GHQoxn9D+Hv2dglAKxnQgdIY2AZbZMzvVmZ8s171OBPKuaIp4LKY3rF/R/MgL3JnQ2/89+Yw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1flhnstj9su6dwr98e30r6yt9swc85ugcmc7azq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"3K88grj4UhcZadGxB4cj4sttER1P5J+Nno6jOIYjHclL0BZXjrMvR9zVmUAC7+IA2HotOs1fNH5KRKkvnoOM6A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1flhnstj9su6dwr98e30r6yt9swc85ugcmc7azq","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mishagnoland",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A52k5Jl+0M6gwQj7LFVPPioU6Bh55M4Jb0Dic79nri5Q"},"signature":"iyoiXKQYpnToLuCpFxXkpSXqOJPTh6TCp7J1Zhb6sggZ6FrgMKBVLV4DrxjujQiC+gUkfPRYmCJFKN0tL1vOfQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ua5yvj7az8n738xjdyry68gj3r62z0s4mhce50","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"s8Y6vK4dcGrKVDFmpfzO+RC0y8fJkNT+zNn2y9F0DPN1LwdYWogqGzqRL7RU7j+E+XYSKfbmrJFcFapVtwelrQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1flhnstj9su6dwr98e30r6yt9swc85ugcmc7azq","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["mishagnoland"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A52k5Jl+0M6gwQj7LFVPPioU6Bh55M4Jb0Dic79nri5Q"},"signature":"LZQJIZ8CTzmoJTnfxf6ZtTYoHWlbyy+u/Q7D0CPmWhAMpTQ9L6UR7AT2JK2WVQOilnJ/t8kLExZlLTeXCrbj8A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ua5yvj7az8n738xjdyry68gj3r62z0s4mhce50","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","canada",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1t+8crzpLkK+A+qFq+G5rNW3aptfBeQn29yajTpC5Bq"},"signature":"sEStvXNoHY3mhLq2eWavrcIr6Qr5Mh8p2Xc89SuEpYQoBZoYvk62/YJ5C0t08Ugc85yBlcdV3QsKbp/QcOcL4w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ua5yvj7az8n738xjdyry68gj3r62z0s4mhce50","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["canada"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1t+8crzpLkK+A+qFq+G5rNW3aptfBeQn29yajTpC5Bq"},"signature":"JqcorGE4DUdEH801iy1wV21HWn9SGvu+wBh89AWqFMEfi91oFzDlNlepwQSo+uMG/lCTJ6d6u9Mjlkg8xAbnKA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ua5yvj7az8n738xjdyry68gj3r62z0s4mhce50","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["605","Gno_land","Quiz_complete"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1t+8crzpLkK+A+qFq+G5rNW3aptfBeQn29yajTpC5Bq"},"signature":"VKMWeMn7cK8LvAUIYb1LAISg5XQa7LXH0hAdRgV0GLhwYVYnpJL452LvH4O6cSMdt9RvAe85uEIeREhRrZQeGg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1flhnstj9su6dwr98e30r6yt9swc85ugcmc7azq","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["604","Mishagnoland","My name is Mikhail, I test new crypto products and help developers. I am ready to assist, participate in activities and work."]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A52k5Jl+0M6gwQj7LFVPPioU6Bh55M4Jb0Dic79nri5Q"},"signature":"JYqAHLDRbdb4qoxT65gpj7tXjqVQfzPytxrQdAuqcKhytStR+XC5pAlFttZ3JjgdLAG8PnWf54F4649hHndsXQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1twjlespqw37zlp7tsq6kkxfgc3sckk2ydzjv0v","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"PceC1o8xZHxHaGSOfj5dPZIvXaVeSQwcK3KRCu6OhKoWwv4KcYrHxxfuxcbTSJGVNEAFE9PAUua+ApNjrCPQTg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1c8wdk5s50lfcr0yql9rwa4vsx05zgraqxk5g3g","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"eji+Zl3pWyGCVfhtu/g2FuO6+S56hmoQ6IU/sfNm5ZYkRQqKNgQGCCjdiZIbCDJzDm1vkIQ6hOcZ4VZ5x/0UZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c8wdk5s50lfcr0yql9rwa4vsx05zgraqxk5g3g","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","rqqucrypto",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aly5eA+RhggNkgPGxiKbCDY0mmV5oqz22SyzuhtAa8wD"},"signature":"j3pVvvNY3uPCIZxKrGjwiJpIgoA7HuS8bTdvjfSLMJQzuMhmxVRvBAi0tWf7YtZ3mX7sFzHiTP06R7jVSaQ7WQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c8wdk5s50lfcr0yql9rwa4vsx05zgraqxk5g3g","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["rqqucrypto"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aly5eA+RhggNkgPGxiKbCDY0mmV5oqz22SyzuhtAa8wD"},"signature":"FHUwI7AY+gtmxC9RFrRNtRNA00O6qQBYohaIDYHSJ95I4f2lg4DetGh7P0t6FI2/J6yrSuq9iKCb2a04aAJ4qQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c8wdk5s50lfcr0yql9rwa4vsx05zgraqxk5g3g","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["606","",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aly5eA+RhggNkgPGxiKbCDY0mmV5oqz22SyzuhtAa8wD"},"signature":"9VV19MNiqibcIQ8uAxHJb5NpFmUnRy+Ni/+bwejSxRgI9aNzHYpTfpI8uhd6Vm296LTAvJTw8R9e/b/N77NNcg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1c8wdk5s50lfcr0yql9rwa4vsx05zgraqxk5g3g","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["606","test","some text here"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aly5eA+RhggNkgPGxiKbCDY0mmV5oqz22SyzuhtAa8wD"},"signature":"WynRY+qFM3b1iH0zZ5Z4hxamK4o1ho4pEShx8KyBy6w8Ile0eEU+3r6u7TZUCIeySJgJoJo0Ih+DTTWF6vRMVQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1q4nghumsvsyw3fz3hch3qxznee28zp8x9nnkpx","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"WhxisiHJr9Y1zONnv3xtLbQpwc2YeR9+P8L0H/0OlQUPkSEyjtEdYfsmSJNG85FAKO/A4Mi5gCOHBNLJcCJM0Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q4nghumsvsyw3fz3hch3qxznee28zp8x9nnkpx","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","nitrochange",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiT2ubIenf0bUNy8E8zXLhAlzfx49Wu5+Reaih2pyFuf"},"signature":"V1B2UzQdodVLlhqai24I53/nOx6igMLQEo60Ei2WRPZk2DJK1GvbNIC3a3av89l5VzCtUzqcQaL6ph+onFl5Ew=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q4nghumsvsyw3fz3hch3qxznee28zp8x9nnkpx","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["nitrochange"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiT2ubIenf0bUNy8E8zXLhAlzfx49Wu5+Reaih2pyFuf"},"signature":"+3O5WzlzxjIlYJwdpjeSqmEpX5BkXJJVGIf24/Jf9wQQfDrpLdFdxBEIrLkqldfznuatLA2nV8cIZjLbZdh0uw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q4nghumsvsyw3fz3hch3qxznee28zp8x9nnkpx","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["607","nitrochange","here is a simple nitrochange command"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiT2ubIenf0bUNy8E8zXLhAlzfx49Wu5+Reaih2pyFuf"},"signature":"0W95UukMl3mquXC3rvAukfcT3+eN2TP7mNMGVthV1zthjPdCcLSZNe5QgX5eKUTjpGXscGs3zcZfpya9F/Hl8Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ffy4t5rtahk803a9xj4vsl7k2qqzfl0355m494","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"daj7PCQH+/RuDW7z3nhcJgw8GIwixEgEnfyAADCDN8dYy21idI5urUcnUvbnwStdj9TGiPs1Fo1I6w5aBxYaBg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffy4t5rtahk803a9xj4vsl7k2qqzfl0355m494","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","svetagnoland",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhpB4IqNnBgz4ZINVprHbEUgOfK97Y3ihPQ45eYeNyDP"},"signature":"ulx438dGjedu7YtCOi1/N8KQpipYrjHHnB5T3pYL9xM9WklkFHpHorGnK2X2DggrNjrEtbUNveh5gmRUjUBn8A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffy4t5rtahk803a9xj4vsl7k2qqzfl0355m494","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["svetagnoland"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhpB4IqNnBgz4ZINVprHbEUgOfK97Y3ihPQ45eYeNyDP"},"signature":"TW1AiNGAHmBHKw5H/+fSHxpCOu3mU2HaRM0SvxxPu2d59o3ffYMnJnPqazxfhT8+8KOHYDtYqWbNJuezFBrKxw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffy4t5rtahk803a9xj4vsl7k2qqzfl0355m494","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["608","SvetaGnoLand","I am Sveta Gerasina from Russia. Crypt is my hobby. I participate in ambassador programs, testnet, install nodes, I love our community, I am ready to help the project if you take it."]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhpB4IqNnBgz4ZINVprHbEUgOfK97Y3ihPQ45eYeNyDP"},"signature":"Nle7kY7nvumcRbBDyRn8ePdUR7p9QFompLi1A4bbbHpdkC3kTxao5IwEZokFG/drkeA8PZb45TiLF+ZtamoBuw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1mjzyk7r49ta4h6ppgv2fedgz5ek6hgyttge9pv","to_address":"g1mjzyk7r49ta4h6ppgv2fedgz5ek6hgyttge9pv","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwpFZ/Eba2YD0tSPYISodHi2gBBhx/hUg/PPZTt93aq7"},"signature":"qF3Z+vEIbAy8UOAfx0M+BKP3H3e72q/cGeT0bDXpJxkmXbdQ8yZ4gRRNvWZo0M0Ob2n52ujEchHQlOZykRWkvw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1y00a6w0t893yldq6e2karpwqwzh29cz3e0tkah","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"8/2gNQQ03FH4LnvKJ26GYILUHA76Cl7EX/eUMS1DhNhN/rq9iWlrtJLQGAhlN0mx/w+0wRb7rPenHF4LTQQGJA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","send":"","pkg_path":"gno.land/r/demo/users","func":"Register","args":["g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","Dongwon","Dongwon"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"qL2Tvbyr4fWIpC4Pz7y0EVCqbbAMIM6F+vWpz7X0HDcG1Y7CwtXTKxQfx7KyPLVXuLDqTFlsap1mcLtN0wCyfQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1s7dad9td34uk9urfr6qe55y68spdyeew4y4zm0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"cHIoaY4ztqb+dWhdOichCys37KiWp8sXBYqI2Mukw/Vpz1KBW7Bj+UWDdYiQMxHyO9+AYWk84m8b7L7ZqiGkug=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s7dad9td34uk9urfr6qe55y68spdyeew4y4zm0","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","azaria",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8aetjjUrODf/xAfZv0Hg38bBrIGxUE2yON06TLEeoti"},"signature":"Z9U7IwisAB7HF5MzM1AoRLBYPskCXcPDBCqN6pKXI5Zjter+aK+WbVxuVQAFiUSAx4zwsgHaEHJ5YtlBrZHwZw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1u66z7tevtzwy54c35v3x2g0f4nhh7v4x7atq9v","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"s2McRGpzAVuANlOjIxjCK/HrxJ2FoPTmvUs5habsLno6PyJnHw2cWgNkHKnfjVGFxMaiQGr3oCxMcSP16ZM/6w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u66z7tevtzwy54c35v3x2g0f4nhh7v4x7atq9v","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","rabigr",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvWvmbt8rVNatwXBIpckSfxADfQ78Gzl3skwDs51X+j3"},"signature":"2ILg/wZ5vVsvbOTEEI+7+j3XSTwDDhbXnCkVE+e6OIktWr+RE3DIsgeoJ3Pl+x1c40ZkGqRzFEM1LirEJ1VyJA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u66z7tevtzwy54c35v3x2g0f4nhh7v4x7atq9v","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["rabigr1"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvWvmbt8rVNatwXBIpckSfxADfQ78Gzl3skwDs51X+j3"},"signature":"g7vXziL6mEh01GHA68zDRVT+JhkoZlkbXekVoWals84dtToBvvku9wRcFfV9qfQe2gWfgQWEuNUFvICupxvpUQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u66z7tevtzwy54c35v3x2g0f4nhh7v4x7atq9v","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["609","https://t.me/RAbiGR","I run nodes of different projects, monitor their work 24/7.Crypto enthusiast, crypto investor."]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvWvmbt8rVNatwXBIpckSfxADfQ78Gzl3skwDs51X+j3"},"signature":"644SnCeIZjXafo/f6x1Zq6f4V83/E9hLfVhOJjPmBSZGtb8o2JIzkECgD31lUfYu2VhR6f3tcrFD0yxNkgvdZQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mtnc9kk79pypnq7yzrmty794a5z7qw2tsn88qu","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","stakrspace",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgB5WeytkxJ4fFhDGvUBHOxrueNcP6cHvZ23phCg3qOj"},"signature":"5B+kBf9krZGcd4qXcZgGNBfUCNVm37MoMt2pKyHbzFt3ygZPuQIRI2BIDRpLjeVjTWfZ/yJSnQkJmoMzDajxZw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mtnc9kk79pypnq7yzrmty794a5z7qw2tsn88qu","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["stakrspace"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgB5WeytkxJ4fFhDGvUBHOxrueNcP6cHvZ23phCg3qOj"},"signature":"3ysUajQ1NHeKIALz8NVSZf+swUrivj83V4CeZg27bjdvL39GLZY4h0pwKyA92AAfJs+UezduWlUZfz34Fav6/Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mtnc9kk79pypnq7yzrmty794a5z7qw2tsn88qu","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["610","wow wow","it is working"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgB5WeytkxJ4fFhDGvUBHOxrueNcP6cHvZ23phCg3qOj"},"signature":"4DrURnujuNDFDCHwpWtKc0V3XZCjbWXAB3BMWw4wvMAcj9YmnEM0IuiSkhdKrCfT1DJnVanKTuAYnOs0+MUwXw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","package":{"Name":"solve","Path":"gno.land/r/demo/render/v1","Files":[{"Name":"solve.gno","Body":"package solve\n\nfunc Render(path string) string {\n\t// TODO\n\treturn \"# Hello world!\"\n}\n"},{"Name":"solve_test.gno","Body":"package solve\n\nimport (\n\t\"testing\"\n)\n\nfunc TestHello(t *testing.T) {\n\texpected := \"# Hello world!\"\n\tgot := Render(\"\") // /r/solve\n\tif got != expected {\n\t\tt.Errorf(\"Expected %q, got %q.\", expected, got)\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"eo+8lrz3M6XTEBk/2ruZAuFxOilIUVVuU5k0uV8WmKRpeFV6h/S7QquHoNOlM2x1MrzWp8MnrbzHiOFQRnTCsg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","package":{"Name":"solve","Path":"gno.land/r/demo/render/v2","Files":[{"Name":"solve.gno","Body":"package solve\n\nfunc Render() string {\n\t// TODO\n\treturn \"# Hello world!\"\n}\n"},{"Name":"solve_test.gno","Body":"package solve\n\nimport (\n\t\"testing\"\n)\n\nfunc TestHello(t *testing.T) {\n\texpected := \"# Hello world!\"\n\tgot := Render(\"\") // /r/solve\n\tif got != expected {\n\t\tt.Errorf(\"Expected %q, got %q.\", expected, got)\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"OUkxxPcQd1o9v9TRQyJE+l9POUAQQAx6LyViFoxzC/VyQjXhejuiT/3I6EPUOs2evlCKoEGjB6CW68fJZGHG4w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1mvlamf6mlnfc5x4kqsz5z4c3nt67xapedr8urm","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"YCMQRKGJK7KlDWlunZzViJo4HkDxPh10u0sYYCp0ZYgJSW3PJV3jWp/H81I38/a164souaDb4nwmX1LD09ksHg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mvlamf6mlnfc5x4kqsz5z4c3nt67xapedr8urm","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","cryptoin",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2kKCyfe+93qcL2Nqql48x9rXI+j7rEba0Wpk5OyESd6"},"signature":"rwm5lrPH1pORHCj8f/rqZCdGWkaXQjV2Hs7AgWq3m5gRiKu7D8aEvAVe44f3PN9CIKotwo2eU4wN7KalzD+DRw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mvlamf6mlnfc5x4kqsz5z4c3nt67xapedr8urm","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["cryptoin"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2kKCyfe+93qcL2Nqql48x9rXI+j7rEba0Wpk5OyESd6"},"signature":"ajN5gaZkx0rbTAvqHm7n9P/J6N+Yt4nfcJjU7/oAjTgs7obDt9xeZKQVbh4T+V9JOErKPp2QAmENGufnrk0uMg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1mvlamf6mlnfc5x4kqsz5z4c3nt67xapedr8urm","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["611","Cryptoin Team","We are the Cryptoin Team\\! We have participated and are participating in more than 10 testnets. We are professional community of programmers and technicians. We are ready to help your project in every way and be useful to each other."]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2kKCyfe+93qcL2Nqql48x9rXI+j7rEba0Wpk5OyESd6"},"signature":"Ng3RlhDVycGp7qfD3C5UzOMjUgD8VSx1yAYx7FXVR1A/tnAqtK3W+h2s4VBt18Vrm+VtPsENEDizgGMwPCU+KQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1zuvr4u8l93v0q6fm4kn7s5pqntwfd0kglhphdf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ccxxCmK27lotnCx2gS7S1kycjtp8oMRXSM5NzDrzJmUEhBJgHl43DtDk00Tv14e1Vdae4UE3RPnORdiHZtVqVQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zuvr4u8l93v0q6fm4kn7s5pqntwfd0kglhphdf","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","alksjglakjg",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwlwFhoe5LjHQR+DHGvhr5OuO40vpuprp3tZkEYzOE+L"},"signature":"uXcEpg1oyEDL8KDJtJg/4EASMMDgCtK469V9qawteShr/adcFNePaTZzaNWaszmduk2uLeUNTHfG2MSPBchM/Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zuvr4u8l93v0q6fm4kn7s5pqntwfd0kglhphdf","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["alksjglakjg"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwlwFhoe5LjHQR+DHGvhr5OuO40vpuprp3tZkEYzOE+L"},"signature":"XkwWZnHcFRgrOT16rfIGNNi7KVO7l7cEli+8eKtPZQtC+qhL4oFjrfTYdJgvaQJq6Qm7YV0WCguRv/s5BsHZuw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1zuvr4u8l93v0q6fm4kn7s5pqntwfd0kglhphdf","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["612","alksjglakjg","This is my second try"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwlwFhoe5LjHQR+DHGvhr5OuO40vpuprp3tZkEYzOE+L"},"signature":"dpxHq05dDcV/3+Or9l7Hfh684Y/3yQA8gF2Tpfr9MXMabckwm47Yx8VZzR7iZfeF2/olyR9oeUxEBk2gvbc9KA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ct7m4tln3mfyzwyln0c2lxj5a4v2fn58pa3783","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"A8BVATYaBS8EUTob6SzGeqrxuhJ0JuUEOpKhKpfWRlYjCoA6NZ1rZ6qA07iNRT8stiIjFW3fF91puTrziCX8tQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ct7m4tln3mfyzwyln0c2lxj5a4v2fn58pa3783","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","iwakura",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4TQlCMxGAyVpLkW+t3kHpiJeI/bV6ET/A0WDWmO7MWk"},"signature":"lxkxiaarPoLgwB9kx7VNXb70Y7I4GX78X5PG1nZpNF8XVf3owpm4AkYtOGWa2nc1FlWBEln0s5OA2UYL8lKBXw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ct7m4tln3mfyzwyln0c2lxj5a4v2fn58pa3783","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["iwakura"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4TQlCMxGAyVpLkW+t3kHpiJeI/bV6ET/A0WDWmO7MWk"},"signature":"g8NpOli4G5bS8sB8iSLCs5cr8JuYidlJ5agdBYQo3PMpEzu+c2WESUrE+vM3OIsXmE+jlwWef+LsCUGHqAZAnw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ct7m4tln3mfyzwyln0c2lxj5a4v2fn58pa3783","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["613","No matter where you go, everyone’s connected","https://teletype.in/@alphahunterss/GnoLand"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4TQlCMxGAyVpLkW+t3kHpiJeI/bV6ET/A0WDWmO7MWk"},"signature":"04KyZoMbtOk+TehXJkDREHY9NjJDfKvbfXXnkO8cnwIwntVM0GQnYYS35wZxOz1wneTEfM+dNCI2BQ6kg3khVQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ct7m4tln3mfyzwyln0c2lxj5a4v2fn58pa3783","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["613","No matter where you go, everyones connected","teletype.in/@alphahunterss/GnoLand"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4TQlCMxGAyVpLkW+t3kHpiJeI/bV6ET/A0WDWmO7MWk"},"signature":"ZWAKwLx0YHiynz9MZUGm6RnujVSu7qxc4ma+/TS5F9wYL6Lv9k97RjWcCtHr8ItSzH48EFYd7v3MMmfGbnxwbA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1nnlqhaltxhq6vfjqwdvpc4k555vyfxr4ejwfme","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"lJqIhNVpNbOFHbI10geXJ+lhcyWvRimZnt8UtiLcKNIG+4TjX03YrHtJI24D3bnZ8kZRCnJVxrZCNbHUXHR5ZA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nnlqhaltxhq6vfjqwdvpc4k555vyfxr4ejwfme","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","PryanyaWTF",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/3HO7hIdhl++a1Ni9yUP9ZX6ow7ET3Rz+YTwMP/Nt4j"},"signature":"s2MllS/xzLaYwwLyVgG1DER+Nw+QCg3Ry3z/I0S1vOZVg4XVQ+NmbkefFH9pTqxX9aMPMcefqwPxWfJ/A700Ig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g18wwwwcelwaas6tyfz3frsat8sdtk5sgxka90s3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"PaoZD/xizBGNIf7u27/mm+nUxBauKzJMfoiN45nPqHx/qlyodAaZ8r1QauJaj2FdRgLVm3WhrrUFYwnAq5YcJw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18wwwwcelwaas6tyfz3frsat8sdtk5sgxka90s3","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mytsai",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvflqeqAAZd/yWVWd4S4sa1nhf9Ommms261g+HFKXFpo"},"signature":"HYiIjHDqdRpqrsJNxt8w7I20ECX2Pe0GyEYGr4W/1qpjCtEr6LD7Ka1F1tahQLiOX4XGGYc1g4f8o51Fax3D4w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1utv3l35t9p62d8cjasjkj25raazhh9au0lslx9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ukJJw8hwRDvjMiweDYS3W4ZiZ2FFp8Z0udq1HRiDW+9rddrKwPWJRfgBhHyePwohI4zcQd2E1hbUEvYTHOhOXQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18wwwwcelwaas6tyfz3frsat8sdtk5sgxka90s3","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["mytsai"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvflqeqAAZd/yWVWd4S4sa1nhf9Ommms261g+HFKXFpo"},"signature":"Mov7nGWzixwhYk3a7E7RSC0ghtTqZbEKME3sON2+Vw43Lpyecb1cem4sT1qXOUIDPbVMbpXZCMbqH7fEC4XHLA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18wwwwcelwaas6tyfz3frsat8sdtk5sgxka90s3","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["614","Mytsai","Blockchain validator. For you with love ❤️"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvflqeqAAZd/yWVWd4S4sa1nhf9Ommms261g+HFKXFpo"},"signature":"rzqCj6dNt+Aa67hqhn/YU0XWJglq0wPBZR4l30DLxk4WetWRvrWnmKxeGbsgx6Ap+47JCCm4aLficDH3tDOg9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1utv3l35t9p62d8cjasjkj25raazhh9au0lslx9","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","g1neorunc",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1/4i5VThFzOLhYCP/k1TaoC1ANbjyzufLMuQqwr+s4r"},"signature":"NqvzR5Oy+la2paUghOKsiquMhq4mjkOqkFTxgWrYAEE/UhWc0g+m7rVdNKkyvIVHDmhTSAWBMnAdCEWCbfFn4Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1utv3l35t9p62d8cjasjkj25raazhh9au0lslx9","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["g1neorunc"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1/4i5VThFzOLhYCP/k1TaoC1ANbjyzufLMuQqwr+s4r"},"signature":"ccJkd4r2N5BU/zKVCX9918VrKe4UcuYPCvLYRcoZpf5sc622lyuXg3G04zVxEzN3vk7HYsgt8qLYzRHtvwtE4A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1utv3l35t9p62d8cjasjkj25raazhh9au0lslx9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["615","how to node RUN Cosmos","C0cry#7294"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1/4i5VThFzOLhYCP/k1TaoC1ANbjyzufLMuQqwr+s4r"},"signature":"LCDN3G981RlXbYIPR3EBdqZVQ8kVdxf0NOP5fmaO9+oj1Uw2VIcUcmdgKd1GFAkLij73vs/3VCdEIRb9YZE6NQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xpjwr2a9g8w7k6ylxqv2u4jfaweftjxqxr8knr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"CXOBTSWBUxJ/EdK+kpt/qgYfIBdDjvrRkvE+eawf+AlKD8txE+Emw/O56O5DeGeWsuxpmV4nmiuABJvDVlcfuA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1678sw4dcrssm2sxf8rf33vvanhdcyr35yj2tgc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"265CTbX0rioaLFb+rr+eosaMjItWKn4SOlbBYEbtHL4OFadMVPqa2KWy/u5s2CHteMb4R9/SlpGkk/Bp3ZgWNQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"l+4BpKkEzikjuuOyfky3uNB1b1y0QL6PHi7ho+TZXCgpQjQcalnESALGoIOmWSj+mz8Sy4B8bkAA+yjNKpDfdg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1c4f5pn9zatmyxrndncv3zsq8qmk33vf4g9gm7h","package":{"Name":"hello","Path":"gno.land/r/demo/gor_hello_v1","Files":[{"Name":"hello.gno","Body":"package hello\n\nfunc Hello() string {\n\treturn \"Hello() called\"\n}\n\n// func Render() string {\n// \treturn \"Render() called\"\n// }\n\nfunc Render(path string) string {\n\treturn \"Render(path string) called with\\n# \" + path\n}"},{"Name":"hello_test.gno","Body":"package hello\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\t{\n\t\tgot := Hello()\n\t\texpected := \"Hello() called\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"\")\n\t\texpected := \"Render(path string) called with\\n# \"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n\n\t{\n\t\tgot := Render(\"n3wbie\")\n\t\texpected := \"Render(path string) called with\\n# n3wbie\"\n\t\tif got != expected {\n\t\t\tt.Fatalf(\"expected %q, got %q.\", expected, got)\n\t\t}\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AshocLMsZgjD1Q08bZUfI1akIdxlp2BcUNjdkX3ChTWW"},"signature":"NHPYqlmiV7fmETxbDDckLyOzlsoexkXpRgpcygK/FV9iEQoM45nz1qi/IYALjTMH0XW5YYaU1SyAK36ip7QH3Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/gor_hello_v1","func":"Render","args":["jinoooo_sub"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"GOzrwJo0alGV9i+vgsDutvQUn5ThLOVWHhOH5myIRzo4zYA++iGnVb4VgQ59MMwrvnJTM7rH4wepvLSYgCKfEg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/gor_hello_v1","func":"Render","args":["hi"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"nneJ3XTCMZdtmgb+SHwjtlqRW3kiE8ZAydJ2crHRfXp2JWE5hh/rMYX0Li4Lke7wh65KGFQ3Qa99iQ24wHVSkA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1tqy8vkgm4s8a8jq54au20tfju03axu0k5jeqq7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"GBcD4ND0zjb8EQ3pE0w0Ej2mqK+a9DjF20VWoU43aytH4LxaGeT8BXLOT04Bh6yALpavG1OKPIuYOSp4G9LyPw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fzjcyrhv7rtrpwhsd0mhl9n7ahxm0v34p9w5kn","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"7p99cWHrAK6zjLuXjPPfoFX8DLhPBxV4rcu60eCEks5KdmKAsqAVsBosQaqUnJVdMl3SJ6FILRMvfSa9/t1AZA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fzjcyrhv7rtrpwhsd0mhl9n7ahxm0v34p9w5kn","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","4r45h",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7BGCHnC+0EaBkHciQ6D+fFVnlumBrn4QABY4FhxNlab"},"signature":"4wzQxQ4mVEZMuomS21t60RMSwMINZp2DzeGK706wfMMPxT+KBATDYJZ32oxnJJ3NzJYFFqXpBM+bmCSJjsOYqQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fzjcyrhv7rtrpwhsd0mhl9n7ahxm0v34p9w5kn","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","4r45h1",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7BGCHnC+0EaBkHciQ6D+fFVnlumBrn4QABY4FhxNlab"},"signature":"/Lh6iXuvkk2xYvSCYLFNv7yaAteGIC3jpvBf6OHDZ0JWpqoyW6/Dnl9ECCE1P7s2t4YBj5YqRYru3ZtfC9nCXg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fzjcyrhv7rtrpwhsd0mhl9n7ahxm0v34p9w5kn","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","arashi",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7BGCHnC+0EaBkHciQ6D+fFVnlumBrn4QABY4FhxNlab"},"signature":"fREeOBspN5KDX55/VVyG1u4e8e+pozqfvi++YY4uoCF/jg6hrMX5kQBryi/J2vxKSIA8ejZPRnGkroFAdicLGg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tqy8vkgm4s8a8jq54au20tfju03axu0k5jeqq7","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","xelnaga",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7t3YoK5MTW4Ycz8m8RQPXQfLwc/2/JFqVj1gpZY4h1m"},"signature":"A5W7urRS2MwZHeVizyBm/fCQQjkx8UsmDJ2Qiu13Wr4AA8rgHFId1j+LqpU9NeueD01pKeWO1iRj7Vh9rwjC6g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1678sw4dcrssm2sxf8rf33vvanhdcyr35yj2tgc","to_address":"g1529ppsr3g9rczhqd5t4zpuxcjrlq2l4jm2ds9a","amount":"9500000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1X6Tk8Psu0vHQba7FO0PULm1v31arZVArwj+jAFkg9c"},"signature":"kSZUj4f/qHIiovNySMHNHcbZMosM06UXxxPcimt3ksdPNbOp58SLjVsW/KBwVHSFDQDhpv6TiyCxxrdTS/4qGA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fzjcyrhv7rtrpwhsd0mhl9n7ahxm0v34p9w5kn","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["arashi"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7BGCHnC+0EaBkHciQ6D+fFVnlumBrn4QABY4FhxNlab"},"signature":"apIKHkhuTnjXFNMjlBFLqEqTyQJZ11hBKfk1Y+rR4K0Ia8yCDJcSQzx3XmXbCw4w/Gh+wJRpj+sEeIdK5KOhig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tqy8vkgm4s8a8jq54au20tfju03axu0k5jeqq7","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["xelnaga"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7t3YoK5MTW4Ycz8m8RQPXQfLwc/2/JFqVj1gpZY4h1m"},"signature":"Y7x43LI1ed9xlz2grQ8xCcVi5olSDZfvAxqBOJJI9tNoGQ2lqxK1Zsavfv59+CRYMm9mPBC9YK18POI2BcGL5Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fzjcyrhv7rtrpwhsd0mhl9n7ahxm0v34p9w5kn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["616","How this blog gonna work?","Testing a post on gnoland boards"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7BGCHnC+0EaBkHciQ6D+fFVnlumBrn4QABY4FhxNlab"},"signature":"aFvXoQxmdmbp9P9Y8+cRJIhkxTk/rMTohFggJBQyYYgGN1lkEnTPgXYUYQpT6ZhDY88VE6Ba7gPP7WdHIPSM5w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1tqy8vkgm4s8a8jq54au20tfju03axu0k5jeqq7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["617","Know the Xelnaga","https://starcraft.fandom.com/wiki/Xel%27naga"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7t3YoK5MTW4Ycz8m8RQPXQfLwc/2/JFqVj1gpZY4h1m"},"signature":"5Zd2yZMKf02FBsThXrpytcSFRrbnbnDv8JUJ1sbiyt0gclFmneScgBWy5ce8peaC+tYbLaO+q3//PIZHHRCfNw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1xys5w90vjy6uvz3mm0m9lxvrkzsna2fr4fzt0n","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"eehPr4CkMVnYEwYkz1pJOYDzUurUc5H5+uvRnsslwOMkgjEZsKEspipllY2xOHej5vXb4bmfJowPcdEWYjnf9g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g15ja824mlfgugmsn3gldexj7htz9znqr6kkhmul","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"sX7//Ple2hNvC1oKieew/shA7wHK8hZQhfH/SUNZATAJffJfL/IDoDKCcHeqEbG0PEhAI4fXytP9mL0WFKMptw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1um7stkhzj6zdslcuj9hdg8d8uyj0wleq0vlvg7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"LQe1a9/zxhqHEFOZzWFz0P/dTK78bMHOyTFToA5ayZVvj15N0XbAdBrDP1yVlp1DFkroxhLhDay3AuG8+YxjZw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1c62t4vd5qkljc9388nwwny87u8u9l6r4ncc985","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"dA0MksnAh7OXbaH5jU6cf2CjXYFt928pDfWxqrxDZ68vAExlg8v9TLoKocc7W3hB9yP1OViUzQ9nTHfTwXakWQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1krn3g0tlrr78hkfxg68fj8guxlxth8p2vygu35","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"+rwSDfWL24cv2LcutsdK6nsDHmRqmDyGL5QItGm6WhRBEiF1di5jHXbYltnJXyAJp4P/UB0BxePRmCNcqo5G5w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lmrmjadlz3jxp8t40gn0f7p9zdhzn20e447xzq","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"A/Du5/TzPt8syW2uYPMSSv6gEW5/vq30ktH4Jnf/w7cCZxKGVFR5YwFTZCvhz3uEcqmaHZKAJtT8XZMexcYhXQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ennsur96rttxucknpgf2v6l6p9ud3w7nshnfxj","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"b83g5uLCu714xn43U+6CZ8InL//ZoDs4xnW5rpnZKGlHJsWVUufCbXR38rpIA/rX/qxY9Dr5vdObugLx2CJlmQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1dw63q2kws5ez03mf80peqyg6da7ya54zawxt0z","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"xPA4XqPjQ59uDnyIHrRsdWXSt+Sy4e0p5qSZJm4jC6NiElp4O/hMO43HMFz6RSJAfPHOeKqK93BtOm1dsJ58dA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1jhqkgas2uts6d3aezdzeug27333d7ge9ctpyhl","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"UiBzGevTCLM6pFLL47U7hL70sYDDSp0IBBhxkAVAnxN09ukcmiCQHerA3rr+bVhp9bZlNhJOWQKpfl78vgmY7Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dw63q2kws5ez03mf80peqyg6da7ya54zawxt0z","send":"","pkg_path":"gno.land/r/demo/users","func":"Register","args":["time","time","time"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsOPX0QpFcVH/iGGnT+C0Lj7gsvYwBIOKbWgy350OZIh"},"signature":"C4IrAhxZTEcfoQD+yqD6aRzJQyTKPw+8QDHPR67I2Ax+veGHM0ZOfSLn9qz/vVbMD4+1nGWYnuz+90VyyWwoHQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dw63q2kws5ez03mf80peqyg6da7ya54zawxt0z","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","time",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsOPX0QpFcVH/iGGnT+C0Lj7gsvYwBIOKbWgy350OZIh"},"signature":"j2W0/qNWsZfjedp95NZu44zrtxBDB2JtkboxkEqsP+BambhMbPytgt55VUA/O5uG4xni+KxHCLkoAu/u3WoecA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jhqkgas2uts6d3aezdzeug27333d7ge9ctpyhl","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","difbaby",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aga0sXZd4L5Wm6rHNItY4tzADttiG+GRiwiB3FPbwJRC"},"signature":"0vsgJ13i2U+0VuORDb7kUoJpkp9YsmazkKAC3ra5jcomjAZWAUww712KNhGnf1mDVKJD3gJx+5QfmCagWu+EWQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dw63q2kws5ez03mf80peqyg6da7ya54zawxt0z","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","110",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsOPX0QpFcVH/iGGnT+C0Lj7gsvYwBIOKbWgy350OZIh"},"signature":"zZAFr1U06a26iz0XhSlLGHDltGWmYg7quDAxeNcOEr01JSb9969u63CZ66k0xd+UBK+t9iwq3IksjIZwstnqmQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dw63q2kws5ez03mf80peqyg6da7ya54zawxt0z","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","time",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsOPX0QpFcVH/iGGnT+C0Lj7gsvYwBIOKbWgy350OZIh"},"signature":"HMCSXMre+fZ7R/tClsb0wVJhrPZSGBw4XQtZOD0NER53YtkHEOq2qzkm0/LLGq7yyVmx3jXgEol3m5cmDdS8RQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dw63q2kws5ez03mf80peqyg6da7ya54zawxt0z","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","time",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsOPX0QpFcVH/iGGnT+C0Lj7gsvYwBIOKbWgy350OZIh"},"signature":"/gCEVfBY3xnOZKwT6htu3a0ZotGyJ9G2vonCAKGFNdl4OguosjMYqD2xewxi6pWkiF+7kS8AK5ZcXTVpPyh/cQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dw63q2kws5ez03mf80peqyg6da7ya54zawxt0z","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1","1","1"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsOPX0QpFcVH/iGGnT+C0Lj7gsvYwBIOKbWgy350OZIh"},"signature":"KhALphHDpAp51nax09WPODBMFGhgrysJwU+PWEEEXWJjCJS3pwZdWU2zPKEqExrRB0JmdB47+jarLHPFFJUX+w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jhqkgas2uts6d3aezdzeug27333d7ge9ctpyhl","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["difbaby"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aga0sXZd4L5Wm6rHNItY4tzADttiG+GRiwiB3FPbwJRC"},"signature":"sHjnuVzdRgx6l2H5TPI74AaEaDIr/SlAN20TbG7FM/FVnsh4nRPPt0J7NkCbZ6umetT9ZA4z3xUk3qAP1f+3Gw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nnlqhaltxhq6vfjqwdvpc4k555vyfxr4ejwfme","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","«pryanyawtf»",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"3100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/3HO7hIdhl++a1Ni9yUP9ZX6ow7ET3Rz+YTwMP/Nt4j"},"signature":"Jc0metIn4tIOmg9q/FEa6aGkI1TngELE9LgA/NG0/lpfY3G/qHMkfGX/llczBysqnVgL+OKsmCBzpjWiqYC4Ag=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nnlqhaltxhq6vfjqwdvpc4k555vyfxr4ejwfme","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","pryanyawtf",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"3100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/3HO7hIdhl++a1Ni9yUP9ZX6ow7ET3Rz+YTwMP/Nt4j"},"signature":"rDwOESZCNPIFiH7HYPoMuRxHCzGjYxOVqDSmdT/W+oNR4Le4zLeHHBTnMV6p45qtatYOUL/47nvreZOyGvZ7hA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jhqkgas2uts6d3aezdzeug27333d7ge9ctpyhl","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["618","Chill music","https://www.youtube.com/watch?v=CLeZyIID9Bo\u0026ab_channel=Settle"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aga0sXZd4L5Wm6rHNItY4tzADttiG+GRiwiB3FPbwJRC"},"signature":"pSqAfFhSeUqZ2h8Lu5Rg9QSXjOVgk+3bV3oUY5B20UAOONJc592/ePAbrMESmcB+j2s4ZEv2CFJXH6hN6WRO3Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nnlqhaltxhq6vfjqwdvpc4k555vyfxr4ejwfme","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["pryanyawtf"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/3HO7hIdhl++a1Ni9yUP9ZX6ow7ET3Rz+YTwMP/Nt4j"},"signature":"xd2R91ZZ8m4u44dqxUHPX0zYS+kqAo4ydxZb5okQuEBZ3ae0+KEg2/eP7Bgv/AaCztJ6OnKD1pu4kQgGM1kPwg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1uc5w5ttr5pd2euev5xvxchrytjgjvzs9a5zvkv","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"JAHhfySCqfPhXUmU+LIWWTzZn7A8tYX846FdJ1xuPd4mhD7Q2V2vEVx8NsJ3wfKlemeUgwksP0Mj4qP4u+TFww=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uc5w5ttr5pd2euev5xvxchrytjgjvzs9a5zvkv","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","andri1",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApUgDuIDxODU2PntcUVSLov0HPKXeQqBNVAXQQMdijak"},"signature":"f88cIFL59u3SyRwFOHHsbCgFT0P+vROMRy6lhL6c+FZpDlclIrPWintWEHhaW+lOvNtmBUt396Emlo+EZZ1wuQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uc5w5ttr5pd2euev5xvxchrytjgjvzs9a5zvkv","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["andri1"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApUgDuIDxODU2PntcUVSLov0HPKXeQqBNVAXQQMdijak"},"signature":"aWTO+HeuTS5Yvp2il4nCMSiLXgcqb5SK0MkW936tLQ9hJuJS97S8+/MokVL6yhNgyIQ5MKtFVRRMMjF53kRTmw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gy2fphp2asdd6qjm6m9hka00tgk2nqff0hdxcz","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"7bYnu2u2XjEopw6aEKRrcB47HHojzO0IU62aKs30m9407kVY1ZVgmKjxoY4OY/moO342421rLcinvud08v8K2w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1uc5w5ttr5pd2euev5xvxchrytjgjvzs9a5zvkv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["620","I was predicted by my friend in your project, his nickname is den","https://t.me/F1rstCap1tal"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApUgDuIDxODU2PntcUVSLov0HPKXeQqBNVAXQQMdijak"},"signature":"LWjsOv1kmXaPCaj6ISFVvThW1oiaWlZKhy9dGRqybjxZawk22dui+HgMY7jgIc1XKKjm2wHFGdGKYzMnO94CQQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1l9hgh3wj3ascveaualc964zajhmn8053k2a83k","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"QvCgSb9DqzTF7G9vCgOvuvlqxhYhZ7Ll7gS+3apqFfEDvNt87bX6iPUe4YKH4aHFVPkvx4KQ/XNh02Cnbe5v7Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1l9hgh3wj3ascveaualc964zajhmn8053k2a83k","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","andr2",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5SAfgyqcJ9jBsT9KqPuTWYGbjD3Js98dWjseUFjtVH9"},"signature":"ZQkcJSH6OUpOD8e5MxUf0Wk/H9r9bDY4EreWDoD5hc0U+FIxVXi9hSb2JnDwdgYecn3sYSnBvGo4fHcKTzkIrQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1m2f94mkqex3g62czl8lvrdl55wkvfuzqh3h9jr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"1gRWCqCP0QssaFI80Tlv77Tp8qEZGuzDXnQEYoBXW3ksxyWXWrXzk2wuotvz4rnJYX7d1CZG9O2PwGCJtac2NA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gy2fphp2asdd6qjm6m9hka00tgk2nqff0hdxcz","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","‘’kitvit’’",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzDFB3aCyvoIx+RCWMW6OK4EKU8N9yiRumAtkmAcVEvV"},"signature":"4yO6Zu3wCPh78Gd6Q0y8mq5Hp2qhU4OdnsqlIit8jkQTjv70vjRL2jNXv8Ns0d9yxbjEdf/EGixWFbZHN0zd1A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1lwe27zeashg3yrvf0eesajl0hrwtaj9h764a6p","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"ooF50O5N698NHq5wi/qGxrJxhrA0ET8b0GMqbXKjDrUYk1m0GMmKQm4d0/OiEVjYkxO6QAtexOF+P7gXPCVTXA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lwe27zeashg3yrvf0eesajl0hrwtaj9h764a6p","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","first3",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3fTYTBwLyU0jkPLKN5tKN87Tj5k7fIMSSBEql/Mnj0F"},"signature":"tCCMIcSiK6oRSAaZRjmJ3p6AgNY0VudlID8a0jGQCl9nyl8869QZtMEBA38l+yWAC1W8KrMCuLJzh7p7ecCFSg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gy2fphp2asdd6qjm6m9hka00tgk2nqff0hdxcz","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","kitvit",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzDFB3aCyvoIx+RCWMW6OK4EKU8N9yiRumAtkmAcVEvV"},"signature":"eTBHzBR6J1Ll33fiZx7+IPLAyeHssgw964MZD027fLdPfz7V1nw+uUZp3fipygVx+c7nkk08Y8C5DtX+TD/bzw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m2f94mkqex3g62czl8lvrdl55wkvfuzqh3h9jr","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","andrii2",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An5+Mkn1JY9mz5t9lmwwX59MEMY7QpK1Vu7YGUJBk/wv"},"signature":"NWHimRlZaIaBATUK3jM5Rqp5OFvTo/k1/NkpwR5MT+Ilq041mZmS4xOGB2vmEBF0HJ2ISEpjhqzrRZW22rJa8A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m2f94mkqex3g62czl8lvrdl55wkvfuzqh3h9jr","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["andrii2"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An5+Mkn1JY9mz5t9lmwwX59MEMY7QpK1Vu7YGUJBk/wv"},"signature":"XZ9wAoef9u3Och3+uaVI2Ep0v/qLyBOuESl9BLgI9WJ0/wvvil/cx41fGTzPf0lCFtjKxdE2wTVrOQjRrdT7Iw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lwe27zeashg3yrvf0eesajl0hrwtaj9h764a6p","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["first3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3fTYTBwLyU0jkPLKN5tKN87Tj5k7fIMSSBEql/Mnj0F"},"signature":"2nAXIwHs5bIGaZ8jSaQD4maaFDaWFwMhs2qNA3N6TlVOquuwdO4RPUBvtZTOHqGikMiKSDyy8LGetHE9oTB5Yg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1m2f94mkqex3g62czl8lvrdl55wkvfuzqh3h9jr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["621","https://t.me/F1rstCap1tal","I was invited by a friend from the channel"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An5+Mkn1JY9mz5t9lmwwX59MEMY7QpK1Vu7YGUJBk/wv"},"signature":"MtCghmNxrqFtRGGJP6Zv8AFWM5zlS3VJlK6h4/kzBzFjM5AjVCS/hkRtZWOrWIp72T+P/IpqV9SK6t+xeGL4kw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1lwe27zeashg3yrvf0eesajl0hrwtaj9h764a6p","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["622","My community","https://t.me/F1rstCap1tal"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3fTYTBwLyU0jkPLKN5tKN87Tj5k7fIMSSBEql/Mnj0F"},"signature":"eY2VaHtoeot1s2aoaMXf55fAdDXariPOvURwst964Mx3zi271VNACDykkR+VCF9JLzs0gNcLYHwRFAHFnZGB9Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gy2fphp2asdd6qjm6m9hka00tgk2nqff0hdxcz","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["kitvit"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzDFB3aCyvoIx+RCWMW6OK4EKU8N9yiRumAtkmAcVEvV"},"signature":"08D3yFW6Lt9zR3Rd6vP5FeKFfga0HWJ8H6ZhWRJ2LLZY9vz3K22yJ+xDpgSuZj3L/kRRYYmQn4o//TsF7bUhGA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gy2fphp2asdd6qjm6m9hka00tgk2nqff0hdxcz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["623","Happy","What a joy to run a node"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzDFB3aCyvoIx+RCWMW6OK4EKU8N9yiRumAtkmAcVEvV"},"signature":"qb2TdKTPwXH7zy9O6V2LntCvJSZE5GgmYsNXYCjob8REL/+D6vNn+UbG1nscdzOtSAF9rZJAevnRIpvpyYrzQw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gy2fphp2asdd6qjm6m9hka00tgk2nqff0hdxcz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["623","Happy","What a joy to run a node"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzDFB3aCyvoIx+RCWMW6OK4EKU8N9yiRumAtkmAcVEvV"},"signature":"DAEAG5lAI3yqpIHrWeK0G2y/c+gxW8VwZitmRQVb1zYTDHZTvmdr0i25YO0uqBxbCQbvMGFV3gsQOp/MJ7YZJw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gy2fphp2asdd6qjm6m9hka00tgk2nqff0hdxcz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["623","Happy","What a joy to run a node"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzDFB3aCyvoIx+RCWMW6OK4EKU8N9yiRumAtkmAcVEvV"},"signature":"27t2EsCWQFy68MIXl3JRJB2YPcEtVRooHA4jwMSL+FspNIyy0m9lLw58Eb6leTIaeP8VeFvoBiMKqfqdI3iVTA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hhaquc5wvwqhk4dh0wu6cj6an99gj84rzmt2d9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"A+Dq0HR1IGarDRMCePbI1M01N2dvN6aoziuthEEbZY0DRMd+4NbnUY8ualq/wTcCt2BnnwQM1+vJxr3FWvOhYg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gy2fphp2asdd6qjm6m9hka00tgk2nqff0hdxcz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["623","Happy","What a joy to run a node"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzDFB3aCyvoIx+RCWMW6OK4EKU8N9yiRumAtkmAcVEvV"},"signature":"vTON0xQo1pjoFIsXfIGFOfUSc8K3LADIVd7mejRiZmRRYtrxoAvgVXIXefw+UAHfVnSV06dPoPB0XwsAASG8BA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hhaquc5wvwqhk4dh0wu6cj6an99gj84rzmt2d9","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","vadimt",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6B7Q3JhOh4ZjpHgS7IthUdEhrMaLpjDsn0waQGSK99A"},"signature":"E+BynyB7/4cvpY3gMT+8xNLpL4qxNiifnIRmDYUQCT1wlvIqVR4Qzwcm32Gdf0g09jDOLLqEoIyoClTorJ4m9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1gy2fphp2asdd6qjm6m9hka00tgk2nqff0hdxcz","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["623","Happy","What a joy to run a node"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzDFB3aCyvoIx+RCWMW6OK4EKU8N9yiRumAtkmAcVEvV"},"signature":"y+dVYEIQD1fWnqCrWjiUWTAwDWnNNAovyF//bQBOmWsBh8rXAxrV/QCgzPd1RFBzJVThm5/KA2Joqq9khExr0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hhaquc5wvwqhk4dh0wu6cj6an99gj84rzmt2d9","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["GOBINJO"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6B7Q3JhOh4ZjpHgS7IthUdEhrMaLpjDsn0waQGSK99A"},"signature":"caMuhAZAWOXshLjErg+G64pCiUTnVfd5itYI8ahn9V9UaWmBu6yCJ0s6zG0uBWYeQeFCPN0NY9CQ0jQyiEj2pw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hhaquc5wvwqhk4dh0wu6cj6an99gj84rzmt2d9","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["VadimT"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6B7Q3JhOh4ZjpHgS7IthUdEhrMaLpjDsn0waQGSK99A"},"signature":"YyMGuR4efUzMyYPAjzAK3K84WVaojkjFzmbLxetJm3lW3WXZVoo3TpDhwvMT/GVkbU/Pam3JFXQUt8zYrE0dKw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hhaquc5wvwqhk4dh0wu6cj6an99gj84rzmt2d9","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["gobinjo"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6B7Q3JhOh4ZjpHgS7IthUdEhrMaLpjDsn0waQGSK99A"},"signature":"Jmw9dpoB8pp1lVTfJqrMIAOOJQ03qCTtXN27Y4ozyGVoiEoINyRowxCBIieRsrdKyafwGpQJ5nGG/Mc2c6eywQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hhaquc5wvwqhk4dh0wu6cj6an99gj84rzmt2d9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["624","Web3.0 entusiast from KZ","Started my interest in crypto and we 3.0 world as of 2022."]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6B7Q3JhOh4ZjpHgS7IthUdEhrMaLpjDsn0waQGSK99A"},"signature":"M9TSJyVp2uO/ITM6OMiiCphRvt413Nwnk8YuS3g/Sk46EKhEEYt9VdBvvPOShacwaNwEAZLm6R0FFy/mO0yRkQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hhaquc5wvwqhk4dh0wu6cj6an99gj84rzmt2d9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["624","Web3.0 enthusiast from KZ","Started my interest in crypto and web3.0 world as of 2022."]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6B7Q3JhOh4ZjpHgS7IthUdEhrMaLpjDsn0waQGSK99A"},"signature":"7mo31ivwCBxNYfPc6nESzYvL00orvB1gZ1ac3aY3iqRMlUfgUsmt2z/kEz7sq8/VZ1ppoMKvmcbVocwXnFlE1A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hhaquc5wvwqhk4dh0wu6cj6an99gj84rzmt2d9","send":"","pkg_path":"gno.land/r/demo/boards","func":"DeletePost","args":["624","1","1","typos"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6B7Q3JhOh4ZjpHgS7IthUdEhrMaLpjDsn0waQGSK99A"},"signature":"qkHvAqPtY7qHDjyXhrXLSnz4wnMl3oDTeZZHxPJnzD99WE702OTq9AexDLqsDNas4WxYF/qOldzO/fA26n2DAw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1929hckh9gm69ncqyplk6n9yymh0dvuq3vlxx9l","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"lLY3U3R9ozkM2MI0H+vdgD5lGg/cRJlmJ9FPivyH5NwWoKB362Pnovg+JhQQ2+tYFTpjkP6DJFfHxUWuNFR9CQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1929hckh9gm69ncqyplk6n9yymh0dvuq3vlxx9l","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","Leminger",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As7DtQVRgNcwQj6pw2/bDNUeQARbNdDOzFWDHRLDQtpn"},"signature":"7Dgvf8BTljNDME2PeOHACnNuyvMV+mcs6knzQ/dxPKwmCnYMn2+ZWx76k+W27CsCNdzr1cpxjoJp864orA+HWg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1yxj6jjm2u4fjh6rau6h98nqtfw680k57rqmgks","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"DBhNF3t2r3OWv1PI+envo+nki7klSuDFKIQFgUByboVlvISZRK5XTshyhpuTkuebz0vxNSxfIi7L+8AWOAv8Tg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yxj6jjm2u4fjh6rau6h98nqtfw680k57rqmgks","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","leminger_77",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqGIMk8DSUo2o5y+zCmJac4FX25Nv2mbu6SY/O57PQt2"},"signature":"Z6NAsM+E9Tv5Yhwwcopw7DSu2vrzMAr1osO0eoJKayY4el4zoAhbrgaWYDRDuPkGw4M/654lpbrzgk41CjAWBw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yxj6jjm2u4fjh6rau6h98nqtfw680k57rqmgks","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["leminger"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqGIMk8DSUo2o5y+zCmJac4FX25Nv2mbu6SY/O57PQt2"},"signature":"aXHrLn1bkjjfqOjzRlCdClqRHHzNsPUaEaGhOi0Tu2hY4PXIQ15lHTWEIyD+4KdmW4zHPDvdzxSiTfYt2BE1Aw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yxj6jjm2u4fjh6rau6h98nqtfw680k57rqmgks","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["625","Test","Let\\'s check result"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqGIMk8DSUo2o5y+zCmJac4FX25Nv2mbu6SY/O57PQt2"},"signature":"uiNs3Wcjbj7KgL0bj1DVtlhVAkDetuHJW2fZtSYWWkJOuYnK+RR8dxH2Rnznwb5xuSdJvh8hD6E/t0kw6Shoow=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yxj6jjm2u4fjh6rau6h98nqtfw680k57rqmgks","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["leminger_77"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqGIMk8DSUo2o5y+zCmJac4FX25Nv2mbu6SY/O57PQt2"},"signature":"f0QBiwou07zMFzs98HU47KrrorYiMT0poB1aoa5pLIVFmqtWmuiocTgsDbaRENZv4x/3jt+WX8osZXcCBIhEmw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yxj6jjm2u4fjh6rau6h98nqtfw680k57rqmgks","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["626","Good guide","https://seainvestor.medium.com/gnoland-%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0-%D0%BD%D0%BE%D0%B4%D1%8B-a0a04aea83cb"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqGIMk8DSUo2o5y+zCmJac4FX25Nv2mbu6SY/O57PQt2"},"signature":"ScIjyDzyx/CWRWb3LDr71lbHzHP6xxNI0Oal+WX/AjFzMXaol33C3jCtMVYki2JrIVIUuYJU0Ucz4T1RB92jlg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yxj6jjm2u4fjh6rau6h98nqtfw680k57rqmgks","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["626","Good guide","https://seainvestor.medium.com/gnoland-%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0-%D0%BD%D0%BE%D0%B4%D1%8B-a0a04aea83cb"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqGIMk8DSUo2o5y+zCmJac4FX25Nv2mbu6SY/O57PQt2"},"signature":"OBQnBedLbLoWZc4fhHCQP1eZMOUrp+X9TpstGbjvtnlEUup/6I335z8W8OzROPFiLizM+gbpaTMtgr77/FP+2g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yxj6jjm2u4fjh6rau6h98nqtfw680k57rqmgks","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["626","Testin","Next test"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqGIMk8DSUo2o5y+zCmJac4FX25Nv2mbu6SY/O57PQt2"},"signature":"nGvX/sFM5drztz9fhft4lhCk0bEQnMewb4JpEigx099+EgCWoZJgsxJoMKuUrWXL62sScHXqbIQ9piWFgCnC9g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1yxj6jjm2u4fjh6rau6h98nqtfw680k57rqmgks","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["626","Testin","Next test"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqGIMk8DSUo2o5y+zCmJac4FX25Nv2mbu6SY/O57PQt2"},"signature":"lEns3SKpYjsh/aSmbQ37C3CT/IWl7xlmNhFWc/cU8l0nsRdRkhRohDHd/OXXdj3NA2BXx90ZwdFX3YoKaAM2gQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1n8gx2cgza97znj4whvvw6puawmnu8sv3smyv5g","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"WygNaa6iM0UHQKRYz9mwVacLd5czHU6Y4Jy4H51XzjJUO//Hf3vZBGt85YddTohk9gWhm8x/uJZobvfrrPs9FA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n8gx2cgza97znj4whvvw6puawmnu8sv3smyv5g","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","airsintez",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ayr+IwqABGLu6zJmW4+Iag75hDwx860KPKUJgPRxK7uA"},"signature":"3+2qqL+nYsieF1xXSWfrpBOyzXjFe77t8j7H747s/fADARZA7fRzLrKHMfzMYG4OfddyC+MofhvTjMVRqmeG/A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n8gx2cgza97znj4whvvw6puawmnu8sv3smyv5g","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["airsintez"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ayr+IwqABGLu6zJmW4+Iag75hDwx860KPKUJgPRxK7uA"},"signature":"YFPWmAJ0qze0sloOWxFyj+MeWzKchqAl7SZeRViGfcZbOdgskFSYm6S8g5wOArUJ1VZpxGkBfy/+AuN79/P/lw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n8gx2cgza97znj4whvvw6puawmnu8sv3smyv5g","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["627","airSintez - validator","Telegram: @airSintez"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ayr+IwqABGLu6zJmW4+Iag75hDwx860KPKUJgPRxK7uA"},"signature":"16k8HA4uca0mx/AgB/DPNIOJLEmnwqoqX4wPCLKLpnFjR1G3AmvrEM1LPWZnTNMhjptFcFo6tNpmAj3brlmfsg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g10jd9zcsy8wre7x4n7kuy3a2shqr7z9jwynnjgv","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"YH42YG63KXy7kngDbOrxf6Gm44R7/Gb1hjNDZyQdJ/h/BOnhWXm62T9UmKVZERioJlJAWpKctHCCrYGuZJnVMg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g10jd9zcsy8wre7x4n7kuy3a2shqr7z9jwynnjgv","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","qwone",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4qdfRVrRUKBG0CBilbssdN6pGERijLbzW4gRvliYMaJ"},"signature":"Z+vYtxjoQAwcI641Ukn313QPe86fO8NRHR0qhPzEhH5dU/6sacXgpbMORYhspzRNZYqiZqrvmbAr2wsvaKwk2Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dw63q2kws5ez03mf80peqyg6da7ya54zawxt0z","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1","1","1"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsOPX0QpFcVH/iGGnT+C0Lj7gsvYwBIOKbWgy350OZIh"},"signature":"A8R1UEbKxtAL4PW0YPujxBmb4DatuPljXwuhJzp8IbkEIOaYuPFzhlfV8hCbJ/dNGrvzB3XE5G2YppCWEnQ7iQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1yp352cyfmq3k6vxelytayaqhn2v97mq38kpdlp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"lnCCZi160LFy0ewNKuYEkDfVncC1ONb5KuC1+Ct7NmsnBNy5b+yYU4v1Zmfm8bW51+qRuenyBUr9AVfbtFkvZw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1q3d7gzz8aeclaunjyn4pj833ga6vd39n7p0mys","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"eEC9rINqnZIgsbUJKfrar1AExt179YvWx1/WPAGpcXBSaveJfJyve5aMCnsBQJsnqnUubikqqdAvtnXParEX9g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1q3d7gzz8aeclaunjyn4pj833ga6vd39n7p0mys","to_address":"g1ennsur96rttxucknpgf2v6l6p9ud3w7nshnfxj","amount":"300000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8gN+aDeyTzyQhvTxUJayCKb1VsZ0Df4xfY0TkW8aeK8"},"signature":"RZ97ybTavrCuA034RugmrcOWkb6KxJn5Wc8p1EN15j8OweTVt0CRWeSUso5zpMeKM8XrlKH/hpZvZOS7sMRvHw=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1dw63q2kws5ez03mf80peqyg6da7ya54zawxt0z","to_address":"g1q3d7gzz8aeclaunjyn4pj833ga6vd39n7p0mys","amount":"10000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsOPX0QpFcVH/iGGnT+C0Lj7gsvYwBIOKbWgy350OZIh"},"signature":"vRaFl/yOLIqd5qUzCf7cIe8EXc76CAC801AaOjtJOSEImZWGFHmT6LWBkMmRwBQYGXvh+h2NPPDCPcuv7+gs0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dw63q2kws5ez03mf80peqyg6da7ya54zawxt0z","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","4455",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsOPX0QpFcVH/iGGnT+C0Lj7gsvYwBIOKbWgy350OZIh"},"signature":"QW6UIdrq8xJxOTl0yKIzSbi+eoOaNxaPQbHUQ6SggApwnfxB41nZyhBM0uOIrAc83JepbogYgsc+CumyUW84yw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dw63q2kws5ez03mf80peqyg6da7ya54zawxt0z","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","4455555",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsOPX0QpFcVH/iGGnT+C0Lj7gsvYwBIOKbWgy350OZIh"},"signature":"EbkWh6RDGINysBYqfu4BWwZQp+aEG4fh11g2hw9iYRgK22xYePLcDGTPEUctDh7Dr0WTpFFG40Ub9d+IoRq92A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dw63q2kws5ez03mf80peqyg6da7ya54zawxt0z","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","drfertgrg",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsOPX0QpFcVH/iGGnT+C0Lj7gsvYwBIOKbWgy350OZIh"},"signature":"J9FIOa5ujvZW040tZEl1hO8hyjIw3iJJIFl/Kt+Q2fQEva6/KVnAw1N4LFBipnedgglGBJJ2+Mo2y/iA0xoLPw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1dw63q2kws5ez03mf80peqyg6da7ya54zawxt0z","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1","111","111"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsOPX0QpFcVH/iGGnT+C0Lj7gsvYwBIOKbWgy350OZIh"},"signature":"pyIDPiALh0uU8opJXkocPYHHmwv1GN6tRAS7JLYBk8BDtJIDIegzvNtg3a7CcXvYqeNRnwErSH+IyTcJB1m7Gg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1q3d7gzz8aeclaunjyn4pj833ga6vd39n7p0mys","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","34356456",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8gN+aDeyTzyQhvTxUJayCKb1VsZ0Df4xfY0TkW8aeK8"},"signature":"00Z5p37QzXdxRwfJvytyW76mknDHeJ3IffzDRBOQev1uL8ZLCb/IcEzcMDQoouF6IKi+C4vOVqDKKqnjs11BkA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1e2c48vy23fzhl0tpttlpw8jr3cfgksxf34mkvp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Noy4aOPS7Pz2XSjuhc8nJ6hIJLf92txcZTz23Z6z+RY1QhUnvhsF0lP05CpCW6FVFBajSKTJeKKDfUICw+k5DQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e2c48vy23fzhl0tpttlpw8jr3cfgksxf34mkvp","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","marmeladik",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxSLEEbBzLzSWdFbbLtl3pzU7UQ3lOLX2V4wBzKnqCPg"},"signature":"iPP0rOMri7roUUz5mYyhKUfX/tWoTlioYS2BRAoribsY8CkrYBtUXhfahioiHEjagfxw7deP3Bt2TsPkTFwZlQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e2c48vy23fzhl0tpttlpw8jr3cfgksxf34mkvp","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["marmeladik"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxSLEEbBzLzSWdFbbLtl3pzU7UQ3lOLX2V4wBzKnqCPg"},"signature":"0spYhRINrh5Y3/KfxiEj8mEHtpxkVG5DQ9KVmiiXL1E7lDUQghlGneezNcsTvWU8Znj2QafcgAbsTPULcwRkmA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1j9wm5e9w4gd8ugnuwsgmapgsvdr2hnwyvdugv7","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"RNsq1TSb2UHkUjqIGxjZx8my0yFTL0M2BJfe+3fdrN11P/FZZD+m0z9sDrwoFqJp/ZUGox9vcupiPyftHFpQ9w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j9wm5e9w4gd8ugnuwsgmapgsvdr2hnwyvdugv7","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","jahand",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aoh8J5wTiGBYo0vqKJEmbFt10tE+YWEtVT/cj+8yMx8+"},"signature":"+ym2VPglUQgxkgtoYEfV2amTwBNNs8O8wM3iNifzszN8tM4u3GBhQ26kudl68OpJGFpHM+BrXH88WDGxqdnKKA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j9wm5e9w4gd8ugnuwsgmapgsvdr2hnwyvdugv7","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["jahand"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aoh8J5wTiGBYo0vqKJEmbFt10tE+YWEtVT/cj+8yMx8+"},"signature":"RnpcbpvKPNYv3njUjfHcqZg0NIqnzz8uUsPYbmmZYjUlnL/7LSiub8n6NGecuIwpxA3rk5PoCF6nwtcY+CKfrg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e2c48vy23fzhl0tpttlpw8jr3cfgksxf34mkvp","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["628","Joining the GNO.LAND project","https://twitter.com/Aladik13/status/1618954522096996353"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxSLEEbBzLzSWdFbbLtl3pzU7UQ3lOLX2V4wBzKnqCPg"},"signature":"f5oZKDH8/kCtda3XUO1JZzgzoQYrwh+oLqdK7sUGX0AXimZGPa1PLmq4Qxl2QerogA9InYsHHYQpFEZYwQi/Hg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1j9wm5e9w4gd8ugnuwsgmapgsvdr2hnwyvdugv7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["629","Meet the very promising project Gno.land","https://twitter.com/panin_wm/status/1618960667352113152"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aoh8J5wTiGBYo0vqKJEmbFt10tE+YWEtVT/cj+8yMx8+"},"signature":"Q55uSG8ppNDnG2zAS9OpBiL78C3rPT45FnTNv4Qz/942PaX+O//Fal9m+vVj2C8jwdLxGmEWP0HOhFf1vjqk+A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vf93uz809dd406utva5sl002879udekrypsehr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"qHBiMYObsMMeZo9/PbupN3dJW+Y3mLmPDgyAyN7S3gFLT0SG9NuOQQm/mMcHWVZ6WRh7/O0POf/g0QKmuiKTKA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vf93uz809dd406utva5sl002879udekrypsehr","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","lizasakura",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ard/6cXHns3U0yEBEhS37x9In9EM7PhSk50fs/JzE/Or"},"signature":"SoeSHTTN/KeMTUa1OF/milF8MgxkSiYU5jEn6MD3B01H9YId4dpSfavj8S1Omv+6FaHHoqtmL6Gc7BdKX+Paqw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vf93uz809dd406utva5sl002879udekrypsehr","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["lizasakura"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ard/6cXHns3U0yEBEhS37x9In9EM7PhSk50fs/JzE/Or"},"signature":"pFYvQjLePnnt2rS41qKelsSCDCA0VvSjLBj2ysPjf3BKRIScc5YqpR7jJ9LxZTo6CGH4q6Fs+EexxqE9BuqLpg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vf93uz809dd406utva5sl002879udekrypsehr","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["630","GnoWorking","It\\'s greate node\\!"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ard/6cXHns3U0yEBEhS37x9In9EM7PhSk50fs/JzE/Or"},"signature":"P0lyMdzCA+jWDDWN3kIzZ5UJ4l5S5wxxR9thWir4aR9KHzYWPpAe1lPVoCeYV3Hd18mZsB+3+7+Mvz/DbENgBg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xjysm2ya0nd0rqxnxulfy24y3jupk8mpa2te9y","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","Nzrpp_team_leader",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuGk63UBfiRYSCxUawdUffqAXiFaWXeANCU6p9ByhK0c"},"signature":"MbfEe9cVD31N/kpnVHpcnXDoj56vtBBhxIEVZ3a5r+soujAvO1gBXPk53G6WUjWHpFiOo4mJg3ZuezajFfub9A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xjysm2ya0nd0rqxnxulfy24y3jupk8mpa2te9y","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["Nzrpp_team_leader"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuGk63UBfiRYSCxUawdUffqAXiFaWXeANCU6p9ByhK0c"},"signature":"KeQZZrbNYQNJxgH6aOWp3342u6/tsa38XO3Hf50cBqFnHlfEqHUKw3VliB8/DXtzeL+wSQVPnjAiTDJXOCQyGA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xjysm2ya0nd0rqxnxulfy24y3jupk8mpa2te9y","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["Nzrpp_team_leader"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuGk63UBfiRYSCxUawdUffqAXiFaWXeANCU6p9ByhK0c"},"signature":"6l2nvdDtXFGjQ0ydmnXZHwN/OkjFVwQBZH+hSKrl5iZ2C0blaq7z8bhzkJRJJksACZ9QCRXhaf0yTVz7e6UG9A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xjysm2ya0nd0rqxnxulfy24y3jupk8mpa2te9y","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["Nzrpp_team_leader"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuGk63UBfiRYSCxUawdUffqAXiFaWXeANCU6p9ByhK0c"},"signature":"fGpERzdudRqR3x9Fx3fYlLTEZvhb1yNnkH1uDxRlRSsYuuQZtAmvB/DngrTFXtBiiqlyveUWAeKxqfrZSQosvw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18jdqn8mcm7zz5sr3ewhr0m3y3se9mze6pjk530","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["Nzrpp_team_leader"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An8CxksvX3qOPccUbYLbmwuw/k8BC/E6HC3sLMcj/j+w"},"signature":"sxlZp9ld6TfC+WIr5/lB/vTQsA0bhJx9fxp9aDdHfu9nCQ4agTgd66Mk8YCk/NpYwwEPGYJ84dbzqOMGE8eFTg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18jdqn8mcm7zz5sr3ewhr0m3y3se9mze6pjk530","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["Nzrppteamleader"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An8CxksvX3qOPccUbYLbmwuw/k8BC/E6HC3sLMcj/j+w"},"signature":"N+oxR+Cc1Cd7+nD0ZprtO8K+UThl3EmQ/qPVaPJr/txUkAfH8yrndNt3G3Bpsh2G81YKoAYj3ROqlCl3w8DR6g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18jdqn8mcm7zz5sr3ewhr0m3y3se9mze6pjk530","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["nzrppteamleader"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An8CxksvX3qOPccUbYLbmwuw/k8BC/E6HC3sLMcj/j+w"},"signature":"2Z73stN/KDAmQyAy/8gE9HHN2gM+iZkpUsnvH0JTcMZdecpuKwIZQOUU5HDc3srNuWFALrwIEhwVDDmvgZnW7Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18jdqn8mcm7zz5sr3ewhr0m3y3se9mze6pjk530","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["631","How install node Gno","https://teletype.in/@neapol_team/editor/gnoo"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An8CxksvX3qOPccUbYLbmwuw/k8BC/E6HC3sLMcj/j+w"},"signature":"raNe4q/LJskOOQJSHRAOASTuIugM+j+1irZsjJKw5dtzoQL9cAxGvmvcfzD0ZruAhzLDlhTSZ3JAsKRzjDyiPw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1wljepp8ejlw23prr2zz4n8y7lq5j92yzj67zfr","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["nazarnodesteam1"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq4Ql+j/kg4rX71qfWSBe9I8cJd+uwcgInZdaJq98Ibw"},"signature":"aztwxqy/L12LOk8BWcix42/dlMU6Oy/5BI5jY/0XImoPQxtVNOKtHBNZ8j84Hc0YGryB0ehGTjbh7xMJf3IQtg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1t43phdkyzvhzyt3jrmrgru5v3qfvp70w3xwj6h","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["nazarnodesteam3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2v52YpXkAabxSNQBOlm9Qyi/aYGYEkKWEjbnwxfAAEZ"},"signature":"OB0ElCWM3vX7pd0Ci+9ff/3mSSxzXTkqpDfyecG8S2d0tqUlCLZEZAdfHDfM20aVYPsNefTwcHYsBsp1sGlMWg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hjcltypln3pvf7hcaz0c2raejn647c6cjclcy7","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["nzrppteamate4"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzNYSyMrZlvjPMnw7dmNJwK4XesqmtHzSK9BzC9LBEZc"},"signature":"b4edN5z/5AE/8mRq8TReDvNDrHLIjObvXxcUyWo3aERrGck39u1llVtECuG04UFUEzSGEudvdwR9Luf2w27sJg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1usa7u498l29xacnrq82xkm9894k089v2fycfz4","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["nazarnodesteam4"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9Me4Y3dDt8GmqcPU2qUmtobGGEk1Dn/mSuYAku2Mol5"},"signature":"fIRDx1te0foZGKOOD+wCSyofKGUU1ITpi6J2SSNeIccChsxRkhciqUM+Ldat1skerVG6gM0q/yScDmiCrxhiHw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g16cwp4s38xpw7ug0zq3de2hx76hyxmxv5fvha5k","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["nzrppteamate3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiNTVnq1221mZ/LpBYzgDjC+IGvjNrnuQYZNefvoA0J1"},"signature":"xAyMZq571zOHROti/s7qLXCAmktzjyfmqbOnyJqJ8i8b8XGooXsF90usO5xrXWcI317Z7kKGtHG7sGV+t7qz6Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18jdqn8mcm7zz5sr3ewhr0m3y3se9mze6pjk530","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["nzrppteamate2"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An8CxksvX3qOPccUbYLbmwuw/k8BC/E6HC3sLMcj/j+w"},"signature":"AcPnvOImzCTM79RsT3emCgX0WZ3rE/sLf56/C7ynQt5uGuHO7weIInrzDYrl5Qfb3C7/DtNeNegtDTQi6g6S8w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15s220rlg6r04cucy9vy7w03fr53ad26l9fupwj","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["nzrppteamleader"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5hzAW7Tv7UUVMAlYLkCsS8EI7O0L1piIOHQAKseUJEa"},"signature":"SiZq4b/if6Wywfr/gWy0UUbW5MVwkfwdLYpMoFAN4Y9aZJ2Djv+FYOljkyLgb2hl3qOxbu3rbpbE9YqtGbymUA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15s220rlg6r04cucy9vy7w03fr53ad26l9fupwj","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["nzrppteamleader"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5hzAW7Tv7UUVMAlYLkCsS8EI7O0L1piIOHQAKseUJEa"},"signature":"xf1cWBy36iO41iQZGmfk4qTMPK7D84/OyTUGAE/oQX9unK2u696SU/97u4O0HRI01FmRa2uF9tOsXnoBevtUSg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xxgrn6f7y6swxw0appmaxewxkm75d8dq58fdd8","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["nazarnodesteam2"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApjCB9MCQB0tRet2tABjsST7nBZNLixr+VyGsx26BpkR"},"signature":"xjxUTqZFFqDFNTPBKfPTVpfg0XnLKLpeyQRLxMyeiG0svFV1iOet9Icc+cJKZqm6hgAZh0bHtEbI+6x4VZuT3A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g15s220rlg6r04cucy9vy7w03fr53ad26l9fupwj","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["nzrppteamleader"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5hzAW7Tv7UUVMAlYLkCsS8EI7O0L1piIOHQAKseUJEa"},"signature":"NwynXWhySAgZuzG2IYMcMbRZE0WWWp7qPgxa9D2cPsMQvXXiDy7pZlcpQmOOg8iRqWXyT79hLX1n4VzznzZfwA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18jdqn8mcm7zz5sr3ewhr0m3y3se9mze6pjk530","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["nzrppteamate1"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An8CxksvX3qOPccUbYLbmwuw/k8BC/E6HC3sLMcj/j+w"},"signature":"F9WmNh5IuAMf2RKSSCN0wuDylDVaFbjBnjfdywSpqjxOqCeM12Dc1GxCLVT6UTHEUw+bdO1T6vKM7cM6fhJb7A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"12ugnot"}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"710Gwfze+EP+cILXCCnbeIQeRT+ERtPSyUygF+ujdLtSsWI7OELYbh77ZF3Nh6CMxIpHZlTnAPFVKjmk0fXV2g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"","pkg_path":"gno.land/r/demo/gor_hello_v1","func":"Hello","args":["Hi"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A09whvkfsR4pCSEYMMt/do4mD9Zf76Dzs9/kOirITiy0"},"signature":"tqlUM4PmlkA8n/H14ZsC3Jzbqh6VHa4laoRRkfr5jjRvoo/0meDYfW1gowqjcThQJPRujUgzDBFnTHBwjrE1jg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1p27dahlflncvy5w7s7xsr2x3cuspk70h8jpm4k","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"0pWt9E3YDOmJ8HPDGzaugHcKl8RLQX7oElIlMSVIq0l06o3ByPO4EUcJY8lcBbeQORBJonliLQeczM3Hlb4y0w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1p27dahlflncvy5w7s7xsr2x3cuspk70h8jpm4k","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","qwqwoneone",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A33oMTyCQBieQeYPUlr2B5xxtwWwfHSQ8EkzlPg2OHoB"},"signature":"roJowbjm56otOpYAUBz//3lhNYJ2FFDT6RfJ/Qx9VeMV6/DSVqsDVn5NIvTygCHbhif0EIpOxNfpy2orHJanfg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1csq06lftu75rsj56e28dhf6zf7c0smzu0dxv4j","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"XOajETSmFhic/MnK+u08w+VZzyRurPiHwjBB+aFT2OppFij6fjn/GIHus1omFGQ/mbGLatYc3UKBpX1UzfIohA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1n3v3e82kjvy6lj0kp4c2w7rvwfzprfpanwmnhd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"jLB1EbOWchPQObEYs5CJaCpt1BPaxVty6ov3nGcQ8/YPlyUBC4/Mn111TrO85dyHlRKOdzZBq7DUhHxfDxdUiQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n3v3e82kjvy6lj0kp4c2w7rvwfzprfpanwmnhd","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","jainap",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmYmWBkxyT3LXBZIgh7v7Jn6d7b7To9WAnBUQgXVsQj7"},"signature":"z7J1DwsC12u83CXL5dcSoD6o8bm4PTlZknXl1bbvw0tYxUW0F60gE0Ytwe6FTkSmvgFi3LKXIGb1UGA47PUeIw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n3v3e82kjvy6lj0kp4c2w7rvwfzprfpanwmnhd","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["jainap"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmYmWBkxyT3LXBZIgh7v7Jn6d7b7To9WAnBUQgXVsQj7"},"signature":"Lpq/OoHa/SWvVSvjRnS69edMnHI8a++FO79RcayoMHgOagQuwpOK1HyK3TsQ5GEt6QmjH+IEcp4EzJoT+taktQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n3v3e82kjvy6lj0kp4c2w7rvwfzprfpanwmnhd","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["640","Introducing a cool project Gno.land","https://twitter.com/Maria_Prigarina/status/1619325647037530112"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmYmWBkxyT3LXBZIgh7v7Jn6d7b7To9WAnBUQgXVsQj7"},"signature":"bfqp7berarLvCJaKZi/sJP/7Gaq/fQ+XpNGN8gPfDUNQJ4hrVK3pwxHx845NB4c+8QxTo86OmmRcxdtZtBb06A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gxspsaeccqy4f6ztj3w6p3pn2xyluxea5rf4ga","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"EOc9aG0zaNLhi6QJW1vB9aDtIfVfob3M2g0HGmdZ1v5Nl5kVzoRHaiPutHy+lDPNx+b5cmVHHKDdabJm/7ropw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e8fjg979chpa0a9jm57ve9uv8p8c6zw6hlta53","send":"","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","yo",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArHihMIyRAnoCN4ZTM8CqqafdSEupTX8+D8ekKB7OKH4"},"signature":"c4J+do7S32qSPEojrTsYPM/S2rv1ixMO+KwHeuWOHgFPqDZ4/eoNYejG7hGwmsqRZQ0TPm0Sex0WFY9XhyhfNg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g166c7ykkd8y6vj7xfawny9hhqty7x3qy6y47zgy","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"BLuYmbQ7B9Z79JfLDIWACP3pp78SJmsqRAklY9+SJ5oDluyJCi2nrXllSOLfW1k+FywmcJ61moylkrCc7WXhQw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e8fjg979chpa0a9jm57ve9uv8p8c6zw6hlta53","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","yo",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArHihMIyRAnoCN4ZTM8CqqafdSEupTX8+D8ekKB7OKH4"},"signature":"L4Umeh+QYa6vsxn6ba/9Y9cLMs+PciHOwuKYdni/YRQM47SJIBEOasVX5rZGqVPwkqDDFGstiy6Qu5++5kOd+g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e8fjg979chpa0a9jm57ve9uv8p8c6zw6hlta53","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","yassin",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArHihMIyRAnoCN4ZTM8CqqafdSEupTX8+D8ekKB7OKH4"},"signature":"jxODtBqMz4SxqL95p1rPlPGTTLfuzqdJ0bM2n53E7RBw69vhRFRkEBKNTUCHS8rezeE6qBvQ70o+Yy/ggd0UNg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g166c7ykkd8y6vj7xfawny9hhqty7x3qy6y47zgy","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","zenmaster",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArjC5gAYj7oeHLT/lvt1dttrWwaxYpio/a3f4m7sV27N"},"signature":"Q1p3nlrJkhLQA6v94bUIPp//hdiAzwHiyBIh0gvzqkMNplwJYRSfszfioakML9B9yWY3iAwaI8/Zi3LaVMnlbg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g166c7ykkd8y6vj7xfawny9hhqty7x3qy6y47zgy","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["zenmaster"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArjC5gAYj7oeHLT/lvt1dttrWwaxYpio/a3f4m7sV27N"},"signature":"CQv8eIDccIJd2OHnFk/9ONke8mgYqpQluGZDgbvV8YJJP51mCjJu99Bk0cCoXHP1A2DvWih3DzwJ0pWC+kmHBw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e8fjg979chpa0a9jm57ve9uv8p8c6zw6hlta53","send":"","pkg_path":"gno.land/r/demo/users","func":"GetUserByName","args":["yassin"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArHihMIyRAnoCN4ZTM8CqqafdSEupTX8+D8ekKB7OKH4"},"signature":"J47Zhu/TE6mwk8BBrJf424K5oWDqSOQFGdYd2CFIphht7df0dRiRs+3ZIlE7tupF/+hASMxWbUBWq8HA5VVSgg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e8fjg979chpa0a9jm57ve9uv8p8c6zw6hlta53","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["yo"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArHihMIyRAnoCN4ZTM8CqqafdSEupTX8+D8ekKB7OKH4"},"signature":"RYiGQg83gGl6ZOLO50HyUhBtuc924gKuS9SYJsQMKY4aCrGr4PQIfcyxpIDme8ni3DYCxbWyLRV9/ViR3lj+Hw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1e8fjg979chpa0a9jm57ve9uv8p8c6zw6hlta53","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["yo_board"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArHihMIyRAnoCN4ZTM8CqqafdSEupTX8+D8ekKB7OKH4"},"signature":"jWWjNoLsLE2ct9quGW9N8Lp/BuoyRBAEsemC148siJp1KTF8eBrsJiTYakfWC93cAOXoFI8lhI3BN5kS/RlX9Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g166c7ykkd8y6vj7xfawny9hhqty7x3qy6y47zgy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["641","My twitter account","https://twitter.com/Akilabhay"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArjC5gAYj7oeHLT/lvt1dttrWwaxYpio/a3f4m7sV27N"},"signature":"OcQQKCQ8Lj2HdrOQygeJdhTtMri+3K9SMy0sbtjjYKN7zu2xg/zbWnjTxfop7RZpzLp+vwsfxcsQbXi5Kv++7w=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ztu2402xp94qvs66hpgryayemlx3ukwrex5tfp","to_address":"g130zdun4958kpdcsmtcc7l0ughm38vvgdgjhkhv","amount":"30000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhsMo+K7l3hdMX930mv7Kr1V0WxJf2Mz9u2hpiNX49zh"},"signature":"xlGyb3QVvEuthBT7fuwIWBL6TakWTP/4HtBs22Rdb3E+C54CBfhOMs43c0UQNdTuwQ9a6JH+9lSIFdLE+mfvKQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g130zdun4958kpdcsmtcc7l0ughm38vvgdgjhkhv","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["hahehhhshshchhh"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3zNpUpb/DJAjV8VcMPsdjfPAuc9ACY7C0/Hmwra0GXf"},"signature":"qjGwlbCn49nIJiD0h6WkiOS2NqXtRLR6byuzXiDxBRZa4WBbFiaP5jZB6T6spYoLJq1rhYSsYMXoNzPeKzt+Yg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g130zdun4958kpdcsmtcc7l0ughm38vvgdgjhkhv","package":{"Name":"avl","Path":"gno.land/p/demo/avl","Files":[{"Name":"node.gno","Body":"package avl\n\n// Node\n\ntype Node struct {\n\tkey       string\n\tvalue     interface{}\n\theight    int8\n\tsize      int\n\tleftNode *Node\n\trightNode *Node\n}\n\nfunc NewNode(key string, value interface{}) *Node {\n\treturn \u0026Node{\n\t\tkey:    key,\n\t\tvalue:  value,\n\t\theight: 0,\n\t\tsize:   1,\n\t}\n}\n\nfunc (node *Node) Size() int {\n\tif node == nil {\n\t\treturn 0\n\t}\n\treturn node.size\n}\n\nfunc (node *Node) IsLeaf() bool {\n\treturn node.height == 0\n}\n\nfunc (node *Node) Key() string {\n\treturn node.key\n}\n\nfunc (node *Node) Value() interface{} {\n\treturn node.value\n}\n\nfunc (node *Node) _copy() *Node {\n\tif node.height == 0 {\n\t\tpanic(\"Why are you copying a value node?\")\n\t}\n\treturn \u0026Node{\n\t\tkey:       node.key,\n\t\theight:    node.height,\n\t\tsize:      node.size,\n\t\tleftNode:  node.leftNode,\n\t\trightNode: node.rightNode,\n\t}\n}\n\nfunc (node *Node) Has(key string) (has bool) {\n\tif node == nil {\n\t\treturn false\n\t}\n\tif node.key == key {\n\t\treturn true\n\t}\n\tif node.height == 0 {\n\t\treturn false\n\t} else {\n\t\tif key \u003c node.key {\n\t\t\treturn node.getLeftNode().Has(key)\n\t\t} else {\n\t\t\treturn node.getRightNode().Has(key)\n\t\t}\n\t}\n}\n\nfunc (node *Node) Get(key string) (index int, value interface{}, exists bool) {\n\tif node == nil {\n\t\treturn 0, nil, false\n\t}\n\tif node.height == 0 {\n\t\tif node.key == key {\n\t\t\treturn 0, node.value, true\n\t\t} else if node.key \u003c key {\n\t\t\treturn 1, nil, false\n\t\t} else {\n\t\t\treturn 0, nil, false\n\t\t}\n\t} else {\n\t\tif key \u003c node.key {\n\t\t\treturn node.getLeftNode().Get(key)\n\t\t} else {\n\t\t\trightNode := node.getRightNode()\n\t\t\tindex, value, exists = rightNode.Get(key)\n\t\t\tindex += node.size - rightNode.size\n\t\t\treturn index, value, exists\n\t\t}\n\t}\n}\n\nfunc (node *Node) GetByIndex(index int) (key string, value interface{}) {\n\tif node.height == 0 {\n\t\tif index == 0 {\n\t\t\treturn node.key, node.value\n\t\t} else {\n\t\t\tpanic(\"GetByIndex asked for invalid index\")\n\t\t\treturn \"\", nil\n\t\t}\n\t} else {\n\t\t// TODO: could improve this by storing the sizes\n\t\tleftNode := node.getLeftNode()\n\t\tif index \u003c leftNode.size {\n\t\t\treturn leftNode.GetByIndex(index)\n\t\t} else {\n\t\t\treturn node.getRightNode().GetByIndex(index - leftNode.size)\n\t\t}\n\t}\n}\n\n// XXX consider a better way to do this... perhaps split Node from Node.\nfunc (node *Node) Set(key string, value interface{}) (newSelf *Node, updated bool) {\n\tif node == nil {\n\t\treturn NewNode(key, value), false\n\t}\n\tif node.height == 0 {\n\t\tif key \u003c node.key {\n\t\t\treturn \u0026Node{\n\t\t\t\tkey:       node.key,\n\t\t\t\theight:    1,\n\t\t\t\tsize:      2,\n\t\t\t\tleftNode:  NewNode(key, value),\n\t\t\t\trightNode: node,\n\t\t\t}, false\n\t\t} else if key == node.key {\n\t\t\treturn NewNode(key, value), true\n\t\t} else {\n\t\t\treturn \u0026Node{\n\t\t\t\tkey:       key,\n\t\t\t\theight:    1,\n\t\t\t\tsize:      2,\n\t\t\t\tleftNode:  node,\n\t\t\t\trightNode: NewNode(key, value),\n\t\t\t}, false\n\t\t}\n\t} else {\n\t\tnode = node._copy()\n\t\tif key \u003c node.key {\n\t\t\tnode.leftNode, updated = node.getLeftNode().Set(key, value)\n\t\t} else {\n\t\t\tnode.rightNode, updated = node.getRightNode().Set(key, value)\n\t\t}\n\t\tif updated {\n\t\t\treturn node, updated\n\t\t} else {\n\t\t\tnode.calcHeightAndSize()\n\t\t\treturn node.balance(), updated\n\t\t}\n\t}\n}\n\n// newNode: The new node to replace node after remove.\n// newKey: new leftmost leaf key for node after successfully removing 'key' if changed.\n// value: removed value.\nfunc (node *Node) Remove(key string) (\n\tnewNode *Node, newKey string, value interface{}, removed bool,\n) {\n\tif node == nil {\n\t\treturn nil, \"\", nil, false\n\t}\n\tif node.height == 0 {\n\t\tif key == node.key {\n\t\t\treturn nil, \"\", node.value, true\n\t\t} else {\n\t\t\treturn node, \"\", nil, false\n\t\t}\n\t} else {\n\t\tif key \u003c node.key {\n\t\t\tvar newLeftNode *Node\n\t\t\tnewLeftNode, newKey, value, removed = node.getLeftNode().Remove(key)\n\t\t\tif !removed {\n\t\t\t\treturn node, \"\", value, false\n\t\t\t} else if newLeftNode == nil { // left node held value, was removed\n\t\t\t\treturn node.rightNode, node.key, value, true\n\t\t\t}\n\t\t\tnode = node._copy()\n\t\t\tnode.leftNode = newLeftNode\n\t\t\tnode.calcHeightAndSize()\n\t\t\tnode = node.balance()\n\t\t\treturn node, newKey, value, true\n\t\t} else {\n\t\t\tvar newRightNode *Node\n\t\t\tnewRightNode, newKey, value, removed = node.getRightNode().Remove(key)\n\t\t\tif !removed {\n\t\t\t\treturn node, \"\", value, false\n\t\t\t} else if newRightNode == nil { // right node held value, was removed\n\t\t\t\treturn node.leftNode, \"\", value, true\n\t\t\t}\n\t\t\tnode = node._copy()\n\t\t\tnode.rightNode = newRightNode\n\t\t\tif newKey != \"\" {\n\t\t\t\tnode.key = newKey\n\t\t\t}\n\t\t\tnode.calcHeightAndSize()\n\t\t\tnode = node.balance()\n\t\t\treturn node, \"\", value, true\n\t\t}\n\t}\n}\n\nfunc (node *Node) getLeftNode() *Node {\n\treturn node.leftNode\n}\n\nfunc (node *Node) getRightNode() *Node {\n\treturn node.rightNode\n}\n\n// NOTE: overwrites node\n// TODO: optimize balance \u0026 rotate\nfunc (node *Node) rotateRight() *Node {\n\tnode = node._copy()\n\tl := node.getLeftNode()\n\t_l := l._copy()\n\n\t_lrCached := _l.rightNode\n\t_l.rightNode = node\n\tnode.leftNode = _lrCached\n\n\tnode.calcHeightAndSize()\n\t_l.calcHeightAndSize()\n\n\treturn _l\n}\n\n// NOTE: overwrites node\n// TODO: optimize balance \u0026 rotate\nfunc (node *Node) rotateLeft() *Node {\n\tnode = node._copy()\n\tr := node.getRightNode()\n\t_r := r._copy()\n\n\t_rlCached := _r.leftNode\n\t_r.leftNode = node\n\tnode.rightNode = _rlCached\n\n\tnode.calcHeightAndSize()\n\t_r.calcHeightAndSize()\n\n\treturn _r\n}\n\n// NOTE: mutates height and size\nfunc (node *Node) calcHeightAndSize() {\n\tnode.height = maxInt8(node.getLeftNode().height, node.getRightNode().height) + 1\n\tnode.size = node.getLeftNode().size + node.getRightNode().size\n}\n\nfunc (node *Node) calcBalance() int {\n\treturn int(node.getLeftNode().height) - int(node.getRightNode().height)\n}\n\n// NOTE: assumes that node can be modified\n// TODO: optimize balance \u0026 rotate\nfunc (node *Node) balance() (newSelf *Node) {\n\tbalance := node.calcBalance()\n\tif balance \u003e 1 {\n\t\tif node.getLeftNode().calcBalance() \u003e= 0 {\n\t\t\t// Left Left Case\n\t\t\treturn node.rotateRight()\n\t\t} else {\n\t\t\t// Left Right Case\n\t\t\t// node = node._copy()\n\t\t\tleft := node.getLeftNode()\n\t\t\tnode.leftNode = left.rotateLeft()\n\t\t\t// node.calcHeightAndSize()\n\t\t\treturn node.rotateRight()\n\t\t}\n\t}\n\tif balance \u003c -1 {\n\t\tif node.getRightNode().calcBalance() \u003c= 0 {\n\t\t\t// Right Right Case\n\t\t\treturn node.rotateLeft()\n\t\t} else {\n\t\t\t// Right Left Case\n\t\t\t// node = node._copy()\n\t\t\tright := node.getRightNode()\n\t\t\tnode.rightNode = right.rotateRight()\n\t\t\t// node.calcHeightAndSize()\n\t\t\treturn node.rotateLeft()\n\t\t}\n\t}\n\t// Nothing changed\n\treturn node\n}\n\n// Shortcut for TraverseInRange.\nfunc (node *Node) Iterate(start, end string, cb func(*Node) bool) bool {\n\treturn node.TraverseInRange(start, end, true, true, cb)\n}\n\n// Shortcut for TraverseInRange.\nfunc (node *Node) IterateReverse(start, end string, cb func(*Node) bool) bool {\n\treturn node.TraverseInRange(start, end, false, true, cb)\n}\n\n// TraverseInRange traverses all nodes, including inner nodes.\n// Start is inclusive and end is exclusive when ascending,\n// Start and end are inclusive when descending.\n// Empty start and empty end denote no start and no end.\n// If leavesOnly is true, only visit leaf nodes.\n// NOTE: To simulate an exclusive reverse traversal,\n// just append 0x00 to start.\nfunc (node *Node) TraverseInRange(start, end string, ascending bool, leavesOnly bool, cb func(*Node) bool) bool {\n\tif node == nil {\n\t\treturn false\n\t}\n\tafterStart := (start == \"\" || start \u003c node.key)\n\tstartOrAfter := (start == \"\" || start \u003c= node.key)\n\tbeforeEnd := false\n\tif ascending {\n\t\tbeforeEnd = (end == \"\" || node.key \u003c end)\n\t} else {\n\t\tbeforeEnd = (end == \"\" || node.key \u003c= end)\n\t}\n\n\t// Run callback per inner/leaf node.\n\tstop := false\n\tif (!node.IsLeaf() \u0026\u0026 !leavesOnly) ||\n\t\t(node.IsLeaf() \u0026\u0026 startOrAfter \u0026\u0026 beforeEnd) {\n\t\tstop = cb(node)\n\t\tif stop {\n\t\t\treturn stop\n\t\t}\n\t}\n\tif node.IsLeaf() {\n\t\treturn stop\n\t}\n\n\tif ascending {\n\t\t// check lower nodes, then higher\n\t\tif afterStart {\n\t\t\tstop = node.getLeftNode().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t\tif stop {\n\t\t\treturn stop\n\t\t}\n\t\tif beforeEnd {\n\t\t\tstop = node.getRightNode().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t} else {\n\t\t// check the higher nodes first\n\t\tif beforeEnd {\n\t\t\tstop = node.getRightNode().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t\tif stop {\n\t\t\treturn stop\n\t\t}\n\t\tif afterStart {\n\t\t\tstop = node.getLeftNode().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t}\n\n\treturn stop\n}\n\n// Only used in testing...\nfunc (node *Node) lmd() *Node {\n\tif node.height == 0 {\n\t\treturn node\n\t}\n\treturn node.getLeftNode().lmd()\n}\n\n// Only used in testing...\nfunc (node *Node) rmd() *Node {\n\tif node.height == 0 {\n\t\treturn node\n\t}\n\treturn node.getRightNode().rmd()\n}\n\nfunc maxInt8(a, b int8) int8 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n"},{"Name":"tree.gno","Body":"package avl\n\n// Tree\n\n// The zero struct can be used as an empty tree.\ntype Tree struct {\n\tnode *Node\n}\n\nfunc NewTree() *Tree {\n\treturn \u0026Tree{\n\t\tnode: nil,\n\t}\n}\n\nfunc (tree *Tree) Size() int {\n\treturn tree.node.Size()\n}\n\nfunc (tree *Tree) Has(key string) (has bool) {\n\treturn tree.node.Has(key)\n}\n\nfunc (tree *Tree) Get(key string) (value interface{}, exists bool) {\n\t_, value, exists = tree.node.Get(key)\n\treturn\n}\n\nfunc (tree *Tree) GetByIndex(index int) (key string, value interface{}) {\n\treturn tree.node.GetByIndex(index)\n}\n\nfunc (tree *Tree) Set(key string, value interface{}) (updated bool) {\n\tnewnode, updated := tree.node.Set(key, value)\n\ttree.node = newnode\n\treturn updated\n}\n\nfunc (tree *Tree) Remove(key string) (value interface{}, removed bool) {\n\tnewnode, _, value, removed := tree.node.Remove(key)\n\ttree.node = newnode\n\treturn value, removed\n}\n\n// Shortcut for TraverseInRange.\nfunc (tree *Tree) Iterate(start, end string, cb func(*Node) bool) bool {\n\treturn tree.node.TraverseInRange(start, end, true, true, cb)\n}\n\n// Shortcut for TraverseInRange.\nfunc (tree *Tree) IterateReverse(start, end string, cb func(*Node) bool) bool {\n\treturn tree.node.TraverseInRange(start, end, false, true, cb)\n}\n"},{"Name":"z_0_filetest.gno","Body":"// PKGPATH: gno.land/r/test\npackage test\n\nimport (\n\t\"gno.land/p/demo/avl\"\n)\n\nvar node *avl.Node\n\nfunc init() {\n\tnode = avl.NewNode(\"key0\", \"value0\")\n\t// node, _ = node.Set(\"key0\", \"value0\")\n}\n\nfunc main() {\n\tvar updated bool\n\tnode, updated = node.Set(\"key1\", \"value1\")\n\t// println(node, updated)\n\tprintln(updated, node.Size())\n}\n\n// Output:\n// false 2\n\n// Realm:\n// switchrealm[\"gno.land/r/test\"]\n// u[a8ada09dee16d791fd406d629fe29bb0ed084a30:4]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key0\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"value0\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:4\",\n//         \"ModTime\": \"5\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:6]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key1\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"value1\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:6\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:5]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key1\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"091729e38bda8724bce4c314f9624b91af679459\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:4\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"0b5493aa4ea42087780bdfcaebab2c3eec351c15\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:6\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// u[a8ada09dee16d791fd406d629fe29bb0ed084a30:2]={\n//     \"Blank\": {},\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"IsEscaped\": true,\n//         \"ModTime\": \"4\",\n//         \"RefCount\": \"2\"\n//     },\n//     \"Parent\": null,\n//     \"Source\": {\n//         \"@type\": \"/gno.RefNode\",\n//         \"BlockNode\": null,\n//         \"Location\": {\n//             \"File\": \"\",\n//             \"Line\": \"0\",\n//             \"Nonce\": \"0\",\n//             \"PkgPath\": \"gno.land/r/test\"\n//         }\n//     },\n//     \"Values\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"init.0\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"10\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"main\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"15\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"6c9948281d4c60b2d95233b76388d54d8b1a2fad\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\"\n//                     }\n//                 }\n//             }\n//         }\n//     ]\n// }\n"},{"Name":"z_1_filetest.gno","Body":"// PKGPATH: gno.land/r/test\npackage test\n\nimport (\n\t\"gno.land/p/demo/avl\"\n)\n\nvar node *avl.Node\n\nfunc init() {\n\tnode = avl.NewNode(\"key0\", \"value0\")\n\tnode, _ = node.Set(\"key1\", \"value1\")\n}\n\nfunc main() {\n\tvar updated bool\n\tnode, updated = node.Set(\"key2\", \"value2\")\n\t// println(node, updated)\n\tprintln(updated, node.Size())\n}\n\n// Output:\n// false 3\n\n// Realm:\n// switchrealm[\"gno.land/r/test\"]\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:9]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key2\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"value2\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:9\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:8]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key2\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"7a8a63e17a567d7b0891ac89d5cd90072a73787d\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:6\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"ab5a297f4eb033d88bdf1677f4dc151ccb9fde9f\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:9\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:7\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:7]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key1\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AwAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"627e8e517e7ae5db0f3b753e2a32b607989198b6\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"fe8afd501233fb95375016199f0443b3c6ab1fbc\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:7\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// u[a8ada09dee16d791fd406d629fe29bb0ed084a30:2]={\n//     \"Blank\": {},\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"IsEscaped\": true,\n//         \"ModTime\": \"6\",\n//         \"RefCount\": \"2\"\n//     },\n//     \"Parent\": null,\n//     \"Source\": {\n//         \"@type\": \"/gno.RefNode\",\n//         \"BlockNode\": null,\n//         \"Location\": {\n//             \"File\": \"\",\n//             \"Line\": \"0\",\n//             \"Nonce\": \"0\",\n//             \"PkgPath\": \"gno.land/r/test\"\n//         }\n//     },\n//     \"Values\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"init.0\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"10\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"main\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"15\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"c5eefc40ed065461b4a920c1349ed734ffdead8f\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:7\"\n//                     }\n//                 }\n//             }\n//         }\n//     ]\n// }\n// d[a8ada09dee16d791fd406d629fe29bb0ed084a30:4]\n"},{"Name":"z_2_filetest.gno","Body":"// PKGPATH: gno.land/r/test\npackage test\n\nimport (\n\t\"gno.land/p/demo/avl\"\n)\n\nvar tree avl.Tree\n\nfunc init() {\n\ttree.Set(\"key0\", \"value0\")\n\ttree.Set(\"key1\", \"value1\")\n}\n\nfunc main() {\n\tvar updated bool\n\tupdated = tree.Set(\"key2\", \"value2\")\n\tprintln(updated, tree.Size())\n}\n\n// Output:\n// false 3\n\n// Realm:\n// switchrealm[\"gno.land/r/test\"]\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:10]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key2\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"value2\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:10\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:9\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:9]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key2\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"213baed7e3326f2403b5f30e5d4397510ba4f37d\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:7\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"be751422ef4c2bc068a456f9467d2daca27db8ca\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:10\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:9\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:8]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key1\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AwAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"af4d0b158681d85eb2a7f6888b39a05ca7b790ee\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:6\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"ef853d70e334fd2c807d6c2c751da1fcd1e5ad58\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:9\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:4\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// u[a8ada09dee16d791fd406d629fe29bb0ed084a30:4]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"3a5af0895c2c45b8a5e894644bcd689f1fdc4785\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:4\",\n//         \"ModTime\": \"7\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// d[a8ada09dee16d791fd406d629fe29bb0ed084a30:5]\n"}]},"deposit":"100000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3zNpUpb/DJAjV8VcMPsdjfPAuc9ACY7C0/Hmwra0GXf"},"signature":"410tK2wSluXPfhWL91LCDMRgYpGKoC288eA6a3kbMvUby91TWgCbl7M0ZZ8svLcdgUbhfsnBJnnTh9Q9R5F6TQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g130zdun4958kpdcsmtcc7l0ughm38vvgdgjhkhv","package":{"Name":"avl","Path":"gno.land/p/demo/avl","Files":[{"Name":"node.gno","Body":"package avl\n\n// Node\n\ntype Node struct {\n\tkey       string\n\tvalue     interface{}\n\theight    int8\n\tsize      int\n\tleftNode *Node\n\trightNode *Node\n}\n\nfunc NewNode(key string, value interface{}) *Node {\n\treturn \u0026Node{\n\t\tkey:    key,\n\t\tvalue:  value,\n\t\theight: 0,\n\t\tsize:   1,\n\t}\n}\n\nfunc (node *Node) Size() int {\n\tif node == nil {\n\t\treturn 0\n\t}\n\treturn node.size\n}\n\nfunc (node *Node) IsLeaf() bool {\n\treturn node.height == 0\n}\n\nfunc (node *Node) Key() string {\n\treturn node.key\n}\n\nfunc (node *Node) Value() interface{} {\n\treturn node.value\n}\n\nfunc (node *Node) _copy() *Node {\n\tif node.height == 0 {\n\t\tpanic(\"Why are you copying a value node?\")\n\t}\n\treturn \u0026Node{\n\t\tkey:       node.key,\n\t\theight:    node.height,\n\t\tsize:      node.size,\n\t\tleftNode:  node.leftNode,\n\t\trightNode: node.rightNode,\n\t}\n}\n\nfunc (node *Node) Has(key string) (has bool) {\n\tif node == nil {\n\t\treturn false\n\t}\n\tif node.key == key {\n\t\treturn true\n\t}\n\tif node.height == 0 {\n\t\treturn false\n\t} else {\n\t\tif key \u003c node.key {\n\t\t\treturn node.getLeftNode().Has(key)\n\t\t} else {\n\t\t\treturn node.getRightNode().Has(key)\n\t\t}\n\t}\n}\n\nfunc (node *Node) Get(key string) (index int, value interface{}, exists bool) {\n\tif node == nil {\n\t\treturn 0, nil, false\n\t}\n\tif node.height == 0 {\n\t\tif node.key == key {\n\t\t\treturn 0, node.value, true\n\t\t} else if node.key \u003c key {\n\t\t\treturn 1, nil, false\n\t\t} else {\n\t\t\treturn 0, nil, false\n\t\t}\n\t} else {\n\t\tif key \u003c node.key {\n\t\t\treturn node.getLeftNode().Get(key)\n\t\t} else {\n\t\t\trightNode := node.getRightNode()\n\t\t\tindex, value, exists = rightNode.Get(key)\n\t\t\tindex += node.size - rightNode.size\n\t\t\treturn index, value, exists\n\t\t}\n\t}\n}\n\nfunc (node *Node) GetByIndex(index int) (key string, value interface{}) {\n\tif node.height == 0 {\n\t\tif index == 0 {\n\t\t\treturn node.key, node.value\n\t\t} else {\n\t\t\tpanic(\"GetByIndex asked for invalid index\")\n\t\t\treturn \"\", nil\n\t\t}\n\t} else {\n\t\t// TODO: could improve this by storing the sizes\n\t\tleftNode := node.getLeftNode()\n\t\tif index \u003c leftNode.size {\n\t\t\treturn leftNode.GetByIndex(index)\n\t\t} else {\n\t\t\treturn node.getRightNode().GetByIndex(index - leftNode.size)\n\t\t}\n\t}\n}\n\n// XXX consider a better way to do this... perhaps split Node from Node.\nfunc (node *Node) Set(key string, value interface{}) (newSelf *Node, updated bool) {\n\tif node == nil {\n\t\treturn NewNode(key, value), false\n\t}\n\tif node.height == 0 {\n\t\tif key \u003c node.key {\n\t\t\treturn \u0026Node{\n\t\t\t\tkey:       node.key,\n\t\t\t\theight:    1,\n\t\t\t\tsize:      2,\n\t\t\t\tleftNode:  NewNode(key, value),\n\t\t\t\trightNode: node,\n\t\t\t}, false\n\t\t} else if key == node.key {\n\t\t\treturn NewNode(key, value), true\n\t\t} else {\n\t\t\treturn \u0026Node{\n\t\t\t\tkey:       key,\n\t\t\t\theight:    1,\n\t\t\t\tsize:      2,\n\t\t\t\tleftNode:  node,\n\t\t\t\trightNode: NewNode(key, value),\n\t\t\t}, false\n\t\t}\n\t} else {\n\t\tnode = node._copy()\n\t\tif key \u003c node.key {\n\t\t\tnode.leftNode, updated = node.getLeftNode().Set(key, value)\n\t\t} else {\n\t\t\tnode.rightNode, updated = node.getRightNode().Set(key, value)\n\t\t}\n\t\tif updated {\n\t\t\treturn node, updated\n\t\t} else {\n\t\t\tnode.calcHeightAndSize()\n\t\t\treturn node.balance(), updated\n\t\t}\n\t}\n}\n\n// newNode: The new node to replace node after remove.\n// newKey: new leftmost leaf key for node after successfully removing 'key' if changed.\n// value: removed value.\nfunc (node *Node) Remove(key string) (\n\tnewNode *Node, newKey string, value interface{}, removed bool,\n) {\n\tif node == nil {\n\t\treturn nil, \"\", nil, false\n\t}\n\tif node.height == 0 {\n\t\tif key == node.key {\n\t\t\treturn nil, \"\", node.value, true\n\t\t} else {\n\t\t\treturn node, \"\", nil, false\n\t\t}\n\t} else {\n\t\tif key \u003c node.key {\n\t\t\tvar newLeftNode *Node\n\t\t\tnewLeftNode, newKey, value, removed = node.getLeftNode().Remove(key)\n\t\t\tif !removed {\n\t\t\t\treturn node, \"\", value, false\n\t\t\t} else if newLeftNode == nil { // left node held value, was removed\n\t\t\t\treturn node.rightNode, node.key, value, true\n\t\t\t}\n\t\t\tnode = node._copy()\n\t\t\tnode.leftNode = newLeftNode\n\t\t\tnode.calcHeightAndSize()\n\t\t\tnode = node.balance()\n\t\t\treturn node, newKey, value, true\n\t\t} else {\n\t\t\tvar newRightNode *Node\n\t\t\tnewRightNode, newKey, value, removed = node.getRightNode().Remove(key)\n\t\t\tif !removed {\n\t\t\t\treturn node, \"\", value, false\n\t\t\t} else if newRightNode == nil { // right node held value, was removed\n\t\t\t\treturn node.leftNode, \"\", value, true\n\t\t\t}\n\t\t\tnode = node._copy()\n\t\t\tnode.rightNode = newRightNode\n\t\t\tif newKey != \"\" {\n\t\t\t\tnode.key = newKey\n\t\t\t}\n\t\t\tnode.calcHeightAndSize()\n\t\t\tnode = node.balance()\n\t\t\treturn node, \"\", value, true\n\t\t}\n\t}\n}\n\nfunc (node *Node) getLeftNode() *Node {\n\treturn node.leftNode\n}\n\nfunc (node *Node) getRightNode() *Node {\n\treturn node.rightNode\n}\n\n// NOTE: overwrites node\n// TODO: optimize balance \u0026 rotate\nfunc (node *Node) rotateRight() *Node {\n\tnode = node._copy()\n\tl := node.getLeftNode()\n\t_l := l._copy()\n\n\t_lrCached := _l.rightNode\n\t_l.rightNode = node\n\tnode.leftNode = _lrCached\n\n\tnode.calcHeightAndSize()\n\t_l.calcHeightAndSize()\n\n\treturn _l\n}\n\n// NOTE: overwrites node\n// TODO: optimize balance \u0026 rotate\nfunc (node *Node) rotateLeft() *Node {\n\tnode = node._copy()\n\tr := node.getRightNode()\n\t_r := r._copy()\n\n\t_rlCached := _r.leftNode\n\t_r.leftNode = node\n\tnode.rightNode = _rlCached\n\n\tnode.calcHeightAndSize()\n\t_r.calcHeightAndSize()\n\n\treturn _r\n}\n\n// NOTE: mutates height and size\nfunc (node *Node) calcHeightAndSize() {\n\tnode.height = maxInt8(node.getLeftNode().height, node.getRightNode().height) + 1\n\tnode.size = node.getLeftNode().size + node.getRightNode().size\n}\n\nfunc (node *Node) calcBalance() int {\n\treturn int(node.getLeftNode().height) - int(node.getRightNode().height)\n}\n\n// NOTE: assumes that node can be modified\n// TODO: optimize balance \u0026 rotate\nfunc (node *Node) balance() (newSelf *Node) {\n\tbalance := node.calcBalance()\n\tif balance \u003e 1 {\n\t\tif node.getLeftNode().calcBalance() \u003e= 0 {\n\t\t\t// Left Left Case\n\t\t\treturn node.rotateRight()\n\t\t} else {\n\t\t\t// Left Right Case\n\t\t\t// node = node._copy()\n\t\t\tleft := node.getLeftNode()\n\t\t\tnode.leftNode = left.rotateLeft()\n\t\t\t// node.calcHeightAndSize()\n\t\t\treturn node.rotateRight()\n\t\t}\n\t}\n\tif balance \u003c -1 {\n\t\tif node.getRightNode().calcBalance() \u003c= 0 {\n\t\t\t// Right Right Case\n\t\t\treturn node.rotateLeft()\n\t\t} else {\n\t\t\t// Right Left Case\n\t\t\t// node = node._copy()\n\t\t\tright := node.getRightNode()\n\t\t\tnode.rightNode = right.rotateRight()\n\t\t\t// node.calcHeightAndSize()\n\t\t\treturn node.rotateLeft()\n\t\t}\n\t}\n\t// Nothing changed\n\treturn node\n}\n\n// Shortcut for TraverseInRange.\nfunc (node *Node) Iterate(start, end string, cb func(*Node) bool) bool {\n\treturn node.TraverseInRange(start, end, true, true, cb)\n}\n\n// Shortcut for TraverseInRange.\nfunc (node *Node) IterateReverse(start, end string, cb func(*Node) bool) bool {\n\treturn node.TraverseInRange(start, end, false, true, cb)\n}\n\n// TraverseInRange traverses all nodes, including inner nodes.\n// Start is inclusive and end is exclusive when ascending,\n// Start and end are inclusive when descending.\n// Empty start and empty end denote no start and no end.\n// If leavesOnly is true, only visit leaf nodes.\n// NOTE: To simulate an exclusive reverse traversal,\n// just append 0x00 to start.\nfunc (node *Node) TraverseInRange(start, end string, ascending bool, leavesOnly bool, cb func(*Node) bool) bool {\n\tif node == nil {\n\t\treturn false\n\t}\n\tafterStart := (start == \"\" || start \u003c node.key)\n\tstartOrAfter := (start == \"\" || start \u003c= node.key)\n\tbeforeEnd := false\n\tif ascending {\n\t\tbeforeEnd = (end == \"\" || node.key \u003c end)\n\t} else {\n\t\tbeforeEnd = (end == \"\" || node.key \u003c= end)\n\t}\n\n\t// Run callback per inner/leaf node.\n\tstop := false\n\tif (!node.IsLeaf() \u0026\u0026 !leavesOnly) ||\n\t\t(node.IsLeaf() \u0026\u0026 startOrAfter \u0026\u0026 beforeEnd) {\n\t\tstop = cb(node)\n\t\tif stop {\n\t\t\treturn stop\n\t\t}\n\t}\n\tif node.IsLeaf() {\n\t\treturn stop\n\t}\n\n\tif ascending {\n\t\t// check lower nodes, then higher\n\t\tif afterStart {\n\t\t\tstop = node.getLeftNode().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t\tif stop {\n\t\t\treturn stop\n\t\t}\n\t\tif beforeEnd {\n\t\t\tstop = node.getRightNode().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t} else {\n\t\t// check the higher nodes first\n\t\tif beforeEnd {\n\t\t\tstop = node.getRightNode().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t\tif stop {\n\t\t\treturn stop\n\t\t}\n\t\tif afterStart {\n\t\t\tstop = node.getLeftNode().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t}\n\n\treturn stop\n}\n\n// Only used in testing...\nfunc (node *Node) lmd() *Node {\n\tif node.height == 0 {\n\t\treturn node\n\t}\n\treturn node.getLeftNode().lmd()\n}\n\n// Only used in testing...\nfunc (node *Node) rmd() *Node {\n\tif node.height == 0 {\n\t\treturn node\n\t}\n\treturn node.getRightNode().rmd()\n}\n\nfunc maxInt8(a, b int8) int8 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n"},{"Name":"tree.gno","Body":"package avl\n\n// Tree\n\n// The zero struct can be used as an empty tree.\ntype Tree struct {\n\tnode *Node\n}\n\nfunc NewTree() *Tree {\n\treturn \u0026Tree{\n\t\tnode: nil,\n\t}\n}\n\nfunc Ne() {\n\treturn tree.node.Size()\n}\n\nfunc (tree *Tree) Size() int {\n\treturn tree.node.Size()\n}\n\nfunc (tree *Tree) Has(key string) (has bool) {\n\treturn tree.node.Has(key)\n}\n\nfunc (tree *Tree) Get(key string) (value interface{}, exists bool) {\n\t_, value, exists = tree.node.Get(key)\n\treturn\n}\n\nfunc (tree *Tree) GetByIndex(index int) (key string, value interface{}) {\n\treturn tree.node.GetByIndex(index)\n}\n\nfunc (tree *Tree) Set(key string, value interface{}) (updated bool) {\n\tnewnode, updated := tree.node.Set(key, value)\n\ttree.node = newnode\n\treturn updated\n}\n\nfunc (tree *Tree) Remove(key string) (value interface{}, removed bool) {\n\tnewnode, _, value, removed := tree.node.Remove(key)\n\ttree.node = newnode\n\treturn value, removed\n}\n\n// Shortcut for TraverseInRange.\nfunc (tree *Tree) Iterate(start, end string, cb func(*Node) bool) bool {\n\treturn tree.node.TraverseInRange(start, end, true, true, cb)\n}\n\n// Shortcut for TraverseInRange.\nfunc (tree *Tree) IterateReverse(start, end string, cb func(*Node) bool) bool {\n\treturn tree.node.TraverseInRange(start, end, false, true, cb)\n}\n"},{"Name":"z_0_filetest.gno","Body":"// PKGPATH: gno.land/r/test\npackage test\n\nimport (\n\t\"gno.land/p/demo/avl\"\n)\n\nvar node *avl.Node\n\nfunc init() {\n\tnode = avl.NewNode(\"key0\", \"value0\")\n\t// node, _ = node.Set(\"key0\", \"value0\")\n}\n\nfunc main() {\n\tvar updated bool\n\tnode, updated = node.Set(\"key1\", \"value1\")\n\t// println(node, updated)\n\tprintln(updated, node.Size())\n}\n\n// Output:\n// false 2\n\n// Realm:\n// switchrealm[\"gno.land/r/test\"]\n// u[a8ada09dee16d791fd406d629fe29bb0ed084a30:4]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key0\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"value0\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:4\",\n//         \"ModTime\": \"5\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:6]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key1\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"value1\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:6\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:5]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key1\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"091729e38bda8724bce4c314f9624b91af679459\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:4\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"0b5493aa4ea42087780bdfcaebab2c3eec351c15\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:6\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// u[a8ada09dee16d791fd406d629fe29bb0ed084a30:2]={\n//     \"Blank\": {},\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"IsEscaped\": true,\n//         \"ModTime\": \"4\",\n//         \"RefCount\": \"2\"\n//     },\n//     \"Parent\": null,\n//     \"Source\": {\n//         \"@type\": \"/gno.RefNode\",\n//         \"BlockNode\": null,\n//         \"Location\": {\n//             \"File\": \"\",\n//             \"Line\": \"0\",\n//             \"Nonce\": \"0\",\n//             \"PkgPath\": \"gno.land/r/test\"\n//         }\n//     },\n//     \"Values\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"init.0\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"10\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"main\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"15\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"6c9948281d4c60b2d95233b76388d54d8b1a2fad\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\"\n//                     }\n//                 }\n//             }\n//         }\n//     ]\n// }\n"},{"Name":"z_1_filetest.gno","Body":"// PKGPATH: gno.land/r/test\npackage test\n\nimport (\n\t\"gno.land/p/demo/avl\"\n)\n\nvar node *avl.Node\n\nfunc init() {\n\tnode = avl.NewNode(\"key0\", \"value0\")\n\tnode, _ = node.Set(\"key1\", \"value1\")\n}\n\nfunc main() {\n\tvar updated bool\n\tnode, updated = node.Set(\"key2\", \"value2\")\n\t// println(node, updated)\n\tprintln(updated, node.Size())\n}\n\n// Output:\n// false 3\n\n// Realm:\n// switchrealm[\"gno.land/r/test\"]\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:9]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key2\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"value2\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:9\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:8]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key2\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"7a8a63e17a567d7b0891ac89d5cd90072a73787d\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:6\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"ab5a297f4eb033d88bdf1677f4dc151ccb9fde9f\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:9\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:7\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:7]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key1\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AwAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"627e8e517e7ae5db0f3b753e2a32b607989198b6\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"fe8afd501233fb95375016199f0443b3c6ab1fbc\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:7\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// u[a8ada09dee16d791fd406d629fe29bb0ed084a30:2]={\n//     \"Blank\": {},\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"IsEscaped\": true,\n//         \"ModTime\": \"6\",\n//         \"RefCount\": \"2\"\n//     },\n//     \"Parent\": null,\n//     \"Source\": {\n//         \"@type\": \"/gno.RefNode\",\n//         \"BlockNode\": null,\n//         \"Location\": {\n//             \"File\": \"\",\n//             \"Line\": \"0\",\n//             \"Nonce\": \"0\",\n//             \"PkgPath\": \"gno.land/r/test\"\n//         }\n//     },\n//     \"Values\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"init.0\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"10\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"main\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"15\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"c5eefc40ed065461b4a920c1349ed734ffdead8f\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:7\"\n//                     }\n//                 }\n//             }\n//         }\n//     ]\n// }\n// d[a8ada09dee16d791fd406d629fe29bb0ed084a30:4]\n"},{"Name":"z_2_filetest.gno","Body":"// PKGPATH: gno.land/r/test\npackage test\n\nimport (\n\t\"gno.land/p/demo/avl\"\n)\n\nvar tree avl.Tree\n\nfunc init() {\n\ttree.Set(\"key0\", \"value0\")\n\ttree.Set(\"key1\", \"value1\")\n}\n\nfunc main() {\n\tvar updated bool\n\tupdated = tree.Set(\"key2\", \"value2\")\n\tprintln(updated, tree.Size())\n}\n\n// Output:\n// false 3\n\n// Realm:\n// switchrealm[\"gno.land/r/test\"]\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:10]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key2\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"value2\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:10\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:9\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:9]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key2\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"213baed7e3326f2403b5f30e5d4397510ba4f37d\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:7\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"be751422ef4c2bc068a456f9467d2daca27db8ca\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:10\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:9\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:8]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key1\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AwAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"af4d0b158681d85eb2a7f6888b39a05ca7b790ee\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:6\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"ef853d70e334fd2c807d6c2c751da1fcd1e5ad58\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:9\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:4\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// u[a8ada09dee16d791fd406d629fe29bb0ed084a30:4]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"3a5af0895c2c45b8a5e894644bcd689f1fdc4785\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:4\",\n//         \"ModTime\": \"7\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// d[a8ada09dee16d791fd406d629fe29bb0ed084a30:5]\n"}]},"deposit":"100000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3zNpUpb/DJAjV8VcMPsdjfPAuc9ACY7C0/Hmwra0GXf"},"signature":"YhtsyDMOUVjjkB+ILcqvIL4ogZzOGxUYuNpFi/s2+DsqMBDSd75i0q8LWj4+1t6g/YfmuehrSRABuNmY01fBEw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1g6lrju9ajvhdmfd7p2arnvmemdv9eytscm739c","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"sq2Hbyl+By+dq57LuKFePfB7NMYXLwwTKKfjmC6IVNZZ1y5mBqKFCugpnD+N8MQuBANXS6vqYDkG/mjorNEBkw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ychquxwz54fy0q7c4rpy2hulmcd8mulpsqwj5r","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["tarannode"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Azozvor5C9bxlnGqXGXXpqtiOqtGwkN+0dIsjPCq2kQY"},"signature":"1WAtj6j7aWez6tRX5r4oveyuK/FQMgOyxzn6i0j0lhZyOilm6hKd42hhmUYDfvHiGvBqvRbZdL7IaN9pRnVp5g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1ychquxwz54fy0q7c4rpy2hulmcd8mulpsqwj5r","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["642","https://github.com/DrSevoran","https://github.com/DrSevoran"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Azozvor5C9bxlnGqXGXXpqtiOqtGwkN+0dIsjPCq2kQY"},"signature":"fwyCseTQd1f08lU3t8M+BZjnKnlGeoStHLMftY6j1DoqZUeCrEcCTN2wXpE+Ll6YD9TYw+fp4We/R9w65OUITw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1v6smste93hthlz9url52ppvwg2grsuzvcssz8y","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"TFYzXKgYMGCy9AEX3Owsx75wujLvHdCv1l23nzY379MqR73DlWSIdHb9CbyLDVT8AGj0gRaG4etbQRFXGRf1kg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v6smste93hthlz9url52ppvwg2grsuzvcssz8y","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","adonisabril",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqojRN3BTm08DfUoMaD66VxPQZ458JYW7smv6/GntRuK"},"signature":"NGiHFV0KsbFH+qzXE+boQpxFezr0uEdPXIISSPkdp2FpeCmj7EMHtj299bYtZ+5goIabTM971b1VC3M/6COokg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v6smste93hthlz9url52ppvwg2grsuzvcssz8y","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["adonisabril"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqojRN3BTm08DfUoMaD66VxPQZ458JYW7smv6/GntRuK"},"signature":"LjvlwFFyG0mHirnDYj0SIxHht8WrgPTOVUkOdfpVC0tBZZ3BuDDRFh6WCiTYJssW3RsXdj12+imQyGre+Ric5g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v6smste93hthlz9url52ppvwg2grsuzvcssz8y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["643","Test Post to Board Gnoland","This is a test to post a messaged on the board."]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqojRN3BTm08DfUoMaD66VxPQZ458JYW7smv6/GntRuK"},"signature":"9HY94opsm41GgQkdZe42r+6RpRmg/1H3/swgv/H7fZRJyApE+d6W6EcxqPr+77ZnWr1o3AaQDjHPfDhi6FRwoA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12eedqrmxxsx4s26yzeqs36se5dwwg2tcdgscss","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","Arkhen",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+yPlWqgv04kcL0Mq+WvI/5xEObfQIg5K16QyDvQeYYj"},"signature":"RmNrkNHqDMRKVciyhmxS8Q1TbRiD8EpQiC2f4uXcDNohEve+KnN+nv0Y6oLUtRqyBXCW61psUFtGeQDQAav66g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12eedqrmxxsx4s26yzeqs36se5dwwg2tcdgscss","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1","Hey!","Is is true that i lost almost all my airdrop by voting?"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+yPlWqgv04kcL0Mq+WvI/5xEObfQIg5K16QyDvQeYYj"},"signature":"N7IJcUmHSiskxffg7x2dqxQDLOUFHzuAXAa7feAiDEJLO9mJc2HI8Q1cUrfcaU7BqvsK84WkIaIQ86sGraS33Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12eedqrmxxsx4s26yzeqs36se5dwwg2tcdgscss","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","arkhen","hey!"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+yPlWqgv04kcL0Mq+WvI/5xEObfQIg5K16QyDvQeYYj"},"signature":"Rj419WXFL1V02a0NXmDwY3LTjqycPEdBqudQ4MLOG/sXxkboaGrZr7/R9zU2gb5oVMcomglawCx02mb9bUDGUA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1n20htwfymzje9efaqcjeqyud7aax65l6elnztc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"dKnnaAu2z+csmuiTsGS9R+qt13rCbJWxCdExy7c+V+0TLE22qYdy2QgCPruDS3a+rV1JDvx4gzPYneW6GgefAg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1s75dzw2uyn6hquwnvw47jg9fufv0mm4fprtpxf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"PafPkf/eU0IeA3W68bBhbNFrpPImJIw11z3gLPMwOXFisjyBmjfhRr3Np7S+sz5Dhd8iDWwqZ/LWxC2bMLsudg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1nwgyr4sx0nevujz8av8af0tm58szg3vyjp8yk5","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"mf2o2sFfTfsdio8dABumhytLwqBDg7T6NaQ0MNus4DsJ+ifCf62m9dLfcWWhYdVOYNP73huVjdTKhkPLV/Q7OA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1nwgyr4sx0nevujz8av8af0tm58szg3vyjp8yk5","send":"304000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","indppp",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuavqRkvURktBKsRDSc2ztmsOI4B7rGjn1BgWvaO8DjO"},"signature":"SDlvfEgg9aIHdMxQG7bAUwfTT9A6d6uvNC0NZbDqmXJVzbNTPW4imulrV5yQfyBUXIpqK6pcxa/qGdNK/xvhpA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n20htwfymzje9efaqcjeqyud7aax65l6elnztc","send":"304000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mix2",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AogBoVH9I3zDbwWBzjmlXk0+8Xvro2qGjccKy4qYdgna"},"signature":"btjR3KAnyuvQYPLamJCoZKRCs1x6nJk4GsLVyXrxDaIoyOfb7D2tadogYLnJie6KU7vJIhiy2LYMCwVtzihR+w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1n20htwfymzje9efaqcjeqyud7aax65l6elnztc","send":"304000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mixtures",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AogBoVH9I3zDbwWBzjmlXk0+8Xvro2qGjccKy4qYdgna"},"signature":"2iHj5dMZf0t+tHGZGhO93pRjOnLNvEpopdWJj7BuC9BcVcwdEDe2wdg1IhL7r7UKYfu1GUGlv6Sjy7KK1C4+BA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1s75dzw2uyn6hquwnvw47jg9fufv0mm4fprtpxf","send":"304000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","pizzaas",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhWNKY7vpzDNyDTq2X3DTvorXNBPr50Z0393qMqd6amF"},"signature":"HuVDFXK6R2a7d98NbcNTL5m18NZ0KxW3YmV9eTI167VPalfgW9Ln+BWVn13yoG/HfhvjA4Ga3mcwRSS8BjMcUA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g18h5wtpr75ehu8u36v0vwcju6wxr206x8khxw20","send":"104000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","patience",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ay9L7Cq5mGb75jCaO10he79ZPxnyzJbZEuUZba8goVRs"},"signature":"pmNexHsZqSvVqYWpgqb/Vq7O7gmXj2v9WoCjutJ7j+VPVqcBk0Db+aPxbRX87eBKVavN3FJBNecfQmUlvQCsVA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g122n67es9vzs0rmharsggfr4sdkd45aysnuzf7m","to_address":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","amount":"1000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArADVPfUBrZVmlqmZWPWucRTe9gkJ9wJFyTszJoU5Ebi"},"signature":"cD39PJEI3LQ5uUCifK1JZVQDa0jbm69Xkg3DcSaVWbR4CKuiDhZk3hEI2oU8GFHvx297zoFwwXL8AbRPCPivfQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v6smste93hthlz9url52ppvwg2grsuzvcssz8y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["643","Post via Full Security","This is a post using Full Security with Airgap"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqojRN3BTm08DfUoMaD66VxPQZ458JYW7smv6/GntRuK"},"signature":"K6eJ33qQy7nk53IIw8W+9KpGsXv5tTKB0BgtrZR8afc8DYwxNxpgM5ltGAoJGPtlQr22CEtPhYg0W5a8vK3eRg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/sotatoken1","func":"BalanceOf","args":["g14w5ql2y642yxg4g7skl8cvwrtr79cfmedmrh08"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"bvROI1dGxE0X4UEzvlpTwm7YJfp8UV83+A+g2MzURSEfgLpLZZsQ+bPT0MrkWpvAj46KR4nkx0wb1WDfkYPjvg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/boards","func":"CreateBoard","args":["thiennguyen3"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"G3zgr8id1Z+vVk3qH4xDszHeD5NpMp0ghqgzHBwywQRbT9ZKsOMIdT2IkWk5fECWKe2k/z37wiHCBcWaXEYX7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/boards","func":"CreateBoard","args":["thiennguyen3"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"c1COPHf+XJbjA36opqoif9JXNTU20cUxOo8j9XTgfHYIOQtERdfvKeb04EcvXFsgmjYXuMc2AatLGb+JoMXaVQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["thiennguyen3"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"fSLiod/HqYRGK81Xgn5F8nV2FReQHTQlMQpLe6Tz6toIMAo7H1Xs4QhaDJQ+qV/RpUT5AJuZY9PTqn9EzKptZw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/boards","func":"GetBoardIDFromName","args":["testboard"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"ycnrrSLjfmqpzcjvzbHjofqKOn+vbQKtq76m55q9Bcwbk3t8ayrEqzitzCjE+7rE4jPyLrL7/asIp+nBP0V97Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/boards","func":"GetBoardIDFromName","args":["logitech"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"qB2cJAd4qBjK+y6dfO/FWURHzmrGDRwIOLU6QkKYDZ0BQUi7CcwMUMBC8kMfZ8kkToXln28qbBq0aDV74iUyRQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1sdvhrycpe4df0yvqcydhprfsgxxfgqg5v8wmzf","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"OPKSt1yvCfjGEcMzfsDhsm+pgeqFKvmvAYZar37oQ8di2ZqDHlRqcK48gB2efFGnG1a8KaaesPRrt3d26KgENA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1sdvhrycpe4df0yvqcydhprfsgxxfgqg5v8wmzf","to_address":"g1csq06lftu75rsj56e28dhf6zf7c0smzu0dxv4j","amount":"309999999ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AojY/+cvlizF82swti5t2QHhnw6BB2JLi48oyadj/2rv"},"signature":"1CtSD/n6anKw53qGXFVws0Wt0do5EV7FIvbms37ef9hWPUJ8ZV5+OWt+LNW4CVIqdjXm4VLVm7F0lVYOLTlG3Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hg4qmk53c6jwyvcw49fq05upgaqca4ays44cy0","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"rW+RhPvRGCBEyqNHZJdepexHiWgm0ooqc83fTqm1AVRmxSy5s/IAVv69D/O3G4SDSgyZmyROpbmclPlHp0TNFA=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1csq06lftu75rsj56e28dhf6zf7c0smzu0dxv4j","to_address":"g1hg4qmk53c6jwyvcw49fq05upgaqca4ays44cy0","amount":"619999998ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8CGlC+Kq7tju2o+DU6mY+u4XDaTR+s1kgMR7wMBGr2Y"},"signature":"FMv+gFOB+ahfJknuDU7YYB2aQbxNjWwque5YYBCKORQK61V7D8XIUV0+LqwknJ5yCt/yNAZzeCNyfNBybpmWtA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1uvx8hv90a4g6xjsus5kcp33nk2ctwwmwfkpl0l","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"zYOLaaYwRXCrtjZykhvATQBmRiCuiAqVRaVmmjm1lYRP61aZR5wdSc39o99ku1lh/bPN9Ut1xQNQOQ93bsuQGg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1u6g3mhxvrsd3wv793ymfv9a4rww6ld0hymyp4c","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"hKrzaHZvyLe+hTkKIP/hl5PuZCC7fOkKRBkjSVxRT053Oh74GnoR/yWaX4ldTEVXL2lPCLR7VOAC0mAGwhGutQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u6g3mhxvrsd3wv793ymfv9a4rww6ld0hymyp4c","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","alexandra13",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+yx5HQ7fYeP/cG30j+QdAw1Dg84SmsodHU4HbKh/+xe"},"signature":"ejUViQTj/Xfl/VzbxBSHuKpSRWFX/tgBDZCrpGti68k3mP867/wofvfaPozA2y0Z5g10fxRWMk+JEL1T4aGxng=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u6g3mhxvrsd3wv793ymfv9a4rww6ld0hymyp4c","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["alexandra13"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+yx5HQ7fYeP/cG30j+QdAw1Dg84SmsodHU4HbKh/+xe"},"signature":"IR4866tM5Neg6GtZywzd59QZIzL150OFeGAvqqfta2YCFg4YzgmndpfRKnE3LLIRDzO67cnwFQKjxilFZwH8pA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u6g3mhxvrsd3wv793ymfv9a4rww6ld0hymyp4c","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["644","Alexandra","Welcome abroad"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+yx5HQ7fYeP/cG30j+QdAw1Dg84SmsodHU4HbKh/+xe"},"signature":"bK9betbjrYO/n4DqH5cvaUcmtWknRoieDsWSWGyDtcMmDogMioqy4681r3YgFlhcK8QRgXuOxhN4LEVo3ZGOaw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1nkdezlp0mj6ra7nxmdry6wtd3al0jdche9h3vv","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"qxOH4/HQJlWWmf0vvCP72wz95Scx5KEzcaHAbk3pR5YFqkuvEOfgotocODl4XQV/vv0NYITck70R59+aEjMDIw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g13raq5dx938k6wwm86j3nrwwy3vm8ht2gchja7y","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"gEvG0k4W2R/mYSwbFC1KjEKlFtZtp95w8c/dh8NFzWUyMY1gsX9xozPPfpA80LkD3f7KQhp32b/0rCNy8DGyGg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1gh9jpwq0zs62lfzf0ehhvwnc3s6xggevcs0pzt","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"tSJ/O+pYp5S7JecNwXKqae1GvXEtbXYbEMCYppy7VXEULkf21Lkir1B48MN0/Ze6BEwF262bl4deLlG1LwJK9Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v6smste93hthlz9url52ppvwg2grsuzvcssz8y","send":"1000000ugnot","pkg_path":"app.gno.tools/r/demo/boards:testboard","func":"CreateBoard","args":["adonisabril"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqojRN3BTm08DfUoMaD66VxPQZ458JYW7smv6/GntRuK"},"signature":"W0Uart9Zk3Cf7KU0ukzyX+V3O3EzcxBZCxDmMofhHHNBOFs4/LrGja+NDA6nPZFb01/S6bIEReTClD7NDWCQiQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v6smste93hthlz9url52ppvwg2grsuzvcssz8y","send":"","pkg_path":"app.gno.tools/r/demo/boards:testboard","func":"CreateThread","args":["643","Hello Word Test to This Board","Just a test to post to this board"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqojRN3BTm08DfUoMaD66VxPQZ458JYW7smv6/GntRuK"},"signature":"6bdSCkCxwspoXEddBYX+UnoJ/u6oD7AmLVOWrP1dw38d1Z5QGUzV2qFwy+Ff1GdOKo+9Yc4nmYofgLn/w51rDA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v6smste93hthlz9url52ppvwg2grsuzvcssz8y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["1","2","2","test reply"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqojRN3BTm08DfUoMaD66VxPQZ458JYW7smv6/GntRuK"},"signature":"MfbVob2Hm9nU7VTH4vP/oktFneg+F0pgmzp7IgD5dXA0sxYh9LP7zX74q+9oKYEKNdITyvK95RAopwlJfOSKgA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1v6smste93hthlz9url52ppvwg2grsuzvcssz8y","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1","Test post to this board","Just a test post to this board"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqojRN3BTm08DfUoMaD66VxPQZ458JYW7smv6/GntRuK"},"signature":"tbQYOHDRV6/PS+10fMzRwi6CMtD4mEF6aoiAnqxW6/AZYuyk9xAtiq3mUg0vLstYPp3NGcAmKK9h15y71jFFPg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1256ehvef7n9jqgxd5j60dua6t8kt2306tvpzh6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Acfysgl2K973/x0UhTrZzD58WiEpOAvl7jNW744CRg875lmhHCqIXxnIhS4D2Q9lOc6R5s3quvt7hwrULlYQYw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1256ehvef7n9jqgxd5j60dua6t8kt2306tvpzh6","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","gladiator",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8oVrHw5m4KQgaoCcPAcZzPaXh9lLMcBvap2Nfhio4Qw"},"signature":"sGnuDcnS0w9491N01NkQPz8xHSh9ISim24PE39YnveENkBV0CQEFWqD2bTWR9I58D4BABbo8x6ivm78pdKV6sw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1256ehvef7n9jqgxd5j60dua6t8kt2306tvpzh6","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["Gladiator"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8oVrHw5m4KQgaoCcPAcZzPaXh9lLMcBvap2Nfhio4Qw"},"signature":"3C+DHVB+zISyPCFp9h0geUuMmrKDo0tUVLwCoeBTzncT/LkLZ1VKA7SRZYZcvltbH87rwwbTC6cOCCihTtxzrw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1256ehvef7n9jqgxd5j60dua6t8kt2306tvpzh6","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["Gladiator"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8oVrHw5m4KQgaoCcPAcZzPaXh9lLMcBvap2Nfhio4Qw"},"signature":"pr/tc8I0Qv7nawqeMhTMYVpOEpTGM4Hz3Rz0OgC7IHUtBBK4WDJ31OM2qTTzj9DxdN7rk0bMY0UXbkUOPmTRSw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1256ehvef7n9jqgxd5j60dua6t8kt2306tvpzh6","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["gladiator"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8oVrHw5m4KQgaoCcPAcZzPaXh9lLMcBvap2Nfhio4Qw"},"signature":"l+XW+p9lEWrKppbkNVBErwSnZHfVpCj0FmlDcwCynZJwad/SW6ioBLGFfFMfpp+nSNpAmrpRUX5ugIEqHaRRWQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1256ehvef7n9jqgxd5j60dua6t8kt2306tvpzh6","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["645","There are no correct models but some of them may be useful ","macintosh"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8oVrHw5m4KQgaoCcPAcZzPaXh9lLMcBvap2Nfhio4Qw"},"signature":"6QaeuQPMcEvQMRoCF2v0edQJqqjBv3Pw1QjgugPgkKlZMU2xGWpJ4Njf1eSrt6QRwszKCBUNLew0S51OOnBRnQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1hg4qmk53c6jwyvcw49fq05upgaqca4ays44cy0","package":{"Name":"store","Path":"gno.land/p/demo/store","Files":[{"Name":"item.gno","Body":"package store\n\nimport (\n\t\"gno.land/p/demo/ufmt\"\n)\n\n// Item is an instance of an arbitrary item\ntype Item struct {\n\tid \t\t\tuint\n\tprice \t\tuint64\n\tdescription string\n}\n\n// NewItem creates a new item\nfunc NewItem(\n\tid \t\t\tuint,\n\tprice \t\tuint64,\n\tdescription string,\n) *Item {\n\treturn \u0026Item{\n\t\tid: \t\t\tid,\n\t\tprice: \t\t\tprice,\n\t\tdescription: \tdescription,\n\t}\n}\n\n// GetId returns the item's ID\nfunc (i Item) GetId() uint {\n\treturn i.id\n}\n\n// GetIdString returns the item's ID in string format\nfunc (i Item) GetIdString() string {\n\treturn ufmt.Sprintf(\"%d\", i.GetId())\n}\n\n// GetPrice returns the item's price\nfunc (i Item) GetPrice() uint64 {\n\treturn i.price\n}\n\n// GetDescription returns the item's description\nfunc (i Item) GetDescription() string {\n\treturn i.description\n}\n\n// GetInfo returns the item's formatted info\nfunc (i Item) GetInfo() string {\n\treturn ufmt.Sprintf(\n\t\t\"id: %d\\nprice: %d\\ndescription: %s\", \n\t\ti.id, i.price, i.description,\n\t)\n}"},{"Name":"item_test.gno","Body":"package store\n\nimport (\n\t\"testing\"\n)\n\n// TestNewItem verifies that a new item can be successfully created\nfunc TestNewItem(t *testing.T) {\n\tconst (\n\t\tid \t\t\t\tuint = 123\n\t\tprice \t\t\tuint64 = 456\n\t\tdescription \tstring = \"item description\"\n\t)\n\n\ti := NewItem(id, price, description)\n\n\tif i.GetId() != id {\n\t\tt.Fatalf(\"invalid ID\")\n\t}\n\n\tif i.GetPrice() != price {\n\t\tt.Fatalf(\"invalid price\")\n\t}\n\n\tif  i.GetDescription() != description {\n\t\tt.Fatalf(\"invalid description\")\n\t}\n}"}]},"deposit":"100000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8yMb+aWk7ITe28LstCyYogJK+EHCmWOo7JfVtZsiWmE"},"signature":"AjxqyD1x8igCGJk3CmM3+qQcFPqBBR4J4zK0opc7D9g3tgguEnOBTdqOgFc0Mho8sTOrazFYc1rIpUJH/LnEUA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1hg4qmk53c6jwyvcw49fq05upgaqca4ays44cy0","package":{"Name":"store","Path":"gno.land/r/demo/store","Files":[{"Name":"store.gno","Body":"package store\n\nimport (\n    \"bytes\"\n    \"strings\"\n\n    \"std\"\n\n    \"gno.land/p/demo/avl\"\n    \"gno.land/p/demo/store\"\n    \"gno.land/p/demo/ufmt\"\n)\n\nconst (\n    notFoundMessage = \"404: gnome not found\"\n    successMessage  = \"Successfully added gnome\"\n    failedMessage   = \"Unable to add item\"\n\n    noItemsMessage  = \"There are no gnomes in the store\"\n    failedBuyOrder  = \"unable to execute buy order\"\n)\n\nvar (\n    storeAdmin  std.Address = \"g1hg4qmk53c6jwyvcw49fq05upgaqca4ays44cy0\"\n    \n    items       avl.Tree\n    idCounter   uint\n)\n\n// isStoreAdmin checks if the address is the store admin\nfunc isStoreAdmin(address std.Address) bool {\n    return address == storeAdmin\n}\n\n// Render displays the store's contents\nfunc Render(path string) string {\n    // Get the resource path\n    parts := strings.Split(path, \"/\")\n\n    switch {\n    case path == \"\":\n        // Show all the store items\n        return renderItems()\n    case len(parts) == 2 \u0026\u0026 parts[0] == \"item\":\n        // Check if the item exists\n        item := getItemByID(parts[1])\n        if item == nil {\n            return notFoundMessage\n        }\n\n        return item.GetInfo()\n    default: \n        return notFoundMessage\n    }\n}\n\n// renderItems renders all available store items\nfunc renderItems() string {\n    // Check if there are not any items in the store\n    if items.Size() \u003c 1 {\n        return noItemsMessage\n    }\n\n    var buffer bytes.Buffer\n    items.Iterate(\"\", \"\", func (t *avl.Node) bool {\n        item, _ := t.Value().(*store.Item)\n\n        buffer.WriteString(item.GetInfo())\n        buffer.WriteString(\"\\n\\n\")\n\n        return false\n    })\n\n    return buffer.String()\n}\n\n// getItemByID fetches an item using an ID\nfunc getItemByID(id string) *store.Item {\n    item, found := items.Get(id)\n    if !found {\n        return nil\n    }\n\n    return item.(*store.Item)\n}\n\n// AddGnome adds a new gnome item to the store\nfunc AddGnome(\n    price uint64,\n    description string,\n) string {\n    // Only store owners can modify\n    // the contents of the store\n    if !isStoreAdmin(std.GetOrigCaller()) {\n        return failedMessage\n    }\n\n    // Create a new item\n    item := store.NewItem(\n        idCounter,\n        price,\n        description,\n    )\n\n    // Add the new item to the store\n    items.Set(\n        item.GetIdString(),\n        item,\n    )\n\n    // Increase the global ID counter\n    idCounter++\n\n    return successMessage\n}\n\n// BuyGnome executes a buy order\nfunc BuyGnome(id string) string {\n    // Make sure the item exists\n    gnome := getItemByID(id)\n    if gnome == nil {\n        return notFoundMessage\n    }\n\n    // Get the item price in native currency (ugnot)\n    amount := std.Coins{\n        {\n            \"ugnot\",\n            int64(gnome.GetPrice()),\n        },\n    }\n\n    // Get a reference to the banker\n    banker := std.GetBanker(std.BankerTypeRealmSend)\n\n    // Get the address of the method caller\n    buyer := std.GetOrigCaller()\n\n    // Make sure the buyer has enough funds\n    if banker.GetCoins(buyer).AmountOf(\"ugnot\") \u003c int64(gnome.GetPrice()) {\n        return failedBuyOrder\n    }\n\n    // Execute the buy order\n    // PkgAddress is used instead of the buyer address,\n    // because of current package limitations in stdlibs/banker.go (SendCoins method)\n    banker.SendCoins(std.GetOrigPkgAddr(), storeAdmin, amount)\n\n    return ufmt.Sprintf(\n        \"gnome with ID %s successfully purchased!\",\n        id,\n    )\n}\n\n"}]},"deposit":"100000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8yMb+aWk7ITe28LstCyYogJK+EHCmWOo7JfVtZsiWmE"},"signature":"jiV/zevCDF6smYK2cjs2GAo4jwafsZtygNBYh4XnqQod7yTIgJLHUfytvj8i/7QPSYCNGR3MjrseoJsm8LeZ0A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1hg4qmk53c6jwyvcw49fq05upgaqca4ays44cy0","package":{"Name":"store","Path":"gno.land/r/demo/store","Files":[{"Name":"store.gno","Body":"package store\n\nimport (\n    \"bytes\"\n    \"strings\"\n\n    \"std\"\n\n    \"gno.land/p/demo/avl\"\n    \"gno.land/p/demo/store\"\n    \"gno.land/p/demo/ufmt\"\n)\n\nconst (\n    notFoundMessage = \"404: gnome not found\"\n    successMessage  = \"Successfully added gnome\"\n    failedMessage   = \"Unable to add item\"\n\n    noItemsMessage  = \"There are no gnomes in the store\"\n    failedBuyOrder  = \"unable to execute buy order\"\n)\n\nvar (\n    storeAdmin  std.Address = \"g1hg4qmk53c6jwyvcw49fq05upgaqca4ays44cy0\"\n    \n    items       avl.Tree\n    idCounter   uint\n)\n\n// isStoreAdmin checks if the address is the store admin\nfunc isStoreAdmin(address std.Address) bool {\n    return address == storeAdmin\n}\n\n// Render displays the store's contents\nfunc Render(path string) string {\n    // Get the resource path\n    parts := strings.Split(path, \"/\")\n\n    switch {\n    case path == \"\":\n        // Show all the store items\n        return renderItems()\n    case len(parts) == 2 \u0026\u0026 parts[0] == \"item\":\n        // Check if the item exists\n        item := getItemByID(parts[1])\n        if item == nil {\n            return notFoundMessage\n        }\n\n        return item.GetInfo()\n    default: \n        return notFoundMessage\n    }\n}\n\n// renderItems renders all available store items\nfunc renderItems() string {\n    // Check if there are not any items in the store\n    if items.Size() \u003c 1 {\n        return noItemsMessage\n    }\n\n    var buffer bytes.Buffer\n    items.Iterate(\"\", \"\", func (t *avl.Node) bool {\n        item, _ := t.Value().(*store.Item)\n\n        buffer.WriteString(item.GetInfo())\n        buffer.WriteString(\"\\n\\n\")\n\n        return false\n    })\n\n    return buffer.String()\n}\n\n// getItemByID fetches an item using an ID\nfunc getItemByID(id string) *store.Item {\n    item, found := items.Get(id)\n    if !found {\n        return nil\n    }\n\n    return item.(*store.Item)\n}\n\n// AddGnome adds a new gnome item to the store\nfunc AddGnome(\n    price uint64,\n    description string,\n) string {\n    // Only store owners can modify\n    // the contents of the store\n    if !isStoreAdmin(std.GetOrigCaller()) {\n        return failedMessage\n    }\n\n    // Create a new item\n    item := store.NewItem(\n        idCounter,\n        price,\n        description,\n    )\n\n    // Add the new item to the store\n    items.Set(\n        item.GetIdString(),\n        item,\n    )\n\n    // Increase the global ID counter\n    idCounter++\n\n    return successMessage\n}\n\n// BuyGnome executes a buy order\nfunc BuyGnome(id string) string {\n    // Make sure the item exists\n    gnome := getItemByID(id)\n    if gnome == nil {\n        return notFoundMessage\n    }\n\n    // Get the item price in native currency (ugnot)\n    amount := std.Coins{\n        {\n            \"ugnot\",\n            int64(gnome.GetPrice()),\n        },\n    }\n\n    // Get a reference to the banker\n    banker := std.GetBanker(std.BankerTypeRealmSend)\n\n    // Get the address of the method caller\n    buyer := std.GetOrigCaller()\n\n    // Make sure the buyer has enough funds\n    if banker.GetCoins(buyer).AmountOf(\"ugnot\") \u003c int64(gnome.GetPrice()) {\n        return failedBuyOrder\n    }\n\n    // Execute the buy order\n    // PkgAddress is used instead of the buyer address,\n    // because of current package limitations in stdlibs/banker.go (SendCoins method)\n    banker.SendCoins(std.GetOrigPkgAddr(), storeAdmin, amount)\n\n    return ufmt.Sprintf(\n        \"gnome with ID %s successfully purchased!\",\n        id,\n    )\n}\n\n"}]},"deposit":"100000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8yMb+aWk7ITe28LstCyYogJK+EHCmWOo7JfVtZsiWmE"},"signature":"8E9cRyY2Kb20JauJZXDKrrxOZF2SIUif2O4UVa8YwXVLxmbQ3bL+KHKvuauHFPxwqepD4UnlyUWt3qfzGdyvVg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1hg4qmk53c6jwyvcw49fq05upgaqca4ays44cy0","package":{"Name":"store","Path":"gno.land/r/demo/store","Files":[{"Name":"store.gno","Body":"package store\n\nimport (\n    \"bytes\"\n    \"strings\"\n\n    \"std\"\n\n    \"gno.land/p/demo/avl\"\n    \"gno.land/p/demo/store\"\n    \"gno.land/p/demo/ufmt\"\n)\n\nconst (\n    notFoundMessage = \"404: gnome not found\"\n    successMessage  = \"Successfully added gnome\"\n    failedMessage   = \"Unable to add item\"\n\n    noItemsMessage  = \"There are no gnomes in the store\"\n    failedBuyOrder  = \"unable to execute buy order\"\n)\n\nvar (\n    storeAdmin  std.Address = \"g1hg4qmk53c6jwyvcw49fq05upgaqca4ays44cy0\"\n    \n    items       avl.Tree\n    idCounter   uint\n)\n\n// isStoreAdmin checks if the address is the store admin\nfunc isStoreAdmin(address std.Address) bool {\n    return address == storeAdmin\n}\n\n// getItemByID fetches an item using an ID\nfunc getItemByID(id string) *store.Item {\n    item, found := items.Get(id)\n    if !found {\n        return nil\n    }\n\n    return item.(*store.Item)\n}\n\n// AddGnome adds a new gnome item to the store\nfunc AddGnome(\n    price uint64,\n    description string,\n) string {\n    // Only store owners can modify\n    // the contents of the store\n    if !isStoreAdmin(std.GetOrigCaller()) {\n        return failedMessage\n    }\n\n    // Create a new item\n    item := store.NewItem(\n        idCounter,\n        price,\n        description,\n    )\n\n    // Add the new item to the store\n    items.Set(\n        item.GetIdString(),\n        item,\n    )\n\n    // Increase the global ID counter\n    idCounter++\n\n    return successMessage\n}\n\n// BuyGnome executes a buy order\nfunc BuyGnome(id string) string {\n    // Make sure the item exists\n    gnome := getItemByID(id)\n    if gnome == nil {\n        return notFoundMessage\n    }\n\n    // Get the item price in native currency (ugnot)\n    amount := std.Coins{\n        {\n            \"ugnot\",\n            int64(gnome.GetPrice()),\n        },\n    }\n\n    // Get a reference to the banker\n    banker := std.GetBanker(std.BankerTypeRealmSend)\n\n    // Get the address of the method caller\n    buyer := std.GetOrigCaller()\n\n    // Make sure the buyer has enough funds\n    if banker.GetCoins(buyer).AmountOf(\"ugnot\") \u003c int64(gnome.GetPrice()) {\n        return failedBuyOrder\n    }\n\n    // Execute the buy order\n    // PkgAddress is used instead of the buyer address,\n    // because of current package limitations in stdlibs/banker.go (SendCoins method)\n    banker.SendCoins(std.GetOrigPkgAddr(), storeAdmin, amount)\n\n    return ufmt.Sprintf(\n        \"gnome with ID %s successfully purchased!\",\n        id,\n    )\n}\n\n"}]},"deposit":"100000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8yMb+aWk7ITe28LstCyYogJK+EHCmWOo7JfVtZsiWmE"},"signature":"rQx/K1dCamqwStwsG6pwvARs/PqEebSb069M+M10lpBFYOdimEenrgXkX6fnB3VjozombhIIFQgsFZeJPgWhaQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1hg4qmk53c6jwyvcw49fq05upgaqca4ays44cy0","package":{"Name":"store","Path":"gno.land/r/demo/store","Files":[{"Name":"store.gno","Body":"package store\n\nimport (\n    \"bytes\"\n    \"strings\"\n\n    \"std\"\n\n    \"gno.land/p/demo/avl\"\n    \"gno.land/p/demo/store\"\n    \"gno.land/p/demo/ufmt\"\n)\n\nconst (\n    notFoundMessage = \"404: gnome not found\"\n    successMessage  = \"Successfully added gnome\"\n    failedMessage   = \"Unable to add item\"\n\n    noItemsMessage  = \"There are no gnomes in the store\"\n    failedBuyOrder  = \"unable to execute buy order\"\n)\n\nvar (\n    storeAdmin  std.Address = \"g1hg4qmk53c6jwyvcw49fq05upgaqca4ays44cy0\"\n    \n    items       avl.Tree\n    idCounter   uint\n)\n\n// isStoreAdmin checks if the address is the store admin\nfunc isStoreAdmin(address std.Address) bool {\n    return address == storeAdmin\n}\n\n// getItemByID fetches an item using an ID\nfunc getItemByID(id string) *store.Item {\n    _, item, found := items.Get(id)\n    if !found {\n        return nil\n    }\n\n    return item.(*store.Item)\n}\n\n// AddGnome adds a new gnome item to the store\nfunc AddGnome(\n    price uint64,\n    description string,\n) string {\n    // Only store owners can modify\n    // the contents of the store\n    if !isStoreAdmin(std.GetOrigCaller()) {\n        return failedMessage\n    }\n\n    // Create a new item\n    item := store.NewItem(\n        idCounter,\n        price,\n        description,\n    )\n\n    // Add the new item to the store\n    items.Set(\n        item.GetIdString(),\n        item,\n    )\n\n    // Increase the global ID counter\n    idCounter++\n\n    return successMessage\n}\n\n// BuyGnome executes a buy order\nfunc BuyGnome(id string) string {\n    // Make sure the item exists\n    gnome := getItemByID(id)\n    if gnome == nil {\n        return notFoundMessage\n    }\n\n    // Get the item price in native currency (ugnot)\n    amount := std.Coins{\n        {\n            \"ugnot\",\n            int64(gnome.GetPrice()),\n        },\n    }\n\n    // Get a reference to the banker\n    banker := std.GetBanker(std.BankerTypeRealmSend)\n\n    // Get the address of the method caller\n    buyer := std.GetOrigCaller()\n\n    // Make sure the buyer has enough funds\n    if banker.GetCoins(buyer).AmountOf(\"ugnot\") \u003c int64(gnome.GetPrice()) {\n        return failedBuyOrder\n    }\n\n    // Execute the buy order\n    // PkgAddress is used instead of the buyer address,\n    // because of current package limitations in stdlibs/banker.go (SendCoins method)\n    banker.SendCoins(std.GetOrigPkgAddr(), storeAdmin, amount)\n\n    return ufmt.Sprintf(\n        \"gnome with ID %s successfully purchased!\",\n        id,\n    )\n}\n\n"}]},"deposit":"100000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8yMb+aWk7ITe28LstCyYogJK+EHCmWOo7JfVtZsiWmE"},"signature":"BsRQko8RM5GJt9FHLQpFLPuqvokjfFj+TlgdRXp9t2gzbHhB06Bxu4lSqGThY3JqYZ04pWW2BfMdpZwEy4uhBw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1hg4qmk53c6jwyvcw49fq05upgaqca4ays44cy0","package":{"Name":"store","Path":"gno.land/r/demo/store","Files":[{"Name":"store.gno","Body":"package store\n\nimport (\n    \"bytes\"\n    \"strings\"\n\n    \"std\"\n\n    \"gno.land/p/demo/avl\"\n    \"gno.land/p/demo/store\"\n    \"gno.land/p/demo/ufmt\"\n)\n\nconst (\n    notFoundMessage = \"404: gnome not found\"\n    successMessage  = \"Successfully added gnome\"\n    failedMessage   = \"Unable to add item\"\n\n    noItemsMessage  = \"There are no gnomes in the store\"\n    failedBuyOrder  = \"unable to execute buy order\"\n)\n\nvar (\n    storeAdmin  std.Address = \"g1hg4qmk53c6jwyvcw49fq05upgaqca4ays44cy0\"\n    \n    items       avl.Tree\n    idCounter   uint\n)\n\n// isStoreAdmin checks if the address is the store admin\nfunc isStoreAdmin(address std.Address) bool {\n    return address == storeAdmin\n}\n\n// getItemByID fetches an item using an ID\nfunc getItemByID(id string) *store.Item {\n    _, item, found := items.Get(id)\n    if !found {\n        return nil\n    }\n\n    return item.(*store.Item)\n}\n\n// AddGnome adds a new gnome item to the store\nfunc AddGnome(\n    price uint64,\n    description string,\n) string {\n    // Only store owners can modify\n    // the contents of the store\n    if !isStoreAdmin(std.GetOrigCaller()) {\n        return failedMessage\n    }\n\n    // Create a new item\n    item := store.NewItem(\n        idCounter,\n        price,\n        description,\n    )\n\n    // Add the new item to the store\n    items.Set(\n        item.GetIdString(),\n        item,\n    )\n\n    // Increase the global ID counter\n    idCounter++\n\n    return successMessage\n}\n\n// BuyGnome executes a buy order\nfunc BuyGnome(id string) string {\n    // Make sure the item exists\n    gnome := getItemByID(id)\n    if gnome == nil {\n        return notFoundMessage\n    }\n\n    // Get the item price in native currency (ugnot)\n    amount := std.Coins{\n        {\n            \"ugnot\",\n            int64(gnome.GetPrice()),\n        },\n    }\n\n    // Get a reference to the banker\n    banker := std.GetBanker(std.BankerTypeRealmSend)\n\n    // Get the address of the method caller\n    buyer := std.GetOrigCaller()\n\n    // Make sure the buyer has enough funds\n    if banker.GetCoins(buyer).AmountOf(\"ugnot\") \u003c int64(gnome.GetPrice()) {\n        return failedBuyOrder\n    }\n\n    // Execute the buy order\n    // PkgAddress is used instead of the buyer address,\n    // because of current package limitations in stdlibs/banker.go (SendCoins method)\n    banker.SendCoins(std.GetOrigPkgAddr(), storeAdmin, amount)\n\n    return ufmt.Sprintf(\n        \"gnome with ID %s successfully purchased!\",\n        id,\n    )\n}\n\n"}]},"deposit":"100000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8yMb+aWk7ITe28LstCyYogJK+EHCmWOo7JfVtZsiWmE"},"signature":"OARtHCZIK/Svdxj+zFzViWWV8RTxNz0XNJXkvnB/7sNkY70hvyEy7kIXfA2jYV7fIxPmp+UsFCJo9z6MMl5lUw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xfp798453nep3r9zmxn7x24zdjr5v28np4gxdg","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","garfield",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At0igjQHXiuNeIbtVJy0lVGKQwUF6JGphkEN6QZqHJbn"},"signature":"Zz4gd7shSJQkpTXt311xro9qfn+wjgBfySspsncu0Q4O76mQRrP8TI4NFo8SEp1rJzCc5PxJDE1bZSetMqJoSA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xfp798453nep3r9zmxn7x24zdjr5v28np4gxdg","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["garfield"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At0igjQHXiuNeIbtVJy0lVGKQwUF6JGphkEN6QZqHJbn"},"signature":"gosmk6x/T6GOyzaK5WE7JFE6Ehsn0ZgbZcps+NrsWgtappHi8AZUELN4m5CqScoFlsZb5r/968BiTJyOr1zArw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xfp798453nep3r9zmxn7x24zdjr5v28np4gxdg","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["646","",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At0igjQHXiuNeIbtVJy0lVGKQwUF6JGphkEN6QZqHJbn"},"signature":"ZD1Foc73GdlDAsHgENwpOGrBCOTMPcYQlxgHA59B3yozyt2jkmArZoO97w4X6NhyWonpOt/Ao+avfXRsAMdslg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hg4qmk53c6jwyvcw49fq05upgaqca4ays44cy0","send":"","pkg_path":"gno.land/r/demo/users","func":"Register","args":["g1hg4qmk53c6jwyvcw49fq05upgaqca4ays44cy0","Jammyaa","I'm a blockchain engineer"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8yMb+aWk7ITe28LstCyYogJK+EHCmWOo7JfVtZsiWmE"},"signature":"fri3Gll/y7M0/NzZj8ZZvDInwiDOYAba6Yctfl24+EEGOLtJjonbDwzAOSjzuC3Kf3TI9dONXWWrVR5+7gPpiw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hg4qmk53c6jwyvcw49fq05upgaqca4ays44cy0","send":"","pkg_path":"gno.land/r/demo/users","func":"Register","args":["g1hg4qmk53c6jwyvcw49fq05upgaqca4ays44cy0","Jammyaa","I'm a blockchain engineer"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8yMb+aWk7ITe28LstCyYogJK+EHCmWOo7JfVtZsiWmE"},"signature":"WyD39djVv7EK8JbvRoZG3+5e2nDsszMMsnSXi4cilXIwngzegkm6Ofc0XP/VvI+zP5C+ryaBma+hrPlPP8yDgw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hg4qmk53c6jwyvcw49fq05upgaqca4ays44cy0","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["10","Jammyaa","Test"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8yMb+aWk7ITe28LstCyYogJK+EHCmWOo7JfVtZsiWmE"},"signature":"qrk5OJVlWbrLh6Qb+ye0yUeXHJITyI4xG3amhPVshrB06vJu/Pa9Gy83olRgZR0t1Hkmpvys2Dppirz4P6mgzA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hg4qmk53c6jwyvcw49fq05upgaqca4ays44cy0","send":"","pkg_path":"gno.land/r/demo/users","func":"Register","args":["g1hg4qmk53c6jwyvcw49fq05upgaqca4ays44cy0","Jammyaa","Jammyaa"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8yMb+aWk7ITe28LstCyYogJK+EHCmWOo7JfVtZsiWmE"},"signature":"G20P00sFgVydL9RTm22mi6DhV0u2pePuhZGWJpVzrLRDNyA3v1VtOl5E9raHZY1VMzGjm49QgiIraF+0g8PTkA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hg4qmk53c6jwyvcw49fq05upgaqca4ays44cy0","send":"","pkg_path":"gno.land/r/demo/users","func":"AddGnome","args":["g1hg4qmk53c6jwyvcw49fq05upgaqca4ays44cy0","Jammyaa"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8yMb+aWk7ITe28LstCyYogJK+EHCmWOo7JfVtZsiWmE"},"signature":"rCCrxVctfVJOD6AWbRSGgFNvZCX/mNvbuWSdGZGdc1xBhUouDbgh5U7jPh3p/W6hn4DL7LUy/0Ak4LQqul4XkA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hg4qmk53c6jwyvcw49fq05upgaqca4ays44cy0","send":"","pkg_path":"gno.land/r/demo/users","func":"Register","args":["g1hg4qmk53c6jwyvcw49fq05upgaqca4ays44cy0","Jammyaa"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8yMb+aWk7ITe28LstCyYogJK+EHCmWOo7JfVtZsiWmE"},"signature":"NIZ4gzfyIc4lSyiL9YmyLjx5tnXhjgj69EBs4J2nt6FqtvzWudIISwoPpUZwQBkGFOOgOe8MvW++RNapnBtvRQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hg4qmk53c6jwyvcw49fq05upgaqca4ays44cy0","send":"","pkg_path":"gno.land/r/demo/store","func":"AddGnome","args":["1000","Gnome1"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A8yMb+aWk7ITe28LstCyYogJK+EHCmWOo7JfVtZsiWmE"},"signature":"NKBt5oihhP4p4gil9vj3WUL4zwj9CVsVSCXPNfb7GJVhtCFWYbMQWsRtYSCjCyO4f1wB7Xt23UY3Lymdyfd6gw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fxawnjj37whzv5ff2qgxvydayscm6smgz4nfpg","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"EHcldu9HmGhZ30GUBlzbK0rJ2wwns04nbsa7aFf6mkdnJcxPi3Zu7TChGpRoQBLvYYlyAD+aYiQiTNV2ywkLIg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12mc34xakl56jlaqwfdzhc3e8szhzr5akuwngts","send":"","pkg_path":"gno.land/r/moul/basics/hello/v1","func":"Hello","args":null}],"fee":{"gas_wanted":"500000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArmHQKfxbuDnYgy43e75CACUHCbZndpSS5twOqFZqybc"},"signature":"oELBzUJARSoKEBB2Erp4CgLCx/d0xAz0MiedyfmZusIlP28RThBbT/qEtY5WM3ndDXzPFfPNNaqsTgNduPf7pg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12mc34xakl56jlaqwfdzhc3e8szhzr5akuwngts","send":"","pkg_path":"gno.land/r/moul/basics/args/v1","func":"Hello","args":["Universe"]}],"fee":{"gas_wanted":"500000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArmHQKfxbuDnYgy43e75CACUHCbZndpSS5twOqFZqybc"},"signature":"UcCDhWeFTqkX8A5KKFbkgGaqwVuzx5hMpPYryI8Z3lQmwC6kmyiH4r4zZGoV4o0ZEzRQ/wMV1BEC6MNJZIbdng=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g127ky7daegse0n86c6wnglz0gyqfh3cxvgu6aje","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"zrLqsdyP9iiHmyTOBbtxDGaqFEPFvWOcRYmnYJmhyLZxSu67dRYrgLtC5Lbp0tYXKCb3kxWGbvbfFAz7XKwpFg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1vexff484jg257zls58xwrmpmyjeg6re5fvrjhp","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"5uIiaPawrC99V4xMSc7TxtlimlLgmTus2fT+2v/fZY9TujnM6ZVA2PVIkMRS0HsQB58wnfvFPzt+Cr6RVhKWKw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1vexff484jg257zls58xwrmpmyjeg6re5fvrjhp","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","“NOD1E”",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3rnGgouKuRVSdatzhmABq2/4tVj2BjCadF1itVfwc0h"},"signature":"w7xojBjG0/Zmh/Zg2jnMrBrLEqSzXp0osZO3iDUMpD8SpNszWSHqWd9RdiKhgUApO9X9yZ/M+HrjXG45kyS5Eg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1354kqcxeyydngzjrgfr5h0llepmhtuc9m92hhr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"LenyHFOHnVVT04W/R0w5HUEeVY9vwHdkZGBSD3Con+AC7t/dIdHwlRkQ1kdKVbdJxpYEvMfPfXAtRtuRZn8EkA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1354kqcxeyydngzjrgfr5h0llepmhtuc9m92hhr","package":{"Name":"demo","Path":"gno.land/r/demo/tutorial_test","Files":[{"Name":"contract.gno","Body":"package demo\n\nfunc Hello(name string) string {\n  return \"Hello \" + name + \"!\"\n}\n"},{"Name":"contract_test.gno","Body":"package demo\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n  {\n    got := Hello(\"People\")\n    expected := \"Hello People!\"\n    if got != expected {\n      t.Fatalf(\"expected %q, got %q.\", expected, got)\n    }\n  }\n  {\n    got := Hello(\"\")\n    expected := \"Hello !\"\n    // expected := \"Hello People!\"\n    if got != expected {\n      t.Fatalf(\"expected %q, got %q.\", expected, got)\n    }\n  } \n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AomSvQQ/bqWcNxBdsuCx/IE2xg4f0jPfTAtvj8BVvmwz"},"signature":"VgRlWgXA2NAH5kdQ1o/HocjcNWH7xYLlhK8GIVJfxPUxILWRWFvHIXj55jn1d6TKvr+1dpEfplBdDx2bzcQf0w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1354kqcxeyydngzjrgfr5h0llepmhtuc9m92hhr","send":"","pkg_path":"gno.land/r/demo/tutorial_test","func":"Hello","args":["Welcome to GNOLAND on Testnet3"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AomSvQQ/bqWcNxBdsuCx/IE2xg4f0jPfTAtvj8BVvmwz"},"signature":"8JapL5k8KENaAfP7XC3WaX5Ii6WpkLCLpbzKpEgB30Uoj3nTSnlexUhZVGFh1mDChBmL2gt6ZCCuZqZpyb2IYg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xe73a0szq0ufunsalz7lxrmnqdd8guz8hyhzzm","send":"","pkg_path":"gno.land/r/moul/basics/data/v1","func":"Add","args":["42"]}],"fee":{"gas_wanted":"500000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmYCg0B1HRxSHcEQfFTZlu6y8FzPUbrU70TQSKYUSLIz"},"signature":"trRg5rEXBFcmo0FJc8yngpK/M2pu3yizT51niQIBKAV57we/Gyk4doBObreFJw2TmhbjdIgheaJSwH2uevrpaw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xe73a0szq0ufunsalz7lxrmnqdd8guz8hyhzzm","send":"","pkg_path":"gno.land/r/moul/basics/data/v1","func":"Add","args":["101"]}],"fee":{"gas_wanted":"500000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmYCg0B1HRxSHcEQfFTZlu6y8FzPUbrU70TQSKYUSLIz"},"signature":"DaY19w6RbL17U5R77BAfqF3RlPNz4zGVPPFlkbNkYCl7+EGgsmIr9yBnehRyP8VZ8SjyxomHfF5skxMUGRC3hA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xe73a0szq0ufunsalz7lxrmnqdd8guz8hyhzzm","send":"","pkg_path":"gno.land/r/moul/basics/data/v1","func":"Add","args":["111"]}],"fee":{"gas_wanted":"500000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmYCg0B1HRxSHcEQfFTZlu6y8FzPUbrU70TQSKYUSLIz"},"signature":"n166mUqDtb+UX0y5w3X1DFl5w9AkTmBg5Ba4qfo1v+Y2eS3yqCfQTG37M/yIQFZyWJUSPWYejCmxZHO2zcrl6g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xe73a0szq0ufunsalz7lxrmnqdd8guz8hyhzzm","send":"","pkg_path":"gno.land/r/moul/basics/data/v1","func":"Add","args":["210"]}],"fee":{"gas_wanted":"500000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmYCg0B1HRxSHcEQfFTZlu6y8FzPUbrU70TQSKYUSLIz"},"signature":"OFFwmn7XN+QKkZg56QOjjulf7+TbUVWvHczuJfcTKyZnoqG3RyNkw2dLJJTOYZ3lRhPU7uR0ni7xIph3Me//eg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xe73a0szq0ufunsalz7lxrmnqdd8guz8hyhzzm","send":"","pkg_path":"gno.land/r/moul/basics/data/v1","func":"Add","args":["1000"]}],"fee":{"gas_wanted":"500000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmYCg0B1HRxSHcEQfFTZlu6y8FzPUbrU70TQSKYUSLIz"},"signature":"tNrDRmLjcD4Lo/Iez6QLHlWXAxq8lHsSQcz9dj+YD+x6mUogU9aQjYBFHE/0U5zY7kbxJgO8GDKYuABJZN+9dg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xe73a0szq0ufunsalz7lxrmnqdd8guz8hyhzzm","send":"","pkg_path":"gno.land/r/moul/basics/render/v1","func":"Render","args":["hello"]}],"fee":{"gas_wanted":"500000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmYCg0B1HRxSHcEQfFTZlu6y8FzPUbrU70TQSKYUSLIz"},"signature":"QfxeWRJViUiRgwC3wjBUsacitbePE9Gj5/rLpRH3q2AQ325nfxyREJHS6nE07oG19wbK8Q7YAWzKcbEjwUnleA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1xe73a0szq0ufunsalz7lxrmnqdd8guz8hyhzzm","send":"","pkg_path":"gno.land/r/moul/basics/data/v1","func":"Add","args":["forbar"]}],"fee":{"gas_wanted":"500000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmYCg0B1HRxSHcEQfFTZlu6y8FzPUbrU70TQSKYUSLIz"},"signature":"sbKtVr2iop0LvlyTNykCszltEfGtRZmicHN5ulfmm/1ACL2QrwIKvdxNl7AyUMZVGybGZUovWTrZa9VEHRrJWA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12mc34xakl56jlaqwfdzhc3e8szhzr5akuwngts","send":"","pkg_path":"gno.land/r/moul/basics/render/v1","func":"Render","args":["hello"]}],"fee":{"gas_wanted":"500000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArmHQKfxbuDnYgy43e75CACUHCbZndpSS5twOqFZqybc"},"signature":"V4HNhJHt3mlq/tDi/y79kCdZplV6JMBNBbnTrGFxQ+si054sc44ZVVWbe2+MuRgv6eIVH2IWvHTUyKFtchd63A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12mc34xakl56jlaqwfdzhc3e8szhzr5akuwngts","send":"","pkg_path":"gno.land/r/moul/basics/render/v1","func":"Render","args":["foobar"]}],"fee":{"gas_wanted":"500000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArmHQKfxbuDnYgy43e75CACUHCbZndpSS5twOqFZqybc"},"signature":"mqcEMINw5URlISNDDDeycoF9ZM3L77TETRUg4S0OlFJU+OrbXHb7sLZ2TjDvlfX2rT3TUh67L8RtEdDvXUcaOQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g12mc34xakl56jlaqwfdzhc3e8szhzr5akuwngts","send":"","pkg_path":"gno.land/r/moul/basics/import/v1","func":"Render","args":["y"]}],"fee":{"gas_wanted":"500000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArmHQKfxbuDnYgy43e75CACUHCbZndpSS5twOqFZqybc"},"signature":"Xcoq4IWs8BtVP4pbz+V1xCOa5jEWsQwdaPNwUWUArr4CMrs8mgkTF2kBrpTeyP2VqJPFOGuARty/KpawXuvE1A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u2r6h5l6mzfjd9gkwgwqc0jen5fxtsp0lmwkp3","send":"","pkg_path":"gno.land/r/moul/basics/import/v1","func":"Render","args":["y"]}],"fee":{"gas_wanted":"500000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyMsEkve6kaKmF6EfqiKaJdcRnbNPhofUfylNbTZr9fl"},"signature":"oCduorxrh+WV56BDrbzCY+UOD5gtyUCzaEUDkNKqcZcfphsXiZJEeANJJXaxZiquPHgBIIT0WNOvsXJhHmJX2Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u2r6h5l6mzfjd9gkwgwqc0jen5fxtsp0lmwkp3","send":"","pkg_path":"gno.land/r/moul/basics/grc20/v1","func":"MyBalance","args":null}],"fee":{"gas_wanted":"500000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyMsEkve6kaKmF6EfqiKaJdcRnbNPhofUfylNbTZr9fl"},"signature":"jDKdBgMUG2jXzBBmjwIgUtWsBhR0PKIkx+jD6edX1XsMb6m6YfTEw9eFnGUduwVpLs1OQDrIQCN02/H6iplZdw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u2r6h5l6mzfjd9gkwgwqc0jen5fxtsp0lmwkp3","send":"","pkg_path":"gno.land/r/moul/basics/vault/v1","func":"Deposit","args":["10000","g1myrecoveryaddress"]}],"fee":{"gas_wanted":"500000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyMsEkve6kaKmF6EfqiKaJdcRnbNPhofUfylNbTZr9fl"},"signature":"wGxqYGUlpJ82n0nBDAnD/e0twKTPi3Kl91guiVMKuAguYoj0n/8jQXPnnDOzxLZM6jPq0Ea6Suepr2f01nzE3Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u2r6h5l6mzfjd9gkwgwqc0jen5fxtsp0lmwkp3","send":"","pkg_path":"gno.land/r/moul/basics/vault/v1","func":"MyBalance","args":null}],"fee":{"gas_wanted":"500000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyMsEkve6kaKmF6EfqiKaJdcRnbNPhofUfylNbTZr9fl"},"signature":"xKXAifuDsOfSAOdwJhhuNZbpXWJAR1fVMsgYmlg5mopPhlgkSU3DRF5zOeU0eMJiNug50QDSj2Kyt5us4ACwmQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1rq6ws4sgkvpd974nud8p864u9hxcpwkykuunsw","to_address":"g1z836ejfsgsv3h2tapp7w5j0chpkdsv78pf4fgd","amount":"12000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AszOteEaoAEfs8FR4jk+sBdbh88zKn2keyRyhxXTFDjl"},"signature":"LaW7RixjESwsW+LXGaIe6ZG620bDmbHkHAmbdoeHfPRPuHHzoF9Qr21XgFbbpdw/HJVFg+8XUgNxd57REvUY8g=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1tk02flpl7zy62e99vngwcz9zmssv55mghv2xul","to_address":"g1rq6ws4sgkvpd974nud8p864u9hxcpwkykuunsw","amount":"12000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AiXr5ZWQKHZq4sr0W0Lf9BGXFxwIC2+OepUumV6wgk12"},"signature":"DE32M4JcIooIaptZknQ2iHhcotQbR5+IiqWsdrgzNqwUT45R1dXHM+1fioJsP0f/bnsB/+M7CUj2mWKYipu1MA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1fk3gy8epap6a5vgde4sry2fsl77eutjkw3qfxw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"2xRQNM2FLhb/eJTr83ptKLn8HLY/suhG7WKoQefkYgUgHe0R/wKWhcK/1Utx+RVwnGNq0cGbyuOCC3LapmpwLQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fk3gy8epap6a5vgde4sry2fsl77eutjkw3qfxw","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","odinec",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aw1nEz/k2UycmSMrwmXEtoV5Amkqww1QwHNPESODyhW1"},"signature":"oMFYRDUUKIKKfEVqlK7SWg9/MTpc+xfsAqgdVheRxQdvB/phH+fv3W5Cn6KzAOlqzUegtHKpzTNA4znWhT1IHg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fk3gy8epap6a5vgde4sry2fsl77eutjkw3qfxw","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["odinec"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aw1nEz/k2UycmSMrwmXEtoV5Amkqww1QwHNPESODyhW1"},"signature":"fcDkJsPr3UVqi/Z5hhAV/e5a2+qlCYriB28sLJgkCzpvt5GWfMpA/Co83jL+G5WDNeqhaAGFLvWfcQAZEEfl2w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1fk3gy8epap6a5vgde4sry2fsl77eutjkw3qfxw","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["647","Wonderful project Gno Land","https://twitter.com/Odinec2000/status/1620696624858271744"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aw1nEz/k2UycmSMrwmXEtoV5Amkqww1QwHNPESODyhW1"},"signature":"3CnwIGNO5tmkC+s2CRQmCEijuPeU46hTeeOaNhTx1ilIyHMr0je+sPbR+qZR4mihgOEO+a/mvm9boVcmIq+FhQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1z83kgppdpn3akc65h03muh7gvdqyxxzqapj5zc","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Jayti8RWavp95hGgymUmcqxpY4M6V0rU4hbP80C4h/U/ryvIGZP5YWngCHgGq0JgefSnLfVwOAWtiUsxZXEzLQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1z83kgppdpn3akc65h03muh7gvdqyxxzqapj5zc","to_address":"g1c77nzlhwsqyejev4cezpx83yj6u88fvtamhgpm","amount":"100000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlOnnJEmoR9+4IA6PiFhUassTvu493ZHC058tC+3Q59A"},"signature":"0cjEcQ+AezQrHBtssO6PFmLBvSNb7xRS6jbEJLBo/HQGfGvXE+nrozZ3wyZ4bx4x4jzAutFJjZI9s98KiHZKbQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14pxh3upfrh2vgjatdar29xumpdj78szy7a94h7","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1","Testes","Just to see if it works"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlynKWH86BcN8U4OODgoBVZLLIXItqAj+PJ6yVpecQ8i"},"signature":"Usojme+ZJB31nQJ4SgfwihSQnXlbmq8j5QpzIb5MbBJKvMeJhp/to0OcK3zx660d/SQ70tIhcL8mjGcKumo/PQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14pxh3upfrh2vgjatdar29xumpdj78szy7a94h7","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","Tea",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlynKWH86BcN8U4OODgoBVZLLIXItqAj+PJ6yVpecQ8i"},"signature":"bEiGKN+6+Ry/tN8H8o5SkkQRIAXpZt3hsht9zqLl3Ox94CvrRRYtWF2TNi2Npf349xCjkfsTo7Ez/AX6s2yFuw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rh6gaadmk3a2pfqt88aetqt0tzwzjc7kxpt2m9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"BCBgX2xjnkCyXLxqJcUYDbCQpqFaXE8fT6G8+Tdx+bQd3gcL1LzFxiFqeFu+oVa0KL6cQ92dt3w3KlRRAxOpqA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rh6gaadmk3a2pfqt88aetqt0tzwzjc7kxpt2m9","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","Suzik",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/WyhZFI1ZAkEJktvOhpcAq3AvduialZlSgqvAIVvoDQ"},"signature":"V3ICmFcHT0mN2YlnELVIhoaCGMpR3p/JLZsxX90K++NfKqwFpm7RxQvErl8+41a/dLe/T5trrlFazWlmS2TWYg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1rjkunvn4m6ncwl2562m7z8pwgxavej93v8jfu5","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"rH03S9fhm4VZmaCkEicc//XR/ECCNzpNdg2Px4Q+G+VIkCfqfeMtuHLIUyx1Ayx21BIrce4gnDkld8ZVRBfilg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rjkunvn4m6ncwl2562m7z8pwgxavej93v8jfu5","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","lastovets",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9yvf6Gk3+HmQkMJwB6y8BUze2tJ6QiP/WT/qzfqY8I3"},"signature":"EiK5jnHlXI7isnG5/aKiFqS+53XxGzffJi2Bu9PJWHVuBvaCGQnYkzayyRLzdWF3mvMfcOOLPVkxM+DKsiaNCw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rjkunvn4m6ncwl2562m7z8pwgxavej93v8jfu5","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["lastovets"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9yvf6Gk3+HmQkMJwB6y8BUze2tJ6QiP/WT/qzfqY8I3"},"signature":"CRyQPBc4Muy2nSpXGUo2Q7UJvUYcZUgxJRCkYMi5tkgGAIv37bh8tStGbCXqUzaF4yVDro++ZPvNnOuULv7VZg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1rjkunvn4m6ncwl2562m7z8pwgxavej93v8jfu5","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["648","Lastovets Gnoland Node","Node of Lastovets team"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9yvf6Gk3+HmQkMJwB6y8BUze2tJ6QiP/WT/qzfqY8I3"},"signature":"fxWj3lZ7WZAWHVT93PRlE42ngLxBvi8FOplR+MR8ulVmKywVVe/u/6Lrip7DT1CnffDf3wNq5cE3kiwKi5i1OQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1nh4asd62klznxgu0938g47lcudczfadpfenyx6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"B9LMyMnyBMgsQ9Wj/eXTxf02aT8owM8LWSsqHT0LcqMqSjm3VvNxmbGnvDEwMMBKgQGQXRSQaa6NZtPIoK2SgQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1syg02w0k8hf20092ee3dmr2ntt2rt3nzjcffmd","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"53XecAm0wsklP4Xov72ZCYsrWSVtelZ+YOCJ/micUd4j/Fi5RhgGxTQ2rPAeUMr8aFl0NlWo65Z26BSmPVcr1Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1du45jt5fj4lt89msr3h54p07eg8e4r805ars4g","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"vC7PbM4wEEEliAr5GhjjFyeFghLJoTb4ZAfy1Z/uo7QPukJeCKtGSKl+LgsGmoOh86iGQ+KhRc/g/Dh90s6LvA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1du45jt5fj4lt89msr3h54p07eg8e4r805ars4g","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","seon_city",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7FJZKIv7Tiaq6Jsz6RchSSw9pVOrpEzlghwQg/T2WiN"},"signature":"vwYQfaam7CDdOtyGUxTh08tXwHR7YDTaWpGJvMvhUdFn9jGyTC0YaZSmPOtuXHNHVKvsFDo7bdIgT/WyLwcSvg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1du45jt5fj4lt89msr3h54p07eg8e4r805ars4g","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["seon_city"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7FJZKIv7Tiaq6Jsz6RchSSw9pVOrpEzlghwQg/T2WiN"},"signature":"NevXRV2NEZ0Zhm5r+2KSGMDIk2Ca9z6v6K69iJ6ahAA6cUvjjSUrFrlEBX/hRS6Qb5jDiBUPaCFDVlwgwpz4LQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1du45jt5fj4lt89msr3h54p07eg8e4r805ars4g","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["649","GNO Land - The Smart Contract Platform","https://twitter.com/seon_city/status/1621072494726619137"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7FJZKIv7Tiaq6Jsz6RchSSw9pVOrpEzlghwQg/T2WiN"},"signature":"HWQjOqvA3QIEMq/I9quhqJdMrSOgrA9W2cZ4zq00Gt8QyQaZwfAtX8+1mVPPNfLSxCsF+dBL5HJ30vk4qhGfhg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1ghcu4vumd039thsenuy85aesgl40ppmhuuf5h6","amount":"200000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"j2TS3dEhc9pHbS2C/OdVH4Ra3FXoLzOHk2Dz2Ozg2l0rbFs9qcMWpyj3oJlOJztEAt9bZvKyHo4gkFfSXWnQ2g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14684n5sxnuyh5dq50ja8tavtp68u5rzj2xqclu","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"aibRtLSBk7+iNk/dsjcRJyzwCcuxbHrfcZLoIEFbOXBjmROE5Wq34tqElXceK8gtlP1YqW2fVx1u2mj+gARG9g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14684n5sxnuyh5dq50ja8tavtp68u5rzj2xqclu","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","narko2t1",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AleomXbJkqdMAQDur0eDpWwuGhQecfFBVNpQQuBFQEjl"},"signature":"oBGSRwcnXM/s1BNL0VCIQdHgkjfAIhE6UX45wh24MYx9lE6TskGx3AZX3s1DCwLUw01qVf9VKWn9300tkYNwbQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14684n5sxnuyh5dq50ja8tavtp68u5rzj2xqclu","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["narko2t1"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AleomXbJkqdMAQDur0eDpWwuGhQecfFBVNpQQuBFQEjl"},"signature":"U4qpQg7uQ7J7olKx/+ZQ/iBfZ4kOmslm/sHHT1J0Zo1m1vDT6s3V/0YWWNo5ovG13xu9mYYKwnH4qbDaEmkX0w=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14684n5sxnuyh5dq50ja8tavtp68u5rzj2xqclu","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["650","Пераклад артыкула па ўстаноўцы ноды GnoLand на беларускую мову","https://teletype.in/@narko2t1/jwZOAUXHIGx"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AleomXbJkqdMAQDur0eDpWwuGhQecfFBVNpQQuBFQEjl"},"signature":"77qqpeZKgyo/z/WgANbXGk+xvxASOrDUXlIUXOe4WWsYA0NY/sfosrPChpRXPZkZcTzkazqfWbzIYNU9c7jTlQ=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1vcupa8p07jrua73mmfve0ht0p8j0xcuxm9scae","to_address":"g1z26qsal3w2txaw58egw8nmtccwcd0tzuaj7f55","amount":"1999999ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A2p9kq+PQbi5kNy4fWLHfCebiVx8KETsOBW10BLIDCTI"},"signature":"qvGdeHg5+OUZjLA0oLa17ALVU1XhwoVuWIb2Uj8JnTVjqM9IPgL9fiYmTcqbeUV21uAm/h0en2dMEsM2KfgLMQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"dVlOx7SAICiRczqZ3KDjymjl36hI/AH7lepHOjrVI41RWMFps+pQ0l9iANDUvg2hau/PRvfIIijbMayE2JKWwA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g13wh5u5gm79vlhsesv7v2t6ku368rux856dwruy","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"SD47unyvMtjnRfZeActrNAn2nxSmZLv0Ox3ITnUPVYUwKXhOVOxdmtYE6mSBqg9DqNSjBeiFN2MAccmxK6CyVw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13wh5u5gm79vlhsesv7v2t6ku368rux856dwruy","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","sir_birma",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AptNkVoa79ZZxzIryuMRuQkXaricxc4YWJDWn82lKnPU"},"signature":"R1XwsI0J5mMaxTO5mTJFl9N8fIsqT7NS9uOMebi47F87eBr8QhwtUzjgwhkgBi3+gBq/ZOPXOgqREWAu/un6zQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13wh5u5gm79vlhsesv7v2t6ku368rux856dwruy","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["sir_birma"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AptNkVoa79ZZxzIryuMRuQkXaricxc4YWJDWn82lKnPU"},"signature":"KV16IBwddpva8Vo8w4NpoeZiz2BiiPp/TW2DJewhXbdc1iARENPG/e5SwnVuO0xxHovORV/BmRQaUEbNklBydg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g13wh5u5gm79vlhsesv7v2t6ku368rux856dwruy","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["651","Welcome to GN0 Land","https://twitter.com/sir_birma/status/1621403119937638400"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AptNkVoa79ZZxzIryuMRuQkXaricxc4YWJDWn82lKnPU"},"signature":"PaIDQdAwajiyLStae8mD4DpSyhd392NyDFC6rGH/jzV1+Z0M3lXDwycxP2Ag0bHr9O2HiXyHp1xqES3jYC4TDw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"flow","Path":"gno.land/p/demo/flow_test1","Files":[{"Name":"LICENSE.md","Body":"https://github.com/mxk/go-flowrate/blob/master/LICENSE\nBSD 3-Clause \"New\" or \"Revised\" License\n\nCopyright (c) 2014 The Go-FlowRate Authors. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n * Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n\n * Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the\n   distribution.\n\n * Neither the name of the go-flowrate project nor the names of its\n   contributors may be used to endorse or promote products derived\n   from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"},{"Name":"README.md","Body":"Data Flow Rate Control\n======================\n\nTo download and install this package run:\n\ngo get github.com/mxk/go-flowrate/flowrate\n\nThe documentation is available at:\n\nhttp://godoc.org/github.com/mxk/go-flowrate/flowrate\n"},{"Name":"flow.gno","Body":"//\n// Written by Maxim Khitrov (November 2012)\n//\n// XXX modified to disable blocking, time.Sleep().\n\n// Package flow provides the tools for monitoring and limiting the flow rate\n// of an arbitrary data stream.\npackage flow\n\nimport (\n\t\"math\"\n\t// \"sync\"\n\t\"time\"\n)\n\n// Monitor monitors and limits the transfer rate of a data stream.\ntype Monitor struct {\n\t// mu      sync.Mutex    // Mutex guarding access to all internal fields\n\tactive  bool          // Flag indicating an active transfer\n\tstart   time.Duration // Transfer start time (clock() value)\n\tbytes   int64         // Total number of bytes transferred\n\tsamples int64         // Total number of samples taken\n\n\trSample float64 // Most recent transfer rate sample (bytes per second)\n\trEMA    float64 // Exponential moving average of rSample\n\trPeak   float64 // Peak transfer rate (max of all rSamples)\n\trWindow float64 // rEMA window (seconds)\n\n\tsBytes int64         // Number of bytes transferred since sLast\n\tsLast  time.Duration // Most recent sample time (stop time when inactive)\n\tsRate  time.Duration // Sampling rate\n\n\ttBytes int64         // Number of bytes expected in the current transfer\n\ttLast  time.Duration // Time of the most recent transfer of at least 1 byte\n}\n\n// New creates a new flow control monitor. Instantaneous transfer rate is\n// measured and updated for each sampleRate interval. windowSize determines the\n// weight of each sample in the exponential moving average (EMA) calculation.\n// The exact formulas are:\n//\n//\tsampleTime = currentTime - prevSampleTime\n//\tsampleRate = byteCount / sampleTime\n//\tweight     = 1 - exp(-sampleTime/windowSize)\n//\tnewRate    = weight*sampleRate + (1-weight)*oldRate\n//\n// The default values for sampleRate and windowSize (if \u003c= 0) are 100ms and 1s,\n// respectively.\nfunc New(sampleRate, windowSize time.Duration) *Monitor {\n\tif sampleRate = clockRound(sampleRate); sampleRate \u003c= 0 {\n\t\tsampleRate = 5 * clockRate\n\t}\n\tif windowSize \u003c= 0 {\n\t\twindowSize = 1 * time.Second\n\t}\n\tnow := clock()\n\treturn \u0026Monitor{\n\t\tactive:  true,\n\t\tstart:   now,\n\t\trWindow: windowSize.Seconds(),\n\t\tsLast:   now,\n\t\tsRate:   sampleRate,\n\t\ttLast:   now,\n\t}\n}\n\n// Update records the transfer of n bytes and returns n. It should be called\n// after each Read/Write operation, even if n is 0.\nfunc (m *Monitor) Update(n int) int {\n\t// m.mu.Lock()\n\tm.update(n)\n\t// m.mu.Unlock()\n\treturn n\n}\n\n// Hack to set the current rEMA.\nfunc (m *Monitor) SetREMA(rEMA float64) {\n\t// m.mu.Lock()\n\tm.rEMA = rEMA\n\tm.samples++\n\t// m.mu.Unlock()\n}\n\n// IO is a convenience method intended to wrap io.Reader and io.Writer method\n// execution. It calls m.Update(n) and then returns (n, err) unmodified.\nfunc (m *Monitor) IO(n int, err error) (int, error) {\n\treturn m.Update(n), err\n}\n\n// Done marks the transfer as finished and prevents any further updates or\n// limiting. Instantaneous and current transfer rates drop to 0. Update, IO, and\n// Limit methods become NOOPs. It returns the total number of bytes transferred.\nfunc (m *Monitor) Done() int64 {\n\t// m.mu.Lock()\n\tif now := m.update(0); m.sBytes \u003e 0 {\n\t\tm.reset(now)\n\t}\n\tm.active = false\n\tm.tLast = 0\n\tn := m.bytes\n\t// m.mu.Unlock()\n\treturn n\n}\n\n// timeRemLimit is the maximum Status.TimeRem value.\nconst timeRemLimit = 999*time.Hour + 59*time.Minute + 59*time.Second\n\n// Status represents the current Monitor status. All transfer rates are in bytes\n// per second rounded to the nearest byte.\ntype Status struct {\n\tActive   bool          // Flag indicating an active transfer\n\tStart    time.Time     // Transfer start time\n\tDuration time.Duration // Time period covered by the statistics\n\tIdle     time.Duration // Time since the last transfer of at least 1 byte\n\tBytes    int64         // Total number of bytes transferred\n\tSamples  int64         // Total number of samples taken\n\tInstRate int64         // Instantaneous transfer rate\n\tCurRate  int64         // Current transfer rate (EMA of InstRate)\n\tAvgRate  int64         // Average transfer rate (Bytes / Duration)\n\tPeakRate int64         // Maximum instantaneous transfer rate\n\tBytesRem int64         // Number of bytes remaining in the transfer\n\tTimeRem  time.Duration // Estimated time to completion\n\tProgress Percent       // Overall transfer progress\n}\n\nfunc (s Status) String() string {\n\treturn \"STATUS{}\"\n}\n\n// Status returns current transfer status information. The returned value\n// becomes static after a call to Done.\nfunc (m *Monitor) Status() Status {\n\t// m.mu.Lock()\n\tnow := m.update(0)\n\ts := Status{\n\t\tActive:   m.active,\n\t\tStart:    clockToTime(m.start),\n\t\tDuration: m.sLast - m.start,\n\t\tIdle:     now - m.tLast,\n\t\tBytes:    m.bytes,\n\t\tSamples:  m.samples,\n\t\tPeakRate: round(m.rPeak),\n\t\tBytesRem: m.tBytes - m.bytes,\n\t\tProgress: percentOf(float64(m.bytes), float64(m.tBytes)),\n\t}\n\tif s.BytesRem \u003c 0 {\n\t\ts.BytesRem = 0\n\t}\n\tif s.Duration \u003e 0 {\n\t\trAvg := float64(s.Bytes) / s.Duration.Seconds()\n\t\ts.AvgRate = round(rAvg)\n\t\tif s.Active {\n\t\t\ts.InstRate = round(m.rSample)\n\t\t\ts.CurRate = round(m.rEMA)\n\t\t\tif s.BytesRem \u003e 0 {\n\t\t\t\tif tRate := 0.8*m.rEMA + 0.2*rAvg; tRate \u003e 0 {\n\t\t\t\t\tns := float64(s.BytesRem) / tRate * 1e9\n\t\t\t\t\tif ns \u003e float64(timeRemLimit) {\n\t\t\t\t\t\tns = float64(timeRemLimit)\n\t\t\t\t\t}\n\t\t\t\t\ts.TimeRem = clockRound(time.Duration(ns))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// m.mu.Unlock()\n\treturn s\n}\n\n// Limit restricts the instantaneous (per-sample) data flow to rate bytes per\n// second. It returns the maximum number of bytes (0 \u003c= n \u003c= want) that may be\n// transferred immediately without exceeding the limit. If block == true, the\n// call blocks until n \u003e 0. want is returned unmodified if want \u003c 1, rate \u003c 1,\n// or the transfer is inactive (after a call to Done).\n//\n// At least one byte is always allowed to be transferred in any given sampling\n// period. Thus, if the sampling rate is 100ms, the lowest achievable flow rate\n// is 10 bytes per second.\n//\n// For usage examples, see the implementation of Reader and Writer in io.go.\nfunc (m *Monitor) Limit(want int, rate int64, block bool) (n int) {\n\tif block {\n\t\tpanic(\"blocking not yet supported\")\n\t}\n\tif want \u003c 1 || rate \u003c 1 {\n\t\treturn want\n\t}\n\t// m.mu.Lock()\n\n\t// Determine the maximum number of bytes that can be sent in one sample\n\tlimit := round(float64(rate) * m.sRate.Seconds())\n\tif limit \u003c= 0 {\n\t\tlimit = 1\n\t}\n\n\t_ = m.update(0)\n\t/* XXX\n\t// If block == true, wait until m.sBytes \u003c limit\n\tif now := m.update(0); block {\n\t\tfor m.sBytes \u003e= limit \u0026\u0026 m.active {\n\t\t\tnow = m.waitNextSample(now)\n\t\t}\n\t}\n\t*/\n\n\t// Make limit \u003c= want (unlimited if the transfer is no longer active)\n\tif limit -= m.sBytes; limit \u003e int64(want) || !m.active {\n\t\tlimit = int64(want)\n\t}\n\t// m.mu.Unlock()\n\n\tif limit \u003c 0 {\n\t\tlimit = 0\n\t}\n\treturn int(limit)\n}\n\n// SetTransferSize specifies the total size of the data transfer, which allows\n// the Monitor to calculate the overall progress and time to completion.\nfunc (m *Monitor) SetTransferSize(bytes int64) {\n\tif bytes \u003c 0 {\n\t\tbytes = 0\n\t}\n\t// m.mu.Lock()\n\tm.tBytes = bytes\n\t// m.mu.Unlock()\n}\n\n// update accumulates the transferred byte count for the current sample until\n// clock() - m.sLast \u003e= m.sRate. The monitor status is updated once the current\n// sample is done.\nfunc (m *Monitor) update(n int) (now time.Duration) {\n\tif !m.active {\n\t\treturn\n\t}\n\tif now = clock(); n \u003e 0 {\n\t\tm.tLast = now\n\t}\n\tm.sBytes += int64(n)\n\tif sTime := now - m.sLast; sTime \u003e= m.sRate {\n\t\tt := sTime.Seconds()\n\t\tif m.rSample = float64(m.sBytes) / t; m.rSample \u003e m.rPeak {\n\t\t\tm.rPeak = m.rSample\n\t\t}\n\n\t\t// Exponential moving average using a method similar to *nix load\n\t\t// average calculation. Longer sampling periods carry greater weight.\n\t\tif m.samples \u003e 0 {\n\t\t\tw := math.Exp(-t / m.rWindow)\n\t\t\tm.rEMA = m.rSample + w*(m.rEMA-m.rSample)\n\t\t} else {\n\t\t\tm.rEMA = m.rSample\n\t\t}\n\t\tm.reset(now)\n\t}\n\treturn\n}\n\n// reset clears the current sample state in preparation for the next sample.\nfunc (m *Monitor) reset(sampleTime time.Duration) {\n\tm.bytes += m.sBytes\n\tm.samples++\n\tm.sBytes = 0\n\tm.sLast = sampleTime\n}\n\n/*\n// waitNextSample sleeps for the remainder of the current sample. The lock is\n// released and reacquired during the actual sleep period, so it's possible for\n// the transfer to be inactive when this method returns.\nfunc (m *Monitor) waitNextSample(now time.Duration) time.Duration {\n\tconst minWait = 5 * time.Millisecond\n\tcurrent := m.sLast\n\n\t// sleep until the last sample time changes (ideally, just one iteration)\n\tfor m.sLast == current \u0026\u0026 m.active {\n\t\td := current + m.sRate - now\n\t\t// m.mu.Unlock()\n\t\tif d \u003c minWait {\n\t\t\td = minWait\n\t\t}\n\t\ttime.Sleep(d)\n\t\t// m.mu.Lock()\n\t\tnow = m.update(0)\n\t}\n\treturn now\n}\n*/\n"},{"Name":"io.gno","Body":"//\n// Written by Maxim Khitrov (November 2012)\n//\n\npackage flow\n\nimport (\n\t\"errors\"\n\t\"io\"\n)\n\n// ErrLimit is returned by the Writer when a non-blocking write is short due to\n// the transfer rate limit.\nvar ErrLimit = errors.New(\"flowrate: flow rate limit exceeded\")\n\n// Limiter is implemented by the Reader and Writer to provide a consistent\n// interface for monitoring and controlling data transfer.\ntype Limiter interface {\n\tDone() int64\n\tStatus() Status\n\tSetTransferSize(bytes int64)\n\tSetLimit(new int64) (old int64)\n\tSetBlocking(new bool) (old bool)\n}\n\n// Reader implements io.ReadCloser with a restriction on the rate of data\n// transfer.\ntype Reader struct {\n\tio.Reader // Data source\n\t*Monitor  // Flow control monitor\n\n\tlimit int64 // Rate limit in bytes per second (unlimited when \u003c= 0)\n\tblock bool  // What to do when no new bytes can be read due to the limit\n}\n\n// NewReader restricts all Read operations on r to limit bytes per second.\nfunc NewReader(r io.Reader, limit int64) *Reader {\n\treturn \u0026Reader{r, New(0, 0), limit, false} // XXX default false\n}\n\n// Read reads up to len(p) bytes into p without exceeding the current transfer\n// rate limit. It returns (0, nil) immediately if r is non-blocking and no new\n// bytes can be read at this time.\nfunc (r *Reader) Read(p []byte) (n int, err error) {\n\tp = p[:r.Limit(len(p), r.limit, r.block)]\n\tif len(p) \u003e 0 {\n\t\tn, err = r.IO(r.Reader.Read(p))\n\t}\n\treturn\n}\n\n// SetLimit changes the transfer rate limit to new bytes per second and returns\n// the previous setting.\nfunc (r *Reader) SetLimit(new int64) (old int64) {\n\told, r.limit = r.limit, new\n\treturn\n}\n\n// SetBlocking changes the blocking behavior and returns the previous setting. A\n// Read call on a non-blocking reader returns immediately if no additional bytes\n// may be read at this time due to the rate limit.\nfunc (r *Reader) SetBlocking(new bool) (old bool) {\n\tif new == true {\n\t\tpanic(\"blocking not yet supported\")\n\t}\n\told, r.block = r.block, new\n\treturn\n}\n\n// Close closes the underlying reader if it implements the io.Closer interface.\nfunc (r *Reader) Close() error {\n\tdefer r.Done()\n\tif c, ok := r.Reader.(io.Closer); ok {\n\t\treturn c.Close()\n\t}\n\treturn nil\n}\n\n// Writer implements io.WriteCloser with a restriction on the rate of data\n// transfer.\ntype Writer struct {\n\tio.Writer // Data destination\n\t*Monitor  // Flow control monitor\n\n\tlimit int64 // Rate limit in bytes per second (unlimited when \u003c= 0)\n\tblock bool  // What to do when no new bytes can be written due to the limit\n}\n\n// NewWriter restricts all Write operations on w to limit bytes per second. The\n// transfer rate and the default blocking behavior (true) can be changed\n// directly on the returned *Writer.\nfunc NewWriter(w io.Writer, limit int64) *Writer {\n\treturn \u0026Writer{w, New(0, 0), limit, false} // XXX default false\n}\n\n// Write writes len(p) bytes from p to the underlying data stream without\n// exceeding the current transfer rate limit. It returns (n, ErrLimit) if w is\n// non-blocking and no additional bytes can be written at this time.\nfunc (w *Writer) Write(p []byte) (n int, err error) {\n\tvar c int\n\tfor len(p) \u003e 0 \u0026\u0026 err == nil {\n\t\ts := p[:w.Limit(len(p), w.limit, w.block)]\n\t\tif len(s) \u003e 0 {\n\t\t\tc, err = w.IO(w.Writer.Write(s))\n\t\t} else {\n\t\t\treturn n, ErrLimit\n\t\t}\n\t\tp = p[c:]\n\t\tn += c\n\t}\n\treturn\n}\n\n// SetLimit changes the transfer rate limit to new bytes per second and returns\n// the previous setting.\nfunc (w *Writer) SetLimit(new int64) (old int64) {\n\told, w.limit = w.limit, new\n\treturn\n}\n\n// SetBlocking changes the blocking behavior and returns the previous setting. A\n// Write call on a non-blocking writer returns as soon as no additional bytes\n// may be written at this time due to the rate limit.\nfunc (w *Writer) SetBlocking(new bool) (old bool) {\n\told, w.block = w.block, new\n\treturn\n}\n\n// Close closes the underlying writer if it implements the io.Closer interface.\nfunc (w *Writer) Close() error {\n\tdefer w.Done()\n\tif c, ok := w.Writer.(io.Closer); ok {\n\t\treturn c.Close()\n\t}\n\treturn nil\n}\n"},{"Name":"io_test.gno","Body":"//\n// Written by Maxim Khitrov (November 2012)\n//\n\npackage flow\n\nimport (\n\t\"bytes\"\n\t\"testing\"\n\t\"time\"\n\n\tios_test \"internal/os_test\"\n)\n\n// XXX ugh, I can't even sleep milliseconds.\n// XXX\n\nconst (\n\t_50ms  = 50 * time.Millisecond\n\t_100ms = 100 * time.Millisecond\n\t_200ms = 200 * time.Millisecond\n\t_300ms = 300 * time.Millisecond\n\t_400ms = 400 * time.Millisecond\n\t_500ms = 500 * time.Millisecond\n)\n\nfunc nextStatus(m *Monitor) Status {\n\tsamples := m.samples\n\tfor i := 0; i \u003c 30; i++ {\n\t\tif s := m.Status(); s.Samples != samples {\n\t\t\treturn s\n\t\t}\n\t\tios_test.Sleep(5 * time.Millisecond)\n\t}\n\treturn m.Status()\n}\n\nfunc TestReader(t *testing.T) {\n\tin := make([]byte, 100)\n\tfor i := range in {\n\t\tin[i] = byte(i)\n\t}\n\tb := make([]byte, 100)\n\tr := NewReader(bytes.NewReader(in), 100)\n\tstart := time.Now()\n\n\t// Make sure r implements Limiter\n\t_ = Limiter(r)\n\n\t// 1st read of 10 bytes is performed immediately\n\tif n, err := r.Read(b); n != 10 {\n\t\tt.Fatalf(\"r.Read(b) expected 10 (\u003cnil\u003e); got %v\", n)\n\t} else if err != nil {\n\t\tt.Fatalf(\"r.Read(b) expected 10 (\u003cnil\u003e); got %v (%v)\", n, err.Error())\n\t} else if rt := time.Since(start); rt \u003e _50ms {\n\t\tt.Fatalf(\"r.Read(b) took too long (%v)\", rt.String())\n\t}\n\n\t// No new Reads allowed in the current sample\n\tr.SetBlocking(false)\n\tif n, err := r.Read(b); n != 0 {\n\t\tt.Fatalf(\"r.Read(b) expected 0 (\u003cnil\u003e); got %v\", n)\n\t} else if err != nil {\n\t\tt.Fatalf(\"r.Read(b) expected 0 (\u003cnil\u003e); got %v (%v)\", n, err.Error())\n\t} else if rt := time.Since(start); rt \u003e _50ms {\n\t\tt.Fatalf(\"r.Read(b) took too long (%v)\", rt.String())\n\t}\n\n\tstatus := [6]Status{0: r.Status()} // No samples in the first status\n\n\t// 2nd read of 10 bytes blocks until the next sample\n\t// r.SetBlocking(true)\n\tios_test.Sleep(100 * time.Millisecond)\n\tif n, err := r.Read(b[10:]); n != 10 {\n\t\tt.Fatalf(\"r.Read(b[10:]) expected 10 (\u003cnil\u003e); got %v\", n)\n\t} else if err != nil {\n\t\tt.Fatalf(\"r.Read(b[10:]) expected 10 (\u003cnil\u003e); got %v (%v)\", n, err.Error())\n\t} else if rt := time.Since(start); rt \u003c _100ms {\n\t\tt.Fatalf(\"r.Read(b[10:]) returned ahead of time (%v)\", rt.String())\n\t}\n\n\tstatus[1] = r.Status()            // 1st sample\n\tstatus[2] = nextStatus(r.Monitor) // 2nd sample\n\tstatus[3] = nextStatus(r.Monitor) // No activity for the 3rd sample\n\n\tif n := r.Done(); n != 20 {\n\t\tt.Fatalf(\"r.Done() expected 20; got %v\", n)\n\t}\n\n\tstatus[4] = r.Status()\n\tstatus[5] = nextStatus(r.Monitor) // Timeout\n\tstart = status[0].Start\n\n\t// Active, Start, Duration, Idle, Bytes, Samples, InstRate, CurRate, AvgRate, PeakRate, BytesRem, TimeRem, Progress\n\twant := []Status{\n\t\t{true, start, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},\n\t\t{true, start, _100ms, 0, 10, 1, 100, 100, 100, 100, 0, 0, 0},\n\t\t{true, start, _200ms, _100ms, 20, 2, 100, 100, 100, 100, 0, 0, 0},\n\t\t{true, start, _300ms, _200ms, 20, 3, 0, 90, 67, 100, 0, 0, 0},\n\t\t{false, start, _300ms, 0, 20, 3, 0, 0, 67, 100, 0, 0, 0},\n\t\t{false, start, _300ms, 0, 20, 3, 0, 0, 67, 100, 0, 0, 0},\n\t}\n\tfor i, s := range status {\n\t\t// XXX s := s\n\t\tif !statusesAreEqual(\u0026s, \u0026want[i]) {\n\t\t\tt.Errorf(\"r.Status(%v)\\nexpected: %v\\ngot     : %v\", i, want[i].String(), s.String())\n\t\t}\n\t}\n\tif !bytes.Equal(b[:20], in[:20]) {\n\t\tt.Errorf(\"r.Read() input doesn't match output\")\n\t}\n}\n\n// XXX blocking writer test doesn't work.\nfunc _TestWriter(t *testing.T) {\n\tb := make([]byte, 100)\n\tfor i := range b {\n\t\tb[i] = byte(i)\n\t}\n\tw := NewWriter(\u0026bytes.Buffer{}, 200)\n\tstart := time.Now()\n\n\t// Make sure w implements Limiter\n\t_ = Limiter(w)\n\n\t// Non-blocking 20-byte write for the first sample returns ErrLimit\n\tw.SetBlocking(false)\n\tif n, err := w.Write(b); n != 20 || err != ErrLimit {\n\t\tt.Fatalf(\"w.Write(b) expected 20 (ErrLimit); got %v (%v)\", n, err.Error())\n\t} else if rt := time.Since(start); rt \u003e _50ms {\n\t\tt.Fatalf(\"w.Write(b) took too long (%v)\", rt)\n\t}\n\n\t// Blocking 80-byte write\n\t// w.SetBlocking(true)\n\t// XXX This test doesn't work, because w.Write calls w.Limit(block=false),\n\t// XXX and it returns ErrLimit after 20. What we want is to keep waiting until 80 is returned,\n\t// XXX but blocking isn't supported. Sleeping 800 shouldn't be sufficient either (its a burst).\n\t// XXX This limits the usage of Limiter and m.Limit().\n\tios_test.Sleep(800 * time.Millisecond)\n\tif n, err := w.Write(b[20:]); n \u003c 80 {\n\t} else if n != 80 || err != nil {\n\t\tt.Fatalf(\"w.Write(b[20:]) expected 80 (\u003cnil\u003e); got %v (%v)\", n, err.Error())\n\t} else if rt := time.Since(start); rt \u003c _300ms {\n\t\t// Explanation for `rt \u003c _300ms` (as opposed to `\u003c _400ms`)\n\t\t//\n\t\t//                 |\u003c-- start        |        |\n\t\t// epochs: -----0ms|---100ms|---200ms|---300ms|---400ms\n\t\t// sends:        20|20      |20      |20      |20#\n\t\t//\n\t\t// NOTE: The '#' symbol can thus happen before 400ms is up.\n\t\t// Thus, we can only panic if rt \u003c _300ms.\n\t\tt.Fatalf(\"w.Write(b[20:]) returned ahead of time (%v)\", rt.String())\n\t}\n\n\tw.SetTransferSize(100)\n\tstatus := []Status{w.Status(), nextStatus(w.Monitor)}\n\tstart = status[0].Start\n\n\t// Active, Start, Duration, Idle, Bytes, Samples, InstRate, CurRate, AvgRate, PeakRate, BytesRem, TimeRem, Progress\n\twant := []Status{\n\t\t{true, start, _400ms, 0, 80, 4, 200, 200, 200, 200, 20, _100ms, 80000},\n\t\t{true, start, _500ms, _100ms, 100, 5, 200, 200, 200, 200, 0, 0, 100000},\n\t}\n\tfor i, s := range status {\n\t\t// XXX s := s\n\t\tif !statusesAreEqual(\u0026s, \u0026want[i]) {\n\t\t\tt.Errorf(\"w.Status(%v)\\nexpected: %v\\ngot     : %v\\n\", i, want[i].String(), s.String())\n\t\t}\n\t}\n\tif !bytes.Equal(b, w.Writer.(*bytes.Buffer).Bytes()) {\n\t\tt.Errorf(\"w.Write() input doesn't match output\")\n\t}\n}\n\nconst (\n\tmaxDeviationForDuration       = 50 * time.Millisecond\n\tmaxDeviationForRate     int64 = 50\n)\n\n// statusesAreEqual returns true if s1 is equal to s2. Equality here means\n// general equality of fields except for the duration and rates, which can\n// drift due to unpredictable delays (e.g. thread wakes up 25ms after\n// `time.Sleep` has ended).\nfunc statusesAreEqual(s1 *Status, s2 *Status) bool {\n\tif s1.Active == s2.Active \u0026\u0026\n\t\ts1.Start == s2.Start \u0026\u0026\n\t\tdurationsAreEqual(s1.Duration, s2.Duration, maxDeviationForDuration) \u0026\u0026\n\t\ts1.Idle == s2.Idle \u0026\u0026\n\t\ts1.Bytes == s2.Bytes \u0026\u0026\n\t\ts1.Samples == s2.Samples \u0026\u0026\n\t\tratesAreEqual(s1.InstRate, s2.InstRate, maxDeviationForRate) \u0026\u0026\n\t\tratesAreEqual(s1.CurRate, s2.CurRate, maxDeviationForRate) \u0026\u0026\n\t\tratesAreEqual(s1.AvgRate, s2.AvgRate, maxDeviationForRate) \u0026\u0026\n\t\tratesAreEqual(s1.PeakRate, s2.PeakRate, maxDeviationForRate) \u0026\u0026\n\t\ts1.BytesRem == s2.BytesRem \u0026\u0026\n\t\tdurationsAreEqual(s1.TimeRem, s2.TimeRem, maxDeviationForDuration) \u0026\u0026\n\t\ts1.Progress == s2.Progress {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc durationsAreEqual(d1 time.Duration, d2 time.Duration, maxDeviation time.Duration) bool {\n\treturn d2-d1 \u003c= maxDeviation\n}\n\nfunc ratesAreEqual(r1 int64, r2 int64, maxDeviation int64) bool {\n\tsub := r1 - r2\n\tif sub \u003c 0 {\n\t\tsub = -sub\n\t}\n\tif sub \u003c= maxDeviation {\n\t\treturn true\n\t}\n\treturn false\n}\n"},{"Name":"util.gno","Body":"//\n// Written by Maxim Khitrov (November 2012)\n//\n\npackage flow\n\nimport (\n\t\"math\"\n\t\"strconv\"\n\t\"time\"\n)\n\n// clockRate is the resolution and precision of clock().\nconst clockRate = 20 * time.Millisecond\n\n// czero is the process start time rounded down to the nearest clockRate\n// increment.\nvar czero = time.Now().Round(clockRate)\n\n// clock returns a low resolution timestamp relative to the process start time.\nfunc clock() time.Duration {\n\treturn time.Now().Round(clockRate).Sub(czero)\n}\n\n// clockToTime converts a clock() timestamp to an absolute time.Time value.\nfunc clockToTime(c time.Duration) time.Time {\n\treturn czero.Add(c)\n}\n\n// clockRound returns d rounded to the nearest clockRate increment.\nfunc clockRound(d time.Duration) time.Duration {\n\treturn (d + clockRate\u003e\u003e1) / clockRate * clockRate\n}\n\n// round returns x rounded to the nearest int64 (non-negative values only).\nfunc round(x float64) int64 {\n\tif _, frac := math.Modf(x); frac \u003e= 0.5 {\n\t\treturn int64(math.Ceil(x))\n\t}\n\treturn int64(math.Floor(x))\n}\n\n// Percent represents a percentage in increments of 1/1000th of a percent.\ntype Percent uint32\n\n// percentOf calculates what percent of the total is x.\nfunc percentOf(x, total float64) Percent {\n\tif x \u003c 0 || total \u003c= 0 {\n\t\treturn 0\n\t} else if p := round(x / total * 1e5); p \u003c= math.MaxUint32 {\n\t\treturn Percent(p)\n\t}\n\treturn Percent(math.MaxUint32)\n}\n\nfunc (p Percent) Float() float64 {\n\treturn float64(p) * 1e-3\n}\n\nfunc (p Percent) String() string {\n\tvar buf [12]byte\n\tb := strconv.AppendUint(buf[:0], uint64(p)/1000, 10)\n\tn := len(b)\n\tb = strconv.AppendUint(b, 1000+uint64(p)%1000, 10)\n\tb[n] = '.'\n\treturn string(append(b, '%'))\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"HfitxDrsBVcSRHeYc77LITrs/PXFNiNSCidEjmXMzPZ6EcyCn8LhM4+SHKjI9W2BjJQkSz1HVTFiRKgMnpw4kw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1eejdf3cqelrfzsfjyzvgrwp4jtmtegw8xagzn2","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"T5O+KTfH3Ot+8lDMt2wl2+Q8HLYujaOmX3+yp8Rt1w8x1FVcVKFL746DtgF3HK8Pw0ipG4DY6IO1WGMOxUKKWg=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g1eejdf3cqelrfzsfjyzvgrwp4jtmtegw8xagzn2","to_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","amount":"300000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ah6aYRyDgDU/w/vHtq9NRCXpf20VDyQ4z6WJeTUThYvw"},"signature":"2GBIDqX/CMsvg91Fo+K74id/VFroxKOny0GC8D7VHhcudKIjmoWg0rm2cNtENfv7diuLRvZ0NjVHlTa5N+IDig=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"flow","Path":"gno.land/p/demo/flow_test1","Files":[{"Name":"LICENSE.md","Body":"https://github.com/mxk/go-flowrate/blob/master/LICENSE\nBSD 3-Clause \"New\" or \"Revised\" License\n\nCopyright (c) 2014 The Go-FlowRate Authors. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n * Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n\n * Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the\n   distribution.\n\n * Neither the name of the go-flowrate project nor the names of its\n   contributors may be used to endorse or promote products derived\n   from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"},{"Name":"README.md","Body":"Data Flow Rate Control\n======================\n\nTo download and install this package run:\n\ngo get github.com/mxk/go-flowrate/flowrate\n\nThe documentation is available at:\n\nhttp://godoc.org/github.com/mxk/go-flowrate/flowrate\n"},{"Name":"flow.gno","Body":"//\n// Written by Maxim Khitrov (November 2012)\n//\n// XXX modified to disable blocking, time.Sleep().\n\n// Package flow provides the tools for monitoring and limiting the flow rate\n// of an arbitrary data stream.\npackage flow\n\nimport (\n\t\"math\"\n\t// \"sync\"\n\t\"time\"\n)\n\n// Monitor monitors and limits the transfer rate of a data stream.\ntype Monitor struct {\n\t// mu      sync.Mutex    // Mutex guarding access to all internal fields\n\tactive  bool          // Flag indicating an active transfer\n\tstart   time.Duration // Transfer start time (clock() value)\n\tbytes   int64         // Total number of bytes transferred\n\tsamples int64         // Total number of samples taken\n\n\trSample float64 // Most recent transfer rate sample (bytes per second)\n\trEMA    float64 // Exponential moving average of rSample\n\trPeak   float64 // Peak transfer rate (max of all rSamples)\n\trWindow float64 // rEMA window (seconds)\n\n\tsBytes int64         // Number of bytes transferred since sLast\n\tsLast  time.Duration // Most recent sample time (stop time when inactive)\n\tsRate  time.Duration // Sampling rate\n\n\ttBytes int64         // Number of bytes expected in the current transfer\n\ttLast  time.Duration // Time of the most recent transfer of at least 1 byte\n}\n\n// New creates a new flow control monitor. Instantaneous transfer rate is\n// measured and updated for each sampleRate interval. windowSize determines the\n// weight of each sample in the exponential moving average (EMA) calculation.\n// The exact formulas are:\n//\n//\tsampleTime = currentTime - prevSampleTime\n//\tsampleRate = byteCount / sampleTime\n//\tweight     = 1 - exp(-sampleTime/windowSize)\n//\tnewRate    = weight*sampleRate + (1-weight)*oldRate\n//\n// The default values for sampleRate and windowSize (if \u003c= 0) are 100ms and 1s,\n// respectively.\nfunc New(sampleRate, windowSize time.Duration) *Monitor {\n\tif sampleRate = clockRound(sampleRate); sampleRate \u003c= 0 {\n\t\tsampleRate = 5 * clockRate\n\t}\n\tif windowSize \u003c= 0 {\n\t\twindowSize = 1 * time.Second\n\t}\n\tnow := clock()\n\treturn \u0026Monitor{\n\t\tactive:  true,\n\t\tstart:   now,\n\t\trWindow: windowSize.Seconds(),\n\t\tsLast:   now,\n\t\tsRate:   sampleRate,\n\t\ttLast:   now,\n\t}\n}\n\n// Update records the transfer of n bytes and returns n. It should be called\n// after each Read/Write operation, even if n is 0.\nfunc (m *Monitor) Update(n int) int {\n\t// m.mu.Lock()\n\tm.update(n)\n\t// m.mu.Unlock()\n\treturn n\n}\n\n// Hack to set the current rEMA.\nfunc (m *Monitor) SetREMA(rEMA float64) {\n\t// m.mu.Lock()\n\tm.rEMA = rEMA\n\tm.samples++\n\t// m.mu.Unlock()\n}\n\n// IO is a convenience method intended to wrap io.Reader and io.Writer method\n// execution. It calls m.Update(n) and then returns (n, err) unmodified.\nfunc (m *Monitor) IO(n int, err error) (int, error) {\n\treturn m.Update(n), err\n}\n\n// Done marks the transfer as finished and prevents any further updates or\n// limiting. Instantaneous and current transfer rates drop to 0. Update, IO, and\n// Limit methods become NOOPs. It returns the total number of bytes transferred.\nfunc (m *Monitor) Done() int64 {\n\t// m.mu.Lock()\n\tif now := m.update(0); m.sBytes \u003e 0 {\n\t\tm.reset(now)\n\t}\n\tm.active = false\n\tm.tLast = 0\n\tn := m.bytes\n\t// m.mu.Unlock()\n\treturn n\n}\n\n// timeRemLimit is the maximum Status.TimeRem value.\nconst timeRemLimit = 999*time.Hour + 59*time.Minute + 59*time.Second\n\n// Status represents the current Monitor status. All transfer rates are in bytes\n// per second rounded to the nearest byte.\ntype Status struct {\n\tActive   bool          // Flag indicating an active transfer\n\tStart    time.Time     // Transfer start time\n\tDuration time.Duration // Time period covered by the statistics\n\tIdle     time.Duration // Time since the last transfer of at least 1 byte\n\tBytes    int64         // Total number of bytes transferred\n\tSamples  int64         // Total number of samples taken\n\tInstRate int64         // Instantaneous transfer rate\n\tCurRate  int64         // Current transfer rate (EMA of InstRate)\n\tAvgRate  int64         // Average transfer rate (Bytes / Duration)\n\tPeakRate int64         // Maximum instantaneous transfer rate\n\tBytesRem int64         // Number of bytes remaining in the transfer\n\tTimeRem  time.Duration // Estimated time to completion\n\tProgress Percent       // Overall transfer progress\n}\n\nfunc (s Status) String() string {\n\treturn \"STATUS{}\"\n}\n\n// Status returns current transfer status information. The returned value\n// becomes static after a call to Done.\nfunc (m *Monitor) Status() Status {\n\t// m.mu.Lock()\n\tnow := m.update(0)\n\ts := Status{\n\t\tActive:   m.active,\n\t\tStart:    clockToTime(m.start),\n\t\tDuration: m.sLast - m.start,\n\t\tIdle:     now - m.tLast,\n\t\tBytes:    m.bytes,\n\t\tSamples:  m.samples,\n\t\tPeakRate: round(m.rPeak),\n\t\tBytesRem: m.tBytes - m.bytes,\n\t\tProgress: percentOf(float64(m.bytes), float64(m.tBytes)),\n\t}\n\tif s.BytesRem \u003c 0 {\n\t\ts.BytesRem = 0\n\t}\n\tif s.Duration \u003e 0 {\n\t\trAvg := float64(s.Bytes) / s.Duration.Seconds()\n\t\ts.AvgRate = round(rAvg)\n\t\tif s.Active {\n\t\t\ts.InstRate = round(m.rSample)\n\t\t\ts.CurRate = round(m.rEMA)\n\t\t\tif s.BytesRem \u003e 0 {\n\t\t\t\tif tRate := 0.8*m.rEMA + 0.2*rAvg; tRate \u003e 0 {\n\t\t\t\t\tns := float64(s.BytesRem) / tRate * 1e9\n\t\t\t\t\tif ns \u003e float64(timeRemLimit) {\n\t\t\t\t\t\tns = float64(timeRemLimit)\n\t\t\t\t\t}\n\t\t\t\t\ts.TimeRem = clockRound(time.Duration(ns))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// m.mu.Unlock()\n\treturn s\n}\n\n// Limit restricts the instantaneous (per-sample) data flow to rate bytes per\n// second. It returns the maximum number of bytes (0 \u003c= n \u003c= want) that may be\n// transferred immediately without exceeding the limit. If block == true, the\n// call blocks until n \u003e 0. want is returned unmodified if want \u003c 1, rate \u003c 1,\n// or the transfer is inactive (after a call to Done).\n//\n// At least one byte is always allowed to be transferred in any given sampling\n// period. Thus, if the sampling rate is 100ms, the lowest achievable flow rate\n// is 10 bytes per second.\n//\n// For usage examples, see the implementation of Reader and Writer in io.go.\nfunc (m *Monitor) Limit(want int, rate int64, block bool) (n int) {\n\tif block {\n\t\tpanic(\"blocking not yet supported\")\n\t}\n\tif want \u003c 1 || rate \u003c 1 {\n\t\treturn want\n\t}\n\t// m.mu.Lock()\n\n\t// Determine the maximum number of bytes that can be sent in one sample\n\tlimit := round(float64(rate) * m.sRate.Seconds())\n\tif limit \u003c= 0 {\n\t\tlimit = 1\n\t}\n\n\t_ = m.update(0)\n\t/* XXX\n\t// If block == true, wait until m.sBytes \u003c limit\n\tif now := m.update(0); block {\n\t\tfor m.sBytes \u003e= limit \u0026\u0026 m.active {\n\t\t\tnow = m.waitNextSample(now)\n\t\t}\n\t}\n\t*/\n\n\t// Make limit \u003c= want (unlimited if the transfer is no longer active)\n\tif limit -= m.sBytes; limit \u003e int64(want) || !m.active {\n\t\tlimit = int64(want)\n\t}\n\t// m.mu.Unlock()\n\n\tif limit \u003c 0 {\n\t\tlimit = 0\n\t}\n\treturn int(limit)\n}\n\n// SetTransferSize specifies the total size of the data transfer, which allows\n// the Monitor to calculate the overall progress and time to completion.\nfunc (m *Monitor) SetTransferSize(bytes int64) {\n\tif bytes \u003c 0 {\n\t\tbytes = 0\n\t}\n\t// m.mu.Lock()\n\tm.tBytes = bytes\n\t// m.mu.Unlock()\n}\n\n// update accumulates the transferred byte count for the current sample until\n// clock() - m.sLast \u003e= m.sRate. The monitor status is updated once the current\n// sample is done.\nfunc (m *Monitor) update(n int) (now time.Duration) {\n\tif !m.active {\n\t\treturn\n\t}\n\tif now = clock(); n \u003e 0 {\n\t\tm.tLast = now\n\t}\n\tm.sBytes += int64(n)\n\tif sTime := now - m.sLast; sTime \u003e= m.sRate {\n\t\tt := sTime.Seconds()\n\t\tif m.rSample = float64(m.sBytes) / t; m.rSample \u003e m.rPeak {\n\t\t\tm.rPeak = m.rSample\n\t\t}\n\n\t\t// Exponential moving average using a method similar to *nix load\n\t\t// average calculation. Longer sampling periods carry greater weight.\n\t\tif m.samples \u003e 0 {\n\t\t\tw := math.Exp(-t / m.rWindow)\n\t\t\tm.rEMA = m.rSample + w*(m.rEMA-m.rSample)\n\t\t} else {\n\t\t\tm.rEMA = m.rSample\n\t\t}\n\t\tm.reset(now)\n\t}\n\treturn\n}\n\n// reset clears the current sample state in preparation for the next sample.\nfunc (m *Monitor) reset(sampleTime time.Duration) {\n\tm.bytes += m.sBytes\n\tm.samples++\n\tm.sBytes = 0\n\tm.sLast = sampleTime\n}\n\n/*\n// waitNextSample sleeps for the remainder of the current sample. The lock is\n// released and reacquired during the actual sleep period, so it's possible for\n// the transfer to be inactive when this method returns.\nfunc (m *Monitor) waitNextSample(now time.Duration) time.Duration {\n\tconst minWait = 5 * time.Millisecond\n\tcurrent := m.sLast\n\n\t// sleep until the last sample time changes (ideally, just one iteration)\n\tfor m.sLast == current \u0026\u0026 m.active {\n\t\td := current + m.sRate - now\n\t\t// m.mu.Unlock()\n\t\tif d \u003c minWait {\n\t\t\td = minWait\n\t\t}\n\t\ttime.Sleep(d)\n\t\t// m.mu.Lock()\n\t\tnow = m.update(0)\n\t}\n\treturn now\n}\n*/\n"},{"Name":"io.gno","Body":"//\n// Written by Maxim Khitrov (November 2012)\n//\n\npackage flow\n\nimport (\n\t\"errors\"\n\t\"io\"\n)\n\n// ErrLimit is returned by the Writer when a non-blocking write is short due to\n// the transfer rate limit.\nvar ErrLimit = errors.New(\"flowrate: flow rate limit exceeded\")\n\n// Limiter is implemented by the Reader and Writer to provide a consistent\n// interface for monitoring and controlling data transfer.\ntype Limiter interface {\n\tDone() int64\n\tStatus() Status\n\tSetTransferSize(bytes int64)\n\tSetLimit(new int64) (old int64)\n\tSetBlocking(new bool) (old bool)\n}\n\n// Reader implements io.ReadCloser with a restriction on the rate of data\n// transfer.\ntype Reader struct {\n\tio.Reader // Data source\n\t*Monitor  // Flow control monitor\n\n\tlimit int64 // Rate limit in bytes per second (unlimited when \u003c= 0)\n\tblock bool  // What to do when no new bytes can be read due to the limit\n}\n\n// NewReader restricts all Read operations on r to limit bytes per second.\nfunc NewReader(r io.Reader, limit int64) *Reader {\n\treturn \u0026Reader{r, New(0, 0), limit, false} // XXX default false\n}\n\n// Read reads up to len(p) bytes into p without exceeding the current transfer\n// rate limit. It returns (0, nil) immediately if r is non-blocking and no new\n// bytes can be read at this time.\nfunc (r *Reader) Read(p []byte) (n int, err error) {\n\tp = p[:r.Limit(len(p), r.limit, r.block)]\n\tif len(p) \u003e 0 {\n\t\tn, err = r.IO(r.Reader.Read(p))\n\t}\n\treturn\n}\n\n// SetLimit changes the transfer rate limit to new bytes per second and returns\n// the previous setting.\nfunc (r *Reader) SetLimit(new int64) (old int64) {\n\told, r.limit = r.limit, new\n\treturn\n}\n\n// SetBlocking changes the blocking behavior and returns the previous setting. A\n// Read call on a non-blocking reader returns immediately if no additional bytes\n// may be read at this time due to the rate limit.\nfunc (r *Reader) SetBlocking(new bool) (old bool) {\n\tif new == true {\n\t\tpanic(\"blocking not yet supported\")\n\t}\n\told, r.block = r.block, new\n\treturn\n}\n\n// Close closes the underlying reader if it implements the io.Closer interface.\nfunc (r *Reader) Close() error {\n\tdefer r.Done()\n\tif c, ok := r.Reader.(io.Closer); ok {\n\t\treturn c.Close()\n\t}\n\treturn nil\n}\n\n// Writer implements io.WriteCloser with a restriction on the rate of data\n// transfer.\ntype Writer struct {\n\tio.Writer // Data destination\n\t*Monitor  // Flow control monitor\n\n\tlimit int64 // Rate limit in bytes per second (unlimited when \u003c= 0)\n\tblock bool  // What to do when no new bytes can be written due to the limit\n}\n\n// NewWriter restricts all Write operations on w to limit bytes per second. The\n// transfer rate and the default blocking behavior (true) can be changed\n// directly on the returned *Writer.\nfunc NewWriter(w io.Writer, limit int64) *Writer {\n\treturn \u0026Writer{w, New(0, 0), limit, false} // XXX default false\n}\n\n// Write writes len(p) bytes from p to the underlying data stream without\n// exceeding the current transfer rate limit. It returns (n, ErrLimit) if w is\n// non-blocking and no additional bytes can be written at this time.\nfunc (w *Writer) Write(p []byte) (n int, err error) {\n\tvar c int\n\tfor len(p) \u003e 0 \u0026\u0026 err == nil {\n\t\ts := p[:w.Limit(len(p), w.limit, w.block)]\n\t\tif len(s) \u003e 0 {\n\t\t\tc, err = w.IO(w.Writer.Write(s))\n\t\t} else {\n\t\t\treturn n, ErrLimit\n\t\t}\n\t\tp = p[c:]\n\t\tn += c\n\t}\n\treturn\n}\n\n// SetLimit changes the transfer rate limit to new bytes per second and returns\n// the previous setting.\nfunc (w *Writer) SetLimit(new int64) (old int64) {\n\told, w.limit = w.limit, new\n\treturn\n}\n\n// SetBlocking changes the blocking behavior and returns the previous setting. A\n// Write call on a non-blocking writer returns as soon as no additional bytes\n// may be written at this time due to the rate limit.\nfunc (w *Writer) SetBlocking(new bool) (old bool) {\n\told, w.block = w.block, new\n\treturn\n}\n\n// Close closes the underlying writer if it implements the io.Closer interface.\nfunc (w *Writer) Close() error {\n\tdefer w.Done()\n\tif c, ok := w.Writer.(io.Closer); ok {\n\t\treturn c.Close()\n\t}\n\treturn nil\n}\n"},{"Name":"io_test.gno","Body":"//\n// Written by Maxim Khitrov (November 2012)\n//\n\npackage flow\n\nimport (\n\t\"bytes\"\n\t\"testing\"\n\t\"time\"\n\n\tios_test \"internal/os_test\"\n)\n\n// XXX ugh, I can't even sleep milliseconds.\n// XXX\n\nconst (\n\t_50ms  = 50 * time.Millisecond\n\t_100ms = 100 * time.Millisecond\n\t_200ms = 200 * time.Millisecond\n\t_300ms = 300 * time.Millisecond\n\t_400ms = 400 * time.Millisecond\n\t_500ms = 500 * time.Millisecond\n)\n\nfunc nextStatus(m *Monitor) Status {\n\tsamples := m.samples\n\tfor i := 0; i \u003c 30; i++ {\n\t\tif s := m.Status(); s.Samples != samples {\n\t\t\treturn s\n\t\t}\n\t\tios_test.Sleep(5 * time.Millisecond)\n\t}\n\treturn m.Status()\n}\n\nfunc TestReader(t *testing.T) {\n\tin := make([]byte, 100)\n\tfor i := range in {\n\t\tin[i] = byte(i)\n\t}\n\tb := make([]byte, 100)\n\tr := NewReader(bytes.NewReader(in), 100)\n\tstart := time.Now()\n\n\t// Make sure r implements Limiter\n\t_ = Limiter(r)\n\n\t// 1st read of 10 bytes is performed immediately\n\tif n, err := r.Read(b); n != 10 {\n\t\tt.Fatalf(\"r.Read(b) expected 10 (\u003cnil\u003e); got %v\", n)\n\t} else if err != nil {\n\t\tt.Fatalf(\"r.Read(b) expected 10 (\u003cnil\u003e); got %v (%v)\", n, err.Error())\n\t} else if rt := time.Since(start); rt \u003e _50ms {\n\t\tt.Fatalf(\"r.Read(b) took too long (%v)\", rt.String())\n\t}\n\n\t// No new Reads allowed in the current sample\n\tr.SetBlocking(false)\n\tif n, err := r.Read(b); n != 0 {\n\t\tt.Fatalf(\"r.Read(b) expected 0 (\u003cnil\u003e); got %v\", n)\n\t} else if err != nil {\n\t\tt.Fatalf(\"r.Read(b) expected 0 (\u003cnil\u003e); got %v (%v)\", n, err.Error())\n\t} else if rt := time.Since(start); rt \u003e _50ms {\n\t\tt.Fatalf(\"r.Read(b) took too long (%v)\", rt.String())\n\t}\n\n\tstatus := [6]Status{0: r.Status()} // No samples in the first status\n\n\t// 2nd read of 10 bytes blocks until the next sample\n\t// r.SetBlocking(true)\n\tios_test.Sleep(100 * time.Millisecond)\n\tif n, err := r.Read(b[10:]); n != 10 {\n\t\tt.Fatalf(\"r.Read(b[10:]) expected 10 (\u003cnil\u003e); got %v\", n)\n\t} else if err != nil {\n\t\tt.Fatalf(\"r.Read(b[10:]) expected 10 (\u003cnil\u003e); got %v (%v)\", n, err.Error())\n\t} else if rt := time.Since(start); rt \u003c _100ms {\n\t\tt.Fatalf(\"r.Read(b[10:]) returned ahead of time (%v)\", rt.String())\n\t}\n\n\tstatus[1] = r.Status()            // 1st sample\n\tstatus[2] = nextStatus(r.Monitor) // 2nd sample\n\tstatus[3] = nextStatus(r.Monitor) // No activity for the 3rd sample\n\n\tif n := r.Done(); n != 20 {\n\t\tt.Fatalf(\"r.Done() expected 20; got %v\", n)\n\t}\n\n\tstatus[4] = r.Status()\n\tstatus[5] = nextStatus(r.Monitor) // Timeout\n\tstart = status[0].Start\n\n\t// Active, Start, Duration, Idle, Bytes, Samples, InstRate, CurRate, AvgRate, PeakRate, BytesRem, TimeRem, Progress\n\twant := []Status{\n\t\t{true, start, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},\n\t\t{true, start, _100ms, 0, 10, 1, 100, 100, 100, 100, 0, 0, 0},\n\t\t{true, start, _200ms, _100ms, 20, 2, 100, 100, 100, 100, 0, 0, 0},\n\t\t{true, start, _300ms, _200ms, 20, 3, 0, 90, 67, 100, 0, 0, 0},\n\t\t{false, start, _300ms, 0, 20, 3, 0, 0, 67, 100, 0, 0, 0},\n\t\t{false, start, _300ms, 0, 20, 3, 0, 0, 67, 100, 0, 0, 0},\n\t}\n\tfor i, s := range status {\n\t\t// XXX s := s\n\t\tif !statusesAreEqual(\u0026s, \u0026want[i]) {\n\t\t\tt.Errorf(\"r.Status(%v)\\nexpected: %v\\ngot     : %v\", i, want[i].String(), s.String())\n\t\t}\n\t}\n\tif !bytes.Equal(b[:20], in[:20]) {\n\t\tt.Errorf(\"r.Read() input doesn't match output\")\n\t}\n}\n\n// XXX blocking writer test doesn't work.\nfunc _TestWriter(t *testing.T) {\n\tb := make([]byte, 100)\n\tfor i := range b {\n\t\tb[i] = byte(i)\n\t}\n\tw := NewWriter(\u0026bytes.Buffer{}, 200)\n\tstart := time.Now()\n\n\t// Make sure w implements Limiter\n\t_ = Limiter(w)\n\n\t// Non-blocking 20-byte write for the first sample returns ErrLimit\n\tw.SetBlocking(false)\n\tif n, err := w.Write(b); n != 20 || err != ErrLimit {\n\t\tt.Fatalf(\"w.Write(b) expected 20 (ErrLimit); got %v (%v)\", n, err.Error())\n\t} else if rt := time.Since(start); rt \u003e _50ms {\n\t\tt.Fatalf(\"w.Write(b) took too long (%v)\", rt)\n\t}\n\n\t// Blocking 80-byte write\n\t// w.SetBlocking(true)\n\t// XXX This test doesn't work, because w.Write calls w.Limit(block=false),\n\t// XXX and it returns ErrLimit after 20. What we want is to keep waiting until 80 is returned,\n\t// XXX but blocking isn't supported. Sleeping 800 shouldn't be sufficient either (its a burst).\n\t// XXX This limits the usage of Limiter and m.Limit().\n\tios_test.Sleep(800 * time.Millisecond)\n\tif n, err := w.Write(b[20:]); n \u003c 80 {\n\t} else if n != 80 || err != nil {\n\t\tt.Fatalf(\"w.Write(b[20:]) expected 80 (\u003cnil\u003e); got %v (%v)\", n, err.Error())\n\t} else if rt := time.Since(start); rt \u003c _300ms {\n\t\t// Explanation for `rt \u003c _300ms` (as opposed to `\u003c _400ms`)\n\t\t//\n\t\t//                 |\u003c-- start        |        |\n\t\t// epochs: -----0ms|---100ms|---200ms|---300ms|---400ms\n\t\t// sends:        20|20      |20      |20      |20#\n\t\t//\n\t\t// NOTE: The '#' symbol can thus happen before 400ms is up.\n\t\t// Thus, we can only panic if rt \u003c _300ms.\n\t\tt.Fatalf(\"w.Write(b[20:]) returned ahead of time (%v)\", rt.String())\n\t}\n\n\tw.SetTransferSize(100)\n\tstatus := []Status{w.Status(), nextStatus(w.Monitor)}\n\tstart = status[0].Start\n\n\t// Active, Start, Duration, Idle, Bytes, Samples, InstRate, CurRate, AvgRate, PeakRate, BytesRem, TimeRem, Progress\n\twant := []Status{\n\t\t{true, start, _400ms, 0, 80, 4, 200, 200, 200, 200, 20, _100ms, 80000},\n\t\t{true, start, _500ms, _100ms, 100, 5, 200, 200, 200, 200, 0, 0, 100000},\n\t}\n\tfor i, s := range status {\n\t\t// XXX s := s\n\t\tif !statusesAreEqual(\u0026s, \u0026want[i]) {\n\t\t\tt.Errorf(\"w.Status(%v)\\nexpected: %v\\ngot     : %v\\n\", i, want[i].String(), s.String())\n\t\t}\n\t}\n\tif !bytes.Equal(b, w.Writer.(*bytes.Buffer).Bytes()) {\n\t\tt.Errorf(\"w.Write() input doesn't match output\")\n\t}\n}\n\nconst (\n\tmaxDeviationForDuration       = 50 * time.Millisecond\n\tmaxDeviationForRate     int64 = 50\n)\n\n// statusesAreEqual returns true if s1 is equal to s2. Equality here means\n// general equality of fields except for the duration and rates, which can\n// drift due to unpredictable delays (e.g. thread wakes up 25ms after\n// `time.Sleep` has ended).\nfunc statusesAreEqual(s1 *Status, s2 *Status) bool {\n\tif s1.Active == s2.Active \u0026\u0026\n\t\ts1.Start == s2.Start \u0026\u0026\n\t\tdurationsAreEqual(s1.Duration, s2.Duration, maxDeviationForDuration) \u0026\u0026\n\t\ts1.Idle == s2.Idle \u0026\u0026\n\t\ts1.Bytes == s2.Bytes \u0026\u0026\n\t\ts1.Samples == s2.Samples \u0026\u0026\n\t\tratesAreEqual(s1.InstRate, s2.InstRate, maxDeviationForRate) \u0026\u0026\n\t\tratesAreEqual(s1.CurRate, s2.CurRate, maxDeviationForRate) \u0026\u0026\n\t\tratesAreEqual(s1.AvgRate, s2.AvgRate, maxDeviationForRate) \u0026\u0026\n\t\tratesAreEqual(s1.PeakRate, s2.PeakRate, maxDeviationForRate) \u0026\u0026\n\t\ts1.BytesRem == s2.BytesRem \u0026\u0026\n\t\tdurationsAreEqual(s1.TimeRem, s2.TimeRem, maxDeviationForDuration) \u0026\u0026\n\t\ts1.Progress == s2.Progress {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc durationsAreEqual(d1 time.Duration, d2 time.Duration, maxDeviation time.Duration) bool {\n\treturn d2-d1 \u003c= maxDeviation\n}\n\nfunc ratesAreEqual(r1 int64, r2 int64, maxDeviation int64) bool {\n\tsub := r1 - r2\n\tif sub \u003c 0 {\n\t\tsub = -sub\n\t}\n\tif sub \u003c= maxDeviation {\n\t\treturn true\n\t}\n\treturn false\n}\n"},{"Name":"util.gno","Body":"//\n// Written by Maxim Khitrov (November 2012)\n//\n\npackage flow\n\nimport (\n\t\"math\"\n\t\"strconv\"\n\t\"time\"\n)\n\n// clockRate is the resolution and precision of clock().\nconst clockRate = 20 * time.Millisecond\n\n// czero is the process start time rounded down to the nearest clockRate\n// increment.\nvar czero = time.Now().Round(clockRate)\n\n// clock returns a low resolution timestamp relative to the process start time.\nfunc clock() time.Duration {\n\treturn time.Now().Round(clockRate).Sub(czero)\n}\n\n// clockToTime converts a clock() timestamp to an absolute time.Time value.\nfunc clockToTime(c time.Duration) time.Time {\n\treturn czero.Add(c)\n}\n\n// clockRound returns d rounded to the nearest clockRate increment.\nfunc clockRound(d time.Duration) time.Duration {\n\treturn (d + clockRate\u003e\u003e1) / clockRate * clockRate\n}\n\n// round returns x rounded to the nearest int64 (non-negative values only).\nfunc round(x float64) int64 {\n\tif _, frac := math.Modf(x); frac \u003e= 0.5 {\n\t\treturn int64(math.Ceil(x))\n\t}\n\treturn int64(math.Floor(x))\n}\n\n// Percent represents a percentage in increments of 1/1000th of a percent.\ntype Percent uint32\n\n// percentOf calculates what percent of the total is x.\nfunc percentOf(x, total float64) Percent {\n\tif x \u003c 0 || total \u003c= 0 {\n\t\treturn 0\n\t} else if p := round(x / total * 1e5); p \u003c= math.MaxUint32 {\n\t\treturn Percent(p)\n\t}\n\treturn Percent(math.MaxUint32)\n}\n\nfunc (p Percent) Float() float64 {\n\treturn float64(p) * 1e-3\n}\n\nfunc (p Percent) String() string {\n\tvar buf [12]byte\n\tb := strconv.AppendUint(buf[:0], uint64(p)/1000, 10)\n\tn := len(b)\n\tb = strconv.AppendUint(b, 1000+uint64(p)%1000, 10)\n\tb[n] = '.'\n\treturn string(append(b, '%'))\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"22+8SB98tRaLML9WiwI8nt25z/SR216cJ/N8Fd2pLVAjJICn3ZtGUO+Cur7KDuY6rGdYmovdOl3xNm1fYTtTSQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"flow","Path":"gno.land/p/demo/flow_test2","Files":[{"Name":"LICENSE.md","Body":"https://github.com/mxk/go-flowrate/blob/master/LICENSE\nBSD 3-Clause \"New\" or \"Revised\" License\n\nCopyright (c) 2014 The Go-FlowRate Authors. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n * Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n\n * Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the\n   distribution.\n\n * Neither the name of the go-flowrate project nor the names of its\n   contributors may be used to endorse or promote products derived\n   from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"},{"Name":"README.md","Body":"Data Flow Rate Control\n======================\n\nTo download and install this package run:\n\ngo get github.com/mxk/go-flowrate/flowrate\n\nThe documentation is available at:\n\nhttp://godoc.org/github.com/mxk/go-flowrate/flowrate\n"},{"Name":"flow.gno","Body":"//\n// Written by Maxim Khitrov (November 2012)\n//\n// XXX modified to disable blocking, time.Sleep().\n\n// Package flow provides the tools for monitoring and limiting the flow rate\n// of an arbitrary data stream.\npackage flow\n\nimport (\n\t\"math\"\n\t// \"sync\"\n\t\"time\"\n)\n\n// Monitor monitors and limits the transfer rate of a data stream.\ntype Monitor struct {\n\t// mu      sync.Mutex    // Mutex guarding access to all internal fields\n\tactive  bool          // Flag indicating an active transfer\n\tstart   time.Duration // Transfer start time (clock() value)\n\tbytes   int64         // Total number of bytes transferred\n\tsamples int64         // Total number of samples taken\n\n\trSample float64 // Most recent transfer rate sample (bytes per second)\n\trEMA    float64 // Exponential moving average of rSample\n\trPeak   float64 // Peak transfer rate (max of all rSamples)\n\trWindow float64 // rEMA window (seconds)\n\n\tsBytes int64         // Number of bytes transferred since sLast\n\tsLast  time.Duration // Most recent sample time (stop time when inactive)\n\tsRate  time.Duration // Sampling rate\n\n\ttBytes int64         // Number of bytes expected in the current transfer\n\ttLast  time.Duration // Time of the most recent transfer of at least 1 byte\n}\n\n// New creates a new flow control monitor. Instantaneous transfer rate is\n// measured and updated for each sampleRate interval. windowSize determines the\n// weight of each sample in the exponential moving average (EMA) calculation.\n// The exact formulas are:\n//\n//\tsampleTime = currentTime - prevSampleTime\n//\tsampleRate = byteCount / sampleTime\n//\tweight     = 1 - exp(-sampleTime/windowSize)\n//\tnewRate    = weight*sampleRate + (1-weight)*oldRate\n//\n// The default values for sampleRate and windowSize (if \u003c= 0) are 100ms and 1s,\n// respectively.\nfunc New(sampleRate, windowSize time.Duration) *Monitor {\n\tif sampleRate = clockRound(sampleRate); sampleRate \u003c= 0 {\n\t\tsampleRate = 5 * clockRate\n\t}\n\tif windowSize \u003c= 0 {\n\t\twindowSize = 1 * time.Second\n\t}\n\tnow := clock()\n\treturn \u0026Monitor{\n\t\tactive:  true,\n\t\tstart:   now,\n\t\trWindow: windowSize.Seconds(),\n\t\tsLast:   now,\n\t\tsRate:   sampleRate,\n\t\ttLast:   now,\n\t}\n}\n\n// Update records the transfer of n bytes and returns n. It should be called\n// after each Read/Write operation, even if n is 0.\nfunc (m *Monitor) Update(n int) int {\n\t// m.mu.Lock()\n\tm.update(n)\n\t// m.mu.Unlock()\n\treturn n\n}\n\n// Hack to set the current rEMA.\nfunc (m *Monitor) SetREMA(rEMA float64) {\n\t// m.mu.Lock()\n\tm.rEMA = rEMA\n\tm.samples++\n\t// m.mu.Unlock()\n}\n\n// IO is a convenience method intended to wrap io.Reader and io.Writer method\n// execution. It calls m.Update(n) and then returns (n, err) unmodified.\nfunc (m *Monitor) IO(n int, err error) (int, error) {\n\treturn m.Update(n), err\n}\n\n// Done marks the transfer as finished and prevents any further updates or\n// limiting. Instantaneous and current transfer rates drop to 0. Update, IO, and\n// Limit methods become NOOPs. It returns the total number of bytes transferred.\nfunc (m *Monitor) Done() int64 {\n\t// m.mu.Lock()\n\tif now := m.update(0); m.sBytes \u003e 0 {\n\t\tm.reset(now)\n\t}\n\tm.active = false\n\tm.tLast = 0\n\tn := m.bytes\n\t// m.mu.Unlock()\n\treturn n\n}\n\n// timeRemLimit is the maximum Status.TimeRem value.\nconst timeRemLimit = 999*time.Hour + 59*time.Minute + 59*time.Second\n\n// Status represents the current Monitor status. All transfer rates are in bytes\n// per second rounded to the nearest byte.\ntype Status struct {\n\tActive   bool          // Flag indicating an active transfer\n\tStart    time.Time     // Transfer start time\n\tDuration time.Duration // Time period covered by the statistics\n\tIdle     time.Duration // Time since the last transfer of at least 1 byte\n\tBytes    int64         // Total number of bytes transferred\n\tSamples  int64         // Total number of samples taken\n\tInstRate int64         // Instantaneous transfer rate\n\tCurRate  int64         // Current transfer rate (EMA of InstRate)\n\tAvgRate  int64         // Average transfer rate (Bytes / Duration)\n\tPeakRate int64         // Maximum instantaneous transfer rate\n\tBytesRem int64         // Number of bytes remaining in the transfer\n\tTimeRem  time.Duration // Estimated time to completion\n\tProgress Percent       // Overall transfer progress\n}\n\nfunc (s Status) String() string {\n\treturn \"STATUS{}\"\n}\n\n// Status returns current transfer status information. The returned value\n// becomes static after a call to Done.\nfunc (m *Monitor) Status() Status {\n\t// m.mu.Lock()\n\tnow := m.update(0)\n\ts := Status{\n\t\tActive:   m.active,\n\t\tStart:    clockToTime(m.start),\n\t\tDuration: m.sLast - m.start,\n\t\tIdle:     now - m.tLast,\n\t\tBytes:    m.bytes,\n\t\tSamples:  m.samples,\n\t\tPeakRate: round(m.rPeak),\n\t\tBytesRem: m.tBytes - m.bytes,\n\t\tProgress: percentOf(float64(m.bytes), float64(m.tBytes)),\n\t}\n\tif s.BytesRem \u003c 0 {\n\t\ts.BytesRem = 0\n\t}\n\tif s.Duration \u003e 0 {\n\t\trAvg := float64(s.Bytes) / s.Duration.Seconds()\n\t\ts.AvgRate = round(rAvg)\n\t\tif s.Active {\n\t\t\ts.InstRate = round(m.rSample)\n\t\t\ts.CurRate = round(m.rEMA)\n\t\t\tif s.BytesRem \u003e 0 {\n\t\t\t\tif tRate := 0.8*m.rEMA + 0.2*rAvg; tRate \u003e 0 {\n\t\t\t\t\tns := float64(s.BytesRem) / tRate * 1e9\n\t\t\t\t\tif ns \u003e float64(timeRemLimit) {\n\t\t\t\t\t\tns = float64(timeRemLimit)\n\t\t\t\t\t}\n\t\t\t\t\ts.TimeRem = clockRound(time.Duration(ns))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// m.mu.Unlock()\n\treturn s\n}\n\n// Limit restricts the instantaneous (per-sample) data flow to rate bytes per\n// second. It returns the maximum number of bytes (0 \u003c= n \u003c= want) that may be\n// transferred immediately without exceeding the limit. If block == true, the\n// call blocks until n \u003e 0. want is returned unmodified if want \u003c 1, rate \u003c 1,\n// or the transfer is inactive (after a call to Done).\n//\n// At least one byte is always allowed to be transferred in any given sampling\n// period. Thus, if the sampling rate is 100ms, the lowest achievable flow rate\n// is 10 bytes per second.\n//\n// For usage examples, see the implementation of Reader and Writer in io.go.\nfunc (m *Monitor) Limit(want int, rate int64, block bool) (n int) {\n\tif block {\n\t\tpanic(\"blocking not yet supported\")\n\t}\n\tif want \u003c 1 || rate \u003c 1 {\n\t\treturn want\n\t}\n\t// m.mu.Lock()\n\n\t// Determine the maximum number of bytes that can be sent in one sample\n\tlimit := round(float64(rate) * m.sRate.Seconds())\n\tif limit \u003c= 0 {\n\t\tlimit = 1\n\t}\n\n\t_ = m.update(0)\n\t/* XXX\n\t// If block == true, wait until m.sBytes \u003c limit\n\tif now := m.update(0); block {\n\t\tfor m.sBytes \u003e= limit \u0026\u0026 m.active {\n\t\t\tnow = m.waitNextSample(now)\n\t\t}\n\t}\n\t*/\n\n\t// Make limit \u003c= want (unlimited if the transfer is no longer active)\n\tif limit -= m.sBytes; limit \u003e int64(want) || !m.active {\n\t\tlimit = int64(want)\n\t}\n\t// m.mu.Unlock()\n\n\tif limit \u003c 0 {\n\t\tlimit = 0\n\t}\n\treturn int(limit)\n}\n\n// SetTransferSize specifies the total size of the data transfer, which allows\n// the Monitor to calculate the overall progress and time to completion.\nfunc (m *Monitor) SetTransferSize(bytes int64) {\n\tif bytes \u003c 0 {\n\t\tbytes = 0\n\t}\n\t// m.mu.Lock()\n\tm.tBytes = bytes\n\t// m.mu.Unlock()\n}\n\n// update accumulates the transferred byte count for the current sample until\n// clock() - m.sLast \u003e= m.sRate. The monitor status is updated once the current\n// sample is done.\nfunc (m *Monitor) update(n int) (now time.Duration) {\n\tif !m.active {\n\t\treturn\n\t}\n\tif now = clock(); n \u003e 0 {\n\t\tm.tLast = now\n\t}\n\tm.sBytes += int64(n)\n\tif sTime := now - m.sLast; sTime \u003e= m.sRate {\n\t\tt := sTime.Seconds()\n\t\tif m.rSample = float64(m.sBytes) / t; m.rSample \u003e m.rPeak {\n\t\t\tm.rPeak = m.rSample\n\t\t}\n\n\t\t// Exponential moving average using a method similar to *nix load\n\t\t// average calculation. Longer sampling periods carry greater weight.\n\t\tif m.samples \u003e 0 {\n\t\t\tw := math.Exp(-t / m.rWindow)\n\t\t\tm.rEMA = m.rSample + w*(m.rEMA-m.rSample)\n\t\t} else {\n\t\t\tm.rEMA = m.rSample\n\t\t}\n\t\tm.reset(now)\n\t}\n\treturn\n}\n\n// reset clears the current sample state in preparation for the next sample.\nfunc (m *Monitor) reset(sampleTime time.Duration) {\n\tm.bytes += m.sBytes\n\tm.samples++\n\tm.sBytes = 0\n\tm.sLast = sampleTime\n}\n\n/*\n// waitNextSample sleeps for the remainder of the current sample. The lock is\n// released and reacquired during the actual sleep period, so it's possible for\n// the transfer to be inactive when this method returns.\nfunc (m *Monitor) waitNextSample(now time.Duration) time.Duration {\n\tconst minWait = 5 * time.Millisecond\n\tcurrent := m.sLast\n\n\t// sleep until the last sample time changes (ideally, just one iteration)\n\tfor m.sLast == current \u0026\u0026 m.active {\n\t\td := current + m.sRate - now\n\t\t// m.mu.Unlock()\n\t\tif d \u003c minWait {\n\t\t\td = minWait\n\t\t}\n\t\ttime.Sleep(d)\n\t\t// m.mu.Lock()\n\t\tnow = m.update(0)\n\t}\n\treturn now\n}\n*/\n"},{"Name":"io.gno","Body":"//\n// Written by Maxim Khitrov (November 2012)\n//\n\npackage flow\n\nimport (\n\t\"errors\"\n\t\"io\"\n)\n\n// ErrLimit is returned by the Writer when a non-blocking write is short due to\n// the transfer rate limit.\nvar ErrLimit = errors.New(\"flowrate: flow rate limit exceeded\")\n\n// Limiter is implemented by the Reader and Writer to provide a consistent\n// interface for monitoring and controlling data transfer.\ntype Limiter interface {\n\tDone() int64\n\tStatus() Status\n\tSetTransferSize(bytes int64)\n\tSetLimit(new int64) (old int64)\n\tSetBlocking(new bool) (old bool)\n}\n\n// Reader implements io.ReadCloser with a restriction on the rate of data\n// transfer.\ntype Reader struct {\n\tio.Reader // Data source\n\t*Monitor  // Flow control monitor\n\n\tlimit int64 // Rate limit in bytes per second (unlimited when \u003c= 0)\n\tblock bool  // What to do when no new bytes can be read due to the limit\n}\n\n// NewReader restricts all Read operations on r to limit bytes per second.\nfunc NewReader(r io.Reader, limit int64) *Reader {\n\treturn \u0026Reader{r, New(0, 0), limit, false} // XXX default false\n}\n\n// Read reads up to len(p) bytes into p without exceeding the current transfer\n// rate limit. It returns (0, nil) immediately if r is non-blocking and no new\n// bytes can be read at this time.\nfunc (r *Reader) Read(p []byte) (n int, err error) {\n\tp = p[:r.Limit(len(p), r.limit, r.block)]\n\tif len(p) \u003e 0 {\n\t\tn, err = r.IO(r.Reader.Read(p))\n\t}\n\treturn\n}\n\n// SetLimit changes the transfer rate limit to new bytes per second and returns\n// the previous setting.\nfunc (r *Reader) SetLimit(new int64) (old int64) {\n\told, r.limit = r.limit, new\n\treturn\n}\n\n// SetBlocking changes the blocking behavior and returns the previous setting. A\n// Read call on a non-blocking reader returns immediately if no additional bytes\n// may be read at this time due to the rate limit.\nfunc (r *Reader) SetBlocking(new bool) (old bool) {\n\tif new == true {\n\t\tpanic(\"blocking not yet supported\")\n\t}\n\told, r.block = r.block, new\n\treturn\n}\n\n// Close closes the underlying reader if it implements the io.Closer interface.\nfunc (r *Reader) Close() error {\n\tdefer r.Done()\n\tif c, ok := r.Reader.(io.Closer); ok {\n\t\treturn c.Close()\n\t}\n\treturn nil\n}\n\n// Writer implements io.WriteCloser with a restriction on the rate of data\n// transfer.\ntype Writer struct {\n\tio.Writer // Data destination\n\t*Monitor  // Flow control monitor\n\n\tlimit int64 // Rate limit in bytes per second (unlimited when \u003c= 0)\n\tblock bool  // What to do when no new bytes can be written due to the limit\n}\n\n// NewWriter restricts all Write operations on w to limit bytes per second. The\n// transfer rate and the default blocking behavior (true) can be changed\n// directly on the returned *Writer.\nfunc NewWriter(w io.Writer, limit int64) *Writer {\n\treturn \u0026Writer{w, New(0, 0), limit, false} // XXX default false\n}\n\n// Write writes len(p) bytes from p to the underlying data stream without\n// exceeding the current transfer rate limit. It returns (n, ErrLimit) if w is\n// non-blocking and no additional bytes can be written at this time.\nfunc (w *Writer) Write(p []byte) (n int, err error) {\n\tvar c int\n\tfor len(p) \u003e 0 \u0026\u0026 err == nil {\n\t\ts := p[:w.Limit(len(p), w.limit, w.block)]\n\t\tif len(s) \u003e 0 {\n\t\t\tc, err = w.IO(w.Writer.Write(s))\n\t\t} else {\n\t\t\treturn n, ErrLimit\n\t\t}\n\t\tp = p[c:]\n\t\tn += c\n\t}\n\treturn\n}\n\n// SetLimit changes the transfer rate limit to new bytes per second and returns\n// the previous setting.\nfunc (w *Writer) SetLimit(new int64) (old int64) {\n\told, w.limit = w.limit, new\n\treturn\n}\n\n// SetBlocking changes the blocking behavior and returns the previous setting. A\n// Write call on a non-blocking writer returns as soon as no additional bytes\n// may be written at this time due to the rate limit.\nfunc (w *Writer) SetBlocking(new bool) (old bool) {\n\told, w.block = w.block, new\n\treturn\n}\n\n// Close closes the underlying writer if it implements the io.Closer interface.\nfunc (w *Writer) Close() error {\n\tdefer w.Done()\n\tif c, ok := w.Writer.(io.Closer); ok {\n\t\treturn c.Close()\n\t}\n\treturn nil\n}\n"},{"Name":"io_test.gno","Body":"//\n// Written by Maxim Khitrov (November 2012)\n//\n\npackage flow\n\nimport (\n\t\"bytes\"\n\t\"testing\"\n\t\"time\"\n\n\tios_test \"internal/os_test\"\n)\n\n// XXX ugh, I can't even sleep milliseconds.\n// XXX\n\nconst (\n\t_50ms  = 50 * time.Millisecond\n\t_100ms = 100 * time.Millisecond\n\t_200ms = 200 * time.Millisecond\n\t_300ms = 300 * time.Millisecond\n\t_400ms = 400 * time.Millisecond\n\t_500ms = 500 * time.Millisecond\n)\n\nfunc nextStatus(m *Monitor) Status {\n\tsamples := m.samples\n\tfor i := 0; i \u003c 30; i++ {\n\t\tif s := m.Status(); s.Samples != samples {\n\t\t\treturn s\n\t\t}\n\t\tios_test.Sleep(5 * time.Millisecond)\n\t}\n\treturn m.Status()\n}\n\nfunc TestReader(t *testing.T) {\n\tin := make([]byte, 100)\n\tfor i := range in {\n\t\tin[i] = byte(i)\n\t}\n\tb := make([]byte, 100)\n\tr := NewReader(bytes.NewReader(in), 100)\n\tstart := time.Now()\n\n\t// Make sure r implements Limiter\n\t_ = Limiter(r)\n\n\t// 1st read of 10 bytes is performed immediately\n\tif n, err := r.Read(b); n != 10 {\n\t\tt.Fatalf(\"r.Read(b) expected 10 (\u003cnil\u003e); got %v\", n)\n\t} else if err != nil {\n\t\tt.Fatalf(\"r.Read(b) expected 10 (\u003cnil\u003e); got %v (%v)\", n, err.Error())\n\t} else if rt := time.Since(start); rt \u003e _50ms {\n\t\tt.Fatalf(\"r.Read(b) took too long (%v)\", rt.String())\n\t}\n\n\t// No new Reads allowed in the current sample\n\tr.SetBlocking(false)\n\tif n, err := r.Read(b); n != 0 {\n\t\tt.Fatalf(\"r.Read(b) expected 0 (\u003cnil\u003e); got %v\", n)\n\t} else if err != nil {\n\t\tt.Fatalf(\"r.Read(b) expected 0 (\u003cnil\u003e); got %v (%v)\", n, err.Error())\n\t} else if rt := time.Since(start); rt \u003e _50ms {\n\t\tt.Fatalf(\"r.Read(b) took too long (%v)\", rt.String())\n\t}\n\n\tstatus := [6]Status{0: r.Status()} // No samples in the first status\n\n\t// 2nd read of 10 bytes blocks until the next sample\n\t// r.SetBlocking(true)\n\tios_test.Sleep(100 * time.Millisecond)\n\tif n, err := r.Read(b[10:]); n != 10 {\n\t\tt.Fatalf(\"r.Read(b[10:]) expected 10 (\u003cnil\u003e); got %v\", n)\n\t} else if err != nil {\n\t\tt.Fatalf(\"r.Read(b[10:]) expected 10 (\u003cnil\u003e); got %v (%v)\", n, err.Error())\n\t} else if rt := time.Since(start); rt \u003c _100ms {\n\t\tt.Fatalf(\"r.Read(b[10:]) returned ahead of time (%v)\", rt.String())\n\t}\n\n\tstatus[1] = r.Status()            // 1st sample\n\tstatus[2] = nextStatus(r.Monitor) // 2nd sample\n\tstatus[3] = nextStatus(r.Monitor) // No activity for the 3rd sample\n\n\tif n := r.Done(); n != 20 {\n\t\tt.Fatalf(\"r.Done() expected 20; got %v\", n)\n\t}\n\n\tstatus[4] = r.Status()\n\tstatus[5] = nextStatus(r.Monitor) // Timeout\n\tstart = status[0].Start\n\n\t// Active, Start, Duration, Idle, Bytes, Samples, InstRate, CurRate, AvgRate, PeakRate, BytesRem, TimeRem, Progress\n\twant := []Status{\n\t\t{true, start, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},\n\t\t{true, start, _100ms, 0, 10, 1, 100, 100, 100, 100, 0, 0, 0},\n\t\t{true, start, _200ms, _100ms, 20, 2, 100, 100, 100, 100, 0, 0, 0},\n\t\t{true, start, _300ms, _200ms, 20, 3, 0, 90, 67, 100, 0, 0, 0},\n\t\t{false, start, _300ms, 0, 20, 3, 0, 0, 67, 100, 0, 0, 0},\n\t\t{false, start, _300ms, 0, 20, 3, 0, 0, 67, 100, 0, 0, 0},\n\t}\n\tfor i, s := range status {\n\t\t// XXX s := s\n\t\tif !statusesAreEqual(\u0026s, \u0026want[i]) {\n\t\t\tt.Errorf(\"r.Status(%v)\\nexpected: %v\\ngot     : %v\", i, want[i].String(), s.String())\n\t\t}\n\t}\n\tif !bytes.Equal(b[:20], in[:20]) {\n\t\tt.Errorf(\"r.Read() input doesn't match output\")\n\t}\n}\n\n// XXX blocking writer test doesn't work.\nfunc _TestWriter(t *testing.T) {\n\tb := make([]byte, 100)\n\tfor i := range b {\n\t\tb[i] = byte(i)\n\t}\n\tw := NewWriter(\u0026bytes.Buffer{}, 200)\n\tstart := time.Now()\n\n\t// Make sure w implements Limiter\n\t_ = Limiter(w)\n\n\t// Non-blocking 20-byte write for the first sample returns ErrLimit\n\tw.SetBlocking(false)\n\tif n, err := w.Write(b); n != 20 || err != ErrLimit {\n\t\tt.Fatalf(\"w.Write(b) expected 20 (ErrLimit); got %v (%v)\", n, err.Error())\n\t} else if rt := time.Since(start); rt \u003e _50ms {\n\t\tt.Fatalf(\"w.Write(b) took too long (%v)\", rt)\n\t}\n\n\t// Blocking 80-byte write\n\t// w.SetBlocking(true)\n\t// XXX This test doesn't work, because w.Write calls w.Limit(block=false),\n\t// XXX and it returns ErrLimit after 20. What we want is to keep waiting until 80 is returned,\n\t// XXX but blocking isn't supported. Sleeping 800 shouldn't be sufficient either (its a burst).\n\t// XXX This limits the usage of Limiter and m.Limit().\n\tios_test.Sleep(800 * time.Millisecond)\n\tif n, err := w.Write(b[20:]); n \u003c 80 {\n\t} else if n != 80 || err != nil {\n\t\tt.Fatalf(\"w.Write(b[20:]) expected 80 (\u003cnil\u003e); got %v (%v)\", n, err.Error())\n\t} else if rt := time.Since(start); rt \u003c _300ms {\n\t\t// Explanation for `rt \u003c _300ms` (as opposed to `\u003c _400ms`)\n\t\t//\n\t\t//                 |\u003c-- start        |        |\n\t\t// epochs: -----0ms|---100ms|---200ms|---300ms|---400ms\n\t\t// sends:        20|20      |20      |20      |20#\n\t\t//\n\t\t// NOTE: The '#' symbol can thus happen before 400ms is up.\n\t\t// Thus, we can only panic if rt \u003c _300ms.\n\t\tt.Fatalf(\"w.Write(b[20:]) returned ahead of time (%v)\", rt.String())\n\t}\n\n\tw.SetTransferSize(100)\n\tstatus := []Status{w.Status(), nextStatus(w.Monitor)}\n\tstart = status[0].Start\n\n\t// Active, Start, Duration, Idle, Bytes, Samples, InstRate, CurRate, AvgRate, PeakRate, BytesRem, TimeRem, Progress\n\twant := []Status{\n\t\t{true, start, _400ms, 0, 80, 4, 200, 200, 200, 200, 20, _100ms, 80000},\n\t\t{true, start, _500ms, _100ms, 100, 5, 200, 200, 200, 200, 0, 0, 100000},\n\t}\n\tfor i, s := range status {\n\t\t// XXX s := s\n\t\tif !statusesAreEqual(\u0026s, \u0026want[i]) {\n\t\t\tt.Errorf(\"w.Status(%v)\\nexpected: %v\\ngot     : %v\\n\", i, want[i].String(), s.String())\n\t\t}\n\t}\n\tif !bytes.Equal(b, w.Writer.(*bytes.Buffer).Bytes()) {\n\t\tt.Errorf(\"w.Write() input doesn't match output\")\n\t}\n}\n\nconst (\n\tmaxDeviationForDuration       = 50 * time.Millisecond\n\tmaxDeviationForRate     int64 = 50\n)\n\n// statusesAreEqual returns true if s1 is equal to s2. Equality here means\n// general equality of fields except for the duration and rates, which can\n// drift due to unpredictable delays (e.g. thread wakes up 25ms after\n// `time.Sleep` has ended).\nfunc statusesAreEqual(s1 *Status, s2 *Status) bool {\n\tif s1.Active == s2.Active \u0026\u0026\n\t\ts1.Start == s2.Start \u0026\u0026\n\t\tdurationsAreEqual(s1.Duration, s2.Duration, maxDeviationForDuration) \u0026\u0026\n\t\ts1.Idle == s2.Idle \u0026\u0026\n\t\ts1.Bytes == s2.Bytes \u0026\u0026\n\t\ts1.Samples == s2.Samples \u0026\u0026\n\t\tratesAreEqual(s1.InstRate, s2.InstRate, maxDeviationForRate) \u0026\u0026\n\t\tratesAreEqual(s1.CurRate, s2.CurRate, maxDeviationForRate) \u0026\u0026\n\t\tratesAreEqual(s1.AvgRate, s2.AvgRate, maxDeviationForRate) \u0026\u0026\n\t\tratesAreEqual(s1.PeakRate, s2.PeakRate, maxDeviationForRate) \u0026\u0026\n\t\ts1.BytesRem == s2.BytesRem \u0026\u0026\n\t\tdurationsAreEqual(s1.TimeRem, s2.TimeRem, maxDeviationForDuration) \u0026\u0026\n\t\ts1.Progress == s2.Progress {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc durationsAreEqual(d1 time.Duration, d2 time.Duration, maxDeviation time.Duration) bool {\n\treturn d2-d1 \u003c= maxDeviation\n}\n\nfunc ratesAreEqual(r1 int64, r2 int64, maxDeviation int64) bool {\n\tsub := r1 - r2\n\tif sub \u003c 0 {\n\t\tsub = -sub\n\t}\n\tif sub \u003c= maxDeviation {\n\t\treturn true\n\t}\n\treturn false\n}\n"},{"Name":"util.gno","Body":"//\n// Written by Maxim Khitrov (November 2012)\n//\n\npackage flow\n\nimport (\n\t\"math\"\n\t\"strconv\"\n\t\"time\"\n)\n\n// clockRate is the resolution and precision of clock().\nconst clockRate = 20 * time.Millisecond\n\n// czero is the process start time rounded down to the nearest clockRate\n// increment.\nvar czero = time.Now().Round(clockRate)\n\n// clock returns a low resolution timestamp relative to the process start time.\nfunc clock() time.Duration {\n\treturn time.Now().Round(clockRate).Sub(czero)\n}\n\n// clockToTime converts a clock() timestamp to an absolute time.Time value.\nfunc clockToTime(c time.Duration) time.Time {\n\treturn czero.Add(c)\n}\n\n// clockRound returns d rounded to the nearest clockRate increment.\nfunc clockRound(d time.Duration) time.Duration {\n\treturn (d + clockRate\u003e\u003e1) / clockRate * clockRate\n}\n\n// round returns x rounded to the nearest int64 (non-negative values only).\nfunc round(x float64) int64 {\n\tif _, frac := math.Modf(x); frac \u003e= 0.5 {\n\t\treturn int64(math.Ceil(x))\n\t}\n\treturn int64(math.Floor(x))\n}\n\n// Percent represents a percentage in increments of 1/1000th of a percent.\ntype Percent uint32\n\n// percentOf calculates what percent of the total is x.\nfunc percentOf(x, total float64) Percent {\n\tif x \u003c 0 || total \u003c= 0 {\n\t\treturn 0\n\t} else if p := round(x / total * 1e5); p \u003c= math.MaxUint32 {\n\t\treturn Percent(p)\n\t}\n\treturn Percent(math.MaxUint32)\n}\n\nfunc (p Percent) Float() float64 {\n\treturn float64(p) * 1e-3\n}\n\nfunc (p Percent) String() string {\n\tvar buf [12]byte\n\tb := strconv.AppendUint(buf[:0], uint64(p)/1000, 10)\n\tn := len(b)\n\tb = strconv.AppendUint(b, 1000+uint64(p)%1000, 10)\n\tb[n] = '.'\n\treturn string(append(b, '%'))\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"6qcLlE1LA4b3e9XoeICTDa6XRrlPwkFsm/A1oZMovRFRmxQAQnIsedHxoK1XVR2KG/Da5yn7T83oRIWH5uJJHA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"flow","Path":"gno.land/p/demo/flow_test2","Files":[{"Name":"LICENSE.md","Body":"https://github.com/mxk/go-flowrate/blob/master/LICENSE\nBSD 3-Clause \"New\" or \"Revised\" License\n\nCopyright (c) 2014 The Go-FlowRate Authors. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n * Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n\n * Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the\n   distribution.\n\n * Neither the name of the go-flowrate project nor the names of its\n   contributors may be used to endorse or promote products derived\n   from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"},{"Name":"README.md","Body":"Data Flow Rate Control\n======================\n\nTo download and install this package run:\n\ngo get github.com/mxk/go-flowrate/flowrate\n\nThe documentation is available at:\n\nhttp://godoc.org/github.com/mxk/go-flowrate/flowrate\n"},{"Name":"flow.gno","Body":"//\n// Written by Maxim Khitrov (November 2012)\n//\n// XXX modified to disable blocking, time.Sleep().\n\n// Package flow provides the tools for monitoring and limiting the flow rate\n// of an arbitrary data stream.\npackage flow\n\nimport (\n\t\"math\"\n\t// \"sync\"\n\t\"time\"\n)\n\n// Monitor monitors and limits the transfer rate of a data stream.\ntype Monitor struct {\n\t// mu      sync.Mutex    // Mutex guarding access to all internal fields\n\tactive  bool          // Flag indicating an active transfer\n\tstart   time.Duration // Transfer start time (clock() value)\n\tbytes   int64         // Total number of bytes transferred\n\tsamples int64         // Total number of samples taken\n\n\trSample float64 // Most recent transfer rate sample (bytes per second)\n\trEMA    float64 // Exponential moving average of rSample\n\trPeak   float64 // Peak transfer rate (max of all rSamples)\n\trWindow float64 // rEMA window (seconds)\n\n\tsBytes int64         // Number of bytes transferred since sLast\n\tsLast  time.Duration // Most recent sample time (stop time when inactive)\n\tsRate  time.Duration // Sampling rate\n\n\ttBytes int64         // Number of bytes expected in the current transfer\n\ttLast  time.Duration // Time of the most recent transfer of at least 1 byte\n}\n\n// New creates a new flow control monitor. Instantaneous transfer rate is\n// measured and updated for each sampleRate interval. windowSize determines the\n// weight of each sample in the exponential moving average (EMA) calculation.\n// The exact formulas are:\n//\n//\tsampleTime = currentTime - prevSampleTime\n//\tsampleRate = byteCount / sampleTime\n//\tweight     = 1 - exp(-sampleTime/windowSize)\n//\tnewRate    = weight*sampleRate + (1-weight)*oldRate\n//\n// The default values for sampleRate and windowSize (if \u003c= 0) are 100ms and 1s,\n// respectively.\nfunc New(sampleRate, windowSize time.Duration) *Monitor {\n\tif sampleRate = clockRound(sampleRate); sampleRate \u003c= 0 {\n\t\tsampleRate = 5 * clockRate\n\t}\n\tif windowSize \u003c= 0 {\n\t\twindowSize = 1 * time.Second\n\t}\n\tnow := clock()\n\treturn \u0026Monitor{\n\t\tactive:  true,\n\t\tstart:   now,\n\t\trWindow: windowSize.Seconds(),\n\t\tsLast:   now,\n\t\tsRate:   sampleRate,\n\t\ttLast:   now,\n\t}\n}\n\n// Update records the transfer of n bytes and returns n. It should be called\n// after each Read/Write operation, even if n is 0.\nfunc (m *Monitor) Update(n int) int {\n\t// m.mu.Lock()\n\tm.update(n)\n\t// m.mu.Unlock()\n\treturn n\n}\n\n// Hack to set the current rEMA.\nfunc (m *Monitor) SetREMA(rEMA float64) {\n\t// m.mu.Lock()\n\tm.rEMA = rEMA\n\tm.samples++\n\t// m.mu.Unlock()\n}\n\n// IO is a convenience method intended to wrap io.Reader and io.Writer method\n// execution. It calls m.Update(n) and then returns (n, err) unmodified.\nfunc (m *Monitor) IO(n int, err error) (int, error) {\n\treturn m.Update(n), err\n}\n\n// Done marks the transfer as finished and prevents any further updates or\n// limiting. Instantaneous and current transfer rates drop to 0. Update, IO, and\n// Limit methods become NOOPs. It returns the total number of bytes transferred.\nfunc (m *Monitor) Done() int64 {\n\t// m.mu.Lock()\n\tif now := m.update(0); m.sBytes \u003e 0 {\n\t\tm.reset(now)\n\t}\n\tm.active = false\n\tm.tLast = 0\n\tn := m.bytes\n\t// m.mu.Unlock()\n\treturn n\n}\n\n// timeRemLimit is the maximum Status.TimeRem value.\nconst timeRemLimit = 999*time.Hour + 59*time.Minute + 59*time.Second\n\n// Status represents the current Monitor status. All transfer rates are in bytes\n// per second rounded to the nearest byte.\ntype Status struct {\n\tActive   bool          // Flag indicating an active transfer\n\tStart    time.Time     // Transfer start time\n\tDuration time.Duration // Time period covered by the statistics\n\tIdle     time.Duration // Time since the last transfer of at least 1 byte\n\tBytes    int64         // Total number of bytes transferred\n\tSamples  int64         // Total number of samples taken\n\tInstRate int64         // Instantaneous transfer rate\n\tCurRate  int64         // Current transfer rate (EMA of InstRate)\n\tAvgRate  int64         // Average transfer rate (Bytes / Duration)\n\tPeakRate int64         // Maximum instantaneous transfer rate\n\tBytesRem int64         // Number of bytes remaining in the transfer\n\tTimeRem  time.Duration // Estimated time to completion\n\tProgress Percent       // Overall transfer progress\n}\n\nfunc (s Status) String() string {\n\treturn \"STATUS{}\"\n}\n\n// Status returns current transfer status information. The returned value\n// becomes static after a call to Done.\nfunc (m *Monitor) Status() Status {\n\t// m.mu.Lock()\n\tnow := m.update(0)\n\ts := Status{\n\t\tActive:   m.active,\n\t\tStart:    clockToTime(m.start),\n\t\tDuration: m.sLast - m.start,\n\t\tIdle:     now - m.tLast,\n\t\tBytes:    m.bytes,\n\t\tSamples:  m.samples,\n\t\tPeakRate: round(m.rPeak),\n\t\tBytesRem: m.tBytes - m.bytes,\n\t\tProgress: percentOf(float64(m.bytes), float64(m.tBytes)),\n\t}\n\tif s.BytesRem \u003c 0 {\n\t\ts.BytesRem = 0\n\t}\n\tif s.Duration \u003e 0 {\n\t\trAvg := float64(s.Bytes) / s.Duration.Seconds()\n\t\ts.AvgRate = round(rAvg)\n\t\tif s.Active {\n\t\t\ts.InstRate = round(m.rSample)\n\t\t\ts.CurRate = round(m.rEMA)\n\t\t\tif s.BytesRem \u003e 0 {\n\t\t\t\tif tRate := 0.8*m.rEMA + 0.2*rAvg; tRate \u003e 0 {\n\t\t\t\t\tns := float64(s.BytesRem) / tRate * 1e9\n\t\t\t\t\tif ns \u003e float64(timeRemLimit) {\n\t\t\t\t\t\tns = float64(timeRemLimit)\n\t\t\t\t\t}\n\t\t\t\t\ts.TimeRem = clockRound(time.Duration(ns))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// m.mu.Unlock()\n\treturn s\n}\n\n// Limit restricts the instantaneous (per-sample) data flow to rate bytes per\n// second. It returns the maximum number of bytes (0 \u003c= n \u003c= want) that may be\n// transferred immediately without exceeding the limit. If block == true, the\n// call blocks until n \u003e 0. want is returned unmodified if want \u003c 1, rate \u003c 1,\n// or the transfer is inactive (after a call to Done).\n//\n// At least one byte is always allowed to be transferred in any given sampling\n// period. Thus, if the sampling rate is 100ms, the lowest achievable flow rate\n// is 10 bytes per second.\n//\n// For usage examples, see the implementation of Reader and Writer in io.go.\nfunc (m *Monitor) Limit(want int, rate int64, block bool) (n int) {\n\tif block {\n\t\tpanic(\"blocking not yet supported\")\n\t}\n\tif want \u003c 1 || rate \u003c 1 {\n\t\treturn want\n\t}\n\t// m.mu.Lock()\n\n\t// Determine the maximum number of bytes that can be sent in one sample\n\tlimit := round(float64(rate) * m.sRate.Seconds())\n\tif limit \u003c= 0 {\n\t\tlimit = 1\n\t}\n\n\t_ = m.update(0)\n\t/* XXX\n\t// If block == true, wait until m.sBytes \u003c limit\n\tif now := m.update(0); block {\n\t\tfor m.sBytes \u003e= limit \u0026\u0026 m.active {\n\t\t\tnow = m.waitNextSample(now)\n\t\t}\n\t}\n\t*/\n\n\t// Make limit \u003c= want (unlimited if the transfer is no longer active)\n\tif limit -= m.sBytes; limit \u003e int64(want) || !m.active {\n\t\tlimit = int64(want)\n\t}\n\t// m.mu.Unlock()\n\n\tif limit \u003c 0 {\n\t\tlimit = 0\n\t}\n\treturn int(limit)\n}\n\n// SetTransferSize specifies the total size of the data transfer, which allows\n// the Monitor to calculate the overall progress and time to completion.\nfunc (m *Monitor) SetTransferSize(bytes int64) {\n\tif bytes \u003c 0 {\n\t\tbytes = 0\n\t}\n\t// m.mu.Lock()\n\tm.tBytes = bytes\n\t// m.mu.Unlock()\n}\n\n// update accumulates the transferred byte count for the current sample until\n// clock() - m.sLast \u003e= m.sRate. The monitor status is updated once the current\n// sample is done.\nfunc (m *Monitor) update(n int) (now time.Duration) {\n\tif !m.active {\n\t\treturn\n\t}\n\tif now = clock(); n \u003e 0 {\n\t\tm.tLast = now\n\t}\n\tm.sBytes += int64(n)\n\tif sTime := now - m.sLast; sTime \u003e= m.sRate {\n\t\tt := sTime.Seconds()\n\t\tif m.rSample = float64(m.sBytes) / t; m.rSample \u003e m.rPeak {\n\t\t\tm.rPeak = m.rSample\n\t\t}\n\n\t\t// Exponential moving average using a method similar to *nix load\n\t\t// average calculation. Longer sampling periods carry greater weight.\n\t\tif m.samples \u003e 0 {\n\t\t\tw := math.Exp(-t / m.rWindow)\n\t\t\tm.rEMA = m.rSample + w*(m.rEMA-m.rSample)\n\t\t} else {\n\t\t\tm.rEMA = m.rSample\n\t\t}\n\t\tm.reset(now)\n\t}\n\treturn\n}\n\n// reset clears the current sample state in preparation for the next sample.\nfunc (m *Monitor) reset(sampleTime time.Duration) {\n\tm.bytes += m.sBytes\n\tm.samples++\n\tm.sBytes = 0\n\tm.sLast = sampleTime\n}\n\n/*\n// waitNextSample sleeps for the remainder of the current sample. The lock is\n// released and reacquired during the actual sleep period, so it's possible for\n// the transfer to be inactive when this method returns.\nfunc (m *Monitor) waitNextSample(now time.Duration) time.Duration {\n\tconst minWait = 5 * time.Millisecond\n\tcurrent := m.sLast\n\n\t// sleep until the last sample time changes (ideally, just one iteration)\n\tfor m.sLast == current \u0026\u0026 m.active {\n\t\td := current + m.sRate - now\n\t\t// m.mu.Unlock()\n\t\tif d \u003c minWait {\n\t\t\td = minWait\n\t\t}\n\t\ttime.Sleep(d)\n\t\t// m.mu.Lock()\n\t\tnow = m.update(0)\n\t}\n\treturn now\n}\n*/\n"},{"Name":"io.gno","Body":"//\n// Written by Maxim Khitrov (November 2012)\n//\n\npackage flow\n\nimport (\n\t\"errors\"\n\t\"io\"\n)\n\n// ErrLimit is returned by the Writer when a non-blocking write is short due to\n// the transfer rate limit.\nvar ErrLimit = errors.New(\"flowrate: flow rate limit exceeded\")\n\n// Limiter is implemented by the Reader and Writer to provide a consistent\n// interface for monitoring and controlling data transfer.\ntype Limiter interface {\n\tDone() int64\n\tStatus() Status\n\tSetTransferSize(bytes int64)\n\tSetLimit(new int64) (old int64)\n\tSetBlocking(new bool) (old bool)\n}\n\n// Reader implements io.ReadCloser with a restriction on the rate of data\n// transfer.\ntype Reader struct {\n\tio.Reader // Data source\n\t*Monitor  // Flow control monitor\n\n\tlimit int64 // Rate limit in bytes per second (unlimited when \u003c= 0)\n\tblock bool  // What to do when no new bytes can be read due to the limit\n}\n\n// NewReader restricts all Read operations on r to limit bytes per second.\nfunc NewReader(r io.Reader, limit int64) *Reader {\n\treturn \u0026Reader{r, New(0, 0), limit, false} // XXX default false\n}\n\n// Read reads up to len(p) bytes into p without exceeding the current transfer\n// rate limit. It returns (0, nil) immediately if r is non-blocking and no new\n// bytes can be read at this time.\nfunc (r *Reader) Read(p []byte) (n int, err error) {\n\tp = p[:r.Limit(len(p), r.limit, r.block)]\n\tif len(p) \u003e 0 {\n\t\tn, err = r.IO(r.Reader.Read(p))\n\t}\n\treturn\n}\n\n// SetLimit changes the transfer rate limit to new bytes per second and returns\n// the previous setting.\nfunc (r *Reader) SetLimit(new int64) (old int64) {\n\told, r.limit = r.limit, new\n\treturn\n}\n\n// SetBlocking changes the blocking behavior and returns the previous setting. A\n// Read call on a non-blocking reader returns immediately if no additional bytes\n// may be read at this time due to the rate limit.\nfunc (r *Reader) SetBlocking(new bool) (old bool) {\n\tif new == true {\n\t\tpanic(\"blocking not yet supported\")\n\t}\n\told, r.block = r.block, new\n\treturn\n}\n\n// Close closes the underlying reader if it implements the io.Closer interface.\nfunc (r *Reader) Close() error {\n\tdefer r.Done()\n\tif c, ok := r.Reader.(io.Closer); ok {\n\t\treturn c.Close()\n\t}\n\treturn nil\n}\n\n// Writer implements io.WriteCloser with a restriction on the rate of data\n// transfer.\ntype Writer struct {\n\tio.Writer // Data destination\n\t*Monitor  // Flow control monitor\n\n\tlimit int64 // Rate limit in bytes per second (unlimited when \u003c= 0)\n\tblock bool  // What to do when no new bytes can be written due to the limit\n}\n\n// NewWriter restricts all Write operations on w to limit bytes per second. The\n// transfer rate and the default blocking behavior (true) can be changed\n// directly on the returned *Writer.\nfunc NewWriter(w io.Writer, limit int64) *Writer {\n\treturn \u0026Writer{w, New(0, 0), limit, false} // XXX default false\n}\n\n// Write writes len(p) bytes from p to the underlying data stream without\n// exceeding the current transfer rate limit. It returns (n, ErrLimit) if w is\n// non-blocking and no additional bytes can be written at this time.\nfunc (w *Writer) Write(p []byte) (n int, err error) {\n\tvar c int\n\tfor len(p) \u003e 0 \u0026\u0026 err == nil {\n\t\ts := p[:w.Limit(len(p), w.limit, w.block)]\n\t\tif len(s) \u003e 0 {\n\t\t\tc, err = w.IO(w.Writer.Write(s))\n\t\t} else {\n\t\t\treturn n, ErrLimit\n\t\t}\n\t\tp = p[c:]\n\t\tn += c\n\t}\n\treturn\n}\n\n// SetLimit changes the transfer rate limit to new bytes per second and returns\n// the previous setting.\nfunc (w *Writer) SetLimit(new int64) (old int64) {\n\told, w.limit = w.limit, new\n\treturn\n}\n\n// SetBlocking changes the blocking behavior and returns the previous setting. A\n// Write call on a non-blocking writer returns as soon as no additional bytes\n// may be written at this time due to the rate limit.\nfunc (w *Writer) SetBlocking(new bool) (old bool) {\n\told, w.block = w.block, new\n\treturn\n}\n\n// Close closes the underlying writer if it implements the io.Closer interface.\nfunc (w *Writer) Close() error {\n\tdefer w.Done()\n\tif c, ok := w.Writer.(io.Closer); ok {\n\t\treturn c.Close()\n\t}\n\treturn nil\n}\n"},{"Name":"io_test.gno","Body":"//\n// Written by Maxim Khitrov (November 2012)\n//\n\npackage flow\n\nimport (\n\t\"bytes\"\n\t\"testing\"\n\t\"time\"\n\n\tios_test \"internal/os_test\"\n)\n\n// XXX ugh, I can't even sleep milliseconds.\n// XXX\n\nconst (\n\t_50ms  = 50 * time.Millisecond\n\t_100ms = 100 * time.Millisecond\n\t_200ms = 200 * time.Millisecond\n\t_300ms = 300 * time.Millisecond\n\t_400ms = 400 * time.Millisecond\n\t_500ms = 500 * time.Millisecond\n)\n\nfunc nextStatus(m *Monitor) Status {\n\tsamples := m.samples\n\tfor i := 0; i \u003c 30; i++ {\n\t\tif s := m.Status(); s.Samples != samples {\n\t\t\treturn s\n\t\t}\n\t\tios_test.Sleep(5 * time.Millisecond)\n\t}\n\treturn m.Status()\n}\n\nfunc TestReader(t *testing.T) {\n\tin := make([]byte, 100)\n\tfor i := range in {\n\t\tin[i] = byte(i)\n\t}\n\tb := make([]byte, 100)\n\tr := NewReader(bytes.NewReader(in), 100)\n\tstart := time.Now()\n\n\t// Make sure r implements Limiter\n\t_ = Limiter(r)\n\n\t// 1st read of 10 bytes is performed immediately\n\tif n, err := r.Read(b); n != 10 {\n\t\tt.Fatalf(\"r.Read(b) expected 10 (\u003cnil\u003e); got %v\", n)\n\t} else if err != nil {\n\t\tt.Fatalf(\"r.Read(b) expected 10 (\u003cnil\u003e); got %v (%v)\", n, err.Error())\n\t} else if rt := time.Since(start); rt \u003e _50ms {\n\t\tt.Fatalf(\"r.Read(b) took too long (%v)\", rt.String())\n\t}\n\n\t// No new Reads allowed in the current sample\n\tr.SetBlocking(false)\n\tif n, err := r.Read(b); n != 0 {\n\t\tt.Fatalf(\"r.Read(b) expected 0 (\u003cnil\u003e); got %v\", n)\n\t} else if err != nil {\n\t\tt.Fatalf(\"r.Read(b) expected 0 (\u003cnil\u003e); got %v (%v)\", n, err.Error())\n\t} else if rt := time.Since(start); rt \u003e _50ms {\n\t\tt.Fatalf(\"r.Read(b) took too long (%v)\", rt.String())\n\t}\n\n\tstatus := [6]Status{0: r.Status()} // No samples in the first status\n\n\t// 2nd read of 10 bytes blocks until the next sample\n\t// r.SetBlocking(true)\n\tios_test.Sleep(100 * time.Millisecond)\n\tif n, err := r.Read(b[10:]); n != 10 {\n\t\tt.Fatalf(\"r.Read(b[10:]) expected 10 (\u003cnil\u003e); got %v\", n)\n\t} else if err != nil {\n\t\tt.Fatalf(\"r.Read(b[10:]) expected 10 (\u003cnil\u003e); got %v (%v)\", n, err.Error())\n\t} else if rt := time.Since(start); rt \u003c _100ms {\n\t\tt.Fatalf(\"r.Read(b[10:]) returned ahead of time (%v)\", rt.String())\n\t}\n\n\tstatus[1] = r.Status()            // 1st sample\n\tstatus[2] = nextStatus(r.Monitor) // 2nd sample\n\tstatus[3] = nextStatus(r.Monitor) // No activity for the 3rd sample\n\n\tif n := r.Done(); n != 20 {\n\t\tt.Fatalf(\"r.Done() expected 20; got %v\", n)\n\t}\n\n\tstatus[4] = r.Status()\n\tstatus[5] = nextStatus(r.Monitor) // Timeout\n\tstart = status[0].Start\n\n\t// Active, Start, Duration, Idle, Bytes, Samples, InstRate, CurRate, AvgRate, PeakRate, BytesRem, TimeRem, Progress\n\twant := []Status{\n\t\t{true, start, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},\n\t\t{true, start, _100ms, 0, 10, 1, 100, 100, 100, 100, 0, 0, 0},\n\t\t{true, start, _200ms, _100ms, 20, 2, 100, 100, 100, 100, 0, 0, 0},\n\t\t{true, start, _300ms, _200ms, 20, 3, 0, 90, 67, 100, 0, 0, 0},\n\t\t{false, start, _300ms, 0, 20, 3, 0, 0, 67, 100, 0, 0, 0},\n\t\t{false, start, _300ms, 0, 20, 3, 0, 0, 67, 100, 0, 0, 0},\n\t}\n\tfor i, s := range status {\n\t\t// XXX s := s\n\t\tif !statusesAreEqual(\u0026s, \u0026want[i]) {\n\t\t\tt.Errorf(\"r.Status(%v)\\nexpected: %v\\ngot     : %v\", i, want[i].String(), s.String())\n\t\t}\n\t}\n\tif !bytes.Equal(b[:20], in[:20]) {\n\t\tt.Errorf(\"r.Read() input doesn't match output\")\n\t}\n}\n\n// XXX blocking writer test doesn't work.\nfunc _TestWriter(t *testing.T) {\n\tb := make([]byte, 100)\n\tfor i := range b {\n\t\tb[i] = byte(i)\n\t}\n\tw := NewWriter(\u0026bytes.Buffer{}, 200)\n\tstart := time.Now()\n\n\t// Make sure w implements Limiter\n\t_ = Limiter(w)\n\n\t// Non-blocking 20-byte write for the first sample returns ErrLimit\n\tw.SetBlocking(false)\n\tif n, err := w.Write(b); n != 20 || err != ErrLimit {\n\t\tt.Fatalf(\"w.Write(b) expected 20 (ErrLimit); got %v (%v)\", n, err.Error())\n\t} else if rt := time.Since(start); rt \u003e _50ms {\n\t\tt.Fatalf(\"w.Write(b) took too long (%v)\", rt)\n\t}\n\n\t// Blocking 80-byte write\n\t// w.SetBlocking(true)\n\t// XXX This test doesn't work, because w.Write calls w.Limit(block=false),\n\t// XXX and it returns ErrLimit after 20. What we want is to keep waiting until 80 is returned,\n\t// XXX but blocking isn't supported. Sleeping 800 shouldn't be sufficient either (its a burst).\n\t// XXX This limits the usage of Limiter and m.Limit().\n\tios_test.Sleep(800 * time.Millisecond)\n\tif n, err := w.Write(b[20:]); n \u003c 80 {\n\t} else if n != 80 || err != nil {\n\t\tt.Fatalf(\"w.Write(b[20:]) expected 80 (\u003cnil\u003e); got %v (%v)\", n, err.Error())\n\t} else if rt := time.Since(start); rt \u003c _300ms {\n\t\t// Explanation for `rt \u003c _300ms` (as opposed to `\u003c _400ms`)\n\t\t//\n\t\t//                 |\u003c-- start        |        |\n\t\t// epochs: -----0ms|---100ms|---200ms|---300ms|---400ms\n\t\t// sends:        20|20      |20      |20      |20#\n\t\t//\n\t\t// NOTE: The '#' symbol can thus happen before 400ms is up.\n\t\t// Thus, we can only panic if rt \u003c _300ms.\n\t\tt.Fatalf(\"w.Write(b[20:]) returned ahead of time (%v)\", rt.String())\n\t}\n\n\tw.SetTransferSize(100)\n\tstatus := []Status{w.Status(), nextStatus(w.Monitor)}\n\tstart = status[0].Start\n\n\t// Active, Start, Duration, Idle, Bytes, Samples, InstRate, CurRate, AvgRate, PeakRate, BytesRem, TimeRem, Progress\n\twant := []Status{\n\t\t{true, start, _400ms, 0, 80, 4, 200, 200, 200, 200, 20, _100ms, 80000},\n\t\t{true, start, _500ms, _100ms, 100, 5, 200, 200, 200, 200, 0, 0, 100000},\n\t}\n\tfor i, s := range status {\n\t\t// XXX s := s\n\t\tif !statusesAreEqual(\u0026s, \u0026want[i]) {\n\t\t\tt.Errorf(\"w.Status(%v)\\nexpected: %v\\ngot     : %v\\n\", i, want[i].String(), s.String())\n\t\t}\n\t}\n\tif !bytes.Equal(b, w.Writer.(*bytes.Buffer).Bytes()) {\n\t\tt.Errorf(\"w.Write() input doesn't match output\")\n\t}\n}\n\nconst (\n\tmaxDeviationForDuration       = 50 * time.Millisecond\n\tmaxDeviationForRate     int64 = 50\n)\n\n// statusesAreEqual returns true if s1 is equal to s2. Equality here means\n// general equality of fields except for the duration and rates, which can\n// drift due to unpredictable delays (e.g. thread wakes up 25ms after\n// `time.Sleep` has ended).\nfunc statusesAreEqual(s1 *Status, s2 *Status) bool {\n\tif s1.Active == s2.Active \u0026\u0026\n\t\ts1.Start == s2.Start \u0026\u0026\n\t\tdurationsAreEqual(s1.Duration, s2.Duration, maxDeviationForDuration) \u0026\u0026\n\t\ts1.Idle == s2.Idle \u0026\u0026\n\t\ts1.Bytes == s2.Bytes \u0026\u0026\n\t\ts1.Samples == s2.Samples \u0026\u0026\n\t\tratesAreEqual(s1.InstRate, s2.InstRate, maxDeviationForRate) \u0026\u0026\n\t\tratesAreEqual(s1.CurRate, s2.CurRate, maxDeviationForRate) \u0026\u0026\n\t\tratesAreEqual(s1.AvgRate, s2.AvgRate, maxDeviationForRate) \u0026\u0026\n\t\tratesAreEqual(s1.PeakRate, s2.PeakRate, maxDeviationForRate) \u0026\u0026\n\t\ts1.BytesRem == s2.BytesRem \u0026\u0026\n\t\tdurationsAreEqual(s1.TimeRem, s2.TimeRem, maxDeviationForDuration) \u0026\u0026\n\t\ts1.Progress == s2.Progress {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc durationsAreEqual(d1 time.Duration, d2 time.Duration, maxDeviation time.Duration) bool {\n\treturn d2-d1 \u003c= maxDeviation\n}\n\nfunc ratesAreEqual(r1 int64, r2 int64, maxDeviation int64) bool {\n\tsub := r1 - r2\n\tif sub \u003c 0 {\n\t\tsub = -sub\n\t}\n\tif sub \u003c= maxDeviation {\n\t\treturn true\n\t}\n\treturn false\n}\n"},{"Name":"util.gno","Body":"//\n// Written by Maxim Khitrov (November 2012)\n//\n\npackage flow\n\nimport (\n\t\"math\"\n\t\"strconv\"\n\t\"time\"\n)\n\n// clockRate is the resolution and precision of clock().\nconst clockRate = 20 * time.Millisecond\n\n// czero is the process start time rounded down to the nearest clockRate\n// increment.\nvar czero = time.Now().Round(clockRate)\n\n// clock returns a low resolution timestamp relative to the process start time.\nfunc clock() time.Duration {\n\treturn time.Now().Round(clockRate).Sub(czero)\n}\n\n// clockToTime converts a clock() timestamp to an absolute time.Time value.\nfunc clockToTime(c time.Duration) time.Time {\n\treturn czero.Add(c)\n}\n\n// clockRound returns d rounded to the nearest clockRate increment.\nfunc clockRound(d time.Duration) time.Duration {\n\treturn (d + clockRate\u003e\u003e1) / clockRate * clockRate\n}\n\n// round returns x rounded to the nearest int64 (non-negative values only).\nfunc round(x float64) int64 {\n\tif _, frac := math.Modf(x); frac \u003e= 0.5 {\n\t\treturn int64(math.Ceil(x))\n\t}\n\treturn int64(math.Floor(x))\n}\n\n// Percent represents a percentage in increments of 1/1000th of a percent.\ntype Percent uint32\n\n// percentOf calculates what percent of the total is x.\nfunc percentOf(x, total float64) Percent {\n\tif x \u003c 0 || total \u003c= 0 {\n\t\treturn 0\n\t} else if p := round(x / total * 1e5); p \u003c= math.MaxUint32 {\n\t\treturn Percent(p)\n\t}\n\treturn Percent(math.MaxUint32)\n}\n\nfunc (p Percent) Float() float64 {\n\treturn float64(p) * 1e-3\n}\n\nfunc (p Percent) String() string {\n\tvar buf [12]byte\n\tb := strconv.AppendUint(buf[:0], uint64(p)/1000, 10)\n\tn := len(b)\n\tb = strconv.AppendUint(b, 1000+uint64(p)%1000, 10)\n\tb[n] = '.'\n\treturn string(append(b, '%'))\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"nYnUnP9X6kmpHGO0V71IWw2jVJA6n0PbOFm9zApTbrgkdk701lL2p4X0VoCS+j/KSlLUUhaJFa/GCit1ANFqwA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"flow","Path":"gno.land/p/demo/flow_test3","Files":[{"Name":"LICENSE.md","Body":"https://github.com/mxk/go-flowrate/blob/master/LICENSE\nBSD 3-Clause \"New\" or \"Revised\" License\n\nCopyright (c) 2014 The Go-FlowRate Authors. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n * Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n\n * Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the\n   distribution.\n\n * Neither the name of the go-flowrate project nor the names of its\n   contributors may be used to endorse or promote products derived\n   from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"},{"Name":"README.md","Body":"Data Flow Rate Control\n======================\n\nTo download and install this package run:\n\ngo get github.com/mxk/go-flowrate/flowrate\n\nThe documentation is available at:\n\nhttp://godoc.org/github.com/mxk/go-flowrate/flowrate\n"},{"Name":"flow.gno","Body":"//\n// Written by Maxim Khitrov (November 2012)\n//\n// XXX modified to disable blocking, time.Sleep().\n\n// Package flow provides the tools for monitoring and limiting the flow rate\n// of an arbitrary data stream.\npackage flow\n\nimport (\n\t\"math\"\n\t// \"sync\"\n\t\"time\"\n)\n\n// Monitor monitors and limits the transfer rate of a data stream.\ntype Monitor struct {\n\t// mu      sync.Mutex    // Mutex guarding access to all internal fields\n\tactive  bool          // Flag indicating an active transfer\n\tstart   time.Duration // Transfer start time (clock() value)\n\tbytes   int64         // Total number of bytes transferred\n\tsamples int64         // Total number of samples taken\n\n\trSample float64 // Most recent transfer rate sample (bytes per second)\n\trEMA    float64 // Exponential moving average of rSample\n\trPeak   float64 // Peak transfer rate (max of all rSamples)\n\trWindow float64 // rEMA window (seconds)\n\n\tsBytes int64         // Number of bytes transferred since sLast\n\tsLast  time.Duration // Most recent sample time (stop time when inactive)\n\tsRate  time.Duration // Sampling rate\n\n\ttBytes int64         // Number of bytes expected in the current transfer\n\ttLast  time.Duration // Time of the most recent transfer of at least 1 byte\n}\n\n// New creates a new flow control monitor. Instantaneous transfer rate is\n// measured and updated for each sampleRate interval. windowSize determines the\n// weight of each sample in the exponential moving average (EMA) calculation.\n// The exact formulas are:\n//\n//\tsampleTime = currentTime - prevSampleTime\n//\tsampleRate = byteCount / sampleTime\n//\tweight     = 1 - exp(-sampleTime/windowSize)\n//\tnewRate    = weight*sampleRate + (1-weight)*oldRate\n//\n// The default values for sampleRate and windowSize (if \u003c= 0) are 100ms and 1s,\n// respectively.\nfunc New(sampleRate, windowSize time.Duration) *Monitor {\n\tif sampleRate = clockRound(sampleRate); sampleRate \u003c= 0 {\n\t\tsampleRate = 5 * clockRate\n\t}\n\tif windowSize \u003c= 0 {\n\t\twindowSize = 1 * time.Second\n\t}\n\tnow := clock()\n\treturn \u0026Monitor{\n\t\tactive:  true,\n\t\tstart:   now,\n\t\trWindow: windowSize.Seconds(),\n\t\tsLast:   now,\n\t\tsRate:   sampleRate,\n\t\ttLast:   now,\n\t}\n}\n\n// Update records the transfer of n bytes and returns n. It should be called\n// after each Read/Write operation, even if n is 0.\nfunc (m *Monitor) Update(n int) int {\n\t// m.mu.Lock()\n\tm.update(n)\n\t// m.mu.Unlock()\n\treturn n\n}\n\n// Hack to set the current rEMA.\nfunc (m *Monitor) SetREMA(rEMA float64) {\n\t// m.mu.Lock()\n\tm.rEMA = rEMA\n\tm.samples++\n\t// m.mu.Unlock()\n}\n\n// IO is a convenience method intended to wrap io.Reader and io.Writer method\n// execution. It calls m.Update(n) and then returns (n, err) unmodified.\nfunc (m *Monitor) IO(n int, err error) (int, error) {\n\treturn m.Update(n), err\n}\n\n// Done marks the transfer as finished and prevents any further updates or\n// limiting. Instantaneous and current transfer rates drop to 0. Update, IO, and\n// Limit methods become NOOPs. It returns the total number of bytes transferred.\nfunc (m *Monitor) Done() int64 {\n\t// m.mu.Lock()\n\tif now := m.update(0); m.sBytes \u003e 0 {\n\t\tm.reset(now)\n\t}\n\tm.active = false\n\tm.tLast = 0\n\tn := m.bytes\n\t// m.mu.Unlock()\n\treturn n\n}\n\n// timeRemLimit is the maximum Status.TimeRem value.\nconst timeRemLimit = 999*time.Hour + 59*time.Minute + 59*time.Second\n\n// Status represents the current Monitor status. All transfer rates are in bytes\n// per second rounded to the nearest byte.\ntype Status struct {\n\tActive   bool          // Flag indicating an active transfer\n\tStart    time.Time     // Transfer start time\n\tDuration time.Duration // Time period covered by the statistics\n\tIdle     time.Duration // Time since the last transfer of at least 1 byte\n\tBytes    int64         // Total number of bytes transferred\n\tSamples  int64         // Total number of samples taken\n\tInstRate int64         // Instantaneous transfer rate\n\tCurRate  int64         // Current transfer rate (EMA of InstRate)\n\tAvgRate  int64         // Average transfer rate (Bytes / Duration)\n\tPeakRate int64         // Maximum instantaneous transfer rate\n\tBytesRem int64         // Number of bytes remaining in the transfer\n\tTimeRem  time.Duration // Estimated time to completion\n\tProgress Percent       // Overall transfer progress\n}\n\nfunc (s Status) String() string {\n\treturn \"STATUS{}\"\n}\n\n// Status returns current transfer status information. The returned value\n// becomes static after a call to Done.\nfunc (m *Monitor) Status() Status {\n\t// m.mu.Lock()\n\tnow := m.update(0)\n\ts := Status{\n\t\tActive:   m.active,\n\t\tStart:    clockToTime(m.start),\n\t\tDuration: m.sLast - m.start,\n\t\tIdle:     now - m.tLast,\n\t\tBytes:    m.bytes,\n\t\tSamples:  m.samples,\n\t\tPeakRate: round(m.rPeak),\n\t\tBytesRem: m.tBytes - m.bytes,\n\t\tProgress: percentOf(float64(m.bytes), float64(m.tBytes)),\n\t}\n\tif s.BytesRem \u003c 0 {\n\t\ts.BytesRem = 0\n\t}\n\tif s.Duration \u003e 0 {\n\t\trAvg := float64(s.Bytes) / s.Duration.Seconds()\n\t\ts.AvgRate = round(rAvg)\n\t\tif s.Active {\n\t\t\ts.InstRate = round(m.rSample)\n\t\t\ts.CurRate = round(m.rEMA)\n\t\t\tif s.BytesRem \u003e 0 {\n\t\t\t\tif tRate := 0.8*m.rEMA + 0.2*rAvg; tRate \u003e 0 {\n\t\t\t\t\tns := float64(s.BytesRem) / tRate * 1e9\n\t\t\t\t\tif ns \u003e float64(timeRemLimit) {\n\t\t\t\t\t\tns = float64(timeRemLimit)\n\t\t\t\t\t}\n\t\t\t\t\ts.TimeRem = clockRound(time.Duration(ns))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// m.mu.Unlock()\n\treturn s\n}\n\n// Limit restricts the instantaneous (per-sample) data flow to rate bytes per\n// second. It returns the maximum number of bytes (0 \u003c= n \u003c= want) that may be\n// transferred immediately without exceeding the limit. If block == true, the\n// call blocks until n \u003e 0. want is returned unmodified if want \u003c 1, rate \u003c 1,\n// or the transfer is inactive (after a call to Done).\n//\n// At least one byte is always allowed to be transferred in any given sampling\n// period. Thus, if the sampling rate is 100ms, the lowest achievable flow rate\n// is 10 bytes per second.\n//\n// For usage examples, see the implementation of Reader and Writer in io.go.\nfunc (m *Monitor) Limit(want int, rate int64, block bool) (n int) {\n\tif block {\n\t\tpanic(\"blocking not yet supported\")\n\t}\n\tif want \u003c 1 || rate \u003c 1 {\n\t\treturn want\n\t}\n\t// m.mu.Lock()\n\n\t// Determine the maximum number of bytes that can be sent in one sample\n\tlimit := round(float64(rate) * m.sRate.Seconds())\n\tif limit \u003c= 0 {\n\t\tlimit = 1\n\t}\n\n\t_ = m.update(0)\n\t/* XXX\n\t// If block == true, wait until m.sBytes \u003c limit\n\tif now := m.update(0); block {\n\t\tfor m.sBytes \u003e= limit \u0026\u0026 m.active {\n\t\t\tnow = m.waitNextSample(now)\n\t\t}\n\t}\n\t*/\n\n\t// Make limit \u003c= want (unlimited if the transfer is no longer active)\n\tif limit -= m.sBytes; limit \u003e int64(want) || !m.active {\n\t\tlimit = int64(want)\n\t}\n\t// m.mu.Unlock()\n\n\tif limit \u003c 0 {\n\t\tlimit = 0\n\t}\n\treturn int(limit)\n}\n\n// SetTransferSize specifies the total size of the data transfer, which allows\n// the Monitor to calculate the overall progress and time to completion.\nfunc (m *Monitor) SetTransferSize(bytes int64) {\n\tif bytes \u003c 0 {\n\t\tbytes = 0\n\t}\n\t// m.mu.Lock()\n\tm.tBytes = bytes\n\t// m.mu.Unlock()\n}\n\n// update accumulates the transferred byte count for the current sample until\n// clock() - m.sLast \u003e= m.sRate. The monitor status is updated once the current\n// sample is done.\nfunc (m *Monitor) update(n int) (now time.Duration) {\n\tif !m.active {\n\t\treturn\n\t}\n\tif now = clock(); n \u003e 0 {\n\t\tm.tLast = now\n\t}\n\tm.sBytes += int64(n)\n\tif sTime := now - m.sLast; sTime \u003e= m.sRate {\n\t\tt := sTime.Seconds()\n\t\tif m.rSample = float64(m.sBytes) / t; m.rSample \u003e m.rPeak {\n\t\t\tm.rPeak = m.rSample\n\t\t}\n\n\t\t// Exponential moving average using a method similar to *nix load\n\t\t// average calculation. Longer sampling periods carry greater weight.\n\t\tif m.samples \u003e 0 {\n\t\t\tw := math.Exp(-t / m.rWindow)\n\t\t\tm.rEMA = m.rSample + w*(m.rEMA-m.rSample)\n\t\t} else {\n\t\t\tm.rEMA = m.rSample\n\t\t}\n\t\tm.reset(now)\n\t}\n\treturn\n}\n\n// reset clears the current sample state in preparation for the next sample.\nfunc (m *Monitor) reset(sampleTime time.Duration) {\n\tm.bytes += m.sBytes\n\tm.samples++\n\tm.sBytes = 0\n\tm.sLast = sampleTime\n}\n\n/*\n// waitNextSample sleeps for the remainder of the current sample. The lock is\n// released and reacquired during the actual sleep period, so it's possible for\n// the transfer to be inactive when this method returns.\nfunc (m *Monitor) waitNextSample(now time.Duration) time.Duration {\n\tconst minWait = 5 * time.Millisecond\n\tcurrent := m.sLast\n\n\t// sleep until the last sample time changes (ideally, just one iteration)\n\tfor m.sLast == current \u0026\u0026 m.active {\n\t\td := current + m.sRate - now\n\t\t// m.mu.Unlock()\n\t\tif d \u003c minWait {\n\t\t\td = minWait\n\t\t}\n\t\ttime.Sleep(d)\n\t\t// m.mu.Lock()\n\t\tnow = m.update(0)\n\t}\n\treturn now\n}\n*/\n"},{"Name":"io.gno","Body":"//\n// Written by Maxim Khitrov (November 2012)\n//\n\npackage flow\n\nimport (\n\t\"errors\"\n\t\"io\"\n)\n\n// ErrLimit is returned by the Writer when a non-blocking write is short due to\n// the transfer rate limit.\nvar ErrLimit = errors.New(\"flowrate: flow rate limit exceeded\")\n\n// Limiter is implemented by the Reader and Writer to provide a consistent\n// interface for monitoring and controlling data transfer.\ntype Limiter interface {\n\tDone() int64\n\tStatus() Status\n\tSetTransferSize(bytes int64)\n\tSetLimit(new int64) (old int64)\n\tSetBlocking(new bool) (old bool)\n}\n\n// Reader implements io.ReadCloser with a restriction on the rate of data\n// transfer.\ntype Reader struct {\n\tio.Reader // Data source\n\t*Monitor  // Flow control monitor\n\n\tlimit int64 // Rate limit in bytes per second (unlimited when \u003c= 0)\n\tblock bool  // What to do when no new bytes can be read due to the limit\n}\n\n// NewReader restricts all Read operations on r to limit bytes per second.\nfunc NewReader(r io.Reader, limit int64) *Reader {\n\treturn \u0026Reader{r, New(0, 0), limit, false} // XXX default false\n}\n\n// Read reads up to len(p) bytes into p without exceeding the current transfer\n// rate limit. It returns (0, nil) immediately if r is non-blocking and no new\n// bytes can be read at this time.\nfunc (r *Reader) Read(p []byte) (n int, err error) {\n\tp = p[:r.Limit(len(p), r.limit, r.block)]\n\tif len(p) \u003e 0 {\n\t\tn, err = r.IO(r.Reader.Read(p))\n\t}\n\treturn\n}\n\n// SetLimit changes the transfer rate limit to new bytes per second and returns\n// the previous setting.\nfunc (r *Reader) SetLimit(new int64) (old int64) {\n\told, r.limit = r.limit, new\n\treturn\n}\n\n// SetBlocking changes the blocking behavior and returns the previous setting. A\n// Read call on a non-blocking reader returns immediately if no additional bytes\n// may be read at this time due to the rate limit.\nfunc (r *Reader) SetBlocking(new bool) (old bool) {\n\tif new == true {\n\t\tpanic(\"blocking not yet supported\")\n\t}\n\told, r.block = r.block, new\n\treturn\n}\n\n// Close closes the underlying reader if it implements the io.Closer interface.\nfunc (r *Reader) Close() error {\n\tdefer r.Done()\n\tif c, ok := r.Reader.(io.Closer); ok {\n\t\treturn c.Close()\n\t}\n\treturn nil\n}\n\n// Writer implements io.WriteCloser with a restriction on the rate of data\n// transfer.\ntype Writer struct {\n\tio.Writer // Data destination\n\t*Monitor  // Flow control monitor\n\n\tlimit int64 // Rate limit in bytes per second (unlimited when \u003c= 0)\n\tblock bool  // What to do when no new bytes can be written due to the limit\n}\n\n// NewWriter restricts all Write operations on w to limit bytes per second. The\n// transfer rate and the default blocking behavior (true) can be changed\n// directly on the returned *Writer.\nfunc NewWriter(w io.Writer, limit int64) *Writer {\n\treturn \u0026Writer{w, New(0, 0), limit, false} // XXX default false\n}\n\n// Write writes len(p) bytes from p to the underlying data stream without\n// exceeding the current transfer rate limit. It returns (n, ErrLimit) if w is\n// non-blocking and no additional bytes can be written at this time.\nfunc (w *Writer) Write(p []byte) (n int, err error) {\n\tvar c int\n\tfor len(p) \u003e 0 \u0026\u0026 err == nil {\n\t\ts := p[:w.Limit(len(p), w.limit, w.block)]\n\t\tif len(s) \u003e 0 {\n\t\t\tc, err = w.IO(w.Writer.Write(s))\n\t\t} else {\n\t\t\treturn n, ErrLimit\n\t\t}\n\t\tp = p[c:]\n\t\tn += c\n\t}\n\treturn\n}\n\n// SetLimit changes the transfer rate limit to new bytes per second and returns\n// the previous setting.\nfunc (w *Writer) SetLimit(new int64) (old int64) {\n\told, w.limit = w.limit, new\n\treturn\n}\n\n// SetBlocking changes the blocking behavior and returns the previous setting. A\n// Write call on a non-blocking writer returns as soon as no additional bytes\n// may be written at this time due to the rate limit.\nfunc (w *Writer) SetBlocking(new bool) (old bool) {\n\told, w.block = w.block, new\n\treturn\n}\n\n// Close closes the underlying writer if it implements the io.Closer interface.\nfunc (w *Writer) Close() error {\n\tdefer w.Done()\n\tif c, ok := w.Writer.(io.Closer); ok {\n\t\treturn c.Close()\n\t}\n\treturn nil\n}\n"},{"Name":"io_test.gno","Body":"//\n// Written by Maxim Khitrov (November 2012)\n//\n\npackage flow\n\nimport (\n\t\"bytes\"\n\t\"testing\"\n\t\"time\"\n\n\tios_test \"internal/os_test\"\n)\n\n// XXX ugh, I can't even sleep milliseconds.\n// XXX\n\nconst (\n\t_50ms  = 50 * time.Millisecond\n\t_100ms = 100 * time.Millisecond\n\t_200ms = 200 * time.Millisecond\n\t_300ms = 300 * time.Millisecond\n\t_400ms = 400 * time.Millisecond\n\t_500ms = 500 * time.Millisecond\n)\n\nfunc nextStatus(m *Monitor) Status {\n\tsamples := m.samples\n\tfor i := 0; i \u003c 30; i++ {\n\t\tif s := m.Status(); s.Samples != samples {\n\t\t\treturn s\n\t\t}\n\t\tios_test.Sleep(5 * time.Millisecond)\n\t}\n\treturn m.Status()\n}\n\nfunc TestReader(t *testing.T) {\n\tin := make([]byte, 100)\n\tfor i := range in {\n\t\tin[i] = byte(i)\n\t}\n\tb := make([]byte, 100)\n\tr := NewReader(bytes.NewReader(in), 100)\n\tstart := time.Now()\n\n\t// Make sure r implements Limiter\n\t_ = Limiter(r)\n\n\t// 1st read of 10 bytes is performed immediately\n\tif n, err := r.Read(b); n != 10 {\n\t\tt.Fatalf(\"r.Read(b) expected 10 (\u003cnil\u003e); got %v\", n)\n\t} else if err != nil {\n\t\tt.Fatalf(\"r.Read(b) expected 10 (\u003cnil\u003e); got %v (%v)\", n, err.Error())\n\t} else if rt := time.Since(start); rt \u003e _50ms {\n\t\tt.Fatalf(\"r.Read(b) took too long (%v)\", rt.String())\n\t}\n\n\t// No new Reads allowed in the current sample\n\tr.SetBlocking(false)\n\tif n, err := r.Read(b); n != 0 {\n\t\tt.Fatalf(\"r.Read(b) expected 0 (\u003cnil\u003e); got %v\", n)\n\t} else if err != nil {\n\t\tt.Fatalf(\"r.Read(b) expected 0 (\u003cnil\u003e); got %v (%v)\", n, err.Error())\n\t} else if rt := time.Since(start); rt \u003e _50ms {\n\t\tt.Fatalf(\"r.Read(b) took too long (%v)\", rt.String())\n\t}\n\n\tstatus := [6]Status{0: r.Status()} // No samples in the first status\n\n\t// 2nd read of 10 bytes blocks until the next sample\n\t// r.SetBlocking(true)\n\tios_test.Sleep(100 * time.Millisecond)\n\tif n, err := r.Read(b[10:]); n != 10 {\n\t\tt.Fatalf(\"r.Read(b[10:]) expected 10 (\u003cnil\u003e); got %v\", n)\n\t} else if err != nil {\n\t\tt.Fatalf(\"r.Read(b[10:]) expected 10 (\u003cnil\u003e); got %v (%v)\", n, err.Error())\n\t} else if rt := time.Since(start); rt \u003c _100ms {\n\t\tt.Fatalf(\"r.Read(b[10:]) returned ahead of time (%v)\", rt.String())\n\t}\n\n\tstatus[1] = r.Status()            // 1st sample\n\tstatus[2] = nextStatus(r.Monitor) // 2nd sample\n\tstatus[3] = nextStatus(r.Monitor) // No activity for the 3rd sample\n\n\tif n := r.Done(); n != 20 {\n\t\tt.Fatalf(\"r.Done() expected 20; got %v\", n)\n\t}\n\n\tstatus[4] = r.Status()\n\tstatus[5] = nextStatus(r.Monitor) // Timeout\n\tstart = status[0].Start\n\n\t// Active, Start, Duration, Idle, Bytes, Samples, InstRate, CurRate, AvgRate, PeakRate, BytesRem, TimeRem, Progress\n\twant := []Status{\n\t\t{true, start, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},\n\t\t{true, start, _100ms, 0, 10, 1, 100, 100, 100, 100, 0, 0, 0},\n\t\t{true, start, _200ms, _100ms, 20, 2, 100, 100, 100, 100, 0, 0, 0},\n\t\t{true, start, _300ms, _200ms, 20, 3, 0, 90, 67, 100, 0, 0, 0},\n\t\t{false, start, _300ms, 0, 20, 3, 0, 0, 67, 100, 0, 0, 0},\n\t\t{false, start, _300ms, 0, 20, 3, 0, 0, 67, 100, 0, 0, 0},\n\t}\n\tfor i, s := range status {\n\t\t// XXX s := s\n\t\tif !statusesAreEqual(\u0026s, \u0026want[i]) {\n\t\t\tt.Errorf(\"r.Status(%v)\\nexpected: %v\\ngot     : %v\", i, want[i].String(), s.String())\n\t\t}\n\t}\n\tif !bytes.Equal(b[:20], in[:20]) {\n\t\tt.Errorf(\"r.Read() input doesn't match output\")\n\t}\n}\n\n// XXX blocking writer test doesn't work.\nfunc _TestWriter(t *testing.T) {\n\tb := make([]byte, 100)\n\tfor i := range b {\n\t\tb[i] = byte(i)\n\t}\n\tw := NewWriter(\u0026bytes.Buffer{}, 200)\n\tstart := time.Now()\n\n\t// Make sure w implements Limiter\n\t_ = Limiter(w)\n\n\t// Non-blocking 20-byte write for the first sample returns ErrLimit\n\tw.SetBlocking(false)\n\tif n, err := w.Write(b); n != 20 || err != ErrLimit {\n\t\tt.Fatalf(\"w.Write(b) expected 20 (ErrLimit); got %v (%v)\", n, err.Error())\n\t} else if rt := time.Since(start); rt \u003e _50ms {\n\t\tt.Fatalf(\"w.Write(b) took too long (%v)\", rt)\n\t}\n\n\t// Blocking 80-byte write\n\t// w.SetBlocking(true)\n\t// XXX This test doesn't work, because w.Write calls w.Limit(block=false),\n\t// XXX and it returns ErrLimit after 20. What we want is to keep waiting until 80 is returned,\n\t// XXX but blocking isn't supported. Sleeping 800 shouldn't be sufficient either (its a burst).\n\t// XXX This limits the usage of Limiter and m.Limit().\n\tios_test.Sleep(800 * time.Millisecond)\n\tif n, err := w.Write(b[20:]); n \u003c 80 {\n\t} else if n != 80 || err != nil {\n\t\tt.Fatalf(\"w.Write(b[20:]) expected 80 (\u003cnil\u003e); got %v (%v)\", n, err.Error())\n\t} else if rt := time.Since(start); rt \u003c _300ms {\n\t\t// Explanation for `rt \u003c _300ms` (as opposed to `\u003c _400ms`)\n\t\t//\n\t\t//                 |\u003c-- start        |        |\n\t\t// epochs: -----0ms|---100ms|---200ms|---300ms|---400ms\n\t\t// sends:        20|20      |20      |20      |20#\n\t\t//\n\t\t// NOTE: The '#' symbol can thus happen before 400ms is up.\n\t\t// Thus, we can only panic if rt \u003c _300ms.\n\t\tt.Fatalf(\"w.Write(b[20:]) returned ahead of time (%v)\", rt.String())\n\t}\n\n\tw.SetTransferSize(100)\n\tstatus := []Status{w.Status(), nextStatus(w.Monitor)}\n\tstart = status[0].Start\n\n\t// Active, Start, Duration, Idle, Bytes, Samples, InstRate, CurRate, AvgRate, PeakRate, BytesRem, TimeRem, Progress\n\twant := []Status{\n\t\t{true, start, _400ms, 0, 80, 4, 200, 200, 200, 200, 20, _100ms, 80000},\n\t\t{true, start, _500ms, _100ms, 100, 5, 200, 200, 200, 200, 0, 0, 100000},\n\t}\n\tfor i, s := range status {\n\t\t// XXX s := s\n\t\tif !statusesAreEqual(\u0026s, \u0026want[i]) {\n\t\t\tt.Errorf(\"w.Status(%v)\\nexpected: %v\\ngot     : %v\\n\", i, want[i].String(), s.String())\n\t\t}\n\t}\n\tif !bytes.Equal(b, w.Writer.(*bytes.Buffer).Bytes()) {\n\t\tt.Errorf(\"w.Write() input doesn't match output\")\n\t}\n}\n\nconst (\n\tmaxDeviationForDuration       = 50 * time.Millisecond\n\tmaxDeviationForRate     int64 = 50\n)\n\n// statusesAreEqual returns true if s1 is equal to s2. Equality here means\n// general equality of fields except for the duration and rates, which can\n// drift due to unpredictable delays (e.g. thread wakes up 25ms after\n// `time.Sleep` has ended).\nfunc statusesAreEqual(s1 *Status, s2 *Status) bool {\n\tif s1.Active == s2.Active \u0026\u0026\n\t\ts1.Start == s2.Start \u0026\u0026\n\t\tdurationsAreEqual(s1.Duration, s2.Duration, maxDeviationForDuration) \u0026\u0026\n\t\ts1.Idle == s2.Idle \u0026\u0026\n\t\ts1.Bytes == s2.Bytes \u0026\u0026\n\t\ts1.Samples == s2.Samples \u0026\u0026\n\t\tratesAreEqual(s1.InstRate, s2.InstRate, maxDeviationForRate) \u0026\u0026\n\t\tratesAreEqual(s1.CurRate, s2.CurRate, maxDeviationForRate) \u0026\u0026\n\t\tratesAreEqual(s1.AvgRate, s2.AvgRate, maxDeviationForRate) \u0026\u0026\n\t\tratesAreEqual(s1.PeakRate, s2.PeakRate, maxDeviationForRate) \u0026\u0026\n\t\ts1.BytesRem == s2.BytesRem \u0026\u0026\n\t\tdurationsAreEqual(s1.TimeRem, s2.TimeRem, maxDeviationForDuration) \u0026\u0026\n\t\ts1.Progress == s2.Progress {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc durationsAreEqual(d1 time.Duration, d2 time.Duration, maxDeviation time.Duration) bool {\n\treturn d2-d1 \u003c= maxDeviation\n}\n\nfunc ratesAreEqual(r1 int64, r2 int64, maxDeviation int64) bool {\n\tsub := r1 - r2\n\tif sub \u003c 0 {\n\t\tsub = -sub\n\t}\n\tif sub \u003c= maxDeviation {\n\t\treturn true\n\t}\n\treturn false\n}\n"},{"Name":"util.gno","Body":"//\n// Written by Maxim Khitrov (November 2012)\n//\n\npackage flow\n\nimport (\n\t\"math\"\n\t\"strconv\"\n\t\"time\"\n)\n\n// clockRate is the resolution and precision of clock().\nconst clockRate = 20 * time.Millisecond\n\n// czero is the process start time rounded down to the nearest clockRate\n// increment.\nvar czero = time.Now().Round(clockRate)\n\n// clock returns a low resolution timestamp relative to the process start time.\nfunc clock() time.Duration {\n\treturn time.Now().Round(clockRate).Sub(czero)\n}\n\n// clockToTime converts a clock() timestamp to an absolute time.Time value.\nfunc clockToTime(c time.Duration) time.Time {\n\treturn czero.Add(c)\n}\n\n// clockRound returns d rounded to the nearest clockRate increment.\nfunc clockRound(d time.Duration) time.Duration {\n\treturn (d + clockRate\u003e\u003e1) / clockRate * clockRate\n}\n\n// round returns x rounded to the nearest int64 (non-negative values only).\nfunc round(x float64) int64 {\n\tif _, frac := math.Modf(x); frac \u003e= 0.5 {\n\t\treturn int64(math.Ceil(x))\n\t}\n\treturn int64(math.Floor(x))\n}\n\n// Percent represents a percentage in increments of 1/1000th of a percent.\ntype Percent uint32\n\n// percentOf calculates what percent of the total is x.\nfunc percentOf(x, total float64) Percent {\n\tif x \u003c 0 || total \u003c= 0 {\n\t\treturn 0\n\t} else if p := round(x / total * 1e5); p \u003c= math.MaxUint32 {\n\t\treturn Percent(p)\n\t}\n\treturn Percent(math.MaxUint32)\n}\n\nfunc (p Percent) Float() float64 {\n\treturn float64(p) * 1e-3\n}\n\nfunc (p Percent) String() string {\n\tvar buf [12]byte\n\tb := strconv.AppendUint(buf[:0], uint64(p)/1000, 10)\n\tn := len(b)\n\tb = strconv.AppendUint(b, 1000+uint64(p)%1000, 10)\n\tb[n] = '.'\n\treturn string(append(b, '%'))\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"DKNFWJGFgUpT4CLhen9sPBLFFCX8vAjeAJ6mXBaULHFfD5Z/RExBNk8fJWJTmtVOV1B++NjXK6eM1HCa126vLw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"rand","Path":"gno.land/p/demo/rand_0","Files":[{"Name":"rand.gno","Body":"package rand\n\n// Disclaimer: this package is unsafe and won't prevent others to\n//             guess values in advance.\n//\n// the goal of this package is to implement a random library that\n// is fully deterministic for validators while being hard to guess.\n//\n// We use the Bernstein's hash djb2 to be CPU-cycle efficient.\n\nimport (\n\t\"math/rand\"\n\t\"std\"\n\t\"time\"\n)\n\ntype Instance struct {\n\tseed int64\n}\n\nfunc New() *Instance {\n\tr := Instance{seed: 5381}\n\tr.addEntropy()\n\treturn \u0026r\n}\n\nfunc FromSeed(seed int64) *Instance {\n\tr := Instance{seed: seed}\n\tr.addEntropy()\n\treturn \u0026r\n}\n\nfunc (i *Instance) Seed() int64 {\n\treturn i.seed\n}\n\nfunc (i *Instance) djb2String(input string) {\n\tfor _, c := range input {\n\t\ti.djb2Int64(int64(c))\n\t}\n}\n\n// super fast random algorithm.\n// http://www.cse.yorku.ca/~oz/hash.html\nfunc (i *Instance) djb2Int64(input int64) {\n\ti.seed = (i.seed \u003c\u003c 5) + i.seed + input\n}\n\n// AddEntropy uses various runtime variables to add entropy to the existing seed.\nfunc (i *Instance) addEntropy() {\n\t// FIXME: reapply the 5381 initial value?\n\n\t// inherit previous entropy\n\t// nothing to do\n\n\t// handle callers\n\t{\n\t\tcaller1 := std.GetCallerAt(1).String()\n\t\ti.djb2String(caller1)\n\t\tcaller2 := std.GetCallerAt(2).String()\n\t\ti.djb2String(caller2)\n\t}\n\n\t// height\n\t{\n\t\theight := std.GetHeight()\n\t\ti.djb2Int64(height)\n\t}\n\n\t// time\n\t{\n\t\tsecs := time.Now().Second()\n\t\ti.djb2Int64(int64(secs))\n\t\tnsecs := time.Now().Nanosecond()\n\t\ti.djb2Int64(int64(nsecs))\n\t}\n\n\t// FIXME: compute other hard-to-guess but deterministic variables, like real gas?\n}\n\nfunc (i *Instance) Float32() float32 {\n\ti.addEntropy()\n\treturn rand.New(rand.NewSource(i.seed)).Float32()\n}\n\nfunc (i *Instance) Float64() float64 {\n\ti.addEntropy()\n\treturn rand.New(rand.NewSource(i.seed)).Float64()\n}\n\nfunc (i *Instance) Int() int {\n\ti.addEntropy()\n\treturn rand.New(rand.NewSource(i.seed)).Int()\n}\n\nfunc (i *Instance) Intn(n int) int {\n\ti.addEntropy()\n\treturn rand.New(rand.NewSource(i.seed)).Intn(n)\n}\n\nfunc (i *Instance) Int63() int64 {\n\ti.addEntropy()\n\treturn rand.New(rand.NewSource(i.seed)).Int63()\n}\n\nfunc (i *Instance) Int63n(n int64) int64 {\n\ti.addEntropy()\n\treturn rand.New(rand.NewSource(i.seed)).Int63n(n)\n}\n\nfunc (i *Instance) Int31() int32 {\n\ti.addEntropy()\n\treturn rand.New(rand.NewSource(i.seed)).Int31()\n}\n\nfunc (i *Instance) Int31n(n int32) int32 {\n\ti.addEntropy()\n\treturn rand.New(rand.NewSource(i.seed)).Int31n(n)\n}\n\nfunc (i *Instance) Uint32() uint32 {\n\ti.addEntropy()\n\treturn rand.New(rand.NewSource(i.seed)).Uint32()\n}\n\nfunc (i *Instance) Uint64() uint64 {\n\ti.addEntropy()\n\treturn rand.New(rand.NewSource(i.seed)).Uint64()\n}\n\nfunc (i *Instance) Read(p []byte) (n int, err error) {\n\ti.addEntropy()\n\treturn rand.New(rand.NewSource(i.seed)).Read(p)\n}\n\nfunc (i *Instance) Shuffle(n int, swap func(i, j int)) {\n\ti.addEntropy()\n\trand.New(rand.NewSource(i.seed)).Shuffle(n, swap)\n}\n"},{"Name":"rand0_filetest.gno","Body":"package main\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/rand\"\n)\n\nfunc main() {\n\t// initial\n\tprintln(\"---\")\n\tr := rand.New()\n\tprintln(r.Intn(1000))\n\tprintln(r.Intn(1000))\n\tprintln(r.Intn(1000))\n\tprintln(r.Intn(1000))\n\tprintln(r.Intn(1000))\n\n\t// should be the same\n\tprintln(\"---\")\n\tr = rand.New()\n\tprintln(r.Intn(1000))\n\tprintln(r.Intn(1000))\n\tprintln(r.Intn(1000))\n\tprintln(r.Intn(1000))\n\tprintln(r.Intn(1000))\n\n\tstd.TestSkipHeights(1)\n\tprintln(\"---\")\n\tr = rand.New()\n\tprintln(r.Intn(1000))\n\tprintln(r.Intn(1000))\n\tprintln(r.Intn(1000))\n\tprintln(r.Intn(1000))\n\tprintln(r.Intn(1000))\n}\n\n// Output:\n// ---\n// 777\n// 257\n// 74\n// 177\n// 802\n// ---\n// 777\n// 257\n// 74\n// 177\n// 802\n// ---\n// 450\n// 78\n// 777\n// 15\n// 339\n"},{"Name":"rand_test.gno","Body":"package rand\n\nimport (\n\t\"fmt\"\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/rand\"\n)\n\nfunc TestInstance(t *testing.T) {\n\tinstance := rand.New()\n\tif instance == nil {\n\t\tt.Errorf(\"instance should not be nil\")\n\t}\n}\n\nfunc TestIntn(t *testing.T) {\n\tbaseRand := rand.New()\n\tbaseResult := computeIntn(t, baseRand)\n\n\tsameHeightRand := rand.New()\n\tsameHeightResult := computeIntn(t, sameHeightRand)\n\n\tif baseResult != sameHeightResult {\n\t\tt.Errorf(\"should have the same result: new=%s, base=%s\", sameHeightResult, baseResult)\n\t}\n\n\tstd.TestSkipHeights(1)\n\tdifferentHeightRand := rand.New()\n\tdifferentHeightResult := computeIntn(t, differentHeightRand)\n\n\tif baseResult == differentHeightResult {\n\t\tt.Errorf(\"should have different result: new=%s, base=%s\", differentHeightResult, baseResult)\n\t}\n}\n\nfunc computeIntn(t *testing.T, r *rand.Instance) string {\n\tt.Helper()\n\n\tarr := []string{}\n\tfor i := 0; i \u003c 10; i++ {\n\t\tarr = append(arr, fmt.Sprintf(\"%d\", r.Intn(1000)))\n\t}\n\n\tout := strings.Join(arr, \",\")\n\treturn out\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"Ulw0pEl/XUw8iBBfYl8IoPDV/wMJOpiAm+pIrNkicOwr/s58eSpoyKCBHRZCsZAPdwfD+BiJn0I+TrB1mMZD5A=="}],"memo":""}
{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"Name":"avl","Path":"gno.land/p/demo/avl_0","Files":[{"Name":"node.gno","Body":"package avl\n\n// Node\n\ntype Node struct {\n\tkey       string\n\tvalue     interface{}\n\theight    int8\n\tsize      int\n\tleftNode *Node\n\trightNode *Node\n}\n\nfunc NewNode(key string, value interface{}) *Node {\n\treturn \u0026Node{\n\t\tkey:    key,\n\t\tvalue:  value,\n\t\theight: 0,\n\t\tsize:   1,\n\t}\n}\n\nfunc (node *Node) Size() int {\n\tif node == nil {\n\t\treturn 0\n\t}\n\treturn node.size\n}\n\nfunc (node *Node) IsLeaf() bool {\n\treturn node.height == 0\n}\n\nfunc (node *Node) Key() string {\n\treturn node.key\n}\n\nfunc (node *Node) Value() interface{} {\n\treturn node.value\n}\n\nfunc (node *Node) _copy() *Node {\n\tif node.height == 0 {\n\t\tpanic(\"Why are you copying a value node?\")\n\t}\n\treturn \u0026Node{\n\t\tkey:       node.key,\n\t\theight:    node.height,\n\t\tsize:      node.size,\n\t\tleftNode:  node.leftNode,\n\t\trightNode: node.rightNode,\n\t}\n}\n\nfunc (node *Node) Has(key string) (has bool) {\n\tif node == nil {\n\t\treturn false\n\t}\n\tif node.key == key {\n\t\treturn true\n\t}\n\tif node.height == 0 {\n\t\treturn false\n\t} else {\n\t\tif key \u003c node.key {\n\t\t\treturn node.getLeftNode().Has(key)\n\t\t} else {\n\t\t\treturn node.getRightNode().Has(key)\n\t\t}\n\t}\n}\n\nfunc (node *Node) Get(key string) (index int, value interface{}, exists bool) {\n\tif node == nil {\n\t\treturn 0, nil, false\n\t}\n\tif node.height == 0 {\n\t\tif node.key == key {\n\t\t\treturn 0, node.value, true\n\t\t} else if node.key \u003c key {\n\t\t\treturn 1, nil, false\n\t\t} else {\n\t\t\treturn 0, nil, false\n\t\t}\n\t} else {\n\t\tif key \u003c node.key {\n\t\t\treturn node.getLeftNode().Get(key)\n\t\t} else {\n\t\t\trightNode := node.getRightNode()\n\t\t\tindex, value, exists = rightNode.Get(key)\n\t\t\tindex += node.size - rightNode.size\n\t\t\treturn index, value, exists\n\t\t}\n\t}\n}\n\nfunc (node *Node) GetByIndex(index int) (key string, value interface{}) {\n\tif node.height == 0 {\n\t\tif index == 0 {\n\t\t\treturn node.key, node.value\n\t\t} else {\n\t\t\tpanic(\"GetByIndex asked for invalid index\")\n\t\t\treturn \"\", nil\n\t\t}\n\t} else {\n\t\t// TODO: could improve this by storing the sizes\n\t\tleftNode := node.getLeftNode()\n\t\tif index \u003c leftNode.size {\n\t\t\treturn leftNode.GetByIndex(index)\n\t\t} else {\n\t\t\treturn node.getRightNode().GetByIndex(index - leftNode.size)\n\t\t}\n\t}\n}\n\n// XXX consider a better way to do this... perhaps split Node from Node.\nfunc (node *Node) Set(key string, value interface{}) (newSelf *Node, updated bool) {\n\tif node == nil {\n\t\treturn NewNode(key, value), false\n\t}\n\tif node.height == 0 {\n\t\tif key \u003c node.key {\n\t\t\treturn \u0026Node{\n\t\t\t\tkey:       node.key,\n\t\t\t\theight:    1,\n\t\t\t\tsize:      2,\n\t\t\t\tleftNode:  NewNode(key, value),\n\t\t\t\trightNode: node,\n\t\t\t}, false\n\t\t} else if key == node.key {\n\t\t\treturn NewNode(key, value), true\n\t\t} else {\n\t\t\treturn \u0026Node{\n\t\t\t\tkey:       key,\n\t\t\t\theight:    1,\n\t\t\t\tsize:      2,\n\t\t\t\tleftNode:  node,\n\t\t\t\trightNode: NewNode(key, value),\n\t\t\t}, false\n\t\t}\n\t} else {\n\t\tnode = node._copy()\n\t\tif key \u003c node.key {\n\t\t\tnode.leftNode, updated = node.getLeftNode().Set(key, value)\n\t\t} else {\n\t\t\tnode.rightNode, updated = node.getRightNode().Set(key, value)\n\t\t}\n\t\tif updated {\n\t\t\treturn node, updated\n\t\t} else {\n\t\t\tnode.calcHeightAndSize()\n\t\t\treturn node.balance(), updated\n\t\t}\n\t}\n}\n\n// newNode: The new node to replace node after remove.\n// newKey: new leftmost leaf key for node after successfully removing 'key' if changed.\n// value: removed value.\nfunc (node *Node) Remove(key string) (\n\tnewNode *Node, newKey string, value interface{}, removed bool,\n) {\n\tif node == nil {\n\t\treturn nil, \"\", nil, false\n\t}\n\tif node.height == 0 {\n\t\tif key == node.key {\n\t\t\treturn nil, \"\", node.value, true\n\t\t} else {\n\t\t\treturn node, \"\", nil, false\n\t\t}\n\t} else {\n\t\tif key \u003c node.key {\n\t\t\tvar newLeftNode *Node\n\t\t\tnewLeftNode, newKey, value, removed = node.getLeftNode().Remove(key)\n\t\t\tif !removed {\n\t\t\t\treturn node, \"\", value, false\n\t\t\t} else if newLeftNode == nil { // left node held value, was removed\n\t\t\t\treturn node.rightNode, node.key, value, true\n\t\t\t}\n\t\t\tnode = node._copy()\n\t\t\tnode.leftNode = newLeftNode\n\t\t\tnode.calcHeightAndSize()\n\t\t\tnode = node.balance()\n\t\t\treturn node, newKey, value, true\n\t\t} else {\n\t\t\tvar newRightNode *Node\n\t\t\tnewRightNode, newKey, value, removed = node.getRightNode().Remove(key)\n\t\t\tif !removed {\n\t\t\t\treturn node, \"\", value, false\n\t\t\t} else if newRightNode == nil { // right node held value, was removed\n\t\t\t\treturn node.leftNode, \"\", value, true\n\t\t\t}\n\t\t\tnode = node._copy()\n\t\t\tnode.rightNode = newRightNode\n\t\t\tif newKey != \"\" {\n\t\t\t\tnode.key = newKey\n\t\t\t}\n\t\t\tnode.calcHeightAndSize()\n\t\t\tnode = node.balance()\n\t\t\treturn node, \"\", value, true\n\t\t}\n\t}\n}\n\nfunc (node *Node) getLeftNode() *Node {\n\treturn node.leftNode\n}\n\nfunc (node *Node) getRightNode() *Node {\n\treturn node.rightNode\n}\n\n// NOTE: overwrites node\n// TODO: optimize balance \u0026 rotate\nfunc (node *Node) rotateRight() *Node {\n\tnode = node._copy()\n\tl := node.getLeftNode()\n\t_l := l._copy()\n\n\t_lrCached := _l.rightNode\n\t_l.rightNode = node\n\tnode.leftNode = _lrCached\n\n\tnode.calcHeightAndSize()\n\t_l.calcHeightAndSize()\n\n\treturn _l\n}\n\n// NOTE: overwrites node\n// TODO: optimize balance \u0026 rotate\nfunc (node *Node) rotateLeft() *Node {\n\tnode = node._copy()\n\tr := node.getRightNode()\n\t_r := r._copy()\n\n\t_rlCached := _r.leftNode\n\t_r.leftNode = node\n\tnode.rightNode = _rlCached\n\n\tnode.calcHeightAndSize()\n\t_r.calcHeightAndSize()\n\n\treturn _r\n}\n\n// NOTE: mutates height and size\nfunc (node *Node) calcHeightAndSize() {\n\tnode.height = maxInt8(node.getLeftNode().height, node.getRightNode().height) + 1\n\tnode.size = node.getLeftNode().size + node.getRightNode().size\n}\n\nfunc (node *Node) calcBalance() int {\n\treturn int(node.getLeftNode().height) - int(node.getRightNode().height)\n}\n\n// NOTE: assumes that node can be modified\n// TODO: optimize balance \u0026 rotate\nfunc (node *Node) balance() (newSelf *Node) {\n\tbalance := node.calcBalance()\n\tif balance \u003e 1 {\n\t\tif node.getLeftNode().calcBalance() \u003e= 0 {\n\t\t\t// Left Left Case\n\t\t\treturn node.rotateRight()\n\t\t} else {\n\t\t\t// Left Right Case\n\t\t\t// node = node._copy()\n\t\t\tleft := node.getLeftNode()\n\t\t\tnode.leftNode = left.rotateLeft()\n\t\t\t// node.calcHeightAndSize()\n\t\t\treturn node.rotateRight()\n\t\t}\n\t}\n\tif balance \u003c -1 {\n\t\tif node.getRightNode().calcBalance() \u003c= 0 {\n\t\t\t// Right Right Case\n\t\t\treturn node.rotateLeft()\n\t\t} else {\n\t\t\t// Right Left Case\n\t\t\t// node = node._copy()\n\t\t\tright := node.getRightNode()\n\t\t\tnode.rightNode = right.rotateRight()\n\t\t\t// node.calcHeightAndSize()\n\t\t\treturn node.rotateLeft()\n\t\t}\n\t}\n\t// Nothing changed\n\treturn node\n}\n\n// Shortcut for TraverseInRange.\nfunc (node *Node) Iterate(start, end string, cb func(*Node) bool) bool {\n\treturn node.TraverseInRange(start, end, true, true, cb)\n}\n\n// Shortcut for TraverseInRange.\nfunc (node *Node) IterateReverse(start, end string, cb func(*Node) bool) bool {\n\treturn node.TraverseInRange(start, end, false, true, cb)\n}\n\n// TraverseInRange traverses all nodes, including inner nodes.\n// Start is inclusive and end is exclusive when ascending,\n// Start and end are inclusive when descending.\n// Empty start and empty end denote no start and no end.\n// If leavesOnly is true, only visit leaf nodes.\n// NOTE: To simulate an exclusive reverse traversal,\n// just append 0x00 to start.\nfunc (node *Node) TraverseInRange(start, end string, ascending bool, leavesOnly bool, cb func(*Node) bool) bool {\n\tif node == nil {\n\t\treturn false\n\t}\n\tafterStart := (start == \"\" || start \u003c node.key)\n\tstartOrAfter := (start == \"\" || start \u003c= node.key)\n\tbeforeEnd := false\n\tif ascending {\n\t\tbeforeEnd = (end == \"\" || node.key \u003c end)\n\t} else {\n\t\tbeforeEnd = (end == \"\" || node.key \u003c= end)\n\t}\n\n\t// Run callback per inner/leaf node.\n\tstop := false\n\tif (!node.IsLeaf() \u0026\u0026 !leavesOnly) ||\n\t\t(node.IsLeaf() \u0026\u0026 startOrAfter \u0026\u0026 beforeEnd) {\n\t\tstop = cb(node)\n\t\tif stop {\n\t\t\treturn stop\n\t\t}\n\t}\n\tif node.IsLeaf() {\n\t\treturn stop\n\t}\n\n\tif ascending {\n\t\t// check lower nodes, then higher\n\t\tif afterStart {\n\t\t\tstop = node.getLeftNode().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t\tif stop {\n\t\t\treturn stop\n\t\t}\n\t\tif beforeEnd {\n\t\t\tstop = node.getRightNode().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t} else {\n\t\t// check the higher nodes first\n\t\tif beforeEnd {\n\t\t\tstop = node.getRightNode().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t\tif stop {\n\t\t\treturn stop\n\t\t}\n\t\tif afterStart {\n\t\t\tstop = node.getLeftNode().TraverseInRange(start, end, ascending, leavesOnly, cb)\n\t\t}\n\t}\n\n\treturn stop\n}\n\n// Only used in testing...\nfunc (node *Node) lmd() *Node {\n\tif node.height == 0 {\n\t\treturn node\n\t}\n\treturn node.getLeftNode().lmd()\n}\n\n// Only used in testing...\nfunc (node *Node) rmd() *Node {\n\tif node.height == 0 {\n\t\treturn node\n\t}\n\treturn node.getRightNode().rmd()\n}\n\nfunc maxInt8(a, b int8) int8 {\n\tif a \u003e b {\n\t\treturn a\n\t}\n\treturn b\n}\n"},{"Name":"tree.gno","Body":"package avl\n\n// Tree\n\n// The zero struct can be used as an empty tree.\ntype Tree struct {\n\tnode *Node\n}\n\nfunc NewTree() *Tree {\n\treturn \u0026Tree{\n\t\tnode: nil,\n\t}\n}\n\nfunc (tree *Tree) Size() int {\n\treturn tree.node.Size()\n}\n\nfunc (tree *Tree) Has(key string) (has bool) {\n\treturn tree.node.Has(key)\n}\n\nfunc (tree *Tree) Get(key string) (value interface{}, exists bool) {\n\t_, value, exists = tree.node.Get(key)\n\treturn\n}\n\nfunc (tree *Tree) GetByIndex(index int) (key string, value interface{}) {\n\treturn tree.node.GetByIndex(index)\n}\n\nfunc (tree *Tree) Set(key string, value interface{}) (updated bool) {\n\tnewnode, updated := tree.node.Set(key, value)\n\ttree.node = newnode\n\treturn updated\n}\n\nfunc (tree *Tree) Remove(key string) (value interface{}, removed bool) {\n\tnewnode, _, value, removed := tree.node.Remove(key)\n\ttree.node = newnode\n\treturn value, removed\n}\n\n// Shortcut for TraverseInRange.\nfunc (tree *Tree) Iterate(start, end string, cb func(*Node) bool) bool {\n\treturn tree.node.TraverseInRange(start, end, true, true, cb)\n}\n\n// Shortcut for TraverseInRange.\nfunc (tree *Tree) IterateReverse(start, end string, cb func(*Node) bool) bool {\n\treturn tree.node.TraverseInRange(start, end, false, true, cb)\n}\n"},{"Name":"z_0_filetest.gno","Body":"// PKGPATH: gno.land/r/test\npackage test\n\nimport (\n\t\"gno.land/p/demo/avl\"\n)\n\nvar node *avl.Node\n\nfunc init() {\n\tnode = avl.NewNode(\"key0\", \"value0\")\n\t// node, _ = node.Set(\"key0\", \"value0\")\n}\n\nfunc main() {\n\tvar updated bool\n\tnode, updated = node.Set(\"key1\", \"value1\")\n\t// println(node, updated)\n\tprintln(updated, node.Size())\n}\n\n// Output:\n// false 2\n\n// Realm:\n// switchrealm[\"gno.land/r/test\"]\n// u[a8ada09dee16d791fd406d629fe29bb0ed084a30:4]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key0\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"value0\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:4\",\n//         \"ModTime\": \"5\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:6]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key1\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"value1\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:6\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:5]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key1\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"091729e38bda8724bce4c314f9624b91af679459\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:4\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"0b5493aa4ea42087780bdfcaebab2c3eec351c15\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:6\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// u[a8ada09dee16d791fd406d629fe29bb0ed084a30:2]={\n//     \"Blank\": {},\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"IsEscaped\": true,\n//         \"ModTime\": \"4\",\n//         \"RefCount\": \"2\"\n//     },\n//     \"Parent\": null,\n//     \"Source\": {\n//         \"@type\": \"/gno.RefNode\",\n//         \"BlockNode\": null,\n//         \"Location\": {\n//             \"File\": \"\",\n//             \"Line\": \"0\",\n//             \"Nonce\": \"0\",\n//             \"PkgPath\": \"gno.land/r/test\"\n//         }\n//     },\n//     \"Values\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"init.0\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"10\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"main\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"15\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"6c9948281d4c60b2d95233b76388d54d8b1a2fad\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\"\n//                     }\n//                 }\n//             }\n//         }\n//     ]\n// }\n"},{"Name":"z_1_filetest.gno","Body":"// PKGPATH: gno.land/r/test\npackage test\n\nimport (\n\t\"gno.land/p/demo/avl\"\n)\n\nvar node *avl.Node\n\nfunc init() {\n\tnode = avl.NewNode(\"key0\", \"value0\")\n\tnode, _ = node.Set(\"key1\", \"value1\")\n}\n\nfunc main() {\n\tvar updated bool\n\tnode, updated = node.Set(\"key2\", \"value2\")\n\t// println(node, updated)\n\tprintln(updated, node.Size())\n}\n\n// Output:\n// false 3\n\n// Realm:\n// switchrealm[\"gno.land/r/test\"]\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:9]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key2\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"value2\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:9\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:8]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key2\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"7a8a63e17a567d7b0891ac89d5cd90072a73787d\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:6\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"ab5a297f4eb033d88bdf1677f4dc151ccb9fde9f\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:9\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:7\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:7]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key1\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AwAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"627e8e517e7ae5db0f3b753e2a32b607989198b6\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:5\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"fe8afd501233fb95375016199f0443b3c6ab1fbc\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:7\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// u[a8ada09dee16d791fd406d629fe29bb0ed084a30:2]={\n//     \"Blank\": {},\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"IsEscaped\": true,\n//         \"ModTime\": \"6\",\n//         \"RefCount\": \"2\"\n//     },\n//     \"Parent\": null,\n//     \"Source\": {\n//         \"@type\": \"/gno.RefNode\",\n//         \"BlockNode\": null,\n//         \"Location\": {\n//             \"File\": \"\",\n//             \"Line\": \"0\",\n//             \"Nonce\": \"0\",\n//             \"PkgPath\": \"gno.land/r/test\"\n//         }\n//     },\n//     \"Values\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"init.0\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"10\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.FuncType\",\n//                 \"Params\": [],\n//                 \"Results\": []\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.FuncValue\",\n//                 \"Closure\": {\n//                     \"@type\": \"/gno.RefValue\",\n//                     \"Escaped\": true,\n//                     \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:3\"\n//                 },\n//                 \"FileName\": \"main.gno\",\n//                 \"IsMethod\": false,\n//                 \"Name\": \"main\",\n//                 \"PkgPath\": \"gno.land/r/test\",\n//                 \"Source\": {\n//                     \"@type\": \"/gno.RefNode\",\n//                     \"BlockNode\": null,\n//                     \"Location\": {\n//                         \"File\": \"main.gno\",\n//                         \"Line\": \"15\",\n//                         \"Nonce\": \"0\",\n//                         \"PkgPath\": \"gno.land/r/test\"\n//                     }\n//                 },\n//                 \"Type\": {\n//                     \"@type\": \"/gno.FuncType\",\n//                     \"Params\": [],\n//                     \"Results\": []\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"c5eefc40ed065461b4a920c1349ed734ffdead8f\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:7\"\n//                     }\n//                 }\n//             }\n//         }\n//     ]\n// }\n// d[a8ada09dee16d791fd406d629fe29bb0ed084a30:4]\n"},{"Name":"z_2_filetest.gno","Body":"// PKGPATH: gno.land/r/test\npackage test\n\nimport (\n\t\"gno.land/p/demo/avl\"\n)\n\nvar tree avl.Tree\n\nfunc init() {\n\ttree.Set(\"key0\", \"value0\")\n\ttree.Set(\"key1\", \"value1\")\n}\n\nfunc main() {\n\tvar updated bool\n\tupdated = tree.Set(\"key2\", \"value2\")\n\tprintln(updated, tree.Size())\n}\n\n// Output:\n// false 3\n\n// Realm:\n// switchrealm[\"gno.land/r/test\"]\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:10]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key2\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"value2\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:10\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:9\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:9]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key2\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AQAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"213baed7e3326f2403b5f30e5d4397510ba4f37d\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:7\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"be751422ef4c2bc068a456f9467d2daca27db8ca\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:10\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:9\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// c[a8ada09dee16d791fd406d629fe29bb0ed084a30:8]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"16\"\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.StringValue\",\n//                 \"value\": \"key1\"\n//             }\n//         },\n//         {},\n//         {\n//             \"N\": \"AgAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"64\"\n//             }\n//         },\n//         {\n//             \"N\": \"AwAAAAAAAAA=\",\n//             \"T\": {\n//                 \"@type\": \"/gno.PrimitiveType\",\n//                 \"value\": \"32\"\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"af4d0b158681d85eb2a7f6888b39a05ca7b790ee\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:6\"\n//                     }\n//                 }\n//             }\n//         },\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"ef853d70e334fd2c807d6c2c751da1fcd1e5ad58\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:9\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\",\n//         \"ModTime\": \"0\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:4\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// u[a8ada09dee16d791fd406d629fe29bb0ed084a30:4]={\n//     \"Fields\": [\n//         {\n//             \"T\": {\n//                 \"@type\": \"/gno.PointerType\",\n//                 \"Elt\": {\n//                     \"@type\": \"/gno.RefType\",\n//                     \"ID\": \"gno.land/p/demo/avl.Node\"\n//                 }\n//             },\n//             \"V\": {\n//                 \"@type\": \"/gno.PointerValue\",\n//                 \"Base\": null,\n//                 \"Index\": \"0\",\n//                 \"TV\": {\n//                     \"T\": {\n//                         \"@type\": \"/gno.RefType\",\n//                         \"ID\": \"gno.land/p/demo/avl.Node\"\n//                     },\n//                     \"V\": {\n//                         \"@type\": \"/gno.RefValue\",\n//                         \"Hash\": \"3a5af0895c2c45b8a5e894644bcd689f1fdc4785\",\n//                         \"ObjectID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:8\"\n//                     }\n//                 }\n//             }\n//         }\n//     ],\n//     \"ObjectInfo\": {\n//         \"ID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:4\",\n//         \"ModTime\": \"7\",\n//         \"OwnerID\": \"a8ada09dee16d791fd406d629fe29bb0ed084a30:2\",\n//         \"RefCount\": \"1\"\n//     }\n// }\n// d[a8ada09dee16d791fd406d629fe29bb0ed084a30:5]\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"fPtNQ7qrtLer5zs9FPgI7Lz59M/L7su3AZlldD9PqE9AsiIa7OBDaIQKqRmHvWL2pzzr7V5hFpn5mygEOzo4iA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModAddPost","args":["gor-ama1","Gno.land Community Game of Realms AMA #1 - Recap","With Game of Realms officially in phase one, core dev Manfred Touron jumped on Discord to answer Gno.land community questions about the ongoing high-stakes competition. From starting and end dates to participation requirements and a description of tasks, look for your answer below. If you have further questions or want to join our community, come and find us on the []Gno.land Discord](https://discord.com/channels/957002220384182312/1065646963825066044). The core team will be hosting regular “office hours” sessions soon so you can discuss your ideas with them directly.\n\n## Q. How are the tasks in the issues assigned?\n\nWe received questions about how the tasks in the Game of Realms issues are assigned. Should submissions contain the whole implementation? Is the following task \"available** when the previous one is completed? How is the “sync” happening?\n\n**A.** TL;DR:\n\nEverything should go smoothly and we will be leaving room for negotiation if any review looks invalid. Once it has been established, the evaluation DAO will enforce how to submit a contribution. In the meantime, there are official communication challenges that we encourage participants to use. People are also free to work in stealth mode, with the risk of finishing too late or losing points for being bad at collaborating.\n\n----\n\nWe expect the current issues to be done by multiple people, in multiple steps. But anyone can try to make everything in stealth mode and open a PR with everything. Let's discuss the cases we believe will happen:\n\n### Case 1\n\nWe're in phase 1, people want to contribute but can't manage to do everything, so they will try to participate as much as they can. They will participate on the issue or in Discord by indicating their desire to participate, by sharing ideas, reviewing others' work, giving feedback, clarifying, or whatever makes sense.\n\nThe only thing is that we're fully remote. We don't know each other, so everyone needs to be good at communication. At the end of a big task, i.e. the Evaluation DAO is finished, the core team will take all the small contributions and identify contributors, and then suggest how to split the task prize. We'll propose the split and allow room for public negotiations.\n\n### Case 2\n\nWe're in phase 2, and a small contribution is done by an individual. We just review it, and that's done.\n\n### Case 3\n\nWe're in phase 2, and a contribution is big and requires small steps. Probably, the Evaluation DAO will ask individual participants to submit their contributions so they can allocate points for the individual contributions. But maybe the Evaluation DAO prefers to review big tasks as a whole, and then split the prize, as we'll do in phase 1. We don’t have clarity on this at this stage, as it will be up to the implementers of the Evaluation DAO to design the best system for that case.\n\n## Q. Will there be a leaderboard and place where we can submit evidence for tasks?\n\n**A.** Not yet. The leaderboard will come in phase 2. One of the critical parts of the Evaluation DAO will be to allow contributors to submit evidence for tasks. Votes and point allocations will also be transparent. This will make sense for future Proof-of-Contributions, too. We'll also develop a leaderboard to make it easier to follow the competition, but this will probably come after the Evaluation DAO is running.\n\n## Q. What will the overall tasks consist of?\n\n**A.** Here is a non-exhaustive list:\n\n* Onboard more contributors ([create tutorials and documentation](https://github.com/gnolang/gno/issues/408)\n* Improve the project and implement more things\n* Bootstrap our genesis of contributors for the future mainnet\n* Experiment with Proof of Contribution by having a simpler system: Evaluation DAO\n* Identify the best participants to propose jobs\n* Identify the best organizations to propose partnerships\n\n## Q. At what point in the Game of Realms timeline/phase are we?\n\n**A.** We are at the beginning of phase 1. We plan to create a website soon so you can keep track of the status and, as I mentioned, a leaderboard will come in phase 2.\n\n## Q. What will be the contributions, how will points be calculated, and are there tasks for non-programmers?\n\n**A.** During phase 1, the tasks are relatively well defined, please read this:\n\nhttps://github.com/gnolang/gno/issues/390\n\nThere are more tasks for programmers, but multiple parts are for non-programmers too.\n\nDuring phase 2, it's hard to be sure about anything yet. Game of Realms is a competition to experiment with Proof-of-Contribution, which will replace Proof-of-Stake on Gno.land. If things go the way we imagine, then consider that the stakeholders (contributors** will allocate points to contributions that make sense for the project. The contributors won't lose points, but by allocating points, they will dilute their own point stack.\n\nWe expect the Evaluation DAO to attribute points to whatever makes sense to make the project better. We'll have some task ideas for phase 2, including for non-programmers. You can likely consider that even if the core team doesn’t control the DAO, its suggestions will be approved by the Evaluation DAO because we deeply want the project to be a success.\n\n## Q. What are the requirements to start participating?\n\n**A.** There is no requirement to start participating. You’ll need to do some KYC at the end of the competition to receive a prize. Feel free to fill out the form linked in the Register section of the following issue:\n\nhttps://github.com/gnolang/gno/issues/390\n\nThis will allow us to contact you about the competition through our newsletter and set up prize payment later. Use the comment section of the issues or discuss them on Discord if you plan to work on specific tasks, so we can see that you’re actively working on a topic. It may be better to work with others and share a prize instead of taking the risk of implementing everything in stealth mode and not being the first.\n\n## Q. Is there a fixed period of time for the end?\n\n**A.** No. Phase 1 will be finished when we consider that enough materials have been implemented to switch to phase 2. This will probably take between 1-3 months. The end date for phase 2 will be announced during phase 2, which will probably last between 2-3 months. This is when we’ll send the prize rewards. After Game of Realms, people will continue to earn contribution points by contributing to the project, which will give them memberships on the future mainnet.\n\n## Q. Is it possible to install a local testnet to get a proper local development environment?\n\n**A.** You can find the answer in this GitHub issue. Subscribe to the issue to get updates:\n\nhttps://github.com/gnolang/gno/issues/478\n\nThere are multiple ways to interact with Gno:\n\n* Using gnodev allows you to use the GnoVM, without a blockchain. This method is super fast and allows you to use development patterns like TDD, where you test your implementation multiple times per minute.\n* Running a localnet, by running the gnoland command and then configuring our tools like gnokey to use localhost:36657\n* Using the staging network hosted on https://staging.gno.land reset regularly and you can use the hardcoded test key or use the faucet\n* Using the official testnets\n\nIf you prefer to run a full blockchain node instead of just playing with GnoVM, you should play with the gnoland binary. This video shows how to do this in practice:\nhttps://www.youtube.com/watch?v=-BlnEXCs0eI\n\nBelow is a further resource that may also help you:\n\nhttps://test2.gno.land/r/boards:testboard/5\n\n## Q. Will there be a list of what needs to be tested? When will the tests start?\n\n**A.** The best place to look is on GitHub here:\n\nhttps://github.com/gnolang/gno/issues/390\n\nDuring phase 1, there are 3 official focuses:\n\n- Evaluation DAO\n- Tutorials\n- Governance Module\n\nThe core team will actively review this and decide what contribution deserves to get prizes.\n\nDuring phase 2, we’ll use the Evaluation DAO developed during phase 1 to review old contributions, even contributions made before the competition, as well as ongoing contributions. Right now, we have an issue gathering interesting topics for phase 2 here, but any contribution can be reviewed by the DAO, including things that are not listed:\n\nhttps://github.com/gnolang/gno/issues/357\n\nThe competition was just announced, but we’ll review contributions made in the past, too, so it starts from the first commit, ~1-2y ago.\n\n_Do you have more questions for Manfred? Would you like to know more about Gno.land, Gnolang, Game of Realms, or ways to contribute to our growing ecosystem? Drop us a question on Discord and watch out for our next AMA on Tuesday 7 Feb at 4 pm UTC._\n","game-of-realms,gnoland,ama"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"2URyRBol3Cp/wOO2GOo06j97RD7ghGvE0/hwQ+Tb3jBXnmzsOYAiAJB09YIwnSRcf7/k+lfSNc3TOrmlDRGf7g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1eu2xfymt88fyey05g05j3frrfpg0j4j9yxl6zn","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Yycc6vziCeU5Es/G2qUO1dwyZ2xOSWB7fdVxRp/aEYgty8gwB8L7Ff2FFOf5DUtEwOVkgVab9rXi3dFEB43cnQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1eu2xfymt88fyey05g05j3frrfpg0j4j9yxl6zn","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","nestore",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alrcbes9TTdxfp6VUqrNsC21Eu8HWEOqvxnnAXufGCax"},"signature":"NZnsa/BentmCex71TefS/EMgDK1lTUAir9yY3H2BnHonql5YJ3uxoFMtn4+bST8O3zKwXsDB2dG26urQCBjkNw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1eu2xfymt88fyey05g05j3frrfpg0j4j9yxl6zn","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","nestore",""]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alrcbes9TTdxfp6VUqrNsC21Eu8HWEOqvxnnAXufGCax"},"signature":"7xdJMTyDUXITkqpFsNJujncJJDOkdcodcn7qjO0ER2d5lVC7b7DrWsBFafThYvrMwLP67GtHQtvzbglUKUWJ2Q=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1eu2xfymt88fyey05g05j3frrfpg0j4j9yxl6zn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["1","gno world","gnoworld"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alrcbes9TTdxfp6VUqrNsC21Eu8HWEOqvxnnAXufGCax"},"signature":"0OIp73Qhs9iwf5/MPZ8sETy3IXSD7aR6Iw81WznmfJB4QjI7F7Js18MvJ7eycQFlHDBtxccQo1KEdFLYWxuNyQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1eu2xfymt88fyey05g05j3frrfpg0j4j9yxl6zn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["2","gno world","I don't know how this journey will end... but starting it is already stimulating."]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alrcbes9TTdxfp6VUqrNsC21Eu8HWEOqvxnnAXufGCax"},"signature":"P7JlJUAtsNBVhQXAjgISlLSniooxZDIkM77dhGSgp9N/1Gpobd1ExzJHNvW7rxaKqAe5ban9F0yDfqAGVZMERQ=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1eu2xfymt88fyey05g05j3frrfpg0j4j9yxl6zn","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["3","hi all gno guy","hi all..."]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Alrcbes9TTdxfp6VUqrNsC21Eu8HWEOqvxnnAXufGCax"},"signature":"G9G8ZmZFnBlF8NSRXP3KV8Eb29PE5RmL691L/QWHI5lbrU8bgCgdHpk3pl/LVM7+0sCwBEkd1vxDr7+jx8wBVw=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1znypazkj66hyj70r4n4j5dhsttyag3gy7hjfx6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"DFnraxn+sjv8COhBlItmUix/vGbSOXYhubHproP4iNBW3jaxUW/zlr3dFz2ZyutSqKAd68SJH+L515S4rvH64A=="}],"memo":""}
{"msg":[{"@type":"/bank.MsgSend","from_address":"g13enw4ph4jwh2mqv07pxcsesyam5605cydps77n","to_address":"g1mhx57daveaalpyyn6sqp5cnhjcf4kzmm4xl38j","amount":"500000000ugnot"}],"fee":{"gas_wanted":"60000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3JoC0+RVv9CQsgf4X359CS2cPelnoPDiVtGW/ppfqfN"},"signature":"YLcnGMPouZ/OqZIEJxgvR7VmZZD7VVPt/KoOxcnyP5hvjArx6i7zE4TJr5DvslLJtE3R19G7Dd8hruIh9ixiJA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1x6eft9yvq995lxhgz57cl5qp838xh7g2xm5erm","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"PxutV0Fajxmiqjd+zmUo6u6RFKXiCpQadDhm763Em34riZHFGV/2hROGNX41O6DpoHnrGRWna81/y61N4gmz3g=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1zpvscpdn4p8ed0ah4s2c3jtcpkrunq6m7snvn9","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"sMVO5FUiVC98T4uZ7iG+IrRvV28Ljjuvpv+M8q86QpAkHfvm6PhbMffubWsuruEiVqzN6x+/j9k/f0rdv65ZFA=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g12uz05kkjy626xfrqkg74hvrsw763m5nys847t5","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Ee58aC12SD0UEtD4V7S+Yn8yujSAiQgdHapPFVqB0ecJYqPKjk5UrEB/bdSFM67DSQdq+cyc8Is7yGoJNnN3Gg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1hec62y7l8pj27ql6dul28a2suvdyj4hw6ptch6","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"5U3eeSLjrriUkNTXIfOMYP3OsalR2jflYeir9DDwAJtb27gwzH9zSMHtnwd9OZZTeS0oaNlP4d2f310kol3psg=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hec62y7l8pj27ql6dul28a2suvdyj4hw6ptch6","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","balagun",""]}],"fee":{"gas_wanted":"3000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aus0t8EA0ygY/wMFR6m8vzBnzOsHU6KVPmrq0uh3csWM"},"signature":"8jPfxMZ894wxfpzSR+cb/MZARE5i8J06ef5p8VekPSo3wq+po5SY0Ilju++dMOpmde6l7+nCmEeDr8xfS2P0ew=="}],"memo":""}
{"msg":[{"@type":"/vm.m_call","caller":"g1hec62y7l8pj27ql6dul28a2suvdyj4hw6ptch6","send":"1000000ugnot","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["balagun"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aus0t8EA0ygY/wMFR6m8vzBnzOsHU6KVPmrq0uh3csWM"},"signature":"ZfBkZd+DmJSyo/EqKwdlULBqr6HwcUmxWs9fkpRZoCh+KdrxZOSoRJkFMhJFQp3s4MnTWRXToMm0fN3XAPXdvA=="}],"memo":""}
