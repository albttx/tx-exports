{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"Frjh75IFFEU+Ce4bV0WarrGoGN9/olVybqqwR+snrE8m7zby5KA6GXGJFIFuFapq4rdPjuyE0D9XAwImKqwSnw=="}],"memo":""},"blockNum":"207826"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"hello","Path":"gno.land/p/duysyland/hello","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"kcUebdCxsElEZ6k5gMFaeTC/uTbgTp7vzvZRXT/O0+F+tL6+Q0s8BdB/In1sQwHuH2eY8lV13FbhtNVy45aP0w=="}],"memo":"Deployed through play.gno.land"},"blockNum":"207846"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g196sszwwfy3lf7wjc6xv4cx64q5t5zfx5zvtjqd","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"S+fywqiQ9/Kd2hOOlY3JKNa4qPCCQt0XACMxc+y88qYA191HEgJLjtXUMLfomma2lX6VEG9g9dFtS6vVm9ecAw=="}],"memo":""},"blockNum":"207927"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"duysytoken","Path":"gno.land/p/duysyland/duysytoken","Files":[{"Name":"package.gno","Body":"package helping\n\nvar (  \n  helping string\n)\n \n// setters -\u003e tx (spend money, GNOT; ETH)\nfunc SetHelping(msg string) {\n  helping = msg\n}\n\n// getter -\u003e query (read-only) = FREE\nfunc GetHelping() string {\n  return helping\n}\n"},{"Name":"helping.gno","Body":"package helping\r\n\r\n// v0 https://play.gno.land/p/3wKScpWPvAu\r\nvar (  \r\n  helping string\r\n)\r\n \r\n// setters -\u003e tx (spend money, GNOT; ETH)\r\nfunc SetHelping(msg string) {\r\n  helping = msg\r\n}\r\n \r\n// getter -\u003e query (read-only) = FREE\r\nfunc GetHelping() string {\r\n  return helping\r\n}\r\n"},{"Name":"erc20.gno","Body":"package foo20\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tfoo   *grc20.AdminToken\r\n\tadmin std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\r\n)\r\n\r\nfunc init() {\r\n\tfoo = grc20.NewAdminToken(\"DUYSYSTOKEN\", \"DUYSYSTOKEN\", 4)\r\n\tfoo.Mint(admin, 1000000*10000)                                    // @administrator (1M)\r\n\tfoo.Mint(\"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq\", 10000*10000) // @manfred (10k)\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn foo.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := foo.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := foo.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.Transfer(caller, to.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.Approve(caller, spender.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\n// faucet.\r\n\r\nfunc Faucet() {\r\n\t// FIXME: add limits?\r\n\t// FIXME: add payment in gnot?\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.Mint(caller, 1000*10000) // 1k\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\tassertIsAdmin(caller)\r\n\terr := foo.Mint(address.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\tassertIsAdmin(caller)\r\n\terr := foo.Burn(address.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn foo.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := foo.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}\r\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"RG6LiMKzSlPsYpck2upD6IDmxAQ4FQeV9GP3k+CIk4RBS6GOHfiFmegYy4qWdURKAHxBq4BOz60vLNdKnSQRkQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"208008"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"duysytoken","Path":"gno.land/p/duysyland/duysytoken","Files":[{"Name":"package.gno","Body":"package helping\n\nvar (  \n  helping string\n)\n \n// setters -\u003e tx (spend money, GNOT; ETH)\nfunc SetHelping(msg string) {\n  helping = msg\n}\n\n// getter -\u003e query (read-only) = FREE\nfunc GetHelping() string {\n  return helping\n}\n"},{"Name":"helping.gno","Body":"package helping\r\n\r\n// v0 https://play.gno.land/p/3wKScpWPvAu\r\nvar (  \r\n  helping string\r\n)\r\n \r\n// setters -\u003e tx (spend money, GNOT; ETH)\r\nfunc SetHelping(msg string) {\r\n  helping = msg\r\n}\r\n \r\n// getter -\u003e query (read-only) = FREE\r\nfunc GetHelping() string {\r\n  return helping\r\n}\r\n"},{"Name":"erc20.gno","Body":"package duysytoken\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tfoo   *grc20.AdminToken\r\n\tadmin std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\r\n)\r\n\r\nfunc init() {\r\n\tfoo = grc20.NewAdminToken(\"DUYSYSTOKEN\", \"DUYSYSTOKEN\", 4)\r\n\tfoo.Mint(admin, 1000000*10000)                                    // @administrator (1M)\r\n\tfoo.Mint(\"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq\", 10000*10000) // @manfred (10k)\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn foo.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := foo.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := foo.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.Transfer(caller, to.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.Approve(caller, spender.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\n// faucet.\r\n\r\nfunc Faucet() {\r\n\t// FIXME: add limits?\r\n\t// FIXME: add payment in gnot?\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.Mint(caller, 1000*10000) // 1k\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\tassertIsAdmin(caller)\r\n\terr := foo.Mint(address.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\tassertIsAdmin(caller)\r\n\terr := foo.Burn(address.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn foo.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := foo.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}\r\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"gK3GEQdOzIE2/FR9D3BRSnVblGyIspes6Zue0I7VzuIq+aAy72VAfOTrYEgyL+vFeDj+Bo3dUWeSe2UoleKKCA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"208010"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"duysytoken","Path":"gno.land/p/duysyland/duysytoken","Files":[{"Name":"duysytoken.gno","Body":"package duysytoken\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tfoo   *grc20.AdminToken\r\n\tadmin std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\r\n)\r\n\r\nfunc init() {\r\n\tfoo = grc20.NewAdminToken(\"DUYSYSTOKEN\", \"DUYSYSTOKEN\", 4)\r\n\tfoo.Mint(admin, 1000000*10000)                                    // @administrator (1M)\r\n\tfoo.Mint(\"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq\", 10000*10000) // @manfred (10k)\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn foo.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := foo.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := foo.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.Transfer(caller, to.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.Approve(caller, spender.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\n// faucet.\r\n\r\nfunc Faucet() {\r\n\t// FIXME: add limits?\r\n\t// FIXME: add payment in gnot?\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.Mint(caller, 1000*10000) // 1k\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\tassertIsAdmin(caller)\r\n\terr := foo.Mint(address.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\tassertIsAdmin(caller)\r\n\terr := foo.Burn(address.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn foo.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := foo.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}\r\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"IZQdiXKgiZfy0Iy58T8fd3to5maq/FU7+d7rdP5Gz8oqD53sW6a+i1FGB669+tw4kbB2/lTTdPddGs0RIbqHNg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"208013"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"duysytoken","Path":"gno.land/p/duysyland/duysytoken","Files":[{"Name":"duysytoken.gno","Body":"package duysytoken\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tfoo   *grc20.AdminToken\r\n\tadmin std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\r\n)\r\n\r\nfunc init() {\r\n\tfoo = grc20.NewAdminToken(\"DUYSYSTOKEN\", \"DUYSYSTOKEN\", 4)\r\n\tfoo.Mint(admin, 1000000*10000)                                    // @administrator (1M)\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn foo.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := foo.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := foo.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.Transfer(caller, to.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.Approve(caller, spender.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\n// faucet.\r\n\r\nfunc Faucet() {\r\n\t// FIXME: add limits?\r\n\t// FIXME: add payment in gnot?\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.Mint(caller, 1000*10000) // 1k\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\tassertIsAdmin(caller)\r\n\terr := foo.Mint(address.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\tassertIsAdmin(caller)\r\n\terr := foo.Burn(address.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn foo.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := foo.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}\r\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"g2XMM4614A3LsZ5m3I3nMpQuCe22Zj4MkrM8slb1jIV3n3y8itFk0WSyK/C7yUi7GJhyFPqbW1bQBqdmYByHjQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"208015"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"duysytoken","Path":"gno.land/p/duysyland/duysytoken","Files":[{"Name":"duysytoken.gno","Body":"package duysytoken\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tfoo   *grc20.AdminToken\r\n\tadmin std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\r\n)\r\n\r\nfunc init() {\r\n\tfoo = grc20.NewAdminToken(\"DUYSYSTOKEN\", \"DUYSYSTOKEN\", 4)\r\n\tfoo.Mint(admin, 1000000*10000)                                    // @administrator (1M)\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn foo.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := foo.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := foo.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.Transfer(caller, to.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.Approve(caller, spender.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\n// faucet.\r\n\r\nfunc Faucet() {\r\n\t// FIXME: add limits?\r\n\t// FIXME: add payment in gnot?\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.Mint(caller, 1000*10000) // 1k\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\tassertIsAdmin(caller)\r\n\terr := foo.Mint(address.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\tassertIsAdmin(caller)\r\n\terr := foo.Burn(address.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn foo.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := foo.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"LZJY29DGRQpulhezBRlksy5osYJm08lOQDYnclYRABoRKBUNff68beHp4YQFbtc4ebbMYDN0H8yI0urGTtJA2Q=="}],"memo":"Deployed through play.gno.land"},"blockNum":"208017"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"duysytoken","Path":"gno.land/p/duysyland/duysytoken","Files":[{"Name":"duysytoken.gno","Body":"package duysytoken\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tfoo   *grc20.AdminToken\r\n\tadmin std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\r\n)\r\n\r\nfunc init() {\r\n\tfoo = grc20.NewAdminToken(\"DUYSYSTOKEN\", \"DUYSYSTOKEN\", 4)\r\n\tfoo.Mint(admin, 1000000*10000)                                    // @administrator (1M)\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn foo.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := foo.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := foo.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.Transfer(caller, to.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.Approve(caller, spender.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\n// faucet.\r\n\r\nfunc Faucet() {\r\n\t// FIXME: add limits?\r\n\t// FIXME: add payment in gnot?\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.Mint(caller, 1000*10000) // 1k\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\tassertIsAdmin(caller)\r\n\terr := foo.Mint(address.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\tassertIsAdmin(caller)\r\n\terr := foo.Burn(address.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn foo.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := foo.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"G+hrWfpnpPnPNFC8bre496CyF0myuYuRqmL3n1WTw/s55AUmJtFcb/4kiu65hwNlN4arkGIY52QW1W24nSJIOw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"208019"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"duysytoken","Path":"gno.land/r/duysyland/duysytoken","Files":[{"Name":"duysytoken.gno","Body":"package duysytoken\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tfoo   *grc20.AdminToken\r\n\tadmin std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\r\n)\r\n\r\nfunc init() {\r\n\tfoo = grc20.NewAdminToken(\"DUYSYSTOKEN\", \"DUYSYSTOKEN\", 4)\r\n\tfoo.Mint(admin, 1000000*10000)                                    // @administrator (1M)\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn foo.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := foo.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := foo.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.Transfer(caller, to.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.Approve(caller, spender.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\n// faucet.\r\n\r\nfunc Faucet() {\r\n\t// FIXME: add limits?\r\n\t// FIXME: add payment in gnot?\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.Mint(caller, 1000*10000) // 1k\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\tassertIsAdmin(caller)\r\n\terr := foo.Mint(address.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\tassertIsAdmin(caller)\r\n\terr := foo.Burn(address.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn foo.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := foo.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"GecnLj7Cu8cQS66QDFk2iUMkiNlXeOo6JRRxYMEMlrQRLU1mV7jz0K0pAqnTAWfgBnP5UqBUUYdR3dMIP88Nbw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"208023"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"duysytoken","Path":"gno.land/p/duysyland/duysytoken","Files":[{"Name":"duysytoken.gno","Body":"package duysytoken\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tfoo   *grc20.AdminToken\r\n\tadmin std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\r\n)\r\n\r\nfunc init() {\r\n\tfoo = grc20.NewAdminToken(\"DUYSYSTOKEN\", \"DUYSYSTOKEN\", 4)\r\n\tfoo.Mint(admin, 1000000*10000)                                    // @administrator (1M)\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn foo.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := foo.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := foo.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.Transfer(caller, to.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.Approve(caller, spender.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\n// faucet.\r\n\r\nfunc Faucet() {\r\n\t// FIXME: add limits?\r\n\t// FIXME: add payment in gnot?\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.Mint(caller, 1000*10000) // 1k\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\tassertIsAdmin(caller)\r\n\terr := foo.Mint(address.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\tassertIsAdmin(caller)\r\n\terr := foo.Burn(address.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn foo.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := foo.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"7mwicGuguEHag1u+FKSU3tNhbaJlYOd4pAsy8M88wZtCA9s4AXrOmiAewoybnt/6elfFFO9YJd5dIcvLZIu2XQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"208025"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test2","Path":"gno.land/p/duysyland/test2","Files":[{"Name":"duysytoken.gno","Body":"package duysytoken\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tfoo   *grc20.AdminToken\r\n\tadmin std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\r\n)\r\n\r\nfunc init() {\r\n\tfoo = grc20.NewAdminToken(\"DUYSYSTOKEN\", \"DUYSYSTOKEN\", 4)\r\n\tfoo.Mint(admin, 1000000*10000)                                    // @administrator (1M)\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn foo.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := foo.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := foo.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.Transfer(caller, to.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.Approve(caller, spender.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\n// faucet.\r\n\r\nfunc Faucet() {\r\n\t// FIXME: add limits?\r\n\t// FIXME: add payment in gnot?\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.Mint(caller, 1000*10000) // 1k\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\tassertIsAdmin(caller)\r\n\terr := foo.Mint(address.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\tassertIsAdmin(caller)\r\n\terr := foo.Burn(address.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn foo.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := foo.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"beILYXvnCHeC1jjXQ2r1gm7GONKCTSqQRsp67dRFX40kJ1gu6A12MQMKzsH5DRBS/NHQQyT9qqcGVAczGVR3OQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"208031"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"duysytoken","Path":"gno.land/p/duysyland/duysytoken","Files":[{"Name":"duysytoken.gno","Body":"package duysytoken\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\ttnam0x  *grc20.AdminToken\r\n\tadmin std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\"\r\n)\r\n\r\nfunc init() {\r\n\ttnam0x = grc20.NewAdminToken(\"Bitland\", \"BTL\", 6)\r\n\ttnam0x.Mint(admin, 1000000000) // @administrator\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn tnam0x.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := tnam0x.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := tnam0x.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\ttnam0x.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\ttnam0x.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\ttnam0x.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\ttnam0x.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\ttnam0x.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn tnam0x.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := tnam0x.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"9RgNuPinbQP50Xd6cjBC0iF2wqOq02zjmBjDB+SuxwZP3Jl4LbZFP/8WKYzjZy2VobqJZPCQan6GXo2Dq/AnPQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"208037"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"duysynft1155","Path":"gno.land/p/duysyland/duysynft1155","Files":[{"Name":"package.gno","Body":"package duysynft1155\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/grc/grc1155\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tdummyURI             = \"ipfs://xyz\"\n\tadmin  std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\"\n\tfoo                  = grc1155.NewBasicGRC1155Token(dummyURI)\n)\n\nfunc init() {\n\tmintGRC1155Token(admin) // @administrator (10)\n}\n\nfunc mintGRC1155Token(owner std.Address) {\n\tfor i := 1; i \u003c= 10; i++ {\n\t\ttid := grc1155.TokenID(ufmt.Sprintf(\"%d\", i))\n\t\tfoo.SafeMint(owner, tid, 100)\n\t}\n}\n\n// Getters\n\nfunc BalanceOf(user users.AddressOrName, tid grc1155.TokenID) uint64 {\n\tbalance, err := foo.BalanceOf(user.Resolve(), tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn balance\n}\n\nfunc BalanceOfBatch(users []users.AddressOrName, batch []grc1155.TokenID) []uint64 {\n\tvar usersResolved []std.Address\n\n\tfor i := 0; i \u003c len(users); i++ {\n\t\tusersResolved[i] = users[i].Resolve()\n\t}\n\tbalanceBatch, err := foo.BalanceOfBatch(usersResolved, batch)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn balanceBatch\n}\n\nfunc IsApprovedForAll(owner, user users.AddressOrName) bool {\n\treturn foo.IsApprovedForAll(owner.Resolve(), user.Resolve())\n}\n\n// Setters\n\nfunc SetApprovalForAll(user users.AddressOrName, approved bool) {\n\terr := foo.SetApprovalForAll(user.Resolve(), approved)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc TransferFrom(from, to users.AddressOrName, tid grc1155.TokenID, amount uint64) {\n\terr := foo.SafeTransferFrom(from.Resolve(), to.Resolve(), tid, amount)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc BatchTransferFrom(from, to users.AddressOrName, batch []grc1155.TokenID, amounts []uint64) {\n\terr := foo.SafeBatchTransferFrom(from.Resolve(), to.Resolve(), batch, amounts)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\n// Admin\n\nfunc Mint(to users.AddressOrName, tid grc1155.TokenID, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\terr := foo.SafeMint(to.Resolve(), tid, amount)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc MintBatch(to users.AddressOrName, batch []grc1155.TokenID, amounts []uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\terr := foo.SafeBatchMint(to.Resolve(), batch, amounts)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Burn(from users.AddressOrName, tid grc1155.TokenID, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\terr := foo.Burn(from.Resolve(), tid, amount)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc BurnBatch(from users.AddressOrName, batch []grc1155.TokenID, amounts []uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\terr := foo.BatchBurn(from.Resolve(), batch, amounts)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\n// Render\n\nfunc Render(path string) string {\n\tswitch {\n\tcase path == \"\":\n\t\treturn foo.RenderHome()\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\n// Util\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"m7jPl9v8xsOILmMmX4Ok3b9vvKMSzKDR0PxyzoVsSgMBxtt3zjCpzau2A50Iumk43iWtuEMbYXRAfG7hrOwKzw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"208043"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"duysynft721","Path":"gno.land/p/duysyland/duysynft721","Files":[{"Name":"package.gno","Body":"package duysynft721\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/grc/grc721\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tadmin std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\"\n\tfoo               = grc721.NewBasicNFT(\"FooNFT\", \"FNFT\")\n)\n\nfunc init() {\n\tmintNNFT(admin, 10)                                     // @administrator (10)\n}\n\nfunc mintNNFT(owner std.Address, n uint64) {\n\tcount := foo.TokenCount()\n\tfor i := count; i \u003c count+n; i++ {\n\t\ttid := grc721.TokenID(ufmt.Sprintf(\"%d\", i))\n\t\tfoo.Mint(owner, tid)\n\t}\n}\n\n// Getters\n\nfunc BalanceOf(user users.AddressOrName) uint64 {\n\tbalance, err := foo.BalanceOf(user.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn balance\n}\n\nfunc OwnerOf(tid grc721.TokenID) std.Address {\n\towner, err := foo.OwnerOf(tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn owner\n}\n\nfunc IsApprovedForAll(owner, user users.AddressOrName) bool {\n\treturn foo.IsApprovedForAll(owner.Resolve(), user.Resolve())\n}\n\nfunc GetApproved(tid grc721.TokenID) std.Address {\n\taddr, err := foo.GetApproved(tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn addr\n}\n\n// Setters\n\nfunc Approve(user users.AddressOrName, tid grc721.TokenID) {\n\terr := foo.Approve(user.Resolve(), tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc SetApprovalForAll(user users.AddressOrName, approved bool) {\n\terr := foo.SetApprovalForAll(user.Resolve(), approved)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc TransferFrom(from, to users.AddressOrName, tid grc721.TokenID) {\n\terr := foo.TransferFrom(from.Resolve(), to.Resolve(), tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\n// Admin\n\nfunc Mint(to users.AddressOrName, tid grc721.TokenID) {\n\tcaller := std.PrevRealm().Addr()\n\tassertIsAdmin(caller)\n\terr := foo.Mint(to.Resolve(), tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Burn(tid grc721.TokenID) {\n\tcaller := std.PrevRealm().Addr()\n\tassertIsAdmin(caller)\n\terr := foo.Burn(tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\n// Render\n\nfunc Render(path string) string {\n\tswitch {\n\tcase path == \"\":\n\t\treturn foo.RenderHome()\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\n// Util\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"H1ct23esHudunFbUOFoSPxkvGIpdsYwiFiegWR/9MTMe8mq6CS8u5K5IRlxYwjBBp82hzrA0s9/D2gvGYXofsg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"208047"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"duysynft721","Path":"gno.land/p/duysyland/duysynft721","Files":[{"Name":"package.gno","Body":"package duysynft721\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/grc/grc721\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tadmin std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\"\n\tfoo               = grc721.NewBasicNFT(\"FooNFT\", \"FNFT\")\n)\n\nfunc init() {\n\tmintNNFT(admin, 10)                                     // @administrator (10)\n}\n\nfunc mintNNFT(owner std.Address, n uint64) {\n\tcount := foo.TokenCount()\n\tfor i := count; i \u003c count+n; i++ {\n\t\ttid := grc721.TokenID(ufmt.Sprintf(\"%d\", i))\n\t\tfoo.Mint(owner, tid)\n\t}\n}\n\n// Getters\n\nfunc BalanceOf(user users.AddressOrName) uint64 {\n\tbalance, err := foo.BalanceOf(user.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn balance\n}\n\nfunc OwnerOf(tid grc721.TokenID) std.Address {\n\towner, err := foo.OwnerOf(tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn owner\n}\n\nfunc IsApprovedForAll(owner, user users.AddressOrName) bool {\n\treturn foo.IsApprovedForAll(owner.Resolve(), user.Resolve())\n}\n\nfunc GetApproved(tid grc721.TokenID) std.Address {\n\taddr, err := foo.GetApproved(tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn addr\n}\n\n// Setters\n\nfunc Approve(user users.AddressOrName, tid grc721.TokenID) {\n\terr := foo.Approve(user.Resolve(), tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc SetApprovalForAll(user users.AddressOrName, approved bool) {\n\terr := foo.SetApprovalForAll(user.Resolve(), approved)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc TransferFrom(from, to users.AddressOrName, tid grc721.TokenID) {\n\terr := foo.TransferFrom(from.Resolve(), to.Resolve(), tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\n// Admin\n\nfunc Mint(to users.AddressOrName, tid grc721.TokenID) {\n\tcaller := std.PrevRealm().Addr()\n\tassertIsAdmin(caller)\n\terr := foo.Mint(to.Resolve(), tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Burn(tid grc721.TokenID) {\n\tcaller := std.PrevRealm().Addr()\n\tassertIsAdmin(caller)\n\terr := foo.Burn(tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\n// Render\n\nfunc Render(path string) string {\n\tswitch {\n\tcase path == \"\":\n\t\treturn foo.RenderHome()\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\n// Util\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"hAxCsPjFUnGtd4H6HRa22tYso05CMKNFhjjhdW2/AeUgz9Ibm9ZZS2U4YDzWQbzaJJNQC4maR+2o+nbstQv4iw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"208049"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"helping","Path":"gno.land/p/duysyland/helping","Files":[{"Name":"package.gno","Body":"package helping\n\nvar (  \n  helping string\n)\n \n// setters -\u003e tx (spend money, GNOT; ETH)\nfunc SetHelping(msg string) {\n  helping = msg\n}\n\n// getter -\u003e query (read-only) = FREE\nfunc GetHelping() string {\n  return helping\n}\n"},{"Name":"helping.gno","Body":"package helping\r\n\r\n// v0 https://play.gno.land/p/3wKScpWPvAu\r\nvar (  \r\n  helping string\r\n)\r\n \r\n// setters -\u003e tx (spend money, GNOT; ETH)\r\nfunc SetHelping(msg string) {\r\n  helping = msg\r\n}\r\n \r\n// getter -\u003e query (read-only) = FREE\r\nfunc GetHelping() string {\r\n  return helping\r\n}\r\n"},{"Name":"erc20.gno","Body":"package foo20\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tfoo   *grc20.AdminToken\r\n\tadmin std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\r\n)\r\n\r\nfunc init() {\r\n\tfoo = grc20.NewAdminToken(\"SYTOKEN\", \"SYTOKEN\", 4)\r\n\tfoo.Mint(admin, 1000000*10000)                                    // @administrator (1M)\r\n\tfoo.Mint(\"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\", 10000*10000) // @manfred (10k)\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn foo.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := foo.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := foo.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.Transfer(caller, to.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.Approve(caller, spender.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\n// faucet.\r\n\r\nfunc Faucet() {\r\n\t// FIXME: add limits?\r\n\t// FIXME: add payment in gnot?\r\n\tcaller := std.PrevRealm().Addr()\r\n\terr := foo.Mint(caller, 1000*10000) // 1k\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\tassertIsAdmin(caller)\r\n\terr := foo.Mint(address.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.PrevRealm().Addr()\r\n\tassertIsAdmin(caller)\r\n\terr := foo.Burn(address.Resolve(), amount)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn foo.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := foo.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}\r\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"DOsHOHZGOMdVAzFOBu646YWY9OdiqtG0js/4sbOrHdcOJkYNu3ZKOIsKl6DlVOhmK2D/jBFDipJvy7TQX2UL+Q=="}],"memo":"Deployed through play.gno.land"},"blockNum":"208056"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"helping","Path":"gno.land/p/duysyland/helping","Files":[{"Name":"helping.gno","Body":"package helping\r\n\r\n// v0 https://play.gno.land/p/3wKScpWPvAu\r\nvar (  \r\n  helping string\r\n)\r\n \r\n// setters -\u003e tx (spend money, GNOT; ETH)\r\nfunc SetHelping(msg string) {\r\n  helping = msg\r\n}\r\n \r\n// getter -\u003e query (read-only) = FREE\r\nfunc GetHelping() string {\r\n  return helping\r\n}\r\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"WUIIxagU2IYEdM+TisI3fEo34pyhA8JI3wxZv/vIag8+SUzKdC6Wvz59+qH2mIEIb/n/mvVOoRLZ8M97a52FYQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"208058"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test2012024","Path":"gno.land/p/duysyland/test2012024","Files":[{"Name":"helping.gno","Body":"package helping\r\n\r\n// v0 https://play.gno.land/p/3wKScpWPvAu\r\nvar (  \r\n  helping string\r\n)\r\n \r\n// setters -\u003e tx (spend money, GNOT; ETH)\r\nfunc SetHelping(msg string) {\r\n  helping = msg\r\n}\r\n \r\n// getter -\u003e query (read-only) = FREE\r\nfunc GetHelping() string {\r\n  return helping\r\n}\r\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"VmtSj6wNBd+dEkhzP/3AZ5Mdz5p0H7tyPjS8o58cGL0M0kJvSlrCk4S+9PKFRFD02KSvCfsl0b3YI75vkm53PQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"208075"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"erc20","Path":"gno.land/p/duysyland/erc20","Files":[{"Name":"erc20.gno","Body":"package erc20\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tfoo   *grc20.AdminToken\r\n\tadmin std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\r\n)\r\n\r\nfunc init() {\r\n\tfoo = grc20.NewAdminToken(\"DSERC20\", \"DSERC20\", 4)\r\n\tfoo.Mint(admin, 1000000*10000)                                    // @administrator (1M)\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn foo.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := foo.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := foo.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tfoo.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tfoo.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tfoo.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// faucet.\r\n\r\nfunc Faucet() {\r\n\t// FIXME: add limits?\r\n\t// FIXME: add payment in gnot?\r\n\tcaller := std.GetOrigCaller()\r\n\tfoo.Mint(caller, 1000*10000) // 1k\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tfoo.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tfoo.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn foo.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := foo.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"EHgpLc1zHmgP6k6hMPTL2bWnskbT/+eGgOe9D2dVMdlcWGRJgWy3ARpKh+Hs/4j8Ma9NPR9lZRTZmg1gbBdDVw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"208153"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"erc20","Path":"gno.land/r/duysyland/erc20","Files":[{"Name":"erc20.gno","Body":"package erc20\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tfoo   *grc20.AdminToken\r\n\tadmin std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\r\n)\r\n\r\nfunc init() {\r\n\tfoo = grc20.NewAdminToken(\"DSERC20\", \"DSERC20\", 4)\r\n\tfoo.Mint(admin, 1000000*10000)                                    // @administrator (1M)\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn foo.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := foo.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := foo.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tfoo.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tfoo.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tfoo.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// faucet.\r\n\r\nfunc Faucet() {\r\n\t// FIXME: add limits?\r\n\t// FIXME: add payment in gnot?\r\n\tcaller := std.GetOrigCaller()\r\n\tfoo.Mint(caller, 1000*10000) // 1k\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tfoo.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tfoo.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn foo.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := foo.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"beC/N7J200YYoYKDuKG1kmozfiF9MCLUbE9+vAnz33Vj3ovTOCkPzr1DSEts9IcyqlrtMxR8TmOnvHlg0Hes9Q=="}],"memo":"Deployed through play.gno.land"},"blockNum":"208155"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysyland/erc20","func":"Mint()","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","1000"]}],"fee":{"gas_wanted":"60000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"rvcZGJl/sjQYKdoLRS/dp4iVhzD+PuBqJv+FNQaw+8xMmYrmEWVPlN6mZGTBIXEJtvtcYEHXa4blRxNdLrkfxg=="}],"memo":""},"blockNum":"208181"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysyland/erc20","func":"Mint()","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","1000"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"sYjHRERm4e6duVuCcuQNPUwyXQTC2i2eT5KI+DIQdyEvM5kveF2giYOnmQHm3qR/pJwhqNbWgWXaSeJEE9o7Hg=="}],"memo":""},"blockNum":"208183"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysyland/erc20","func":"Mint","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","1000"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"D/U9tAzlxl9TUiwcERhHmpHpx1BUVjOjBONb/DLwJXESzoe4v0FEtb7qo/tEqU+8n57vKV8glFw0vDebPBnP7g=="}],"memo":""},"blockNum":"208185"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysyland/erc20","func":"Mint","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","1000"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"7bNoseT9r5BM6l9ElEBKFEpvIAU5QtEyx6kQWTPW2pJZLsFfQNbZn4RtIXWCmGVBWffiPNDT7wkyCCtcy85d1Q=="}],"memo":""},"blockNum":"208187"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysyland/erc20","func":"Mint","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","1000"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"KEwmkXz3DwwJDZNFEOvQy0PRFhWCZTptHDS1V0/raKAqgbuVruhfHX41rvePkDjAZwktk6dWAxSHDnAvmSG8DQ=="}],"memo":""},"blockNum":"208198"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysyland/erc20","func":"Mint","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","1000"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"6PeS03Vjde+SVcFvpZy2VRC2BK+7spTmokDhm2Ee4kVMnHrDBDDmZZlZWZpyZA89d+ie5A7BJQ7g6Gj5cwyZMw=="}],"memo":""},"blockNum":"208200"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysyland/erc20","func":"Mint","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","1000"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"Bxb1kP9qVRX/I0WcHhrXJFfby3qxEHwUXZaThtkhvCwnAk5jMaR95Mtlqat+f8pnWysjGqNByU8eLpNv+BrLHw=="}],"memo":""},"blockNum":"208202"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysyland/erc20","func":"Mint","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","1000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"CGUP8ac+/oV8MykPJdArQI/Zl3rnnu3WG7DASBpgF7IVjBCe39VZA22n+/+5YYeVbPWYeAlenO8kqZil7e9etg=="}],"memo":""},"blockNum":"208221"}
