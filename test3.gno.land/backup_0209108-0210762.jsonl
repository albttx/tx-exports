{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysyland/erc20","func":"Mint","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","1000"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"hvCN/Kd+T3PCo6L5Rt1QbQBWiV2UXqOAEVyAC0M6lZsTyf+VCz/6hpiFgPFXsdmzL/auEroNW4cqTFvfYF8dxg=="}],"memo":""},"blockNum":"209132"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysyland/erc20","func":"Mint","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","1000"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"aNc6Q3cQJymMavr5kT4UjfPWwztLkM4bh0X5E28roDlcFDiwDcY6pgUO4tVbLgjPw94mQK6Q3BCw7lJa9Z8UVA=="}],"memo":""},"blockNum":"209136"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysyland/erc20","func":"Transfer","args":["g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","1000"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"ElVcwjS2tmXtvH92jdx6QV+mhA53xeqBAD7ZRuHfWxN1zhUgQw5rxFw9Z5fWarACC6zBcRPUzaY4eqbvfGUc6g=="}],"memo":""},"blockNum":"209138"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysyland/erc20","func":"Mint","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","1000"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"WQ2ewR5MnudDz/O2j2sxxBjRy2aJYvNn9WGY8n3HGk5uoS/bLUkiqmtk2U6AUtOkdCs+Bx27aVpCupmdwo3A3w=="}],"memo":""},"blockNum":"209142"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysyland/erc20","func":"Transfer","args":["g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","1000"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"lXsuQ/Wycwp3PxlnkHxaKzineRrDN+asI8NE23mQ6cB010a8EVq/aHq2saPEUQVx4TrNB0merkkjUabppJD2fQ=="}],"memo":""},"blockNum":"209144"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysyland/erc20","func":"BalanceOf","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"o6NuLtjoIEA6dzk3AzdUV+HUXeO8dwu0p3t22UlhPh12O9cbWBMIM5XIJRiJ8rA3BIUFnFIyd5KaTm6BIWozBA=="}],"memo":""},"blockNum":"209283"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysyland/erc20","func":"Mint","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","1000"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"PLQeJS66z960w3+fjGPOfPWPgk4QaJADElIjlx+rw25qhLuD7unDhJ6WRqzuvFC5RhiSpE6Qh5kKn4N87NK/OQ=="}],"memo":""},"blockNum":"209288"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysyland/erc20","func":"Mint","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","1000"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"Jhlc52SIQ11HfrK0iTpotF8igpjC6JNYRtDrxYHpAGd4LiqvjVpRRVPKRnShVk+g3Hy/00C5SBo1OPM+UKQssg=="}],"memo":""},"blockNum":"209292"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysyland/erc20","func":"BalanceOf","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"ZD2vFrsZ/RqAW7bNC/CGW9ckHXWeM9wNzz0R9d21r2Qv68onqSFcU4Ic0/FpeTEIPCK12wCy2mwHoqT3ygXEsA=="}],"memo":""},"blockNum":"209294"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysyland/erc20","func":"Mint","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","1000"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"tU4EqyVU4RurITAk7fp2Wuon6kGJ4JRb7JyNHv/lK5otdNSNX1mMq2w/qXjkh5CjuCUDVBr2XitvdaX+zDBQZQ=="}],"memo":""},"blockNum":"209304"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysyland/erc20","func":"Mint","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","1000"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"ZHkTmHCV5X6yV2HHq+bXPDI33eKtGn+/AtX9VLDYjlY+bwXFLuyXEcpXp3OO327NuV6KSRgIz8w1iqz7YexQ1w=="}],"memo":""},"blockNum":"209395"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysyland/erc20","func":"Mint","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","1000"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"sRjLwwKSzDGldKYpxrTHXS1Lx9rD3qUNQzVIgj+LSakIqvbsmec5PTTkhk6TQ4qsXbtpaqL+zTwlwGO2982ugQ=="}],"memo":""},"blockNum":"209397"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test1","Path":"gno.land/p/duysygame/test1","Files":[{"Name":"package.gno","Body":"package gamedemo\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddr2Car avl.Tree                                                 // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc login(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcarI, ok := addr2Car.Get(name)\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress += driverAddress\n\t} else {\n\t\tcar := \u0026Car{\n\t\t\townerAddress:  caller.String(),\n\t\t\tdriverAddress: driverAddress,\n\t\t\tname:          \"Car lever 1\",\n\t\t\tnumber:        counter,\n\t\t\tx:             0,\n\t\t\ty:             0,\n\t\t}\n\t\taddr2User.Set(caller.String(), car)\n\t}\n}\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"tk1ZhSn0Eq0Tk5xAk7Xv5Ln1ctz76rmCBwpeMiyB9PVLYC9ZGzqdbx3EWXofrOTlwIee17aBQF8xTDOUsbjczw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209449"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"gamedemo","Path":"gno.land/p/duysygame/gamedemo","Files":[{"Name":"package.gno","Body":"package gamedemo\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddr2Car avl.Tree                                                 // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc login(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcarI, ok := addr2Car.Get(name)\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress += driverAddress\n\t} else {\n\t\tcar := \u0026Car{\n\t\t\townerAddress:  caller.String(),\n\t\t\tdriverAddress: driverAddress,\n\t\t\tname:          \"Car lever 1\",\n\t\t\tnumber:        counter,\n\t\t\tx:             0,\n\t\t\ty:             0,\n\t\t}\n\t\taddr2User.Set(caller.String(), car)\n\t}\n}\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"K3du5EwGg0ZATi50ByxmMyHb9O2FPZdS6fKLPPkHgUBbPyYjPQlhW4fgEiI5mszaBSY88mbwaMk6M1bcmASpIg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209451"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"gamedemo","Path":"gno.land/p/duysygame/gamedemo","Files":[{"Name":"package.gno","Body":"package gamedemo\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddr2Car avl.Tree                                                 // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc login(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcallerAddressString := caller.String();\n\tcarI, ok := addr2Car.Get(callerAddressString)\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress += driverAddress\n\t} else {\n\t\tcar := \u0026Car{\n\t\t\townerAddress:  caller.String(),\n\t\t\tdriverAddress: driverAddress,\n\t\t\tname:          \"Car lever 1\",\n\t\t\tnumber:        counter,\n\t\t\tx:             0,\n\t\t\ty:             0,\n\t\t}\n\t\taddr2User.Set(callerAddressString, car)\n\t}\n}\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"2p5FDynXbU23yTZ3+RVVzIZrpfeF5HKL+nNX/idkyedPwU+R5sbjzKwu2DrHJNhcxsHDFpgmMGijiybhjR+wvQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209454"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"gamedemo","Path":"gno.land/p/duysygame/gamedemo","Files":[{"Name":"package.gno","Body":"package gamedemo\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddr2Car avl.Tree                                                 // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc login(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcallerAddressString := caller.String();\n\tcarI, ok := addr2Car.Get(callerAddressString)\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t} else {\n\t\tcar := \u0026Car{\n\t\t\townerAddress:  caller.String(),\n\t\t\tdriverAddress: driverAddress,\n\t\t\tname:          \"Car lever 1\",\n\t\t\tnumber:        counter,\n\t\t\tx:             0,\n\t\t\ty:             0,\n\t\t}\n\t\taddr2User.Set(callerAddressString, car)\n\t}\n}\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"YthUFrJijMp7/1S/udCzfKsY7ITB/cvH1CWZJLm0dmQPDN5ZxrSd+adoq7hJz6F24Li8QtE+HYECJ28rWPdaSw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209458"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"gamedemo","Path":"gno.land/p/duysygame/gamedemo","Files":[{"Name":"package.gno","Body":"package gamedemo\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddr2Car avl.Tree                                                 // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc login(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcallerAddressString := caller.String();\n\tcarI, ok := addr2Car.Get(callerAddressString)\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t} else {\n\t\tcar := \u0026Car{\n\t\t\townerAddress:  caller.String(),\n\t\t\tdriverAddress: driverAddress,\n\t\t\tname:          \"Car lever 1\",\n\t\t\tnumber:        counter,\n\t\t\tx:             0,\n\t\t\ty:             0,\n\t\t}\n\t\taddr2User.Set(callerAddressString, car)\n\t}\n}\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"DNcndwQ2ZHrcm66+7OYUuyzv4Tr8JHD/i4pPTkfhUXFBtkV5IUFuKRz+rQ/fGACwQrJ33K6irFxOK1asrKKnYw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209461"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"gamedemo","Path":"gno.land/p/duysygame/gamedemo","Files":[{"Name":"package.gno","Body":"package gamedemo\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddr2Car avl.Tree                                                 // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc login(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcallerAddressString := caller.String();\n\tcarI, ok := addr2Car.Get(callerAddressString)\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t} else {\n\t\tcar := \u0026Car{\n\t\t\townerAddress:  caller.String(),\n\t\t\tdriverAddress: driverAddress,\n\t\t\tname:          \"Car lever 1\",\n\t\t\tnumber:        counter,\n\t\t\tx:             0,\n\t\t\ty:             0,\n\t\t}\n\t\taddr2User.Set(callerAddressString, car)\n\t}\n}\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"lfIQs5yHuOzIXaxgLDtHNrZsF9r+GpBnmFLrrfMbUQ0rjKzeK7pOR3SkE3JBktNpwBvDUhR1j082XdVqNKJigA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209465"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"gamedemo","Path":"gno.land/p/duysygame/gamedemo","Files":[{"Name":"package.gno","Body":"package gamedemo\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddr2Car avl.Tree                                                 // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc login(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcarI, ok := addr2Car.Get(caller.String())\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t} else {\n\t\tcar := \u0026Car{\n\t\t\townerAddress:  caller.String(),\n\t\t\tdriverAddress: driverAddress,\n\t\t\tname:          \"Car lever 1\",\n\t\t\tnumber:        counter,\n\t\t\tx:             0,\n\t\t\ty:             0,\n\t\t}\n\t\taddr2User.Set(caller.String(), car)\n\t}\n}\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"9pBeyzvdgms4PC88sOduUxGKQRsibvib8lqDP1jQrEdyBnoeTngGjgtakwoZYuUqqz2jcBbS6dxECVXpROKvMg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209467"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"gamedemo","Path":"gno.land/p/duysygame/gamedemo","Files":[{"Name":"package.gno","Body":"package gamedemo\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n//----------------------------------------\n// Types\n\ntype User struct {\n\taddress std.Address\n\tname    string\n\tprofile string\n\tnumber  int\n\tinvites int\n\tinviter std.Address\n}\n\nfunc (u *User) Render() string {\n\tstr := \"## user \" + u.name + \"\\n\" +\n\t\t\"\\n\" +\n\t\t\" * address = \" + string(u.address) + \"\\n\" +\n\t\t\" * \" + strconv.Itoa(u.invites) + \" invites\\n\"\n\tif u.inviter != \"\" {\n\t\tstr = str + \" * invited by \" + string(u.inviter) + \"\\n\"\n\t}\n\tstr = str + \"\\n\" +\n\t\tu.profile + \"\\n\"\n\treturn str\n}\n\nfunc (u User) Name() string         { return u.name }\nfunc (u User) Profile() string      { return u.profile }\nfunc (u User) Address() std.Address { return u.address }\n\n//----------------------------------------\n// State\n\nvar (\n\tadmin      std.Address = \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\"\n\tname2User  avl.Tree                    // Name -\u003e *User\n\taddr2User  avl.Tree                    // std.Address -\u003e *User\n\tinvites    avl.Tree                    // string(inviter+\":\"+invited) -\u003e true\n\tcounter    int                         // user id counter\n\tminFee     int64       = 200 * 1000000 // minimum gnot must be paid to register.\n\tmaxFeeMult int64       = 10            // maximum multiples of minFee accepted.\n)\n\n//----------------------------------------\n// Top-level functions\n\nfunc Register(inviter std.Address, name string, profile string) {\n\t// assert CallTx call.\n\tstd.AssertOriginCall()\n\t// assert invited or paid.\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tsentCoins := std.GetOrigSend()\n\tminCoin := std.Coin{\"ugnot\", minFee}\n\tif inviter == \"\" {\n\t\t// banker := std.GetBanker(std.BankerTypeOrigSend)\n\t\tif len(sentCoins) == 1 \u0026\u0026 sentCoins[0].IsGTE(minCoin) {\n\t\t\tif sentCoins[0].Amount \u003e minFee*maxFeeMult {\n\t\t\t\tpanic(\"payment must not be greater than \" + strconv.Itoa(int(minFee*maxFeeMult)))\n\t\t\t} else {\n\t\t\t\t// ok\n\t\t\t}\n\t\t} else {\n\t\t\tpanic(\"payment must not be less than \" + strconv.Itoa(int(minFee)))\n\t\t}\n\t} else {\n\t\tinvitekey := inviter.String() + \":\" + caller.String()\n\t\t_, ok := invites.Get(invitekey)\n\t\tif !ok {\n\t\t\tpanic(\"invalid invitation\")\n\t\t}\n\t\tinvites.Remove(invitekey)\n\t}\n\t// assert not already registered.\n\t_, ok := name2User.Get(name)\n\tif ok {\n\t\tpanic(\"name already registered\")\n\t}\n\t_, ok = addr2User.Get(caller.String())\n\tif ok {\n\t\tpanic(\"address already registered\")\n\t}\n\t// assert name is valid.\n\tif !reName.MatchString(name) {\n\t\tpanic(\"invalid name: \" + name + \" (must be at least 6 characters, lowercase alphanumeric with underscore)\")\n\t}\n\t// remainder of fees go toward invites.\n\tinvites := int(0)\n\tif len(sentCoins) == 1 {\n\t\tif sentCoins[0].Denom == \"ugnot\" \u0026\u0026 sentCoins[0].Amount \u003e= minFee {\n\t\t\tinvites = int(sentCoins[0].Amount / minFee)\n\t\t\tif inviter == \"\" \u0026\u0026 invites \u003e 0 {\n\t\t\t\tinvites -= 1\n\t\t\t}\n\t\t}\n\t}\n\t// register.\n\tcounter++\n\tuser := \u0026User{\n\t\taddress: caller,\n\t\tname:    name,\n\t\tprofile: profile,\n\t\tnumber:  counter,\n\t\tinvites: invites,\n\t\tinviter: inviter,\n\t}\n\tname2User.Set(name, user)\n\taddr2User.Set(caller.String(), user)\n}\n\nfunc Invite(invitee string) {\n\t// assert CallTx call.\n\tstd.AssertOriginCall()\n\t// get caller/inviter.\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tlines := strings.Split(invitee, \"\\n\")\n\tif caller == admin {\n\t\t// nothing to do, all good\n\t} else {\n\t\t// ensure has invites.\n\t\tuserI, ok := addr2User.Get(caller.String())\n\t\tif !ok {\n\t\t\tpanic(\"user unknown\")\n\t\t}\n\t\tuser := userI.(*User)\n\t\tif user.invites \u003c= 0 {\n\t\t\tpanic(\"user has no invite tokens\")\n\t\t}\n\t\tuser.invites -= len(lines)\n\t\tif user.invites \u003c 0 {\n\t\t\tpanic(\"user has insufficient invite tokens\")\n\t\t}\n\t}\n\t// for each line...\n\tfor _, line := range lines {\n\t\tif line == \"\" {\n\t\t\tcontinue // file bodies have a trailing newline.\n\t\t} else if strings.HasPrefix(line, `//`) {\n\t\t\tcontinue // comment\n\t\t}\n\t\t// record invite.\n\t\tinvitekey := string(caller) + \":\" + string(line)\n\t\tinvites.Set(invitekey, true)\n\t}\n}\n\nfunc GrantInvites(invites string) {\n\t// assert CallTx call.\n\tstd.AssertOriginCall()\n\t// assert admin.\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tif caller != admin {\n\t\tpanic(\"unauthorized\")\n\t}\n\t// for each line...\n\tlines := strings.Split(invites, \"\\n\")\n\tfor _, line := range lines {\n\t\tif line == \"\" {\n\t\t\tcontinue // file bodies have a trailing newline.\n\t\t} else if strings.HasPrefix(line, `//`) {\n\t\t\tcontinue // comment\n\t\t}\n\t\t// parse name and invites.\n\t\tvar name string\n\t\tvar invites int\n\t\tparts := strings.Split(line, \":\")\n\t\tif len(parts) == 1 { // short for :1.\n\t\t\tname = parts[0]\n\t\t\tinvites = 1\n\t\t} else if len(parts) == 2 {\n\t\t\tname = parts[0]\n\t\t\tinvites_, err := strconv.Atoi(parts[1])\n\t\t\tif err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t\tinvites = int(invites_)\n\t\t} else {\n\t\t\tpanic(\"should not happen\")\n\t\t}\n\t\t// give invites.\n\t\tuserI, ok := name2User.Get(name)\n\t\tif !ok {\n\t\t\t// maybe address.\n\t\t\tuserI, ok = addr2User.Get(name)\n\t\t\tif !ok {\n\t\t\t\tpanic(\"invalid user \" + name)\n\t\t\t}\n\t\t}\n\t\tuser := userI.(*User)\n\t\tuser.invites += invites\n\t}\n}\n\n// Any leftover fees go toward invitations.\nfunc SetMinFee(newMinFee int64) {\n\t// assert CallTx call.\n\tstd.AssertOriginCall()\n\t// assert admin caller.\n\tcaller := std.GetCallerAt(2)\n\tif caller != admin {\n\t\tpanic(\"unauthorized\")\n\t}\n\t// update global variables.\n\tminFee = newMinFee\n}\n\n// This helps prevent fat finger accidents.\nfunc SetMaxFeeMultiple(newMaxFeeMult int64) {\n\t// assert CallTx call.\n\tstd.AssertOriginCall()\n\t// assert admin caller.\n\tcaller := std.GetCallerAt(2)\n\tif caller != admin {\n\t\tpanic(\"unauthorized\")\n\t}\n\t// update global variables.\n\tmaxFeeMult = newMaxFeeMult\n}\n\n//----------------------------------------\n// Exposed public functions\n\nfunc GetUserByName(name string) *User {\n\tuserI, ok := name2User.Get(name)\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn userI.(*User)\n}\n\nfunc GetUserByAddress(addr std.Address) *User {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn userI.(*User)\n}\n\n// unlike GetUserByName, input must be \"@\" prefixed for names.\nfunc GetUserByAddressOrName(input AddressOrName) *User {\n\tname, isName := input.GetName()\n\tif isName {\n\t\treturn GetUserByName(name)\n\t}\n\treturn GetUserByAddress(std.Address(input))\n}\n\n//----------------------------------------\n// Constants\n\n// NOTE: name length must be clearly distinguishable from a bech32 address.\nvar reName = regexp.MustCompile(`^[a-z]+[_a-z0-9]{5,16}$`)\n\n//----------------------------------------\n// Render main page\n\nfunc Render(path string) string {\n\tif path == \"\" {\n\t\treturn renderHome()\n\t} else if len(path) \u003e= 38 { // 39? 40?\n\t\tif path[:2] != \"g1\" {\n\t\t\treturn \"invalid address \" + path\n\t\t}\n\t\tuser := GetUserByAddress(std.Address(path))\n\t\tif user == nil {\n\t\t\t// TODO: display basic information about account.\n\t\t\treturn \"unknown address \" + path\n\t\t}\n\t\treturn user.Render()\n\t} else {\n\t\tuser := GetUserByName(path)\n\t\tif user == nil {\n\t\t\treturn \"unknown username \" + path\n\t\t}\n\t\treturn user.Render()\n\t}\n}\n\nfunc renderHome() string {\n\tdoc := \"\"\n\tname2User.Iterate(\"\", \"\", func(key string, value interface{}) bool {\n\t\tuser := value.(*User)\n\t\tdoc += \" * [\" + user.name + \"](/r/demo/users:\" + user.name + \")\\n\"\n\t\treturn false\n\t})\n\treturn doc\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"7o/29RxecoK+6IQQygoIu9QW/uwpNZRc/YSvnc2GjUxwC5JNwegnh4e/8JAg6R1yWcGr1lNXcD5YfHqizqfBog=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209488"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"gamedemo","Path":"gno.land/p/duysygame/gamedemo","Files":[{"Name":"package.gno","Body":"package gamedemo\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n//----------------------------------------\n// Types\n\ntype User struct {\n\taddress std.Address\n\tname    string\n\tprofile string\n\tnumber  int\n\tinvites int\n\tinviter std.Address\n}\n\nfunc (u *User) Render() string {\n\tstr := \"## user \" + u.name + \"\\n\" +\n\t\t\"\\n\" +\n\t\t\" * address = \" + string(u.address) + \"\\n\" +\n\t\t\" * \" + strconv.Itoa(u.invites) + \" invites\\n\"\n\tif u.inviter != \"\" {\n\t\tstr = str + \" * invited by \" + string(u.inviter) + \"\\n\"\n\t}\n\tstr = str + \"\\n\" +\n\t\tu.profile + \"\\n\"\n\treturn str\n}\n\nfunc (u User) Name() string         { return u.name }\nfunc (u User) Profile() string      { return u.profile }\nfunc (u User) Address() std.Address { return u.address }\n\n//----------------------------------------\n// State\n\nvar (\n\tadmin      std.Address = \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\"\n\tname2User  avl.Tree                    // Name -\u003e *User\n\taddr2User  avl.Tree                    // std.Address -\u003e *User\n\tinvites    avl.Tree                    // string(inviter+\":\"+invited) -\u003e true\n\tcounter    int                         // user id counter\n\tminFee     int64       = 200 * 1000000 // minimum gnot must be paid to register.\n\tmaxFeeMult int64       = 10            // maximum multiples of minFee accepted.\n)\n\n//----------------------------------------\n// Top-level functions\n\nfunc Register(inviter std.Address, name string, profile string) {\n\t// assert CallTx call.\n\tstd.AssertOriginCall()\n\t// assert invited or paid.\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tsentCoins := std.GetOrigSend()\n\tminCoin := std.Coin{\"ugnot\", minFee}\n\tif inviter == \"\" {\n\t\t// banker := std.GetBanker(std.BankerTypeOrigSend)\n\t\tif len(sentCoins) == 1 \u0026\u0026 sentCoins[0].IsGTE(minCoin) {\n\t\t\tif sentCoins[0].Amount \u003e minFee*maxFeeMult {\n\t\t\t\tpanic(\"payment must not be greater than \" + strconv.Itoa(int(minFee*maxFeeMult)))\n\t\t\t} else {\n\t\t\t\t// ok\n\t\t\t}\n\t\t} else {\n\t\t\tpanic(\"payment must not be less than \" + strconv.Itoa(int(minFee)))\n\t\t}\n\t} else {\n\t\tinvitekey := inviter.String() + \":\" + caller.String()\n\t\t_, ok := invites.Get(invitekey)\n\t\tif !ok {\n\t\t\tpanic(\"invalid invitation\")\n\t\t}\n\t\tinvites.Remove(invitekey)\n\t}\n\t// assert not already registered.\n\t_, ok := name2User.Get(name)\n\tif ok {\n\t\tpanic(\"name already registered\")\n\t}\n\t_, ok = addr2User.Get(caller.String())\n\tif ok {\n\t\tpanic(\"address already registered\")\n\t}\n\t// assert name is valid.\n\tif !reName.MatchString(name) {\n\t\tpanic(\"invalid name: \" + name + \" (must be at least 6 characters, lowercase alphanumeric with underscore)\")\n\t}\n\t// remainder of fees go toward invites.\n\tinvites := int(0)\n\tif len(sentCoins) == 1 {\n\t\tif sentCoins[0].Denom == \"ugnot\" \u0026\u0026 sentCoins[0].Amount \u003e= minFee {\n\t\t\tinvites = int(sentCoins[0].Amount / minFee)\n\t\t\tif inviter == \"\" \u0026\u0026 invites \u003e 0 {\n\t\t\t\tinvites -= 1\n\t\t\t}\n\t\t}\n\t}\n\t// register.\n\tcounter++\n\tuser := \u0026User{\n\t\taddress: caller,\n\t\tname:    name,\n\t\tprofile: profile,\n\t\tnumber:  counter,\n\t\tinvites: invites,\n\t\tinviter: inviter,\n\t}\n\tname2User.Set(name, user)\n\taddr2User.Set(caller.String(), user)\n}\n\nfunc Invite(invitee string) {\n\t// assert CallTx call.\n\tstd.AssertOriginCall()\n\t// get caller/inviter.\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tlines := strings.Split(invitee, \"\\n\")\n\tif caller == admin {\n\t\t// nothing to do, all good\n\t} else {\n\t\t// ensure has invites.\n\t\tuserI, ok := addr2User.Get(caller.String())\n\t\tif !ok {\n\t\t\tpanic(\"user unknown\")\n\t\t}\n\t\tuser := userI.(*User)\n\t\tif user.invites \u003c= 0 {\n\t\t\tpanic(\"user has no invite tokens\")\n\t\t}\n\t\tuser.invites -= len(lines)\n\t\tif user.invites \u003c 0 {\n\t\t\tpanic(\"user has insufficient invite tokens\")\n\t\t}\n\t}\n\t// for each line...\n\tfor _, line := range lines {\n\t\tif line == \"\" {\n\t\t\tcontinue // file bodies have a trailing newline.\n\t\t} else if strings.HasPrefix(line, `//`) {\n\t\t\tcontinue // comment\n\t\t}\n\t\t// record invite.\n\t\tinvitekey := string(caller) + \":\" + string(line)\n\t\tinvites.Set(invitekey, true)\n\t}\n}\n\nfunc GrantInvites(invites string) {\n\t// assert CallTx call.\n\tstd.AssertOriginCall()\n\t// assert admin.\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tif caller != admin {\n\t\tpanic(\"unauthorized\")\n\t}\n\t// for each line...\n\tlines := strings.Split(invites, \"\\n\")\n\tfor _, line := range lines {\n\t\tif line == \"\" {\n\t\t\tcontinue // file bodies have a trailing newline.\n\t\t} else if strings.HasPrefix(line, `//`) {\n\t\t\tcontinue // comment\n\t\t}\n\t\t// parse name and invites.\n\t\tvar name string\n\t\tvar invites int\n\t\tparts := strings.Split(line, \":\")\n\t\tif len(parts) == 1 { // short for :1.\n\t\t\tname = parts[0]\n\t\t\tinvites = 1\n\t\t} else if len(parts) == 2 {\n\t\t\tname = parts[0]\n\t\t\tinvites_, err := strconv.Atoi(parts[1])\n\t\t\tif err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t\tinvites = int(invites_)\n\t\t} else {\n\t\t\tpanic(\"should not happen\")\n\t\t}\n\t\t// give invites.\n\t\tuserI, ok := name2User.Get(name)\n\t\tif !ok {\n\t\t\t// maybe address.\n\t\t\tuserI, ok = addr2User.Get(name)\n\t\t\tif !ok {\n\t\t\t\tpanic(\"invalid user \" + name)\n\t\t\t}\n\t\t}\n\t\tuser := userI.(*User)\n\t\tuser.invites += invites\n\t}\n}\n\n// Any leftover fees go toward invitations.\nfunc SetMinFee(newMinFee int64) {\n\t// assert CallTx call.\n\tstd.AssertOriginCall()\n\t// assert admin caller.\n\tcaller := std.GetCallerAt(2)\n\tif caller != admin {\n\t\tpanic(\"unauthorized\")\n\t}\n\t// update global variables.\n\tminFee = newMinFee\n}\n\n// This helps prevent fat finger accidents.\nfunc SetMaxFeeMultiple(newMaxFeeMult int64) {\n\t// assert CallTx call.\n\tstd.AssertOriginCall()\n\t// assert admin caller.\n\tcaller := std.GetCallerAt(2)\n\tif caller != admin {\n\t\tpanic(\"unauthorized\")\n\t}\n\t// update global variables.\n\tmaxFeeMult = newMaxFeeMult\n}\n\n//----------------------------------------\n// Exposed public functions\n\nfunc GetUserByName(name string) *User {\n\tuserI, ok := name2User.Get(name)\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn userI.(*User)\n}\n\nfunc GetUserByAddress(addr std.Address) *User {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn userI.(*User)\n}\n\n\n//----------------------------------------\n// Constants\n\n// NOTE: name length must be clearly distinguishable from a bech32 address.\nvar reName = regexp.MustCompile(`^[a-z]+[_a-z0-9]{5,16}$`)\n\n//----------------------------------------\n// Render main page\n\nfunc Render(path string) string {\n\tif path == \"\" {\n\t\treturn renderHome()\n\t} else if len(path) \u003e= 38 { // 39? 40?\n\t\tif path[:2] != \"g1\" {\n\t\t\treturn \"invalid address \" + path\n\t\t}\n\t\tuser := GetUserByAddress(std.Address(path))\n\t\tif user == nil {\n\t\t\t// TODO: display basic information about account.\n\t\t\treturn \"unknown address \" + path\n\t\t}\n\t\treturn user.Render()\n\t} else {\n\t\tuser := GetUserByName(path)\n\t\tif user == nil {\n\t\t\treturn \"unknown username \" + path\n\t\t}\n\t\treturn user.Render()\n\t}\n}\n\nfunc renderHome() string {\n\tdoc := \"\"\n\tname2User.Iterate(\"\", \"\", func(key string, value interface{}) bool {\n\t\tuser := value.(*User)\n\t\tdoc += \" * [\" + user.name + \"](/r/demo/users:\" + user.name + \")\\n\"\n\t\treturn false\n\t})\n\treturn doc\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"0JKFB9srcO3kML+dfHVjW4ny51FG+RJriHEWBIQ/eu9RBDuzTzrkXh0b9CVE/f3nB0AVjGFIrgoE6VaGd/BeKw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209492"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test1","Path":"gno.land/p/duysygame/test1","Files":[{"Name":"package.gno","Body":"package test1\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddr2Car avl.Tree                                                 // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc login(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\t// carI, ok := addr2Car.Get(caller.String())\n\t// if ok {\n\t// \tcar := carI.(*Car)\n\t// \tcar.driverAddress = driverAddress\n\t// } else {\n\t// \tcar := \u0026Car{\n\t// \t\townerAddress:  caller.String(),\n\t// \t\tdriverAddress: driverAddress,\n\t// \t\tname:          \"Car lever 1\",\n\t// \t\tnumber:        counter,\n\t// \t\tx:             0,\n\t// \t\ty:             0,\n\t// \t}\n\t// \taddr2User.Set(caller.String(), car)\n\t// }\n}\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"m95kLNVke182LvzpRlbsi7iC1s6SjTil6rwUx4TNLC4q6k210LVYG/U3JsRgUXC4HafGPmqoDcb4/Wkv27rGkw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209498"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test2","Path":"gno.land/p/duysygame/test2","Files":[{"Name":"package.gno","Body":"package test2\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddr2Car avl.Tree                                                 // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc login(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcarI, ok := addr2Car.Get(caller.String())\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t} else {\n\t\tcar := \u0026Car{\n\t\t\townerAddress:  caller.String(),\n\t\t\tdriverAddress: driverAddress,\n\t\t\tname:          \"Car lever 1\",\n\t\t\tnumber:        counter,\n\t\t\tx:             0,\n\t\t\ty:             0,\n\t\t}\n\t\taddr2User.Set(caller.String(), car)\n\t}\n}\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"T+ZqlaTGP2n3uFlrB3YlgwUF6nhEKpeftfRr2uBB0X8Fidue35da18N+FtBrxPSZ6lxDH1tUzn0GKs+ifZ0OZw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209500"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test2","Path":"gno.land/p/duysygame/test2","Files":[{"Name":"package.gno","Body":"package test2\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddr2Car avl.Tree                                                 // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc login(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addr2Car.Get(caller.String())\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t} else {\n\t\tcar := \u0026Car{\n\t\t\townerAddress:  caller.String(),\n\t\t\tdriverAddress: driverAddress,\n\t\t\tname:          \"Car lever 1\",\n\t\t\tnumber:        counter,\n\t\t\tx:             0,\n\t\t\ty:             0,\n\t\t}\n\t\taddr2User.Set(caller.String(), car)\n\t}\n}\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"EMKqDh2m8r5uisNeFH9MO1ku7wdXP83BfsOCOCZBgeY2suk/xI6p7hZEn3x+EzPBia4vB7vUUxVTPbZeuMkBZw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209503"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test2","Path":"gno.land/p/duysygame/test2","Files":[{"Name":"package.gno","Body":"package test2\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddr2Car avl.Tree                                                 // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc login(driverAddress std.Address) *Car{\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addr2Car.Get(caller.String())\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t\treturn car\n\t} else {\n\t\tcar := \u0026Car{\n\t\t\townerAddress:  caller.String(),\n\t\t\tdriverAddress: driverAddress,\n\t\t\tname:          \"Car lever 1\",\n\t\t\tx:             0,\n\t\t\ty:             0,\n\t\t}\n\t\taddr2User.Set(caller.String(), car)\n\t\treturn car\n\t}\n}\n\nfunc up(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tassertIsDrive()\n\tcar.y += 1\n\n}\n\nfunc down(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tassertIsDrive()\n\tcar.y -= 1\n\n}\n\nfunc left(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tassertIsDrive()\n\tcar.x -= 1\n\n}\n\nfunc left(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tassertIsDrive()\n\tcar.x += 1\n\n}\n\nfunc assertIsDrive(driverAddress std.Address) *Car {\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addr2Car.Get(caller.String())\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car\n}\n\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"m8gmsAOWgIB99KtKfj2k7bJ6soOmuq/UEaINye/SOy4EP8YkzMqp+qno3bZmLWWKRrn/sQDSM7EnSeL6IHNvkg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209523"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test2","Path":"gno.land/p/duysygame/test2","Files":[{"Name":"package.gno","Body":"package test2\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddr2Car avl.Tree                                                 // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc login(driverAddress std.Address) *Car{\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addr2Car.Get(caller.String())\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t\treturn car\n\t} else {\n\t\tcar := \u0026Car{\n\t\t\townerAddress:  caller.String(),\n\t\t\tdriverAddress: driverAddress,\n\t\t\tname:          \"Car lever 1\",\n\t\t\tx:             0,\n\t\t\ty:             0,\n\t\t}\n\t\taddr2User.Set(caller.String(), car)\n\t\treturn car\n\t}\n}\n\nfunc up(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tassertIsDrive()\n\tcar.y += 1\n\n}\n\nfunc down(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tassertIsDrive()\n\tcar.y -= 1\n\n}\n\nfunc left(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tassertIsDrive()\n\tcar.x -= 1\n\n}\n\nfunc right(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tassertIsDrive()\n\tcar.x += 1\n\n}\n\nfunc assertIsDrive(driverAddress std.Address) *Car {\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addr2Car.Get(caller.String())\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car\n}\n\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"KczP+xSKlzMfkeHrhv1OYSQ5u8fStwVd6+kyocAaZvBV3IsfIRrybLIGgN8pJ9mn6tMhvkUYLZybpYOcgRbecg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209525"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test2","Path":"gno.land/p/duysygame/test2","Files":[{"Name":"package.gno","Body":"package test2\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddr2Car avl.Tree                                                 // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc login(driverAddress std.Address) *Car{\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addr2Car.Get(caller.String())\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t\treturn car\n\t} else {\n\t\tcar := \u0026Car{\n\t\t\townerAddress:  caller,\n\t\t\tdriverAddress: driverAddress,\n\t\t\tname:          \"Car lever 1\",\n\t\t\tx:             0,\n\t\t\ty:             0,\n\t\t}\n\t\taddr2User.Set(caller.String(), car)\n\t\treturn car\n\t}\n}\n\nfunc up(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tassertIsDrive()\n\tcar.y += 1\n\n}\n\nfunc down(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tassertIsDrive()\n\tcar.y -= 1\n\n}\n\nfunc left(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tassertIsDrive()\n\tcar.x -= 1\n\n}\n\nfunc right(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tassertIsDrive()\n\tcar.x += 1\n\n}\n\nfunc assertIsDrive(driverAddress std.Address) *Car {\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addr2Car.Get(caller.String())\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car\n}\n\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"Dfis4YdEa7aaj+JdfZ+d3BJ6Ogz/TOE0SwMchGkW/ck/Nle0jAA2TH5FytQGMn/SQsynqzBQLPVZoCajlZNKKw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209528"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test2","Path":"gno.land/p/duysygame/test2","Files":[{"Name":"package.gno","Body":"package test2\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddr2Car avl.Tree                                                 // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc login(driverAddress std.Address) *Car{\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addr2Car.Get(caller.String())\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t\treturn car\n\t} else {\n\t\tcar := \u0026Car{\n\t\t\townerAddress:  caller,\n\t\t\tdriverAddress: driverAddress,\n\t\t\tname:          \"Car lever 1\",\n\t\t\tx:             0,\n\t\t\ty:             0,\n\t\t}\n\t\taddr2Car.Set(caller.String(), car)\n\t\treturn car\n\t}\n}\n\nfunc up(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tassertIsDrive()\n\tcar.y += 1\n\n}\n\nfunc down(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tassertIsDrive()\n\tcar.y -= 1\n\n}\n\nfunc left(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tassertIsDrive()\n\tcar.x -= 1\n\n}\n\nfunc right(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tassertIsDrive()\n\tcar.x += 1\n\n}\n\nfunc assertIsDrive(driverAddress std.Address) *Car {\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addr2Car.Get(caller.String())\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car\n}\n\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"DNy+VIqxwu8FHK4F8xbm95xJusDjtMCQPAmA18HeiC5Ty1OrT21LMkxOwCq6a9hg79tvL/WupjII2RxVyrK9LA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209530"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test2","Path":"gno.land/p/duysygame/test2","Files":[{"Name":"package.gno","Body":"package test2\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddr2Car avl.Tree                                                 // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc login(driverAddress std.Address) *Car{\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addr2Car.Get(caller.String())\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t\treturn car\n\t} else {\n\t\tcar := \u0026Car{\n\t\t\townerAddress:  caller,\n\t\t\tdriverAddress: driverAddress,\n\t\t\tname:          \"Car lever 1\",\n\t\t\tx:             0,\n\t\t\ty:             0,\n\t\t}\n\t\taddr2Car.Set(caller.String(), car)\n\t\treturn car\n\t}\n}\n\nfunc up(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tassertIsDrive()\n\tcar.y += 1\n\n}\n\nfunc down(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tassertIsDrive()\n\tcar.y -= 1\n\n}\n\nfunc left(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tassertIsDrive()\n\tcar.x -= 1\n\n}\n\nfunc right(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tassertIsDrive()\n\tcar.x += 1\n\n}\n\nfunc assertIsDrive() *Car {\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addr2Car.Get(caller.String())\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car\n}\n\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"Gevxdfn/EYsuDFnZfWloIwyQ9Eyfleh2OrF0VrvWfYkwjwl3iEgFJmIvR/JsoGYzTL8wFcv6f0JWCpVcSIBi3g=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209533"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test2","Path":"gno.land/p/duysygame/test2","Files":[{"Name":"package.gno","Body":"package test2\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddr2Car avl.Tree                                                 // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc login(driverAddress std.Address) *Car {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addr2Car.Get(caller.String())\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t\treturn car\n\t} else {\n\t\tcar := \u0026Car{\n\t\t\townerAddress:  caller,\n\t\t\tdriverAddress: driverAddress,\n\t\t\tname:          \"Car lever 1\",\n\t\t\tx:             0,\n\t\t\ty:             0,\n\t\t}\n\t\taddr2Car.Set(caller.String(), car)\n\t\treturn car\n\t}\n}\n\nfunc up(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tassertIsDrive()\n\tcar.y += 1\n\n}\n\nfunc down(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tassertIsDrive()\n\tcar.y -= 1\n\n}\n\nfunc left(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tassertIsDrive()\n\tcar.x -= 1\n\n}\n\nfunc right(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tassertIsDrive()\n\tcar.x += 1\n\n}\n\nfunc assertIsDrive(caller String) *Car {\n\tindex, carI, ok := addr2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"N0gjmJOcV2IR6cgobNAP3CRf7x8Xqljn34Sy/KRHPphjlti/Rh6ncHIkYdjVi0g0luqRGKsTRhpavRwy6cIsgw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209540"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test2","Path":"gno.land/p/duysygame/test2","Files":[{"Name":"package.gno","Body":"package test2\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddr2Car avl.Tree                                                 // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc login(driverAddress std.Address) *Car {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addr2Car.Get(caller.String())\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t\treturn car\n\t} else {\n\t\tcar := \u0026Car{\n\t\t\townerAddress:  caller,\n\t\t\tdriverAddress: driverAddress,\n\t\t\tname:          \"Car lever 1\",\n\t\t\tx:             0,\n\t\t\ty:             0,\n\t\t}\n\t\taddr2Car.Set(caller.String(), car)\n\t\treturn car\n\t}\n}\n\nfunc up(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tassertIsDrive(caller.String())\n\tcar.y += 1\n\n}\n\nfunc down(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tassertIsDrive(caller.String())\n\tcar.y -= 1\n\n}\n\nfunc left(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tassertIsDrive(caller.String())\n\tcar.x -= 1\n\n}\n\nfunc right(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tassertIsDrive(caller.String())\n\tcar.x += 1\n\n}\n\nfunc assertIsDrive(caller String) *Car {\n\tindex, carI, ok := addr2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"OJ2dOv034a+KGUsPa+uj6FtuYrvh7jXwlVZ7E1LvHIZJ0VRyvd4HkaWFLmw6te/QXKyGcXGX9NqaXuNvDr4rJw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209542"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test2","Path":"gno.land/p/duysygame/test2","Files":[{"Name":"package.gno","Body":"package test2\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddr2Car avl.Tree                                                 // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc login(driverAddress std.Address) *Car {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addr2Car.Get(caller.String())\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t\treturn car\n\t} else {\n\t\tcar := \u0026Car{\n\t\t\townerAddress:  caller,\n\t\t\tdriverAddress: driverAddress,\n\t\t\tname:          \"Car lever 1\",\n\t\t\tx:             0,\n\t\t\ty:             0,\n\t\t}\n\t\taddr2Car.Set(caller.String(), car)\n\t\treturn car\n\t}\n}\n\nfunc up(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tassertIsDrive(caller.String())\n\tcar.y += 1\n\n}\n\nfunc down(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tassertIsDrive(caller.String())\n\tcar.y -= 1\n\n}\n\nfunc left(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tassertIsDrive(caller.String())\n\tcar.x -= 1\n\n}\n\nfunc right(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tassertIsDrive(caller.String())\n\tcar.x += 1\n\n}\n\nfunc assertIsDrive(caller string) *Car {\n\tindex, carI, ok := addr2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"JyHnVKiQ6vmSLR711OYxy2fs8mGgXjiBGvdGhYx8yuIUUl+CkA0i+7UxlPf3C9R00LL75UsaDbTW8qlR2H4mIQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209544"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test2","Path":"gno.land/p/duysygame/test2","Files":[{"Name":"package.gno","Body":"package test2\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddr2Car avl.Tree                                                 // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc login(driverAddress std.Address) *Car {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addr2Car.Get(caller.String())\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t\treturn car\n\t} else {\n\t\tcar := \u0026Car{\n\t\t\townerAddress:  caller,\n\t\t\tdriverAddress: driverAddress,\n\t\t\tname:          \"Car lever 1\",\n\t\t\tx:             0,\n\t\t\ty:             0,\n\t\t}\n\t\taddr2Car.Set(caller.String(), car)\n\t\treturn car\n\t}\n}\n\nfunc up(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar = assertIsDrive(caller.String())\n\tcar.y += 1\n\n}\n\nfunc down(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar = assertIsDrive(caller.String())\n\tcar.y -= 1\n\n}\n\nfunc left(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar = assertIsDrive(caller.String())\n\tcar.x -= 1\n\n}\n\nfunc right(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar = assertIsDrive(caller.String())\n\tcar.x += 1\n\n}\n\nfunc assertIsDrive(caller string) *Car {\n\tindex, carI, ok := addr2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"n4TmAADuosDH3EFOT2r/n47sdf7dtLo9dWjyJdm57Tl8Y02I3ocVuM2dVp9YjyztR8aoI/fp4pOHdtCkOJM1Dg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209546"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test2","Path":"gno.land/p/duysygame/test2","Files":[{"Name":"package.gno","Body":"package test2\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddr2Car avl.Tree                                                 // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc login(driverAddress std.Address) *Car {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addr2Car.Get(caller.String())\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t\treturn car\n\t} else {\n\t\tcar := \u0026Car{\n\t\t\townerAddress:  caller,\n\t\t\tdriverAddress: driverAddress,\n\t\t\tname:          \"Car lever 1\",\n\t\t\tx:             0,\n\t\t\ty:             0,\n\t\t}\n\t\taddr2Car.Set(caller.String(), car)\n\t\treturn car\n\t}\n}\n\nfunc up(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar = assertIsDrive(caller.String())\n\tcar.y += 1\n\n}\n\nfunc down(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar = assertIsDrive(caller.String())\n\tcar.y -= 1\n\n}\n\nfunc left(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar = assertIsDrive(caller.String())\n\tcar.x -= 1\n\n}\n\nfunc right(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar = assertIsDrive(caller.String())\n\tcar.x += 1\n\n}\n\nfunc assertIsDrive(caller string) *Car {\n\tindex, carI, ok := addr2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car.(*Car)\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"BnCoJohSBSfn2qScMLtdolyWR85x743PW/LlyQOXcoVH1OX1MNw7ioRKh5vFe+rujGYAJr+rNnlvPG/rIW1kOA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209552"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test2","Path":"gno.land/p/duysygame/test2","Files":[{"Name":"package.gno","Body":"package test2\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddr2Car avl.Tree                                                 // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc login(driverAddress std.Address) *Car {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addr2Car.Get(caller.String())\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t\treturn car\n\t} else {\n\t\tcar := \u0026Car{\n\t\t\townerAddress:  caller,\n\t\t\tdriverAddress: driverAddress,\n\t\t\tname:          \"Car lever 1\",\n\t\t\tx:             0,\n\t\t\ty:             0,\n\t\t}\n\t\taddr2Car.Set(caller.String(), car)\n\t\treturn car\n\t}\n}\n\nfunc up(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y += 1\n}\n\n\nfunc down(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y -= 1\n\n}\n\nfunc left(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x -= 1\n\n}\n\nfunc right(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x += 1\n\n}\n\nfunc assertIsDrive(caller string) *Car {\n\tindex, carI, ok := addr2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car.(*Car)\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"COziQhrZ9OiDp6PL8aKS0hvKnCtf7ZvxOLi5Gdr5K0slbclUYYlcjX7hHZ+6Q6+Bfnw+HqGt6gCFzA3P582URg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209557"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test2","Path":"gno.land/r/duysygame/test2","Files":[{"Name":"package.gno","Body":"package test2\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddr2Car avl.Tree                                                 // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc login(driverAddress std.Address) *Car {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addr2Car.Get(caller.String())\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t\treturn car\n\t} else {\n\t\tcar := \u0026Car{\n\t\t\townerAddress:  caller,\n\t\t\tdriverAddress: driverAddress,\n\t\t\tname:          \"Car lever 1\",\n\t\t\tx:             0,\n\t\t\ty:             0,\n\t\t}\n\t\taddr2Car.Set(caller.String(), car)\n\t\treturn car\n\t}\n}\n\nfunc up(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y += 1\n}\n\n\nfunc down(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y -= 1\n\n}\n\nfunc left(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x -= 1\n\n}\n\nfunc right(driverAddress std.Address) {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x += 1\n\n}\n\nfunc assertIsDrive(caller string) *Car {\n\tindex, carI, ok := addr2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car.(*Car)\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"TKb0uw9salIjt4str5FwKszaDXwVh/Qq8I398w00hT82xuyLuv8QKoHYms6ZTqkorzM7ZUCavnSTKEAUAOeoXQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209560"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test3","Path":"gno.land/r/duysygame/test3","Files":[{"Name":"package.gno","Body":"package test3\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddrOwner2Car avl.Tree                                            // std.Address -\u003e *Car\n\taddrDriver2Car avl.Tree                                           // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc login(driverAddress std.Address) *Car {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addrOwner2Car.Get(caller.String())\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t\taddrOwner2Car.Set(caller.String(), car)\n\t\taddrDriver2Car.Set(driverAddress.String(), car)\n\t\treturn car\n\t} else {\n\t\tcar := \u0026Car{\n\t\t\townerAddress:  caller,\n\t\t\tdriverAddress: driverAddress,\n\t\t\tname:          \"Car lever 1\",\n\t\t\tx:             0,\n\t\t\ty:             0,\n\t\t}\n\t\taddrOwner2Car.Set(caller.String(), car)\n\t\taddrDriver2Car.Set(driverAddress.String(), car)\n\t\treturn car\n\t}\n\t\n}\n\nfunc Up() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y += 1\n}\n\nfunc Down() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y -= 1\n\n}\n\nfunc Left() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x -= 1\n\n}\n\nfunc Right() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x += 1\n\n}\nfunc GetCarByAddress(addr std.Address) *Car {\n\tcarI, ok := addrOwner2Car.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn carI.(*Car)\n}\n\nfunc assertIsDrive(caller string) *Car {\n\tindex, carI, ok := addrDriver2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car.(*Car)\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"r8qIz8FusCfkT1Un+KGd/nJC5bNzUBaVhmFASTOuwcdbBSODELXsW8BuZKD0cGQbv/qVJGV2g77V5vgAPOo1Ug=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209573"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test3","Path":"gno.land/p/duysygame/test3","Files":[{"Name":"package.gno","Body":"package test3\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddrOwner2Car avl.Tree                                            // std.Address -\u003e *Car\n\taddrDriver2Car avl.Tree                                           // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc login(driverAddress std.Address) *Car {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addrOwner2Car.Get(caller.String())\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t\taddrOwner2Car.Set(caller.String(), car)\n\t\taddrDriver2Car.Set(driverAddress.String(), car)\n\t\treturn car\n\t} else {\n\t\tcar := \u0026Car{\n\t\t\townerAddress:  caller,\n\t\t\tdriverAddress: driverAddress,\n\t\t\tname:          \"Car lever 1\",\n\t\t\tx:             0,\n\t\t\ty:             0,\n\t\t}\n\t\taddrOwner2Car.Set(caller.String(), car)\n\t\taddrDriver2Car.Set(driverAddress.String(), car)\n\t\treturn car\n\t}\n\t\n}\n\nfunc Up() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y += 1\n}\n\nfunc Down() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y -= 1\n\n}\n\nfunc Left() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x -= 1\n\n}\n\nfunc Right() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x += 1\n\n}\nfunc GetCarByAddress(addr std.Address) *Car {\n\tindex, carI, ok := addrOwner2Car.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn carI.(*Car)\n}\n\nfunc assertIsDrive(caller string) *Car {\n\tindex, carI, ok := addrDriver2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car.(*Car)\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"n+1yboRyNiFToA22IP+YzI2jP85aRyzvaC4xiaog8L9+zyJKTMvjh4IqL1g809McgZTTiaEP2Da604Cvqj+iew=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209576"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test4","Path":"gno.land/p/duysygame/test4","Files":[{"Name":"package.gno","Body":"package test3\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddrOwner2Car avl.Tree                                            // std.Address -\u003e *Car\n\taddrDriver2Car avl.Tree                                           // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc Login(driverAddress std.Address) *Car {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addrOwner2Car.Get(caller.String())\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t\taddrOwner2Car.Set(caller.String(), car)\n\t\taddrDriver2Car.Set(driverAddress.String(), car)\n\t\treturn car\n\t} else {\n\t\tcar := \u0026Car{\n\t\t\townerAddress:  caller,\n\t\t\tdriverAddress: driverAddress,\n\t\t\tname:          \"Car lever 1\",\n\t\t\tx:             0,\n\t\t\ty:             0,\n\t\t}\n\t\taddrOwner2Car.Set(caller.String(), car)\n\t\taddrDriver2Car.Set(driverAddress.String(), car)\n\t\treturn car\n\t}\n\t\n}\n\nfunc Up() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y += 1\n}\n\nfunc Down() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y -= 1\n\n}\n\nfunc Left() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x -= 1\n\n}\n\nfunc Right() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x += 1\n\n}\nfunc GetCarByAddress(addr std.Address) *Car {\n\tindex, carI, ok := addrOwner2Car.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn carI.(*Car)\n}\n\nfunc assertIsDrive(caller string) *Car {\n\tindex, carI, ok := addrDriver2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car.(*Car)\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"4wyvFsgofbQwNzBwtM7ouZTNe3/MO0Kg/Xyxn+qY3ZlBy1SDsufEqf7W96e+UPvR6nkMcLxTwWMwV1QXv8RwmQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209579"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test4","Path":"gno.land/r/duysygame/test4","Files":[{"Name":"package.gno","Body":"package test4\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddrOwner2Car avl.Tree                                            // std.Address -\u003e *Car\n\taddrDriver2Car avl.Tree                                           // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc Login(driverAddress std.Address) *Car {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addrOwner2Car.Get(caller.String())\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t\taddrOwner2Car.Set(caller.String(), car)\n\t\taddrDriver2Car.Set(driverAddress.String(), car)\n\t\treturn car\n\t} else {\n\t\tcar := \u0026Car{\n\t\t\townerAddress:  caller,\n\t\t\tdriverAddress: driverAddress,\n\t\t\tname:          \"Car lever 1\",\n\t\t\tx:             0,\n\t\t\ty:             0,\n\t\t}\n\t\taddrOwner2Car.Set(caller.String(), car)\n\t\taddrDriver2Car.Set(driverAddress.String(), car)\n\t\treturn car\n\t}\n\t\n}\n\nfunc Up() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y += 1\n}\n\nfunc Down() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y -= 1\n\n}\n\nfunc Left() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x -= 1\n\n}\n\nfunc Right() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x += 1\n\n}\nfunc GetCarByAddress(addr std.Address) *Car {\n\tindex, carI, ok := addrOwner2Car.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn carI.(*Car)\n}\n\nfunc assertIsDrive(caller string) *Car {\n\tindex, carI, ok := addrDriver2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car.(*Car)\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"q56AduPQayD/2iLZg+wYiOlwGDDS19E9wMjMVVU9PIE1wRQRYS5bYDJDNoCaRQ823v5fVSJ2+UzoqJtS1i2kMg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209581"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test4","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"5kooH+6i2SOflXAEXIu4kDrcy8J7UV0I7lMVgInk05VnfeXQ8CfwyMeB43EoELztdhRICRUQMlS27NdkKgQosQ=="}],"memo":""},"blockNum":"209584"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test5","Path":"gno.land/r/duysygame/test5","Files":[{"Name":"package.gno","Body":"package test5\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddrOwner2Car avl.Tree                                            // std.Address -\u003e *Car\n\taddrDriver2Car avl.Tree                                           // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc Login(driverAddress std.Address) *Car {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addrOwner2Car.Get(caller.String())\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t\taddrOwner2Car.Set(caller.String(), car)\n\t\taddrDriver2Car.Set(driverAddress.String(), car)\n\t\treturn car\n\t} else {\n\t\tcar := \u0026Car{\n\t\t\townerAddress:  caller,\n\t\t\tdriverAddress: driverAddress,\n\t\t\tname:          \"Car lever 1\",\n\t\t\tx:             0,\n\t\t\ty:             0,\n\t\t}\n\t\taddrOwner2Car.Set(caller.String(), car)\n\t\taddrDriver2Car.Set(driverAddress.String(), car)\n\t\treturn car\n\t}\n\t\n}\n\nfunc Up() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y += 1\n}\n\nfunc Down() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y -= 1\n\n}\n\nfunc Left() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x -= 1\n\n}\n\nfunc Right() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x += 1\n\n}\nfunc GetCarByAddress(addr std.Address) *Car {\n\tindex, carI, ok := addrOwner2Car.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn carI.(*Car)\n}\n\nfunc assertIsDrive(caller string) *Car {\n\tindex, carI, ok := addrDriver2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car.(*Car)\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"F4svEDSKbr0WcjwRycBoDEeYBPgS5VfNyfFiVGhtis9DbNtYfvPnmfJ3ImD0s/YLCcLdAxz9HRhRow/EGikXbw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209588"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test5","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"LzsSTvFEmuGUlw3YsFilupsVDSUWco2yHamejplRB2RgypFa9IM5Qeymb+zX8ABAaqTVfxhHioz9jQd7Y0BU2Q=="}],"memo":""},"blockNum":"209590"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test5","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"I6k6IUrz57k7TrQjFzpirfdVQpF8g5ODmvzu4jIa0EAXbFwrraW1wWR/JwYWC/p3OtNPCttn8wYRvEkbsigAZQ=="}],"memo":""},"blockNum":"209596"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test6","Path":"gno.land/r/duysygame/test6","Files":[{"Name":"package.gno","Body":"package test6\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddrOwner2Car avl.Tree                                            // std.Address -\u003e *Car\n\taddrDriver2Car avl.Tree                                           // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc Login(driverAddress std.Address) *Car {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addrOwner2Car.Get(caller.String())\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t\taddrOwner2Car.Set(caller.String(), car)\n\t\taddrDriver2Car.Set(driverAddress.String(), car)\n\t\treturn car.(*Car)\n\t} else {\n\t\tcar := \u0026Car{\n\t\t\townerAddress:  caller,\n\t\t\tdriverAddress: driverAddress,\n\t\t\tname:          \"Car lever 1\",\n\t\t\tx:             0,\n\t\t\ty:             0,\n\t\t}\n\t\taddrOwner2Car.Set(caller.String(), car)\n\t\taddrDriver2Car.Set(driverAddress.String(), car)\n\t\treturn car.(*Car)\n\t}\n\t\n}\n\nfunc Up() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y += 1\n}\n\nfunc Down() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y -= 1\n\n}\n\nfunc Left() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x -= 1\n\n}\n\nfunc Right() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x += 1\n\n}\nfunc GetCarByAddress(addr std.Address) *Car {\n\tindex, carI, ok := addrOwner2Car.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn carI.(*Car)\n}\n\nfunc assertIsDrive(caller string) *Car {\n\tindex, carI, ok := addrDriver2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car.(*Car)\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"rGgtPet3cSzY4bbYFB3Cq4Tc3poM2cqJ1ecL5u5syJYPIFTc3EFBZeXjt+iQ/7EsLiaNfLSKcdJANepB0TNEmw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209601"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test6","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"pcjSVZ1hBnQrb8QQCYt4qoBWcp2naB1gMUkQrm6D76s/uyQonWgBznHeGxetn92SYpBh5hrDMF3V+Kqg/p0wYA=="}],"memo":""},"blockNum":"209603"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test6","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"Sy5rQ1tAnZn6HmzIz25REhbOVv8mH+vFQiBeRqB5bct84SYqo4dR2eV73wfevDby2dxO2lMZxhpjXxZdZjTGZw=="}],"memo":""},"blockNum":"209606"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test7","Path":"gno.land/r/duysygame/test7","Files":[{"Name":"package.gno","Body":"package test7\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddrOwner2Car avl.Tree                                            // std.Address -\u003e *Car\n\taddrDriver2Car avl.Tree                                           // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc Login(driverAddress std.Address){\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addrOwner2Car.Get(caller.String())\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t\taddrOwner2Car.Set(caller.String(), car)\n\t\taddrDriver2Car.Set(driverAddress.String(), car)\n\t} else {\n\t\tcar := \u0026Car{\n\t\t\townerAddress:  caller,\n\t\t\tdriverAddress: driverAddress,\n\t\t\tname:          \"Car lever 1\",\n\t\t\tx:             0,\n\t\t\ty:             0,\n\t\t}\n\t\taddrOwner2Car.Set(caller.String(), car)\n\t\taddrDriver2Car.Set(driverAddress.String(), car)\n\t}\n}\n\nfunc Up() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y += 1\n}\n\nfunc Down() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y -= 1\n\n}\n\nfunc Left() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x -= 1\n\n}\n\nfunc Right() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x += 1\n\n}\nfunc GetCarByAddress(addr std.Address) *Car {\n\tindex, carI, ok := addrOwner2Car.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn carI.(*Car)\n}\n\nfunc assertIsDrive(caller string) *Car {\n\tindex, carI, ok := addrDriver2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car.(*Car)\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"t/9902IsXak36e3UWtVekXyqbrlI8Zg205cuZZ6bA1YdVnKZyJyxOQa7KaJt2God/IhqQMqeLXKlTLdd4rhniQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209612"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test7","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"7JlTgVDU+Ab7qtTke6C8V57GTm6pku710VsKdNmFRN8pZZJ1fbBhdRv2L8hFXl+N4MV+d9qLd5XXhj2384xvtw=="}],"memo":""},"blockNum":"209614"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test8","Path":"gno.land/p/duysygame/test8","Files":[{"Name":"package.gno","Body":"package test8\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddrOwner2Car avl.Tree                                            // std.Address -\u003e *Car\n\taddrDriver2Car avl.Tree                                           // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc Login(driverAddress std.Address) String{\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addrOwner2Car.Get(caller.String())\n\t// if ok {\n\t// \tcar := carI.(*Car)\n\t// \tcar.driverAddress = driverAddress\n\t// \taddrOwner2Car.Set(caller.String(), car)\n\t// \taddrDriver2Car.Set(driverAddress.String(), car)\n\t// } else {\n\t// \tcar := \u0026Car{\n\t// \t\townerAddress:  caller,\n\t// \t\tdriverAddress: driverAddress,\n\t// \t\tname:          \"Car lever 1\",\n\t// \t\tx:             0,\n\t// \t\ty:             0,\n\t// \t}\n\t// \taddrOwner2Car.Set(caller.String(), car)\n\t// \taddrDriver2Car.Set(driverAddress.String(), car)\n\t// }\n  return caller.String()\n}\n\nfunc Up() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y += 1\n}\n\nfunc Down() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y -= 1\n\n}\n\nfunc Left() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x -= 1\n\n}\n\nfunc Right() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x += 1\n\n}\nfunc GetCarByAddress(addr std.Address) *Car {\n\tindex, carI, ok := addrOwner2Car.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn carI.(*Car)\n}\n\nfunc assertIsDrive(caller string) *Car {\n\tindex, carI, ok := addrDriver2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car.(*Car)\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"bnXOzFlMhjsLSMOVe7eZhSezy4P4RfbEqS2QpfVUmC0stm3U3yJy2Mq4X/pomAU8UI4+kHDQWTH0iSOxkBSjjQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209617"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test8","Path":"gno.land/p/duysygame/test8","Files":[{"Name":"package.gno","Body":"package test8\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddrOwner2Car avl.Tree                                            // std.Address -\u003e *Car\n\taddrDriver2Car avl.Tree                                           // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc Login(driverAddress std.Address) string{\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addrOwner2Car.Get(caller.String())\n\t// if ok {\n\t// \tcar := carI.(*Car)\n\t// \tcar.driverAddress = driverAddress\n\t// \taddrOwner2Car.Set(caller.String(), car)\n\t// \taddrDriver2Car.Set(driverAddress.String(), car)\n\t// } else {\n\t// \tcar := \u0026Car{\n\t// \t\townerAddress:  caller,\n\t// \t\tdriverAddress: driverAddress,\n\t// \t\tname:          \"Car lever 1\",\n\t// \t\tx:             0,\n\t// \t\ty:             0,\n\t// \t}\n\t// \taddrOwner2Car.Set(caller.String(), car)\n\t// \taddrDriver2Car.Set(driverAddress.String(), car)\n\t// }\n  return caller.String()\n}\n\nfunc Up() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y += 1\n}\n\nfunc Down() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y -= 1\n\n}\n\nfunc Left() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x -= 1\n\n}\n\nfunc Right() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x += 1\n\n}\nfunc GetCarByAddress(addr std.Address) *Car {\n\tindex, carI, ok := addrOwner2Car.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn carI.(*Car)\n}\n\nfunc assertIsDrive(caller string) *Car {\n\tindex, carI, ok := addrDriver2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car.(*Car)\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"Fr5gL06A3t3Mx67tq6orOdrNeDv/8rKcPlOz8Z7S4VkJ0Pklnkf5osfLK5Hrikn54woW06IlM8BL8g4EjnaRLg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209619"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test8","Path":"gno.land/r/duysygame/test8","Files":[{"Name":"package.gno","Body":"package test8\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddrOwner2Car avl.Tree                                            // std.Address -\u003e *Car\n\taddrDriver2Car avl.Tree                                           // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc Login(driverAddress std.Address) string{\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addrOwner2Car.Get(caller.String())\n\t// if ok {\n\t// \tcar := carI.(*Car)\n\t// \tcar.driverAddress = driverAddress\n\t// \taddrOwner2Car.Set(caller.String(), car)\n\t// \taddrDriver2Car.Set(driverAddress.String(), car)\n\t// } else {\n\t// \tcar := \u0026Car{\n\t// \t\townerAddress:  caller,\n\t// \t\tdriverAddress: driverAddress,\n\t// \t\tname:          \"Car lever 1\",\n\t// \t\tx:             0,\n\t// \t\ty:             0,\n\t// \t}\n\t// \taddrOwner2Car.Set(caller.String(), car)\n\t// \taddrDriver2Car.Set(driverAddress.String(), car)\n\t// }\n  return caller.String()\n}\n\nfunc Up() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y += 1\n}\n\nfunc Down() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y -= 1\n\n}\n\nfunc Left() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x -= 1\n\n}\n\nfunc Right() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x += 1\n\n}\nfunc GetCarByAddress(addr std.Address) *Car {\n\tindex, carI, ok := addrOwner2Car.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn carI.(*Car)\n}\n\nfunc assertIsDrive(caller string) *Car {\n\tindex, carI, ok := addrDriver2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car.(*Car)\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"SVQ0C415sRxQFRXki7MJP8gWXX7TFPpRemGAV4JaEFtpTLOnHCBlPv2ePFpx/MskEEJXDUGjd9a/tSUZpdlKCw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209621"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test8","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"f3t8xPac+ql/Yg5ImBTv61PqoC0mqw0/93TFYcX0ikskuknGPEsScXtTN+RX+n10nvZxGBy1BjPpYeYHrA+HhQ=="}],"memo":""},"blockNum":"209623"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test9","Path":"gno.land/r/duysygame/test9","Files":[{"Name":"package.gno","Body":"package test9\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddrOwner2Car avl.Tree                                            // std.Address -\u003e *Car\n\taddrDriver2Car avl.Tree                                           // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc Login(driverAddress std.Address) string{\n\t// std.AssertOriginCall()\n\t// caller := std.GetCallerAt(2)\n\t// if caller != std.GetOrigCaller() {\n\t// \tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t// }\n\t// index, carI, ok := addrOwner2Car.Get(caller.String())\n\t// if ok {\n\t// \tcar := carI.(*Car)\n\t// \tcar.driverAddress = driverAddress\n\t// \taddrOwner2Car.Set(caller.String(), car)\n\t// \taddrDriver2Car.Set(driverAddress.String(), car)\n\t// } else {\n\t// \tcar := \u0026Car{\n\t// \t\townerAddress:  caller,\n\t// \t\tdriverAddress: driverAddress,\n\t// \t\tname:          \"Car lever 1\",\n\t// \t\tx:             0,\n\t// \t\ty:             0,\n\t// \t}\n\t// \taddrOwner2Car.Set(caller.String(), car)\n\t// \taddrDriver2Car.Set(driverAddress.String(), car)\n\t// }\n  return \"caller.String()\"\n}\n\nfunc Up() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y += 1\n}\n\nfunc Down() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y -= 1\n\n}\n\nfunc Left() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x -= 1\n\n}\n\nfunc Right() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x += 1\n\n}\nfunc GetCarByAddress(addr std.Address) *Car {\n\tindex, carI, ok := addrOwner2Car.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn carI.(*Car)\n}\n\nfunc assertIsDrive(caller string) *Car {\n\tindex, carI, ok := addrDriver2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car.(*Car)\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"paLLjRY4isD24LEJTiUjqJJSntU045v5jH/KYo1gR6RZNKnWesMeqv0AZRenXwLBfd7moNhLG47yXHlGSzbPAQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209625"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test9","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"zYVI8zsfmA0lXnHBG+wNEXclQuPyq+BYYnMYhNGPy64dozc+OmsHXrtRnWXay3WR/q8Bpq2R1XISPjflWHxW9A=="}],"memo":""},"blockNum":"209627"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test9","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"8jKNIFAl6vAJ5fNI8MyXxGlK/qYTNvd+vpltczy2QPgQAjR5FuTIH7YLAyvDll5nO0APd8KSYC3i/rAjicG5OQ=="}],"memo":""},"blockNum":"209629"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test10","Path":"gno.land/r/duysygame/test10","Files":[{"Name":"package.gno","Body":"package test10\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddrOwner2Car avl.Tree                                            // std.Address -\u003e *Car\n\taddrDriver2Car avl.Tree                                           // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc Login(driverAddress std.Address) string{\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\t// index, carI, ok := addrOwner2Car.Get(caller.String())\n\t// if ok {\n\t// \tcar := carI.(*Car)\n\t// \tcar.driverAddress = driverAddress\n\t// \taddrOwner2Car.Set(caller.String(), car)\n\t// \taddrDriver2Car.Set(driverAddress.String(), car)\n\t// } else {\n\t// \tcar := \u0026Car{\n\t// \t\townerAddress:  caller,\n\t// \t\tdriverAddress: driverAddress,\n\t// \t\tname:          \"Car lever 1\",\n\t// \t\tx:             0,\n\t// \t\ty:             0,\n\t// \t}\n\t// \taddrOwner2Car.Set(caller.String(), car)\n\t// \taddrDriver2Car.Set(driverAddress.String(), car)\n\t// }\n  return \"caller.String()\"\n}\n\nfunc Up() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y += 1\n}\n\nfunc Down() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y -= 1\n\n}\n\nfunc Left() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x -= 1\n\n}\n\nfunc Right() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x += 1\n\n}\nfunc GetCarByAddress(addr std.Address) *Car {\n\tindex, carI, ok := addrOwner2Car.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn carI.(*Car)\n}\n\nfunc assertIsDrive(caller string) *Car {\n\tindex, carI, ok := addrDriver2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car.(*Car)\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"X5xHA6utsOpjiGql10Sd+7t2xmXnZ7Weslt2o5VfDkpWVmzWIlhkerCl+dVWfi8fE3LObHzSX2P4QjJR5ELOPA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209631"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test9","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"57JKHZ1gtRKqZYUqS3afuMmqZXpSd40NAKI2KO4+Coc36D1b0hLe0ttaUniLojsTD82RvIeEDJFlmT0eagGZOA=="}],"memo":""},"blockNum":"209633"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test10","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"vIU91gC0dmXJMr8Vdd+wTwTE42QK/Z2TLG9Ch+Wff1tXDSS8mJbdck7RXB30/sBVS97hPVvHo/iS3gXRLf+21w=="}],"memo":""},"blockNum":"209635"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test11","Path":"gno.land/r/duysygame/test11","Files":[{"Name":"package.gno","Body":"package test11\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddrOwner2Car avl.Tree                                            // std.Address -\u003e *Car\n\taddrDriver2Car avl.Tree                                           // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc Login(driverAddress std.Address) string{\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\t// index, carI, ok := addrOwner2Car.Get(caller.String())\n\t// if ok {\n\t// \tcar := carI.(*Car)\n\t// \tcar.driverAddress = driverAddress\n\t// \taddrOwner2Car.Set(caller.String(), car)\n\t// \taddrDriver2Car.Set(driverAddress.String(), car)\n\t// } else {\n\t// \tcar := \u0026Car{\n\t// \t\townerAddress:  caller,\n\t// \t\tdriverAddress: driverAddress,\n\t// \t\tname:          \"Car lever 1\",\n\t// \t\tx:             0,\n\t// \t\ty:             0,\n\t// \t}\n\t// \taddrOwner2Car.Set(caller.String(), car)\n\t// \taddrDriver2Car.Set(driverAddress.String(), car)\n\t// }\n  return caller.String()\n}\n\nfunc Up() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y += 1\n}\n\nfunc Down() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y -= 1\n\n}\n\nfunc Left() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x -= 1\n\n}\n\nfunc Right() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x += 1\n\n}\nfunc GetCarByAddress(addr std.Address) *Car {\n\tindex, carI, ok := addrOwner2Car.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn carI.(*Car)\n}\n\nfunc assertIsDrive(caller string) *Car {\n\tindex, carI, ok := addrDriver2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car.(*Car)\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"8QkVjs4ypbAplQY+ppw9DPtCUy/zQ5d0kAdF3pM+uUJa0SMh2+8c/JZ3S1vLGlzg1niKAjUUiwKl93KC8ED2yw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209637"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test10","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"EvKRl36OIYI1u9wkuPnwmKArlUCaVm8AqdAg0Go+kYUHFjzPpv/p1+g267KDTmOM0Zfsrm04vDVytheduALY1Q=="}],"memo":""},"blockNum":"209639"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test11","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"l4yM9HR1LR51tp3Ez0I5W2osMLDheA1Zz4s7ZxWGk4RVsJbSsu4MflMlvzlnV1298McdbPx06LoImZ03AqMG7g=="}],"memo":""},"blockNum":"209641"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test12","Path":"gno.land/r/duysygame/test12","Files":[{"Name":"package.gno","Body":"package test12\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddrOwner2Car avl.Tree                                            // std.Address -\u003e *Car\n\taddrDriver2Car avl.Tree                                           // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc Login(driverAddress std.Address) string{\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addrOwner2Car.Get(caller.String())\n\t// if ok {\n\t// \tcar := carI.(*Car)\n\t// \tcar.driverAddress = driverAddress\n\t// \taddrOwner2Car.Set(caller.String(), car)\n\t// \taddrDriver2Car.Set(driverAddress.String(), car)\n\t// } else {\n\t// \tcar := \u0026Car{\n\t// \t\townerAddress:  caller,\n\t// \t\tdriverAddress: driverAddress,\n\t// \t\tname:          \"Car lever 1\",\n\t// \t\tx:             0,\n\t// \t\ty:             0,\n\t// \t}\n\t// \taddrOwner2Car.Set(caller.String(), car)\n\t// \taddrDriver2Car.Set(driverAddress.String(), car)\n\t// }\n  return caller.String()\n}\n\nfunc Up() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y += 1\n}\n\nfunc Down() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y -= 1\n\n}\n\nfunc Left() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x -= 1\n\n}\n\nfunc Right() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x += 1\n\n}\nfunc GetCarByAddress(addr std.Address) *Car {\n\tindex, carI, ok := addrOwner2Car.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn carI.(*Car)\n}\n\nfunc assertIsDrive(caller string) *Car {\n\tindex, carI, ok := addrDriver2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car.(*Car)\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"2JATgWb7dQJuVq2SmUrHgrvuBzJ+yFqMmYDXPJB41sMtxawEoKOUwoS/nJVLsvBn6gwxRO5+JjH8i4QMVRxk0g=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209646"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test12","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"pToixHrKkGKiZKx1UyXAa4APAmkyyRcLvehif3UwyLNL0yThUY4BzruK2LKs3Apt7/6S2O/PpPjmpqW2HUA41w=="}],"memo":""},"blockNum":"209648"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test13","Path":"gno.land/p/duysygame/test13","Files":[{"Name":"package.gno","Body":"package test13\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddrOwner2Car avl.Tree                                            // std.Address -\u003e *Car\n\taddrDriver2Car avl.Tree                                           // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc Login(driverAddress std.Address) string{\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addrOwner2Car.Get(\"caller.String()\")\n\t// if ok {\n\t// \tcar := carI.(*Car)\n\t// \tcar.driverAddress = driverAddress\n\t// \taddrOwner2Car.Set(caller.String(), car)\n\t// \taddrDriver2Car.Set(driverAddress.String(), car)\n\t// } else {\n\t// \tcar := \u0026Car{\n\t// \t\townerAddress:  caller,\n\t// \t\tdriverAddress: driverAddress,\n\t// \t\tname:          \"Car lever 1\",\n\t// \t\tx:             0,\n\t// \t\ty:             0,\n\t// \t}\n\t// \taddrOwner2Car.Set(caller.String(), car)\n\t// \taddrDriver2Car.Set(driverAddress.String(), car)\n\t// }\n  return caller.String()\n}\n\nfunc Up() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y += 1\n}\n\nfunc Down() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y -= 1\n\n}\n\nfunc Left() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x -= 1\n\n}\n\nfunc Right() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x += 1\n\n}\nfunc GetCarByAddress(addr std.Address) *Car {\n\tindex, carI, ok := addrOwner2Car.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn carI.(*Car)\n}\n\nfunc assertIsDrive(caller string) *Car {\n\tindex, carI, ok := addrDriver2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car.(*Car)\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"1N0BtO7NvKrWlf8lNJ1kO2PeFuvf1RbjkZ9pWBO4N7NfAD0WqtV1gaoPxnai7MnmCapy8OlvaKeHwoSULdQjnA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209662"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test13","Path":"gno.land/r/duysygame/test13","Files":[{"Name":"package.gno","Body":"package test13\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddrOwner2Car avl.Tree                                            // std.Address -\u003e *Car\n\taddrDriver2Car avl.Tree                                           // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc Login(driverAddress std.Address) string{\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addrOwner2Car.Get(\"caller.String()\")\n\t// if ok {\n\t// \tcar := carI.(*Car)\n\t// \tcar.driverAddress = driverAddress\n\t// \taddrOwner2Car.Set(caller.String(), car)\n\t// \taddrDriver2Car.Set(driverAddress.String(), car)\n\t// } else {\n\t// \tcar := \u0026Car{\n\t// \t\townerAddress:  caller,\n\t// \t\tdriverAddress: driverAddress,\n\t// \t\tname:          \"Car lever 1\",\n\t// \t\tx:             0,\n\t// \t\ty:             0,\n\t// \t}\n\t// \taddrOwner2Car.Set(caller.String(), car)\n\t// \taddrDriver2Car.Set(driverAddress.String(), car)\n\t// }\n  return caller.String()\n}\n\nfunc Up() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y += 1\n}\n\nfunc Down() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y -= 1\n\n}\n\nfunc Left() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x -= 1\n\n}\n\nfunc Right() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x += 1\n\n}\nfunc GetCarByAddress(addr std.Address) *Car {\n\tindex, carI, ok := addrOwner2Car.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn carI.(*Car)\n}\n\nfunc assertIsDrive(caller string) *Car {\n\tindex, carI, ok := addrDriver2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car.(*Car)\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"E7GQ51Wbt+h8qUDMWOoXucIxbHooiuh8Kthf1fqBCXBWJgXy9ZiMyW+dJ5lhoFmY9L+FzwLKfOIrp2uFet1u6g=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209664"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test13","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"hOYpY36OwYtClRihT/RZ5jwwDkTePq8e1LOkVLACRX4WmMLdhNAqM6LTqfexaQz3reAcQf3PwZ1Q6DikvuqOmA=="}],"memo":""},"blockNum":"209666"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test12","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"xUTZsIIGarGnTQ78Hl3Gm2QwIh6ieXR7a6Godu9YhpJ5FITdRx09y0WNGJQ+akX/A4b7yioqTuxDmcr0Iq60KA=="}],"memo":""},"blockNum":"209669"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test14","Path":"gno.land/r/duysygame/test14","Files":[{"Name":"package.gno","Body":"package test14\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddrOwner2Car *avl.Tree                                            // std.Address -\u003e *Car\n\taddrDriver2Car *avl.Tree                                           // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc Login(driverAddress std.Address) string{\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addrOwner2Car.Get(caller.String())\n\t// if ok {\n\t// \tcar := carI.(*Car)\n\t// \tcar.driverAddress = driverAddress\n\t// \taddrOwner2Car.Set(caller.String(), car)\n\t// \taddrDriver2Car.Set(driverAddress.String(), car)\n\t// } else {\n\t// \tcar := \u0026Car{\n\t// \t\townerAddress:  caller,\n\t// \t\tdriverAddress: driverAddress,\n\t// \t\tname:          \"Car lever 1\",\n\t// \t\tx:             0,\n\t// \t\ty:             0,\n\t// \t}\n\t// \taddrOwner2Car.Set(caller.String(), car)\n\t// \taddrDriver2Car.Set(driverAddress.String(), car)\n\t// }\n  return caller.String()\n}\n\nfunc Up() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y += 1\n}\n\nfunc Down() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y -= 1\n\n}\n\nfunc Left() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x -= 1\n\n}\n\nfunc Right() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x += 1\n\n}\nfunc GetCarByAddress(addr std.Address) *Car {\n\tindex, carI, ok := addrOwner2Car.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn carI.(*Car)\n}\n\nfunc assertIsDrive(caller string) *Car {\n\tindex, carI, ok := addrDriver2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car.(*Car)\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"viqJ1KdM/2Y42/H9Dbh9fSr+impavY7ogw5GTXF7Lz0G3OlX8rk9aD9lxOhMMd5V13Wf16ddj8oFD+ANLAwNJw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209672"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test14","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"WwXga1u95Ry68cm2wI4Vwll8mzreZA5naa7Jyv3cKZQY51lJ+sxoZr5B0m/ed6LGRcuFz6+kAizeD2q5CuAQoA=="}],"memo":""},"blockNum":"209674"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test15","Path":"gno.land/r/duysygame/test15","Files":[{"Name":"package.gno","Body":"package test15\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin    std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddrOwner2Car *avl.Tree                                            // std.Address -\u003e *Car\n\taddrDriver2Car *avl.Tree                                           // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc Login(driverAddress std.Address) string{\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addrOwner2Car.Get(caller.String())\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t\taddrOwner2Car.Set(caller.String(), car)\n\t\taddrDriver2Car.Set(driverAddress.String(), car)\n\t} else {\n\t\tcar := \u0026Car{\n\t\t\townerAddress:  caller,\n\t\t\tdriverAddress: driverAddress,\n\t\t\tname:          \"Car lever 1\",\n\t\t\tx:             0,\n\t\t\ty:             0,\n\t\t}\n\t\taddrOwner2Car.Set(caller.String(), car)\n\t\taddrDriver2Car.Set(driverAddress.String(), car)\n\t}\n  return caller.String()\n}\n\nfunc Up() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y += 1\n}\n\nfunc Down() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y -= 1\n\n}\n\nfunc Left() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x -= 1\n\n}\n\nfunc Right() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x += 1\n\n}\nfunc GetCarByAddress(addr std.Address) *Car {\n\tindex, carI, ok := addrOwner2Car.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn carI.(*Car)\n}\n\nfunc assertIsDrive(caller string) *Car {\n\tindex, carI, ok := addrDriver2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car.(*Car)\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"nIe5zRmS2JFeLUuZdrQmpZqoKcD117Vd/DyA9qIiny5NS8cEBxfQz+Q7QjzHX3WWMYW105LowjaidqW+J1d9Ng=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209676"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test15","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"KV6BMQhs2Asrzic5ULr/7JnG0wdIeHcMofwBB5g/TJdaGMVnQA0qCFGp6O5gTd2J8fUg2zPCAG/WfbEF5y5qgg=="}],"memo":""},"blockNum":"209678"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test16","Path":"gno.land/r/duysygame/test16","Files":[{"Name":"package.gno","Body":"package test16\n\nimport (\n\t\"gno.land/p/demo/avl\"\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nvar (\n\tadmin          std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddrOwner2Car  *avl.Tree                                                // std.Address -\u003e *Car\n\taddrDriver2Car *avl.Tree                                                // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc Login(driverAddress std.Address) *Car {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addrOwner2Car.Get(caller.String())\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t\taddrOwner2Car.Set(caller.String(), car)\n\t\taddrDriver2Car.Set(driverAddress.String(), car)\n\t\treturn car.(*Car)\n\t}\n\tcar := \u0026Car{\n\t\townerAddress:  caller,\n\t\tdriverAddress: driverAddress,\n\t\tname:          \"Car lever 1\",\n\t\tx:             0,\n\t\ty:             0,\n\t}\n\taddrOwner2Car.Set(caller.String(), car)\n\taddrDriver2Car.Set(driverAddress.String(), car)\n\treturn car.(*Car)\n\n}\n\nfunc Up() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y += 1\n}\n\nfunc Down() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y -= 1\n\n}\n\nfunc Left() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x -= 1\n\n}\n\nfunc Right() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x += 1\n\n}\nfunc GetCarByAddress(addr std.Address) *Car {\n\tindex, carI, ok := addrOwner2Car.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn carI.(*Car)\n}\n\nfunc assertIsDrive(caller string) *Car {\n\tindex, carI, ok := addrDriver2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car.(*Car)\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"TijSvdac1cQVSWILu5XeF2RpHHQknkC+aMw5Ltloa1wb8/jkOZniuHg4+Ez87/gaQiHBWuR3ZFyZiizMNvABDA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209681"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test16","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"EvBSrW0ZX5peEeg0rW0JB9ScsXMXhBaT9sykyCow2flWYVCnZeV+2BayMZmeb2Gv8dsbzT1fw4/UEzJ/wrbDRw=="}],"memo":""},"blockNum":"209683"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test16","func":"Up","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"eamWKzRTEreRhQfQHPpZKSDJkgRrX3RWcLRL1gx+v1t0wgFgYkvfEgJOcLYTC0i+AdAIVLs+6DJiVCSQs+GSew=="}],"memo":""},"blockNum":"209686"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test17","Path":"gno.land/p/duysygame/test17","Files":[{"Name":"package.gno","Body":"package test17\n\nimport (\n\t\"gno.land/p/demo/avl\"\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nvar (\n\tadmin          std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddrOwner2Car  *avl.Tree                                                // std.Address -\u003e *Car\n\taddrDriver2Car *avl.Tree                                                // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc Login(driverAddress std.Address) *Car {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addrOwner2Car.Get(caller.String())\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t\taddrOwner2Car, _ = addrOwner2Car.Set(caller.String(), car)\n\t\taddrDriver2Car, _ = addrDriver2Car.Set(driverAddress.String(), car)\n\t\treturn car.(*Car)\n\t}\n\tcar := \u0026Car{\n\t\townerAddress:  caller,\n\t\tdriverAddress: driverAddress,\n\t\tname:          \"Car lever 1\",\n\t\tx:             0,\n\t\ty:             0,\n\t}\n\taddrOwner2Car, _ = addrOwner2Car.Set(caller.String(), car)\n\taddrDriver2Car, _ = addrDriver2Car.Set(driverAddress.String(), car)\n\treturn car.(*Car)\n\n}\n\nfunc Up() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y += 1\n}\n\nfunc Down() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y -= 1\n\n}\n\nfunc Left() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x -= 1\n\n}\n\nfunc Right() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x += 1\n\n}\nfunc GetCarByAddress(addr std.Address) *Car {\n\tindex, carI, ok := addrOwner2Car.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn carI.(*Car)\n}\n\nfunc assertIsDrive(caller string) *Car {\n\tindex, carI, ok := addrDriver2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car.(*Car)\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"wEF5vM0scHV3eg7CbB1esdO27B65wTZOWHVvqjEgSR9HlzuFbqSLQwEyopUoBsPCJpob3Z1S4Zufy4Sm/FW6Gw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209693"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test17","Path":"gno.land/r/duysygame/test17","Files":[{"Name":"package.gno","Body":"package test17\n\nimport (\n\t\"gno.land/p/demo/avl\"\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nvar (\n\tadmin          std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddrOwner2Car  *avl.Tree                                                // std.Address -\u003e *Car\n\taddrDriver2Car *avl.Tree                                                // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc Login(driverAddress std.Address) *Car {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addrOwner2Car.Get(caller.String())\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t\taddrOwner2Car, _ = addrOwner2Car.Set(caller.String(), car)\n\t\taddrDriver2Car, _ = addrDriver2Car.Set(driverAddress.String(), car)\n\t\treturn car.(*Car)\n\t}\n\tcar := \u0026Car{\n\t\townerAddress:  caller,\n\t\tdriverAddress: driverAddress,\n\t\tname:          \"Car lever 1\",\n\t\tx:             0,\n\t\ty:             0,\n\t}\n\taddrOwner2Car, _ = addrOwner2Car.Set(caller.String(), car)\n\taddrDriver2Car, _ = addrDriver2Car.Set(driverAddress.String(), car)\n\treturn car.(*Car)\n\n}\n\nfunc Up() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y += 1\n}\n\nfunc Down() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y -= 1\n\n}\n\nfunc Left() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x -= 1\n\n}\n\nfunc Right() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x += 1\n\n}\nfunc GetCarByAddress(addr std.Address) *Car {\n\tindex, carI, ok := addrOwner2Car.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn carI.(*Car)\n}\n\nfunc assertIsDrive(caller string) *Car {\n\tindex, carI, ok := addrDriver2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car.(*Car)\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"nN+r//WeVR/oYr3r3g5KivrN+rbAQsc+RkJvUylgeU0trI4JLbxyG6tUerXHtAI4+P0KpZkvxxWpgNOQfeGUGg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209695"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test17","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"HKiXF18a9UU/CI8+8QjvQPf+W0b6H5SV9OGgk3n175kI6nwsVUeDmvQHWwdV2w5jUDHa90xK1caGcHs78F5PYQ=="}],"memo":""},"blockNum":"209697"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test17","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"lSon4K62IHTX9/GwfhQwPyVcUw4i/jSh3kuFyZe/48ooUVe8iKzMGXTL9LLR6PPfv/ENU370qZrnOGWeGGadEw=="}],"memo":""},"blockNum":"209701"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test17","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"0ePLkS/Q42hvL/DCT9sonb0C5AI5E9Ri7t/vx5KN5h1MIX5DEuVHoWFuH3CFpvE+hUCWkj6v9H7qFBplNmUo+w=="}],"memo":""},"blockNum":"209705"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test17","func":"Up","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"v2l9lUos+fZ4JHRWm8FgTINUgnmgQOnlzOYKQ0KsWyoSNHRhg/GGey8QqmwsZDBfLD7dY4R+0ilFJKmjmVEKxQ=="}],"memo":""},"blockNum":"209707"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test18","Path":"gno.land/r/duysygame/test18","Files":[{"Name":"package.gno","Body":"package test18\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin          std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddrOwner2Car  *avl.Tree                                                // std.Address -\u003e *Car\n\taddrDriver2Car *avl.Tree                                                // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc (u Car) Name() string { return u.name }\nfunc (u Car) X() int       { return u.x }\nfunc (u Car) Y() int       { return u.y }\n\nfunc Login(driverAddress std.Address) *Car {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addrOwner2Car.Get(caller.String())\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t\taddrOwner2Car, _ = addrOwner2Car.Set(caller.String(), car)\n\t\taddrDriver2Car, _ = addrDriver2Car.Set(driverAddress.String(), car)\n\t\treturn car.(*Car)\n\t}\n\tcar := \u0026Car{\n\t\townerAddress:  caller,\n\t\tdriverAddress: driverAddress,\n\t\tname:          \"Car lever 1\",\n\t\tx:             0,\n\t\ty:             0,\n\t}\n\taddrOwner2Car, _ = addrOwner2Car.Set(caller.String(), car)\n\taddrDriver2Car, _ = addrDriver2Car.Set(driverAddress.String(), car)\n\treturn car.(*Car)\n\n}\n\nfunc Up() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y += 1\n}\n\nfunc Down() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y -= 1\n\n}\n\nfunc Left() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x -= 1\n\n}\n\nfunc Right() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x += 1\n\n}\nfunc GetCarByAddress(addr std.Address) *Car {\n\tindex, carI, ok := addrOwner2Car.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn carI.(*Car)\n}\n\nfunc assertIsDrive(caller string) *Car {\n\tindex, carI, ok := addrDriver2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car.(*Car)\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"Q52LRxaVutu+6BKLSW7hLfg/WPT3GPUWwahh5vpdg05QXuSEOjO4F/S5Z2TKtfUVyjHCVTcSkdtfJgzB3gS4Nw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209719"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test18","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"RxXdvJC43ANoYz1O00OFLzJknTqSFXjrXbmVhKxGL58lUcOUhC5v1mvrc2IQNESvcIPElO9Ze+j+vVe/7I8c+A=="}],"memo":""},"blockNum":"209722"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test18","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"ZD5DPKaO7d1uDapYHRSTminhRBWQN7Y9APkhkIKyMX4S4135HRFkY3CMThzJijOGs+lTeNzsDDvODiQk5z0/8w=="}],"memo":""},"blockNum":"209724"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test18","Path":"gno.land/r/duysygame/test18","Files":[{"Name":"package.gno","Body":"package test18\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin          std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddrOwner2Car  *avl.Tree                                                // std.Address -\u003e *Car\n\taddrDriver2Car *avl.Tree                                                // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc GetName(addr std.Address) string {\n\t  index, carI, ok := addrOwner2Car.Get(addr.String())\n    if !ok{\n      return nil\n    }\n    car := carI.(*Car)\n   return car.name \n}\nfunc GetX(addr std.Address) int       {\n  index, carI, ok := addrOwner2Car.Get(addr.String())\n  if !ok{\n    return nil\n  }\n  car := carI.(*Car)\n  return car.x \n}\nfunc GetY(addr std.Address) int       { \n  index, carI, ok := addrOwner2Car.Get(addr.String())\n  if !ok{\n    return nil\n  }\n  car := carI.(*Car)\n  return car.y \n}\n\nfunc Login(driverAddress std.Address) *Car {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addrOwner2Car.Get(caller.String())\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t\taddrOwner2Car, _ = addrOwner2Car.Set(caller.String(), car)\n\t\taddrDriver2Car, _ = addrDriver2Car.Set(driverAddress.String(), car)\n\t\treturn car.(*Car)\n\t}\n\tcar := \u0026Car{\n\t\townerAddress:  caller,\n\t\tdriverAddress: driverAddress,\n\t\tname:          \"Car lever 1\",\n\t\tx:             0,\n\t\ty:             0,\n\t}\n\taddrOwner2Car, _ = addrOwner2Car.Set(caller.String(), car)\n\taddrDriver2Car, _ = addrDriver2Car.Set(driverAddress.String(), car)\n\treturn car.(*Car)\n\n}\n\nfunc Up() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y += 1\n}\n\nfunc Down() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y -= 1\n\n}\n\nfunc Left() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x -= 1\n\n}\n\nfunc Right() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x += 1\n\n}\nfunc GetCarByAddress(addr std.Address) *Car {\n\tindex, carI, ok := addrOwner2Car.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn carI.(*Car)\n}\n\nfunc assertIsDrive(caller string) *Car {\n\tindex, carI, ok := addrDriver2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car.(*Car)\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"hUDI+ZubIRRJ11qL/hN0yssbSTLVokuRqqvfkf0PYCIwhTYlCtbszFLT5EZlhsP7uymfbwPz5CaxiJYA9VZ48Q=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209739"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test19","Path":"gno.land/r/duysygame/test19","Files":[{"Name":"package.gno","Body":"package test19\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin          std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddrOwner2Car  *avl.Tree                                                // std.Address -\u003e *Car\n\taddrDriver2Car *avl.Tree                                                // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc GetName(addr std.Address) string {\n\t  index, carI, ok := addrOwner2Car.Get(addr.String())\n    if !ok{\n      return nil\n    }\n    car := carI.(*Car)\n   return car.name \n}\nfunc GetX(addr std.Address) int       {\n  index, carI, ok := addrOwner2Car.Get(addr.String())\n  if !ok{\n    return nil\n  }\n  car := carI.(*Car)\n  return car.x \n}\nfunc GetY(addr std.Address) int       { \n  index, carI, ok := addrOwner2Car.Get(addr.String())\n  if !ok{\n    return nil\n  }\n  car := carI.(*Car)\n  return car.y \n}\n\nfunc Login(driverAddress std.Address) *Car {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addrOwner2Car.Get(caller.String())\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t\taddrOwner2Car, _ = addrOwner2Car.Set(caller.String(), car)\n\t\taddrDriver2Car, _ = addrDriver2Car.Set(driverAddress.String(), car)\n\t\treturn car.(*Car)\n\t}\n\tcar := \u0026Car{\n\t\townerAddress:  caller,\n\t\tdriverAddress: driverAddress,\n\t\tname:          \"Car lever 1\",\n\t\tx:             0,\n\t\ty:             0,\n\t}\n\taddrOwner2Car, _ = addrOwner2Car.Set(caller.String(), car)\n\taddrDriver2Car, _ = addrDriver2Car.Set(driverAddress.String(), car)\n\treturn car.(*Car)\n\n}\n\nfunc Up() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y += 1\n}\n\nfunc Down() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y -= 1\n\n}\n\nfunc Left() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x -= 1\n\n}\n\nfunc Right() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x += 1\n\n}\nfunc GetCarByAddress(addr std.Address) *Car {\n\tindex, carI, ok := addrOwner2Car.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn carI.(*Car)\n}\n\nfunc assertIsDrive(caller string) *Car {\n\tindex, carI, ok := addrDriver2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car.(*Car)\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"kjSA1WkuCHnCXxhhhgRerk9+vGQTLJCeZDJjLIPvSqQVv+PNZVvMFoG9jvVFOkS3cbSjonpZTXvLfKDygT86SQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209741"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test19","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"cLbBy3EHm8NUyyE78CyvMPk3EHjVoflPxYWHK/EVeDAV4mr727zCpWjxIbU2HP+f8ZhxVuYXFAmbTOix3poDvg=="}],"memo":""},"blockNum":"209743"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test19","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"yM1NqKS+izlZxFhLFbkNzYNdK1RwT6SxE+K/1Xkoukx74mqh9A+E5xO1Esy2sKQtEjsrPT3Hi8UtvOYVoampOQ=="}],"memo":""},"blockNum":"209745"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test19","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"uAqhJMIn6Z4Hawvi2GUiWsR5m60tImwagNwpPX+LFEAlsqdCwLOoNdZCphtxXgSN4dBaktoELW3NDpovtYeUAA=="}],"memo":""},"blockNum":"209747"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test19","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"dyanBoBSwzThSe1mtKO+4mjwgCs5cBhal1OFyxPYvpViwX5hNLXCnoTL1PgwVa0os0M5oLuS5JnCu+NJDzQf+Q=="}],"memo":""},"blockNum":"209749"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test19","func":"Up","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"WSPchjZDacjLw2MHz45yliI969d7HF8CwCq/AB1bsz4iDSA73lqAECp29PPp+uaF/xUtkKLJ8ArQygavmPJeog=="}],"memo":""},"blockNum":"209751"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test19","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"V8EkZcs1gDebG6vK27upDa3qFxfU8Ofzx4ktNolyKiZJsNxRm0lWvXMgBjwKTNsw2h4IiLPM4+EKFpCaSEmCXw=="}],"memo":""},"blockNum":"209758"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test19","func":"Up","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"QsjakTHHpEillrv/rWosBfrBSOEfNa7lB9f7EjAnkC8bIQNQWP/54zeHV0HCJhEwnThH4fXykEYO1gayNAXhFg=="}],"memo":""},"blockNum":"209760"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test19","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"ufh4sDHDoRekC4bDgI+DlvtVGtzbX/xJTMbf78TIn+5ZY+QlQlYvntkS2j998eNntYG76qZH9fiqC7NHvEm+gw=="}],"memo":""},"blockNum":"209764"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test19","func":"Up","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"mv2VZys1WZDHkWS6HJ3fuFic8mWl8NjQnI58x8RfE/cJLNrqBlCMQJihgswa6RErQ5O9co9sMQ5FEWsrldHCPQ=="}],"memo":""},"blockNum":"209766"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test19","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"CTaCDrLRBB4MMrfhgCfSkl6KKnJ1r2nqI+B1FuPOki8w+eX37ITBrtWS/XTzM423dCwMoJXbsE1xwdGqGw/MPQ=="}],"memo":""},"blockNum":"209768"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test19","func":"Up","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"+7BxsgQ4Yt0ug5tjKTREcAY5iyah/Rij1J730kYpeh5oouNGJiZIFf93N4OV+Qq49vRcpb+bxXWDyepjeGt0XA=="}],"memo":""},"blockNum":"209770"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test19","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"hNa8PnmZHCPsost+Lrphy5j8fjSWz3DpLlcasHGtxctv0+zNOIgaki3WUjKoVk7zq+8RpQkBo8cAksUnFtcgoA=="}],"memo":""},"blockNum":"209772"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test19","func":"Up","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"vpGJzr0X02suYKQfTY/yXtr5LOI8jj+xfCGe5XkRqZt3GWC88F0s/MfktxAzC4TZlbvQJTfPD2jsB9+CyubaPw=="}],"memo":""},"blockNum":"209774"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test19","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"zEAtNk9IHD8ccREcjjzn5xM1cMZUMgpIkaA1ytiXBoMD9NXP8Tjo4XdxaLHynJBsbrVgpcAjXolKdRGelbxJyw=="}],"memo":""},"blockNum":"209776"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test19","func":"Up","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"jnxX2Fdfghj9vvUIYj+ZOrEG/Ttef45ccFRjGIJAD0Uzl5ZsS7cXtVVvKGoNQAn2jo/hHRWL3cV6Wb0tENrRkQ=="}],"memo":""},"blockNum":"209778"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test19","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"zLX0kIiDM0edz7qtpGSfoEVktxvnOORvDHFBsi9i8W0YChQ12NXB7/kbb2WbQjiqmOKRjz1yQwsxLsmx4yLUpA=="}],"memo":""},"blockNum":"209780"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test19","func":"Up","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"/wTS5iH2DFXXilhoACqoU38AsrycztJnf53Lqiff8Ucpuy3JOEB3MPqgjo4svXfXWlKYPgH94LHh9ZQ6ye+bsQ=="}],"memo":""},"blockNum":"209782"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test19","func":"Right","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"ZPzROG8Yf7XyzEf/+szC4szjjqqG066sMoVE6+iWOJBFakFbIg9KMcRs6vl3QGsanW4Aiw/XMmEu2rLncZIGTQ=="}],"memo":""},"blockNum":"209807"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test19","func":"Right","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"dGeiem5BqsDTqvp8lwaAo35AO8B5icqFyZfE/VcqHXBJb4zdz4Am8oduhBP24C5ZijKH058yS+P2fGjH7soumw=="}],"memo":""},"blockNum":"209809"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test19","func":"Right","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"17quovC7eVqc08dNZPJDSqaSzG/6DUxEK/6PUwajPCte7i4V37LNEe9cGuFh6ijgIZ0FO96hbXJ28eNkfbLuTA=="}],"memo":""},"blockNum":"209811"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test19","func":"Right","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"d9U/w2hsU/U2KN++hnsjPymFpNjZHD8aP8NIBCO86IQyVpxxhezDcgdgZdhQZsmUFhWuMTNAuJJvsBJuFmjo4g=="}],"memo":""},"blockNum":"209813"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test20","Path":"gno.land/r/duysygame/test20","Files":[{"Name":"package.gno","Body":"package test20\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin          std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddrOwner2Car  *avl.Tree                                                // std.Address -\u003e *Car\n\taddrDriver2Car *avl.Tree                                                // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc GetName(addr std.Address) string {\n\t  index, carI, ok := addrOwner2Car.Get(addr.String())\n    if !ok{\n      return nil\n    }\n    car := carI.(*Car)\n   return car.name \n}\nfunc GetX(addr std.Address) int       {\n  index, carI, ok := addrOwner2Car.Get(addr.String())\n  if !ok{\n    return nil\n  }\n  car := carI.(*Car)\n  return car.x \n}\nfunc GetY(addr std.Address) int       { \n  index, carI, ok := addrOwner2Car.Get(addr.String())\n  if !ok{\n    return nil\n  }\n  car := carI.(*Car)\n  return car.y \n}\n\nfunc Login(driverAddress std.Address) *Car {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addrOwner2Car.Get(caller.String())\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t\taddrOwner2Car, _ = addrOwner2Car.Set(caller.String(), car)\n\t\taddrDriver2Car, _ = addrDriver2Car.Set(driverAddress.String(), car)\n\t\treturn car.(*Car)\n\t}\n\tcar := \u0026Car{\n\t\townerAddress:  caller,\n\t\tdriverAddress: driverAddress,\n\t\tname:          \"Car lever 1\",\n\t\tx:             0,\n\t\ty:             0,\n\t}\n\taddrOwner2Car, _ = addrOwner2Car.Set(caller.String(), car)\n\taddrDriver2Car, _ = addrDriver2Car.Set(driverAddress.String(), car)\n\treturn car.(*Car)\n\n}\n\nfunc Up() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y += 10\n}\n\nfunc Down() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y -= 10\n\n}\n\nfunc Left() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x -= 10\n\n}\n\nfunc Right() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x += 10\n\n}\nfunc GetCarByAddress(addr std.Address) *Car {\n\tindex, carI, ok := addrOwner2Car.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn carI.(*Car)\n}\n\nfunc assertIsDrive(caller string) *Car {\n\tindex, carI, ok := addrDriver2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car.(*Car)\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"3n/h27GtRKSStiYb/6tfV0aq0XUCIHts5RdiukmRmNRLR3goVqpzdwPqA7PflSxhoam1f4vGC1VR/cDKHnnE9w=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209815"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test20","func":"Right","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"yJoMR9U/MbQsGR/c6+QUUi4YvvJ3HPXC+i+WxLDAcRcvnkVe0idioA1tN3lmektTP5kJPtR2m4+lph76axR+Nw=="}],"memo":""},"blockNum":"209817"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test20","Path":"gno.land/r/duysygame/test20","Files":[{"Name":"package.gno","Body":"package test20\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin          std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddrOwner2Car  *avl.Tree                                                // std.Address -\u003e *Car\n\taddrDriver2Car *avl.Tree                                                // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc GetName(addr std.Address) string {\n\t  index, carI, ok := addrOwner2Car.Get(addr.String())\n    if !ok{\n      return nil\n    }\n    car := carI.(*Car)\n   return car.name \n}\nfunc GetX(addr std.Address) int       {\n  index, carI, ok := addrOwner2Car.Get(addr.String())\n  if !ok{\n    return nil\n  }\n  car := carI.(*Car)\n  return car.x \n}\nfunc GetY(addr std.Address) int       { \n  index, carI, ok := addrOwner2Car.Get(addr.String())\n  if !ok{\n    return nil\n  }\n  car := carI.(*Car)\n  return car.y \n}\n\nfunc Login(driverAddress std.Address) *Car {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addrOwner2Car.Get(caller.String())\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t\taddrOwner2Car, _ = addrOwner2Car.Set(caller.String(), car)\n\t\taddrDriver2Car, _ = addrDriver2Car.Set(driverAddress.String(), car)\n\t\treturn car.(*Car)\n\t}\n\tcar := \u0026Car{\n\t\townerAddress:  caller,\n\t\tdriverAddress: driverAddress,\n\t\tname:          \"Car lever 1\",\n\t\tx:             0,\n\t\ty:             0,\n\t}\n\taddrOwner2Car, _ = addrOwner2Car.Set(caller.String(), car)\n\taddrDriver2Car, _ = addrDriver2Car.Set(driverAddress.String(), car)\n\treturn car.(*Car)\n\n}\n\nfunc Up() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y += 10\n}\n\nfunc Down() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y -= 10\n\n}\n\nfunc Left() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x -= 10\n\n}\n\nfunc Right() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x += 10\n\n}\nfunc GetCarByAddress(addr std.Address) *Car {\n\tindex, carI, ok := addrOwner2Car.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn carI.(*Car)\n}\n\nfunc assertIsDrive(caller string) *Car {\n\tindex, carI, ok := addrDriver2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car.(*Car)\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"gFYtNWNCDtOksKtHRVTb2tGBHP8zezCLR+cY6p2UfncgAqYIZor0jGGIoxCaN3lYpnLNOEvoB5P+olz1RQHYsw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209819"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","package":{"Name":"test21","Path":"gno.land/r/duysygame/test21","Files":[{"Name":"package.gno","Body":"package test21\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tadmin          std.Address = \"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3\" // TODO: helper to change admin\n\taddrOwner2Car  *avl.Tree                                                // std.Address -\u003e *Car\n\taddrDriver2Car *avl.Tree                                                // std.Address -\u003e *Car\n)\n\ntype Car struct {\n\townerAddress  std.Address\n\tdriverAddress std.Address\n\tname          string\n\tx             int\n\ty             int\n}\n\nfunc GetName(addr std.Address) string {\n\t  index, carI, ok := addrOwner2Car.Get(addr.String())\n    if !ok{\n      return nil\n    }\n    car := carI.(*Car)\n   return car.name \n}\nfunc GetX(addr std.Address) int       {\n  index, carI, ok := addrOwner2Car.Get(addr.String())\n  if !ok{\n    return nil\n  }\n  car := carI.(*Car)\n  return car.x \n}\nfunc GetY(addr std.Address) int       { \n  index, carI, ok := addrOwner2Car.Get(addr.String())\n  if !ok{\n    return nil\n  }\n  car := carI.(*Car)\n  return car.y \n}\n\nfunc Login(driverAddress std.Address) *Car {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tindex, carI, ok := addrOwner2Car.Get(caller.String())\n\tif ok {\n\t\tcar := carI.(*Car)\n\t\tcar.driverAddress = driverAddress\n\t\taddrOwner2Car, _ = addrOwner2Car.Set(caller.String(), car)\n\t\taddrDriver2Car, _ = addrDriver2Car.Set(driverAddress.String(), car)\n\t\treturn car.(*Car)\n\t}\n\tcar := \u0026Car{\n\t\townerAddress:  caller,\n\t\tdriverAddress: driverAddress,\n\t\tname:          \"Car lever 1\",\n\t\tx:             100,\n\t\ty:             100,\n\t}\n\taddrOwner2Car, _ = addrOwner2Car.Set(caller.String(), car)\n\taddrDriver2Car, _ = addrDriver2Car.Set(driverAddress.String(), car)\n\treturn car.(*Car)\n\n}\n\nfunc Up() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y += 10\n}\n\nfunc Down() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.y -= 10\n\n}\n\nfunc Left() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x -= 10\n\n}\n\nfunc Right() {\n\tstd.AssertOriginCall()\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tcar := assertIsDrive(caller.String()) // This line is changed\n\tcar.x += 10\n\n}\nfunc GetCarByAddress(addr std.Address) *Car {\n\tindex, carI, ok := addrOwner2Car.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn carI.(*Car)\n}\n\nfunc assertIsDrive(caller string) *Car {\n\tindex, carI, ok := addrDriver2Car.Get(caller)\n\tif !ok {\n\t\tpanic(\"Please login to create new car, car not found !\")\n\t}\n\tcar := carI.(*Car)\n\tif caller != car.driverAddress.String() {\n\t\tpanic(\"drive not able access\")\n\t}\n\treturn car.(*Car)\n}\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"204XgsiyPMR5g5RN0hVP7K1f467iOT2fRHRmir/zlsZWmIzZdp7TcykeWbqerYJ5nBJbNmTFNQ9VDsKMSnkVuw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"209821"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test21","func":"Down","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"VGU5NjM+9wDRjYyXD1QVwk9ha3SfGw0dJnpvPphUZUoCJ6yf3mkNfC5a3K9JY7mKzKsTaIzagtz4IKs0XYsiew=="}],"memo":""},"blockNum":"209823"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test21","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"Pipckaakhi6iCiATllco8USZRtEmXCXCPyIkkWyMV8xU7jpHC87TI5UmW4SOzVjZRgZODgDkWhY2blOZm8y55Q=="}],"memo":""},"blockNum":"209825"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test21","func":"Up","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"P7im1suDE17KEinu7t53jH+KF79VIgIBMncsbVKmLZQGiwfmL2nZ5MfHKH19xLP1c9Fkx5FpPZtXuKDUFU97Xg=="}],"memo":""},"blockNum":"209827"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test21","func":"Login","args":["g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"WlNnhfj75UcuxvEqYoUBBFGjWyzsRuFj8zXvBRnX1z0si4xYL5ixsNzNSxPN02dVkd71mRAdHt21J0V/8iEUkg=="}],"memo":""},"blockNum":"209829"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test21","func":"Up","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"Ued77BngJX2O3Tu8d6U6XheVNs4+GIBPS74OKAdK2Gk3lF3f/wKdzmNmnmmxQuRCr4c0pO17O6fcidu25thk6A=="}],"memo":""},"blockNum":"209831"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test21","func":"Right","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"aYHU62v0jIQZItV1UYs+n4BWxTMw2aOqtS12G1t75rEY3G5HTUcNtrW7hk5+P7/C8b2lufuaYhXHswuRLkkgEA=="}],"memo":""},"blockNum":"209833"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test21","func":"Right","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"2lm1vu3E1sCGo8e9VSzlguPSAIsi4s4uh8RDsXrWQnhfxG/VkwQoJXY28uHTTMa9OputGc2pZ9V5Njy7yEQxpQ=="}],"memo":""},"blockNum":"209835"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test21","func":"Right","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"483cyj6iDnWPYMLSCyrpKy7ev6Ousum6yaKc68bTVbMYmgnkHuvjaWZSDQGkL4goRg0KJIU0hcUBtX9UiLmLeQ=="}],"memo":""},"blockNum":"209837"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test21","func":"Right","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"dhzD0XWRgpgzmqCoJmbDg00ekM703ADgq59agnskmbtV0Xv4XSc7iBgh5FlvXCqp3QThfzD+Wm6n+b3EuPzetA=="}],"memo":""},"blockNum":"209839"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test21","func":"Right","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"ONU7l79KYh71p5bxWbUlRQD2w3ksmvvZGejFz2zsw3AiegcNpvmDm8wmah59h9UdS1RBQj/xd/KnV+ouQcU49Q=="}],"memo":""},"blockNum":"209841"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test21","func":"Right","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"VnIB6dHYSkRSFKCtkv99WEL0okqq0fLeVjr0id7nVCsoUpJxeV8wCRVW0kiN8OQSdHWam+mUrHrFP/bQCgdt6w=="}],"memo":""},"blockNum":"209843"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test21","func":"Right","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"DxU6FGQwRXO2pm93udxyxjWzZC5twXrUzc3rgGKmxv9Klarzteom8TUMWMzAAoAHkMPtzIM+ST/8VNbsrCOUrg=="}],"memo":""},"blockNum":"209846"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test21","func":"Right","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"KacTGxS7sA8vJ5dJ4mbeozONlf3s5RMbIEU6iMEBpN9Znu4IUpmrRpBrgg7cLdsYFr9iILSMMAK1sDPzQQ4CGg=="}],"memo":""},"blockNum":"209848"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test21","func":"Right","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"9xyr3G8Lg8UMVxn5S9oIRiwp2tFyXb5yP/NtqeU+B8FIZQdvMH+QWD4in2lvvp8fmKr+o+PH9eotjAl61fgKTA=="}],"memo":""},"blockNum":"209850"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test21","func":"Right","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"sCHhnv50iPH7PBogAr6tZRxGwDb638KbCsfCbFbcC1hm+YWPLYTxpUznEhS2+ht2HWrsuunLfP95OCO/+abS+Q=="}],"memo":""},"blockNum":"209852"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test21","func":"Right","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"nGKLo5gS6OGTiMkGiEUTp/oJl+kgOHrA6tYZHlHkaidfq5WuqjH/sISv+DLdUp/BcGh1dErg63CFQ+9hN9UDjg=="}],"memo":""},"blockNum":"209854"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test21","func":"Right","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"OiKVeYnFY1/DSphu0EsfHE4ekP9NOXVH3wc+rei3p05r+wYXrgFdpGTjdcNPnXclVwyGhc2/cB4KPjPf/uUPIQ=="}],"memo":""},"blockNum":"209856"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test21","func":"Down","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"VyJqIJ3PZvor6U1NrOwzZZL16SIQHK+V7adUVTqwPKYBB0gWrxQqsDQdPqX4RWNoXgpvAr67vhs1auoM1Gsq+A=="}],"memo":""},"blockNum":"209858"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ur2ja8j0g2a76s2jsqp8qh9y0g6mvkr24f34a3","send":"","pkg_path":"gno.land/r/duysygame/test21","func":"Down","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"1000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+2XC6v7vXbtzA1sXvntmIIeJsklTVAi7ftBL2DUOAMS"},"signature":"ljHAUk5QXJPM4pRMZMhYoM09QWymWf6maQEZFMU8fehhjHi0W2CADCo90NJxC9vxbchIGW8OYj6R+qZnQ9sUFg=="}],"memo":""},"blockNum":"209860"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1kcwsplxyxz5pruc5hy9whwjxwwh35s4v37yqrr","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"iHCU6IAtI/bUhnqKTJfQpd15CbH5GJWn5p0OcO9xrb8owrP68uhbv0Ju6yjFM7h5jxc4v9zn4UB6s1EaoF6rQQ=="}],"memo":""},"blockNum":"210471"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcwsplxyxz5pruc5hy9whwjxwwh35s4v37yqrr","package":{"Name":"panda","Path":"gno.land/p/demo/panda","Files":[{"Name":"GRC20.gno","Body":"package Panda\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tPanda  *grc20.AdminToken\r\n\tadmin std.Address = \"g1kcwsplxyxz5pruc5hy9whwjxwwh35s4v37yqrr\"\r\n)\r\n\r\nfunc init() {\r\n\tPanda = grc20.NewAdminToken(\"Pandainu\", \"PND\", 6)\r\n\tPanda.Mint(admin, 694200000000) // @administrator\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn Panda.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := Panda.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := Panda.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tPanda.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tPanda.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tPanda.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tPanda.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tPanda.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn Panda.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := Panda.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvEx5lbGHKpt2h7AX4cH2a6x1tiHZqoOBbWliLaePEFz"},"signature":"dRdrLWiQZLsQ8IUYThU+EstS7JkWAywiG+EMUMNziGlEeqUe/Jq4mHupSm9U7zbOmy4+CcjCKnG1M/tLaSoftg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"210483"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcwsplxyxz5pruc5hy9whwjxwwh35s4v37yqrr","package":{"Name":"panda","Path":"gno.land/p/demo/panda","Files":[{"Name":"GRC20.gno","Body":"package Panda\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tPanda  *grc20.AdminToken\r\n\tadmin std.Address = \"g1kcwsplxyxz5pruc5hy9whwjxwwh35s4v37yqrr\"\r\n)\r\n\r\nfunc init() {\r\n\tPanda = grc20.NewAdminToken(\"Pandainu\", \"PND\", 6)\r\n\tPanda.Mint(admin, 694200000000) // @administrator\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn Panda.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := Panda.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := Panda.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tPanda.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tPanda.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tPanda.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tPanda.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tPanda.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn Panda.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := Panda.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvEx5lbGHKpt2h7AX4cH2a6x1tiHZqoOBbWliLaePEFz"},"signature":"AJgQ5NicZlnW8ii8a2ufOQ1J5TqYABkqjr/f0VNQ0bRL6CzNDfEkDh8WGF/uzz6ioXHSM/DiF1J1GWhE1sXLFg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"210485"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcwsplxyxz5pruc5hy9whwjxwwh35s4v37yqrr","package":{"Name":"panda","Path":"gno.land/r/demo/panda","Files":[{"Name":"GRC20.gno","Body":"package Panda\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tPanda  *grc20.AdminToken\r\n\tadmin std.Address = \"g1kcwsplxyxz5pruc5hy9whwjxwwh35s4v37yqrr\"\r\n)\r\n\r\nfunc init() {\r\n\tPanda = grc20.NewAdminToken(\"Pandainu\", \"PND\", 6)\r\n\tPanda.Mint(admin, 694200000000) // @administrator\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn Panda.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := Panda.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := Panda.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tPanda.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tPanda.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tPanda.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tPanda.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tPanda.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn Panda.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := Panda.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvEx5lbGHKpt2h7AX4cH2a6x1tiHZqoOBbWliLaePEFz"},"signature":"1lteyBMNYc4VMkHQ6v11FnID9PnDy3MQVY/UR5/YsvNnqcVeJe3dv082ifJY4XZxv2P35vHsF27Zfflxn3V4rQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"210487"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcwsplxyxz5pruc5hy9whwjxwwh35s4v37yqrr","package":{"Name":"Panda","Path":"gno.land/r/demo/Panda","Files":[{"Name":"GRC20.gno","Body":"package Panda\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tPanda  *grc20.AdminToken\r\n\tadmin std.Address = \"g1kcwsplxyxz5pruc5hy9whwjxwwh35s4v37yqrr\"\r\n)\r\n\r\nfunc init() {\r\n\tPanda = grc20.NewAdminToken(\"Pandainu\", \"PND\", 6)\r\n\tPanda.Mint(admin, 694200000000) // @administrator\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn Panda.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := Panda.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := Panda.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tPanda.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tPanda.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tPanda.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tPanda.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tPanda.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn Panda.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := Panda.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvEx5lbGHKpt2h7AX4cH2a6x1tiHZqoOBbWliLaePEFz"},"signature":"lXissb6gi5EAfkfW5hTBeJzDY8T6sd2sowS0J6Ycoi0X8oV+2zVHliAZ3vbjB4qu+0JfVp3Bn57JCKUjWlL1oA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"210490"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcwsplxyxz5pruc5hy9whwjxwwh35s4v37yqrr","package":{"Name":"Pandainu","Path":"gno.land/r/demo/Pandainu","Files":[{"Name":"GRC20.gno","Body":"package Panda\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tPanda  *grc20.AdminToken\r\n\tadmin std.Address = \"g1kcwsplxyxz5pruc5hy9whwjxwwh35s4v37yqrr\"\r\n)\r\n\r\nfunc init() {\r\n\tPanda = grc20.NewAdminToken(\"Pandainu\", \"PND\", 6)\r\n\tPanda.Mint(admin, 694200000000) // @administrator\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn Panda.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := Panda.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := Panda.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tPanda.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tPanda.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tPanda.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tPanda.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tPanda.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn Panda.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := Panda.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvEx5lbGHKpt2h7AX4cH2a6x1tiHZqoOBbWliLaePEFz"},"signature":"VqE/DCqPmulUe1wING3zGaDzXohoZtQgDya0Lew9YmxMb1ifuKpSLdAamPcajH0lz/aIqSAn/ioE6DnNd9lavA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"210492"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcwsplxyxz5pruc5hy9whwjxwwh35s4v37yqrr","package":{"Name":"panda","Path":"gno.land/r/demo/panda","Files":[{"Name":"GRC20.gno","Body":"package panda\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tpanda  *grc20.AdminToken\r\n\tadmin std.Address = \"g1kcwsplxyxz5pruc5hy9whwjxwwh35s4v37yqrr\"\r\n)\r\n\r\nfunc init() {\r\n\tpanda = grc20.NewAdminToken(\"pandaToken\", \"panda\", 6)\r\n\tpanda.Mint(admin, 1000000000) // @administrator\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn panda.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := panda.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := panda.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tpanda.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tpanda.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tpanda.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tpanda.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tpanda.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn panda.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := panda.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvEx5lbGHKpt2h7AX4cH2a6x1tiHZqoOBbWliLaePEFz"},"signature":"zdOEW584K+8eGCl5dHa8Lw1s6FZ+HOnUvIW+3fT4C5p5r1HGFGYK6acXMEZVewP+vAiywvWi9NBkHhpU09FaFg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"210502"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g14uqvtc6045a9spq702ajsn9g95p6u2vckwr4ce","package":{"Name":"momox","Path":"gno.land/p/demo/momox","Files":[{"Name":"GRC20.gno","Body":"package momox\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tmomox  *grc20.AdminToken\r\n\tadmin std.Address = \"g14uqvtc6045a9spq702ajsn9g95p6u2vckwr4ce\"\r\n)\r\n\r\nfunc init() {\r\n\tmomox = grc20.NewAdminToken(\"momoxToken\", \"mmx\", 6)\r\n\tmomox.Mint(admin, 21000000) // @administrator\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn momox.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := momox.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := momox.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tmomox.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tmomox.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tmomox.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tmomox.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tmomox.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn momox.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := momox.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuvcvwRm1ELCjea0CNNAuBF2+i+9imT+MY0B4CTCOpnl"},"signature":"NYBdLV4urkaqPKuahLjPZ9vuWvwlYZ4JHlrahLPdgH57wBeZtKBabeb49B2II1REl/iRpxrmK8Dnbw3sCjXQHA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"210505"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcwsplxyxz5pruc5hy9whwjxwwh35s4v37yqrr","package":{"Name":"panda","Path":"gno.land/r/demo/panda","Files":[{"Name":"GRC20.gno","Body":"package panda\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tpanda  *grc20.AdminToken\r\n\tadmin std.Address = \"g1kcwsplxyxz5pruc5hy9whwjxwwh35s4v37yqrr\"\r\n)\r\n\r\nfunc init() {\r\n\tpanda = grc20.NewAdminToken(\"PND\", \"panda\", 6)\r\n\tpanda.Mint(admin, 690000000000) // @administrator\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn panda.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := panda.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := panda.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tpanda.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tpanda.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tpanda.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tpanda.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tpanda.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn panda.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := panda.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvEx5lbGHKpt2h7AX4cH2a6x1tiHZqoOBbWliLaePEFz"},"signature":"yCzp6Zw+cVcbC0Ao9ACYlkkX0My+kF6zPyo3Qy27Lhwx0CPhi9UWKV3FzpyJLUgXacSCpx1Emx65+d5hIb6O4w=="}],"memo":"Deployed through play.gno.land"},"blockNum":"210508"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g14uqvtc6045a9spq702ajsn9g95p6u2vckwr4ce","package":{"Name":"momox","Path":"gno.land/p/demo/momox","Files":[{"Name":"GRC20.gno","Body":"package momox\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tmomox  *grc20.AdminToken\r\n\tadmin std.Address = \"g14uqvtc6045a9spq702ajsn9g95p6u2vckwr4ce\"\r\n)\r\n\r\nfunc init() {\r\n\tmomox = grc20.NewAdminToken(\"momoxToken\", \"mmx\", 6)\r\n\tmomox.Mint(admin, 21000000) // @administrator\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn momox.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := momox.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := momox.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tmomox.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tmomox.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tmomox.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tmomox.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tmomox.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn momox.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := momox.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuvcvwRm1ELCjea0CNNAuBF2+i+9imT+MY0B4CTCOpnl"},"signature":"d0wlAlENBX0pcqTYjr6qqios7qcRkBEXuPoAKWu6T24UBY84bDbXjRT1iosIXRTuAseGxydJpUJlWtrvMoJSZA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"210514"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcwsplxyxz5pruc5hy9whwjxwwh35s4v37yqrr","package":{"Name":"boo","Path":"gno.land/r/demo/boo","Files":[{"Name":"GRC20.gno","Body":"package boo\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tboo  *grc20.AdminToken\r\n\tadmin std.Address = \"g1kcwsplxyxz5pruc5hy9whwjxwwh35s4v37yqrr\"\r\n)\r\n\r\nfunc init() {\r\n\tboo = grc20.NewAdminToken(\"booToken\", \"boo\", 6)\r\n\tboo.Mint(admin, 1000000000) // @administrator\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn boo.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := boo.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := boo.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tboo.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tboo.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tboo.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tboo.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tboo.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn boo.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := boo.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvEx5lbGHKpt2h7AX4cH2a6x1tiHZqoOBbWliLaePEFz"},"signature":"0V7/wTal23ujMOkO0k7MQPFtFaoeXMhIh6dq1yN6c5MEpMZCVE9cybbhTZSdQnJGxvOCnHHdlJv/Cp+OUoTgug=="}],"memo":"Deployed through play.gno.land"},"blockNum":"210522"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g19nvckgd3ckkfjzp52s74gcxs09twns75jenqy5","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"s9z7eSVxrpIp2sNtdHhwVIomdiAto7nhfl8SEdhokExVIfqaRL8FFHw2/TRu8/XWygoJYOqz/bgK56GN91jAZA=="}],"memo":""},"blockNum":"210543"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g19nvckgd3ckkfjzp52s74gcxs09twns75jenqy5","package":{"Name":"hello","Path":"gno.land/r/gno/hello","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ao3VrKUvclYih7IHIQZwCjYs8m/odUwj6+d4IxWDdhSN"},"signature":"Mtxg6isXDRnGUSLDguzBMKkjzRxRqZ6BqnyttwvcUj4TDP6M8xOWTk1IXrJThP4wa1rCDR21AT6slDRaXU6Qow=="}],"memo":"Deployed through play.gno.land"},"blockNum":"210545"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g19nvckgd3ckkfjzp52s74gcxs09twns75jenqy5","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"p1NxTDRoRTmV7XEs8GMERN1oL7s1EYPHAHRTKDWvEQQOh3+RlTX4BIxKsX75TtaUF8YortLr6l7BQQRGzB/aCw=="}],"memo":""},"blockNum":"210559"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g19nvckgd3ckkfjzp52s74gcxs09twns75jenqy5","package":{"Name":"captain","Path":"gno.land/r/demo/captain","Files":[{"Name":"GRC20.gno","Body":"package captain\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tcaptain  *grc20.AdminToken\r\n\tadmin std.Address = \"g19nvckgd3ckkfjzp52s74gcxs09twns75jenqy5\"\r\n)\r\n\r\nfunc init() {\r\n\tcaptain = grc20.NewAdminToken(\"captainToken\", \"captain\", 6)\r\n\tcaptain.Mint(admin, 1000000000) // @administrator\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn captain.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := captain.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := captain.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tcaptain.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tcaptain.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tcaptain.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tcaptain.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tcaptain.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn captain.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := captain.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ao3VrKUvclYih7IHIQZwCjYs8m/odUwj6+d4IxWDdhSN"},"signature":"zwgg70nSAcJXIkdND/NIusLy79JAczILQBZ+hukexQtMrhUmlYrlC1GHwMRn7Pvk/NT11JO7UcVrlFdAJCPOxA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"210561"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g19nvckgd3ckkfjzp52s74gcxs09twns75jenqy5","package":{"Name":"captain","Path":"gno.land/r/demo/captain","Files":[{"Name":"GRC20.gno","Body":"package captain\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tcaptain  *grc20.AdminToken\r\n\tadmin std.Address = \"g19nvckgd3ckkfjzp52s74gcxs09twns75jenqy5\"\r\n)\r\n\r\nfunc init() {\r\n\tcaptain = grc20.NewAdminToken(\"CPN\", \"captain\", 6)\r\n\tcaptain.Mint(admin, 69000000000) // @administrator\r\n}\r\n\r\n// method proxies as public functions.\r\n//\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn captain.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := captain.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := captain.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tcaptain.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tcaptain.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tcaptain.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tcaptain.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tcaptain.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render.\r\n//\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn captain.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := captain.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ao3VrKUvclYih7IHIQZwCjYs8m/odUwj6+d4IxWDdhSN"},"signature":"fVXpl28frJh0hcJQSO6Vrbpx339p+hf9nuaMx44/Sa984DsstdGuIfZbBo9osUnfSocCw/i84rEsIzGnQ9Hb6Q=="}],"memo":"Deployed through play.gno.land"},"blockNum":"210564"}
